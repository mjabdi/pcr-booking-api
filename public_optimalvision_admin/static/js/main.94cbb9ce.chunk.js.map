{"version":3,"sources":["PCR/PriceCalculator.js","OV/DateFormatter.js","Gynae/PriceCalculator.js","GP/PriceCalculator.js","STD/PriceCalculator.js","OV/PriceCalculator.js","PCR/DateFormatter.js","theme.js","GlobalStyles.js","serviceWorker.js","GlobalState.js","images/optimal-vision-logo.png","GlobalPath.js","services/api.js","services/UserService.js","PCR/services/api.js","PCR/services/BookService.js","PCR/services/PDFService.js","PCR/PersonsBox.js","PCR/FindByRef.js","PCR/ResendEmailsDialog.js","PCR/PayDialog.js","PCR/TimeStampDialog.js","Admin/calendar-admin/colors.js","services/InvoiceService.js","InvoiceDialog.js","PCR/BookingDialog.js","PCR/BookingTable.js","PCR/Chart.js","PCR/CurrentVisits.js","PCR/BookingView.js","PCR/ResultsTimeReport.js","PCR/DashboardPreview.js","PCR/UnmatchedRecords.js","PCR/calendar-admin/MonthViewCell.js","PCR/calendar-admin/calendar-util.js","PCR/calendar-admin/MonthView.js","PCR/calendar-admin/WeekViewCell.js","PCR/calendar-admin/WeekView.js","PCR/calendar-admin/DayViewCell.js","PCR/calendar-admin/DayView.js","PCR/calendar-admin/CalendarView.js","Gynae/services/api.js","Gynae/services/BookService.js","Gynae/services/PDFService.js","Gynae/PayDialog.js","Gynae/BookingDialog.js","Gynae/BookingTable.js","Gynae/Chart.js","Gynae/CurrentVisits.js","Gynae/BookingView.js","Gynae/DashboardPreview.js","Gynae/PersonsBox.js","Gynae/FindByRef.js","Gynae/calendar-admin/MonthViewCell.js","Gynae/calendar-admin/calendar-util.js","Gynae/calendar-admin/MonthView.js","Gynae/calendar-admin/WeekViewCell.js","Gynae/calendar-admin/WeekView.js","Gynae/NewBookingDialog.js","Gynae/calendar-admin/DayViewCell.js","Gynae/calendar-admin/DayView.js","Gynae/calendar-admin/CalendarView.js","GP/services/api.js","GP/services/BookService.js","GP/services/PDFService.js","GP/PayDialog.js","GP/BookingDialog.js","GP/BookingTable.js","GP/Chart.js","GP/CurrentVisits.js","GP/BookingView.js","GP/DashboardPreview.js","GP/PersonsBox.js","GP/FindByRef.js","GP/calendar-admin/MonthViewCell.js","GP/calendar-admin/calendar-util.js","GP/calendar-admin/MonthView.js","GP/calendar-admin/WeekViewCell.js","GP/calendar-admin/WeekView.js","GP/NewBookingDialog.js","GP/calendar-admin/DayViewCell.js","GP/calendar-admin/DayView.js","GP/calendar-admin/CalendarView.js","STD/services/api.js","STD/services/BookService.js","STD/services/PDFService.js","STD/PayDialog.js","STD/BookingDialog.js","STD/BookingTable.js","STD/Chart.js","STD/CurrentVisits.js","STD/BookingView.js","STD/DashboardPreview.js","STD/PersonsBox.js","STD/FindByRef.js","STD/calendar-admin/MonthViewCell.js","STD/calendar-admin/calendar-util.js","STD/calendar-admin/MonthView.js","STD/calendar-admin/WeekViewCell.js","STD/calendar-admin/WeekView.js","STD/NewBookingDialog.js","STD/calendar-admin/DayViewCell.js","STD/calendar-admin/DayView.js","STD/calendar-admin/CalendarView.js","OV/services/api.js","OV/services/BookService.js","OV/services/PDFService.js","OV/Corporates.js","OV/PayDialog.js","OV/BookingDialog.js","OV/BookingTable.js","MenuList.js","Role.js","SignIn.js","Menu.js","Dashboard.js","TokenVerifier.js","Navigator.js","App.js","index.js","Gynae/DateFormatter.js","GP/DateFormatter.js","STD/DateFormatter.js"],"names":["calculatePrice","person","price","tr","certificate","antiBodyTest","module","exports","calculateTotalPrice","persons","totalPrice","i","length","FormatDateFromString","str","substr","FormatDateFromStringShortYear","RevertFormatDateFromString","FormatDateFromStringWithSlash","darkBlack","borderColor","theme","createMuiTheme","palette","primary","main","light","secondary","contrastText","common","black","warning","dark","tonalOffset","background","default","spacing","breakpoints","values","xl","lg","md","sm","xs","border","borderWidth","overrides","MuiExpansionPanel","root","position","MuiTableCell","paddingLeft","paddingRight","borderBottom","MuiDivider","backgroundColor","height","MuiPrivateNotchedOutline","MuiListItem","divider","MuiDialog","paper","width","maxWidth","marginLeft","marginRight","MuiTooltip","tooltip","fontSize","MuiExpansionPanelDetails","enGB","responsiveFontSizes","withStyles","outline","color","white","paddingTop","paddingBottom","down","up","display","flexWrap","marginTop","marginBottom","withTheme","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","console","log","onUpdate","onSuccess","catch","error","GlobalState","React","createContext","authToken","backendAPI","getGlobalPath","path","axios","create","baseURL","headers","UserService","setToken","token","signIn","payload","API","post","checkToken","BookService","payBooking","bookingId","paymentMethod","corporate","unPayBooking","getTestsTimeReport","axiosRetry","retries","retryDelay","retryCount","get","getBookingsStatsByDateStr","dateStr","getBookingsCountByDateStr","getAllBookingsCountAll","getBookingsCountByDateStrandTime","time","source","cancelToken","getBookingsByDateStrandTime","getAllBookingsCountByDateStr","getAllBookingsCountByDateStrandTime","getAllBookingsByDateStrandTime","changeBackToBookingMade","id","resendEmailsWithBookingId","regenerateFilesWithBookingId","resendEmails","linkId","regenerateFiles","matchRecords","findBestMatches","getLinkDetails","getLinkDetailsWithBookingId","findBookingByRefBirthDate","bookingRef","birthDate","updateBooking","updateBookingTime","deleteBooking","unDeleteBooking","getBookingsByRef","ref","getBookingById","getAllBookings","limit","getAllTRBookings","getLateBookings","getDeletedBookings","getLiveBookings","getCompletedBookings","getPositiveBookings","getTodayBookings","getOldBookings","getFutureBookings","getRecentBookings","getRecentBookingsAll","getUnmatchedRecords","getUnmatchedRecordsArchived","archiveRecord","unArchiveRecord","PDFService","downloadCovidForm1","responseType","Accept","downloadCovidForm2","downloadPdfResult","downloadPdfCert","downloadPdfLabReport","makeStyles","box","padding","borderRadius","textAlign","boxRed","boxInfo","ul","listStyle","margin","li","icon","lineThrough","textDecoration","heading","typography","pxToRem","flexBasis","flexShrink","text","secondaryHeading","infoDetails","infoTitle","fontWeight","infoData","title","Accordion","AccordionDeleted","DownloadForm","infoDataCharges","infoDataChargesHigher","BookedLabel","borderLeft","PatientAttendedLabel","SampleTakenLabel","ReportSentLabel","ReportCertSentLabel","PositiveLabel","EditButton","RestoreButton","DeleteButton","SaveButton","CancelButton","TextBox","checkIcon","closeIcon","centeredLabel","alignItems","flexDirection","avatar","form","Find","Clear","TextField","NoRecordsFound","PersonsBox","refreshButton","RefLink","cursor","archiveButton","smartMatchButton","matchButton","resendButton","resendFilesButton","cancelButton","colorPrimary","bar","LinearProgress","backdrop","zIndex","drawer","itemTitle","itemData","InvoiceService","createInvoice","updateInvoice","invoiceNumber","deleteinvoice","getInvoiceByBookingId","getInvoiceByInvoiceNumber","getCodeDetails","code","getAllCodes","downloadInvoice","emailInvoice","email","ResendEmailsButton","PayButton","PayLabel","checkIconSmall","printInvoiceButton","editInvoiceButton","HideNowRows","top","left","justifyItems","ExportToExcelButton","ExportToExcelButtonInline","table","borderCollapse","th","verticalAlign","fontcolor","td","topSelect","minWidth","createData","amount","undefined","depositContext","flex","bookingBox","minHeight","boxShadow","align","seeMore","Math","PI","ReportLabels","AverageLabel","right","less12Label","less24Label","less36Label","overflow","fixedHeight","downloadPDFButton","Container","ContainerPast","DayLabel","DayLabelToday","lineHight","DayLabelDisabled","BookingCountLabel","BookingCountLabelBusy","LoadingProgress","BookingCountGauge","bottom","CalendarUtil","getMonthRange","month","year","calendar","Calendar","SUNDAY","itermonthdates","overflowY","overflowX","bookingBoxSampleTaken","bookingBoxPositive","bookingBoxReportSent","titleLabel","titleLabelToday","fontColor","changeDepositBooking","deposit","addNewBooking","sendRegFormEmail","getShouldRefundsCount","manualRefundBooking","refundBooking","changeToPatientAttended","downloadGynaeRegForm","PriceLabelPaid","PriceLabelNotPaid","notifyIcon","CalendarIcon","DateTimeLabel","bookingBoxNew","transition","downloadGPRegForm","downloadSTDRegForm","corporates","useStyles","dialogTitle","Transition","forwardRef","props","Slide","direction","PaperComponent","handle","cancel","Paper","BookingDialog","classes","useContext","setState","useState","setEmailSent","setEmailSentInvoice","edit","editMode","setEditMode","delete","deleteMode","setDeleteMode","restore","restoreMode","setRestoreMode","saving","deleting","setDeleting","restoring","setRestoring","validationError","setValidationError","bookingDate","setBookingDate","bookingTime","setBookingTime","fullname","setFullname","setEmail","tel","setTel","refreshData","setRefreshData","booking","setBooking","setRecordChanged","fieldChanged","setFieldChanged","setInvoice","useEffect","open","setTimeout","fullnameChanged","event","target","value","handleDeleteModeChanged","del","_id","bookingService","res","err","handleRestoreModeChanged","data","bookingDialogDataChanged","bookingPayChanged","Fragment","Dialog","TransitionComponent","keepMounted","onClose","aria-labelledby","aria-describedby","DialogTitle","className","Grid","container","justify","item","style","deleted","Tooltip","DialogContent","hidden","fullWidth","bookingDateError","onChange","inputProps","bookingTimeError","Divider","phone","toUpperCase","faceToFaceConsultation","telephoneConsultation","Button","type","variant","onClick","disabled","deleteButtonDisabled","OTCCharges","Backdrop","CircularProgress","getTableTitle","BookingTable","topCount","setTopCount","openDialogExcel","setOpenDialogExcel","Date","getTime","fromDate","setFromDate","untilDate","setUntilDate","dateformat","fromDateStr","setFromDateStr","untilDateStr","seUntilDateStr","justCorporate","setJustCorporate","chkDate","setChkDate","chkForename","setChkForename","chkSurname","setChkSurname","chkDOB","setChkDOB","chkEmail","setChkEmail","chkTel","setChkTel","chkCertificate","setChkCertidicate","chkAntiBodyTest","setChkAntiBodyTest","chkextRef","setChkExtRef","chkPrice","setChkPrice","columns","date","field","headerName","renderCell","params","openDetailsDialog","valueFormatter","formatTimeStamp","valueGetter","getValue","bookings","cachedBookings","isFetching","setData","setSelectedRow","selectedBooking","setSelectedBooking","seeDetailsDialogOpen","setSeeDetailsDialogOpen","setCorporate","filter","setFilter","useRef","timeStamp","todayStr","timeStampStr","loadData","api","trim","filteredData","element","toLowerCase","indexOf","find","page","setPage","placement","IconButton","showCreateExcel","startIcon","faFileExcel","size","label","name","autoComplete","FormControl","InputLabel","Select","labelId","MenuItem","rows","autoPageSize","onPageChange","onSelectionChange","newSelection","maxHeight","row","FormControlLabel","control","Switch","checked","formControl","map","utils","DateFnsUtils","disableToolbar","format","KeyboardButtonProps","filename","sheet","buttonText","Checkbox","paid","paidBy","forenameCapital","surnameCapital","extRef","PriceCalculator","MenuList_OV_Admin","index","getMenuContent","role","getMenuRole","getMenuId","MenuList","getMenuIndex","getRole","sessionStorage","getItem","setRole","setItem","image","backgroundImage","backgroundRepeat","grey","backgroundSize","backgroundPosition","submit","alert","pageBg","appbarCenter","logoImage","appbarTitle","adminPanelLabel","SignIn","history","useMediaQuery","useHistory","password","setPassword","username","setUsername","saveChecked","setSaveChecked","showPassword","setShowPassword","setError","submiting","setSubmiting","status","localStorage","signedIn","roles","currentMenuIndex","push","component","CssBaseline","elevation","src","alt","Avatar","Typography","Alert","severity","lineHeight","required","on","autoFocus","clsx","textField","onKeyPress","key","htmlFor","OutlinedInput","endAdornment","InputAdornment","tabindex","aria-label","onMouseDown","preventDefault","Visibility","VisibilityOff","labelWidth","Box","mt","iconSelected","menuText","Badge","MyMenu","selectedIndex","setSelectedIndex","updateShouldRefundsCount","a","GyaneBookService","shouldRefunsCount","count","List","StyledMenu","getContentAnchorEl","anchorOrigin","vertical","horizontal","transformOrigin","StyledMenuApps","toolbar","toolbarIcon","justifyContent","mixins","appBar","transitions","easing","sharp","duration","leavingScreen","appBarShift","enteringScreen","menuButton","menuButtonHidden","flexGrow","drawerPaper","whiteSpace","opacity","drawerPaperClose","appBarSpacer","content","logoImageMenu","userAvatar","userAvatarSelected","userAvatarBig","appBarText","appBarAppsIcon","appBarAppsIconSelected","usernameLabel","lastLoginLabel","appsLogo","appsBox","appsBoxSelected","appsAdminLabel","appsPCRLabel","appsGynaeLabel","appsGPLabel","appsSTDLabel","appsInToolbar","Dashboard","isMobile","setOpen","setCurrentMenuIndex","anchorUserAvatar","setAnchorUserAvatar","anchorApps","setAnchorApps","handleAppsClose","useLocation","globalPath","split","getMenuIdFromGlobalPath","pathname","scrollTo","appsClicked","getAppsLogo","getAppsLabel","userId","AppBar","Toolbar","edge","currentTarget","e","anchorEl","removeItem","replace","Drawer","getUserIdFromToken","forename","surname","lastLoginTimeStamp","signOutButton","Navigator","loaded","setLoaded","signedUp","forgotPassword","startsWith","URL","process","href","origin","addEventListener","fetch","response","contentType","ready","unregister","reload","checkValidServiceWorker","App","Provider","GlobalStyles","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.94cbb9ce.chunk.js","sourcesContent":["\r\nconst calculatePrice = (person) =>\r\n{\r\n\r\n    var price = 199;\r\n\r\n    if (person.tr)\r\n    {\r\n        price = 250;\r\n    }\r\n    \r\n    if (person.certificate)\r\n    {\r\n        price += 50;\r\n    }\r\n\r\n    if (person.antiBodyTest)\r\n    {\r\n        price += (99 + 50);\r\n    }\r\n\r\n    return price;\r\n\r\n}\r\n\r\nconst calculateTotalPrice = (persons) =>\r\n{\r\n    var totalPrice = 0;\r\n    for (var i = 0 ; i < persons.length ; i++)\r\n    {\r\n        totalPrice += calculatePrice(persons[i]);\r\n    }\r\n\r\n    return totalPrice;\r\n}\r\n\r\nmodule.exports = {\r\n    calculatePrice : calculatePrice,\r\n    calculateTotalPrice : calculateTotalPrice\r\n}","\r\n\r\n\r\nconst FormatDateFromString = (str) =>\r\n{\r\n    if (!str)\r\n    return ''\r\n    \r\n    return `${str.substr(8,2)}-${str.substr(5,2)}-${str.substr(0,4)}`;\r\n}\r\n\r\nconst FormatDateFromStringWithSlash = (str) =>\r\n{\r\n    return `${str.substr(8,2)}/${str.substr(5,2)}/${str.substr(0,4)}`;\r\n}\r\n\r\nconst RevertFormatDateFromString = (str) =>\r\n{\r\n    if (!str)\r\n    return ''\r\n\r\n    return `${str.substr(6,4)}-${str.substr(3,2)}-${str.substr(0,2)}`;\r\n}\r\n\r\n\r\nconst FormatDateFromStringShortYear = (str) =>\r\n{\r\n    if (!str)\r\n    return ''\r\n\r\n    return `${str.substr(8,2)}-${str.substr(5,2)}-${str.substr(2,2)}`;\r\n}\r\n\r\n\r\n\r\nmodule.exports = {\r\n    FormatDateFromString : FormatDateFromString,\r\n    FormatDateFromStringShortYear : FormatDateFromStringShortYear,\r\n    RevertFormatDateFromString: RevertFormatDateFromString,\r\n    FormatDateFromStringWithSlash: FormatDateFromStringWithSlash\r\n}","\r\nconst calculatePrice = (person) =>\r\n{\r\n\r\n    var price = 199;\r\n\r\n    if (person.tr)\r\n    {\r\n        price = 250;\r\n    }\r\n    \r\n    if (person.certificate)\r\n    {\r\n        price += 50;\r\n    }\r\n\r\n    if (person.antiBodyTest)\r\n    {\r\n        price += (99 + 50);\r\n    }\r\n\r\n    return price;\r\n\r\n}\r\n\r\nconst calculateTotalPrice = (persons) =>\r\n{\r\n    var totalPrice = 0;\r\n    for (var i = 0 ; i < persons.length ; i++)\r\n    {\r\n        totalPrice += calculatePrice(persons[i]);\r\n    }\r\n\r\n    return totalPrice;\r\n}\r\n\r\nmodule.exports = {\r\n    calculatePrice : calculatePrice,\r\n    calculateTotalPrice : calculateTotalPrice\r\n}","\r\nconst calculatePrice = (person) =>\r\n{\r\n\r\n    var price = 199;\r\n\r\n    if (person.tr)\r\n    {\r\n        price = 250;\r\n    }\r\n    \r\n    if (person.certificate)\r\n    {\r\n        price += 50;\r\n    }\r\n\r\n    if (person.antiBodyTest)\r\n    {\r\n        price += (99 + 50);\r\n    }\r\n\r\n    return price;\r\n\r\n}\r\n\r\nconst calculateTotalPrice = (persons) =>\r\n{\r\n    var totalPrice = 0;\r\n    for (var i = 0 ; i < persons.length ; i++)\r\n    {\r\n        totalPrice += calculatePrice(persons[i]);\r\n    }\r\n\r\n    return totalPrice;\r\n}\r\n\r\nmodule.exports = {\r\n    calculatePrice : calculatePrice,\r\n    calculateTotalPrice : calculateTotalPrice\r\n}","\r\nconst calculatePrice = (person) =>\r\n{\r\n\r\n    var price = 199;\r\n\r\n    if (person.tr)\r\n    {\r\n        price = 250;\r\n    }\r\n    \r\n    if (person.certificate)\r\n    {\r\n        price += 50;\r\n    }\r\n\r\n    if (person.antiBodyTest)\r\n    {\r\n        price += (99 + 50);\r\n    }\r\n\r\n    return price;\r\n\r\n}\r\n\r\nconst calculateTotalPrice = (persons) =>\r\n{\r\n    var totalPrice = 0;\r\n    for (var i = 0 ; i < persons.length ; i++)\r\n    {\r\n        totalPrice += calculatePrice(persons[i]);\r\n    }\r\n\r\n    return totalPrice;\r\n}\r\n\r\nmodule.exports = {\r\n    calculatePrice : calculatePrice,\r\n    calculateTotalPrice : calculateTotalPrice\r\n}","\r\nconst calculatePrice = (person) =>\r\n{\r\n\r\n    var price = 199;\r\n\r\n    if (person.tr)\r\n    {\r\n        price = 250;\r\n    }\r\n    \r\n    if (person.certificate)\r\n    {\r\n        price += 50;\r\n    }\r\n\r\n    if (person.antiBodyTest)\r\n    {\r\n        price += (99 + 50);\r\n    }\r\n\r\n    return price;\r\n\r\n}\r\n\r\nconst calculateTotalPrice = (persons) =>\r\n{\r\n    var totalPrice = 0;\r\n    for (var i = 0 ; i < persons.length ; i++)\r\n    {\r\n        totalPrice += calculatePrice(persons[i]);\r\n    }\r\n\r\n    return totalPrice;\r\n}\r\n\r\nmodule.exports = {\r\n    calculatePrice : calculatePrice,\r\n    calculateTotalPrice : calculateTotalPrice\r\n}","\r\n\r\n\r\nconst FormatDateFromString = (str) =>\r\n{\r\n    return `${str.substr(8,2)}-${str.substr(5,2)}-${str.substr(0,4)}`;\r\n}\r\n\r\nconst FormatDateFromStringWithSlash = (str) =>\r\n{\r\n    return `${str.substr(8,2)}/${str.substr(5,2)}/${str.substr(0,4)}`;\r\n}\r\n\r\nconst RevertFormatDateFromString = (str) =>\r\n{\r\n    return `${str.substr(6,4)}-${str.substr(3,2)}-${str.substr(0,2)}`;\r\n}\r\n\r\n\r\nconst FormatDateFromStringShortYear = (str) =>\r\n{\r\n    return `${str.substr(8,2)}-${str.substr(5,2)}-${str.substr(2,2)}`;\r\n}\r\n\r\n\r\n\r\nmodule.exports = {\r\n    FormatDateFromString : FormatDateFromString,\r\n    FormatDateFromStringShortYear : FormatDateFromStringShortYear,\r\n    RevertFormatDateFromString: RevertFormatDateFromString,\r\n    FormatDateFromStringWithSlash: FormatDateFromStringWithSlash\r\n}","import { createMuiTheme, responsiveFontSizes } from \"@material-ui/core\";\r\nimport { enGB } from '@material-ui/core/locale';\r\n\r\n\r\nconst black = \"#212121\";\r\nconst darkBlack = \"rgb(36, 40, 44)\";\r\nconst background = \"#f9f9f9\";\r\n\r\nconst warningLight = \"rgba(253, 200, 69, .3)\";\r\nconst warningMain = \"rgba(253, 200, 69, .5)\";\r\nconst warningDark = \"rgba(253, 200, 69, .7)\";\r\n\r\n// border\r\nconst borderWidth = 2;\r\nconst borderColor = \"rgba(0, 0, 0, 0.13)\";\r\n\r\n// breakpoints\r\nconst xl = 1920;\r\nconst lg = 1280;\r\nconst md = 960;\r\nconst sm = 600;\r\nconst xs = 0;\r\n\r\n// spacing\r\nconst spacing = 8;\r\n\r\nconst theme = createMuiTheme({\r\n\r\n  palette: {\r\n\r\n    primary: { main: \"#03b5f2\",\r\n               light: \"#86d5f0\"\r\n              //  dark: \"#0288D1\",\r\n              //  light: \"#B3E5FC\"\r\n\r\n      },\r\n    secondary: { main: \"#005eab\", contrastText:\"#fff\" },\r\n    common: {\r\n      black,\r\n      darkBlack\r\n    },\r\n    warning: {\r\n      light: warningLight,\r\n      main: warningMain,\r\n      dark: warningDark\r\n    },\r\n    // Used to shift a color's luminance by approximately\r\n    // two indexes within its tonal palette.\r\n    // E.g., shift from Red 500 to Red 300 or Red 700.\r\n    tonalOffset: 0.2,\r\n    background: {\r\n      default: background\r\n    },\r\n    spacing\r\n  },\r\n  breakpoints: {\r\n    // Define custom breakpoint values.\r\n    // These will apply to Material-UI components that use responsive\r\n    // breakpoints, such as `Grid` and `Hidden`. You can also use the\r\n    // theme breakpoint functions `up`, `down`, and `between` to create\r\n    // media queries for these breakpoints\r\n    values: {\r\n      xl,\r\n      lg,\r\n      md,\r\n      sm,\r\n      xs\r\n    }\r\n  },\r\n  border: {\r\n    borderColor: borderColor,\r\n    borderWidth: borderWidth\r\n  },\r\n  overrides: {\r\n    MuiExpansionPanel: {\r\n      root: {\r\n        position: \"static\"\r\n      }\r\n    },\r\n    MuiTableCell: {\r\n      root: {\r\n        paddingLeft: spacing * 2,\r\n        paddingRight: spacing * 2,\r\n        borderBottom: `${borderWidth}px solid ${borderColor}`,\r\n        [`@media (max-width:  ${sm}px)`]: {\r\n          paddingLeft: spacing,\r\n          paddingRight: spacing\r\n        }\r\n      }\r\n    },\r\n    MuiDivider: {\r\n      root: {\r\n        backgroundColor: borderColor,\r\n        height: borderWidth\r\n      }\r\n    },\r\n    MuiPrivateNotchedOutline: {\r\n      root: {\r\n        borderWidth: borderWidth\r\n      }\r\n    },\r\n    MuiListItem: {\r\n      divider: {\r\n        borderBottom: `${borderWidth}px solid ${borderColor}`\r\n      }\r\n    },\r\n    MuiDialog: {\r\n      paper: {\r\n        width: \"100%\",\r\n        maxWidth: 430,\r\n        marginLeft: spacing,\r\n        marginRight: spacing\r\n      }\r\n    },\r\n    MuiTooltip: {\r\n      tooltip: {\r\n        backgroundColor: darkBlack,\r\n        fontSize: \"0.7rem\"\r\n      }\r\n    },\r\n    MuiExpansionPanelDetails: {\r\n      root: {\r\n        [`@media (max-width:  ${sm}px)`]: {\r\n          paddingLeft: spacing,\r\n          paddingRight: spacing\r\n        }\r\n      }\r\n    }\r\n  },\r\n \r\n}, enGB);\r\n\r\nexport default responsiveFontSizes(theme);\r\n","import { withStyles } from \"@material-ui/core\";\r\n\r\nconst styles = theme => ({\r\n  \"@global\": {\r\n    /**\r\n     * Disable the focus outline, which is default on some browsers like\r\n     * chrome when focusing elements\r\n     */\r\n    \"*:focus\": {\r\n      outline: 0\r\n    },\r\n    \".text-white\": {\r\n      color: theme.palette.common.white\r\n    },\r\n    \".listItemLeftPadding\": {\r\n      paddingTop: `${theme.spacing(1.75)}px !important`,\r\n      paddingBottom: `${theme.spacing(1.75)}px !important`,\r\n      paddingLeft: `${theme.spacing(4)}px !important`,\r\n      [theme.breakpoints.down(\"sm\")]: {\r\n        paddingLeft: `${theme.spacing(4)}px !important`\r\n      },\r\n      \"@media (max-width:  420px)\": {\r\n        paddingLeft: `${theme.spacing(1)}px !important`\r\n      }\r\n    },\r\n    \".container\": {\r\n      width: \"100%\",\r\n      paddingRight: theme.spacing(4),\r\n      paddingLeft: theme.spacing(4),\r\n      marginRight: \"auto\",\r\n      marginLeft: \"auto\",\r\n      [theme.breakpoints.up(\"sm\")]: {\r\n        maxWidth: 540\r\n      },\r\n      [theme.breakpoints.up(\"md\")]: {\r\n        maxWidth: 720\r\n      },\r\n      [theme.breakpoints.up(\"lg\")]: {\r\n        maxWidth: 1170\r\n      }\r\n    },\r\n    \".row\": {\r\n      display: \"flex\",\r\n      flexWrap: \"wrap\",\r\n      marginRight: -theme.spacing(2),\r\n      marginLeft: -theme.spacing(2)\r\n    },\r\n    \".container-fluid\": {\r\n      width: \"100%\",\r\n      paddingRight: theme.spacing(2),\r\n      paddingLeft: theme.spacing(2),\r\n      marginRight: \"auto\",\r\n      marginLeft: \"auto\",\r\n      maxWidth: 1370\r\n    },\r\n    \".lg-mg-top\": {\r\n      marginTop: `${theme.spacing(20)}px !important`,\r\n      [theme.breakpoints.down(\"md\")]: {\r\n        marginTop: `${theme.spacing(18)}px !important`\r\n      },\r\n      [theme.breakpoints.down(\"sm\")]: {\r\n        marginTop: `${theme.spacing(16)}px !important`\r\n      },\r\n      [theme.breakpoints.down(\"xs\")]: {\r\n        marginTop: `${theme.spacing(14)}px !important`\r\n      }\r\n    },\r\n    \".lg-mg-bottom\": {\r\n      marginBottom: `${theme.spacing(20)}px !important`,\r\n      [theme.breakpoints.down(\"md\")]: {\r\n        marginBottom: `${theme.spacing(18)}px !important`\r\n      },\r\n      [theme.breakpoints.down(\"sm\")]: {\r\n        marginBottom: `${theme.spacing(16)}px !important`\r\n      },\r\n      [theme.breakpoints.down(\"xs\")]: {\r\n        marginBottom: `${theme.spacing(14)}px !important`\r\n      }\r\n    },\r\n    \".lg-p-top\": {\r\n      paddingTop: `${theme.spacing(20)}px !important`,\r\n      [theme.breakpoints.down(\"md\")]: {\r\n        paddingTop: `${theme.spacing(18)}px !important`\r\n      },\r\n      [theme.breakpoints.down(\"sm\")]: {\r\n        paddingTop: `${theme.spacing(16)}px !important`\r\n      },\r\n      [theme.breakpoints.down(\"xs\")]: {\r\n        paddingTop: `${theme.spacing(14)}px !important`\r\n      }\r\n    }\r\n  }\r\n});\r\n\r\nfunction globalStyles() {\r\n  return null;\r\n}\r\n\r\nexport default withStyles(styles, { withTheme: true })(globalStyles);\r\n","/* eslint-disable */\r\n\r\n// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read http://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === \"localhost\" ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === \"[::1]\" ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener(\"load\", () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            \"This web app is being served cache-first by a service \" +\r\n              \"worker. To learn more, visit http://bit.ly/CRA-PWA\"\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === \"installed\") {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                \"New content is available and will be used when all \" +\r\n                  \"tabs for this page are closed. See http://bit.ly/CRA-PWA.\"\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log(\"Content is cached for offline use.\");\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error(\"Error during service worker registration:\", error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get(\"content-type\");\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf(\"javascript\") === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        \"No internet connection found. App is running in offline mode.\"\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if (\"serviceWorker\" in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react'; \r\nconst GlobalState = React.createContext([{}, () => {}]); \r\nexport default GlobalState;","export default __webpack_public_path__ + \"static/media/optimal-vision-logo.ba03ccd6.png\";","\r\n\r\nexport const authToken = 'Basic QXp1cmXEaWFtb45kOmh1bnRlcjO='\r\n\r\nexport const backendAPI = 'https://www.travelpcrtest.com/'\r\n// export const backendAPI = 'http://localhost:9090/'\r\n\r\nexport function getGlobalPath(path){\r\n    return '/optimalvision/admin' + path\r\n    // return path\r\n}\r\n\r\nexport function getMenuIdFromGlobalPath(globalPath){\r\n    try{\r\n       \r\n        var split = globalPath.split('/')\r\n        if (split && split.length > 0)\r\n        {\r\n            return split[split.length - 1].length > 0 ?  split[split.length - 1] :  split[split.length - 2]\r\n        }\r\n        else\r\n        {\r\n            return ''\r\n        }\r\n    }\r\n    catch(err)\r\n    {\r\n        return ''\r\n    }\r\n}","import axios from 'axios';\r\nimport { authToken, backendAPI } from '../GlobalPath';\r\n\r\nexport default axios.create({\r\n  baseURL: backendAPI,\r\n\r\n  headers : {\r\n      'Authorization' : authToken\r\n  }\r\n});","import API from './api';\r\n\r\nexport default class UserService{\r\n\r\n    static setToken = (token) =>\r\n    {\r\n        this.token = token\r\n    }\r\n  \r\n    static signIn = (payload) =>\r\n    {\r\n        return  API.post('/api/optimalvision/user/signin', payload)\r\n    }\r\n\r\n    static checkToken = (payload) =>\r\n    {\r\n        return  API.post('/api/optimalvision/user/checktoken', payload)\r\n    }\r\n\r\n}\r\n","import axios from 'axios';\r\nimport { authToken, backendAPI } from '../../GlobalPath';\r\n\r\nexport default axios.create({\r\n  baseURL: backendAPI,\r\n  headers : {\r\n      'Authorization' : authToken\r\n  }\r\n});","import API from './api';\r\nimport axiosRetry from 'axios-retry';\r\n\r\nexport default class BookService {\r\n\r\n\r\n   static payBooking = (bookingId, paymentMethod, corporate) =>\r\n   {\r\n      return API.post(`/api/book/paybooking?id=${bookingId}&paymentmethod=${paymentMethod}&corporate=${corporate}`);\r\n   }\r\n\r\n   static unPayBooking = (bookingId) =>\r\n   {\r\n      return API.post(`/api/book/unpaybooking?id=${bookingId}`);\r\n   }\r\n\r\n   static getTestsTimeReport = () =>\r\n   {\r\n      axiosRetry( API, { retries: 3,  retryDelay: (retryCount) => {\r\n         return retryCount * 1000;\r\n       } });\r\n      return API.get(`/api/book/getteststimereport`);\r\n   }\r\n\r\n   static getBookingsStatsByDateStr = (dateStr) =>\r\n   {\r\n      return API.get(`/api/book/getbookingsstatsbydatestr?date=${dateStr}`);\r\n   }\r\n\r\n   static getBookingsCountByDateStr = (dateStr) =>\r\n   {\r\n      return API.get(`/api/book/getbookingscountbydatestr?date=${dateStr}`);\r\n   }\r\n\r\n   static getAllBookingsCountAll = () =>\r\n   {\r\n      return API.get(`/api/book/getallbookingscountall`);\r\n   }\r\n\r\n   static getBookingsCountByDateStrandTime = (dateStr, time, source) =>\r\n   {\r\n      return API.get(`/api/book/getbookingscountbydatestrandtime?date=${dateStr}&time=${time}`, {cancelToken: source.token});\r\n   }\r\n\r\n   static getBookingsByDateStrandTime = (dateStr, time) =>\r\n   {\r\n      return API.get(`/api/book/getbookingsbydatestrandtime?date=${dateStr}&time=${time}`);\r\n   }\r\n\r\n\r\n   static getAllBookingsCountByDateStr = (dateStr) =>\r\n   {\r\n      return API.get(`/api/book/getallbookingscountbydatestr?date=${dateStr}`);\r\n   }\r\n\r\n   static getAllBookingsCountByDateStrandTime = (dateStr, time, source) =>\r\n   {\r\n      return API.get(`/api/book/getallbookingscountbydatestrandtime?date=${dateStr}&time=${time}`, {cancelToken: source.token});\r\n   }\r\n\r\n   static getAllBookingsByDateStrandTime = (dateStr, time) =>\r\n   {\r\n      return API.get(`/api/book/getallbookingsbydatestrandtime?date=${dateStr}&time=${time}`);\r\n   }\r\n\r\n\r\n\r\n\r\n   static changeBackToBookingMade = (id) =>\r\n   {\r\n      return API.post(`/api/book/changebacktobookingmade?id=${id}`);\r\n   }\r\n\r\n   static resendEmailsWithBookingId = (bookingId) =>\r\n   {\r\n      return API.post(`/api/book/resendemailswithbookingid?id=${bookingId}`);\r\n   }\r\n\r\n   static regenerateFilesWithBookingId  = (bookingId) =>\r\n   {\r\n      return API.post(`/api/book/regeneratefileswithbookingid?id=${bookingId}`);\r\n   }\r\n\r\n\r\n   static resendEmails  = (linkId) =>\r\n   {\r\n      return API.post(`/api/book/resendemails?id=${linkId}`);\r\n   }\r\n\r\n   static regenerateFiles  = (linkId) =>\r\n   {\r\n      return API.post(`/api/book/regeneratefiles?id=${linkId}`);\r\n   }\r\n\r\n   static matchRecords  = (bookingId, linkId) =>\r\n   {\r\n      return API.post(`/api/book/matchrecords?bookingid=${bookingId}&linkid=${linkId}`);\r\n   }\r\n\r\n   static findBestMatches = (id) =>\r\n   {\r\n      return API.get(`/api/book/getbestmatchedbookings?id=${id}`);\r\n   } \r\n\r\n   static getLinkDetails = (id) =>\r\n   {\r\n      return API.get(`/api/book/getlinkdetails?id=${id}`);\r\n   } \r\n\r\n   static getLinkDetailsWithBookingId = (id) =>\r\n   {\r\n      return API.get(`/api/book/getlinkdetailswithbookingid?id=${id}`);\r\n   } \r\n\r\n\r\n\r\n   static findBookingByRefBirthDate = (bookingRef, birthDate) =>\r\n   {\r\n      return API.get(`/api/book/getbookingsbyrefandbirthdate?ref=${bookingRef}&birthdate=${birthDate}`);\r\n   }\r\n\r\n   static updateBooking = (payload) =>\r\n   {\r\n      return API.post(`/api/book/updatebookappointment`, payload);\r\n   } \r\n\r\n   static updateBookingTime = (payload) =>\r\n   {\r\n      return API.post(`/api/book/updatebookappointmenttime`, payload);\r\n   } \r\n\r\n   static deleteBooking = (id) =>\r\n   {\r\n      return API.post(`/api/book/deletebookappointment?id=${id}`);\r\n   } \r\n\r\n   static unDeleteBooking = (id) =>\r\n   {\r\n      return API.post(`/api/book/undeletebookappointment?id=${id}`);\r\n   } \r\n   \r\n   \r\n    static getBookingsByRef = (ref) =>\r\n    {\r\n       return API.get(`/api/book/getbookingsbyref?ref=${ref}`);\r\n    }\r\n\r\n    static getBookingById = (id) =>\r\n    {\r\n       return API.get(`/api/book/getbookingbyid?id=${id}`);\r\n    }\r\n\r\n    static getAllBookings = (limit) =>\r\n    {\r\n      if (!limit) limit = 25 \r\n      return API.get(`/api/book/getallbookings?limit=${limit}`);\r\n    }\r\n\r\n    static getAllTRBookings = (limit) =>\r\n    {\r\n      if (!limit) limit = 25 \r\n      return API.get(`/api/book/getalltrbookings?limit=${limit}`);\r\n    }\r\n\r\n    static getLateBookings= () =>\r\n    {\r\n       return API.get(`/api/book/getlatebookings`);\r\n    }\r\n\r\n    static getDeletedBookings= (limit) =>\r\n    {\r\n      if (!limit) limit = 25 \r\n       return API.get(`/api/book/getdeletedbookings?limit=${limit}`);\r\n    }\r\n\r\n    static getLiveBookings= () =>\r\n    {\r\n       return API.get(`/api/book/getlivebookings`);\r\n    }\r\n\r\n    static getCompletedBookings= (limit) =>\r\n    {\r\n      if (!limit) limit = 25 \r\n       return API.get(`/api/book/getcompletedbookings?limit=${limit}`);\r\n    }\r\n\r\n    static getPositiveBookings= () =>\r\n    {\r\n       return API.get(`/api/book/getpositivebookings`);\r\n    }\r\n\r\n\r\n\r\n    static getTodayBookings= () =>\r\n    {\r\n       return API.get(`/api/book/gettodaybookings`);\r\n    }\r\n\r\n    static getOldBookings= (limit) =>\r\n    {\r\n      if (!limit) limit = 25 \r\n       return API.get(`/api/book/getoldbookings?limit=${limit}`);\r\n    }\r\n\r\n    static getFutureBookings= (limit) =>\r\n    {\r\n      if (!limit) limit = 25 \r\n       return API.get(`/api/book/getfuturebookings?limit=${limit}`);\r\n    }\r\n\r\n    static getRecentBookings= () =>\r\n    {\r\n       return API.get(`/api/book/getrecentbookings`);\r\n    }\r\n\r\n    static getRecentBookingsAll= (limit) =>\r\n    {\r\n      if (!limit) limit = 25 \r\n       return API.get(`/api/book/getrecentbookingsall?limit=${limit}`);\r\n    }\r\n\r\n    static getUnmatchedRecords= () =>\r\n    {\r\n       return API.get(`/api/book/getunmatchedrecords`);\r\n    }\r\n\r\n    static getUnmatchedRecordsArchived= () =>\r\n    {\r\n       return API.get(`/api/book/getunmatchedrecordsarchived`);\r\n    }\r\n\r\n    static archiveRecord = (id) =>\r\n    {\r\n       return API.post(`/api/book/archiverecord?id=${id}`);\r\n    }\r\n\r\n    static unArchiveRecord = (id) =>\r\n    {\r\n       return API.post(`/api/book/unarchiverecord?id=${id}`);\r\n    }\r\n\r\n\r\n}","import API from './api';\r\n\r\nexport default class PDFService {\r\n\r\n    static downloadCovidForm1 = (id) =>\r\n    {\r\n       return API.get(`/api/pdf/downloadcovidform1?id=${id}`, {\r\n        responseType: 'arraybuffer',\r\n        id: id,\r\n        headers: {\r\n            Accept: 'application/pdf',\r\n        }\r\n        });\r\n    }\r\n\r\n    static downloadCovidForm2 = (id) =>\r\n    {\r\n       return API.get(`/api/pdf/downloadcovidform2?id=${id}`, {\r\n        responseType: 'arraybuffer',\r\n        headers: {\r\n            Accept: 'application/pdf',\r\n        }\r\n        });\r\n    }\r\n\r\n    static downloadPdfResult = (id) =>\r\n    {\r\n       return API.get(`/api/pdf/downloadpdfresult?id=${id}`, {\r\n        responseType: 'arraybuffer',\r\n        headers: {\r\n            Accept: 'application/pdf',\r\n        }\r\n        });\r\n    }\r\n\r\n    static downloadPdfCert = (id) =>\r\n    {\r\n       return API.get(`/api/pdf/downloadpdfcert?id=${id}`, {\r\n        responseType: 'arraybuffer',\r\n        headers: {\r\n            Accept: 'application/pdf',\r\n        }\r\n        });\r\n    }\r\n\r\n    static downloadPdfLabReport = (id) =>\r\n    {\r\n       return API.get(`/api/pdf/downloadpdflabreport?id=${id}`, {\r\n        responseType: 'arraybuffer',\r\n        headers: {\r\n            Accept: 'application/pdf',\r\n        }\r\n        });\r\n    }\r\n\r\n\r\n}","import React from 'react';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport GlobalState from './../GlobalState';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport Accordion from '@material-ui/core/Accordion';\r\nimport AccordionDetails from '@material-ui/core/AccordionDetails';\r\nimport AccordionSummary from '@material-ui/core/AccordionSummary';\r\nimport ExpandMoreIcon from '@material-ui/icons/ExpandMore';\r\nimport { Button, Checkbox, FormControlLabel, Link, TextField, Tooltip } from '@material-ui/core';\r\nimport PDFService from './services/PDFService';\r\n\r\nimport {calculatePrice} from './PriceCalculator';\r\n\r\n\r\nimport bookingService from './services/BookService';\r\nimport CheckIcon from '@material-ui/icons/Check';\r\nimport CloseIcon from '@material-ui/icons/Close';\r\nimport DeleteIcon from '@material-ui/icons/Delete';\r\n\r\nimport {FormatDateFromString, RevertFormatDateFromString} from './DateFormatter';\r\n\r\nimport PrintIcon from '@material-ui/icons/Print';\r\n\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  box: {\r\n    backgroundColor : \"#373737\",\r\n    color: \"#fff\",\r\n    padding : \"1px\",\r\n    borderRadius : \"4px\",\r\n    textAlign: \"justify\",\r\n    paddingRight: \"40px\"\r\n  },\r\n\r\n  boxRed: {\r\n    backgroundColor : \"#dc2626\",\r\n    color: \"#fff\",\r\n    padding : \"1px\",\r\n    borderRadius : \"4px\",\r\n    textAlign: \"justify\",\r\n    paddingRight: \"40px\"\r\n  },\r\n\r\n  boxInfo: {\r\n    textAlign: \"justify\",\r\n    backgroundColor : \"#fafafa\",\r\n    color: \"#333\",\r\n    padding : \"1px\",\r\n    borderRadius : \"4px\",\r\n    paddingRight: \"40px\",\r\n    border: \"1px solid #eee\",\r\n  },\r\n\r\n  ul: {\r\n     listStyle: \"none\",\r\n     padding: \"0\",\r\n     margin: \"0\"\r\n  },\r\n\r\n  li: {\r\n    marginBottom : \"15px\"\r\n  },\r\n\r\n\r\n  icon: {\r\n    marginRight : \"8px\"\r\n  },\r\n\r\n  root: {\r\n    width: '100%',\r\n  },\r\n\r\n  lineThrough:{\r\n    textDecoration : \"line-through\",\r\n  },\r\n\r\n\r\n\r\n  heading: {\r\n    fontSize: theme.typography.pxToRem(15),\r\n    flexBasis: '33.33%',\r\n    flexShrink: 0,\r\n    color: theme.palette.text.secondary,\r\n  },\r\n  secondaryHeading: {\r\n    fontSize: theme.typography.pxToRem(15),\r\n  },\r\n\r\n  infoDetails:{\r\n    textAlign: \"left\",\r\n  },\r\n\r\n  infoTitle:{\r\n    fontWeight: \"800\",\r\n    marginRight: \"10px\"\r\n  },\r\n\r\n  infoData:{\r\n    fontWeight: \"400\",\r\n  },\r\n\r\n  title:\r\n  {\r\n    // textAlign : \"center\",\r\n    // fontWeight : \"500\",\r\n    // margin: \"10px\",\r\n    // backgroundColor : \"#eee\",\r\n    // padding : \"10px\",\r\n    // borderRadius : \"4px\"\r\n    textAlign: \"center\",\r\n    fontWeight : \"600\",\r\n    marginLeft: \"10px\",\r\n    marginBottom: \"5px\"\r\n\r\n  },\r\n\r\n  Accordion:{\r\n    backgroundColor : \"#f5f5f5\",\r\n    color: \"#222\"\r\n  },\r\n\r\n  AccordionDeleted:{\r\n    backgroundColor : \"#aaa\",\r\n    color: \"#555\"\r\n  },\r\n\r\n  DownloadForm:{\r\n      marginTop: \"10px\",\r\n      marginBottom : \"10px\"\r\n  },\r\n\r\n  infoDataCharges:{\r\n    fontSize : \"18px\",\r\n    color: \"green\",\r\n    fontWeight : \"600\"\r\n  },\r\n\r\n  infoDataChargesHigher:{\r\n    fontSize : \"18px\",\r\n    color: \"red\",\r\n    fontWeight : \"600\"\r\n  },\r\n  BookedLabel:{\r\n    color: \"#606060\",\r\n    paddingRight: \"10px\",\r\n    paddingLeft: \"5px\",\r\n    paddingBottom: \"3px\",\r\n    paddingTop: \"3px\",\r\n    fontWeight: \"800\",\r\n    borderLeft: \"5px solid\",\r\n    borderColor: \"#606060\"\r\n  },\r\n\r\n  PatientAttendedLabel:{\r\n    color: \"#0066aa\",\r\n    paddingRight: \"10px\",\r\n    paddingLeft: \"5px\",\r\n    paddingBottom: \"3px\",\r\n    paddingTop: \"3px\",\r\n    fontWeight: \"800\",\r\n    borderLeft: \"5px solid\",\r\n    borderColor: \"#0066aa\"\r\n  },\r\n\r\n  SampleTakenLabel:{\r\n    color: \"#0066cc\",\r\n    paddingRight: \"10px\",\r\n    paddingLeft: \"5px\",\r\n    paddingBottom: \"3px\",\r\n    paddingTop: \"3px\",\r\n    fontWeight: \"800\",\r\n    borderLeft: \"5px solid\",\r\n    borderColor: \"#0066cc\"\r\n  },\r\n\r\n  ReportSentLabel:{\r\n    color: \"#009900\",\r\n    paddingRight: \"10px\",\r\n    paddingLeft: \"5px\",\r\n    paddingBottom: \"3px\",\r\n    paddingTop: \"3px\",\r\n    fontWeight: \"800\",\r\n    borderLeft: \"5px solid\",\r\n    borderColor: \"#009900\"\r\n  },\r\n\r\n  ReportCertSentLabel:{\r\n    color: \"#009900\",\r\n    paddingRight: \"10px\",\r\n    paddingLeft: \"5px\",\r\n    paddingBottom: \"3px\",\r\n    paddingTop: \"3px\",\r\n    fontWeight: \"800\",\r\n    borderLeft: \"5px solid\",\r\n    borderColor: \"#009900\"\r\n  },\r\n\r\n  PositiveLabel:{\r\n    color: \"red\",\r\n    paddingRight: \"10px\",\r\n    paddingLeft: \"5px\",\r\n    paddingBottom: \"3px\",\r\n    paddingTop: \"3px\",\r\n    fontWeight: \"800\",\r\n    borderLeft: \"5px solid\",\r\n    borderColor: \"red\"\r\n  },\r\n\r\n\r\n  EditButton:\r\n  {\r\n    marginBottom : \"20px\",\r\n    backgroundColor : \"#2f942e\",\r\n    \"&:hover\": {\r\n      background: \"green\",\r\n      color: \"#fff\"\r\n    },\r\n    textDecoration : \"none !important\",\r\n    padding: \"10px\"   \r\n  },\r\n\r\n  RestoreButton:\r\n  {\r\n    marginBottom : \"20px\",\r\n    backgroundColor : \"#fafafa\",\r\n    color: \"#555\",\r\n    \"&:hover\": {\r\n      background: \"#f1f1f1\",\r\n      color: \"#111\"\r\n    },\r\n    textDecoration : \"none !important\",\r\n    padding: \"10px\"   \r\n  },\r\n\r\n\r\n  DeleteButton:\r\n  {\r\n    marginBottom : \"20px\",\r\n    backgroundColor : \"#d90015\",\r\n    \"&:hover\": {\r\n      background: \"#b80012\",\r\n      color: \"#fff\"\r\n    },\r\n\r\n    padding: \"10px\"\r\n    \r\n  },\r\n\r\n  SaveButton:\r\n  {\r\n    marginBottom : \"10px\",\r\n    padding: \"10px\",\r\n\r\n    backgroundColor : \"#d1175e\",\r\n    \"&:hover\": {\r\n      background: \"#bd0d50\",\r\n      color: \"#fff\"\r\n    },\r\n\r\n  },\r\n\r\n  CancelButton:\r\n  {\r\n    marginBottom : \"20px\",\r\n    // padding: \"10px\"\r\n  },\r\n\r\n  TextBox: {\r\n    \r\n    padding : \"0px\"\r\n\r\n  },\r\n\r\n  checkIcon:{\r\n    color: \"green\",   \r\n  },\r\n\r\n  closeIcon:{\r\n    color: \"red\"\r\n  },\r\n\r\n  centeredLabel : {\r\n    display: \"flex\",\r\n    alignItems: \"center\"\r\n  }\r\n\r\n\r\n\r\n\r\n\r\n\r\n}));\r\n\r\n\r\n\r\n\r\nexport default function PersonsBox() {\r\n    const classes = useStyles();\r\n\r\n    const [state, setState] = React.useContext(GlobalState);\r\n\r\n    const [expanded, setExpanded] = React.useState('panel0');\r\n\r\n    const [editMode, setEditMode] = React.useState({edit : false, person : null});\r\n    const [deleteMode, setDeleteMode] = React.useState({delete : false, person : null});\r\n    const [restoreMode, setRestoreMode] = React.useState({restore : false, person : null});\r\n\r\n    const [saving, setSaving] =  React.useState(false);\r\n    const [deleting, setDeleting] =  React.useState(false);\r\n    const [restoring, setRestoring] =  React.useState(false);\r\n\r\n    const [validationError, setValidationError] = React.useState({});\r\n\r\n\r\n    const [bookingDate, setBookingDate] = React.useState('');\r\n    const [bookingTime, setBookingTime] = React.useState('');\r\n\r\n    const [gender, setGender] = React.useState('');\r\n    const [title, setTitle] = React.useState('');\r\n    const [forename, setForename] = React.useState('');\r\n    const [surname, setSurnme] = React.useState('');\r\n    const [email, setEmail] = React.useState('');\r\n    const [dob, setDOB] = React.useState('');\r\n    const [tel, setTel] = React.useState('');\r\n    const [postCode, setPostCode] = React.useState('');\r\n    const [address, setAddress] = React.useState('');\r\n    const [notes, setNotes] = React.useState('');\r\n    const [passport, setPassport] = React.useState('');\r\n    const [passport2, setPassport2] = React.useState('');\r\n    const [certificate, setCertificate] = React.useState(false);\r\n    const [antiBodyTest, setAntiBodyTest] = React.useState(false);\r\n\r\n\r\n    const bookingDateChanged = (event) =>\r\n    {\r\n      setBookingDate(event.target.value);\r\n      setValidationError({...validationError, bookingDateError : false});\r\n    }\r\n\r\n    const bookingTimeChanged = (event) =>\r\n    {\r\n      setBookingTime(event.target.value);\r\n      setValidationError({...validationError, bookingTimeError : false});\r\n    }\r\n\r\n    const genderChanged = (event) =>\r\n    {\r\n      setGender(event.target.value);\r\n    }\r\n\r\n    const titleChanged = (event) =>\r\n    {\r\n      setTitle(event.target.value);\r\n    }\r\n\r\n    const forenameChanged = (event) =>\r\n    {\r\n      setForename(event.target.value);\r\n    }\r\n\r\n    const surnameChanged = (event) =>\r\n    {\r\n      setSurnme(event.target.value);\r\n    }\r\n\r\n    const emailChanged = (event) =>\r\n    {\r\n      setEmail(event.target.value);\r\n    }\r\n\r\n    const dobChanged = (event) =>\r\n    {\r\n      setDOB(event.target.value);\r\n      setValidationError({...validationError, dobError : false});\r\n    }\r\n\r\n    const telChanged = (event) =>\r\n    {\r\n      setTel(event.target.value);\r\n    }\r\n\r\n    const postCodeChanged = (event) =>\r\n    {\r\n      setPostCode(event.target.value);\r\n    }\r\n\r\n    const addressChanged = (event) =>\r\n    {\r\n      setAddress(event.target.value);\r\n    }\r\n\r\n    const passportChanged = (event) =>\r\n    {\r\n      setPassport(event.target.value);\r\n    }\r\n\r\n    const passport2Changed = (event) =>\r\n    {\r\n      setPassport2(event.target.value);\r\n    }\r\n\r\n    const certificateChanged = (event) =>\r\n    {\r\n      setCertificate(event.target.checked);\r\n    }\r\n\r\n    const antiBodyTestChanged = (event) =>\r\n    {\r\n      setAntiBodyTest(event.target.checked);\r\n    }\r\n\r\n\r\n    const handleChange = (panel) => (event, isExpanded) => {\r\n      setExpanded(isExpanded ? panel : false);\r\n    };\r\n\r\n    const getStatusLabel = (status) => {\r\n      if (status === 'booked')\r\n      {\r\n        return (\r\n          <span className={classes.BookedLabel}> Booking Made </span>\r\n        );\r\n    \r\n      }else if (status === 'patient_attended')\r\n      {\r\n        return (\r\n          <span  className={classes.PatientAttendedLabel}> Patient Attended </span>\r\n        );\r\n    \r\n      }else if (status === 'sample_taken')\r\n      {\r\n        return (\r\n          <span  className={classes.SampleTakenLabel}> Sample Taken </span>\r\n        );\r\n    \r\n      }else if (status === 'report_sent')\r\n      {\r\n        return (\r\n          <span  className={classes.ReportSentLabel}> Report Sent </span>\r\n        );\r\n    \r\n      }else if (status === 'report_cert_sent')\r\n      {\r\n        return (\r\n          <span  className={classes.ReportCertSentLabel}> {`Report & Certificate Sent`} </span>\r\n        );\r\n      }\r\n      else if (status === 'positive')\r\n      {\r\n        return (\r\n          <span  className={classes.PositiveLabel}> {`POSITIVE`} </span>\r\n        );\r\n    \r\n      }\r\n      else{\r\n        return 'Unknown';\r\n      }\r\n    }\r\n\r\n   const downloadForm1 = (id) =>\r\n   {\r\n       PDFService.downloadCovidForm1(id).then( (res) => \r\n       {\r\n          const file = new Blob(\r\n            [res.data], \r\n            {type: 'application/pdf'});\r\n\r\n          const fileURL = URL.createObjectURL(file);   \r\n          window.open(fileURL, \"_blank\");\r\n\r\n       }).catch( (err) =>\r\n       {\r\n           console.log(err);\r\n       });\r\n   }\r\n\r\n   const downloadForm2 = (id) =>\r\n   {\r\n        PDFService.downloadCovidForm2(id).then( (res) => \r\n        {\r\n          const file = new Blob(\r\n            [res.data], \r\n            {type: 'application/pdf'});\r\n\r\n          const fileURL = URL.createObjectURL(file);   \r\n          window.open(fileURL, \"_blank\");\r\n\r\n        setState(state => ({...state, RefreshPersonInfo : !state.RefreshPersonInfo}));\r\n\r\n        }).catch( (err) =>\r\n        {\r\n            console.log(err);\r\n        });\r\n   }\r\n\r\n   const downloadLabResults = (id) =>\r\n   {\r\n        PDFService.downloadPdfResult(id).then( (res) => \r\n        {\r\n          const file = new Blob(\r\n            [res.data], \r\n            {type: 'application/pdf'});\r\n\r\n          const fileURL = URL.createObjectURL(file);   \r\n          window.open(fileURL, \"_blank\");\r\n\r\n        }).catch( (err) =>\r\n        {\r\n            console.log(err);\r\n        });\r\n   }\r\n\r\n   const downloadCertificate = (id) =>\r\n   {\r\n        PDFService.downloadPdfCert(id).then( (res) => \r\n        {\r\n          const file = new Blob(\r\n            [res.data], \r\n            {type: 'application/pdf'});\r\n\r\n          const fileURL = URL.createObjectURL(file);   \r\n          window.open(fileURL, \"_blank\");\r\n\r\n        }).catch( (err) =>\r\n        {\r\n            console.log(err);\r\n        });\r\n   }\r\n\r\n   const handleEditModeChanged = (edit, person) => {\r\n\r\n       if (edit)\r\n       {\r\n         setForename(person.forenameCapital);\r\n         setSurnme(person.surnameCapital);\r\n         setBookingDate(FormatDateFromString(person.bookingDate));\r\n         setBookingTime(person.bookingTime.toUpperCase());\r\n         setGender(person.gender.toUpperCase());\r\n         setTitle(person.title.toUpperCase());\r\n         setEmail(person.email.toUpperCase());\r\n         setDOB(FormatDateFromString(person.birthDate));\r\n         setTel(person.phone.toUpperCase());\r\n         setPostCode(person.postCode.toUpperCase());\r\n         setAddress(person.address.toUpperCase());\r\n         if (person.notes)\r\n         {\r\n          setNotes(person.notes.toUpperCase());\r\n         }\r\n        \r\n         if (person.passportNumber)\r\n         {\r\n           setPassport(person.passportNumber.toUpperCase());\r\n         }\r\n        \r\n         if (person.passportNumber2)\r\n         {\r\n           setPassport2(person.passportNumber2.toUpperCase());\r\n         }\r\n        \r\n         setCertificate(person.certificate);\r\n         setAntiBodyTest(person.antiBodyTest);\r\n\r\n         setEditMode({edit: edit, person: person});\r\n\r\n       }\r\n       else if (!edit && !person)\r\n       {\r\n         setEditMode({edit: edit, person: person});\r\n       }\r\n       else if (!edit && person)\r\n       {\r\n          const booking = {};\r\n          const bookingId = person._id;\r\n          booking.certificate = certificate;\r\n          booking.antiBodyTest = antiBodyTest;\r\n          booking.gender = gender;\r\n          booking.title = title;\r\n          booking.birthDate = RevertFormatDateFromString(dob);\r\n          booking.email = email;\r\n          booking.phone = tel;\r\n          booking.postCode = postCode;\r\n          booking.address = address;\r\n          booking.passportNumber = passport;\r\n          booking.passportNumber2 = passport2;\r\n          booking.forename = forename;\r\n          booking.surname = surname;\r\n          booking.notes = notes;\r\n          booking.bookingDate = RevertFormatDateFromString(bookingDate);\r\n          booking.bookingTime = bookingTime;\r\n          booking.bookingRef = person.bookingRef;\r\n\r\n          if  (validateBooking(booking))\r\n          {\r\n            updateBooking({bookingId: bookingId, person: booking});\r\n          }\r\n       }\r\n   }\r\n\r\n   const validateDate = (str) =>\r\n   {\r\n     var error = false;\r\n     if (!str || str.length !== 10)\r\n     {\r\n       error = true;\r\n     }\r\n\r\n     if (str.charAt(4) !== '-'  || str.charAt(7) !== '-')\r\n     {\r\n       error = true;\r\n     }\r\n\r\n     try\r\n     {\r\n       \r\n       const result = /^\\d{4}-\\d{2}-\\d{2}$/.test(str);\r\n       if (!result)\r\n       {\r\n          error = true;\r\n       }\r\n\r\n       const year = parseInt(str.substr(0,4));\r\n       const month = parseInt(str.substr(5,2));\r\n       const day = parseInt(str.substr(8,2));\r\n\r\n       if (year < 1900)\r\n       {\r\n          error = true;\r\n       }\r\n\r\n       if (month < 1 || month > 12)\r\n       {\r\n         error = true;\r\n       }        \r\n\r\n       if (day > 31)\r\n       {\r\n         error = true;\r\n       }\r\n\r\n     }catch(err)\r\n     {\r\n       error = true;\r\n     }\r\n\r\n\r\n\r\n     return !error;\r\n   }\r\n\r\n   const validateTime =(str) =>\r\n   {\r\n     var error = false;\r\n\r\n     const result = /^\\d{2}:\\d{2} AM$|^\\d{2}:\\d{2} PM$/.test(str);\r\n     if (!result)\r\n     {\r\n        error = true;\r\n     }\r\n\r\n     try{\r\n       const hour = parseInt(str.substr(0,2));\r\n       const minute = parseInt(str.substr(3,2));\r\n\r\n       if (hour < 0 || hour > 12)\r\n       {\r\n         error = true;\r\n       }\r\n\r\n       if (minute < 0 || minute > 59)\r\n       {\r\n         error = true;\r\n       }\r\n\r\n     }catch(err)\r\n     {\r\n       error = true;\r\n     }\r\n\r\n     return !error;\r\n   }\r\n\r\n   const validateBooking = (booking) =>\r\n   {\r\n      var error = false;\r\n\r\n      if (!validateDate(booking.bookingDate))\r\n      {\r\n        error = true;\r\n        setValidationError({...validationError, bookingDateError : true});\r\n      }\r\n\r\n      if (!validateDate(booking.birthDate))\r\n      {\r\n        error = true;\r\n        setValidationError({...validationError, dobError : true});\r\n      }\r\n\r\n      if (!validateTime(booking.bookingTime))\r\n      {\r\n        error = true;\r\n        setValidationError({...validationError, bookingTimeError : true});\r\n      }\r\n     \r\n\r\n      return !error;\r\n   }\r\n\r\n   const updateBooking = (payload) =>\r\n   {\r\n       setSaving(true);\r\n       bookingService.updateBooking(payload).then( (res) => {\r\n        setSaving(false);\r\n        setEditMode({edit: false, person: null});\r\n        setState(state => ({...state, RefreshPersonInfo : !state.RefreshPersonInfo}));\r\n\r\n       }).catch ( (err) => {\r\n         setSaving(false);\r\n         setEditMode({edit: false, person: null});\r\n         console.log(err);\r\n       });\r\n   }\r\n\r\n   const deleteBooking = (id) =>\r\n   {\r\n       setDeleting(true);\r\n       bookingService.deleteBooking(id).then( (res) => {\r\n        setDeleting(false);\r\n        setDeleteMode({delete: false, person: null});\r\n        setState(state => ({...state, RefreshPersonInfo : !state.RefreshPersonInfo}));\r\n\r\n       }).catch ( (err) => {\r\n          setDeleting(false);\r\n          setDeleteMode({delete: false, person: null});\r\n         console.log(err);\r\n       });\r\n   }\r\n\r\n   const restoreBooking = (id) =>\r\n   {\r\n       setRestoring(true);\r\n       bookingService.unDeleteBooking(id).then( (res) => {\r\n        setRestoring(false);\r\n        setRestoreMode({restore: false, person: null});\r\n        setState(state => ({...state, RefreshPersonInfo : !state.RefreshPersonInfo}));\r\n\r\n       }).catch ( (err) => {\r\n        setRestoring(false);\r\n        setRestoreMode({restore: false, person: null});\r\n         console.log(err);\r\n       });\r\n   }\r\n\r\n   const changeBackToBookingMade = (event, id) =>\r\n   {\r\n     setSaving(true);\r\n     bookingService.changeBackToBookingMade(id).then(res => {\r\n       setSaving(false);\r\n       setState(state => ({...state, RefreshPersonInfo : !state.RefreshPersonInfo}));\r\n     }).catch(err => {\r\n       console.log(err);\r\n       setSaving(false);\r\n     })\r\n   }\r\n\r\n\r\n\r\n   const handleDeleteModeChanged = (del, person) => {\r\n\r\n    if (del)\r\n    {\r\n      setDeleteMode({delete: del, person: person});\r\n    }\r\n    else if (!del && !person)\r\n    {\r\n      setDeleteMode({delete: del, person: person});\r\n    }\r\n    else if (!del && person)\r\n    {\r\n        deleteBooking(person._id);\r\n    }\r\n  }\r\n\r\n  const handleRestoreModeChanged = (restore, person) => {\r\n\r\n    if (restore)\r\n    {\r\n      setRestoreMode({restore: restore, person: person});\r\n    }\r\n    else if (!restore && !person)\r\n    {\r\n      setRestoreMode({restore: restore, person: person});\r\n    }\r\n    else if (!restore && person)\r\n    {\r\n        restoreBooking(person._id);\r\n    }\r\n  }\r\n\r\n  return (\r\n    <React.Fragment>\r\n          \r\n      <Grid container direction=\"column\" spacing={1} justify=\"flex-start\"  alignItems=\"stretch\">\r\n          <div className={classes.title}> Following Records Found :</div>\r\n\r\n          {state.foundRecords.map((person,index) => (\r\n   \r\n                <Grid item xs={12} md={12} key={`panel${index}`}>\r\n                <div className={classes.root}>\r\n                    <Accordion className={person.deleted ? classes.AccordionDeleted : classes.Accordion} expanded={expanded === `panel${index}`} onChange={handleChange(`panel${index}`)}>\r\n                    <AccordionSummary className={person.deleted ? classes.lineThrough : ''}\r\n                        expandIcon={<ExpandMoreIcon />}\r\n                        aria-controls=\"panel1bh-content\"\r\n                        id={`panel${index}bh-header`}\r\n                    >\r\n                      {person.deleted && (\r\n                          <Tooltip  title=\"This record has been deleted.\">\r\n                            <DeleteIcon  style={{padding: 0, margin: 0,  color: \"#fff\", fontSize: 25 }}/>\r\n                        </Tooltip>\r\n                      )}\r\n\r\n                        <Typography className={classes.heading}> {`#${index+1}`} </Typography>\r\n                        <Typography className={classes.secondaryHeading}>\r\n                        {`${person.forenameCapital} ${person.surnameCapital}`}\r\n                        </Typography>\r\n                    </AccordionSummary>\r\n\r\n                    <AccordionDetails className={classes.infoDetails}>\r\n                        \r\n\r\n\r\n                        <ul className={classes.ul}>\r\n\r\n                        {/* Restore Functionality ******************************************* */}  \r\n                        <li hidden={!(restoreMode.restore && restoreMode.person._id  === person._id)}>\r\n                              <div style={{fontWeight: \"500\", paddingBottom: \"5px\", paddingLeft: \"5px\", fontSize:\"16px\" , color:\"#fff\"}}>\r\n                                Are you sure you want to restore this record?\r\n                              </div>\r\n                            </li>\r\n\r\n                            <li hidden={!person.deleted || (restoreMode.restore && restoreMode.person._id === person._id)}>\r\n                                 <Button\r\n                                    type=\"button\"\r\n                                    fullWidth\r\n                                    variant=\"contained\"\r\n                                    color=\"primary\"\r\n                                    onClick = {() => {handleRestoreModeChanged(true, person)}}\r\n                                    className={classes.RestoreButton}\r\n                                 >\r\n                                   Restore This Record\r\n                                </Button>\r\n                            </li>\r\n\r\n                            <li hidden={!(restoreMode.restore && restoreMode.person._id  === person._id)}>\r\n                                 <Button\r\n                                    type=\"button\"\r\n                                    fullWidth\r\n                                    variant=\"contained\"\r\n                                    color=\"primary\"\r\n                                    disabled = {restoring}\r\n                                    onClick = {() => {handleRestoreModeChanged(false, person)}}\r\n                                    className={classes.SaveButton}\r\n                                 >\r\n                                    YES, Restore this!\r\n                                </Button>\r\n                            </li>\r\n\r\n                            <li hidden={!(restoreMode.restore && restoreMode.person._id  === person._id)}>\r\n                                 <Button\r\n                                    type=\"button\"\r\n                                    fullWidth\r\n                                    variant=\"contained\"\r\n                                    color=\"default\"\r\n                                    disabled = {restoring}\r\n                                    onClick = {() => {handleRestoreModeChanged(false, null)}}\r\n                                    className={classes.CancelButton}\r\n                                 >\r\n                                    Cancel\r\n                                </Button>\r\n                            </li>\r\n\r\n                           {/*  ******************************************************************* */}\r\n\r\n                              {/* Edit Functionality ******************************************* */}\r\n\r\n                            <li hidden={person.deleted || deleteMode.delete || (editMode.edit && editMode.person._id === person._id)}>\r\n                                 <Button\r\n                                    type=\"button\"\r\n                                    fullWidth\r\n                                    variant=\"contained\"\r\n                                    color=\"primary\"\r\n                                    onClick = {() => {handleEditModeChanged(true, person)}}\r\n                                    className={classes.EditButton}\r\n                                 >\r\n                                    Edit Booking Info\r\n                                </Button>\r\n                            </li>\r\n\r\n                            <li hidden={!(editMode.edit && editMode.person._id  === person._id)}>\r\n                                 <Button\r\n                                    type=\"button\"\r\n                                    fullWidth\r\n                                    variant=\"contained\"\r\n                                    color=\"primary\"\r\n                                    disabled = {saving}\r\n                                    onClick = {() => {handleEditModeChanged(false, person)}}\r\n                                    className={classes.SaveButton}\r\n                                 >\r\n                                    Save Changes\r\n                                </Button>\r\n                            </li>\r\n\r\n                            <li hidden={!(editMode.edit && editMode.person._id === person._id)}>\r\n                                 <Button\r\n                                    type=\"button\"\r\n                                    fullWidth\r\n                                    variant=\"contained\"\r\n                                    color=\"default\"\r\n                                    disabled = {saving}\r\n                                    onClick = {() => {handleEditModeChanged(false, null)}}\r\n                                    className={classes.CancelButton}\r\n                                 >\r\n                                    Cancel\r\n                                </Button>\r\n                            </li>\r\n                            \r\n                            {/* ****************************************************************************************** */}\r\n\r\n\r\n                            {/* Delete Functionality ******************************************* */}\r\n\r\n                            <li hidden={!(deleteMode.delete && deleteMode.person._id  === person._id)}>\r\n                              <div style={{fontWeight: \"600\",  paddingBottom: \"5px\", paddingLeft: \"5px\", fontSize:\"16px\"}}>\r\n                                Are you sure you want to delete this record?\r\n                              </div>\r\n                            </li>\r\n\r\n                            <li hidden={person.deleted ||  editMode.edit || (deleteMode.delete && deleteMode.person._id === person._id)}>\r\n                                 <Button\r\n                                    type=\"button\"\r\n                                    fullWidth\r\n                                    variant=\"contained\"\r\n                                    color=\"primary\"\r\n                                    onClick = {() => {handleDeleteModeChanged(true, person)}}\r\n                                    className={classes.DeleteButton}\r\n                                 >\r\n                                   Delete This Record\r\n                                </Button>\r\n                            </li>\r\n\r\n                            <li hidden={!(deleteMode.delete && deleteMode.person._id  === person._id)}>\r\n                                 <Button\r\n                                    type=\"button\"\r\n                                    fullWidth\r\n                                    variant=\"contained\"\r\n                                    color=\"primary\"\r\n                                    disabled = {deleting}\r\n                                    onClick = {() => {handleDeleteModeChanged(false, person)}}\r\n                                    className={classes.SaveButton}\r\n                                 >\r\n                                    YES, Delete this!\r\n                                </Button>\r\n                            </li>\r\n\r\n                            <li hidden={!(deleteMode.delete && deleteMode.person._id === person._id)}>\r\n                                 <Button\r\n                                    type=\"button\"\r\n                                    fullWidth\r\n                                    variant=\"contained\"\r\n                                    color=\"default\"\r\n                                    disabled = {deleting}\r\n                                    onClick = {() => {handleDeleteModeChanged(false, null)}}\r\n                                    className={classes.CancelButton}\r\n                                 >\r\n                                    Cancel\r\n                                </Button>\r\n                            </li>\r\n                                 \r\n                            {/* ****************************************************************************************** */}\r\n\r\n                            <li className={classes.li}>\r\n                                <span className={classes.infoTitle}>BOOKED DATE</span> \r\n                            \r\n\r\n                                <span hidden={(editMode.edit && editMode.person._id  === person._id)} className={classes.infoData}>\r\n                                   {FormatDateFromString(person.bookingDate) }\r\n                                  </span>  \r\n                                        <span hidden={!(editMode.edit && editMode.person._id  === person._id)} className={classes.infoData}>\r\n                                          <TextField \r\n                                                      fullWidth\r\n                                                      error={validationError.bookingDateError}\r\n                                                      className={classes.TextBox} \r\n                                                      value={bookingDate}\r\n                                                      onChange = {bookingDateChanged}\r\n                                                      inputProps= {{\r\n                                                          style:{\r\n                                                            padding: 0\r\n                                                          }\r\n                                                        }\r\n                                                      }\r\n                                                      > \r\n                                          </TextField> \r\n                                        </span> \r\n\r\n\r\n                            </li>\r\n\r\n                            <li className={classes.li}>\r\n                                <span className={classes.infoTitle}>BOOKED TIME</span> \r\n                                <span hidden={(editMode.edit && editMode.person._id  === person._id)} className={classes.infoData}>{person.bookingTime.toUpperCase()}</span>  \r\n                                        <span hidden={!(editMode.edit && editMode.person._id  === person._id)} className={classes.infoData}>\r\n                                          <TextField \r\n                                                      fullWidth\r\n                                                      error={validationError.bookingTimeError}\r\n                                                      className={classes.TextBox} \r\n                                                      value={bookingTime}\r\n                                                      onChange = {bookingTimeChanged}\r\n                                                      inputProps= {{\r\n                                                          style:{\r\n                                                            padding: 0\r\n                                                          }\r\n                                                        }\r\n                                                      }\r\n                                                      > \r\n                                          </TextField> \r\n                                        </span> \r\n\r\n\r\n                            </li>\r\n\r\n                            <li className={classes.li}>\r\n                            <span className={classes.infoTitle}>GENDER</span> \r\n                                        <span hidden={(editMode.edit && editMode.person._id  === person._id)} className={classes.infoData}>{person.gender?.toUpperCase()}</span>  \r\n                                        <span hidden={!(editMode.edit && editMode.person._id  === person._id)} className={classes.infoData}>\r\n                                          <TextField \r\n                                                      fullWidth\r\n                                                      className={classes.TextBox} \r\n                                                      value={gender}\r\n                                                      onChange = {genderChanged}\r\n                                                      inputProps= {{\r\n                                                          style:{\r\n                                                            padding: 0\r\n                                                          }\r\n                                                        }\r\n                                                      }\r\n                                                      > \r\n                                          </TextField> \r\n                                        </span> \r\n                            </li>\r\n                            <li className={classes.li}>\r\n                            <span className={classes.infoTitle}>TITLE</span> \r\n                                       <span hidden={(editMode.edit && editMode.person._id  === person._id)} className={classes.infoData}>{person.title?.toUpperCase()}</span>  \r\n                                        <span hidden={!(editMode.edit && editMode.person._id  === person._id)} className={classes.infoData}>\r\n                                          <TextField \r\n                                                      fullWidth\r\n                                                      className={classes.TextBox} \r\n                                                      value={title}\r\n                                                      onChange = {titleChanged}\r\n                                                      inputProps= {{\r\n                                                          style:{\r\n                                                            padding: 0\r\n                                                          }\r\n                                                        }\r\n                                                      }\r\n                                                      > \r\n                                          </TextField> \r\n                                        </span> \r\n                             \r\n                            </li>\r\n                            <li className={classes.li}>\r\n                            <span className={classes.infoTitle}>FORENAME</span> \r\n                                        <span hidden={(editMode.edit && editMode.person._id  === person._id)} className={classes.infoData}>{person.forenameCapital}</span>  \r\n                                        <span hidden={!(editMode.edit && editMode.person._id  === person._id)} className={classes.infoData}>\r\n                                        <TextField \r\n                                                      fullWidth\r\n                                                      className={classes.TextBox} \r\n                                                      value={forename}\r\n                                                      onChange = {forenameChanged}\r\n                                                      inputProps= {{\r\n                                                          style:{\r\n                                                            padding: 0\r\n                                                          }\r\n                                                        }\r\n                                                      }\r\n                                                      > \r\n                                          </TextField> \r\n                                        </span> \r\n                            </li>\r\n                            <li className={classes.li}>\r\n                                <span className={classes.infoTitle}>SURNAME</span>\r\n                                        <span hidden={(editMode.edit && editMode.person._id  === person._id)} className={classes.infoData}>{person.surnameCapital}</span>  \r\n                                        <span hidden={!(editMode.edit && editMode.person._id  === person._id)} className={classes.infoData}>\r\n                                        <TextField \r\n                                                      fullWidth\r\n                                                      className={classes.TextBox} \r\n                                                      value={surname}\r\n                                                      onChange = {surnameChanged}\r\n                                                      inputProps= {{\r\n                                                          style:{\r\n                                                            padding: 0\r\n                                                          }\r\n                                                        }\r\n                                                      }\r\n                                                      > \r\n                                          </TextField> \r\n                                        </span>   \r\n                            </li>\r\n                            <li className={classes.li}>\r\n                                <span className={classes.infoTitle}>EMAIL</span> \r\n                                       <span hidden={(editMode.edit && editMode.person._id  === person._id)} className={classes.infoData}>{person.email?.toUpperCase()}</span>  \r\n                                        <span hidden={!(editMode.edit && editMode.person._id  === person._id)} className={classes.infoData}>\r\n                                        <TextField \r\n                                                      fullWidth\r\n                                                      className={classes.TextBox} \r\n                                                      value={email}\r\n                                                      onChange = {emailChanged}\r\n                                                      inputProps= {{\r\n                                                          style:{\r\n                                                            padding: 0\r\n                                                          }\r\n                                                        }\r\n                                                      }\r\n                                                      > \r\n                                          </TextField> \r\n                                        </span>   \r\n                            </li>\r\n                            <li className={classes.li}>\r\n                                <span className={classes.infoTitle}>D.O.B</span>\r\n                                        <span hidden={(editMode.edit && editMode.person._id  === person._id)} className={classes.infoData}>\r\n                                            {FormatDateFromString(person.birthDate) }\r\n                                          </span>  \r\n                                        <span hidden={!(editMode.edit && editMode.person._id  === person._id)} className={classes.infoData}>\r\n                                        <TextField \r\n                                                      fullWidth\r\n                                                      error={validationError.dobError} \r\n                                                      className={classes.TextBox} \r\n                                                      value={dob}\r\n                                                      onChange = {dobChanged}\r\n                                                      inputProps= {{\r\n                                                          style:{\r\n                                                            padding: 0\r\n                                                          }\r\n                                                        }\r\n                                                      }\r\n                                                      > \r\n                                          </TextField> \r\n                                        </span>   \r\n                            </li>\r\n                            <li className={classes.li}>\r\n                                <span className={classes.infoTitle}>TEL</span>\r\n                                 <span hidden={(editMode.edit && editMode.person._id  === person._id)} className={classes.infoData}>{person.phone?.toUpperCase()}</span>  \r\n                                        <span hidden={!(editMode.edit && editMode.person._id  === person._id)} className={classes.infoData}>\r\n                                        <TextField \r\n                                                      fullWidth\r\n                                                      className={classes.TextBox} \r\n                                                      value={tel}\r\n                                                      onChange = {telChanged}\r\n                                                      inputProps= {{\r\n                                                          style:{\r\n                                                            padding: 0\r\n                                                          }\r\n                                                        }\r\n                                                      }\r\n                                                      > \r\n                                          </TextField> \r\n                                        </span>  \r\n                            </li>\r\n                            <li className={classes.li}>\r\n                                <span className={classes.infoTitle}>POST CODE</span> \r\n                                        <span hidden={(editMode.edit && editMode.person._id  === person._id)} className={classes.infoData}>{person.postCode?.toUpperCase()}</span>  \r\n                                        <span hidden={!(editMode.edit && editMode.person._id  === person._id)} className={classes.infoData}>\r\n                                        <TextField \r\n                                                      fullWidth\r\n                                                      className={classes.TextBox} \r\n                                                      value={postCode}\r\n                                                      onChange = {postCodeChanged}\r\n                                                      inputProps= {{\r\n                                                          style:{\r\n                                                            padding: 0\r\n                                                          }\r\n                                                        }\r\n                                                      }\r\n                                                      > \r\n                                          </TextField> \r\n                                        </span>  \r\n                            </li>\r\n                            <li className={classes.li}>\r\n                                <span className={classes.infoTitle}>ADDRESS</span> \r\n                                        <span hidden={(editMode.edit && editMode.person._id  === person._id)} className={classes.infoData}>{person.address?.toUpperCase()}</span>  \r\n                                        <span hidden={!(editMode.edit && editMode.person._id  === person._id)} className={classes.infoData}>\r\n                                        <TextField \r\n                                                      fullWidth\r\n                                                      className={classes.TextBox} \r\n                                                      value={address}\r\n                                                      onChange = {addressChanged}\r\n                                                      inputProps= {{\r\n                                                          style:{\r\n                                                            padding: 0\r\n                                                          }\r\n                                                        }\r\n                                                      }\r\n                                                      > \r\n                                          </TextField> \r\n                                        </span>  \r\n                            </li>\r\n\r\n                            <li className={classes.li}>\r\n                                <span className={classes.infoTitle}>PASSPORT NO.</span>\r\n                                <span hidden={(editMode.edit && editMode.person._id  === person._id)} className={classes.infoData}>{person.passportNumber?.toUpperCase()}</span>  \r\n                                        <span hidden={!(editMode.edit && editMode.person._id  === person._id)} className={classes.infoData}>\r\n                                        <TextField \r\n                                                      fullWidth\r\n                                                      className={classes.TextBox} \r\n                                                      value={passport}\r\n                                                      onChange = {passportChanged}\r\n                                                      inputProps= {{\r\n                                                          style:{\r\n                                                            padding: 0\r\n                                                          }\r\n                                                        }\r\n                                                      }\r\n                                                      > \r\n                                          </TextField> \r\n                                        </span>  \r\n                            </li>\r\n\r\n                            <li className={classes.li}>\r\n                                <span className={classes.infoTitle}>SECOND PASSPORT NO.</span> \r\n                                        <span hidden={(editMode.edit && editMode.person._id  === person._id)} className={classes.infoData}>{person.passportNumber2?.toUpperCase()}</span>  \r\n                                        <span hidden={!(editMode.edit && editMode.person._id  === person._id)} className={classes.infoData}>\r\n                                        <TextField \r\n                                                      fullWidth\r\n                                                      className={classes.TextBox} \r\n                                                      value={passport2}\r\n                                                      onChange = {passport2Changed}\r\n                                                      inputProps= {{\r\n                                                          style:{\r\n                                                            padding: 0\r\n                                                          }\r\n                                                        }\r\n                                                      }\r\n                                                      > \r\n                                          </TextField> \r\n                                        </span>   \r\n                            </li>\r\n\r\n                            <li className={classes.li}>\r\n                                <span className={classes.infoTitle}>REQUEST FOR CERTIFICATE</span> \r\n                                <span hidden={(editMode.edit && editMode.person._id  === person._id)} className={classes.infoData}>{person.certificate ? ( <CheckIcon className={classes.checkIcon}/> ) :  <CloseIcon className={classes.closeIcon}/> }</span>\r\n                                <span hidden={!(editMode.edit && editMode.person._id  === person._id)} className={classes.infoData}>\r\n                                    <FormControlLabel className={classes.formControl} \r\n                                          control={<Checkbox className={classes.formControl}  color=\"secondary\" name=\"certificate\" checked={certificate} onChange={certificateChanged} />}\r\n                                          label=''\r\n                                        />\r\n                                </span>    \r\n                            </li>\r\n                            <li className={classes.li}>\r\n                                <span className={classes.infoTitle}>REQUEST FOR ANTIBODY TEST</span>\r\n                                <span hidden={(editMode.edit && editMode.person._id  === person._id)} className={classes.infoData}>{person.antiBodyTest ? <CheckIcon className={classes.checkIcon}/> :  <CloseIcon className={classes.closeIcon}/> }</span>  \r\n                                <span hidden={!(editMode.edit && editMode.person._id  === person._id)} className={classes.infoData}>\r\n                                    <FormControlLabel className={classes.formControl} \r\n                                          control={<Checkbox className={classes.formControl}  color=\"secondary\" name=\"certificate\" checked={antiBodyTest} onChange={antiBodyTestChanged} />}\r\n                                          label=''\r\n                                        />\r\n                                </span>   \r\n                            </li>\r\n                            <li className={classes.li}>\r\n                                <span className={classes.infoTitle}>STATUS</span> \r\n                                {getStatusLabel(person.status)} \r\n                                \r\n                                {person.status === \"sample_taken\" &&\r\n                                          !(\r\n                                            editMode.edit && editMode.person._id === person._id\r\n                                          ) && (\r\n                                            <Button \r\n                                                  variant=\"outlined\"\r\n                                                  color=\"primary\"\r\n                                                  disabled = {saving}\r\n                                                  onClick = {event => changeBackToBookingMade(event,person._id)}\r\n\r\n                                                    >\r\n                                              Change Back To Booking Made\r\n                                            </Button>\r\n                                          )}\r\n\r\n                            </li>\r\n      \r\n                            <li className={classes.li}>\r\n                                <span className={classes.infoTitle}>TOTAL CHARGES</span> <span className={calculatePrice(person) <= 199 ? classes.infoDataCharges : classes.infoDataChargesHigher}>{`£${calculatePrice(person)}`}</span>  \r\n                            </li>\r\n\r\n                            <li  hidden={person.deleted} >\r\n                                 <Button\r\n                                    startIcon = {<PrintIcon/>}\r\n                                    type=\"button\"\r\n                                    fullWidth\r\n                                    variant=\"outlined\"\r\n                                    color=\"primary\"\r\n                                    onClick = {() => {downloadForm1(person._id)}}\r\n                                    // onTouchTap = {() => {downloadForm1(person._id)}}\r\n                                    className={classes.DownloadForm}\r\n                                 >\r\n                                    Download Registration Form\r\n                                </Button>\r\n                            </li>\r\n\r\n                            <li  hidden={person.deleted}>\r\n                                  <Button\r\n                                    startIcon = {<PrintIcon/>}\r\n                                    type=\"button\"\r\n                                    fullWidth\r\n                                    variant=\"outlined\"\r\n                                    color=\"primary\"\r\n                                    onClick = {() => {downloadForm2(person._id)}}\r\n                                    // onTouchTap = {() => {downloadForm2(person._id)}}\r\n                                    className={classes.DownloadForm}\r\n                                    >\r\n                                    Download Lab Form\r\n                                 </Button>\r\n                            </li>\r\n\r\n                            <li hidden={ person.deleted || (person.status !== 'report_sent' && person.status !== 'report_cert_sent') }>\r\n                                 <Button\r\n                                    startIcon = {<PrintIcon/>}\r\n                                    type=\"button\"\r\n                                    fullWidth\r\n                                    variant=\"outlined\"\r\n                                    color=\"primary\"\r\n                                    onClick = {() => {downloadLabResults(person._id)}}\r\n                                    // onTouchTap = {() => {downloadForm1(person._id)}}\r\n                                    className={classes.DownloadForm}\r\n                                 >\r\n                                    Download Lab Results\r\n                                </Button>\r\n                            </li>\r\n\r\n                            <li hidden={person.deleted || person.status !== 'report_cert_sent'}>\r\n                                 <Button\r\n                                    startIcon = {<PrintIcon/>}\r\n                                    type=\"button\"\r\n                                    fullWidth\r\n                                    variant=\"outlined\"\r\n                                    color=\"primary\"\r\n                                    onClick = {() => {downloadCertificate(person._id)}}\r\n                                    // onTouchTap = {() => {downloadForm1(person._id)}}\r\n                                    className={classes.DownloadForm}\r\n                                 >\r\n                                    Download Certificate\r\n                                </Button>\r\n                            </li>\r\n\r\n                        </ul>\r\n\r\n                    </AccordionDetails>\r\n                    </Accordion>\r\n                </div>\r\n            </Grid> \r\n          ))}\r\n    </Grid>\r\n    </React.Fragment>\r\n  );\r\n}\r\n","import React, { useEffect } from 'react';\r\nimport Button from '@material-ui/core/Button';\r\nimport CssBaseline from '@material-ui/core/CssBaseline';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport GlobalState from './../GlobalState';\r\nimport Alert from '@material-ui/lab/Alert';\r\nimport PropTypes from 'prop-types';\r\nimport MaskedInput from 'react-text-mask';\r\nimport { FormControl, Grid, Input, InputLabel } from '@material-ui/core';\r\nimport BookService from './services/BookService';\r\nimport PersonsBox from './PersonsBox';\r\n\r\n\r\nconst isBoolean = (param) => typeof(param) === \"boolean\"\r\n\r\nconst useFocus = (initialFocus = false, id = \"\") => {\r\n    const [focus, setFocus] = React.useState(initialFocus)\r\n    const setFocusWithTrueDefault = (param) => setFocus(isBoolean(param)? param : true)\r\n    return ([\r\n        setFocusWithTrueDefault, {\r\n            autoFocus: focus,\r\n            key: `${id}${focus}`,\r\n            onFocus: () => setFocus(true),\r\n            onBlur: () => setFocus(false),\r\n        },\r\n    ])\r\n}\r\n\r\n\r\nfunction TextMaskCustom(props) {\r\n    const { inputRef, ...other } = props;\r\n  \r\n    return (\r\n      <MaskedInput\r\n        {...other}\r\n        ref={(ref) => {\r\n          inputRef(ref ? ref.inputElement : null);\r\n        }}\r\n        mask={[/\\d/, /\\d/, /\\d/, '-', /\\d/, /\\d/, /\\d/, '-', /\\d/, /\\d/, /\\d/]}\r\n        // placeholderChar={'\\u2000'}\r\n        showMask\r\n      />\r\n    );\r\n  }\r\n  \r\n  TextMaskCustom.propTypes = {\r\n    inputRef: PropTypes.func.isRequired,\r\n  };\r\n\r\n\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n\r\n    root: {\r\n        width: '100%',\r\n        '& > * + *': {\r\n          marginTop: theme.spacing(2),\r\n        },\r\n        marginTop: \"20px\"\r\n      },  \r\n\r\n    paper: {\r\n        marginTop: theme.spacing(8),\r\n        display: 'flex',\r\n        flexDirection: 'column',\r\n        alignItems: 'center',\r\n    },\r\n\r\n    avatar: {\r\n        margin: theme.spacing(1),\r\n        backgroundColor: theme.palette.secondary.main,\r\n    },\r\n\r\n    form: {\r\n        width: '100%', // Fix IE 11 issue.\r\n        marginTop: theme.spacing(1),\r\n    },\r\n\r\n    Find: {\r\n        width: \"80px\"\r\n    },\r\n\r\n    Clear:{\r\n        marginRight: \"20px\"\r\n    },\r\n\r\n    title:{\r\n        marginTop : \"20px\"\r\n    },\r\n\r\n    TextBox:{\r\n        marginTop: \"30px\",\r\n        \"& > *\" :\r\n        {\r\n            textAlign: \"center\"\r\n        },\r\n  \r\n    },\r\n\r\n    TextField:{\r\n\r\n    },\r\n\r\n    NoRecordsFound:{\r\n        marginTop: \"20px\",\r\n        color: \"red\",\r\n        fontWeight: \"600\",\r\n        fontSize: \"14px\",\r\n    },\r\n\r\n    PersonsBox:{\r\n        marginTop : \"20px\",\r\n        marginBottom: \"50px\"\r\n    }\r\n\r\n}));\r\n\r\nexport default function FindByRef() {\r\n  const classes = useStyles();\r\n  const [state, setState] = React.useContext(GlobalState);\r\n  \r\n  const [setFocus, focusProps] = useFocus(true);\r\n\r\n//   useEffect( () =>\r\n//   {\r\n//      findRecords();\r\n//   }, [state.findRecords]);\r\n\r\n useEffect ( () => {\r\n    setState(state => ({...state, foundRecords : []}));\r\n }, [])\r\n\r\n  useEffect( () => {\r\n    BookService.getBookingsByRef(state.ref).then( (res)=>\r\n    {\r\n        if (res.data.length > 0)\r\n        {\r\n            setState(state => ({...state, foundRecords : res.data}));\r\n        }\r\n    });\r\n    }, [state.RefreshPersonInfo]);\r\n\r\n    const handleChange = (event) =>\r\n    {\r\n        setState(state => ({...state, ref : event.target.value}));\r\n        setState(state => ({...state, refError : false})); \r\n    }\r\n\r\n    const clearField = () =>\r\n    {\r\n        setState(state => ({...state, refError : false})); \r\n        setState(state => ({...state, ref : '___-___-___'}));\r\n        setState(state => ({...state, foundRecords : []}));\r\n        setFocus();\r\n    }\r\n\r\n    const findRecords = () =>\r\n    {\r\n        if (!state.ref || state.ref.indexOf('_') >= 0)\r\n        {\r\n            setState(state => ({...state, refError : true}));  \r\n            return;\r\n        }\r\n\r\n        setState(state => ({...state, submiting : true}));\r\n        setState(state => ({...state, foundRecords : []}));\r\n\r\n        BookService.getBookingsByRef(state.ref).then( (res)=>\r\n        {\r\n            setState(state => ({...state, submiting : false}));\r\n            if (res.data.length > 0)\r\n            {\r\n                setState(state => ({...state, foundRecords : res.data}));\r\n            }\r\n            else\r\n            {\r\n                setState(state => ({...state, foundRecords : null}));\r\n            }\r\n            \r\n            console.log(res.data);\r\n\r\n        }).catch( (err) =>\r\n        {\r\n            console.log(err);\r\n            setState(state => ({...state, submiting : false}));\r\n        });\r\n    }\r\n\r\n  return (\r\n    <React.Fragment>\r\n        <CssBaseline />\r\n        <div className={classes.title}>\r\n            <Typography component=\"h6\" variant=\"h6\" align=\"center\">\r\n                Find Booking Appoinments\r\n            </Typography>  \r\n        </div> \r\n\r\n        <Grid container direction=\"column\" spacing={1} justify=\"flex-start\"  alignItems=\"center\">\r\n\r\n        <Grid item xs={12} md={12}>\r\n            <FormControl className={classes.TextBox}>\r\n                <TextField\r\n                    {...focusProps}\r\n                    autoFocus \r\n                    pattern=\"[0-9]*\"\r\n                    error = {state.refError ? true : false} \r\n                    value = {state.ref}\r\n                    className = {classes.TextField}\r\n                    width = \"50px\"\r\n                    onChange={handleChange}\r\n                    label=\"Reference No.\"\r\n                    helperText=\"Enter Your 9-digits Reference No.\"\r\n                    name=\"refNo\"\r\n                    id=\"refNo\"\r\n                    variant=\"outlined\"\r\n                    \r\n                    size=\"medium\"\r\n                    margin=\"normal\"\r\n                    fullWidth = {true}\r\n                    InputProps={{\r\n                        inputComponent: TextMaskCustom,\r\n                        style: { textAlign: 'center', fontSize:\"24px\", width: \"210px\", paddingLeft: \"20px\" }\r\n                    }}\r\n\r\n                    onKeyPress= {event => {\r\n                        if (event.key === 'Enter') {\r\n                            findRecords();\r\n                        }\r\n                      }}\r\n                />         \r\n            </FormControl>\r\n        </Grid>\r\n\r\n        <Grid item xs={12} md={12}>\r\n               \r\n                <Button\r\n                    disabled = {state.submiting}\r\n                    color=\"default\"\r\n                    onClick = {clearField}\r\n                    onTouchTap = {clearField}\r\n                    className={classes.Clear}\r\n                >\r\n                    Clear \r\n                </Button>  \r\n            \r\n                <Button\r\n                    type=\"button\"\r\n                    disabled = {state.submiting}\r\n                    variant=\"contained\"\r\n                    color=\"primary\"\r\n                    onClick = {findRecords}\r\n                    onTouchTap = {findRecords}\r\n                    className={classes.Find}\r\n                >\r\n                    Find \r\n                </Button>  \r\n        </Grid>\r\n\r\n        <Grid item xs={12} md={12}>\r\n\r\n                    \r\n\r\n            {state.foundRecords && state.foundRecords.length > 0 && (\r\n                <React.Fragment>\r\n\r\n                    <div className={classes.PersonsBox}>\r\n                          <PersonsBox/>\r\n                    </div>\r\n                    \r\n\r\n\r\n                </React.Fragment>\r\n            )}   \r\n\r\n            {!state.foundRecords && (\r\n                <React.Fragment>\r\n\r\n                <div className={classes.root}>\r\n                    <Alert severity=\"error\"> <strong>No Records Found !</strong> <br/> Please check you reference number again.</Alert>\r\n                </div> \r\n                   \r\n                </React.Fragment>\r\n            )}\r\n\r\n        </Grid>\r\n        \r\n        \r\n        </Grid>\r\n        \r\n    </React.Fragment>\r\n   \r\n  );\r\n}","import React, { useEffect, useRef, useState } from \"react\";\r\nimport BookService from \"./services/BookService\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport {\r\n  Button,\r\n  Checkbox,\r\n  Divider,\r\n  FormControlLabel,\r\n  Grid,\r\n  Link,\r\n  makeStyles,\r\n  TextField,\r\n  Tooltip,\r\n} from \"@material-ui/core\";\r\nimport GlobalState from \"./../GlobalState\";\r\nimport { withStyles } from \"@material-ui/core/styles\";\r\n\r\nimport SendIcon from \"@material-ui/icons/Send\";\r\n\r\nimport Dialog from \"@material-ui/core/Dialog\";\r\nimport DialogContent from \"@material-ui/core/DialogContent\";\r\n\r\nimport DialogTitle from \"@material-ui/core/DialogTitle\";\r\nimport Draggable from \"react-draggable\";\r\nimport Paper from \"@material-ui/core/Paper\";\r\n\r\nimport Alert from \"@material-ui/lab/Alert\";\r\n\r\nimport PropTypes from \"prop-types\";\r\nimport LinearProgress from \"@material-ui/core/LinearProgress\";\r\nimport Box from \"@material-ui/core/Box\";\r\n\r\nvar interval;\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  title: {\r\n    marginTop: theme.spacing(0),\r\n    marginBottom: theme.spacing(1),\r\n  },\r\n\r\n  refreshButton: {\r\n    marginLeft: theme.spacing(2),\r\n  },\r\n\r\n  checkIcon: {\r\n    color: \"green\",\r\n  },\r\n\r\n  closeIcon: {\r\n    color: \"red\",\r\n  },\r\n\r\n  RefLink: {\r\n    cursor: \"pointer\",\r\n  },\r\n\r\n  BookedLabel: {\r\n    backgroundColor: \"#606060\",\r\n    color: \"#fff\",\r\n    paddingRight: \"10px\",\r\n    paddingLeft: \"10px\",\r\n  },\r\n\r\n  PatientAttendedLabel: {\r\n    backgroundColor: \"#0066aa\",\r\n    color: \"#fff\",\r\n    paddingRight: \"15px\",\r\n    paddingLeft: \"10px\",\r\n  },\r\n\r\n  SampleTakenLabel: {\r\n    backgroundColor: \"#0066cc\",\r\n    color: \"#fff\",\r\n    paddingRight: \"40px\",\r\n    paddingLeft: \"10px\",\r\n  },\r\n\r\n  ReportSentLabel: {\r\n    backgroundColor: \"#009900\",\r\n    color: \"#fff\",\r\n    paddingRight: \"90px\",\r\n    paddingLeft: \"10px\",\r\n  },\r\n\r\n  ReportCertSentLabel: {\r\n    backgroundColor: \"#009900\",\r\n    color: \"#fff\",\r\n    paddingRight: \"68px\",\r\n    paddingLeft: \"10px\",\r\n  },\r\n\r\n  archiveButton: {},\r\n\r\n  smartMatchButton: {\r\n    backgroundColor: \"#2f942e\",\r\n    \"&:hover\": {\r\n      background: \"green\",\r\n      color: \"#fff\",\r\n    },\r\n    textDecoration: \"none !important\",\r\n    marginRight: \"10px\",\r\n    // padding: \"10px\"\r\n  },\r\n\r\n  infoTitle: {\r\n    fontWeight: \"400\",\r\n  },\r\n\r\n  infoData: {\r\n    paddingLeft: \"10px\",\r\n    fontWeight: \"800\",\r\n  },\r\n\r\n  matchButton: {\r\n    marginTop: \"30px\",\r\n    marginBottom: \"20px\",\r\n    backgroundColor: \"#2f942e\",\r\n    \"&:hover\": {\r\n      background: \"green\",\r\n      color: \"#fff\",\r\n    },\r\n    textDecoration: \"none !important\",\r\n    padding: \"10px\",\r\n    paddingLeft: \"50px\",\r\n    paddingRight: \"50px\",\r\n  },\r\n\r\n  resendButton: {\r\n    marginTop: \"5px\",\r\n    marginBottom: \"5px\",\r\n    backgroundColor: \"#2f942e\",\r\n    \"&:hover\": {\r\n      background: \"green\",\r\n      color: \"#fff\",\r\n    },\r\n    textDecoration: \"none !important\",\r\n    padding: \"10px\",\r\n    paddingLeft: \"50px\",\r\n    paddingRight: \"50px\",\r\n  },\r\n\r\n  resendFilesButton: {\r\n    marginTop: \"5px\",\r\n    marginBottom: \"5px\",\r\n    backgroundColor: \"#3792ad\",\r\n    \"&:hover\": {\r\n      background: \"#2f798f\",\r\n      color: \"#fff\",\r\n    },\r\n    textDecoration: \"none !important\",\r\n    padding: \"10px\",\r\n    paddingLeft: \"50px\",\r\n    paddingRight: \"50px\",\r\n  },\r\n\r\n  cancelButton: {\r\n    marginBottom: \"10px\",\r\n    textDecoration: \"none !important\",\r\n    padding: \"10px\",\r\n    paddingLeft: \"90px\",\r\n    paddingRight: \"90px\",\r\n  },\r\n}));\r\n\r\nconst BorderLinearProgress = withStyles((theme) => ({\r\n  root: {\r\n    height: 10,\r\n    borderRadius: 5,\r\n  },\r\n  colorPrimary: {\r\n    backgroundColor: \"#cedbce\", //theme.palette.grey[theme.palette.type === 'light' ? 200 : 700],\r\n  },\r\n  bar: {\r\n    borderRadius: 5,\r\n    backgroundColor: \"#2f942e\",\r\n  },\r\n}))(LinearProgress);\r\nfunction LinearProgressWithLabel(props) {\r\n  return (\r\n    <Box display=\"flex\" alignItems=\"center\">\r\n      <Box width=\"100%\" mr={1}>\r\n        <BorderLinearProgress variant=\"determinate\" {...props} />\r\n      </Box>\r\n      <Box minWidth={35}>\r\n        <Typography\r\n          style={{ fontWeight: \"800\", color: \"#5e855e\" }}\r\n          variant=\"body2\"\r\n          color=\"textSecondary\"\r\n        >{`${Math.round(props.value)}%`}</Typography>\r\n      </Box>\r\n    </Box>\r\n  );\r\n}\r\n\r\nLinearProgressWithLabel.propTypes = {\r\n  /**\r\n   * The value of the progress indicator for the determinate and buffer variants.\r\n   * Value between 0 and 100.\r\n   */\r\n  value: PropTypes.number.isRequired,\r\n};\r\n\r\nfunction PaperComponent(props) {\r\n  return (\r\n    <Draggable\r\n      handle=\"#draggable-dialog-title\"\r\n      cancel={'[class*=\"MuiDialogContent-root\"]'}\r\n    >\r\n      <Paper {...props} />\r\n    </Draggable>\r\n  );\r\n}\r\n\r\nexport default function ResendEmailsDialog(props) {\r\n  const classes = useStyles();\r\n\r\n  const [state, setState] = React.useContext(GlobalState);\r\n\r\n  const [sending, setSending] = React.useState(false);\r\n  const [sent, setSent] = React.useState(false);\r\n\r\n  const [sendJustToPCR, setSendJustToPCR] = React.useState(false);\r\n\r\n  const [sendingStatus, setSendingStatus] = React.useState(\"\");\r\n\r\n  const [sendingProgress, setSendingProgress] = React.useState(10);\r\n\r\n  const [error, setError] = React.useState(false);\r\n\r\n  const getProgress = (status) => {\r\n    console.log(`status : ${status}`);\r\n\r\n    if (status === \"downloadFailed\") return 10;\r\n    else if (status === \"downloading\") return 30;\r\n    else if (status === \"downloadSuccess\") return 70;\r\n    else if (status === \"sent\") return 100;\r\n    else return 0;\r\n  };\r\n\r\n  const handleClose = () => {\r\n    setSending(false);\r\n    setSent(false);\r\n    setError(false);\r\n    clearInterval(interval);\r\n    props.handleClose();\r\n  };\r\n\r\n  useEffect(() => {\r\n    setSendingProgress((prevProgress) =>\r\n      prevProgress >= 100 ? 100 : getProgress(sendingStatus)\r\n    );\r\n  }, [sendingStatus]);\r\n\r\n  const resendFilesClicked = (event) => {\r\n    setSending(true);\r\n    setSendingProgress(0);\r\n    setSendingStatus(\"downloadFailed\");\r\n    setSendJustToPCR(true);\r\n\r\n    BookService.regenerateFilesWithBookingId(props.booking._id)\r\n      .then((res) => {\r\n        interval = setInterval(() => {\r\n          BookService.getLinkDetailsWithBookingId(props.booking._id).then(\r\n            (res) => {\r\n              if (res.data.status === \"OK\") {\r\n                setSendingStatus(res.data.link.status);\r\n\r\n                if (res.data.link.status === \"sent\") {\r\n                  setSending(false);\r\n                  setSent(true);\r\n                  clearInterval(interval);\r\n                }\r\n              } else if (res.data.status === \"FAILED\") {\r\n                setSending(false);\r\n                setSent(false);\r\n                clearInterval(interval);\r\n                setError(true);\r\n              }\r\n            }\r\n          );\r\n        }, 1000);\r\n\r\n        setTimeout(() => {\r\n          setError(true);\r\n          clearInterval(interval);\r\n        }, 60000);\r\n      })\r\n      .catch((err) => {\r\n        console.log(err);\r\n        setSending(false);\r\n      });\r\n  };\r\n\r\n  const resendEmailsClicked = (event) => {\r\n    setSending(true);\r\n    setSendingProgress(0);\r\n    setSendingStatus(\"downloadFailed\");\r\n\r\n    BookService.resendEmailsWithBookingId(props.booking._id)\r\n      .then((res) => {\r\n        interval = setInterval(() => {\r\n          BookService.getLinkDetailsWithBookingId(props.booking._id).then(\r\n            (res) => {\r\n              if (res.data.status === \"OK\") {\r\n                setSendingStatus(res.data.link.status);\r\n\r\n                if (res.data.link.status === \"sent\") {\r\n                  setSending(false);\r\n                  setSent(true);\r\n                  clearInterval(interval);\r\n                }\r\n              } else if (res.data.status === \"FAILED\") {\r\n                setSending(false);\r\n                setSent(false);\r\n                clearInterval(interval);\r\n                setError(true);\r\n              }\r\n            }\r\n          );\r\n        }, 1000);\r\n\r\n        setTimeout(() => {\r\n          setError(true);\r\n          clearInterval(interval);\r\n        }, 60000);\r\n      })\r\n      .catch((err) => {\r\n        console.log(err);\r\n        setSending(false);\r\n      });\r\n  };\r\n\r\n  const cancelResendEmailsClicked = (event) => {\r\n    props.handleClose();\r\n  };\r\n\r\n  return (\r\n    <React.Fragment>\r\n      {props.booking && (\r\n        <React.Fragment>\r\n          <Dialog\r\n            maxWidth=\"md\"\r\n            open={props.open}\r\n            onClose={handleClose}\r\n            PaperComponent={PaperComponent}\r\n            aria-labelledby=\"form-dialog-title\"\r\n          >\r\n            <DialogTitle id=\"draggable-dialog-title\">\r\n              <Grid\r\n                container\r\n                spacing={2}\r\n                direction=\"row\"\r\n                justify=\"center\"\r\n                alignItems=\"center\"\r\n              >\r\n                <Grid item>\r\n                  <SendIcon style={{ color: \"#2f942e\", fontSize: \"2rem\" }} />\r\n                </Grid>\r\n\r\n                <Grid item>\r\n                  <div\r\n                    style={{\r\n                      color: \"#2f942e\",\r\n                      paddingBottom: \"12px\",\r\n                      fontWeight: \"800\",\r\n                    }}\r\n                  >\r\n                    {\" \"}\r\n                    RESEND EMAILS{\" \"}\r\n                  </div>\r\n                </Grid>\r\n              </Grid>\r\n\r\n              <Divider />\r\n            </DialogTitle>\r\n            <DialogContent>\r\n              <div\r\n                style={{\r\n                  height: \"230px\",\r\n                }}\r\n              >\r\n                <Grid\r\n                  container\r\n                  direction=\"column\"\r\n                  justify=\"center\"\r\n                  spacing={1}\r\n                  alignItems=\"center\"\r\n                >\r\n                  {!sent && !sending && (\r\n                    <React.Fragment>\r\n                      <Grid item>\r\n                        <div\r\n                          style={{\r\n                            paddingTop: \"5px\",\r\n                            fontSize: \"1rem\",\r\n                            fontWeight: \"500\",\r\n                            color: \"#555\",\r\n                          }}\r\n                        >\r\n                          Do you want to Resend the LAB Report{\" \"}\r\n                          {props.booking.certificate ? \" and Certificate\" : \"\"}{\" \"}\r\n                          Now?\r\n                        </div>\r\n                      </Grid>\r\n\r\n                      <Grid item>\r\n                        <Button\r\n                          disabled={sending || sent}\r\n                          className={classes.resendButton}\r\n                          variant=\"contained\"\r\n                          color=\"primary\"\r\n                          onClick={resendEmailsClicked}\r\n                        >\r\n                          YES ! RESEND THE EMAILS\r\n                        </Button>\r\n                      </Grid>\r\n\r\n                      <Grid item>\r\n                        <Button\r\n                          disabled={sending || sent}\r\n                          className={classes.cancelButton}\r\n                          variant=\"contained\"\r\n                          color=\"default\"\r\n                          onClick={cancelResendEmailsClicked}\r\n                        >\r\n                          NO ! NOT NOW\r\n                        </Button>\r\n                      </Grid>\r\n\r\n                      <Grid item>\r\n                        <Button\r\n                          disabled={sending || sent}\r\n                          className={classes.resendFilesButton}\r\n                          variant=\"contained\"\r\n                          color=\"primary\"\r\n                          onClick={resendFilesClicked}\r\n                        >\r\n                          Just Generate The Files and send to\r\n                          pcrresults@medicalexpressclinic.co.uk\r\n                        </Button>\r\n                      </Grid>\r\n                    </React.Fragment>\r\n                  )}\r\n\r\n                  {error && !sending && !sent && (\r\n                    <Grid item>\r\n                      <Alert\r\n                        style={{\r\n                          marginTop: \"10px\",\r\n                          paddingLeft: \"50px\",\r\n                          paddingRight: \"50px\",\r\n                        }}\r\n                        severity=\"error\"\r\n                      >\r\n                        Error! — Something is wrong with this record!\r\n                      </Alert>\r\n                    </Grid>\r\n                  )}\r\n\r\n                  {(sending || sent) && (\r\n                    <Grid item>\r\n                      <div\r\n                        style={{\r\n                          paddingTop: \"50px\",\r\n                          color: \"#2f942e\",\r\n                          fontWeight: \"600\",\r\n                          fontSize: \"1rem\",\r\n                        }}\r\n                      >\r\n                        {sending && !sent && \"Sending ...\"}\r\n\r\n                        {sent && !sendJustToPCR && (\r\n                          <Alert\r\n                            style={{\r\n                              marginTop: \"10px\",\r\n                              paddingLeft: \"50px\",\r\n                              paddingRight: \"50px\",\r\n                            }}\r\n                            severity=\"success\"\r\n                          >\r\n                            Success! — The LAB Report{\" \"}\r\n                            {props.booking.certificate\r\n                              ? \" and Certificate \"\r\n                              : \" \"}{\" \"}\r\n                            Successfully Sent.\r\n                          </Alert>\r\n                        )}\r\n\r\n                        {sent && sendJustToPCR && (\r\n                          <Alert\r\n                            style={{\r\n                              marginTop: \"10px\",\r\n                              paddingLeft: \"50px\",\r\n                              paddingRight: \"50px\",\r\n                            }}\r\n                            severity=\"success\"\r\n                          >\r\n                            Success! — The LAB Report{\" \"}\r\n                            {props.booking.certificate\r\n                              ? \" and Certificate \"\r\n                              : \" \"}{\" \"}\r\n                            Successfully Sent Just to\r\n                            pcrresults@medicalexpressclinic.co.uk .\r\n                          </Alert>\r\n                        )}\r\n                      </div>\r\n                    </Grid>\r\n                  )}\r\n                </Grid>\r\n\r\n                {(sending || sent) && (\r\n                  <React.Fragment>\r\n                    <div\r\n                      style={{\r\n                        marginTop: \"10px\",\r\n                        width: \"50%\",\r\n                        marginLeft: \"27%\",\r\n                      }}\r\n                    >\r\n                      <LinearProgressWithLabel\r\n                        variant=\"determinate\"\r\n                        color=\"primary\"\r\n                        value={sendingProgress}\r\n                      />\r\n                    </div>\r\n\r\n                    <div\r\n                      style={{\r\n                        paddingTop: \"30px\",\r\n                        color: \"#2f942e\",\r\n                        fontWeight: \"600\",\r\n                        fontSize: \"1rem\",\r\n                        marginLeft: \"45%\",\r\n                      }}\r\n                    >\r\n                      {sending && !sent && \"PLEASE WAIT ...\"}\r\n                    </div>\r\n                  </React.Fragment>\r\n                )}\r\n              </div>\r\n            </DialogContent>\r\n          </Dialog>\r\n        </React.Fragment>\r\n      )}\r\n    </React.Fragment>\r\n  );\r\n}\r\n","import React, {useEffect, useRef, useState} from 'react';\r\nimport BookService from './services/BookService';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport { Backdrop, Button, Checkbox, CircularProgress, Divider, FormControlLabel, Grid, InputLabel, Link, makeStyles, MenuItem, Select, TextField, Tooltip } from '@material-ui/core';\r\nimport GlobalState from './../GlobalState';\r\nimport { withStyles } from '@material-ui/core/styles';\r\n\r\n\r\nimport CreditCardIcon from '@material-ui/icons/CreditCard';\r\n\r\nimport Dialog from '@material-ui/core/Dialog';\r\nimport DialogContent from '@material-ui/core/DialogContent';\r\n\r\nimport DialogTitle from '@material-ui/core/DialogTitle';\r\nimport Draggable from 'react-draggable';\r\nimport Paper from '@material-ui/core/Paper';\r\n\r\nimport Alert from '@material-ui/lab/Alert';\r\n\r\nimport PropTypes from 'prop-types';\r\nimport LinearProgress from '@material-ui/core/LinearProgress';\r\nimport Box from '@material-ui/core/Box';\r\n\r\nimport Radio from '@material-ui/core/Radio';\r\nimport RadioGroup from '@material-ui/core/RadioGroup';\r\nimport FormControl from '@material-ui/core/FormControl';\r\nimport FormLabel from '@material-ui/core/FormLabel';\r\nimport { corporates } from './Corporates';\r\n\r\nvar interval;\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  title: {\r\n    marginTop: theme.spacing(0),\r\n    marginBottom: theme.spacing(1),\r\n\r\n  },\r\n  \r\n  refreshButton:{\r\n    marginLeft: theme.spacing(2),\r\n  },\r\n\r\n  checkIcon:{\r\n    color: \"green\"\r\n  },\r\n\r\n  closeIcon:{\r\n    color: \"red\"\r\n  },\r\n\r\n  RefLink: {\r\n    cursor: \"pointer\"\r\n  },\r\n\r\n  BookedLabel:{\r\n    backgroundColor: \"#606060\",\r\n    color: \"#fff\",\r\n    paddingRight: \"10px\",\r\n    paddingLeft: \"10px\"\r\n  },\r\n\r\n  PatientAttendedLabel:{\r\n    backgroundColor: \"#0066aa\",\r\n    color: \"#fff\",\r\n    paddingRight: \"15px\",\r\n    paddingLeft: \"10px\"\r\n  },\r\n\r\n  SampleTakenLabel:{\r\n    backgroundColor: \"#0066cc\",\r\n    color: \"#fff\",\r\n    paddingRight: \"40px\",\r\n    paddingLeft: \"10px\"\r\n  },\r\n\r\n  ReportSentLabel:{\r\n    backgroundColor: \"#009900\",\r\n    color: \"#fff\",\r\n    paddingRight: \"90px\",\r\n    paddingLeft: \"10px\"\r\n  },\r\n\r\n  ReportCertSentLabel:{\r\n    backgroundColor: \"#009900\",\r\n    color: \"#fff\",\r\n    paddingRight: \"68px\",\r\n    paddingLeft: \"10px\"\r\n  },\r\n\r\n  archiveButton: {\r\n\r\n  },\r\n\r\n  smartMatchButton: {\r\n    backgroundColor : \"#2f942e\",\r\n    \"&:hover\": {\r\n      background: \"green\",\r\n      color: \"#fff\"\r\n    },\r\n    textDecoration : \"none !important\",\r\n    marginRight : \"10px\"\r\n    // padding: \"10px\"  \r\n  },\r\n\r\n  infoTitle:  {\r\n    fontWeight: \"400\"\r\n  },\r\n\r\n  infoData: {\r\n    paddingLeft: \"10px\",\r\n    fontWeight: \"800\"\r\n  },\r\n\r\n  matchButton:\r\n  {\r\n    marginTop: \"30px\",\r\n    marginBottom : \"20px\",\r\n    backgroundColor : \"#2f942e\",\r\n    \"&:hover\": {\r\n      background: \"green\",\r\n      color: \"#fff\"\r\n    },\r\n    textDecoration : \"none !important\",\r\n    padding: \"10px\",\r\n    paddingLeft : \"50px\",\r\n    paddingRight: \"50px\"   \r\n  },\r\n\r\n  resendButton:\r\n  {\r\n    marginTop: \"5px\",\r\n    marginBottom : \"5px\",\r\n    backgroundColor : \"#2f942e\",\r\n    \"&:hover\": {\r\n      background: \"green\",\r\n      color: \"#fff\"\r\n    },\r\n    textDecoration : \"none !important\",\r\n    padding: \"10px\",\r\n    paddingLeft : \"50px\",\r\n    paddingRight: \"50px\"   \r\n  },\r\n\r\n  resendFilesButton:{\r\n    marginTop: \"5px\",\r\n    marginBottom : \"5px\",\r\n    backgroundColor : \"#3792ad\",\r\n    \"&:hover\": {\r\n      background: \"#2f798f\",\r\n      color: \"#fff\"\r\n    },\r\n    textDecoration : \"none !important\",\r\n    padding: \"10px\",\r\n    paddingLeft : \"50px\",\r\n    paddingRight: \"50px\"   \r\n  },\r\n\r\n  cancelButton:\r\n  {\r\n    marginBottom : \"10px\",\r\n    textDecoration : \"none !important\",\r\n    padding: \"10px\",\r\n    paddingLeft : \"90px\",\r\n    paddingRight: \"90px\"   \r\n  },\r\n  \r\n  backdrop: {\r\n    zIndex: theme.zIndex.drawer + 5,\r\n    color: \"#fff\",\r\n  },\r\n  \r\n}));\r\n\r\nconst BorderLinearProgress = withStyles((theme) => ({\r\n  root: {\r\n    height: 10,\r\n    borderRadius: 5,\r\n  },\r\n  colorPrimary: {\r\n    backgroundColor: \"#cedbce\" //theme.palette.grey[theme.palette.type === 'light' ? 200 : 700],\r\n  },\r\n  bar: {\r\n    borderRadius: 5,\r\n    backgroundColor: '#2f942e',\r\n  },\r\n}))(LinearProgress);\r\nfunction LinearProgressWithLabel(props) {\r\n  return (\r\n    <Box display=\"flex\" alignItems=\"center\">\r\n      <Box width=\"100%\" mr={1}>\r\n        <BorderLinearProgress variant=\"determinate\" {...props} />\r\n      </Box>\r\n      <Box minWidth={35}>\r\n        <Typography style={{fontWeight:\"800\", color :  \"#5e855e\"  }} variant=\"body2\" color=\"textSecondary\">{`${Math.round(\r\n          props.value,\r\n        )}%`}</Typography>\r\n      </Box>\r\n    </Box>\r\n  );\r\n}\r\n\r\nLinearProgressWithLabel.propTypes = {\r\n  /**\r\n   * The value of the progress indicator for the determinate and buffer variants.\r\n   * Value between 0 and 100.\r\n   */\r\n  value: PropTypes.number.isRequired,\r\n};\r\n\r\n\r\nfunction PaperComponent(props) {\r\n  return (\r\n    <Draggable handle=\"#draggable-dialog-title\" cancel={'[class*=\"MuiDialogContent-root\"]'}>\r\n      <Paper {...props} />\r\n    </Draggable>\r\n  );\r\n}\r\n\r\n\r\n\r\nexport default function PayDialog(props) {\r\n  \r\n  const classes = useStyles();\r\n\r\n  const [state, setState] = React.useContext(GlobalState);  \r\n  const [paymentMethod, setPaymentMethod] = useState('credit card');\r\n  const [corporate, setCorporate] = useState(corporates[0]);\r\n  const [saving, setSaving] = useState(false);\r\n\r\n  const paymentMethodChanged = (event) =>\r\n  {\r\n    setPaymentMethod(event.target.value);\r\n  }\r\n\r\n  const handleClose = () =>\r\n  {\r\n      if (saving)\r\n        return;\r\n\r\n      props.handleClose();  \r\n      setPaymentMethod('credit card');\r\n      setCorporate(corporates[0]);\r\n      setSaving(false);\r\n  }\r\n\r\n  const corporateChanged = (event) =>\r\n  {\r\n    setCorporate(event.target.value);\r\n  }\r\n\r\n  const payClicked = async () =>\r\n  {\r\n    setSaving(true);\r\n\r\n    try\r\n    {\r\n         await BookService.payBooking(props.booking._id,paymentMethod, paymentMethod === 'corporate' ? corporate : '');\r\n         setSaving(false);\r\n         setState(state => ({...state, bookingPayChanged : !state.bookingPayChanged ? true : false}));\r\n         handleClose();\r\n    }\r\n    catch(err)\r\n    {\r\n        console.error(err);\r\n        setSaving(false);\r\n    }\r\n\r\n  }\r\n\r\n\r\n  return (\r\n    <React.Fragment>\r\n\r\n        {props.booking && ( \r\n\r\n                <React.Fragment>\r\n<Dialog\r\nmaxWidth=\"800px\"\r\nopen={props.open}\r\nonClose={handleClose}\r\nPaperComponent={PaperComponent}\r\naria-labelledby=\"form-dialog-title\"\r\n>\r\n<DialogTitle id=\"draggable-dialog-title\">\r\n  <Grid\r\n    container\r\n    spacing={2}\r\n    direction=\"row\"\r\n    justify=\"center\"\r\n    alignItems=\"center\"\r\n  >\r\n    <Grid item>\r\n      <CreditCardIcon\r\n        style={{ color: \"#f50057\", fontSize: \"3rem\" }}\r\n      />\r\n    </Grid>\r\n\r\n    <Grid item>\r\n      <div\r\n        style={{\r\n          color: \"#f50057\",\r\n          paddingBottom: \"10px\",\r\n          fontWeight: \"800\",\r\n        }}\r\n      >\r\n        {\" \"}\r\n        PAY the CHARGE{\" \"}\r\n      </div>\r\n    </Grid>\r\n  </Grid>\r\n\r\n  <Divider />\r\n</DialogTitle>\r\n<DialogContent>\r\n  <div\r\n    style={{\r\n      height: \"270px\",\r\n    \r\n    }}\r\n  >\r\n        <Grid\r\n          container\r\n          direction=\"column\"\r\n          justify=\"space-between\"\r\n          spacing = {2}\r\n          alignItems=\"flex-start\"\r\n        >\r\n            <Grid item>\r\n               <div style={{fontSize: \"17px\"}}> How do you want to pay? </div> \r\n            </Grid>\r\n\r\n            <Grid item>\r\n      \r\n            <FormControl component=\"fieldset\">\r\n                \r\n                <RadioGroup aria-label=\"paymentMethod\" name=\"paymentMethod\" value={paymentMethod} onChange={paymentMethodChanged}>\r\n                    <FormControlLabel value=\"credit card\" control={<Radio />} label=\"Credit Card\" />\r\n                    <FormControlLabel value=\"cash\" control={<Radio />} label=\"Cash\" />\r\n                    <FormControlLabel value=\"corporate\" control={<Radio />} label=\"Corporate\" />\r\n                </RadioGroup>\r\n\r\n                { paymentMethod === 'corporate' && (\r\n\r\n                        <FormControl style={{marginTop: \"10px\"}} className={classes.formControl}>\r\n                        <Select\r\n                            labelId=\"select-corporate\"\r\n                            id=\"select-corporate-id\"\r\n                            value={corporate}\r\n                            onChange={corporateChanged}\r\n                        >\r\n                        {\r\n                        corporates.map(element => (\r\n                                    <MenuItem value={element}>{`${element}`}</MenuItem>\r\n                        ))\r\n                        }     \r\n\r\n                        </Select>\r\n                    </FormControl>\r\n\r\n                )}\r\n              \r\n\r\n                </FormControl>\r\n            </Grid>\r\n\r\n\r\n        </Grid>\r\n\r\n        <Grid item>\r\n           \r\n    </Grid>\r\n\r\n    <div style={{position:\"absolute\", bottom:\"20px\", right:\"20px\"}}>\r\n            <Grid\r\n                container\r\n                direction=\"row\"\r\n                justify=\"flex-end\"\r\n                alignItems=\"center\"\r\n                spacing = {1}\r\n            >\r\n               \r\n                <Grid item>\r\n                    <Button onClick={handleClose}  style= {{width : '100px'}} disabled={saving}>\r\n                        back\r\n                    </Button>\r\n                        \r\n                </Grid>\r\n                <Grid item>\r\n                    <Button \r\n                        onClick = {payClicked}\r\n                        variant=\"contained\"\r\n                        color=\"secondary\"\r\n                        style= {{width : '100px'}}\r\n                        disabled={saving}\r\n                    >\r\n                        Pay\r\n                    </Button>\r\n                </Grid>  \r\n          </Grid>\r\n\r\n    </div>\r\n\r\n    \r\n  </div>\r\n\r\n             <Backdrop\r\n                className={classes.backdrop}\r\n                open={saving}\r\n              >\r\n                <CircularProgress color=\"inherit\" />\r\n              </Backdrop>\r\n\r\n</DialogContent>\r\n</Dialog>\r\n\r\n\r\n\r\n\r\n</React.Fragment>\r\n\r\n\r\n        )}\r\n  \r\n    </React.Fragment>\r\n  );\r\n}","import React, { useEffect, useRef, useState } from \"react\";\r\nimport BookService from \"./services/BookService\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport {\r\n  Button,\r\n  Checkbox,\r\n  DialogActions,\r\n  Divider,\r\n  FormControlLabel,\r\n  Grid,\r\n  Link,\r\n  makeStyles,\r\n  TextField,\r\n  Tooltip,\r\n} from \"@material-ui/core\";\r\nimport GlobalState from \"./../GlobalState\";\r\nimport { withStyles } from \"@material-ui/core/styles\";\r\n\r\nimport SendIcon from \"@material-ui/icons/Send\";\r\n\r\nimport Dialog from \"@material-ui/core/Dialog\";\r\nimport DialogContent from \"@material-ui/core/DialogContent\";\r\n\r\nimport DialogTitle from \"@material-ui/core/DialogTitle\";\r\nimport Draggable from \"react-draggable\";\r\nimport Paper from \"@material-ui/core/Paper\";\r\n\r\nimport HistoryIcon from \"@material-ui/icons/History\";\r\nimport dateformat from \"dateformat\";\r\n\r\nconst addMinutes = (date, minutes) => {\r\n  date = new Date(date);\r\n  return new Date(date.getTime() + minutes * 60 * 1000);\r\n};\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  title: {\r\n    marginTop: theme.spacing(0),\r\n    marginBottom: theme.spacing(1),\r\n  },\r\n\r\n  refreshButton: {\r\n    marginLeft: theme.spacing(2),\r\n  },\r\n\r\n  checkIcon: {\r\n    color: \"green\",\r\n  },\r\n\r\n  closeIcon: {\r\n    color: \"red\",\r\n  },\r\n\r\n  RefLink: {\r\n    cursor: \"pointer\",\r\n  },\r\n\r\n  BookedLabel: {\r\n    backgroundColor: \"#606060\",\r\n    color: \"#fff\",\r\n    paddingRight: \"10px\",\r\n    paddingLeft: \"10px\",\r\n  },\r\n\r\n  PatientAttendedLabel: {\r\n    backgroundColor: \"#0066aa\",\r\n    color: \"#fff\",\r\n    paddingRight: \"15px\",\r\n    paddingLeft: \"10px\",\r\n  },\r\n\r\n  SampleTakenLabel: {\r\n    backgroundColor: \"#0066cc\",\r\n    color: \"#fff\",\r\n    paddingRight: \"40px\",\r\n    paddingLeft: \"10px\",\r\n  },\r\n\r\n  ReportSentLabel: {\r\n    backgroundColor: \"#009900\",\r\n    color: \"#fff\",\r\n    paddingRight: \"90px\",\r\n    paddingLeft: \"10px\",\r\n  },\r\n\r\n  ReportCertSentLabel: {\r\n    backgroundColor: \"#009900\",\r\n    color: \"#fff\",\r\n    paddingRight: \"68px\",\r\n    paddingLeft: \"10px\",\r\n  },\r\n\r\n  archiveButton: {},\r\n\r\n  smartMatchButton: {\r\n    backgroundColor: \"#2f942e\",\r\n    \"&:hover\": {\r\n      background: \"green\",\r\n      color: \"#fff\",\r\n    },\r\n    textDecoration: \"none !important\",\r\n    marginRight: \"10px\",\r\n    // padding: \"10px\"\r\n  },\r\n\r\n  infoTitle: {\r\n    fontWeight: \"400\",\r\n  },\r\n\r\n  infoData: {\r\n    paddingLeft: \"10px\",\r\n    fontWeight: \"800\",\r\n  },\r\n\r\n  matchButton: {\r\n    marginTop: \"30px\",\r\n    marginBottom: \"20px\",\r\n    backgroundColor: \"#2f942e\",\r\n    \"&:hover\": {\r\n      background: \"green\",\r\n      color: \"#fff\",\r\n    },\r\n    textDecoration: \"none !important\",\r\n    padding: \"10px\",\r\n    paddingLeft: \"50px\",\r\n    paddingRight: \"50px\",\r\n  },\r\n\r\n  resendButton: {\r\n    marginTop: \"5px\",\r\n    marginBottom: \"5px\",\r\n    backgroundColor: \"#2f942e\",\r\n    \"&:hover\": {\r\n      background: \"green\",\r\n      color: \"#fff\",\r\n    },\r\n    textDecoration: \"none !important\",\r\n    padding: \"10px\",\r\n    paddingLeft: \"50px\",\r\n    paddingRight: \"50px\",\r\n  },\r\n\r\n  resendFilesButton: {\r\n    marginTop: \"5px\",\r\n    marginBottom: \"5px\",\r\n    backgroundColor: \"#3792ad\",\r\n    \"&:hover\": {\r\n      background: \"#2f798f\",\r\n      color: \"#fff\",\r\n    },\r\n    textDecoration: \"none !important\",\r\n    padding: \"10px\",\r\n    paddingLeft: \"50px\",\r\n    paddingRight: \"50px\",\r\n  },\r\n\r\n  cancelButton: {\r\n    marginBottom: \"10px\",\r\n    textDecoration: \"none !important\",\r\n    padding: \"10px\",\r\n    paddingLeft: \"90px\",\r\n    paddingRight: \"90px\",\r\n  },\r\n\r\n  itemTitle: {\r\n    fontWeight: \"500\",\r\n    color: \"#555\",\r\n  },\r\n\r\n  itemData: {\r\n    paddingLeft: \"10px\",\r\n    fontWeight: \"600\",\r\n    color: \"#127512\",\r\n  },\r\n}));\r\n\r\nfunction PaperComponent(props) {\r\n  return (\r\n    <Draggable\r\n      handle=\"#draggable-dialog-title\"\r\n      cancel={'[class*=\"MuiDialogContent-root\"]'}\r\n    >\r\n      <Paper {...props} />\r\n    </Draggable>\r\n  );\r\n}\r\n\r\nexport default function TimeStampDialog(props) {\r\n  const classes = useStyles();\r\n\r\n  const [state, setState] = React.useContext(GlobalState);\r\n\r\n  const [linkTimeStamp, setLinkTimeStamp] = React.useState(null);\r\n\r\n  const handleClose = () => {\r\n    setLinkTimeStamp(null);\r\n\r\n    props.handleClose();\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (props.booking) {\r\n      if (props.booking.filename && props.booking.filename.length > 0) {\r\n        BookService.getLinkDetailsWithBookingId(props.booking._id).then(\r\n          (res) => {\r\n            if (res.data.status === \"OK\") {\r\n              setLinkTimeStamp(res.data.link.timeStamp);\r\n            }\r\n          }\r\n        );\r\n      }\r\n    }\r\n  }, [props.booking]);\r\n\r\n  const getDateFromBooking = (booking) => {\r\n    let date = new Date(booking.bookingDate);\r\n    date.setHours(booking.bookingTimeNormalized.substr(0, 2));\r\n    date.setMinutes(booking.bookingTimeNormalized.substr(3, 2));\r\n    date.setSeconds(0);\r\n    date.setMilliseconds(0);\r\n    return date;\r\n  };\r\n\r\n  return (\r\n    <React.Fragment>\r\n      {props.booking && (\r\n        <React.Fragment>\r\n          <Dialog\r\n            maxWidth=\"sm\"\r\n            open={props.open}\r\n            onClose={handleClose}\r\n            PaperComponent={PaperComponent}\r\n            aria-labelledby=\"form-dialog-title\"\r\n          >\r\n            <DialogTitle id=\"draggable-dialog-title\">\r\n              <Grid\r\n                container\r\n                spacing={2}\r\n                direction=\"row\"\r\n                justify=\"center\"\r\n                alignItems=\"center\"\r\n              >\r\n                <Grid item>\r\n                  <HistoryIcon style={{ color: \"#f50057\", fontSize: \"2rem\" }} />\r\n                </Grid>\r\n\r\n                <Grid item>\r\n                  <div\r\n                    style={{\r\n                      color: \"#f50057\",\r\n                      paddingBottom: \"12px\",\r\n                      fontWeight: \"800\",\r\n                    }}\r\n                  >\r\n                    {\" \"}\r\n                    Audit Trail{\" \"}\r\n                  </div>\r\n                </Grid>\r\n              </Grid>\r\n\r\n              <Divider />\r\n            </DialogTitle>\r\n            <DialogContent>\r\n              <div\r\n                style={{\r\n                  height: \"370px\",\r\n              \r\n                }}\r\n              >\r\n                <Grid\r\n                  container\r\n                  direction=\"column\"\r\n                  justify=\"flex-start\"\r\n                  spacing={4}\r\n                  alignItems=\"flex-start\"\r\n                >\r\n                  <Grid item>\r\n                    <span className={classes.itemTitle}>\r\n                      PATIENT BOOKING TIMESTAMP :{\" \"}\r\n                    </span>\r\n                    <span className={classes.itemData}>\r\n                      {\" \"}\r\n                      {dateformat(props.booking.timeStamp, \"isoDateTime\")}{\" \"}\r\n                    </span>\r\n                  </Grid>\r\n\r\n                  <Grid item>\r\n                    <span className={classes.itemTitle}>\r\n                      BOOKED DATE AND TIME :{\" \"}\r\n                    </span>\r\n                    <span className={classes.itemData}>\r\n                      {dateformat(\r\n                        getDateFromBooking(props.booking),\r\n                        \"isoDateTime\"\r\n                      )}\r\n                    </span>\r\n                  </Grid>\r\n\r\n                  <Grid item>\r\n                    <span className={classes.itemTitle}>\r\n                      TIMESTAMP ATTENDED :{\" \"}\r\n                    </span>\r\n                    {props.booking.samplingTimeStamp ? (\r\n                      <span className={classes.itemData}>\r\n                        {\" \"}\r\n                        {dateformat(\r\n                          props.booking.samplingTimeStamp,\r\n                          \"isoDateTime\"\r\n                        )}{\" \"}\r\n                      </span>\r\n                    ) : (\r\n                      <span className={classes.itemData}> - </span>\r\n                    )}\r\n                  </Grid>\r\n\r\n                  <Grid item>\r\n                    <span className={classes.itemTitle}>\r\n                      TIMESTAMP - SAMPLE TAKEN :{\" \"}\r\n                    </span>\r\n                    {props.booking.samplingTimeStamp ? (\r\n                      <span className={classes.itemData}>\r\n                        {\" \"}\r\n                        {dateformat(\r\n                          addMinutes(props.booking.samplingTimeStamp, 5),\r\n                          \"isoDateTime\"\r\n                        )}{\" \"}\r\n                      </span>\r\n                    ) : (\r\n                      <span className={classes.itemData}> - </span>\r\n                    )}\r\n                  </Grid>\r\n\r\n                  <Grid item>\r\n                    <span className={classes.itemTitle}>\r\n                      TIMESTAMP - COLLECTED BY COURIER :{\" \"}\r\n                    </span>\r\n                    {props.booking.samplingTimeStamp ? (\r\n                      <span className={classes.itemData}>\r\n                        {\" \"}\r\n                        {dateformat(\r\n                          addMinutes(props.booking.samplingTimeStamp, 35),\r\n                          \"isoDateTime\"\r\n                        )}{\" \"}\r\n                      </span>\r\n                    ) : (\r\n                      <span className={classes.itemData}> - </span>\r\n                    )}\r\n                  </Grid>\r\n\r\n                  <Grid item>\r\n                    <span className={classes.itemTitle}>\r\n                      TIMESTAMP - RESULTS RECEIVED :{\" \"}\r\n                    </span>\r\n                    {linkTimeStamp ? (\r\n                      <span className={classes.itemData}>\r\n                        {\" \"}\r\n                        {dateformat(linkTimeStamp, \"isoDateTime\")}{\" \"}\r\n                      </span>\r\n                    ) : (\r\n                      <span className={classes.itemData}> - </span>\r\n                    )}\r\n                  </Grid>\r\n\r\n                  <Grid item>\r\n                    <span className={classes.itemTitle}>\r\n                      TIMESTAMP - SENT TO PATIENT :{\" \"}\r\n                    </span>\r\n                    {linkTimeStamp ? (\r\n                      <span className={classes.itemData}>\r\n                        {\" \"}\r\n                        {dateformat(\r\n                          addMinutes(linkTimeStamp, 5),\r\n                          \"isoDateTime\"\r\n                        )}{\" \"}\r\n                      </span>\r\n                    ) : (\r\n                      <span className={classes.itemData}> - </span>\r\n                    )}\r\n                  </Grid>\r\n                </Grid>\r\n              </div>\r\n            </DialogContent>\r\n            <DialogActions>\r\n              <Button onClick={handleClose} color=\"default\">\r\n                Back\r\n              </Button>\r\n            </DialogActions>\r\n          </Dialog>\r\n        </React.Fragment>\r\n      )}\r\n    </React.Fragment>\r\n  );\r\n}\r\n","\r\n\r\nexport const CalendarColors = {\r\n    PCR_COLOR : \"#4faef7\",\r\n    GYNAE_COLOR : \"#e83caf\",\r\n    GP_COLOR :  \"#ff4f14\",\r\n    STD_COLOR : \"#d6733a\"\r\n}\r\n","import API from './api';\r\n\r\nexport default class InvoiceService{\r\n\r\n    static createInvoice = (payload) =>\r\n    {\r\n        return  API.post('/api/medex/invoice/createinvoice', payload)\r\n    }\r\n\r\n    static updateInvoice = (invoiceNumber, payload) =>\r\n    {\r\n        return  API.post(`/api/medex/invoice/updateinvoice?invoiceNumber=${invoiceNumber}`, payload)\r\n    }\r\n\r\n    static deleteinvoice = (invoiceNumber) =>\r\n    {\r\n        return  API.post(`/api/medex/invoice/deleteinvoice?invoiceNumber=${invoiceNumber}`)\r\n    }\r\n\r\n    static getInvoiceByBookingId = (bookingId) =>\r\n    {\r\n        return  API.get(`/api/medex/invoice/getinvoicebybookingid?bookingId=${bookingId}`)\r\n    }\r\n\r\n    static getInvoiceByInvoiceNumber = (invoiceNumber) =>\r\n    {\r\n        return  API.get(`/api/medex/invoice/getinvoicebyinvoicenumber?invoiceNumber=${invoiceNumber}`)\r\n    }\r\n\r\n    static getCodeDetails = (code) =>\r\n    {\r\n        return  API.post(`/api/medex/invoice/getcodedetails`, {code: code})\r\n    }\r\n\r\n    static getAllCodes = () =>\r\n    {\r\n        return API.get(`/api/medex/invoice/getallcodes`)\r\n    }\r\n\r\n    static downloadInvoice = (id) =>\r\n    {\r\n       return API.get(`/api/pdf/downloadinvoice?id=${id}`, {\r\n        responseType: 'arraybuffer',\r\n        id: id,\r\n        headers: {\r\n            Accept: 'application/pdf',\r\n        }\r\n        });\r\n    }\r\n\r\n    static emailInvoice = (id, email) =>\r\n    {\r\n       return API.post(`/api/pdf/emailinvoice?id=${id}&email=${email}`);\r\n    }\r\n\r\n}\r\n","import React, { useEffect, useRef, useState } from \"react\";\r\nimport InvoiceService from \"./services/InvoiceService\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\n\r\nimport Autocomplete from \"@material-ui/lab/Autocomplete\";\r\n\r\nimport {\r\n  Backdrop,\r\n  Button,\r\n  Checkbox,\r\n  CircularProgress,\r\n  DialogActions,\r\n  Divider,\r\n  FormControlLabel,\r\n  Grid,\r\n  IconButton,\r\n  InputAdornment,\r\n  InputLabel,\r\n  Link,\r\n  makeStyles,\r\n  MenuItem,\r\n  Select,\r\n  TextField,\r\n  Tooltip,\r\n} from \"@material-ui/core\";\r\nimport GlobalState from \"./GlobalState\";\r\nimport { withStyles } from \"@material-ui/core/styles\";\r\n\r\nimport CreditCardIcon from \"@material-ui/icons/CreditCard\";\r\n\r\nimport Dialog from \"@material-ui/core/Dialog\";\r\nimport DialogContent from \"@material-ui/core/DialogContent\";\r\n\r\nimport DialogTitle from \"@material-ui/core/DialogTitle\";\r\nimport Draggable from \"react-draggable\";\r\nimport Paper from \"@material-ui/core/Paper\";\r\n\r\nimport Alert from \"@material-ui/lab/Alert\";\r\n\r\nimport PropTypes from \"prop-types\";\r\nimport LinearProgress from \"@material-ui/core/LinearProgress\";\r\nimport Box from \"@material-ui/core/Box\";\r\n\r\nimport Radio from \"@material-ui/core/Radio\";\r\nimport RadioGroup from \"@material-ui/core/RadioGroup\";\r\nimport FormControl from \"@material-ui/core/FormControl\";\r\nimport NumberFormat from \"react-number-format\";\r\n\r\nimport ReceiptIcon from \"@material-ui/icons/Receipt\";\r\n\r\nimport DeleteIcon from \"@material-ui/icons/Delete\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  title: {\r\n    marginTop: theme.spacing(0),\r\n    marginBottom: theme.spacing(1),\r\n  },\r\n\r\n  refreshButton: {\r\n    marginLeft: theme.spacing(2),\r\n  },\r\n\r\n  checkIcon: {\r\n    color: \"green\",\r\n  },\r\n\r\n  closeIcon: {\r\n    color: \"red\",\r\n  },\r\n\r\n  RefLink: {\r\n    cursor: \"pointer\",\r\n  },\r\n\r\n  BookedLabel: {\r\n    backgroundColor: \"#606060\",\r\n    color: \"#fff\",\r\n    paddingRight: \"10px\",\r\n    paddingLeft: \"10px\",\r\n  },\r\n\r\n  PatientAttendedLabel: {\r\n    backgroundColor: \"#0066aa\",\r\n    color: \"#fff\",\r\n    paddingRight: \"15px\",\r\n    paddingLeft: \"10px\",\r\n  },\r\n\r\n  SampleTakenLabel: {\r\n    backgroundColor: \"#0066cc\",\r\n    color: \"#fff\",\r\n    paddingRight: \"40px\",\r\n    paddingLeft: \"10px\",\r\n  },\r\n\r\n  ReportSentLabel: {\r\n    backgroundColor: \"#009900\",\r\n    color: \"#fff\",\r\n    paddingRight: \"90px\",\r\n    paddingLeft: \"10px\",\r\n  },\r\n\r\n  ReportCertSentLabel: {\r\n    backgroundColor: \"#009900\",\r\n    color: \"#fff\",\r\n    paddingRight: \"68px\",\r\n    paddingLeft: \"10px\",\r\n  },\r\n\r\n  archiveButton: {},\r\n\r\n  smartMatchButton: {\r\n    backgroundColor: \"#2f942e\",\r\n    \"&:hover\": {\r\n      background: \"green\",\r\n      color: \"#fff\",\r\n    },\r\n    textDecoration: \"none !important\",\r\n    marginRight: \"10px\",\r\n    // padding: \"10px\"\r\n  },\r\n\r\n  infoTitle: {\r\n    fontWeight: \"400\",\r\n  },\r\n\r\n  infoData: {\r\n    paddingLeft: \"10px\",\r\n    fontWeight: \"800\",\r\n  },\r\n\r\n  matchButton: {\r\n    marginTop: \"30px\",\r\n    marginBottom: \"20px\",\r\n    backgroundColor: \"#2f942e\",\r\n    \"&:hover\": {\r\n      background: \"green\",\r\n      color: \"#fff\",\r\n    },\r\n    textDecoration: \"none !important\",\r\n    padding: \"10px\",\r\n    paddingLeft: \"50px\",\r\n    paddingRight: \"50px\",\r\n  },\r\n\r\n  resendButton: {\r\n    marginTop: \"5px\",\r\n    marginBottom: \"5px\",\r\n    backgroundColor: \"#2f942e\",\r\n    \"&:hover\": {\r\n      background: \"green\",\r\n      color: \"#fff\",\r\n    },\r\n    textDecoration: \"none !important\",\r\n    padding: \"10px\",\r\n    paddingLeft: \"50px\",\r\n    paddingRight: \"50px\",\r\n  },\r\n\r\n  resendFilesButton: {\r\n    marginTop: \"5px\",\r\n    marginBottom: \"5px\",\r\n    backgroundColor: \"#3792ad\",\r\n    \"&:hover\": {\r\n      background: \"#2f798f\",\r\n      color: \"#fff\",\r\n    },\r\n    textDecoration: \"none !important\",\r\n    padding: \"10px\",\r\n    paddingLeft: \"50px\",\r\n    paddingRight: \"50px\",\r\n  },\r\n\r\n  cancelButton: {\r\n    marginBottom: \"10px\",\r\n    textDecoration: \"none !important\",\r\n    padding: \"10px\",\r\n    paddingLeft: \"90px\",\r\n    paddingRight: \"90px\",\r\n  },\r\n\r\n  backdrop: {\r\n    zIndex: theme.zIndex.drawer + 5,\r\n    color: \"#fff\",\r\n  },\r\n}));\r\n\r\nfunction NumberFormatCustom(props) {\r\n  const { inputRef, onChange, ...other } = props;\r\n\r\n  return (\r\n    <NumberFormat\r\n      {...other}\r\n      getInputRef={inputRef}\r\n      onValueChange={(values) => {\r\n        onChange({\r\n          target: {\r\n            name: props.name,\r\n            value: values.value,\r\n          },\r\n        });\r\n      }}\r\n      thousandSeparator\r\n      isNumericString\r\n      prefix=\"\"\r\n    />\r\n  );\r\n}\r\n\r\nNumberFormatCustom.propTypes = {\r\n  inputRef: PropTypes.func.isRequired,\r\n  name: PropTypes.string.isRequired,\r\n  onChange: PropTypes.func.isRequired,\r\n};\r\n\r\nconst BorderLinearProgress = withStyles((theme) => ({\r\n  root: {\r\n    height: 10,\r\n    borderRadius: 5,\r\n  },\r\n  colorPrimary: {\r\n    backgroundColor: \"#cedbce\", //theme.palette.grey[theme.palette.type === 'light' ? 200 : 700],\r\n  },\r\n  bar: {\r\n    borderRadius: 5,\r\n    backgroundColor: \"#2f942e\",\r\n  },\r\n}))(LinearProgress);\r\nfunction LinearProgressWithLabel(props) {\r\n  return (\r\n    <Box display=\"flex\" alignItems=\"center\">\r\n      <Box width=\"100%\" mr={1}>\r\n        <BorderLinearProgress variant=\"determinate\" {...props} />\r\n      </Box>\r\n      <Box minWidth={35}>\r\n        <Typography\r\n          style={{ fontWeight: \"800\", color: \"#5e855e\" }}\r\n          variant=\"body2\"\r\n          color=\"textSecondary\"\r\n        >{`${Math.round(props.value)}%`}</Typography>\r\n      </Box>\r\n    </Box>\r\n  );\r\n}\r\n\r\nLinearProgressWithLabel.propTypes = {\r\n  /**\r\n   * The value of the progress indicator for the determinate and buffer variants.\r\n   * Value between 0 and 100.\r\n   */\r\n  value: PropTypes.number.isRequired,\r\n};\r\n\r\nfunction PaperComponent(props) {\r\n  return (\r\n    <Draggable\r\n      handle=\"#draggable-dialog-title\"\r\n      cancel={'[class*=\"MuiDialogContent-root\"]'}\r\n    >\r\n      <Paper {...props} />\r\n    </Draggable>\r\n  );\r\n}\r\n\r\nexport default function InvoiceDialog(props) {\r\n  const classes = useStyles();\r\n\r\n  const [state, setState] = React.useContext(GlobalState);\r\n  const [saving, setSaving] = useState(false);\r\n\r\n  const defaultCode = null; //{code:\"\",description:\"\",price:\"0\"}\r\n\r\n  const [code, setCode] = useState(defaultCode);\r\n  const [codeError, setCodeError] = useState(false);\r\n\r\n  const [description, setDescription] = useState(\"\");\r\n  const [descriptionError, setDescriptionError] = useState(false);\r\n\r\n  const [notes, setNotes] = useState(\"\");\r\n  const notesChanged = (event) => {\r\n    setNotes(event.target.value);\r\n  };\r\n\r\n  const [items, setItems] = React.useState([]);\r\n\r\n  const [price, setPrice] = useState(\"\");\r\n  const [priceError, setPriceError] = useState(false);\r\n\r\n  const [title, setTitle] = React.useState(\"INVOICE ISSUANCE\");\r\n\r\n  const [allCodes, setAllCodes] = React.useState([]);\r\n\r\n  useEffect(() => {\r\n    if (props.invoice) {\r\n      setItems(props.invoice.items);\r\n      setNotes(props.invoice.notes || \"\");\r\n      setTitle(\"EDIT INVOICE\");\r\n    } else {\r\n      setTitle(\"INVOICE ISSUANCE\");\r\n    }\r\n\r\n    fetchAllCodes();\r\n\r\n    return () => {\r\n      setItems([]);\r\n    };\r\n  }, [props.invoice]);\r\n\r\n  useEffect(() => {\r\n    if (!props.invoice && props.defaultCodes) {\r\n      setItems(props.defaultCodes)\r\n    }\r\n\r\n    return () => {\r\n      setItems([]);\r\n    };\r\n  }, [props.defaultCodes]);\r\n\r\n\r\n\r\n  const fetchAllCodes = async () => {\r\n    try {\r\n      const res = await InvoiceService.getAllCodes();\r\n      setAllCodes(res.data.result);\r\n    } catch (err) {\r\n      console.error(err);\r\n    }\r\n  };\r\n\r\n  const priceChanged = (event) => {\r\n    setPrice(event.target.value);\r\n    setPriceError(false);\r\n  };\r\n\r\n  const codeChanged = (event) => {\r\n    setCode(event.target.value?.toUpperCase());\r\n    setCodeError(false);\r\n  };\r\n\r\n  const descriptionChanged = (event) => {\r\n    setDescription(event.target.value);\r\n    setDescriptionError(false);\r\n  };\r\n\r\n  const handleClose = (refresh) => {\r\n    if (saving) return;\r\n\r\n    setPrice(\"\");\r\n    setCode(defaultCode);\r\n    setDescription(\"\");\r\n    setPriceError(false);\r\n    setCodeError(false);\r\n    setDescriptionError(false);\r\n    setItems([]);\r\n    setNotes(\"\");\r\n    setSaving(false);\r\n\r\n    props.handleClose(refresh);\r\n  };\r\n\r\n  const codeLeft = () => {\r\n    fetchCodeDetails();\r\n  };\r\n\r\n  const fetchCodeDetails = async () => {\r\n    try {\r\n      setDescription(\"...\");\r\n      const res = await InvoiceService.getCodeDetails(code);\r\n      if (res.data.status === \"OK\") {\r\n        const result = res.data.result;\r\n        if (result.length === 0) {\r\n          setCodeError(true);\r\n          setDescription(\"\");\r\n          setPrice(\"\");\r\n        } else if (result.length >= 1) {\r\n          setDescription(result[0].description);\r\n          setPrice(result[0].price);\r\n          setDescriptionError(false);\r\n          setPriceError(false);\r\n        }\r\n      }\r\n    } catch (err) {\r\n      console.error(err);\r\n    }\r\n  };\r\n\r\n  const addItemClicked = () => {\r\n    if (!validateItem()) {\r\n      return;\r\n    }\r\n\r\n    setItems([\r\n      ...items,\r\n      { code: code.code, description: code.description, price: code.price },\r\n    ]);\r\n    setCode(defaultCode);\r\n  };\r\n\r\n  const addItemClicked2 = () => {\r\n    if (!validateItem2()) {\r\n      return;\r\n    }\r\n\r\n    setItems([...items, { code: \"\", description: description, price: price }]);\r\n    setDescription(\"\");\r\n    setPrice(\"\");\r\n  };\r\n\r\n  const validateItem = () => {\r\n    let error = false;\r\n    if (!code) return false;\r\n\r\n    if (!code.description || code.description.length === 0) {\r\n      error = true;\r\n    }\r\n    if (!code.price || code.price.length === 0) {\r\n      error = true;\r\n    }\r\n\r\n    return !error;\r\n  };\r\n\r\n  const validateItem2 = () => {\r\n    let error = false;\r\n    if (!description || description.length === 0) {\r\n      setDescriptionError(true);\r\n      error = true;\r\n    }\r\n    if (!price || price.length === 0) {\r\n      setPriceError(true);\r\n      error = true;\r\n    }\r\n\r\n    return !error;\r\n  };\r\n\r\n  const removeItem = (index) => {\r\n    let temp = [...items];\r\n    temp.splice(index, 1);\r\n    setItems(temp);\r\n  };\r\n\r\n  const getGrandTotal = (_items) => {\r\n    let total = 0;\r\n    _items.forEach((element) => {\r\n      total += parseFloat(element.price);\r\n    });\r\n\r\n    return total;\r\n  };\r\n\r\n  const saveClikced = async () => {\r\n    if (items.length === 0 && !props.invoice) {\r\n      return;\r\n    }\r\n\r\n    try {\r\n      setSaving(true);\r\n      let name = \"\";\r\n      let postCode = \"\";\r\n      let address = \"\";\r\n\r\n      if (props.booking.formData) {\r\n        const formData = JSON.parse(props.booking.formData)\r\n        name = `${formData.title} ${formData.forename} ${formData.surname}`;\r\n        postCode = formData.postCode;\r\n        address = formData.address;\r\n      } else if (props.booking.forename && props.booking.surname) {\r\n        name = `${props.booking.forename} ${props.booking.surname}`;\r\n        postCode = props.booking.postCode;\r\n        address = props.booking.address;\r\n      } else if (props.booking.fullname) {\r\n        name = `${props.booking.fullname}`;\r\n      }\r\n\r\n      const invoice = {\r\n        name: name,\r\n        date: new Date(),\r\n        dateAttended: new Date(props.booking.bookingDate),\r\n        items: items,\r\n        grandTotal: getGrandTotal(items),\r\n        bookingId: props.booking._id,\r\n        postCode: postCode,\r\n        address: address,\r\n        notes: notes,\r\n      };\r\n      if (!props.invoice) {\r\n        await InvoiceService.createInvoice(invoice);\r\n      } else if (items.length > 0) {\r\n        await InvoiceService.updateInvoice(\r\n          props.invoice.invoiceNumber,\r\n          invoice\r\n        );\r\n      } else {\r\n        await InvoiceService.deleteinvoice(props.invoice.invoiceNumber);\r\n      }\r\n\r\n      setSaving(false);\r\n      handleClose(true);\r\n    } catch (err) {\r\n      console.error(err);\r\n      setSaving(false);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <React.Fragment>\r\n      {props.booking && (\r\n        <React.Fragment>\r\n          <Dialog\r\n            maxWidth=\"md\"\r\n            open={props.open}\r\n            onClose={() => handleClose(false)}\r\n            PaperComponent={PaperComponent}\r\n            aria-labelledby=\"form-dialog-title\"\r\n          >\r\n            <DialogTitle id=\"draggable-dialog-title\">\r\n              <Grid\r\n                container\r\n                spacing={2}\r\n                direction=\"row\"\r\n                justify=\"center\"\r\n                alignItems=\"center\"\r\n              >\r\n                <Grid item>\r\n                  <ReceiptIcon style={{ color: \"#1cb2c9\", fontSize: \"3rem\" }} />\r\n                </Grid>\r\n\r\n                <Grid item>\r\n                  <div\r\n                    style={{\r\n                      color: \"#1cb2c9\",\r\n                      paddingBottom: \"10px\",\r\n                      fontWeight: \"800\",\r\n                    }}\r\n                  >\r\n                    {`${title}`}\r\n                  </div>\r\n                </Grid>\r\n              </Grid>\r\n\r\n              <Divider />\r\n            </DialogTitle>\r\n            <DialogContent>\r\n              <div\r\n                style={{\r\n                  height: \"700px\",\r\n                  width: \"100%\",\r\n                }}\r\n              >\r\n                <Grid\r\n                  container\r\n                  direction=\"column\"\r\n                  justify=\"flex-start\"\r\n                  spacing={1}\r\n                  alignItems=\"flex-start\"\r\n                >\r\n                  <Grid item style={{ width: \"100%\" }}>\r\n                    <Grid container direction=\"row\" spacing={5}>\r\n                      <Grid item xs={10}>\r\n                        <Autocomplete\r\n                          id=\"code-auto-complete\"\r\n                          value={code}\r\n                          onChange={(event, newValue) => {\r\n                            setCode(newValue);\r\n                          }}\r\n                          options={allCodes}\r\n                          getOptionLabel={(option) =>\r\n                            `.${option.code} -- ${\r\n                              option.description\r\n                            } -- ${parseFloat(\r\n                              option.price\r\n                            ).toLocaleString(\"en-GB\", {\r\n                              style: \"currency\",\r\n                              currency: \"GBP\",\r\n                            })}`\r\n                          }\r\n                          style={{ width: \"750px\" }}\r\n                          renderInput={(params) => (\r\n                            <TextField\r\n                              {...params}\r\n                              label=\"System Codes\"\r\n                              helperText=\"Standard codes already defined in the system\"\r\n                            />\r\n                          )}\r\n                        />\r\n                      </Grid>\r\n\r\n                      <Grid item xs={2}>\r\n                        <Button\r\n                          onClick={addItemClicked}\r\n                          variant=\"outlined\"\r\n                          color=\"primary\"\r\n                          style={{ marginTop: \"15px\" }}\r\n                          disabled={saving}\r\n                        >\r\n                          + Add\r\n                        </Button>\r\n                      </Grid>\r\n                    </Grid>\r\n                  </Grid>\r\n\r\n                  <Grid item style={{ width: \"100%\", marginTop: \"20px\" }}>\r\n                    <Grid container direction=\"row\" spacing={5}>\r\n                      <Grid item xs={8}>\r\n                        <TextField\r\n                          error={descriptionError}\r\n                          value={description}\r\n                          onChange={descriptionChanged}\r\n                          fullWidth\r\n                          label=\"Description (Custom)\"\r\n                          name=\"desc\"\r\n                          helperText=\"You can enter any description you want to be placed on the invoice\"\r\n                          id=\"desc-id\"\r\n                        />\r\n                      </Grid>\r\n\r\n                      <Grid item xs={2}>\r\n                        <TextField\r\n                          error={priceError}\r\n                          value={price}\r\n                          onChange={priceChanged}\r\n                          fullWidth\r\n                          label=\"Price\"\r\n                          name=\"price\"\r\n                          id=\"price-id\"\r\n                          InputProps={{\r\n                            inputComponent: NumberFormatCustom,\r\n                            startAdornment: (\r\n                              <InputAdornment position=\"start\">\r\n                                £\r\n                              </InputAdornment>\r\n                            ),\r\n                          }}\r\n                        />\r\n                      </Grid>\r\n\r\n                      <Grid item xs={2}>\r\n                        <Button\r\n                          onClick={addItemClicked2}\r\n                          variant=\"outlined\"\r\n                          color=\"primary\"\r\n                          style={{ marginTop: \"12px\" }}\r\n                          disabled={saving}\r\n                        >\r\n                          + Add\r\n                        </Button>\r\n                      </Grid>\r\n                    </Grid>\r\n                  </Grid>\r\n\r\n                  <div\r\n                    style={{\r\n                      backgroundColor: \"#fff\",\r\n                      color: \"#1cb2c9\",\r\n                      fontWeight: \"500\",\r\n                      fontSize: \"0.95rem\",\r\n                      padding: \"5px 8px\",\r\n                      marginBottom: \"-15px\",\r\n                      marginLeft: \"10px\",\r\n                      zIndex: \"99\",\r\n                      marginTop: \"30px\",\r\n                    }}\r\n                  >\r\n                    Invoice Items\r\n                  </div>\r\n\r\n                  <div\r\n                    style={{\r\n                      width: \"100%\",\r\n                      height: \"300px\",\r\n                      overflowY: \"scroll\",\r\n                      border: \"1px solid #ddd\",\r\n                      borderRadius: \"4px\",\r\n                      padding: \"25px\",\r\n                      position: \"relative\",\r\n                    }}\r\n                  >\r\n                    <Grid item>\r\n                      <Grid\r\n                        container\r\n                        direction=\"column\"\r\n                        justify=\"flex-start\"\r\n                        spacing={2}\r\n                        alignItems=\"flex-start\"\r\n                      >\r\n                        <Grid item style={{ width: \"100%\", fontWeight: \"500\" }}>\r\n                          <Grid container direction=\"row\" spacing={4}>\r\n                            <Grid item xs={2}>\r\n                              Code\r\n                            </Grid>\r\n                            <Grid item xs={5}>\r\n                              Description\r\n                            </Grid>\r\n                            <Grid item xs={2}>\r\n                              Price\r\n                            </Grid>\r\n                            <Grid item xs={3}></Grid>\r\n                          </Grid>\r\n                        </Grid>\r\n                        {items.map((item, index) => (\r\n                          <Grid item style={{ width: \"100%\" }}>\r\n                            <Grid container direction=\"row\" spacing={4}>\r\n                              <Grid item xs={2}>\r\n                                {item.code}\r\n                              </Grid>\r\n                              <Grid item xs={5}>\r\n                                {item.description}\r\n                              </Grid>\r\n                              <Grid item xs={2}>\r\n                                {parseFloat(item.price).toLocaleString(\r\n                                  \"en-GB\",\r\n                                  { style: \"currency\", currency: \"GBP\" }\r\n                                )}\r\n                              </Grid>\r\n                              <Grid item xs={3}>\r\n                                <Tooltip title=\"Remove Item\">\r\n                                  <IconButton\r\n                                    style={{ marginTop: \"-15px\" }}\r\n                                    onClick={() => removeItem(index)}\r\n                                  >\r\n                                    <DeleteIcon color=\"primary\" />\r\n                                  </IconButton>\r\n                                </Tooltip>\r\n                              </Grid>\r\n                            </Grid>\r\n                          </Grid>\r\n                        ))}\r\n                      </Grid>\r\n                    </Grid>\r\n                  </div>\r\n\r\n                  <Grid item style={{ marginTop: \"10px\", width:\"100%\", display:\"flex\", justifyContent:\"flex-end\", paddingRight:\"30px\" }}>\r\n                    <span style={{ fontWeight: \"500\", color: \"#777\" }}>\r\n                      Grand Total :{\" \"}\r\n                    </span>{\" \"}\r\n                    <span\r\n                      style={{\r\n                        fontWeight: \"500\",\r\n                        color: \"#1cb2c9\",\r\n                        marginLeft: \"10px\",\r\n                        fontSize: \"1rem\",\r\n                      }}\r\n                    >\r\n                      {\" \"}\r\n                      {getGrandTotal(items).toLocaleString(\"en-GB\", {\r\n                        style: \"currency\",\r\n                        currency: \"GBP\",\r\n                      })}{\" \"}\r\n                    </span>\r\n                  </Grid>\r\n\r\n                  <Grid item style={{ marginTop: \"10px\", width: \"100%\" }}>\r\n                    <TextField\r\n                      value={notes}\r\n                      onChange={notesChanged}\r\n                      multiline\r\n                      rows={2}\r\n                      helperText=\"* notes will be printed on the invoice (optional)\"\r\n                      label=\"Notes\"\r\n                      fullWidth\r\n                      variant=\"outlined\"\r\n                      placeholder=\"enter any addional notes you want to be printed on the invoice...\"\r\n                    ></TextField>\r\n                  </Grid>\r\n                </Grid>\r\n              </div>\r\n\r\n              <Backdrop className={classes.backdrop} open={saving}>\r\n                <CircularProgress color=\"inherit\" />\r\n              </Backdrop>\r\n            </DialogContent>\r\n            <DialogActions>\r\n              <Grid\r\n                container\r\n                direction=\"row\"\r\n                justify=\"flex-end\"\r\n                alignItems=\"center\"\r\n                spacing={1}\r\n              >\r\n                <Grid item>\r\n                  <Button\r\n                    onClick={() => handleClose(false)}\r\n                    style={{ width: \"100px\" }}\r\n                    disabled={saving}\r\n                  >\r\n                    back\r\n                  </Button>\r\n                </Grid>\r\n                <Grid item>\r\n                  <Button\r\n                    onClick={saveClikced}\r\n                    variant=\"contained\"\r\n                    color=   {props.invoice ? 'secondary' : 'primary'}\r\n                    // style={{ width: \"100px\" }}\r\n                    disabled={saving}\r\n                  >\r\n                    {props.invoice ? 'Save Changes' : 'Issue Invoice'}\r\n                  </Button>\r\n                </Grid>\r\n              </Grid>\r\n            </DialogActions>\r\n          </Dialog>\r\n        </React.Fragment>\r\n      )}\r\n    </React.Fragment>\r\n  );\r\n}\r\n","import React, { useEffect, useState } from \"react\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport GlobalState from \"./../GlobalState\";\r\nimport Grid from \"@material-ui/core/Grid\";\r\nimport {\r\n  Button,\r\n  Checkbox,\r\n  DialogActions,\r\n  DialogContentText,\r\n  Divider,\r\n  FormControlLabel,\r\n  IconButton,\r\n  TextField,\r\n  Tooltip,\r\n} from \"@material-ui/core\";\r\nimport PDFService from \"./services/PDFService\";\r\n\r\nimport { calculatePrice } from \"./PriceCalculator\";\r\n\r\nimport bookingService from \"./services/BookService\";\r\nimport CheckIcon from \"@material-ui/icons/Check\";\r\nimport CloseIcon from \"@material-ui/icons/Close\";\r\n\r\nimport Dialog from \"@material-ui/core/Dialog\";\r\nimport DialogContent from \"@material-ui/core/DialogContent\";\r\nimport DialogTitle from \"@material-ui/core/DialogTitle\";\r\nimport Draggable from \"react-draggable\";\r\nimport Slide from \"@material-ui/core/Slide\";\r\n\r\nimport Paper from \"@material-ui/core/Paper\";\r\n\r\nimport DeleteIcon from \"@material-ui/icons/Delete\";\r\nimport BookService from \"./services/BookService\";\r\n\r\nimport Backdrop from \"@material-ui/core/Backdrop\";\r\nimport CircularProgress from \"@material-ui/core/CircularProgress\";\r\nimport {\r\n  FormatDateFromString,\r\n  RevertFormatDateFromString,\r\n} from \"./DateFormatter\";\r\nimport ResendEmailsDialog from \"./ResendEmailsDialog\";\r\nimport PayDialog from \"./PayDialog\";\r\n\r\nimport PrintIcon from \"@material-ui/icons/Print\";\r\nimport UndoIcon from \"@material-ui/icons/Undo\";\r\n\r\nimport HistoryIcon from \"@material-ui/icons/History\";\r\n\r\nimport FileCopyOutlinedIcon from \"@material-ui/icons/FileCopyOutlined\";\r\nimport TimeStampDialog from \"./TimeStampDialog\";\r\nimport { CalendarColors } from \"../Admin/calendar-admin/colors\";\r\nimport InvoiceService from \"../services/InvoiceService\";\r\n\r\nimport SendIcon from \"@material-ui/icons/Send\";\r\nimport InvoiceDialog from \"../InvoiceDialog\";\r\n\r\n\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  box: {\r\n    backgroundColor: \"#373737\",\r\n    color: \"#fff\",\r\n    padding: \"1px\",\r\n    borderRadius: \"4px\",\r\n    textAlign: \"justify\",\r\n    paddingRight: \"40px\",\r\n  },\r\n\r\n  boxRed: {\r\n    backgroundColor: \"#dc2626\",\r\n    color: \"#fff\",\r\n    padding: \"1px\",\r\n    borderRadius: \"4px\",\r\n    textAlign: \"justify\",\r\n    paddingRight: \"40px\",\r\n  },\r\n\r\n  boxInfo: {\r\n    textAlign: \"justify\",\r\n    backgroundColor: \"#fafafa\",\r\n    color: \"#333\",\r\n    padding: \"1px\",\r\n    borderRadius: \"4px\",\r\n    paddingRight: \"40px\",\r\n    border: \"1px solid #eee\",\r\n  },\r\n\r\n  ul: {\r\n    listStyle: \"none\",\r\n    padding: \"0\",\r\n    margin: \"0\",\r\n  },\r\n\r\n  li: {\r\n    marginBottom: \"15px\",\r\n  },\r\n\r\n  icon: {\r\n    marginRight: \"8px\",\r\n  },\r\n\r\n  root: {\r\n    width: \"100%\",\r\n  },\r\n\r\n  lineThrough: {\r\n    textDecoration: \"line-through\",\r\n  },\r\n\r\n  heading: {\r\n    fontSize: theme.typography.pxToRem(15),\r\n    flexBasis: \"33.33%\",\r\n    flexShrink: 0,\r\n    color: theme.palette.text.secondary,\r\n  },\r\n  secondaryHeading: {\r\n    fontSize: theme.typography.pxToRem(15),\r\n  },\r\n\r\n  infoDetails: {\r\n    textAlign: \"left\",\r\n  },\r\n\r\n  infoTitle: {\r\n    fontWeight: \"800\",\r\n    marginRight: \"10px\",\r\n  },\r\n\r\n  infoData: {\r\n    fontWeight: \"400\",\r\n  },\r\n\r\n  title: {\r\n    textAlign: \"center\",\r\n    fontWeight: \"600\",\r\n    marginLeft: \"10px\",\r\n    marginBottom: \"5px\",\r\n  },\r\n\r\n  Accordion: {\r\n    backgroundColor: \"#f5f5f5\",\r\n    color: \"#222\",\r\n  },\r\n\r\n  AccordionDeleted: {\r\n    backgroundColor: \"#aaa\",\r\n    color: \"#555\",\r\n  },\r\n\r\n  DownloadForm: {\r\n    marginTop: \"10px\",\r\n    marginBottom: \"10px\",\r\n  },\r\n\r\n  infoDataCharges: {\r\n    fontSize: \"18px\",\r\n    color: \"green\",\r\n    fontWeight: \"600\",\r\n  },\r\n\r\n  infoDataChargesHigher: {\r\n    fontSize: \"18px\",\r\n    color: \"red\",\r\n    fontWeight: \"600\",\r\n  },\r\n  BookedLabel: {\r\n    color: \"#606060\",\r\n    paddingRight: \"10px\",\r\n    paddingLeft: \"5px\",\r\n    paddingBottom: \"3px\",\r\n    paddingTop: \"3px\",\r\n    fontWeight: \"800\",\r\n    borderLeft: \"5px solid\",\r\n    borderColor: \"#606060\",\r\n  },\r\n\r\n  PatientAttendedLabel: {\r\n    color: \"#0066aa\",\r\n    paddingRight: \"10px\",\r\n    paddingLeft: \"5px\",\r\n    paddingBottom: \"3px\",\r\n    paddingTop: \"3px\",\r\n    fontWeight: \"800\",\r\n    borderLeft: \"5px solid\",\r\n    borderColor: \"#0066aa\",\r\n  },\r\n\r\n  SampleTakenLabel: {\r\n    color: \"#0066cc\",\r\n    paddingRight: \"10px\",\r\n    paddingLeft: \"5px\",\r\n    paddingBottom: \"3px\",\r\n    paddingTop: \"3px\",\r\n    fontWeight: \"800\",\r\n    borderLeft: \"5px solid\",\r\n    borderColor: \"#0066cc\",\r\n  },\r\n\r\n  ReportSentLabel: {\r\n    color: \"#009900\",\r\n    paddingRight: \"10px\",\r\n    paddingLeft: \"5px\",\r\n    paddingBottom: \"3px\",\r\n    paddingTop: \"3px\",\r\n    fontWeight: \"800\",\r\n    borderLeft: \"5px solid\",\r\n    borderColor: \"#009900\",\r\n  },\r\n\r\n  ReportCertSentLabel: {\r\n    color: \"#009900\",\r\n    paddingRight: \"10px\",\r\n    paddingLeft: \"5px\",\r\n    paddingBottom: \"3px\",\r\n    paddingTop: \"3px\",\r\n    fontWeight: \"800\",\r\n    borderLeft: \"5px solid\",\r\n    borderColor: \"#009900\",\r\n  },\r\n\r\n  PositiveLabel: {\r\n    color: \"red\",\r\n    paddingRight: \"10px\",\r\n    paddingLeft: \"5px\",\r\n    paddingBottom: \"3px\",\r\n    paddingTop: \"3px\",\r\n    fontWeight: \"800\",\r\n    borderLeft: \"5px solid\",\r\n    borderColor: \"red\",\r\n  },\r\n\r\n  EditButton: {\r\n    marginBottom: \"20px\",\r\n    backgroundColor: \"#2f942e\",\r\n    \"&:hover\": {\r\n      background: \"green\",\r\n      color: \"#fff\",\r\n    },\r\n    textDecoration: \"none !important\",\r\n    padding: \"10px\",\r\n  },\r\n\r\n  ResendEmailsButton: {\r\n    // marginBottom : \"20px\",\r\n    color: \"#2f942e\",\r\n    borderColor: \"#2f942e\",\r\n    \"&:hover\": {\r\n      background: \"#fafffa\",\r\n      borderColor: \"#2f942e\",\r\n    },\r\n    textDecoration: \"none !important\",\r\n    paddingLeft: \"50px\",\r\n    paddingRight: \"50px\",\r\n  },\r\n\r\n  PayButton: {\r\n    marginLeft: \"70px\",\r\n    width: \"300px\",\r\n  },\r\n\r\n  PayLabel: {\r\n    marginLeft: \"20px\",\r\n\r\n    color: \"#2f942e\",\r\n    fontWeight: \"500\",\r\n    textAlign: \"center\",\r\n  },\r\n\r\n  RestoreButton: {\r\n    marginBottom: \"20px\",\r\n    backgroundColor: \"#eee\",\r\n    color: \"#333\",\r\n    \"&:hover\": {\r\n      background: \"#f1f1f1\",\r\n      color: \"#111\",\r\n    },\r\n    textDecoration: \"none !important\",\r\n    padding: \"10px\",\r\n  },\r\n\r\n  DeleteButton: {\r\n    marginBottom: \"20px\",\r\n    backgroundColor: \"#d90015\",\r\n    \"&:hover\": {\r\n      background: \"#b80012\",\r\n      color: \"#fff\",\r\n    },\r\n\r\n    padding: \"10px\",\r\n  },\r\n\r\n  SaveButton: {\r\n    marginBottom: \"10px\",\r\n    padding: \"10px\",\r\n\r\n    backgroundColor: \"#d1175e\",\r\n    \"&:hover\": {\r\n      background: \"#bd0d50\",\r\n      color: \"#fff\",\r\n    },\r\n  },\r\n\r\n  CancelButton: {\r\n    marginBottom: \"20px\",\r\n    // padding: \"10px\"\r\n  },\r\n\r\n  TextBox: {\r\n    padding: \"0px\",\r\n  },\r\n\r\n  checkIcon: {\r\n    color: \"green\",\r\n    marginBottom:\"-8px\"\r\n  },\r\n\r\n  checkIconSmall: {\r\n    color: \"green\",\r\n    paddingTop: \"5px\",\r\n  },\r\n\r\n  closeIcon: {\r\n    color: \"red\",\r\n    marginBottom:\"-8px\"\r\n  },\r\n\r\n  centeredLabel: {\r\n    display: \"flex\",\r\n    alignItems: \"center\",\r\n  },\r\n\r\n  backdrop: {\r\n    zIndex: theme.zIndex.drawer + 1,\r\n    color: \"#fff\",\r\n  },\r\n\r\n  invoiceNumber: {\r\n    display: \"inline-block\",\r\n    fontWeight: \"500\",\r\n    width: \"80px\",\r\n    fontSize: \"1rem\",\r\n    color: theme.palette.primary.main,\r\n  },\r\n\r\n  printInvoiceButton: {\r\n    marginLeft: \"70px\",\r\n    fontSize: \"0.8rem\",\r\n    // width: \"300px\",\r\n  },\r\n\r\n  editInvoiceButton: {\r\n    marginLeft: \"10px\",\r\n    fontSize: \"0.8rem\",\r\n  },\r\n}));\r\n\r\nconst Transition = React.forwardRef(function Transition(props, ref) {\r\n  return <Slide direction=\"up\" ref={ref} {...props} />;\r\n});\r\n\r\nfunction PaperComponent(props) {\r\n  return (\r\n    <Draggable\r\n      handle=\"#alert-dialog-slide-title\"\r\n      cancel={'[class*=\"MuiDialogContent-root\"]'}\r\n    >\r\n      <Paper {...props} />\r\n    </Draggable>\r\n  );\r\n}\r\n\r\nexport default function BookingDialog(props) {\r\n  const classes = useStyles();\r\n\r\n  const getDefaultCodes = (_booking) =>\r\n  {\r\n    const defaultCodes = []\r\n    if (!_booking)\r\n      return\r\n\r\n    if (_booking.tr)\r\n    {\r\n      defaultCodes.push({code: \"PCRTR\", description: \"PCR TEST TO RELEASE\", price: 250 })\r\n    }else{\r\n      defaultCodes.push({code: \"PCR\", description: \"PCR SWAB TEST\", price: 199 })\r\n      if (_booking.antiBodyTest)\r\n      {\r\n        defaultCodes.push({code: \"PCRA\", description: \"PCR ANTIBODY TEST\", price: 99 })\r\n        defaultCodes.push({code: \"PHLE\", description: \"PHLEBOTOMY\", price: 50 })\r\n      }\r\n      if (_booking.certificate)\r\n      {\r\n        defaultCodes.push({code: \"PCRCERT\", description: \"PCR FIT TO FLY CERTIFICATE\", price: 50 })\r\n      }\r\n    }\r\n    return defaultCodes\r\n  }\r\n\r\n  const [state, setState] = React.useContext(GlobalState);\r\n\r\n  const [copied, setCopied] = useState(false);\r\n\r\n  const [openResendDialog, setOpenResendDialog] = React.useState(false);\r\n  const [openPayDialog, setOpenPayDialog] = React.useState(false);\r\n  const [selectedBooking, setSelectedBooking] = React.useState(null);\r\n\r\n  const [editMode, setEditMode] = React.useState({ edit: false, person: null });\r\n  const [deleteMode, setDeleteMode] = React.useState({\r\n    delete: false,\r\n    person: null,\r\n  });\r\n  const [restoreMode, setRestoreMode] = React.useState({\r\n    restore: false,\r\n    person: null,\r\n  });\r\n\r\n  const [saving, setSaving] = React.useState(false);\r\n  const [deleting, setDeleting] = React.useState(false);\r\n  const [restoring, setRestoring] = React.useState(false);\r\n\r\n  const [validationError, setValidationError] = React.useState({});\r\n\r\n  const [bookingDate, setBookingDate] = React.useState(\"\");\r\n  const [bookingTime, setBookingTime] = React.useState(\"\");\r\n\r\n  const [gender, setGender] = React.useState(\"\");\r\n  const [title, setTitle] = React.useState(\"\");\r\n  const [forename, setForename] = React.useState(\"\");\r\n  const [surname, setSurnme] = React.useState(\"\");\r\n  const [email, setEmail] = React.useState(\"\");\r\n  const [dob, setDOB] = React.useState(\"\");\r\n  const [tel, setTel] = React.useState(\"\");\r\n  const [postCode, setPostCode] = React.useState(\"\");\r\n  const [address, setAddress] = React.useState(\"\");\r\n  const [notes, setNotes] = React.useState(\"\");\r\n  const [passport, setPassport] = React.useState(\"\");\r\n  const [passport2, setPassport2] = React.useState(\"\");\r\n  const [certificate, setCertificate] = React.useState(false);\r\n  const [antiBodyTest, setAntiBodyTest] = React.useState(false);\r\n\r\n  const [refreshData, setRefreshData] = React.useState(false);\r\n\r\n  const [booking, setBooking] = React.useState(null);\r\n\r\n  const [recordChanged, setRecordChanged] = React.useState(false);\r\n\r\n  const [fieldChanged, setFieldChanged] = React.useState(false);\r\n\r\n  const [openUndoPayDialog, setOpenUndoPayDialog] = React.useState(false);\r\n\r\n  const [openTimeStampDialog, setOpenTimeStampDialog] = React.useState(false);\r\n\r\n  const handleCloseTimeStampDialog = () => {\r\n    setOpenTimeStampDialog(false);\r\n    setSelectedBooking(null);\r\n  };\r\n\r\n  const handleCloseUndoPayDialog = () => {\r\n    setOpenUndoPayDialog(false);\r\n  };\r\n\r\n  const handleCloseResendDialog = () => {\r\n    setOpenResendDialog(false);\r\n    setSelectedBooking(null);\r\n  };\r\n\r\n  const handleClosePayDialog = () => {\r\n    setOpenPayDialog(false);\r\n    setSelectedBooking(null);\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (booking) {\r\n      const isChanged =\r\n        bookingDate !== FormatDateFromString(booking.bookingDate) ||\r\n        bookingTime !== booking.bookingTime ||\r\n        gender !== booking.gender ||\r\n        forename !== booking.forenameCapital ||\r\n        surname !== booking.surnameCapital ||\r\n        title !== booking.title ||\r\n        email !== booking.email ||\r\n        dob !== FormatDateFromString(booking.birthDate) ||\r\n        tel !== booking.phone ||\r\n        postCode !== booking.postCode ||\r\n        address !== booking.address ||\r\n        passport !== booking.passportNumber ||\r\n        passport2 !== booking.passportNumber2 ||\r\n        certificate !== booking.certificate ||\r\n        antiBodyTest !== booking.antiBodyTest;\r\n\r\n      setRecordChanged(isChanged);\r\n    }\r\n  }, [fieldChanged]);\r\n\r\n  useEffect(() => {\r\n    if (!props.open) {\r\n      setTimeout(() => {\r\n        setEditMode({ edit: false, person: null });\r\n        setRecordChanged(false);\r\n      }, 500);\r\n    }\r\n  }, [props.open]);\r\n\r\n  const bookingDateChanged = (event) => {\r\n    setBookingDate(event.target.value);\r\n    setValidationError({ ...validationError, bookingDateError: false });\r\n    setFieldChanged(!fieldChanged);\r\n  };\r\n\r\n  const bookingTimeChanged = (event) => {\r\n    setBookingTime(event.target.value);\r\n    setValidationError({ ...validationError, bookingTimeError: false });\r\n    setFieldChanged(!fieldChanged);\r\n  };\r\n\r\n  const genderChanged = (event) => {\r\n    setGender(event.target.value);\r\n    setFieldChanged(!fieldChanged);\r\n  };\r\n\r\n  const titleChanged = (event) => {\r\n    setTitle(event.target.value);\r\n    setFieldChanged(!fieldChanged);\r\n  };\r\n\r\n  const forenameChanged = (event) => {\r\n    setForename(event.target.value);\r\n    setFieldChanged(!fieldChanged);\r\n  };\r\n\r\n  const surnameChanged = (event) => {\r\n    setSurnme(event.target.value);\r\n    setFieldChanged(!fieldChanged);\r\n  };\r\n\r\n  const emailChanged = (event) => {\r\n    setEmail(event.target.value);\r\n    setFieldChanged(!fieldChanged);\r\n  };\r\n\r\n  const dobChanged = (event) => {\r\n    setDOB(event.target.value);\r\n    setValidationError({ ...validationError, dobError: false });\r\n    setFieldChanged(!fieldChanged);\r\n  };\r\n\r\n  const telChanged = (event) => {\r\n    setTel(event.target.value);\r\n    setFieldChanged(!fieldChanged);\r\n  };\r\n\r\n  const postCodeChanged = (event) => {\r\n    setPostCode(event.target.value);\r\n    setFieldChanged(!fieldChanged);\r\n  };\r\n\r\n  const addressChanged = (event) => {\r\n    setAddress(event.target.value);\r\n    setFieldChanged(!fieldChanged);\r\n  };\r\n\r\n  const passportChanged = (event) => {\r\n    setPassport(event.target.value);\r\n    setFieldChanged(!fieldChanged);\r\n  };\r\n\r\n  const passport2Changed = (event) => {\r\n    setPassport2(event.target.value);\r\n    setFieldChanged(!fieldChanged);\r\n  };\r\n\r\n  const certificateChanged = (event) => {\r\n    setCertificate(event.target.checked);\r\n    setFieldChanged(!fieldChanged);\r\n  };\r\n\r\n  const antiBodyTestChanged = (event) => {\r\n    setAntiBodyTest(event.target.checked);\r\n    setFieldChanged(!fieldChanged);\r\n  };\r\n\r\n  const getStatusLabel = (status) => {\r\n    if (status === \"booked\") {\r\n      return <span className={classes.BookedLabel}> Booking Made </span>;\r\n    } else if (status === \"patient_attended\") {\r\n      return (\r\n        <span className={classes.PatientAttendedLabel}> Patient Attended </span>\r\n      );\r\n    } else if (status === \"sample_taken\") {\r\n      return <span className={classes.SampleTakenLabel}> Sample Taken </span>;\r\n    } else if (status === \"report_sent\") {\r\n      return <span className={classes.ReportSentLabel}> Report Sent </span>;\r\n    } else if (status === \"report_cert_sent\") {\r\n      return (\r\n        <span className={classes.ReportCertSentLabel}>\r\n          {\" \"}\r\n          {`Report & Certificate Sent`}{\" \"}\r\n        </span>\r\n      );\r\n    } else if (status === \"positive\") {\r\n      return <span className={classes.PositiveLabel}> {`POSITIVE`} </span>;\r\n    } else {\r\n      return \"Unknown\";\r\n    }\r\n  };\r\n\r\n  const downloadForm1 = (id) => {\r\n    PDFService.downloadCovidForm1(id)\r\n      .then((res) => {\r\n        const file = new Blob([res.data], { type: \"application/pdf\" });\r\n\r\n        const fileURL = URL.createObjectURL(file);\r\n        window.open(fileURL, \"_blank\");\r\n      })\r\n      .catch((err) => {\r\n        console.log(err);\r\n      });\r\n  };\r\n\r\n  const downloadForm2 = (id) => {\r\n    PDFService.downloadCovidForm2(id)\r\n      .then((res) => {\r\n        const file = new Blob([res.data], { type: \"application/pdf\" });\r\n\r\n        const fileURL = URL.createObjectURL(file);\r\n        window.open(fileURL, \"_blank\");\r\n\r\n        setRefreshData(!refreshData);\r\n      })\r\n      .catch((err) => {\r\n        console.log(err);\r\n      });\r\n  };\r\n\r\n  const downloadLabResults = (id) => {\r\n    PDFService.downloadPdfResult(id)\r\n      .then((res) => {\r\n        const file = new Blob([res.data], { type: \"application/pdf\" });\r\n\r\n        const fileURL = URL.createObjectURL(file);\r\n        window.open(fileURL, \"_blank\");\r\n      })\r\n      .catch((err) => {\r\n        console.log(err);\r\n      });\r\n  };\r\n\r\n  const downloadCertificate = (id) => {\r\n    PDFService.downloadPdfCert(id)\r\n      .then((res) => {\r\n        const file = new Blob([res.data], { type: \"application/pdf\" });\r\n\r\n        const fileURL = URL.createObjectURL(file);\r\n        window.open(fileURL, \"_blank\");\r\n      })\r\n      .catch((err) => {\r\n        console.log(err);\r\n      });\r\n  };\r\n\r\n  const handleEditModeChanged = (edit, person) => {\r\n    if (edit) {\r\n      setForename(person.forenameCapital);\r\n      setSurnme(person.surnameCapital);\r\n      setBookingDate(FormatDateFromString(person.bookingDate));\r\n      setBookingTime(person.bookingTime.toUpperCase());\r\n      setGender(person.gender.toUpperCase());\r\n      setTitle(person.title.toUpperCase());\r\n      setEmail(person.email.toUpperCase());\r\n      setDOB(FormatDateFromString(person.birthDate));\r\n      setTel(person.phone.toUpperCase());\r\n      setPostCode(person.postCode.toUpperCase());\r\n      setAddress(person.address.toUpperCase());\r\n      if (person.notes) {\r\n        setNotes(person.notes.toUpperCase());\r\n      }else\r\n      {\r\n        setNotes('')\r\n      }\r\n\r\n      if (person.passportNumber) {\r\n        setPassport(person.passportNumber.toUpperCase());\r\n      }else\r\n      {\r\n        setPassport('')\r\n      }\r\n\r\n      if (person.passportNumber2) {\r\n        setPassport2(person.passportNumber2.toUpperCase());\r\n      }else\r\n      {\r\n        setPassport2('')\r\n      }\r\n\r\n      setCertificate(person.certificate);\r\n      setAntiBodyTest(person.antiBodyTest);\r\n\r\n      setEditMode({ edit: edit, person: person });\r\n    } else if (!edit && !person) {\r\n      setEditMode({ edit: edit, person: person });\r\n      setRecordChanged(false);\r\n    } else if (!edit && person) {\r\n      const booking = {};\r\n      const bookingId = person._id;\r\n      booking.certificate = certificate;\r\n      booking.antiBodyTest = antiBodyTest;\r\n      booking.gender = gender;\r\n      booking.title = title;\r\n      booking.birthDate = RevertFormatDateFromString(dob);\r\n      booking.email = email;\r\n      booking.phone = tel;\r\n      booking.postCode = postCode;\r\n      booking.address = address;\r\n      booking.passportNumber = passport;\r\n      booking.passportNumber2 = passport2;\r\n      booking.forename = forename;\r\n      booking.surname = surname;\r\n      booking.notes = notes;\r\n      booking.bookingDate = RevertFormatDateFromString(bookingDate);\r\n      booking.bookingTime = bookingTime;\r\n      booking.bookingRef = person.bookingRef;\r\n\r\n      if (validateBooking(booking)) {\r\n        updateBooking({ bookingId: bookingId, person: booking });\r\n      }\r\n    }\r\n  };\r\n\r\n  const validateDate = (str) => {\r\n    var error = false;\r\n    if (!str || str.length !== 10) {\r\n      error = true;\r\n    }\r\n\r\n    if (str.charAt(4) !== \"-\" || str.charAt(7) !== \"-\") {\r\n      error = true;\r\n    }\r\n\r\n    try {\r\n      const result = /^\\d{4}-\\d{2}-\\d{2}$/.test(str);\r\n      if (!result) {\r\n        error = true;\r\n      }\r\n\r\n      const year = parseInt(str.substr(0, 4));\r\n      const month = parseInt(str.substr(5, 2));\r\n      const day = parseInt(str.substr(8, 2));\r\n\r\n      if (year < 1900) {\r\n        error = true;\r\n      }\r\n\r\n      if (month < 1 || month > 12) {\r\n        error = true;\r\n      }\r\n\r\n      if (day > 31) {\r\n        error = true;\r\n      }\r\n    } catch (err) {\r\n      error = true;\r\n    }\r\n\r\n    return !error;\r\n  };\r\n\r\n  const validateTime = (str) => {\r\n    var error = false;\r\n\r\n    const result = /^\\d{2}:\\d{2} AM$|^\\d{2}:\\d{2} PM$/.test(str);\r\n    if (!result) {\r\n      error = true;\r\n    }\r\n\r\n    try {\r\n      const hour = parseInt(str.substr(0, 2));\r\n      const minute = parseInt(str.substr(3, 2));\r\n\r\n      if (hour < 0 || hour > 12) {\r\n        error = true;\r\n      }\r\n\r\n      if (minute < 0 || minute > 59) {\r\n        error = true;\r\n      }\r\n    } catch (err) {\r\n      error = true;\r\n    }\r\n\r\n    return !error;\r\n  };\r\n\r\n  const validateBooking = (booking) => {\r\n    var error = false;\r\n\r\n    if (!validateDate(booking.bookingDate)) {\r\n      error = true;\r\n      setValidationError({ ...validationError, bookingDateError: true });\r\n    }\r\n\r\n    if (!validateDate(booking.birthDate)) {\r\n      error = true;\r\n      setValidationError({ ...validationError, dobError: true });\r\n    }\r\n\r\n    if (!validateTime(booking.bookingTime)) {\r\n      error = true;\r\n      setValidationError({ ...validationError, bookingTimeError: true });\r\n    }\r\n\r\n    return !error;\r\n  };\r\n\r\n  const updateBooking = (payload) => {\r\n    setSaving(true);\r\n    bookingService\r\n      .updateBooking(payload)\r\n      .then((res) => {\r\n        setSaving(false);\r\n        setEditMode({ edit: false, person: null });\r\n        setRefreshData(!refreshData);\r\n      })\r\n      .catch((err) => {\r\n        setSaving(false);\r\n        setEditMode({ edit: false, person: null });\r\n        console.log(err);\r\n      });\r\n  };\r\n\r\n  const deleteBooking = (id) => {\r\n    setDeleting(true);\r\n    bookingService\r\n      .deleteBooking(id)\r\n      .then((res) => {\r\n        setDeleting(false);\r\n        setDeleteMode({ delete: false, person: null });\r\n        setRefreshData(!refreshData);\r\n      })\r\n      .catch((err) => {\r\n        setDeleting(false);\r\n        setDeleteMode({ delete: false, person: null });\r\n        console.log(err);\r\n      });\r\n  };\r\n\r\n  const restoreBooking = (id) => {\r\n    setRestoring(true);\r\n    bookingService\r\n      .unDeleteBooking(id)\r\n      .then((res) => {\r\n        setRestoring(false);\r\n        setRestoreMode({ restore: false, person: null });\r\n        setRefreshData(!refreshData);\r\n      })\r\n      .catch((err) => {\r\n        setRestoring(false);\r\n        setRestoreMode({ restore: false, person: null });\r\n        console.log(err);\r\n      });\r\n  };\r\n\r\n  const handleDeleteModeChanged = (del, person) => {\r\n    if (del) {\r\n      setDeleteMode({ delete: del, person: person });\r\n    } else if (!del && !person) {\r\n      setDeleteMode({ delete: del, person: person });\r\n    } else if (!del && person) {\r\n      deleteBooking(person._id);\r\n    }\r\n  };\r\n\r\n  const handleRestoreModeChanged = (restore, person) => {\r\n    if (restore) {\r\n      setRestoreMode({ restore: restore, person: person });\r\n    } else if (!restore && !person) {\r\n      setRestoreMode({ restore: restore, person: person });\r\n    } else if (!restore && person) {\r\n      restoreBooking(person._id);\r\n    }\r\n  };\r\n\r\n  const changeBackToBookingMade = (event, id) => {\r\n    setSaving(true);\r\n    BookService.changeBackToBookingMade(id)\r\n      .then((res) => {\r\n        setSaving(false);\r\n        setRefreshData(!refreshData);\r\n      })\r\n      .catch((err) => {\r\n        console.log(err);\r\n        setSaving(false);\r\n      });\r\n  };\r\n\r\n  const resendEmails = (event, id) => {\r\n    setSelectedBooking(booking);\r\n    setOpenResendDialog(true);\r\n  };\r\n\r\n  const Pay = (event, id) => {\r\n    setSelectedBooking(booking);\r\n    setOpenPayDialog(true);\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (props.booking) {\r\n      BookService.getBookingById(props.booking._id)\r\n        .then((res) => {\r\n          setBooking(res.data);\r\n        })\r\n        .catch((err) => {\r\n          console.log(err);\r\n        });\r\n\r\n      setState((state) => ({\r\n        ...state,\r\n        bookingDialogDataChanged: !state.bookingDialogDataChanged\r\n          ? true\r\n          : false,\r\n      }));\r\n    }\r\n  }, [refreshData, state.bookingPayChanged]);\r\n\r\n  useEffect(() => {\r\n    if (props.booking) {\r\n      setBooking(props.booking);\r\n    }\r\n  }, [props.booking]);\r\n\r\n  const undoPaymentClicked = async () => {\r\n    setSaving(true);\r\n    try {\r\n      await BookService.unPayBooking(booking._id);\r\n      setSaving(false);\r\n      setOpenUndoPayDialog(false);\r\n      setRefreshData(!refreshData);\r\n    } catch (err) {\r\n      console.error(err);\r\n      setSaving(false);\r\n      setOpenUndoPayDialog(false);\r\n    }\r\n  };\r\n\r\n  ///*** Invoice  ******************/\r\n\r\n  const [invoice, setInvoice] = React.useState(null);\r\n  const [invoiceLoaded, setInvoiceLoaded] = React.useState(false);\r\n  const [openInvoiceDialog, setOpenInvoiceDialog] = React.useState(false);\r\n  const [emailSentInvoice, setEmailSentInvoice] = React.useState(false);\r\n\r\n  const fetchInvoice = async () => {\r\n    try {\r\n      setInvoiceLoaded(false);\r\n      const res = await InvoiceService.getInvoiceByBookingId(props.booking._id);\r\n      setInvoice(res.data.invoice);\r\n      setInvoiceLoaded(true);\r\n    } catch (err) {\r\n      setInvoiceLoaded(true);\r\n      console.error(err);\r\n    }\r\n  };\r\n\r\n  React.useEffect(() => {\r\n    if (props.booking) {\r\n      fetchInvoice();\r\n    }\r\n  }, [props.booking, props.open]);\r\n\r\n  const handleCloseInvoiceDialog = (refresh) => {\r\n    setOpenInvoiceDialog(false);\r\n    setSelectedBooking(null);\r\n    fetchInvoice();\r\n  };\r\n\r\n  const OpenInvoiceDialog = () => {\r\n    setSelectedBooking(booking);\r\n    setInvoice(invoice);\r\n    setOpenInvoiceDialog(true);\r\n  };\r\n\r\n  const downloadInvoice = (id) => {\r\n    InvoiceService.downloadInvoice(id)\r\n      .then((res) => {\r\n        const file = new Blob([res.data], { type: \"application/pdf\" });\r\n\r\n        const fileURL = URL.createObjectURL(file);\r\n        window.open(fileURL, \"_blank\");\r\n      })\r\n      .catch((err) => {\r\n        console.log(err);\r\n      });\r\n  };\r\n\r\n  const sendInvoiceEmail = (id, _email) => {\r\n    setSaving(true);\r\n    setEmailSentInvoice(false);\r\n    InvoiceService.emailInvoice(id, _email)\r\n      .then((res) => {\r\n        setSaving(false);\r\n        if (res.data.status === \"OK\") {\r\n          setEmailSentInvoice(true);\r\n        }\r\n      })\r\n      .catch((err) => {\r\n        console.log(err);\r\n        setSaving(false);\r\n      });\r\n  };\r\n\r\n  //***************************** */\r\n\r\n  return (\r\n    <React.Fragment>\r\n      {booking && (\r\n        <React.Fragment>\r\n          <Dialog\r\n            maxWidth=\"md\"\r\n            open={props.open}\r\n            TransitionComponent={Transition}\r\n            keepMounted\r\n            onClose={props.onClose}\r\n            PaperComponent={PaperComponent}\r\n            aria-labelledby=\"alert-dialog-slide-title\"\r\n            aria-describedby=\"alert-dialog-slide-description\"\r\n          >\r\n            <DialogTitle\r\n              id=\"alert-dialog-slide-title\"\r\n              style={\r\n                booking.tr ? { backgroundColor: \"#7e0082\", color: \"#fff\" } : {}\r\n              }\r\n            >\r\n              <div style={{ position: \"absolute\", top: \"25x\", left: \"25px\" }}>\r\n                <Tooltip title=\"COPY EDIT LINK TO CLIPBOARD\">\r\n                  <IconButton\r\n                    onClick={() => {\r\n                      navigator.clipboard.writeText(\r\n                        `https://londonmedicalclinic.co.uk/medicalexpressclinic/user/edit/pcr/${booking._id}`\r\n                      );\r\n                      setCopied(true);\r\n                      setTimeout(() => {\r\n                        setCopied(false);\r\n                      }, 1500);\r\n                    }}\r\n                    aria-label=\"delete\"\r\n                    className={classes.margin}\r\n                    size=\"small\"\r\n                  >\r\n                    <FileCopyOutlinedIcon\r\n                      style={booking.tr ? { color: \"#ddd\" } : {}}\r\n                      fontSize=\"14px\"\r\n                    />\r\n                  </IconButton>\r\n                </Tooltip>\r\n\r\n                <span\r\n                  hidden={!copied}\r\n                  style={{ fontSize: \"12px\", transition: \"all 1s ease-in\" }}\r\n                >\r\n                  {\" \"}\r\n                  Copied{\" \"}\r\n                </span>\r\n              </div>\r\n\r\n              <div\r\n                style={{\r\n                  position: \"absolute\",\r\n                  top: \"25x\",\r\n                  right: \"60px\",\r\n                  backgroundColor: CalendarColors.PCR_COLOR,\r\n                  color: \"#fff\",\r\n                  padding: \"0px 5px\",\r\n                  borderRadius: \"10px\",\r\n                }}\r\n              >\r\n                PCR\r\n              </div>\r\n\r\n              {booking.tr && (\r\n                <div style={{ position: \"absolute\", right: \"15px\" }}>TR</div>\r\n              )}\r\n\r\n              <Grid\r\n                container\r\n                direction=\"row\"\r\n                justify=\"center\"\r\n                spacing={2}\r\n                alignItems=\"center\"\r\n              >\r\n                <Grid item>\r\n                  <div\r\n                    style={\r\n                      booking.deleted\r\n                        ? {\r\n                            paddingBottom: \"5px\",\r\n                            textDecoration: \"line-through\",\r\n                          }\r\n                        : {}\r\n                    }\r\n                  >\r\n                    {`${booking.forenameCapital} ${booking.surnameCapital}`}\r\n                  </div>\r\n                </Grid>\r\n\r\n                {booking.deleted && (\r\n                  <Grid item>\r\n                    <Tooltip title=\"This record has been deleted.\">\r\n                      <DeleteIcon\r\n                        style={\r\n                          booking.tr\r\n                            ? {\r\n                                padding: 0,\r\n                                margin: 0,\r\n                                color: \"#fff\",\r\n                                fontSize: 25,\r\n                              }\r\n                            : {\r\n                                padding: 0,\r\n                                margin: 0,\r\n                                color: \"#333\",\r\n                                fontSize: 25,\r\n                              }\r\n                        }\r\n                      />\r\n                    </Tooltip>\r\n                  </Grid>\r\n                )}\r\n              </Grid>\r\n            </DialogTitle>\r\n            <DialogContent>\r\n              <div\r\n                style={{\r\n                  paddingTop: \"20px\",\r\n                }}\r\n              >\r\n                <Grid item xs={12} md={12} key={`panel0`}>\r\n                  <div className={classes.infoDetails}>\r\n                    <ul className={classes.ul}>\r\n                      {/* Restore Functionality ******************************************* */}\r\n                      <li\r\n                        hidden={\r\n                          !(\r\n                            restoreMode.restore &&\r\n                            restoreMode.person._id === booking._id\r\n                          )\r\n                        }\r\n                      >\r\n                        <div\r\n                          style={{\r\n                            fontWeight: \"500\",\r\n                            paddingBottom: \"5px\",\r\n                            paddingLeft: \"5px\",\r\n                            fontSize: \"16px\",\r\n                            color: \"#333\",\r\n                          }}\r\n                        >\r\n                          Are you sure you want to restore this record?\r\n                        </div>\r\n                      </li>\r\n\r\n                      <li\r\n                        hidden={\r\n                          !booking.deleted ||\r\n                          (restoreMode.restore &&\r\n                            restoreMode.person._id === booking._id)\r\n                        }\r\n                      >\r\n                        <Button\r\n                          type=\"button\"\r\n                          fullWidth\r\n                          variant=\"contained\"\r\n                          color=\"primary\"\r\n                          onClick={() => {\r\n                            handleRestoreModeChanged(true, booking);\r\n                          }}\r\n                          className={classes.RestoreButton}\r\n                        >\r\n                          Restore This Record\r\n                        </Button>\r\n                      </li>\r\n\r\n                      <li\r\n                        hidden={\r\n                          !(\r\n                            restoreMode.restore &&\r\n                            restoreMode.person._id === booking._id\r\n                          )\r\n                        }\r\n                      >\r\n                        <Button\r\n                          type=\"button\"\r\n                          fullWidth\r\n                          variant=\"contained\"\r\n                          color=\"primary\"\r\n                          disabled={restoring}\r\n                          onClick={() => {\r\n                            handleRestoreModeChanged(false, booking);\r\n                          }}\r\n                          className={classes.SaveButton}\r\n                        >\r\n                          YES, Restore this!\r\n                        </Button>\r\n                      </li>\r\n\r\n                      <li\r\n                        hidden={\r\n                          !(\r\n                            restoreMode.restore &&\r\n                            restoreMode.person._id === booking._id\r\n                          )\r\n                        }\r\n                      >\r\n                        <Button\r\n                          type=\"button\"\r\n                          fullWidth\r\n                          variant=\"contained\"\r\n                          color=\"default\"\r\n                          disabled={restoring}\r\n                          onClick={() => {\r\n                            handleRestoreModeChanged(false, null);\r\n                          }}\r\n                          className={classes.CancelButton}\r\n                        >\r\n                          Cancel\r\n                        </Button>\r\n                      </li>\r\n\r\n                      {/*  ******************************************************************* */}\r\n\r\n                      {/* Edit Functionality ******************************************* */}\r\n\r\n                      <li\r\n                        hidden={\r\n                          booking.deleted ||\r\n                          deleteMode.delete ||\r\n                          (editMode.edit && editMode.person._id === booking._id)\r\n                        }\r\n                      >\r\n                        <Button\r\n                          type=\"button\"\r\n                          fullWidth\r\n                          variant=\"contained\"\r\n                          color=\"primary\"\r\n                          onClick={() => {\r\n                            handleEditModeChanged(true, booking);\r\n                          }}\r\n                          className={classes.EditButton}\r\n                        >\r\n                          Edit Booking Info\r\n                        </Button>\r\n                      </li>\r\n\r\n                      <li\r\n                        hidden={\r\n                          !(\r\n                            editMode.edit && editMode.person._id === booking._id\r\n                          )\r\n                        }\r\n                      >\r\n                        <Button\r\n                          type=\"button\"\r\n                          fullWidth\r\n                          variant=\"contained\"\r\n                          color=\"primary\"\r\n                          disabled={saving || !recordChanged}\r\n                          onClick={() => {\r\n                            handleEditModeChanged(false, booking);\r\n                          }}\r\n                          className={classes.SaveButton}\r\n                        >\r\n                          Save Changes\r\n                        </Button>\r\n                      </li>\r\n\r\n                      <li\r\n                        hidden={\r\n                          !(\r\n                            editMode.edit && editMode.person._id === booking._id\r\n                          )\r\n                        }\r\n                      >\r\n                        <Button\r\n                          type=\"button\"\r\n                          fullWidth\r\n                          variant=\"contained\"\r\n                          color=\"default\"\r\n                          disabled={saving}\r\n                          onClick={() => {\r\n                            handleEditModeChanged(false, null);\r\n                          }}\r\n                          className={classes.CancelButton}\r\n                        >\r\n                          Cancel\r\n                        </Button>\r\n                      </li>\r\n\r\n                      {/* ****************************************************************************************** */}\r\n\r\n                      {/* Delete Functionality ******************************************* */}\r\n\r\n                      <li\r\n                        hidden={\r\n                          !(\r\n                            deleteMode.delete &&\r\n                            deleteMode.person._id === booking._id\r\n                          )\r\n                        }\r\n                      >\r\n                        <div\r\n                          style={{\r\n                            fontWeight: \"600\",\r\n                            paddingBottom: \"5px\",\r\n                            paddingLeft: \"5px\",\r\n                            fontSize: \"16px\",\r\n                          }}\r\n                        >\r\n                          Are you sure you want to delete this record?\r\n                        </div>\r\n                      </li>\r\n\r\n                      <li\r\n                        hidden={\r\n                          props.deleteButtonDisabled ||\r\n                          booking.deleted ||\r\n                          editMode.edit ||\r\n                          (deleteMode.delete &&\r\n                            deleteMode.person._id === booking._id)\r\n                        }\r\n                      >\r\n                        <Button\r\n                          type=\"button\"\r\n                          fullWidth\r\n                          variant=\"contained\"\r\n                          color=\"primary\"\r\n                          onClick={() => {\r\n                            handleDeleteModeChanged(true, booking);\r\n                          }}\r\n                          className={classes.DeleteButton}\r\n                        >\r\n                          Delete This Record\r\n                        </Button>\r\n                      </li>\r\n\r\n                      <li\r\n                        hidden={\r\n                          !(\r\n                            deleteMode.delete &&\r\n                            deleteMode.person._id === booking._id\r\n                          )\r\n                        }\r\n                      >\r\n                        <Button\r\n                          type=\"button\"\r\n                          fullWidth\r\n                          variant=\"contained\"\r\n                          color=\"primary\"\r\n                          disabled={deleting}\r\n                          onClick={() => {\r\n                            handleDeleteModeChanged(false, booking);\r\n                          }}\r\n                          className={classes.SaveButton}\r\n                        >\r\n                          YES, Delete this!\r\n                        </Button>\r\n                      </li>\r\n\r\n                      <li\r\n                        hidden={\r\n                          !(\r\n                            deleteMode.delete &&\r\n                            deleteMode.person._id === booking._id\r\n                          )\r\n                        }\r\n                      >\r\n                        <Button\r\n                          type=\"button\"\r\n                          fullWidth\r\n                          variant=\"contained\"\r\n                          color=\"default\"\r\n                          disabled={deleting}\r\n                          onClick={() => {\r\n                            handleDeleteModeChanged(false, null);\r\n                          }}\r\n                          className={classes.CancelButton}\r\n                        >\r\n                          Cancel\r\n                        </Button>\r\n                      </li>\r\n\r\n                      {/* ****************************************************************************************** */}\r\n\r\n                      <li className={classes.li}>\r\n                        <Grid container spacing={2}>\r\n                          <Grid item xs={6}>\r\n                            <span className={classes.infoTitle}>\r\n                              BOOKED DATE\r\n                            </span>\r\n\r\n                            <span\r\n                              hidden={\r\n                                editMode.edit &&\r\n                                editMode.person._id === booking._id\r\n                              }\r\n                              className={classes.infoData}\r\n                            >\r\n                              {FormatDateFromString(booking.bookingDate)}\r\n                            </span>\r\n                            <span\r\n                              hidden={\r\n                                !(\r\n                                  editMode.edit &&\r\n                                  editMode.person._id === booking._id\r\n                                )\r\n                              }\r\n                              className={classes.infoData}\r\n                            >\r\n                              <TextField\r\n                                fullWidth\r\n                                error={validationError.bookingDateError}\r\n                                className={classes.TextBox}\r\n                                value={bookingDate}\r\n                                onChange={bookingDateChanged}\r\n                                inputProps={{\r\n                                  style: {\r\n                                    padding: 0,\r\n                                  },\r\n                                }}\r\n                              ></TextField>\r\n                            </span>\r\n                          </Grid>\r\n\r\n                          <Grid item xs={6}>\r\n                            <span className={classes.infoTitle}>\r\n                              BOOKED TIME\r\n                            </span>\r\n                            <span\r\n                              hidden={\r\n                                editMode.edit &&\r\n                                editMode.person._id === booking._id\r\n                              }\r\n                              className={classes.infoData}\r\n                            >\r\n                              {booking.bookingTime.toUpperCase()}\r\n                            </span>\r\n                            <span\r\n                              hidden={\r\n                                !(\r\n                                  editMode.edit &&\r\n                                  editMode.person._id === booking._id\r\n                                )\r\n                              }\r\n                              className={classes.infoData}\r\n                            >\r\n                              <TextField\r\n                                fullWidth\r\n                                error={validationError.bookingTimeError}\r\n                                className={classes.TextBox}\r\n                                value={bookingTime}\r\n                                onChange={bookingTimeChanged}\r\n                                inputProps={{\r\n                                  style: {\r\n                                    padding: 0,\r\n                                  },\r\n                                }}\r\n                              ></TextField>\r\n                            </span>\r\n                          </Grid>\r\n                        </Grid>\r\n                      </li>\r\n\r\n                      <li className={classes.li}>\r\n                        <Grid container spacing={2}>\r\n                          <Grid item xs={6}>\r\n                            <span className={classes.infoTitle}>GENDER</span>\r\n                            <span\r\n                              hidden={\r\n                                editMode.edit &&\r\n                                editMode.person._id === booking._id\r\n                              }\r\n                              className={classes.infoData}\r\n                            >\r\n                              {booking.gender?.toUpperCase()}\r\n                            </span>\r\n                            <span\r\n                              hidden={\r\n                                !(\r\n                                  editMode.edit &&\r\n                                  editMode.person._id === booking._id\r\n                                )\r\n                              }\r\n                              className={classes.infoData}\r\n                            >\r\n                              <TextField\r\n                                fullWidth\r\n                                className={classes.TextBox}\r\n                                value={gender}\r\n                                onChange={genderChanged}\r\n                                inputProps={{\r\n                                  style: {\r\n                                    padding: 0,\r\n                                  },\r\n                                }}\r\n                              ></TextField>\r\n                            </span>\r\n                          </Grid>\r\n                          <Grid item xs={6}>\r\n                            <span className={classes.infoTitle}>TITLE</span>\r\n                            <span\r\n                              hidden={\r\n                                editMode.edit &&\r\n                                editMode.person._id === booking._id\r\n                              }\r\n                              className={classes.infoData}\r\n                            >\r\n                              {booking.title?.toUpperCase()}\r\n                            </span>\r\n                            <span\r\n                              hidden={\r\n                                !(\r\n                                  editMode.edit &&\r\n                                  editMode.person._id === booking._id\r\n                                )\r\n                              }\r\n                              className={classes.infoData}\r\n                            >\r\n                              <TextField\r\n                                fullWidth\r\n                                className={classes.TextBox}\r\n                                value={title}\r\n                                onChange={titleChanged}\r\n                                inputProps={{\r\n                                  style: {\r\n                                    padding: 0,\r\n                                  },\r\n                                }}\r\n                              ></TextField>\r\n                            </span>\r\n                          </Grid>\r\n                        </Grid>\r\n                      </li>\r\n\r\n                      <li className={classes.li}>\r\n                        <Grid container spacing={2}>\r\n                          <Grid item xs={6}>\r\n                            <span className={classes.infoTitle}>FORENAME</span>\r\n                            <span\r\n                              hidden={\r\n                                editMode.edit &&\r\n                                editMode.person._id === booking._id\r\n                              }\r\n                              className={classes.infoData}\r\n                            >\r\n                              {booking.forenameCapital}\r\n                            </span>\r\n                            <span\r\n                              hidden={\r\n                                !(\r\n                                  editMode.edit &&\r\n                                  editMode.person._id === booking._id\r\n                                )\r\n                              }\r\n                              className={classes.infoData}\r\n                            >\r\n                              <TextField\r\n                                fullWidth\r\n                                className={classes.TextBox}\r\n                                value={forename}\r\n                                onChange={forenameChanged}\r\n                                inputProps={{\r\n                                  style: {\r\n                                    padding: 0,\r\n                                  },\r\n                                }}\r\n                              ></TextField>\r\n                            </span>\r\n                          </Grid>\r\n                          <Grid item xs={6}>\r\n                            <span className={classes.infoTitle}>SURNAME</span>\r\n                            <span\r\n                              hidden={\r\n                                editMode.edit &&\r\n                                editMode.person._id === booking._id\r\n                              }\r\n                              className={classes.infoData}\r\n                            >\r\n                              {booking.surnameCapital}\r\n                            </span>\r\n                            <span\r\n                              hidden={\r\n                                !(\r\n                                  editMode.edit &&\r\n                                  editMode.person._id === booking._id\r\n                                )\r\n                              }\r\n                              className={classes.infoData}\r\n                            >\r\n                              <TextField\r\n                                fullWidth\r\n                                className={classes.TextBox}\r\n                                value={surname}\r\n                                onChange={surnameChanged}\r\n                                inputProps={{\r\n                                  style: {\r\n                                    padding: 0,\r\n                                  },\r\n                                }}\r\n                              ></TextField>\r\n                            </span>\r\n                          </Grid>\r\n                        </Grid>\r\n                      </li>\r\n\r\n                      <li className={classes.li}>\r\n                        <Grid container spacing={2}>\r\n                          <Grid item xs={6}>\r\n                            <span className={classes.infoTitle}>EMAIL</span>\r\n                            <span\r\n                              hidden={\r\n                                editMode.edit &&\r\n                                editMode.person._id === booking._id\r\n                              }\r\n                              className={classes.infoData}\r\n                            >\r\n                              {booking.email?.toUpperCase()}\r\n                            </span>\r\n                            <span\r\n                              hidden={\r\n                                !(\r\n                                  editMode.edit &&\r\n                                  editMode.person._id === booking._id\r\n                                )\r\n                              }\r\n                              className={classes.infoData}\r\n                            >\r\n                              <TextField\r\n                                fullWidth\r\n                                className={classes.TextBox}\r\n                                value={email}\r\n                                onChange={emailChanged}\r\n                                inputProps={{\r\n                                  style: {\r\n                                    padding: 0,\r\n                                  },\r\n                                }}\r\n                              ></TextField>\r\n                            </span>\r\n                          </Grid>\r\n                          <Grid item xs={6}>\r\n                            <span className={classes.infoTitle}>D.O.B</span>\r\n                            <span\r\n                              hidden={\r\n                                editMode.edit &&\r\n                                editMode.person._id === booking._id\r\n                              }\r\n                              className={classes.infoData}\r\n                            >\r\n                              {FormatDateFromString(booking.birthDate)}\r\n                            </span>\r\n                            <span\r\n                              hidden={\r\n                                !(\r\n                                  editMode.edit &&\r\n                                  editMode.person._id === booking._id\r\n                                )\r\n                              }\r\n                              className={classes.infoData}\r\n                            >\r\n                              <TextField\r\n                                fullWidth\r\n                                error={validationError.dobError}\r\n                                className={classes.TextBox}\r\n                                value={dob}\r\n                                onChange={dobChanged}\r\n                                inputProps={{\r\n                                  style: {\r\n                                    padding: 0,\r\n                                  },\r\n                                }}\r\n                              ></TextField>\r\n                            </span>\r\n                          </Grid>\r\n                        </Grid>\r\n                      </li>\r\n                      <li className={classes.li}></li>\r\n                      <li className={classes.li}>\r\n                        <Grid container spacing={2}>\r\n                          <Grid item xs={6}>\r\n                            <span className={classes.infoTitle}>TEL</span>\r\n                            <span\r\n                              hidden={\r\n                                editMode.edit &&\r\n                                editMode.person._id === booking._id\r\n                              }\r\n                              className={classes.infoData}\r\n                            >\r\n                              {booking.phone?.toUpperCase()}\r\n                            </span>\r\n                            <span\r\n                              hidden={\r\n                                !(\r\n                                  editMode.edit &&\r\n                                  editMode.person._id === booking._id\r\n                                )\r\n                              }\r\n                              className={classes.infoData}\r\n                            >\r\n                              <TextField\r\n                                fullWidth\r\n                                className={classes.TextBox}\r\n                                value={tel}\r\n                                onChange={telChanged}\r\n                                inputProps={{\r\n                                  style: {\r\n                                    padding: 0,\r\n                                  },\r\n                                }}\r\n                              ></TextField>\r\n                            </span>\r\n                          </Grid>\r\n                          <Grid item xs={6}>\r\n                            <span className={classes.infoTitle}>POST CODE</span>\r\n                            <span\r\n                              hidden={\r\n                                editMode.edit &&\r\n                                editMode.person._id === booking._id\r\n                              }\r\n                              className={classes.infoData}\r\n                            >\r\n                              {booking.postCode?.toUpperCase()}\r\n                            </span>\r\n                            <span\r\n                              hidden={\r\n                                !(\r\n                                  editMode.edit &&\r\n                                  editMode.person._id === booking._id\r\n                                )\r\n                              }\r\n                              className={classes.infoData}\r\n                            >\r\n                              <TextField\r\n                                fullWidth\r\n                                className={classes.TextBox}\r\n                                value={postCode}\r\n                                onChange={postCodeChanged}\r\n                                inputProps={{\r\n                                  style: {\r\n                                    padding: 0,\r\n                                  },\r\n                                }}\r\n                              ></TextField>\r\n                            </span>\r\n                          </Grid>\r\n                        </Grid>\r\n                      </li>\r\n                      <li className={classes.li}>\r\n                        <span className={classes.infoTitle}>ADDRESS</span>\r\n                        <span\r\n                          hidden={\r\n                            editMode.edit && editMode.person._id === booking._id\r\n                          }\r\n                          className={classes.infoData}\r\n                        >\r\n                          {booking.address?.toUpperCase()}\r\n                        </span>\r\n                        <span\r\n                          hidden={\r\n                            !(\r\n                              editMode.edit &&\r\n                              editMode.person._id === booking._id\r\n                            )\r\n                          }\r\n                          className={classes.infoData}\r\n                        >\r\n                          <TextField\r\n                            fullWidth\r\n                            className={classes.TextBox}\r\n                            value={address}\r\n                            onChange={addressChanged}\r\n                            inputProps={{\r\n                              style: {\r\n                                padding: 0,\r\n                              },\r\n                            }}\r\n                          ></TextField>\r\n                        </span>\r\n                      </li>\r\n\r\n                      {booking.selfIsolate && (\r\n                        <React.Fragment>\r\n                          <li className={classes.li}>\r\n                            <span className={classes.infoTitle}>\r\n                              Self-Isolate Post Code\r\n                            </span>{\" \"}\r\n                            <span className={classes.infoData}>\r\n                              {booking.postCodeSI}\r\n                            </span>\r\n                          </li>\r\n                          <li className={classes.li}>\r\n                            <span className={classes.infoTitle}>\r\n                              Self-Isolate Address\r\n                            </span>{\" \"}\r\n                            <span className={classes.infoData}>\r\n                              {booking.addressSI}\r\n                            </span>\r\n                          </li>\r\n                        </React.Fragment>\r\n                      )}\r\n\r\n                      <li className={classes.li}>\r\n                        <Grid container spacing={2}>\r\n                          <Grid item xs={6}>\r\n                            <span className={classes.infoTitle}>\r\n                              PASSPORT NO.\r\n                            </span>\r\n                            <span\r\n                              hidden={\r\n                                editMode.edit &&\r\n                                editMode.person._id === booking._id\r\n                              }\r\n                              className={classes.infoData}\r\n                            >\r\n                              {booking.passportNumber?.toUpperCase()}\r\n                            </span>\r\n                            <span\r\n                              hidden={\r\n                                !(\r\n                                  editMode.edit &&\r\n                                  editMode.person._id === booking._id\r\n                                )\r\n                              }\r\n                              className={classes.infoData}\r\n                            >\r\n                              <TextField\r\n                                fullWidth\r\n                                className={classes.TextBox}\r\n                                value={passport}\r\n                                onChange={passportChanged}\r\n                                inputProps={{\r\n                                  style: {\r\n                                    padding: 0,\r\n                                  },\r\n                                }}\r\n                              ></TextField>\r\n                            </span>\r\n                          </Grid>\r\n\r\n                          {!booking.tr && (\r\n                            <Grid item xs={6}>\r\n                              <span className={classes.infoTitle}>\r\n                                SECOND PASSPORT NO.\r\n                              </span>\r\n                              <span\r\n                                hidden={\r\n                                  editMode.edit &&\r\n                                  editMode.person._id === booking._id\r\n                                }\r\n                                className={classes.infoData}\r\n                              >\r\n                                {booking.passportNumber2?.toUpperCase()}\r\n                              </span>\r\n                              <span\r\n                                hidden={\r\n                                  !(\r\n                                    editMode.edit &&\r\n                                    editMode.person._id === booking._id\r\n                                  )\r\n                                }\r\n                                className={classes.infoData}\r\n                              >\r\n                                <TextField\r\n                                  fullWidth\r\n                                  className={classes.TextBox}\r\n                                  value={passport2}\r\n                                  onChange={passport2Changed}\r\n                                  inputProps={{\r\n                                    style: {\r\n                                      padding: 0,\r\n                                    },\r\n                                  }}\r\n                                ></TextField>\r\n                              </span>\r\n                            </Grid>\r\n                          )}\r\n                        </Grid>\r\n                      </li>\r\n\r\n                      <li hidden={!booking.tr} className={classes.li}>\r\n                        <Grid container spacing={2}>\r\n                          <Grid item xs={6}>\r\n                            <span className={classes.infoTitle}>\r\n                              NHS Number\r\n                            </span>{\" \"}\r\n                            <span className={classes.infoData}>\r\n                              {booking.NHSNumber ?? \"-\"}\r\n                            </span>\r\n                          </Grid>\r\n                          <Grid item xs={6}>\r\n                            <span className={classes.infoTitle}>Ethnicity</span>{\" \"}\r\n                            <span className={classes.infoData}>\r\n                              {booking.ethnicity}\r\n                            </span>\r\n                          </Grid>\r\n                        </Grid>\r\n                      </li>\r\n\r\n                      <li hidden={!booking.tr} className={classes.li}>\r\n                        <Grid container spacing={2}>\r\n                          <Grid item xs={6}>\r\n                            <span className={classes.infoTitle}>\r\n                              Arrival Date\r\n                            </span>{\" \"}\r\n                            <span className={classes.infoData}>\r\n                              {booking.arrivalDate}\r\n                            </span>\r\n                          </Grid>\r\n                          <Grid item xs={6}>\r\n                            <span className={classes.infoTitle}>\r\n                              Flight Number\r\n                            </span>{\" \"}\r\n                            <span className={classes.infoData}>\r\n                              {booking.flightNumber}\r\n                            </span>\r\n                          </Grid>\r\n                        </Grid>\r\n                      </li>\r\n                      <li hidden={!booking.tr} className={classes.li}>\r\n                        <Grid container spacing={2}>\r\n                          <Grid item xs={6}>\r\n                            <span className={classes.infoTitle}>\r\n                              Last Departed Date\r\n                            </span>{\" \"}\r\n                            <span className={classes.infoData}>\r\n                              {booking.lastDepartedDate}\r\n                            </span>\r\n                          </Grid>\r\n                          <Grid item xs={6}>\r\n                            <span className={classes.infoTitle}>\r\n                              Travelling From\r\n                            </span>{\" \"}\r\n                            <span className={classes.infoData}>\r\n                              {booking.travellingFrom}\r\n                            </span>\r\n                          </Grid>\r\n                        </Grid>\r\n                      </li>\r\n\r\n                      <li hidden={booking.tr} className={classes.li}>\r\n                        <Grid container spacing={2}>\r\n                          <Grid item xs={6}>\r\n                            <span className={classes.infoTitle}>\r\n                              REQUEST FOR CERTIFICATE\r\n                            </span>\r\n                            <span\r\n                              hidden={\r\n                                editMode.edit &&\r\n                                editMode.person._id === booking._id\r\n                              }\r\n                              className={classes.infoData}\r\n                            >\r\n                              {booking.certificate ? (\r\n                                <CheckIcon className={classes.checkIcon} />\r\n                              ) : (\r\n                                <CloseIcon className={classes.closeIcon} />\r\n                              )}\r\n                            </span>\r\n                            <span\r\n                              hidden={\r\n                                !(\r\n                                  editMode.edit &&\r\n                                  editMode.person._id === booking._id\r\n                                )\r\n                              }\r\n                              className={classes.infoData}\r\n                            >\r\n                              <FormControlLabel\r\n                                className={classes.formControl}\r\n                                control={\r\n                                  <Checkbox\r\n                                    className={classes.formControl}\r\n                                    color=\"secondary\"\r\n                                    name=\"certificate\"\r\n                                    checked={certificate}\r\n                                    onChange={certificateChanged}\r\n                                  />\r\n                                }\r\n                                label=\"\"\r\n                              />\r\n                            </span>\r\n                          </Grid>\r\n                          <Grid item xs={6}>\r\n                            <span className={classes.infoTitle}>\r\n                              REQUEST FOR ANTIBODY TEST\r\n                            </span>\r\n                            <span\r\n                              hidden={\r\n                                editMode.edit &&\r\n                                editMode.person._id === booking._id\r\n                              }\r\n                              className={classes.infoData}\r\n                            >\r\n                              {booking.antiBodyTest ? (\r\n                                <CheckIcon className={classes.checkIcon} />\r\n                              ) : (\r\n                                <CloseIcon className={classes.closeIcon} />\r\n                              )}\r\n                            </span>\r\n                            <span\r\n                              hidden={\r\n                                !(\r\n                                  editMode.edit &&\r\n                                  editMode.person._id === booking._id\r\n                                )\r\n                              }\r\n                              className={classes.infoData}\r\n                            >\r\n                              <FormControlLabel\r\n                                className={classes.formControl}\r\n                                control={\r\n                                  <Checkbox\r\n                                    className={classes.formControl}\r\n                                    color=\"secondary\"\r\n                                    name=\"certificate\"\r\n                                    checked={antiBodyTest}\r\n                                    onChange={antiBodyTestChanged}\r\n                                  />\r\n                                }\r\n                                label=\"\"\r\n                              />\r\n                            </span>\r\n                          </Grid>\r\n                        </Grid>\r\n                      </li>\r\n                      <li className={classes.li} style={{paddingTop:\"10px\"}}>\r\n                        <span className={classes.infoTitle}>STATUS</span>{\" \"}\r\n                        {getStatusLabel(booking.status)}\r\n                        {booking.status === \"sample_taken\" &&\r\n                          !(\r\n                            editMode.edit && editMode.person._id === booking._id\r\n                          ) && (\r\n                            <Button\r\n                              variant=\"outlined\"\r\n                              color=\"primary\"\r\n                              disabled={saving}\r\n                              onClick={(event) =>\r\n                                changeBackToBookingMade(event, booking._id)\r\n                              }\r\n                            >\r\n                              Change Back To Booking Made\r\n                            </Button>\r\n                          )}\r\n                        {(booking.status === \"report_sent\" ||\r\n                          booking.status === \"report_cert_sent\" ||\r\n                          booking.status === \"positive\") &&\r\n                          !(\r\n                            editMode.edit && editMode.person._id === booking._id\r\n                          ) && (\r\n                            <Button\r\n                              variant=\"outlined\"\r\n                              color=\"primary\"\r\n                              className={classes.ResendEmailsButton}\r\n                              onClick={(event) =>\r\n                                resendEmails(event, booking._id)\r\n                              }\r\n                            >\r\n                              Resend emails\r\n                            </Button>\r\n                          )}\r\n                      </li>\r\n\r\n                      <li hidden={booking.deleted}>\r\n                        <Button\r\n                          startIcon={<PrintIcon />}\r\n                          type=\"button\"\r\n                          fullWidth\r\n                          variant=\"outlined\"\r\n                          color=\"primary\"\r\n                          onClick={() => {\r\n                            downloadForm1(booking._id);\r\n                          }}\r\n                          // onTouchTap = {() => {downloadForm1(person._id)}}\r\n                          className={classes.DownloadForm}\r\n                        >\r\n                          Download Registration Form\r\n                        </Button>\r\n                      </li>\r\n\r\n                      <li hidden={booking.deleted}>\r\n                        <Button\r\n                          startIcon={<PrintIcon />}\r\n                          type=\"button\"\r\n                          fullWidth\r\n                          variant=\"outlined\"\r\n                          color=\"primary\"\r\n                          onClick={() => {\r\n                            downloadForm2(booking._id);\r\n                          }}\r\n                          // onTouchTap = {() => {downloadForm2(person._id)}}\r\n                          className={classes.DownloadForm}\r\n                        >\r\n                          Download Lab Form\r\n                        </Button>\r\n                      </li>\r\n\r\n                      <li\r\n                        hidden={\r\n                          booking.deleted ||\r\n                          (booking.status !== \"report_sent\" &&\r\n                            booking.status !== \"report_cert_sent\" &&\r\n                            booking.status !== \"positive\")\r\n                        }\r\n                      >\r\n                        <Button\r\n                          startIcon={<PrintIcon />}\r\n                          type=\"button\"\r\n                          fullWidth\r\n                          variant=\"outlined\"\r\n                          color=\"primary\"\r\n                          onClick={() => {\r\n                            downloadLabResults(booking._id);\r\n                          }}\r\n                          // onTouchTap = {() => {downloadForm1(person._id)}}\r\n                          className={classes.DownloadForm}\r\n                        >\r\n                          Download Lab Results\r\n                        </Button>\r\n                      </li>\r\n\r\n                      <li\r\n                        hidden={\r\n                          booking.deleted ||\r\n                          (booking.status !== \"report_cert_sent\" &&\r\n                            booking.status !== \"positive\")\r\n                        }\r\n                      >\r\n                        <Button\r\n                          startIcon={<PrintIcon />}\r\n                          type=\"button\"\r\n                          fullWidth\r\n                          variant=\"outlined\"\r\n                          color=\"primary\"\r\n                          onClick={() => {\r\n                            downloadCertificate(booking._id);\r\n                          }}\r\n                          // onTouchTap = {() => {downloadForm1(person._id)}}\r\n                          className={classes.DownloadForm}\r\n                        >\r\n                          Download Certificate\r\n                        </Button>\r\n                      </li>\r\n\r\n                      <li>\r\n                        <Button\r\n                          startIcon={<HistoryIcon />}\r\n                          type=\"button\"\r\n                          fullWidth\r\n                          variant=\"outlined\"\r\n                          color=\"secondary\"\r\n                          onClick={() => {\r\n                            setSelectedBooking(booking);\r\n                            setOpenTimeStampDialog(true);\r\n                          }}\r\n                          // onTouchTap = {() => {downloadForm1(person._id)}}\r\n                          className={classes.DownloadForm}\r\n                        >\r\n                          Show Audit Trail\r\n                        </Button>\r\n                      </li>\r\n\r\n                      <Divider />\r\n\r\n                      <li className={classes.li} style={{ marginTop: \"20px\" }}>\r\n                        <span className={classes.infoTitle}>INVOICE # : </span>{\" \"}\r\n                        <span style={{ paddingLeft: \"0px\" }}>\r\n                          {!invoiceLoaded && (\r\n                            <span className={classes.invoiceNumber}> ... </span>\r\n                          )}\r\n                          {invoiceLoaded && invoice && (\r\n                            <span className={classes.invoiceNumber}>\r\n                              {\" \"}\r\n                              {invoice.invoiceNumber}{\" \"}\r\n                            </span>\r\n                          )}\r\n                          {invoiceLoaded && !invoice && (\r\n                            <span\r\n                              className={classes.invoiceNumber}\r\n                              style={{ color: \"red\", fontSize: \"0.9rem\" }}\r\n                            >\r\n                              {\" \"}\r\n                              N/A{\" \"}\r\n                            </span>\r\n                          )}\r\n                        </span>\r\n                        {!(\r\n                          editMode.edit && editMode.person._id === booking._id\r\n                        ) &&\r\n                          !booking.deleted && (\r\n                            <React.Fragment>\r\n                              {invoiceLoaded && !invoice && (\r\n                                <Button\r\n                                  variant=\"outlined\"\r\n                                  color=\"primary\"\r\n                                  className={classes.PayButton}\r\n                                  onClick={() => OpenInvoiceDialog()}\r\n                                >\r\n                                  Issue Invoice\r\n                                </Button>\r\n                              )}\r\n\r\n                              {invoiceLoaded && invoice && (\r\n                                <React.Fragment>\r\n                                  <Button\r\n                                    variant=\"outlined\"\r\n                                    startIcon={<PrintIcon />}\r\n                                    color=\"primary\"\r\n                                    className={classes.printInvoiceButton}\r\n                                    onClick={() => downloadInvoice(invoice._id)}\r\n                                  >\r\n                                    Download Invoice\r\n                                  </Button>\r\n\r\n                                  <Button\r\n                                    variant=\"outlined\"\r\n                                    color=\"secondary\"\r\n                                    className={classes.editInvoiceButton}\r\n                                    onClick={() => OpenInvoiceDialog()}\r\n                                  >\r\n                                    Edit Invoice\r\n                                  </Button>\r\n\r\n                                  <Button\r\n                                    disabled={\r\n                                      !booking.email || booking.email.length < 3\r\n                                    }\r\n                                    startIcon={<SendIcon />}\r\n                                    type=\"button\"\r\n                                    variant=\"outlined\"\r\n                                    color=\"primary\"\r\n                                    onClick={() => {\r\n                                      sendInvoiceEmail(\r\n                                        invoice._id,\r\n                                        booking.email\r\n                                      );\r\n                                    }}\r\n                                    style={{\r\n                                      position: \"relative\",\r\n                                      marginLeft: \"10px\",\r\n                                      paddingRight: \"130px\",\r\n                                      fontSize: \"0.8rem\",\r\n                                    }}\r\n                                  >\r\n                                    Send Invoice By Email\r\n                                    {emailSentInvoice && (\r\n                                      <div\r\n                                        style={{\r\n                                          position: \"absolute\",\r\n                                          right: \"10px\",\r\n                                          top: \"5px\",\r\n                                          color: \"#05ad19\",\r\n                                        }}\r\n                                      >\r\n                                        Email Sent\r\n                                      </div>\r\n                                    )}\r\n                                  </Button>\r\n                                </React.Fragment>\r\n                              )}\r\n                            </React.Fragment>\r\n                          )}\r\n                      </li>\r\n\r\n                      <li className={classes.li}>\r\n                        <span className={classes.infoTitle}>TOTAL CHARGES</span>{\" \"}\r\n                        <span\r\n                          className={\r\n                            calculatePrice(booking) <= 199\r\n                              ? classes.infoDataCharges\r\n                              : classes.infoDataChargesHigher\r\n                          }\r\n                        >{`£${calculatePrice(booking)}`}</span>\r\n                        {!(\r\n                          editMode.edit && editMode.person._id === booking._id\r\n                        ) &&\r\n                          !booking.paid &&\r\n                          !booking.deleted && (\r\n                            <Button\r\n                              variant=\"outlined\"\r\n                              color=\"secondary\"\r\n                              className={classes.PayButton}\r\n                              onClick={(event) => Pay(event, booking._id)}\r\n                            >\r\n                              Pay\r\n                            </Button>\r\n                          )}\r\n                        {!(\r\n                          editMode.edit && editMode.person._id === booking._id\r\n                        ) &&\r\n                          booking.paid && (\r\n                            <React.Fragment>\r\n                              <span className={classes.PayLabel}>\r\n                                {\" \"}\r\n                                <CheckIcon\r\n                                  className={classes.checkIconSmall}\r\n                                />{\" \"}\r\n                                Paid by {booking.paidBy}\r\n                                {booking.paidBy === \"corporate\"\r\n                                  ? ` \"${booking.corporate}\" `\r\n                                  : \"\"}\r\n                              </span>\r\n\r\n                              <Tooltip title=\"Undo Payment\">\r\n                                <IconButton\r\n                                  onClick={() => setOpenUndoPayDialog(true)}\r\n                                >\r\n                                  <UndoIcon style={{ color: \"red\" }} />\r\n                                </IconButton>\r\n                              </Tooltip>\r\n                            </React.Fragment>\r\n                          )}\r\n                      </li>\r\n                    </ul>\r\n                  </div>\r\n                </Grid>\r\n              </div>\r\n              <Backdrop\r\n                className={classes.backdrop}\r\n                open={saving || deleting || restoring}\r\n              >\r\n                <CircularProgress color=\"inherit\" />\r\n              </Backdrop>\r\n            </DialogContent>\r\n\r\n            <ResendEmailsDialog\r\n              booking={selectedBooking}\r\n              open={openResendDialog}\r\n              handleClose={handleCloseResendDialog}\r\n            />\r\n            <PayDialog\r\n              booking={selectedBooking}\r\n              open={openPayDialog}\r\n              handleClose={handleClosePayDialog}\r\n            />\r\n\r\n            <InvoiceDialog\r\n              booking={selectedBooking}\r\n              invoice={invoice}\r\n              open={openInvoiceDialog}\r\n              defaultCodes={getDefaultCodes(props.booking)}\r\n              handleClose={handleCloseInvoiceDialog}\r\n            />\r\n\r\n            <TimeStampDialog\r\n              booking={selectedBooking}\r\n              open={openTimeStampDialog}\r\n              handleClose={handleCloseTimeStampDialog}\r\n            />\r\n          </Dialog>\r\n\r\n          <Dialog\r\n            open={openUndoPayDialog}\r\n            onClose={handleCloseUndoPayDialog}\r\n            aria-labelledby=\"alert-dialog-title\"\r\n            aria-describedby=\"alert-dialog-description\"\r\n          >\r\n            <DialogTitle style={{ color: \"#999\" }} id=\"alert-dialog-title\">\r\n              {\"Undo Payment\"}\r\n            </DialogTitle>\r\n            <DialogContent>\r\n              <DialogContentText\r\n                style={{ color: \"#333\", fontWeight: \"400\" }}\r\n                id=\"alert-dialog-description\"\r\n              >\r\n                Are you sure you want to undo payment for this booking?\r\n              </DialogContentText>\r\n            </DialogContent>\r\n            <DialogActions>\r\n              <Button onClick={handleCloseUndoPayDialog} color=\"default\">\r\n                Back\r\n              </Button>\r\n              <Button onClick={undoPaymentClicked} color=\"secondary\" autoFocus>\r\n                Yes, Undo Payment\r\n              </Button>\r\n            </DialogActions>\r\n          </Dialog>\r\n        </React.Fragment>\r\n      )}\r\n    </React.Fragment>\r\n  );\r\n}\r\n","import React, {useEffect, useRef, useState} from 'react';\r\nimport { DataGrid } from '@material-ui/data-grid';\r\nimport BookService from './services/BookService';\r\nimport { Button, Checkbox, CircularProgress, Dialog, DialogContent, DialogTitle, Divider, FormControl, FormControlLabel, Grid, Icon, InputLabel, LinearProgress, Link, makeStyles, MenuItem, Paper, Select, SvgIcon, Switch, TextField, Tooltip } from '@material-ui/core';\r\nimport RefreshIcon from '@material-ui/icons/Refresh';\r\nimport { IconButton } from '@material-ui/core';\r\nimport CheckIcon from '@material-ui/icons/Check';\r\nimport CloseIcon from '@material-ui/icons/Close';\r\nimport GlobalState from './../GlobalState';\r\nimport { getMenuIndex } from './../MenuList';\r\nimport {FormatDateFromString, FormatDateFromStringShortYear} from './DateFormatter';\r\n\r\nimport SearchIcon from '@material-ui/icons/Search';\r\nimport BookingDialog from './BookingDialog';\r\n\r\nimport NewReleasesIcon from '@material-ui/icons/NewReleases';\r\nimport HistoryIcon from '@material-ui/icons/History';\r\nimport TimelineIcon from '@material-ui/icons/Timeline';\r\nimport DescriptionIcon from '@material-ui/icons/Description';\r\nimport AutorenewIcon from '@material-ui/icons/Autorenew';\r\nimport LiveTvIcon from '@material-ui/icons/LiveTv';\r\nimport PlaylistAddCheckIcon from '@material-ui/icons/PlaylistAddCheck';\r\nimport AddCircleOutlineIcon from '@material-ui/icons/AddCircleOutline';\r\nimport DeleteIcon from '@material-ui/icons/Delete';\r\nimport HourglassEmptyIcon from '@material-ui/icons/HourglassEmpty';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { faFileExcel } from \"@fortawesome/free-solid-svg-icons\";\r\nimport Draggable from 'react-draggable';\r\n\r\nimport * as dateformat from 'dateformat';\r\n\r\nimport DateFnsUtils from '@date-io/date-fns';\r\n\r\nimport MomentUtils from \"@date-io/moment\";\r\nimport moment from \"moment\";\r\n\r\nimport {\r\n  MuiPickersUtilsProvider,\r\n  KeyboardTimePicker,\r\n  KeyboardDatePicker,\r\n} from '@material-ui/pickers';\r\n\r\nimport BusinessIcon from '@material-ui/icons/Business';\r\nimport CreditCardIcon from '@material-ui/icons/CreditCard';\r\nimport LocalAtmIcon from '@material-ui/icons/LocalAtm';\r\n\r\n\r\nimport ReactHTMLTableToExcel from 'react-html-table-to-excel';\r\nimport PriceCalculator from './PriceCalculator';\r\nimport { corporates } from './Corporates';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  title: {\r\n    marginTop: theme.spacing(0),\r\n    marginBottom: theme.spacing(1),\r\n\r\n  },\r\n  \r\n  refreshButton:{\r\n    marginLeft: theme.spacing(2),\r\n  },\r\n\r\n  checkIcon:{\r\n    color: \"green\"\r\n  },\r\n\r\n  closeIcon:{\r\n    color: \"red\"\r\n  },\r\n\r\n  RefLink: {\r\n    cursor: \"pointer\"\r\n  },\r\n\r\n  BookedLabel:{\r\n    backgroundColor: \"#606060\",\r\n    color: \"#fff\",\r\n    width: \"70px\",\r\n    textAlign: \"center\",\r\n  },\r\n\r\n  PatientAttendedLabel:{\r\n    backgroundColor: \"#0066aa\",\r\n    color: \"#fff\",\r\n    width: \"70px\",\r\n    textAlign: \"center\",\r\n  },\r\n\r\n  SampleTakenLabel:{\r\n    backgroundColor: \"#0066cc\",\r\n    color: \"#fff\",\r\n    width: \"70px\",\r\n    textAlign: \"center\",\r\n  },\r\n\r\n  ReportSentLabel:{\r\n    backgroundColor: \"#009900\",\r\n    color: \"#fff\",\r\n    width: \"70px\",\r\n    textAlign: \"center\",\r\n  },\r\n\r\n  ReportCertSentLabel:{\r\n    backgroundColor: \"#009900\",\r\n    color: \"#fff\",\r\n    width: \"70px\",\r\n    textAlign: \"center\",\r\n  },\r\n\r\n  PositiveLabel:{\r\n    backgroundColor: \"red\",\r\n    color: \"#fff\",\r\n    width: \"70px\",\r\n    textAlign: \"center\",\r\n  },\r\n\r\n  HideNowRows: {\r\n    position: \"absolute\",\r\n    top: \"40%\",\r\n    left: \"40%\",\r\n    width: \"600px\",\r\n    height: \"300px\",\r\n    backgroundColor : \"#fafafa\",\r\n    color : \"#111\",\r\n    zIndex: \"1000\",\r\n    display: \"flex\",\r\n    alignItems: \"center\",\r\n    justifyItems: \"center\"\r\n  },\r\n\r\n  ExportToExcelButton:\r\n  {\r\n    // marginBottom : \"20px\",\r\n    color : \"#2f942e\",\r\n    borderColor: \"#2f942e\",\r\n    \"&:hover\": {\r\n      background: \"#fafffa\",\r\n      borderColor: \"#2f942e\",\r\n    },\r\n    textDecoration : \"none !important\", \r\n   \r\n  },\r\n\r\n  ExportToExcelButtonInline:\r\n  {\r\n    // marginBottom : \"20px\",\r\n    color : \"#2f942e\",\r\n    borderColor: \"#2f942e\",\r\n    \"&:hover\": {\r\n      background: \"#fafffa\",\r\n      borderColor: \"#2f942e\",\r\n    },\r\n    textDecoration : \"none !important\", \r\n    cursor: \"pointer\",\r\n    padding: \"10px\"\r\n   \r\n  },\r\n\r\n  table: {\r\n    width: \"100%\",\r\n    border: \"1px solid #ddd\",\r\n    borderCollapse: \"collapse\",\r\n},\r\n\r\nth: {\r\n    border: \"1px solid #ddd\",\r\n    borderCollapse: \"collapse\",\r\n    verticalAlign: \"middle\",\r\n    fontcolor: \"#555\",\r\n    fontWeight: \"400\",\r\n    fontSize: \"15px\",\r\n    paddingTop: \"5px\",\r\n    paddingBottom: \"5px\",\r\n    width: \"14%\",\r\n    paddingLeft: \"5px\",\r\n},\r\n\r\ntd: {\r\n    border: \"1px solid #ddd\",\r\n    borderCollapse: \"collapse\",\r\n    verticalAlign: \"middle\",\r\n    paddingLeft: \"5px\",\r\n},\r\n\r\ntopSelect: {\r\n  margin: theme.spacing(1),\r\n  minWidth: 80,\r\n}\r\n\r\n}));\r\n\r\nconst getTableTitle = (str) =>{\r\n\r\n  if (str === 'today')\r\n  {\r\n    return `Today's Bookings`;\r\n  }else if (str === 'old')\r\n  {\r\n    return `Old Bookings`;\r\n  }else if (str === 'future')\r\n  {\r\n    return `Future Bookings`;\r\n  }else if (str === 'recent')\r\n  {\r\n    return `Recent Bookings`;\r\n  }else if (str === 'live')\r\n  {\r\n    return `Live Bookings`;\r\n  }else if (str === 'completed')\r\n  {\r\n    return `Completed Bookings`;\r\n  }else if (str === 'positive')\r\n  {\r\n    return `Positive Results`;\r\n  }else if (str === 'deleted')\r\n  {\r\n    return `Deleted Records`;\r\n  }else if (str === 'late')\r\n  {\r\n    return `40 Hours Late`;\r\n  }else if (str === 'tr')\r\n  {\r\n    return `Test & Release Bookings`;\r\n  }\r\n  \r\n  else\r\n  {\r\n    return `All Bookings`;\r\n  }\r\n\r\n}\r\n\r\nconst getTableIcon = (str) =>{\r\n\r\n  if (str === 'today')\r\n  {\r\n    return <NewReleasesIcon style={{fontSize:\"2.2rem\"}} />;\r\n  }else if (str === 'old')\r\n  {\r\n    return <HistoryIcon style={{fontSize:\"2.2rem\"}} />;\r\n  }else if (str === 'future')\r\n  {\r\n    return <TimelineIcon style={{fontSize:\"2.2rem\"}} />;\r\n  }else if (str === 'recent')\r\n  {\r\n    return <AutorenewIcon style={{fontSize:\"2.2rem\"}} />;\r\n  }else if (str === 'live')\r\n  {\r\n    return <LiveTvIcon style={{fontSize:\"2.2rem\"}} />;\r\n  }else if (str === 'completed')\r\n  {\r\n    return  <PlaylistAddCheckIcon style={{fontSize:\"2.2rem\"}} />;\r\n  }else if (str === 'positive')\r\n  {\r\n    return <AddCircleOutlineIcon style={{fontSize:\"2.2rem\"}} />\r\n  }else if (str === 'deleted')\r\n  {\r\n    return <DeleteIcon style={{fontSize:\"2.2rem\"}} />;\r\n  }else if (str === 'late')\r\n  {\r\n    return <HourglassEmptyIcon style={{fontSize:\"2.2rem\"}} />;\r\n  }\r\n  \r\n  else\r\n  {\r\n    return <DescriptionIcon style={{fontSize:\"2.2rem\"}} />;\r\n  }\r\n\r\n}\r\n\r\nfunction PaperComponent(props) {\r\n  return (\r\n    <Draggable handle=\"#draggable-dialog-title\" cancel={'[class*=\"MuiDialogContent-root\"]'}>\r\n      <Paper {...props} />\r\n    </Draggable>\r\n  );\r\n}\r\n\r\nexport default function BookingTable(props) {\r\n  \r\n  const classes = useStyles();\r\n\r\n  const [topCount, setTopCount] = React.useState(25)\r\n  const topCountChanged = (event) =>\r\n  {\r\n    setTopCount(event.target.value)\r\n    loadData(event.target.value)\r\n  }\r\n  \r\n\r\n  const [openDialogExcel, setOpenDialogExcel] = useState(false);\r\n  const handleCloseDialogExcel = () =>\r\n  {\r\n    setCorporate(corporates[0]);\r\n    setJustCorporate(false);\r\n    setOpenDialogExcel(false);\r\n  }\r\n\r\n\r\n  const [fromDate, setFromDate] = React.useState(new Date(new Date().getTime() - 7 * 24 * 60 * 60 * 1000 ));\r\n  const handleFromDateChange = (date) => {\r\n    setFromDate(date);\r\n    setFromDateStr(dateformat(date,'yyyy-mm-dd'));\r\n  };\r\n\r\n  const [untilDate, setUntilDate] = React.useState(new Date(new Date().getTime() - 1 * 24 * 60 * 60 * 1000 ));\r\n  const handleUntilDateChange = (date) => {\r\n    setUntilDate(date);\r\n    seUntilDateStr(dateformat(date,'yyyy-mm-dd'));\r\n  };\r\n\r\n  const [fromDateStr, setFromDateStr] = useState(dateformat(new Date(new Date().getTime() - 7 * 24 * 60 * 60 * 1000 ), 'yyyy-mm-dd'));\r\n  const [untilDateStr, seUntilDateStr] = useState(dateformat(new Date(new Date().getTime() - 1 * 24 * 60 * 60 * 1000 ), 'yyyy-mm-dd'));\r\n\r\n  const [justCorporate, setJustCorporate] = useState(false);\r\n\r\n  const[chkDate, setChkDate] = useState(true);\r\n  const[chkForename, setChkForename] = useState(true);\r\n  const[chkSurname, setChkSurname] = useState(true);\r\n  const[chkDOB, setChkDOB] = useState(true);\r\n  const[chkEmail, setChkEmail] = useState(true);\r\n  const[chkTel, setChkTel] = useState(true);\r\n  const[chkCertificate, setChkCertidicate] = useState(true);\r\n  const[chkAntiBodyTest, setChkAntiBodyTest] = useState(true);\r\n  const[chkextRef, setChkExtRef] = useState(true);\r\n  const[chkPrice, setChkPrice] = useState(true);\r\n\r\n  const justCorporateChanged = (event) =>\r\n  {\r\n    setJustCorporate(event.target.checked);\r\n  }\r\n  \r\n\r\n  const chkDateChanged = (event) =>\r\n  {\r\n    setChkDate(event.target.checked);\r\n  }\r\n\r\n  const chkForenameChanged = (event) =>\r\n  {\r\n    setChkForename(event.target.checked);\r\n  }\r\n\r\n  const chkSurnameChanged = (event) =>\r\n  {\r\n    setChkSurname(event.target.checked);\r\n  }\r\n\r\n  const chkDOBChanged = (event) =>\r\n  {\r\n    setChkDOB(event.target.checked);\r\n  }\r\n\r\n  const chkEmailChanged = (event) =>\r\n  {\r\n    setChkEmail(event.target.checked);\r\n  }\r\n\r\n  const chkTelChanged = (event) =>\r\n  {\r\n    setChkTel(event.target.checked);\r\n  }\r\n\r\n  const chkCertificateChanged = (event) =>\r\n  {\r\n    setChkCertidicate(event.target.checked);\r\n  }\r\n\r\n  const chkAntiBodyTestChanged = (event) =>\r\n  {\r\n    setChkAntiBodyTest(event.target.checked);\r\n  }\r\n\r\n  const chkextRefChanged = (event) =>\r\n  {\r\n    setChkExtRef(event.target.checked);\r\n  }\r\n\r\n  const chkPriceChanged = (event) =>\r\n  {\r\n    setChkPrice(event.target.checked);\r\n  }\r\n\r\n\r\n\r\n  var columns = [];\r\n\r\n  if (props.date === 'recent')\r\n  {\r\n    columns = [\r\n      // { field: 'id', headerName: '#', width: 70 },\r\n  \r\n      {field: '_id', headerName:' ', width: 70, renderCell: (params) =>{\r\n          return (\r\n\r\n           <React.Fragment>\r\n\r\n                {params.getValue('tr') ? \r\n                \r\n                  <span style={{ position:\"absolute\", fontSize:\"12px\", fontWeight:\"600\", color:\"#7e0082\"}}>\r\n                    TR\r\n                  </span> \r\n                \r\n                : \r\n                \r\n                ''}\r\n\r\n                <Button \r\n                        color=\"primary\"\r\n                        onClick = {event => openDetailsDialog(event, params.value)}\r\n                > \r\n            \r\n            <SearchIcon/> \r\n            \r\n            </Button>\r\n\r\n           </React.Fragment>\r\n\r\n          \r\n  \r\n          ); \r\n      \r\n        }\r\n      },\r\n\r\n      { field: 'timeStamp', headerName: 'TimeStamp', width: 200, valueFormatter: (params) => { \r\n        return formatTimeStamp(params.value);\r\n        }\r\n      },\r\n  \r\n      { field: 'bookingDate', headerName: 'B Date', width: 110, valueFormatter: (params) => { \r\n              return FormatDateFromString(params.value);\r\n          }\r\n       },\r\n      { field: 'bookingTimeNormalized', headerName: 'B Time', width: 105 , valueGetter: (params) => {\r\n        return params.getValue('bookingTime');\r\n      }},\r\n      { field: 'status', headerName: 'Status', width: 100, renderCell: (params) =>{\r\n          if (params.value === 'booked')\r\n          {\r\n            return (\r\n              <span className={classes.BookedLabel}>  BM </span>\r\n            );\r\n        \r\n          }else if (params.value === 'patient_attended')\r\n          {\r\n            return (\r\n              <span  className={classes.PatientAttendedLabel}> PA </span>\r\n            );\r\n  \r\n          }else if (params.value === 'sample_taken')\r\n          {\r\n            return (\r\n              <span  className={classes.SampleTakenLabel}>  ST </span>\r\n            );\r\n  \r\n          }else if (params.value === 'report_sent')\r\n          {\r\n            return (\r\n              <span  className={classes.ReportSentLabel}>  RS </span>\r\n            );\r\n  \r\n          }else if (params.value === 'report_cert_sent')\r\n          {\r\n            return (\r\n              <span  className={classes.ReportCertSentLabel}>  RCS </span>\r\n            );\r\n  \r\n          }else if (params.value === 'positive')\r\n          {\r\n            return (\r\n              <span  className={classes.PositiveLabel}> POS </span>\r\n            );\r\n          }\r\n          \r\n          else{\r\n            return 'Unknown';\r\n          }\r\n        }\r\n      },\r\n      { field: 'bookingRef', headerName: 'Ref No.', width: 120 , renderCell: (params) =>{\r\n        return (\r\n          <Tooltip title=\"Go Find By Ref\" placement=\"right\">\r\n              <Link className={classes.RefLink}\r\n              //  onClick={\r\n              //   () => {\r\n              //     console.log(params.value);\r\n  \r\n              //     setState(state => ({...state, currentMenuIndex: getMenuIndex(`pcr` , `findByRef`)}));\r\n              //     setState(state => ({...state, ref : params.value}));\r\n              //     setState(state => ({...state, refError : false})); \r\n              //     setState(state => ({...state, foundRecords : []}));\r\n              //     setState(state => ({...state, findRecords : !state.findRecords}));\r\n              //   }\r\n              // }\r\n              \r\n              >\r\n                {params.value}\r\n              </Link>\r\n          </Tooltip>\r\n  \r\n        );\r\n      }},\r\n      { field: 'forenameCapital', headerName: 'Forename', width: 150 },\r\n      { field: 'surnameCapital', headerName: 'Surname', width: 150 },\r\n      { field: 'birthDate', headerName: 'D.O.B', width: 110, valueFormatter: (params) => { \r\n        return FormatDateFromString(params.value);\r\n         }\r\n      },\r\n      { field: 'email', headerName: 'Email', width: 200 , valueFormatter : (params) => {\r\n        return params.value.toUpperCase();\r\n      }},\r\n      { field: 'phone', headerName: 'Tel', width: 150 },\r\n      { field: 'passportNumber', headerName: 'Passport No.', width: 250, \r\n      //  valueGetter: (params) => {\r\n      //   const pass2 = params.getValue('passportNumber2');\r\n      //   if (pass2 && pass2.length > 0 && pass2.trim().length > 0)\r\n      //   {\r\n      //     return `${params.getValue('passportNumber')?.toUpperCase()} - ${params.getValue('passportNumber2')?.toUpperCase()}`\r\n      //   }\r\n      //   else\r\n      //   {\r\n      //     return params.getValue('passportNumber')?.toUpperCase();\r\n      //   }\r\n      // }\r\n    },\r\n      { field: 'certificate', headerName: 'Certificate', width: 120,  renderCell: (params) => {\r\n          return params.value ? (\r\n            <CheckIcon className={classes.checkIcon}/>\r\n          ) :\r\n          (\r\n            <CloseIcon className={classes.closeIcon}/> \r\n          );\r\n      } },\r\n      { field: 'antiBodyTest', headerName: 'Antibody Test', width: 120,  renderCell: (params) => {\r\n        return params.value ? (\r\n          <CheckIcon className={classes.checkIcon}/>\r\n        ) :\r\n        (\r\n        <  CloseIcon className={classes.closeIcon}/> \r\n        );\r\n    } },\r\n      { field: 'postCode', headerName: 'Post Code', width: 150, valueFormatter : (params) => {\r\n        return params.value.toUpperCase();\r\n      } },\r\n      { field: 'address', headerName: 'Address', width: 500, valueFormatter : (params) => {\r\n        return params.value.toUpperCase();\r\n      } },\r\n      // { field: 'notes', headerName: 'Notes', width: 500 },\r\n    \r\n    ];\r\n\r\n  }\r\n  else\r\n  {\r\n    columns = [\r\n      // { field: 'id', headerName: '#', width: 70 },\r\n  \r\n      {field: '_id', headerName:' ', width: 70, renderCell: (params) =>{\r\n          return (\r\n            <React.Fragment>\r\n\r\n                {params.getValue('tr') ? \r\n                \r\n                  <span style={{ position:\"absolute\", fontSize:\"12px\", fontWeight:\"600\", color:\"#7e0082\"}}>\r\n                    TR\r\n                  </span> \r\n                \r\n                : \r\n                \r\n                ''}\r\n\r\n                <Button \r\n                        color=\"primary\"\r\n                        onClick = {event => openDetailsDialog(event, params.value)}\r\n                > \r\n            \r\n            <SearchIcon/> \r\n            \r\n            </Button>\r\n\r\n           </React.Fragment>\r\n  \r\n          ); \r\n      \r\n        }\r\n      },\r\n\r\n      { field: 'paid', headerName: 'Paid', align: 'center' , width: 90, renderCell: (params) => { \r\n               if (!params.value)\r\n               {\r\n                  return ( <CloseIcon className={classes.closeIcon}/> );\r\n               }\r\n               else\r\n               {\r\n                  if (params.getValue('paidBy') === 'credit card')\r\n                  {\r\n                    return ( <CreditCardIcon className={classes.checkIcon}/> );\r\n                  }\r\n                  else if (params.getValue('paidBy') === 'cash')\r\n                  {\r\n                    return ( <LocalAtmIcon className={classes.checkIcon}/> );\r\n                  }\r\n                  else if (params.getValue('paidBy') === 'corporate')\r\n                  {\r\n                    return ( <BusinessIcon className={classes.checkIcon}/> );\r\n                  }\r\n                  else\r\n                  {\r\n                    return '';  \r\n                  }\r\n               }\r\n         }\r\n        },\r\n  \r\n      { field: 'bookingDate', headerName: 'B Date', width: 110, valueFormatter: (params) => { \r\n              return FormatDateFromString(params.value);\r\n          }\r\n       },\r\n      { field: 'bookingTimeNormalized', headerName: 'B Time', width: 105 , valueGetter: (params) => {\r\n        return params.getValue('bookingTime');\r\n      }},\r\n      { field: 'status', headerName: 'Status', width: 100, renderCell: (params) =>{\r\n          if (params.value === 'booked')\r\n          {\r\n            return (\r\n              <span className={classes.BookedLabel}>  BM </span>\r\n            );\r\n        \r\n          }else if (params.value === 'patient_attended')\r\n          {\r\n            return (\r\n              <span  className={classes.PatientAttendedLabel}> PA </span>\r\n            );\r\n  \r\n          }else if (params.value === 'sample_taken')\r\n          {\r\n            return (\r\n              <span  className={classes.SampleTakenLabel}>  ST </span>\r\n            );\r\n  \r\n          }else if (params.value === 'report_sent')\r\n          {\r\n            return (\r\n              <span  className={classes.ReportSentLabel}>  RS </span>\r\n            );\r\n  \r\n          }else if (params.value === 'report_cert_sent')\r\n          {\r\n            return (\r\n              <span  className={classes.ReportCertSentLabel}>  RCS </span>\r\n            );\r\n  \r\n          }else if (params.value === 'positive')\r\n          {\r\n            return (\r\n              <span  className={classes.PositiveLabel}> POS </span>\r\n            );\r\n          }\r\n          \r\n          else{\r\n            return 'Unknown';\r\n          }\r\n        }\r\n      },\r\n      { field: 'bookingRef', headerName: 'Ref No.', width: 120 , renderCell: (params) =>{\r\n        return (\r\n          <Tooltip title=\"Go Find By Ref\" placement=\"right\">\r\n              <Link className={classes.RefLink} onClick={\r\n                () => {\r\n                  // console.log(params.value);\r\n  \r\n                  // setState(state => ({...state, currentMenuIndex: getMenuIndex(`findByRef`)}));\r\n                  // setState(state => ({...state, ref : params.value}));\r\n                  // setState(state => ({...state, refError : false})); \r\n                  // setState(state => ({...state, foundRecords : []}));\r\n                  // setState(state => ({...state, findRecords : !state.findRecords}));\r\n                }\r\n              }>\r\n                {params.value}\r\n              </Link>\r\n          </Tooltip>\r\n  \r\n        );\r\n      }},\r\n      { field: 'forenameCapital', headerName: 'Forename', width: 150 },\r\n      { field: 'surnameCapital', headerName: 'Surname', width: 150 },\r\n      { field: 'birthDate', headerName: 'D.O.B', width: 110, valueFormatter: (params) => { \r\n        return FormatDateFromString(params.value);\r\n         }\r\n      },\r\n      { field: 'email', headerName: 'Email', width: 200 , valueFormatter : (params) => {\r\n        return params.value.toUpperCase();\r\n      }},\r\n      { field: 'phone', headerName: 'Tel', width: 150 },\r\n      { field: 'passportNumber', headerName: 'Passport No.', width: 250,  \r\n      // valueGetter: (params) => {\r\n      //   const pass2 = params.getValue('passportNumber2');\r\n      //   if (pass2 && pass2.length > 0 && pass2.trim().length > 0)\r\n      //   {\r\n      //     return `${params.getValue('passportNumber')?.toUpperCase()} - ${params.getValue('passportNumber2')?.toUpperCase()}`\r\n      //   }\r\n      //   else\r\n      //   {\r\n      //     return params.getValue('passportNumber')?.toUpperCase();\r\n      //   }\r\n      // }\r\n    },\r\n      { field: 'certificate', headerName: 'Certificate', width: 120,  renderCell: (params) => {\r\n          return params.value ? (\r\n            <CheckIcon className={classes.checkIcon}/>\r\n          ) :\r\n          (\r\n            <CloseIcon className={classes.closeIcon}/> \r\n          );\r\n      } },\r\n      { field: 'antiBodyTest', headerName: 'Antibody Test', width: 120,  renderCell: (params) => {\r\n        return params.value ? (\r\n          <CheckIcon className={classes.checkIcon}/>\r\n        ) :\r\n        (\r\n        <  CloseIcon className={classes.closeIcon}/> \r\n        );\r\n    } },\r\n      { field: 'postCode', headerName: 'Post Code', width: 150, valueFormatter : (params) => {\r\n        return params.value.toUpperCase();\r\n      } },\r\n      { field: 'address', headerName: 'Address', width: 500, valueFormatter : (params) => {\r\n        return params.value.toUpperCase();\r\n      } },\r\n      // { field: 'notes', headerName: 'Notes', width: 500 },\r\n    \r\n    ];\r\n  \r\n\r\n  }\r\n\r\n\r\n\r\n  const [state, setState] = React.useContext(GlobalState);  \r\n\r\n  const [data, setData] = React.useState({bookings: [] , cachedBookings: [], isFetching : true});\r\n\r\n  const [selectedRow, setSelectedRow] = React.useState(null);\r\n\r\n  const [selectedBooking, setSelectedBooking] = React.useState(null);\r\n  const [seeDetailsDialogOpen, setSeeDetailsDialogOpen] = React.useState(false);\r\n\r\n  const dateFormatter = str => {\r\n    return str;\r\n  };\r\n\r\n  const [corporate, setCorporate] = useState(corporates[0]);\r\n  const corporateChanged = (event) =>\r\n  {\r\n    setCorporate(event.target.value);\r\n  }\r\n  \r\n\r\n  const [filter,setFilter] = React.useState('');\r\n\r\n\r\n  const lastPromise = useRef();\r\n\r\n  const formatTimeStamp = (timeStamp) =>\r\n  {\r\n    const todayStr = dateformat(new Date(), 'yyyy-mm-dd');\r\n    const timeStampStr = dateformat(timeStamp, 'yyyy-mm-dd');\r\n    if (todayStr === timeStampStr)\r\n    {\r\n      return dateformat(timeStamp, \"'Today', h:MM:ss TT\");\r\n    }\r\n    else\r\n    {\r\n       return dateformat(timeStamp, \"mmm dS, h:MM:ss TT\");\r\n    }\r\n  }\r\n\r\n  const loadData = (top) =>\r\n  {\r\n    var api = BookService.getAllBookings;\r\n    if (props.date === 'today')\r\n    {\r\n      api = BookService.getTodayBookings;\r\n    }else if (props.date === 'old')\r\n    {\r\n      api = BookService.getOldBookings;\r\n    }else if (props.date === 'future')\r\n    {\r\n      api = BookService.getFutureBookings;\r\n    }else if (props.date === 'recent')\r\n    {\r\n      api = BookService.getRecentBookingsAll;\r\n    }else if (props.date === 'live')\r\n    {\r\n      api = BookService.getLiveBookings;\r\n    }else if (props.date === 'completed')\r\n    {\r\n      api = BookService.getCompletedBookings;\r\n    }\r\n    else if (props.date === 'positive')\r\n    {\r\n      api = BookService.getPositiveBookings;\r\n    }\r\n    else if (props.date === 'deleted')\r\n    {\r\n      api = BookService.getDeletedBookings;\r\n    }\r\n    else if (props.date === 'late')\r\n    {\r\n      api = BookService.getLateBookings;\r\n    }\r\n    else if (props.date === 'tr')\r\n    {\r\n      api = BookService.getAllTRBookings;\r\n    }\r\n               \r\n    setData({bookings: [], cachedBookings: [], isFetching: true});\r\n   \r\n    // console.log(props)\r\n\r\n    const currentPromise = api(top).then( (res) =>{\r\n      // console.log(res)\r\n      for (var i=0; i < res.data.length; i++)\r\n      {\r\n        res.data[i] = {...res.data[i], id : i + 1}\r\n      }  \r\n      setData({bookings: [...res.data], cachedBookings: [...res.data], isFetching: false});\r\n      // return res.data;\r\n    }).catch(err => {\r\n      console.error(err)\r\n    })\r\n\r\n    // lastPromise.current = currentPromise;\r\n\r\n    // currentPromise.then(\r\n    //   result => {\r\n    //     if (currentPromise === lastPromise.current) {\r\n    //       setData({bookings: [...result], cachedBookings: [...result], isFetching: false});\r\n    //       setPage(1);\r\n    //     }\r\n    //   },\r\n    //   e => {\r\n    //     if (currentPromise === lastPromise.current) {\r\n    //         console.error(e);\r\n    //         setData({bookings: data.bookings, cachedBookings: data.cachedBookings, isFetching: false});\r\n    //     }\r\n    //   });\r\n\r\n  }\r\n\r\n  useEffect( () => {\r\n            setTopCount(25)\r\n            loadData(25)\r\n        },\r\n        [props.date]);\r\n\r\n\r\n\r\n\r\n  useEffect( () => {\r\n\r\n        if (filter && filter.trim().length > 0)\r\n        {\r\n          var filteredData = data.cachedBookings.filter( (element) => \r\n\r\n             (element.forename.toLowerCase().indexOf(filter.toLowerCase()) >= 0) ||\r\n                   (element.surname.toLowerCase().indexOf(filter.toLowerCase()) >= 0) \r\n                  || (`${element.forename} ${element.surname}`.toLowerCase().indexOf(filter.toLowerCase()) >= 0)\r\n          );\r\n  \r\n  \r\n          setData({bookings: [...filteredData], cachedBookings: data.cachedBookings, isFetching: false});\r\n        }else\r\n        {\r\n          setData({bookings: [...data.cachedBookings], cachedBookings: data.cachedBookings, isFetching: false});\r\n        }\r\n      },\r\n      [filter]);\r\n\r\n  \r\n      useEffect(() => {\r\n\r\n       loadData(topCount)\r\n    \r\n      }, [state.bookingDialogDataChanged]);    \r\n\r\n\r\n  const handleCloseSeeDetaisDialog = () =>\r\n  {\r\n    setSelectedBooking(null);\r\n    setSeeDetailsDialogOpen(false);\r\n  }    \r\n  \r\n  const openDetailsDialog = (event, id) =>\r\n  {\r\n    const booking = data.bookings.find(element => element._id === id);\r\n    setSelectedBooking(booking);\r\n    setSeeDetailsDialogOpen(true);\r\n\r\n  }\r\n\r\n  const refreshClicked = (event) =>{\r\n    setFilter('');\r\n    loadData(topCount)\r\n  }\r\n\r\n  const filterChanged = (event) =>{\r\n    setFilter(event.target.value);\r\n  }\r\n\r\n  const handleSelectionChanged = (newSelection) =>\r\n  {\r\n    if (newSelection.length > 0){\r\n      setSelectedRow(newSelection.rows[0]);\r\n    }\r\n    \r\n  }\r\n\r\n  const [page, setPage] = React.useState(1);\r\n\r\n  const handleExcelButtonClicked = (event) =>\r\n  {\r\n    setOpenDialogExcel(true);\r\n  }\r\n\r\n  const isTopSelectHidden = (date)=>\r\n  {\r\n    return date === 'live' || date === 'positive' || date === 'late' || date === 'today'\r\n  }\r\n\r\n\r\n  return (\r\n    <React.Fragment>\r\n      {data.isFetching && (\r\n        <div style={{ width: \"100%\", paddingTop: \"3px\" }}>\r\n          <LinearProgress color=\"primary\" />\r\n        </div>\r\n      )}\r\n      <Grid\r\n        container\r\n        direction=\"row\"\r\n        justify=\"space-between\"\r\n        alignItems=\"flex-end\"\r\n      >\r\n        <Grid item md={4}>\r\n          <div style={{ textAlign: \"left\", paddingLeft: \"10px\" }}>\r\n            <Grid\r\n              container\r\n              direction=\"row\"\r\n              justify=\"flex-start\"\r\n              alignItems=\"center\"\r\n            >\r\n              <Grid item>\r\n                <span style={{ paddingRight: \"15px\", color: \"#555\" }}>\r\n                  {\" \"}\r\n                  {getTableIcon(props.date)}{\" \"}\r\n                </span>\r\n              </Grid>\r\n              <Grid item>\r\n                <span\r\n                  style={{\r\n                    fontSize: \"1.4rem\",\r\n                    fontWeight: \"600\",\r\n                    color: \"#444\",\r\n                  }}\r\n                >\r\n                  {\" \"}\r\n                  {getTableTitle(props.date)}{\" \"}\r\n                </span>\r\n              </Grid>\r\n              <Grid item>\r\n                <Tooltip title=\"Refresh\" placement=\"right\">\r\n                  <IconButton\r\n                    color=\"primary\"\r\n                    className={classes.refreshButton}\r\n                    onClick={refreshClicked}\r\n                  >\r\n                    <RefreshIcon />\r\n                  </IconButton>\r\n                </Tooltip>\r\n              </Grid>\r\n            </Grid>\r\n          </div>\r\n        </Grid>\r\n\r\n        <Grid item md={3}>\r\n          {props.date === \"completed\" && state.userId.username === 'admin' && (\r\n            <div style={{ paddingBottom: \"5px\" }}>\r\n              <Button\r\n                className={classes.ExportToExcelButton}\r\n                variant=\"outlined\"\r\n                color=\"default\"\r\n                onClick={handleExcelButtonClicked}\r\n                startIcon={\r\n                  <FontAwesomeIcon\r\n                    style={{ color: \"#009900\" }}\r\n                    icon={faFileExcel}\r\n                  />\r\n                }\r\n              >\r\n                export to excel\r\n              </Button>\r\n            </div>\r\n          )}\r\n        </Grid>\r\n\r\n        {data.isFetching && <div className={classes.HideNowRows}></div>}\r\n\r\n        <Grid item md={3}>\r\n          <TextField\r\n            variant=\"standard\"\r\n            value={filter}\r\n            onChange={filterChanged}\r\n            margin=\"normal\"\r\n            size=\"small\"\r\n            id=\"filter\"\r\n            label=\"Filter\"\r\n            name=\"filter\"\r\n            autoComplete=\"off\"\r\n          />\r\n        </Grid>\r\n\r\n        <Grid item hidden={isTopSelectHidden(props.date)}>\r\n          <FormControl className={classes.topSelect}>\r\n            <InputLabel id=\"top-select-label\">Limit</InputLabel>\r\n            <Select\r\n              labelId=\"top-select-label\"\r\n              id=\"top-simple-select\"\r\n              value={topCount}\r\n              onChange={topCountChanged}\r\n            >\r\n              <MenuItem value={25}>25</MenuItem>\r\n              <MenuItem value={50}>50</MenuItem>\r\n              <MenuItem value={100}>100</MenuItem>\r\n              <MenuItem value={500}>500</MenuItem>\r\n              <MenuItem value={1000}>1000</MenuItem>\r\n              <MenuItem value={10000}>ALL</MenuItem>\r\n            </Select>\r\n          </FormControl>\r\n\r\n          {/* <Button onClick={() => loadData(true)}> Show all records </Button> */}\r\n        </Grid>\r\n      </Grid>\r\n\r\n      <div style={{ height: 700, width: \"100%\" }}>\r\n        <DataGrid\r\n          rows={data.bookings}\r\n          columns={columns}\r\n          autoPageSize\r\n          page={page}\r\n          onPageChange={(params) => {\r\n            setPage(params.page);\r\n          }}\r\n          onSelectionChange={handleSelectionChanged}\r\n        />\r\n      </div>\r\n\r\n      <BookingDialog\r\n        booking={selectedBooking}\r\n        open={seeDetailsDialogOpen}\r\n        onClose={handleCloseSeeDetaisDialog}\r\n      />\r\n\r\n      {data.bookings && data.bookings.length > 0 && (\r\n        <Dialog\r\n          maxWidth=\"lg\"\r\n          open={openDialogExcel}\r\n          onClose={handleCloseDialogExcel}\r\n          PaperComponent={PaperComponent}\r\n          aria-labelledby=\"form-dialog-title\"\r\n        >\r\n          <DialogTitle id=\"draggable-dialog-title\">\r\n            <Grid\r\n              container\r\n              spacing={2}\r\n              direction=\"row\"\r\n              justify=\"center\"\r\n              alignItems=\"center\"\r\n            >\r\n              <Grid item>\r\n                <FontAwesomeIcon\r\n                  style={{ color: \"#2f942e\", fontSize: \"2rem\" }}\r\n                  icon={faFileExcel}\r\n                />\r\n              </Grid>\r\n\r\n              <Grid item>\r\n                <div\r\n                  style={{\r\n                    color: \"#2f942e\",\r\n                    paddingBottom: \"5px\",\r\n                    fontWeight: \"800\",\r\n                  }}\r\n                >\r\n                  {\" \"}\r\n                  Export to EXCEL{\" \"}\r\n                </div>\r\n              </Grid>\r\n            </Grid>\r\n\r\n            <Divider />\r\n          </DialogTitle>\r\n          <DialogContent>\r\n            <div\r\n              style={{\r\n                minHeight: \"600px\",\r\n                maxHeight: \"600px\",\r\n                minWidth: \"1200px\",\r\n                maxWidth: \"1200px\",\r\n              }}\r\n            >\r\n              <div>\r\n                <Grid row container justify=\"center\" spacing={3}>\r\n                  <Grid item>\r\n                    <FormControlLabel\r\n                      control={\r\n                        <Switch\r\n                          checked={justCorporate}\r\n                          onChange={justCorporateChanged}\r\n                          name=\"justCorporate\"\r\n                        />\r\n                      }\r\n                      label=\"Just Corporate Records\"\r\n                    />\r\n                  </Grid>\r\n\r\n                  {justCorporate && (\r\n                    <Grid item>\r\n                      <FormControl\r\n                        style={{ marginTop: \"0px\" }}\r\n                        className={classes.formControl}\r\n                      >\r\n                        <Select\r\n                          labelId=\"select-corporate\"\r\n                          id=\"select-corporate-id\"\r\n                          value={corporate}\r\n                          onChange={corporateChanged}\r\n                        >\r\n                          {corporates.map((element) => (\r\n                            <MenuItem value={element}>{`${element}`}</MenuItem>\r\n                          ))}\r\n                        </Select>\r\n                      </FormControl>\r\n                    </Grid>\r\n                  )}\r\n                </Grid>\r\n\r\n                <MuiPickersUtilsProvider utils={DateFnsUtils}>\r\n                  <Grid row container justify=\"center\" spacing={3}>\r\n                    <Grid item>\r\n                    <KeyboardDatePicker\r\n                        autoOk={true}\r\n                        disableToolbar\r\n                        variant=\"inline\"\r\n                        format=\"dd/MM/yyyy\"\r\n                        margin=\"normal\"\r\n                        id=\"date-picker-until\"\r\n                        label=\"Until\"\r\n                        value={fromDate}\r\n                        onChange={handleFromDateChange}\r\n                        KeyboardButtonProps={{\r\n                          \"aria-label\": \"change date\",\r\n                        }}\r\n                      />\r\n                    </Grid>\r\n\r\n                    <Grid item>\r\n                      <KeyboardDatePicker\r\n                        autoOk={true}\r\n                        disableToolbar\r\n                        variant=\"inline\"\r\n                        format=\"dd/MM/yyyy\"\r\n                        margin=\"normal\"\r\n                        id=\"date-picker-until\"\r\n                        label=\"Until\"\r\n                        value={untilDate}\r\n                        onChange={handleUntilDateChange}\r\n                        KeyboardButtonProps={{\r\n                          \"aria-label\": \"change date\",\r\n                        }}\r\n                      />\r\n                    </Grid>\r\n\r\n                    <Grid item>\r\n                      <div style={{ paddingTop: \"30px\", marginLeft: \"20px\" }}>\r\n                        <ReactHTMLTableToExcel\r\n                          id=\"test-table-xls-button\"\r\n                          className={classes.ExportToExcelButtonInline}\r\n                          table=\"table-to-xls\"\r\n                          filename={`PCR.Report.${fromDateStr}.${untilDateStr}`}\r\n                          sheet=\"PCR-Report\"\r\n                          buttonText=\"Download as XLS\"\r\n                        />\r\n                      </div>\r\n                    </Grid>\r\n                  </Grid>\r\n                </MuiPickersUtilsProvider>\r\n              </div>\r\n\r\n              <div>\r\n                <Grid container spacing={3}>\r\n                  <Grid item xs>\r\n                    <FormControlLabel\r\n                      control={\r\n                        <Checkbox\r\n                          checked={chkDate}\r\n                          onChange={chkDateChanged}\r\n                          name=\"chkDate\"\r\n                        />\r\n                      }\r\n                      label=\"Date\"\r\n                    />\r\n                  </Grid>\r\n                  <Grid item xs>\r\n                    <FormControlLabel\r\n                      control={\r\n                        <Checkbox\r\n                          checked={chkForename}\r\n                          onChange={chkForenameChanged}\r\n                          name=\"chkForename\"\r\n                        />\r\n                      }\r\n                      label=\"Forename\"\r\n                    />\r\n                  </Grid>\r\n                  <Grid item xs>\r\n                    <FormControlLabel\r\n                      control={\r\n                        <Checkbox\r\n                          checked={chkSurname}\r\n                          onChange={chkSurnameChanged}\r\n                          name=\"chkSurname\"\r\n                        />\r\n                      }\r\n                      label=\"Surname\"\r\n                    />\r\n                  </Grid>\r\n                  <Grid item xs>\r\n                    <FormControlLabel\r\n                      control={\r\n                        <Checkbox\r\n                          checked={chkDOB}\r\n                          onChange={chkDOBChanged}\r\n                          name=\"chkDOB\"\r\n                        />\r\n                      }\r\n                      label=\"D.O.B\"\r\n                    />\r\n                  </Grid>\r\n                  <Grid item xs>\r\n                    <FormControlLabel\r\n                      control={\r\n                        <Checkbox\r\n                          checked={chkEmail}\r\n                          onChange={chkEmailChanged}\r\n                          name=\"chkEmail\"\r\n                        />\r\n                      }\r\n                      label=\"Email\"\r\n                    />\r\n                  </Grid>\r\n                  <Grid item xs>\r\n                    <FormControlLabel\r\n                      control={\r\n                        <Checkbox\r\n                          checked={chkTel}\r\n                          onChange={chkTelChanged}\r\n                          name=\"chkTel\"\r\n                        />\r\n                      }\r\n                      label=\"Tel\"\r\n                    />\r\n                  </Grid>\r\n                  <Grid item xs>\r\n                    <FormControlLabel\r\n                      control={\r\n                        <Checkbox\r\n                          checked={chkCertificate}\r\n                          onChange={chkCertificateChanged}\r\n                          name=\"chkCertificate\"\r\n                        />\r\n                      }\r\n                      label=\"Certificate\"\r\n                    />\r\n                  </Grid>\r\n                  <Grid item xs>\r\n                    <FormControlLabel\r\n                      control={\r\n                        <Checkbox\r\n                          checked={chkAntiBodyTest}\r\n                          onChange={chkAntiBodyTestChanged}\r\n                          name=\"chkAntiBodyTest\"\r\n                        />\r\n                      }\r\n                      label=\"AntiBodyTest\"\r\n                    />\r\n                  </Grid>\r\n                  <Grid item xs>\r\n                    <FormControlLabel\r\n                      control={\r\n                        <Checkbox\r\n                          checked={chkextRef}\r\n                          onChange={chkextRefChanged}\r\n                          name=\"chkextRef\"\r\n                        />\r\n                      }\r\n                      label=\"Lab No.\"\r\n                    />\r\n                  </Grid>\r\n                  <Grid item xs>\r\n                    <FormControlLabel\r\n                      control={\r\n                        <Checkbox\r\n                          checked={chkPrice}\r\n                          onChange={chkPriceChanged}\r\n                          name=\"chkPrice\"\r\n                        />\r\n                      }\r\n                      label=\"Price\"\r\n                    />\r\n                  </Grid>\r\n                </Grid>\r\n              </div>\r\n\r\n              <div style={{ width: \"100%\", paddingTop: \"20px\" }}>\r\n                <table className={classes.table} id=\"table-to-xls\">\r\n                  <tr>\r\n                    {chkDate && <th className={classes.th}>Date</th>}\r\n                    {chkForename && <th className={classes.th}>Forename</th>}\r\n                    {chkSurname && <th className={classes.th}>Surename</th>}\r\n                    {chkDOB && <th className={classes.th}>D.O.B</th>}\r\n                    {chkEmail && <th className={classes.th}>Email</th>}\r\n                    {chkTel && <th className={classes.th}>Tel</th>}\r\n                    {chkCertificate && (\r\n                      <th className={classes.th}>Certificate</th>\r\n                    )}\r\n                    {chkAntiBodyTest && (\r\n                      <th className={classes.th}>AntiBodyTest</th>\r\n                    )}\r\n                    {chkextRef && <th className={classes.th}>Lab No.</th>}\r\n                    {chkPrice && <th className={classes.th}>Price (£) </th>}\r\n                  </tr>\r\n\r\n                  {data.bookings\r\n                    .filter((booking) => {\r\n                      if (!justCorporate) {\r\n                        return (\r\n                          booking.bookingDate >= fromDateStr &&\r\n                          booking.bookingDate <= untilDateStr\r\n                        );\r\n                      } else {\r\n                        return (\r\n                          booking.bookingDate >= fromDateStr &&\r\n                          booking.bookingDate <= untilDateStr &&\r\n                          booking.paid &&\r\n                          booking.paidBy === \"corporate\" &&\r\n                          booking.corporate === corporate\r\n                        );\r\n                      }\r\n                    })\r\n\r\n                    .map((booking) => (\r\n                      <tr>\r\n                        {chkDate && (\r\n                          <td className={classes.td}>\r\n                            {FormatDateFromString(booking.bookingDate)}\r\n                          </td>\r\n                        )}\r\n                        {chkForename && (\r\n                          <td className={classes.td}>\r\n                            {booking.forenameCapital}\r\n                          </td>\r\n                        )}\r\n                        {chkSurname && (\r\n                          <td className={classes.td}>\r\n                            {booking.surnameCapital}\r\n                          </td>\r\n                        )}\r\n                        {chkDOB && (\r\n                          <th className={classes.th}>\r\n                            {FormatDateFromString(booking.birthDate)}\r\n                          </th>\r\n                        )}\r\n                        {chkEmail && (\r\n                          <td className={classes.td}>{booking.email}</td>\r\n                        )}\r\n                        {chkTel && (\r\n                          <td className={classes.td}>{booking.phone}</td>\r\n                        )}\r\n                        {chkCertificate && (\r\n                          <td className={classes.td}>\r\n                            {booking.certificate ? \"YES\" : \"NO\"}\r\n                          </td>\r\n                        )}\r\n                        {chkAntiBodyTest && (\r\n                          <td className={classes.td}>\r\n                            {booking.antiBodyTest ? \"YES\" : \"NO\"}\r\n                          </td>\r\n                        )}\r\n                        {chkextRef && (\r\n                          <td className={classes.td}>{booking.extRef}</td>\r\n                        )}\r\n                        {chkPrice && (\r\n                          <td className={classes.td}>\r\n                            {PriceCalculator.calculatePrice(booking)}\r\n                          </td>\r\n                        )}\r\n                      </tr>\r\n                    ))}\r\n                </table>\r\n              </div>\r\n            </div>\r\n          </DialogContent>\r\n        </Dialog>\r\n      )}\r\n    </React.Fragment>\r\n  );\r\n} ","import React, { useEffect } from 'react';\r\nimport { useTheme } from '@material-ui/core/styles';\r\nimport { LineChart, Line, XAxis, YAxis, Label, ResponsiveContainer } from 'recharts';\r\nimport Title from './Title';\r\nimport dateformat from 'dateformat';\r\nimport BookService from './services/BookService';\r\nimport { LinearProgress } from '@material-ui/core';\r\n\r\n// Generate Sales Data\r\nfunction createData(time, amount) {\r\n  return { time, amount };\r\n}\r\n\r\n\r\nconst emptyData = [\r\n  createData('09:00', 0),\r\n  createData('10:00', 0),\r\n  createData('11:00', 0),\r\n  createData('12:00', 0),\r\n  createData('13:00', 0),\r\n  createData('14:00', 0),\r\n  createData('15:00', 0),\r\n  createData('16:00', 0),\r\n  createData('17:00', 0),\r\n  createData('18:00', undefined),\r\n\r\n];\r\n\r\nconst getCount = (data, str) =>\r\n{\r\n  if (!data)\r\n    return 0;\r\n\r\n  var count = 0;\r\n  for (var i=0; i < data.length; i++)\r\n  {\r\n    if (data[i]._id.substr(0,2) === str)\r\n    {\r\n      count += data[i].count;\r\n    }\r\n  }\r\n  return count;\r\n}\r\n\r\nexport default function Chart() {\r\n  const theme = useTheme();\r\n\r\n  const [data, setData] = React.useState(emptyData);\r\n  const [loading, setLoading] = React.useState(false)\r\n\r\n  useEffect(() =>\r\n  {\r\n    const fetchData = async () =>\r\n    {\r\n      const todayStr = dateformat(new Date(), 'yyyy-mm-dd');\r\n      var result = [];\r\n      try\r\n      {\r\n          setLoading(true)\r\n          const res = await BookService.getBookingsStatsByDateStr(todayStr);\r\n          setLoading(false)\r\n          const data = res.data.result;\r\n          result.push(createData('09:00', getCount(data,'09')));\r\n          result.push(createData('10:00', getCount(data,'10')));\r\n          result.push(createData('11:00', getCount(data,'11')));\r\n          result.push(createData('12:00', getCount(data,'12')));\r\n          result.push(createData('13:00', getCount(data,'13')));\r\n          result.push(createData('14:00', getCount(data,'14')));\r\n          result.push(createData('15:00', getCount(data,'15')));\r\n          result.push(createData('16:00', getCount(data,'16')));\r\n          result.push(createData('17:00', getCount(data,'17')));\r\n          result.push(createData('18:00', undefined));\r\n \r\n           setData(result);\r\n      }\r\n      catch(err){\r\n        setLoading(false)\r\n        console.error(err);\r\n      }\r\n\r\n    }\r\n  \r\n   fetchData();\r\n\r\n  }, [] );\r\n\r\n  return (\r\n    <React.Fragment>\r\n       {loading && (\r\n        <div style={{ width: \"100%\", paddingTop: \"3px\" }}>\r\n          <LinearProgress color=\"primary\" />\r\n        </div>\r\n      )}\r\n      <Title>Today</Title>\r\n      <ResponsiveContainer>\r\n        <LineChart\r\n          data={data}\r\n          margin={{\r\n            top: 16,\r\n            right: 16,\r\n            bottom: 0,\r\n            left: 24,\r\n          }}\r\n        >\r\n          <XAxis dataKey=\"time\" stroke={theme.palette.text.secondary} />\r\n          <YAxis stroke={theme.palette.text.secondary}>\r\n            <Label\r\n              angle={270}\r\n              position=\"left\"\r\n              style={{ textAnchor: 'middle', fill: theme.palette.text.primary }}\r\n            >\r\n              Online Bookings\r\n            </Label>\r\n          </YAxis>\r\n          <Line type=\"monotone\" dataKey=\"amount\" stroke={theme.palette.primary.main} dot={false} />\r\n        </LineChart>\r\n      </ResponsiveContainer>\r\n    </React.Fragment>\r\n  );\r\n}","import React, { useEffect } from 'react';\r\nimport Link from '@material-ui/core/Link';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport Title from './Title';\r\nimport { Grid, LinearProgress, Tooltip } from '@material-ui/core';\r\nimport * as dateformat from 'dateformat';\r\nimport BookService from './services/BookService';\r\nimport BookingDialog from './BookingDialog';\r\n\r\n\r\nconst useStyles = makeStyles({\r\n  depositContext: {\r\n    flex: 1,\r\n  },\r\n\r\n  bookingBox: {\r\n    display: \"flex\",\r\n    margin: \"5px\",\r\n    padding: \"5px\",\r\n    maxWidth : \"90px\",\r\n    minHeight: \"30px\",\r\n    border : \"1px solid #eee\",\r\n    fontSize: \"12px\",\r\n    fontWeight : \"500\",\r\n    cursor: \"pointer\",\r\n    backgroundColor: \"#ebedf7\",\r\n    color: \"#3f51b5\",\r\n    boxShadow: \"2px 4px #fafafa\",\r\n    borderRadius : \"5px\",\r\n    textAlign: \"center\",\r\n    alignItems: \"center\",\r\n    justifyItems: \"center\",\r\n    align: \"center\",\r\n\r\n    \"&:hover\": {\r\n        background: \"#3f51b5\",\r\n        color: \"#ebedf7\"\r\n      },\r\n}\r\n\r\n\r\n});\r\n\r\nconst isWeekend = (date) =>\r\n{\r\n    return (date.getDay() === 0 || date.getDay() === 6) /// Weekend\r\n}\r\n\r\nconst getCurrentTimeSlot = (now) =>\r\n{\r\n    var min = now.getMinutes();\r\n    var hour = now.getHours();\r\n    var pm = (hour >= 12);\r\n    if (hour > 12)\r\n    {\r\n      hour = hour - 12;\r\n    }\r\n\r\n    if (min >= 0 && min < 15)\r\n    {\r\n      min = 0;\r\n    }else if (min >= 15 && min < 30)\r\n    {\r\n      min = 15;\r\n    }else if (min >= 30 && min < 45)\r\n    {\r\n      min = 30;\r\n    }else if (min >= 45)\r\n    {\r\n      min = 45;\r\n    }\r\n\r\n    const minStr = min < 10 ? `0${min}` : `${min}`;\r\n    const hourStr = hour < 10 ? `0${hour}` : `${hour}`;\r\n    const pmStr = pm ? 'PM' : 'AM';\r\n\r\n    const timeStr = `${hourStr}:${minStr} ${pmStr}`;\r\n\r\n    if (isWeekend(now))\r\n    {\r\n      if (now.getHours() < 10 || now.getHours() >= 14)\r\n      {\r\n        return null;\r\n      }\r\n      else\r\n      {\r\n        return timeStr;\r\n      }\r\n    }\r\n    else\r\n    {\r\n      if (now.getHours() < 9 || now.getHours() >= 18)\r\n      {\r\n        return null;\r\n      }\r\n      else\r\n      {\r\n        return timeStr;\r\n      }\r\n\r\n    }\r\n}\r\n\r\nconst getCurrentTimeSlotLabel = (timeStr) =>\r\n{\r\n  if (!timeStr)\r\n  {\r\n    return 'Closed';\r\n  }\r\n\r\n  var hour = parseInt(timeStr.substr(0,2));\r\n  var minute = parseInt(timeStr.substr(3,2)); \r\n  var pm = timeStr.indexOf('PM') > 0;\r\n  if (minute !== 45)\r\n  {\r\n    minute += 15;\r\n  }\r\n  else{\r\n    minute = 0;\r\n    hour += 1;\r\n    if (hour >= 12)\r\n    {\r\n      pm = true;\r\n    }\r\n    if (hour > 12)\r\n    {\r\n      hour = hour - 12;\r\n    }\r\n  }\r\n\r\n  const minStr = minute < 10 ? `0${minute}` : `${minute}`;\r\n  const hourStr = hour < 10 ? `0${hour}` : `${hour}`;\r\n  const pmStr = pm ? 'PM' : 'AM';\r\n\r\n  const endTimeStr = `${hourStr}:${minStr} ${pmStr}`;\r\n\r\n  return `${timeStr} - ${endTimeStr}`;\r\n\r\n}\r\n\r\nexport default function CurrentVisits() {\r\n  const classes = useStyles();\r\n\r\n  const[current, setCurrent] = React.useState(new Date());\r\n  const [bookings, setBookings] = React.useState([]);\r\n\r\n  const [selectedBooking, setSelectedBooking] = React.useState(null);\r\n  const [openDialog, setOpenDialog] = React.useState(false);\r\n\r\n  const [loading, setLoading] = React.useState(false)\r\n\r\n  useEffect(() => \r\n  {\r\n    const interval = setInterval(() => {  \r\n      setCurrent(new Date());\r\n    }, 30000);\r\n\r\n    return () =>\r\n    {\r\n      clearInterval(interval);\r\n    }\r\n\r\n  }, []);\r\n\r\n  useEffect(() => \r\n  {\r\n    const currentTimeSlot = getCurrentTimeSlot(current);\r\n    if (!currentTimeSlot)\r\n      return;\r\n    const todayStr = dateformat(current, 'yyyy-mm-dd');\r\n    setLoading(true)\r\n    BookService.getBookingsByDateStrandTime(todayStr,currentTimeSlot).then(res =>\r\n      {\r\n        setLoading(false)\r\n        if (res.data.status === 'OK')\r\n        {\r\n            setBookings([...res.data.bookings]);\r\n        }   \r\n\r\n      }).catch(err =>\r\n        {\r\n          setLoading(false)\r\n          console.log(err);\r\n        });\r\n\r\n  }, [current]);\r\n\r\n  const getBookingsBox = (_bookings) =>\r\n  {\r\n      if (_bookings && _bookings.length > 0)\r\n      {\r\n         return (\r\n\r\n          <div className={classes.root}>\r\n            <Grid container justify=\"flex-start\" alignItems=\"flex-start\" spacing={0}>\r\n\r\n                  { _bookings.map(booking => (\r\n\r\n                    <Grid item>\r\n\r\n                        <div className={classes.bookingBox} onClick={event => bookingCliked(event,booking)}>\r\n\r\n                            <span style={{textAlign:\"center\"}}> {`${booking.surnameCapital}`.substring(0,10)} </span>\r\n\r\n                        </div>\r\n\r\n                  </Grid>\r\n\r\n                  ))}\r\n\r\n              \r\n            </Grid>\r\n\r\n          </div>\r\n         )\r\n             \r\n        }                   \r\n  }\r\n\r\n  const bookingCliked = (event, booking) =>\r\n  {\r\n      setSelectedBooking(booking);\r\n      setOpenDialog(true);\r\n  }\r\n\r\n  const handleCloseDialog = () =>\r\n  {\r\n      setOpenDialog(false);\r\n  }\r\n\r\n  return (\r\n    <React.Fragment>\r\n\r\n       {loading && (\r\n        <div style={{ width: \"100%\", paddingTop: \"3px\" }}>\r\n          <LinearProgress color=\"primary\" />\r\n        </div>\r\n      )}\r\n\r\n      <Title>Current Visits</Title>\r\n      <Typography component=\"p\" variant=\"h6\">\r\n        {getCurrentTimeSlotLabel(getCurrentTimeSlot(current))}\r\n      </Typography>\r\n      <Typography color=\"textSecondary\" className={classes.depositContext}>\r\n        on {dateformat(current, 'dd mmmm, yyyy') } \r\n      </Typography>\r\n     \r\n        {getBookingsBox(bookings)}\r\n      \r\n\r\n      <BookingDialog\r\n                booking={selectedBooking}\r\n                open={openDialog}\r\n                onClose={handleCloseDialog}\r\n      />\r\n\r\n    </React.Fragment>\r\n  );\r\n}","import React, { useEffect } from 'react';\r\nimport Link from '@material-ui/core/Link';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport Table from '@material-ui/core/Table';\r\nimport TableBody from '@material-ui/core/TableBody';\r\nimport TableCell from '@material-ui/core/TableCell';\r\nimport TableHead from '@material-ui/core/TableHead';\r\nimport TableRow from '@material-ui/core/TableRow';\r\nimport Title from './Title';\r\nimport BookService from './services/BookService';\r\nimport * as dateformat from 'dateformat';\r\nimport GlobalState from './../GlobalState';\r\nimport { getMenuIndex } from './../MenuList';\r\nimport {FormatDateFromString, FormatDateFromStringShortYear} from './DateFormatter';\r\nimport { LinearProgress } from '@material-ui/core';\r\n\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  seeMore: {\r\n    marginTop: theme.spacing(3),\r\n  },\r\n}));\r\n\r\nexport default function BookingView() {\r\n  const classes = useStyles();\r\n  const [state, setState] = React.useContext(GlobalState);  \r\n\r\n  const [data, setData] = React.useState({bookings: [] , isFetching : false});\r\n\r\n  const [refresh, setRefresh] = React.useState(false);\r\n\r\n  const [loading, setLoading] = React.useState(false)\r\n\r\n  const seeMoreRecords = (event) => {\r\n    event.preventDefault();\r\n    setState(state=>({...state, currentMenuIndex:getMenuIndex('pcr',`recentBookings`)}));\r\n  }\r\n\r\n  const loadData = () => \r\n  {\r\n    setData({bookings: data.bookings, isFetching: true});\r\n    setLoading(true)\r\n    BookService.getRecentBookings().then( (res) =>{\r\n      setLoading(false)\r\n        setData({bookings: res.data, isFetching: false});\r\n\r\n    }).catch( (err) => {\r\n      setLoading(false)\r\n        console.log(err);\r\n        setData({bookings: data.bookings, isFetching: false});\r\n    });\r\n  }\r\n\r\n\r\n  useEffect( () => {\r\n          loadData();\r\n        },\r\n        [refresh]);   \r\n\r\n\r\n   useEffect( () => {\r\n     loadData();\r\n     setInterval(() => {\r\n       setRefresh(refresh => !refresh);\r\n     }, 30000);\r\n   }, []) ;    \r\n\r\n   const formatTimeStamp = (timeStamp) =>\r\n   {\r\n     const todayStr = dateformat(new Date(), 'yyyy-mm-dd');\r\n     const timeStampStr = dateformat(timeStamp, 'yyyy-mm-dd');\r\n     if (todayStr === timeStampStr)\r\n     {\r\n       return dateformat(timeStamp, \"'Today', h:MM:ss TT\");\r\n     }\r\n     else\r\n     {\r\n        return dateformat(timeStamp, \"mmm dS, h:MM:ss TT\");\r\n     }\r\n   }\r\n\r\n  return (\r\n    <React.Fragment>\r\n       {loading && (\r\n        <div style={{ width: \"100%\", paddingTop: \"3px\" }}>\r\n          <LinearProgress color=\"primary\" />\r\n        </div>\r\n      )}\r\n      <Title>Recent Bookings</Title>\r\n      <Table size=\"small\">\r\n        <TableHead>\r\n          <TableRow>\r\n            <TableCell>TimeStamp</TableCell>        \r\n            <TableCell>Name</TableCell>\r\n            <TableCell>Surname</TableCell>\r\n            <TableCell>Email</TableCell>\r\n            <TableCell>D.O.B</TableCell>\r\n            <TableCell>Booked Date</TableCell>\r\n            <TableCell>Booked Time</TableCell> \r\n          </TableRow>\r\n        </TableHead>\r\n        <TableBody>\r\n          {data.bookings.map((row) => (\r\n            <TableRow key={row._id}>\r\n              <TableCell>{formatTimeStamp(row.timeStamp)}</TableCell>\r\n              <TableCell>{row.forename}</TableCell>\r\n              <TableCell>{row.surname}</TableCell>\r\n              <TableCell>{row.email}</TableCell>\r\n              <TableCell>{FormatDateFromString(row.birthDate)}</TableCell>\r\n              <TableCell>{FormatDateFromString(row.bookingDate)}</TableCell>\r\n              <TableCell>{row.bookingTime}</TableCell>\r\n            </TableRow>\r\n          ))}\r\n        </TableBody>\r\n      </Table>\r\n      <div className={classes.seeMore}>\r\n        <Link color=\"primary\" href=\"#\" onClick={seeMoreRecords}>\r\n          See more records\r\n        </Link>\r\n      </div>\r\n    </React.Fragment>\r\n  );\r\n}","import React, { useEffect } from 'react';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport Title from './Title';\r\nimport { Dialog, DialogContent, DialogTitle, Grid, LinearProgress, Link, Table, TableBody, TableCell, TableHead, TableRow, Tooltip } from '@material-ui/core';\r\nimport BookService from './services/BookService';\r\n\r\nimport {\r\n    PieChart, Pie, Sector, Cell,\r\n  } from 'recharts';\r\n\r\n  const COLORS = ['#00b33e', '#0070e0', '#bb00c4'];\r\n\r\n  const RADIAN = Math.PI / 180;\r\n\r\n  const renderCustomizedLabel = ({\r\n    cx, cy, midAngle, innerRadius, outerRadius, value, index,\r\n  }) => {\r\n     const radius = innerRadius + (outerRadius - innerRadius) * 0.5;\r\n    const x = cx + radius * Math.cos(-midAngle * RADIAN);\r\n    const y = cy + radius * Math.sin(-midAngle * RADIAN);\r\n  \r\n    return (\r\n      <text x={x} y={y} fontSize=\"14px\" fontWeight=\"500\" fill=\"white\" textAnchor={x > cx ? 'start' : 'end'} dominantBaseline=\"central\">\r\n                {`${value} `}\r\n      </text>\r\n    );\r\n  };\r\n\r\n\r\nconst useStyles = makeStyles({\r\n  depositContext: {\r\n    flex: 1,\r\n  },\r\n\r\n  ReportLabels: {\r\n      position: \"absolute\",\r\n      top : \"80px\",\r\n      left: \"0px\"\r\n  },\r\n\r\n  AverageLabel: {\r\n    position: \"absolute\",\r\n    top : \"190px\",\r\n    right: \"30px\",\r\n    fontSize : \"12px\",\r\n    color : \"#0070e0\",\r\n    fontWeight: \"600\",\r\n  },\r\n\r\n  less12Label: {\r\n      fontSize : \"12px\",\r\n      color : \"#00b33e\",\r\n      fontWeight: \"600\",\r\n      paddingLeft : \"5px\",\r\n      borderLeft: \"5px solid #00b33e\",\r\n      marginBottom : \"10px\",\r\n  },\r\n\r\n  less24Label: {\r\n    fontSize : \"12px\",\r\n    color : \"#0070e0\",\r\n    fontWeight: \"600\",\r\n    paddingLeft : \"5px\",\r\n    borderLeft: \"5px solid #0070e0\",\r\n    marginBottom : \"10px\",\r\n    },\r\n\r\nless36Label: {\r\n    fontSize : \"12px\",\r\n    color : \"#bb00c4\",\r\n    fontWeight: \"600\",\r\n    paddingLeft : \"5px\",\r\n    borderLeft: \"5px solid #bb00c4\",\r\n    marginBottom : \"10px\",\r\n    },\r\n\r\n    seeMore :{\r\n        position: \"absolute\",\r\n        top : \"191px\",\r\n        left : \"2px\"\r\n    }\r\n\r\n});\r\n\r\n\r\nexport default function ResultsTimeReport() {\r\n  const classes = useStyles();\r\n\r\n  const[current, setCurrent] = React.useState(new Date());\r\n  const [report, setReport] = React.useState({});\r\n  const [open, setOpen] = React.useState(false);\r\n\r\n  const [data, setData] = React.useState(null);\r\n\r\n  const [loading, setLoading] = React.useState(false)\r\n\r\n  const handleClose = () =>\r\n  {\r\n      setOpen(false);\r\n  }\r\n\r\n  useEffect(() => \r\n  {\r\n    const interval = setInterval(() => {  \r\n      setCurrent(new Date());\r\n    }, 30000);\r\n\r\n    return () =>\r\n    {\r\n      clearInterval(interval);\r\n    }\r\n\r\n  }, []);\r\n\r\n  useEffect( () => \r\n  {\r\n    \r\n    setLoading(true)\r\n    BookService.getTestsTimeReport().then(res =>\r\n      {\r\n        const result = [];  \r\n        setLoading(false)\r\n        if (res.data.status === 'OK')\r\n        {\r\n            setReport(res.data.result);\r\n            // console.log(res.data.result);\r\n            result.push({name: 'lessThan12', value : res.data.result.lessThan12 });\r\n            result.push({name: 'lessThan24', value : res.data.result.lessThan24 });\r\n            result.push({name: 'lessThan36', value : res.data.result.lessThan36 });\r\n         \r\n           // result.push({name: 'lessThan48', value : res.data.result.lessThan48 });\r\n            setData(result);\r\n        }   \r\n\r\n      }).catch(err =>\r\n        {\r\n          setLoading(false)\r\n          console.error(err);\r\n        });\r\n\r\n\r\n    } , [] );\r\n\r\n    const getReportLabels = () =>\r\n    {\r\n           return (\r\n\r\n                <div className={classes.ReportLabels}>\r\n                    <div className={classes.less12Label}> {`12 Hours`} </div>\r\n                    <div className={classes.less24Label}> {`24 Hours`} </div>\r\n                    <div className={classes.less36Label}> {`36 Hours`} </div>\r\n                </div>\r\n    \r\n            );\r\n    }\r\n\r\n    const getAverageLabel = () =>\r\n    {\r\n           return (\r\n\r\n                <div className={classes.AverageLabel}>\r\n                   avg = <span style={{fontSize:\"14px\"}}> {`${report.avg}`} </span> hours\r\n                </div>\r\n    \r\n            );\r\n    }\r\n\r\n    const seeMoreClicked = (event) => {\r\n        event.preventDefault();\r\n        setOpen(true);\r\n      }\r\n\r\n  return (\r\n    <React.Fragment>\r\n    \r\n    <div style={{position: \"relative\"}}>\r\n    {loading && (\r\n        <div style={{ width: \"100%\", paddingTop: \"3px\" }}>\r\n          <LinearProgress color=\"primary\" />\r\n        </div>\r\n      )}\r\n\r\n      <Title>PCR RESULTS SUMMARY</Title>\r\n\r\n      {data && (\r\n                <>\r\n\r\n                <PieChart width={250} height={150}>\r\n                    <Pie\r\n                        data={data}\r\n                        cx={170}\r\n                        cy={70}\r\n                        labelLine={false}\r\n                        label={renderCustomizedLabel}\r\n                        outerRadius={65}\r\n                        fill=\"#8884d8\"\r\n                        dataKey=\"value\"\r\n                        >\r\n                        {\r\n                            data.map((entry, index) => <Cell key={`cell-${index}`} fill={COLORS[index % COLORS.length]} />)\r\n                        }\r\n                    </Pie>\r\n                </PieChart>\r\n                \r\n\r\n                {getReportLabels()}\r\n                {getAverageLabel()}\r\n\r\n                <div className={classes.seeMore}>\r\n                            <Link color=\"primary\" href=\"#\" onClick={seeMoreClicked}>\r\n                                  See Details\r\n                            </Link>\r\n                  </div>\r\n\r\n\r\n                  <Dialog style={{padding: \"50px\"}} onClose={handleClose} aria-labelledby=\"simple-dialog-title\" open={open}>  \r\n                      <DialogTitle style={{textAlign: \"center\"}} id=\"simple-dialog-title\">PCR Results Time Report</DialogTitle>\r\n                            <DialogContent>\r\n                            <Table>\r\n                            <TableHead>\r\n                            <TableRow>\r\n                                <TableCell>Recieved in Less Than</TableCell>        \r\n                                <TableCell>Count</TableCell>\r\n                                <TableCell>Percent</TableCell>\r\n                            </TableRow>\r\n                            </TableHead>\r\n                            <TableBody>\r\n                                <TableRow key=\"row1\">\r\n                                    <TableCell>12 Hours</TableCell>\r\n                                    <TableCell>{report.lessThan12}</TableCell>\r\n                                    <TableCell>{report.lessThan12Percent} %</TableCell>\r\n                                </TableRow>\r\n                                <TableRow key=\"row2\">\r\n                                    <TableCell>24 Hours</TableCell>\r\n                                    <TableCell>{report.lessThan24}</TableCell>\r\n                                    <TableCell>{report.lessThan24Percent} %</TableCell>\r\n                                </TableRow>\r\n                                <TableRow key=\"row3\">\r\n                                    <TableCell>36 Hours</TableCell>\r\n                                    <TableCell>{report.lessThan36}</TableCell>\r\n                                    <TableCell>{report.lessThan36Percent} %</TableCell>\r\n                                </TableRow>\r\n                                <TableRow key=\"row4\">\r\n                                    <TableCell>48 Hours</TableCell>\r\n                                    <TableCell>{report.lessThan48}</TableCell>\r\n                                    <TableCell>{report.lessThan48Percent} %</TableCell>\r\n                                </TableRow>\r\n                                <TableRow key=\"row4\">\r\n                                    <TableCell style={{fontWeight:\"800\"}}>Total Results Received : </TableCell>\r\n                                    <TableCell style={{fontWeight:\"600\"}}>{report.lessThan48 + report.lessThan36 + report.lessThan24 + report.lessThan12}</TableCell>\r\n                                    <TableCell></TableCell>\r\n                                </TableRow>\r\n\r\n\r\n\r\n                            \r\n                            </TableBody>\r\n                        </Table>\r\n                            </DialogContent>\r\n                </Dialog>\r\n    \r\n\r\n\r\n\r\n                </>\r\n      )}\r\n     \r\n     </div>\r\n\r\n\r\n\r\n    </React.Fragment>\r\n  );\r\n}","import React from 'react';\r\nimport clsx from 'clsx';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport Paper from '@material-ui/core/Paper';\r\nimport Chart from './Chart';\r\nimport CurrentVisits from './CurrentVisits';\r\n\r\n\r\n\r\nimport { Tooltip } from '@material-ui/core';\r\nimport GlobalState from './../GlobalState';\r\nimport BookingView from './BookingView';\r\nimport ResultsTimeReport from './ResultsTimeReport';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n \r\n  paper: {\r\n    padding: theme.spacing(2),\r\n    display: 'flex',\r\n    overflow: 'auto',\r\n    flexDirection: 'column',\r\n  },\r\n  fixedHeight: {\r\n    height: 240,\r\n  },\r\n}));\r\n\r\nexport default function DashboardPreview() {\r\n  const classes = useStyles();\r\n  const [state, setState] = React.useContext(GlobalState);\r\n\r\n  const fixedHeightPaper = clsx(classes.paper, classes.fixedHeight);\r\n\r\n  return (\r\n        <React.Fragment>\r\n\r\n<           Grid container spacing={3}>\r\n                    {/* Chart */}\r\n                    <Grid item xs={12} md={4} lg={6}>\r\n                    <Paper className={fixedHeightPaper}>\r\n                        <Chart />\r\n                    </Paper>\r\n                    </Grid>\r\n                    {/* Tests Summary */}\r\n                    <Grid item xs={12} md={4} lg={3}>\r\n                     <Paper className={fixedHeightPaper}>\r\n                        <ResultsTimeReport />\r\n                    </Paper>\r\n                    </Grid>\r\n                    {/* Current Visits */}\r\n                    <Grid item xs={12} md={4} lg={3}>\r\n                    <Paper className={fixedHeightPaper}>\r\n                        <CurrentVisits />\r\n                    </Paper>\r\n                    </Grid>\r\n                    {/* Recent Bookings */}\r\n                    <Grid item xs={12}>\r\n                    <Paper className={classes.paper}>\r\n                        <BookingView/>\r\n                    </Paper>\r\n                    </Grid>\r\n          </Grid>\r\n        </React.Fragment>\r\n  );\r\n}","import React, {useEffect, useRef, useState} from 'react';\r\nimport { DataGrid, ROW_CLICK } from '@material-ui/data-grid';\r\nimport BookService from './services/BookService';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport { Button, Checkbox, Divider, FormControlLabel, Grid, Link, makeStyles, TextField, Tooltip } from '@material-ui/core';\r\nimport RefreshIcon from '@material-ui/icons/Refresh';\r\nimport { IconButton } from '@material-ui/core';\r\nimport LoaderSpinner from 'react-loader-spinner';\r\nimport GlobalState from './../GlobalState';\r\nimport { withStyles } from '@material-ui/core/styles';\r\n\r\nimport ToggleButton from '@material-ui/lab/ToggleButton';\r\nimport ToggleButtonGroup from '@material-ui/lab/ToggleButtonGroup';\r\nimport WbIncandescentIcon from '@material-ui/icons/WbIncandescent';\r\n\r\nimport Dialog from '@material-ui/core/Dialog';\r\nimport DialogActions from '@material-ui/core/DialogActions';\r\nimport DialogContent from '@material-ui/core/DialogContent';\r\nimport DialogContentText from '@material-ui/core/DialogContentText';\r\nimport DialogTitle from '@material-ui/core/DialogTitle';\r\nimport Draggable from 'react-draggable';\r\nimport Paper from '@material-ui/core/Paper';\r\n\r\nimport Table from '@material-ui/core/Table';\r\nimport TableBody from '@material-ui/core/TableBody';\r\nimport TableCell from '@material-ui/core/TableCell';\r\nimport TableHead from '@material-ui/core/TableHead';\r\nimport TableRow from '@material-ui/core/TableRow';\r\nimport dateformat from 'dateformat';\r\nimport ReportProblemIcon from '@material-ui/icons/ReportProblem';\r\nimport BookingDialog from './BookingDialog';\r\nimport Alert from '@material-ui/lab/Alert';\r\n\r\nimport PropTypes from 'prop-types';\r\nimport LinearProgress from '@material-ui/core/LinearProgress';\r\nimport Box from '@material-ui/core/Box';\r\n\r\nimport WarningIcon from '@material-ui/icons/Warning';\r\n\r\nimport {FormatDateFromString, RevertFormatDateFromString} from './DateFormatter';\r\nimport PDFService from './services/PDFService';\r\n\r\nvar interval;\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  title: {\r\n    marginTop: theme.spacing(0),\r\n    marginBottom: theme.spacing(1),\r\n\r\n  },\r\n  \r\n  refreshButton:{\r\n    marginLeft: theme.spacing(2),\r\n  },\r\n\r\n  checkIcon:{\r\n    color: \"green\"\r\n  },\r\n\r\n  closeIcon:{\r\n    color: \"red\"\r\n  },\r\n\r\n  RefLink: {\r\n    cursor: \"pointer\"\r\n  },\r\n\r\n  BookedLabel:{\r\n    backgroundColor: \"#606060\",\r\n    color: \"#fff\",\r\n    paddingRight: \"10px\",\r\n    paddingLeft: \"10px\"\r\n  },\r\n\r\n  PatientAttendedLabel:{\r\n    backgroundColor: \"#0066aa\",\r\n    color: \"#fff\",\r\n    paddingRight: \"15px\",\r\n    paddingLeft: \"10px\"\r\n  },\r\n\r\n  SampleTakenLabel:{\r\n    backgroundColor: \"#0066cc\",\r\n    color: \"#fff\",\r\n    paddingRight: \"40px\",\r\n    paddingLeft: \"10px\"\r\n  },\r\n\r\n  ReportSentLabel:{\r\n    backgroundColor: \"#009900\",\r\n    color: \"#fff\",\r\n    paddingRight: \"90px\",\r\n    paddingLeft: \"10px\"\r\n  },\r\n\r\n  ReportCertSentLabel:{\r\n    backgroundColor: \"#009900\",\r\n    color: \"#fff\",\r\n    paddingRight: \"68px\",\r\n    paddingLeft: \"10px\"\r\n  },\r\n\r\n  archiveButton: {\r\n\r\n  },\r\n\r\n  smartMatchButton: {\r\n    backgroundColor : \"#2f942e\",\r\n    \"&:hover\": {\r\n      background: \"green\",\r\n      color: \"#fff\"\r\n    },\r\n    textDecoration : \"none !important\",\r\n    marginRight : \"10px\"\r\n    // padding: \"10px\"  \r\n  },\r\n\r\n  infoTitle:  {\r\n    fontWeight: \"400\"\r\n  },\r\n\r\n  infoData: {\r\n    paddingLeft: \"10px\",\r\n    fontWeight: \"800\"\r\n  },\r\n\r\n  matchButton:\r\n  {\r\n    marginTop: \"30px\",\r\n    marginBottom : \"20px\",\r\n    backgroundColor : \"#2f942e\",\r\n    \"&:hover\": {\r\n      background: \"green\",\r\n      color: \"#fff\"\r\n    },\r\n    textDecoration : \"none !important\",\r\n    padding: \"10px\",\r\n    paddingLeft : \"50px\",\r\n    paddingRight: \"50px\"   \r\n  },\r\n\r\n  resendButton:\r\n  {\r\n    marginTop: \"5px\",\r\n    marginBottom : \"5px\",\r\n    backgroundColor : \"#2f942e\",\r\n    \"&:hover\": {\r\n      background: \"green\",\r\n      color: \"#fff\"\r\n    },\r\n    textDecoration : \"none !important\",\r\n    padding: \"10px\",\r\n    paddingLeft : \"50px\",\r\n    paddingRight: \"50px\"   \r\n  },\r\n\r\n  resendFilesButton:{\r\n    marginTop: \"5px\",\r\n    marginBottom : \"5px\",\r\n    backgroundColor : \"#3792ad\",\r\n    \"&:hover\": {\r\n      background: \"#2f798f\",\r\n      color: \"#fff\"\r\n    },\r\n    textDecoration : \"none !important\",\r\n    padding: \"10px\",\r\n    paddingLeft : \"50px\",\r\n    paddingRight: \"50px\"   \r\n  },\r\n\r\n  cancelButton:\r\n  {\r\n    marginBottom : \"10px\",\r\n    textDecoration : \"none !important\",\r\n    padding: \"10px\",\r\n    paddingLeft : \"90px\",\r\n    paddingRight: \"90px\"   \r\n  },\r\n\r\n  downloadPDFButton:\r\n  {\r\n    marginLeft: \"50px\"\r\n  }\r\n  \r\n  \r\n}));\r\n\r\nconst BorderLinearProgress = withStyles((theme) => ({\r\n  root: {\r\n    height: 10,\r\n    borderRadius: 5,\r\n  },\r\n  colorPrimary: {\r\n    backgroundColor: \"#cedbce\" //theme.palette.grey[theme.palette.type === 'light' ? 200 : 700],\r\n  },\r\n  bar: {\r\n    borderRadius: 5,\r\n    backgroundColor: '#2f942e',\r\n  },\r\n}))(LinearProgress);\r\nfunction LinearProgressWithLabel(props) {\r\n  return (\r\n    <Box display=\"flex\" alignItems=\"center\">\r\n      <Box width=\"100%\" mr={1}>\r\n        <BorderLinearProgress variant=\"determinate\" {...props} />\r\n      </Box>\r\n      <Box minWidth={35}>\r\n        <Typography style={{fontWeight:\"800\", color :  \"#5e855e\"  }} variant=\"body2\" color=\"textSecondary\">{`${Math.round(\r\n          props.value,\r\n        )}%`}</Typography>\r\n      </Box>\r\n    </Box>\r\n  );\r\n}\r\n\r\nLinearProgressWithLabel.propTypes = {\r\n  /**\r\n   * The value of the progress indicator for the determinate and buffer variants.\r\n   * Value between 0 and 100.\r\n   */\r\n  value: PropTypes.number.isRequired,\r\n};\r\n\r\n\r\nfunction PaperComponent(props) {\r\n  return (\r\n    <Draggable handle=\"#draggable-dialog-title\" cancel={'[class*=\"MuiDialogContent-root\"]'}>\r\n      <Paper {...props} />\r\n    </Draggable>\r\n  );\r\n}\r\n\r\nexport default function UnmatchedRecords() {\r\n  \r\n  const classes = useStyles();\r\n\r\n  const columns = [\r\n    { field: 'id', headerName: '#', width: 50 },\r\n\r\n    { field: 'testDate', headerName: 'Test Date', width: 120, valueFormatter : (params) =>\r\n      {\r\n        return FormatDateFromString(params.value);\r\n      }\r\n     },\r\n    { field: 'forename', headerName: 'Forename', width: 200 },\r\n    { field: 'surname', headerName: 'Surname', width: 200 },\r\n    { field: 'birthDate', headerName: 'D.O.B', width: 120 , valueFormatter : (params) =>\r\n    {\r\n      return FormatDateFromString(params.value);\r\n    }},\r\n    { field: '_id' , headerName:'Action', width: 500 , renderCell: (params) => {\r\n        if (selectedTab === 'unresolved')\r\n        {\r\n            return (\r\n              <React.Fragment>\r\n\r\n              <Button\r\n                    disabled = {params.value === disableId}\r\n                    type=\"button\"\r\n                    variant=\"contained\"\r\n                    color=\"primary\"\r\n                    startIcon={<WbIncandescentIcon />}\r\n                    onClick = { event => smartMatchClicked(event,params.value)}\r\n                    className={classes.smartMatchButton}\r\n                    >\r\n                    smart match\r\n              </Button>\r\n\r\n              <Button\r\n                    disabled = {params.value === disableId}\r\n                    type=\"button\"\r\n                    variant=\"contained\"\r\n                    color=\"primary\"\r\n                    onClick = { event => archiveRecord(event,params.value)}\r\n                    className={classes.archiveButton}\r\n                  >\r\n                    archive\r\n              </Button>\r\n\r\n\r\n              <Button\r\n                    disabled = {params.value === disableId}\r\n                    type=\"button\"                   \r\n                    color=\"primary\"\r\n                    onClick = { event => downloadLabReport(params.value)}\r\n                    className={classes.downloadPDFButton}\r\n                  >\r\n                    view pdf\r\n              </Button>\r\n\r\n\r\n              </React.Fragment>\r\n\r\n            );\r\n        }else\r\n        {\r\n            return (\r\n\r\n              <React.Fragment>\r\n\r\n                  <Button\r\n                        disabled = {params.value === disableId}\r\n                        type=\"button\"\r\n                        variant=\"contained\"\r\n                        color=\"primary\"\r\n                        startIcon={<WbIncandescentIcon />}\r\n                        onClick = { event => smartMatchClicked(event,params.value)}\r\n                        className={classes.smartMatchButton}\r\n                        >\r\n                        smart match\r\n                  </Button>\r\n\r\n                    <Button\r\n                    disabled = {params.value === disableId}\r\n                    type=\"button\"\r\n                    variant=\"contained\"\r\n                    color=\"primary\"\r\n                    onClick = { event => unArchiveRecord(event,params.value)}\r\n                    className={classes.archiveButton}\r\n                  >\r\n                    Undo\r\n                  </Button>\r\n\r\n                  <Button\r\n                    disabled = {params.value === disableId}\r\n                    type=\"button\"                   \r\n                    color=\"primary\"\r\n                    onClick = { event => downloadLabReport(params.value)}\r\n                    className={classes.downloadPDFButton}\r\n                  >\r\n                    view pdf\r\n                  </Button>\r\n\r\n              </React.Fragment>\r\n            );\r\n        }\r\n        \r\n    } },\r\n   \r\n  ];\r\n\r\n  const [state, setState] = React.useContext(GlobalState);  \r\n\r\n  const [data, setData] = React.useState({bookings: [] , cachedBookings: [], isFetching : false});\r\n\r\n  const [selectedRow, setSelectedRow] = React.useState(null);\r\n\r\n  const [filter,setFilter] = React.useState('');\r\n\r\n  const [refresh, setRefresh] = React.useState(false);\r\n\r\n  const [disableId, setDisableId] = React.useState(null);\r\n\r\n  const [selectedTab, setSeletedTab] = React.useState('unresolved');\r\n\r\n  const [openDialog, setOpenDialog] = React.useState(false);\r\n\r\n  const [seeDetailsDialogOpen, setSeeDetailsDialogOpen] = React.useState(false);\r\n\r\n  const [smartLinkId, setSmartLinkId] = React.useState(null);\r\n\r\n  const [smartLinkDetails, setSmartLinkDetails] = React.useState(null);\r\n\r\n  const [likelyBookings, setLikelyBookings] = React.useState(null);\r\n\r\n  const [selectedBooking, setSelectedBooking] = React.useState(null);\r\n\r\n  const [seeDetailsBooking, setSeeDetailsBooking] = React.useState(null);\r\n\r\n  const [matching, setMatching] = React.useState(false);\r\n\r\n  const [matched, setMatched] = React.useState(false);\r\n\r\n  const [sending, setSending] = React.useState(false);\r\n  const [sent, setSent] = React.useState(false);\r\n\r\n  const [sendJustToPCR, setSendJustToPCR] = React.useState(false);\r\n\r\n  const [sendingStatus, setSendingStatus] = React.useState('');\r\n\r\n  const [sendingProgress, setSendingProgress] = React.useState(10);\r\n\r\n  const [loading, setLoading] = React.useState(false)\r\n\r\n\r\n  const handleTabChanged = (event, value) => {\r\n      if (value && value.length)\r\n      {\r\n        setSeletedTab(value);\r\n      }\r\n   \r\n  };\r\n\r\n  const handleCloseDialog = () =>\r\n  {\r\n    setOpenDialog(false);\r\n    setTimeout(() => {\r\n      setSmartLinkId(null);\r\n      setSmartLinkDetails(null);\r\n      setLikelyBookings(null);\r\n      setSelectedBooking(null);\r\n      setMatched(false);\r\n      setMatching(false);\r\n      setSendingStatus(null);\r\n      setSending(false);\r\n      setSent(false);\r\n      clearInterval(interval);\r\n      setSendJustToPCR(false);\r\n    }, 100);\r\n  }\r\n\r\n  const handleCloseSeeDetaisDialog = () =>\r\n  {\r\n    setSeeDetailsDialogOpen(false);\r\n    setTimeout(() => {\r\n      setSeeDetailsBooking(null);\r\n    }, 500);\r\n  }\r\n\r\n  const seeDetailsClicked = (event, row) =>\r\n  {\r\n    setSeeDetailsBooking(row);\r\n    setSeeDetailsDialogOpen(true);\r\n  }\r\n\r\n  const smartMatchClicked = (event, id) =>\r\n  {\r\n    setSmartLinkId(id);\r\n    setOpenDialog(true);\r\n    findBestMatches(id);\r\n  }\r\n\r\n  useEffect(() => {\r\n    if (smartLinkId)\r\n    {\r\n      findBestMatches(smartLinkId);\r\n      // console.log('refrshing....');\r\n\r\n    }\r\n\r\n\r\n  }, [state.bookingDialogDataChanged]);\r\n\r\n  const findBestMatches = (id) =>\r\n  {\r\n    BookService.getLinkDetails(id).then( res => {\r\n      setSmartLinkDetails(res.data);\r\n      console.log(res.data);\r\n    }).catch( err =>\r\n      {\r\n        console.log(err);\r\n      });\r\n\r\n    BookService.findBestMatches(id).then( res => {\r\n      setLikelyBookings(res.data.matchedBookings);\r\n    }).catch( err => {\r\n      console.log(err);\r\n      setLikelyBookings([]);\r\n    })\r\n  }\r\n\r\n  const archiveRecord = (event, id) =>\r\n  {\r\n      if (disableId)\r\n      {\r\n        return;\r\n      }\r\n        setDisableId(id);\r\n        \r\n        BookService.archiveRecord(id).then(\r\n            (res) => {\r\n                setDisableId(null);\r\n                setRefresh(!refresh);\r\n            }\r\n        ).catch( (err) => {\r\n            setDisableId(null);\r\n        })\r\n  }\r\n\r\n  const unArchiveRecord = (event, id) =>\r\n  {\r\n      if (disableId)\r\n      {\r\n        return;\r\n      }\r\n        setDisableId(id);\r\n        \r\n        BookService.unArchiveRecord(id).then(\r\n            (res) => {\r\n                setDisableId(null);\r\n                setRefresh(!refresh);\r\n            }\r\n        ).catch( (err) => {\r\n            setDisableId(null);\r\n        })\r\n  }\r\n\r\n\r\n  const lastPromise = useRef();\r\n\r\n  useEffect( () => {\r\n\r\n            var api = BookService.getUnmatchedRecords;\r\n            if (selectedTab === 'archived')\r\n            {\r\n                api = BookService.getUnmatchedRecordsArchived;\r\n            }\r\n            \r\n            setLoading(true)\r\n            \r\n            setData({bookings: [], cachedBookings: [], isFetching: true});\r\n            const currentPromise = api().then( (res) =>{\r\n              \r\n              for (var i=0; i < res.data.length; i++)\r\n              {\r\n                res.data[i] = {...res.data[i], id : i + 1}\r\n              }  \r\n              \r\n              return res.data;\r\n            })\r\n\r\n            lastPromise.current = currentPromise;\r\n\r\n            currentPromise.then(\r\n              result => {\r\n                if (currentPromise === lastPromise.current) {\r\n                  setLoading(false)\r\n                  setData({bookings: result, cachedBookings: [...result], isFetching: false});\r\n                }\r\n              },\r\n              e => {\r\n                if (currentPromise === lastPromise.current) {\r\n                    setLoading(false)\r\n                    console.log(e);\r\n                    setData({bookings: data.bookings, cachedBookings: data.cachedBookings, isFetching: false});\r\n                }\r\n              });\r\n        },\r\n        [refresh, selectedTab]);\r\n\r\n\r\n\r\n  useEffect( () => {\r\n\r\n        if (filter && filter.trim().length > 0)\r\n        {\r\n          var filteredData = data.cachedBookings.filter( (element) => {\r\n\r\n            return (element.forename.toLowerCase().indexOf(filter.toLowerCase()) >= 0) ||\r\n                   (element.surname.toLowerCase().indexOf(filter.toLowerCase()) >= 0) \r\n            ;\r\n  \r\n          });\r\n  \r\n  \r\n          setData({bookings: filteredData, cachedBookings: data.cachedBookings, isFetching: false});\r\n        }else\r\n        {\r\n          setData({bookings: [...data.cachedBookings], cachedBookings: data.cachedBookings, isFetching: false});\r\n        }\r\n      },\r\n      [filter]);\r\n\r\n\r\n\r\n\r\n\r\n\r\n  const refreshClicked = (event) =>{\r\n    setFilter('');\r\n    setRefresh(!refresh);\r\n\r\n  }\r\n\r\n  const filterChanged = (event) =>{\r\n    setFilter(event.target.value);\r\n  }\r\n\r\n  const handleSelectionChanged = (newSelection) =>\r\n  {\r\n    if (newSelection.length > 0){\r\n      setSelectedRow(newSelection.rows[0]);\r\n    }\r\n  }\r\n\r\n  const handleCheckChanged = (event, row) =>\r\n  {\r\n    if (event.target.checked)\r\n    {\r\n      setSelectedBooking(row);\r\n    }\r\n    else\r\n    {\r\n      setSelectedBooking(null);\r\n    }\r\n  }\r\n\r\n  const matchRecords = (event) => {\r\n\r\n    setMatching(true);\r\n\r\n    BookService.getBookingById(selectedBooking._id).then(res => {\r\n      setSelectedBooking(res.data);\r\n    });\r\n\r\n    BookService.matchRecords(selectedBooking._id, smartLinkId).then (res => {\r\n\r\n      if (res.data.status === 'OK'){\r\n        setMatching(false);\r\n        setMatched(true);\r\n      }\r\n\r\n    }).catch(err =>\r\n      {\r\n        console.log(err);\r\n      });\r\n  }\r\n\r\n  const getProgress = (status) =>\r\n  {\r\n    console.log(`status : ${status}`);\r\n\r\n    if (status === 'downloadFailed')\r\n      return 10 ;\r\n    else if (status === 'downloading') \r\n      return 30 ;  \r\n    else if (status === 'downloadSuccess') \r\n      return 70 ;\r\n    else if (status === 'sent')\r\n      return 100;   \r\n    else\r\n      return 0;\r\n\r\n  }\r\n\r\n  useEffect( () => {\r\n\r\n    setSendingProgress((prevProgress) => (prevProgress >= 100 ? 100 : getProgress(sendingStatus)));\r\n\r\n  }, [sendingStatus]);\r\n\r\n  const resendFilesClicked = (event) =>\r\n  {\r\n    setSending(true);\r\n    setSendingProgress(0);\r\n    setSendingStatus('downloadFailed');\r\n    setSendJustToPCR(true);\r\n\r\n\r\n    BookService.regenerateFiles(smartLinkId).then( res => {\r\n\r\n      interval = setInterval(() => {\r\n             \r\n       // setProgress(sendingCounter);\r\n\r\n       // setProgress(getProgress(sendingStatus));\r\n\r\n       BookService.getLinkDetails(smartLinkId).then( res => {\r\n \r\n         setSendingStatus(res.data.status);\r\n \r\n         if (res.data.status === 'sent')\r\n         {\r\n           setSending(false);\r\n           setSent(true);\r\n           setRefresh(!refresh);\r\n           clearInterval(interval);\r\n         }\r\n       });\r\n \r\n     }, 1000);\r\n\r\n   }).catch(err => {\r\n     console.log(err);\r\n     setSending(false);\r\n   });\r\n\r\n\r\n  }\r\n \r\n  const resendEmailsClicked = (event) => {\r\n    setSending(true);\r\n    setSendingProgress(0);\r\n    setSendingStatus('downloadFailed');\r\n \r\n\r\n    BookService.resendEmails(smartLinkId).then( res => {\r\n\r\n       interval = setInterval(() => {\r\n        \r\n       \r\n\r\n        // setProgress(sendingCounter);\r\n\r\n        // setProgress(getProgress(sendingStatus));\r\n\r\n        BookService.getLinkDetails(smartLinkId).then( res => {\r\n  \r\n          setSendingStatus(res.data.status);\r\n  \r\n          if (res.data.status === 'sent')\r\n          {\r\n            setSending(false);\r\n            setSent(true);\r\n            setRefresh(!refresh);\r\n            clearInterval(interval);\r\n          }\r\n        });\r\n  \r\n      }, 1000);\r\n\r\n    }).catch(err => {\r\n      console.log(err);\r\n      setSending(false);\r\n    });\r\n\r\n  \r\n\r\n  }\r\n\r\n  const cancelResendEmailsClicked = (event) => {\r\n    setMatched(false);\r\n  }\r\n\r\n  const downloadLabReport = (id) =>\r\n  {\r\n       PDFService.downloadPdfLabReport(id).then( (res) => \r\n       {       \r\n         const file = new Blob(\r\n           [res.data], \r\n           {type: 'application/pdf'});\r\n\r\n         const fileURL = URL.createObjectURL(file);   \r\n         window.open(fileURL, \"_blank\");\r\n\r\n       \r\n\r\n       }).catch( (err) =>\r\n       {\r\n           console.log(err);\r\n       });\r\n  }\r\n\r\n\r\n  return (\r\n    <React.Fragment>\r\n\r\n      {loading && (\r\n        <div style={{ width: \"100%\", paddingTop: \"3px\" }}>\r\n          <LinearProgress color=\"primary\" />\r\n        </div>\r\n      )}\r\n\r\n      <Grid\r\n        container\r\n        direction=\"row\"\r\n        justify=\"space-between\"\r\n        alignItems=\"flex-end\"\r\n      >\r\n        <Grid item md={5}>\r\n            <div style={{textAlign:\"left\", paddingLeft:\"10px\"}}>\r\n                <Grid container direction=\"row\" justify=\"flex-start\" alignItems=\"center\">\r\n                        <Grid item>\r\n                                <span style={{paddingRight: \"15px\", color: \"#555\"}}> <WarningIcon style={{fontSize:\"2.2rem\"}}/> </span>\r\n                        </Grid>\r\n                        <Grid item>\r\n                              <span style={{fontSize: '1.4rem', fontWeight:\"600\", color: \"#444\"}}> Unmatched Records </span>\r\n                        </Grid>\r\n                        <Grid item>\r\n                            <Tooltip title=\"Refresh\" placement=\"right\">\r\n                                <IconButton\r\n                                  color=\"primary\"\r\n                                  className={classes.refreshButton}\r\n                                  onClick={refreshClicked}\r\n                                >\r\n                                  <RefreshIcon />\r\n                                </IconButton>\r\n                            </Tooltip>\r\n                        </Grid>\r\n                  </Grid>\r\n                </div>\r\n        </Grid>\r\n\r\n        <Grid item md={3}>\r\n          <ToggleButtonGroup\r\n            value={selectedTab}\r\n            style={{ marginBottom: \"10px\" }}\r\n            exclusive\r\n            onChange={handleTabChanged}\r\n            aria-label=\"text alignment\"\r\n          >\r\n            <ToggleButton value=\"unresolved\" aria-label=\"left aligned\">\r\n              UnResolved\r\n            </ToggleButton>\r\n            <ToggleButton value=\"archived\" aria-label=\"centered\">\r\n              Archived\r\n            </ToggleButton>\r\n          </ToggleButtonGroup>\r\n        </Grid>\r\n\r\n        <Grid item md={3}>\r\n          <TextField\r\n            variant=\"standard\"\r\n            value={filter}\r\n            onChange={filterChanged}\r\n            margin=\"normal\"\r\n            size=\"small\"\r\n            id=\"filter\"\r\n            label=\"Filter\"\r\n            name=\"filter\"\r\n            autoComplete=\"off\"\r\n          />\r\n        </Grid>\r\n      </Grid>\r\n\r\n      <div style={{ height: 700, width: \"100%\" }}>\r\n        <DataGrid\r\n          rows={data.bookings}\r\n          columns={columns}\r\n          autoPageSize\r\n          onSelectionChange={handleSelectionChanged}\r\n        />\r\n      </div>\r\n\r\n      <Dialog\r\n        maxWidth=\"lg\"\r\n        open={openDialog}\r\n        onClose={handleCloseDialog}\r\n        PaperComponent={PaperComponent}\r\n        aria-labelledby=\"form-dialog-title\"\r\n      >\r\n        <DialogTitle id=\"draggable-dialog-title\">\r\n          <Grid\r\n            container\r\n            spacing={2}\r\n            direction=\"row\"\r\n            justify=\"center\"\r\n            alignItems=\"center\"\r\n          >\r\n            <Grid item>\r\n              <WbIncandescentIcon\r\n                style={{ color: \"#2f942e\", fontSize: \"2rem\" }}\r\n              />\r\n            </Grid>\r\n\r\n            <Grid item>\r\n              <div\r\n                style={{\r\n                  color: \"#2f942e\",\r\n                  paddingBottom: \"12px\",\r\n                  fontWeight: \"800\",\r\n                }}\r\n              >\r\n                {\" \"}\r\n                SMART MATCH{\" \"}\r\n              </div>\r\n            </Grid>\r\n          </Grid>\r\n\r\n          <Divider />\r\n        </DialogTitle>\r\n        <DialogContent>\r\n          <div\r\n            style={{\r\n              height: \"600px\",\r\n              // width: \"1200px\",\r\n            }}\r\n          >\r\n            {(!likelyBookings || !smartLinkDetails) && (\r\n              <React.Fragment>\r\n                <Grid\r\n                  container\r\n                  direction=\"column\"\r\n                  justify=\"center\"\r\n                  alignItems=\"center\"\r\n                  spacing={2}\r\n                >\r\n                  <Grid item>\r\n                    <LoaderSpinner\r\n                      style={{ marginTop: \"170px\" }}\r\n                      type=\"Grid\"\r\n                      color=\"#2f942e\"\r\n                      height={100}\r\n                      width={100}\r\n                      timeout={0} //3 secs\r\n                    />\r\n                  </Grid>\r\n                  <Grid item>\r\n                    <div\r\n                      style={{\r\n                        color: \"#2f942e\",\r\n                        paddingBottom: \"12px\",\r\n                        fontWeight: \"800\",\r\n                      }}\r\n                    >\r\n                      {\" \"}\r\n                      SEARCHING ...{\" \"}\r\n                    </div>\r\n                  </Grid>\r\n                </Grid>\r\n              </React.Fragment>\r\n            )}\r\n\r\n            {likelyBookings && likelyBookings.length === 0 && (\r\n              <React.Fragment>\r\n                <Grid\r\n                  container\r\n                  direction=\"column\"\r\n                  justify=\"center\"\r\n                  alignItems=\"center\"\r\n                  spacing={2}\r\n                >\r\n                  <Grid item>\r\n                    <div\r\n                      style={{\r\n                        color: \"#2f942e\",\r\n                        paddingBottom: \"12px\",\r\n                        fontWeight: \"800\",\r\n                        marginTop: \"230px\",\r\n                      }}\r\n                    >\r\n                      {\" \"}\r\n                      SORRY, NO RECORDS FOUND !{\" \"}\r\n                    </div>\r\n                  </Grid>\r\n                </Grid>\r\n              </React.Fragment>\r\n            )}\r\n\r\n            {likelyBookings && smartLinkDetails && likelyBookings.length > 0 && (\r\n              <React.Fragment>\r\n                <Grid\r\n                  container\r\n                  direction=\"column\"\r\n                  justify=\"flex-start\"\r\n                  alignItems=\"stretch\"\r\n                  spacing={2}\r\n                >\r\n                  <Grid item>\r\n                    <div\r\n                      style={{\r\n                        fontSize: \"1.1rem\",\r\n                        fontWeight: \"600\",\r\n                        color: \"#2f942e\",\r\n                        marginBottom: \"15px\",\r\n                      }}\r\n                    >\r\n                      {\" \"}\r\n                      LAB RECORD :\r\n                    </div>\r\n\r\n                    <Grid\r\n                      style={{ paddingLeft: \"20px\", paddingBottom: \"20px\" }}\r\n                      container\r\n                      direction=\"row\"\r\n                      justify=\"flex-start\"\r\n                      alignItems=\"flex-start\"\r\n                      spacing={4}\r\n                    >\r\n                      <Grid item>\r\n                        <span className={classes.infoTitle}>Forename:</span>\r\n                        <span className={classes.infoData}>\r\n                          {smartLinkDetails.forename}\r\n                        </span>\r\n                      </Grid>\r\n\r\n                      <Grid item>\r\n                        <span className={classes.infoTitle}>Surname:</span>\r\n                        <span className={classes.infoData}>\r\n                          {smartLinkDetails.surname}\r\n                        </span>\r\n                      </Grid>\r\n\r\n                      <Grid item>\r\n                        <span className={classes.infoTitle}>D.O.B:</span>\r\n                        <span className={classes.infoData}>\r\n                          {FormatDateFromString(smartLinkDetails.birthDate)}\r\n                        </span>\r\n                      </Grid>\r\n\r\n                      <Grid item>\r\n                        <span className={classes.infoTitle}>Test Date:</span>\r\n                        <span className={classes.infoData}>\r\n                          {FormatDateFromString(smartLinkDetails.testDate)}\r\n                        </span>\r\n                      </Grid>\r\n                    </Grid>\r\n\r\n                    <Divider />\r\n                  </Grid>\r\n\r\n                  <Grid item>\r\n                    <div\r\n                      style={{\r\n                        fontSize: \"1.1rem\",\r\n                        fontWeight: \"600\",\r\n                        color: \"#2f942e\",\r\n                        marginBottom: \"15px\",\r\n                      }}\r\n                    >\r\n                      {\" \"}\r\n                      BEST MATCHES :\r\n                    </div>\r\n                  </Grid>\r\n\r\n                  <Grid item>\r\n                    <Table size=\"small\">\r\n                      <TableHead>\r\n                        <TableRow>\r\n                          <TableCell>Select</TableCell>\r\n                          <TableCell>Match</TableCell>\r\n                          <TableCell>Forename</TableCell>\r\n                          <TableCell>Surname</TableCell>\r\n                          <TableCell>D.O.B</TableCell>\r\n                          <TableCell>Email</TableCell>\r\n                          <TableCell>Test Date</TableCell>\r\n                          <TableCell></TableCell>\r\n                        </TableRow>\r\n                      </TableHead>\r\n                      <TableBody>\r\n                        {likelyBookings.map((row) => (\r\n                          <TableRow key={row._id}>\r\n                            <TableCell>\r\n                              <Tooltip\r\n                                title={\r\n                                  row.birthDate !== smartLinkDetails.birthDate\r\n                                    ? '\"D.O.B\" DOES NOT MATCH THE LAB REPORT ! PLEASE MAKE SURE \"D.O.B\" OF THE SELECTED BOOKING IS CORRECT !'\r\n                                    : \"\"\r\n                                }\r\n                              >\r\n                                <FormControlLabel\r\n                                  control={\r\n                                    <Checkbox\r\n                                      checked={\r\n                                        selectedBooking &&\r\n                                        selectedBooking._id === row._id\r\n                                      }\r\n                                      disabled={\r\n                                        matched || matching\r\n                                      }\r\n                                      onChange={(event) =>\r\n                                        handleCheckChanged(event, row)\r\n                                      }\r\n                                      name=\"checkedA\"\r\n                                    />\r\n                                  }\r\n                                  label=\"\"\r\n                                />\r\n                              </Tooltip>\r\n                            </TableCell>\r\n                            <TableCell\r\n                              style={{\r\n                                fontWeight: \"800\",\r\n                                color: \"#2f942e\",\r\n                                fontSize: \"1.1rem\",\r\n                              }}\r\n                            >{`${row.likelihood} %`}</TableCell>\r\n                            <TableCell\r\n                              style={\r\n                                row.forenameCapital ===\r\n                                smartLinkDetails.forename\r\n                                  ? { fontWeight: \"800\", color: \"#2f942e\" }\r\n                                  : { fontWeight: \"800\", color: \"#ff871f\" }\r\n                              }\r\n                            >\r\n                              {row.forenameCapital}\r\n                            </TableCell>\r\n                            <TableCell\r\n                              style={\r\n                                row.surnameCapital === smartLinkDetails.surname\r\n                                  ? { fontWeight: \"800\", color: \"#2f942e\" }\r\n                                  : { fontWeight: \"800\", color: \"#ff871f\" }\r\n                              }\r\n                            >\r\n                              {row.surnameCapital}\r\n                            </TableCell>\r\n                            <TableCell\r\n                              style={\r\n                                row.birthDate === smartLinkDetails.birthDate\r\n                                  ? { fontWeight: \"800\", color: \"#2f942e\" }\r\n                                  : { fontWeight: \"800\", color: \"red\" }\r\n                              }\r\n                            >\r\n                              <Grid\r\n                                container\r\n                                direction=\"column\"\r\n                                justify=\"center\"\r\n                                alignItems=\"center\"\r\n                                spacing={1}\r\n                              >\r\n                                <Grid item>\r\n                                  {row.birthDate !==\r\n                                    smartLinkDetails.birthDate && (\r\n                                    <span style={{ textAlign: \"center\" }}>\r\n                                      <ReportProblemIcon />\r\n                                    </span>\r\n                                  )}\r\n                                </Grid>\r\n                                {FormatDateFromString(row.birthDate)}\r\n                                <Grid item></Grid>\r\n                              </Grid>\r\n                            </TableCell>\r\n                            <TableCell>{row.email?.toUpperCase()}</TableCell>\r\n                            <TableCell\r\n                              style={\r\n                                dateformat(\r\n                                  row.samplingTimeStamp,\r\n                                  \"yyyy-mm-dd\"\r\n                                ) === smartLinkDetails.testDate\r\n                                  ? { fontWeight: \"800\", color: \"#2f942e\" }\r\n                                  : { fontWeight: \"800\", color: \"red\" }\r\n                              }\r\n                            >\r\n                              {FormatDateFromString(dateformat(row.samplingTimeStamp, \"yyyy-mm-dd\"))}\r\n                            </TableCell>\r\n                            <TableCell>\r\n                              <Button\r\n                                color=\"primary\"\r\n                                disabled = {sending}\r\n                                onClick={(event) =>\r\n                                  seeDetailsClicked(event, row)\r\n                                }\r\n                              >\r\n                                See Details\r\n                              </Button>\r\n                            </TableCell>\r\n                          </TableRow>\r\n                        ))}\r\n                      </TableBody>\r\n                    </Table>\r\n                  </Grid>\r\n                </Grid>\r\n\r\n                <Grid\r\n                  container\r\n                  direction=\"column\"\r\n                  justify=\"center\"\r\n                  spacing = {1}\r\n                  alignItems=\"center\"\r\n                >\r\n\r\n                {!matched && (\r\n                  <React.Fragment>\r\n                        <Grid item>\r\n                          <Button\r\n                            disabled = {!selectedBooking || matching}\r\n                            className={classes.matchButton}\r\n                            variant=\"contained\"\r\n                            color=\"primary\"\r\n                            onClick = {matchRecords}\r\n                          >\r\n                            GO Match THE Records\r\n                          </Button>\r\n                        </Grid>\r\n\r\n                        {!selectedBooking && (\r\n                            <Grid item>\r\n                              <Alert severity=\"warning\">No Record is Selected ! — Please select a record you think it is a match.</Alert>\r\n                          </Grid>\r\n                        )}\r\n\r\n                  </React.Fragment>\r\n                )}\r\n\r\n                {matched && !sent && !sending && (\r\n                  <React.Fragment>\r\n\r\n                    <Grid item>\r\n            \r\n                         <Alert style={{marginTop:\"10px\", paddingLeft:\"50px\", paddingRight:\"50px\"}} severity=\"success\"> Success — The Records are Matched Now !</Alert>\r\n                    \r\n                    </Grid>\r\n\r\n                    <Grid item>\r\n\r\n                      <div style={{paddingTop:\"5px\", fontSize:\"1rem\", fontWeight: \"500\", color: \"#555\"}}>\r\n                         Do you want to Resend the LAB Report {selectedBooking.certificate ? ' and Certificate' : ''}  Now?\r\n                      </div>\r\n\r\n                    </Grid>\r\n\r\n                    <Grid item>\r\n                          <Button\r\n                            disabled = {sending || sent}\r\n                            className={classes.resendButton}\r\n                            variant=\"contained\"\r\n                            color=\"primary\"\r\n                            onClick = {resendEmailsClicked}\r\n                          >\r\n                            YES ! RESEND THE EMAILS\r\n                          </Button>\r\n                    </Grid>\r\n\r\n                    <Grid item>\r\n                          <Button\r\n                            disabled = {sending || sent}\r\n                            className={classes.cancelButton}\r\n                            variant=\"contained\"\r\n                            color=\"default\"\r\n                            onClick = {cancelResendEmailsClicked}\r\n                          >\r\n                            NO ! NOT NOW\r\n                          </Button>\r\n                    </Grid>\r\n\r\n                    \r\n                    <Grid item>\r\n                          <Button\r\n                            disabled = {sending || sent}\r\n                            className={classes.resendFilesButton}\r\n                            variant=\"contained\"\r\n                            color=\"primary\"\r\n                            onClick = {resendFilesClicked}\r\n                          >\r\n                            Just Generate The Files and send to pcrresults@medicalexpressclinic.co.uk\r\n                          </Button>\r\n                    </Grid>\r\n\r\n                    <Grid item>\r\n            \r\n                         <Alert style={{marginTop:\"10px\",  paddingLeft:\"50px\", paddingRight:\"50px\"}} severity=\"warning\">\r\n                            Caution! — The LAB Report and Certificate will be Sent According to the Record you have Selected !\r\n                          </Alert>\r\n       \r\n                   </Grid>\r\n\r\n\r\n\r\n                  </React.Fragment>\r\n                )}\r\n\r\n                        {matched && (sending || sent) && ( \r\n                          <Grid item>\r\n\r\n                            <div style={{paddingTop: \"50px\", color: \"#2f942e\" , fontWeight:\"600\", fontSize: \"1rem\"}}>\r\n                                 {sending && !sent && (\r\n                                   'Sending ...'\r\n                                 )}\r\n\r\n                                 {sent && !sendJustToPCR && (\r\n                                     <Alert style={{marginTop:\"10px\", paddingLeft:\"50px\", paddingRight:\"50px\"}} severity=\"success\">\r\n                                          Success! — The LAB Report {selectedBooking.certificate? ' and Certificate ': ' ' }  Successfully Sent.\r\n                                     </Alert>\r\n                                 )}\r\n\r\n                                {sent && sendJustToPCR && (\r\n                                     <Alert style={{marginTop:\"10px\", paddingLeft:\"50px\", paddingRight:\"50px\"}} severity=\"success\">\r\n                                          Success! — The LAB Report {selectedBooking.certificate? ' and Certificate ': ' ' }  Successfully Sent Just to pcrresults@medicalexpressclinic.co.uk .\r\n                                     </Alert>\r\n                                 )}\r\n\r\n\r\n\r\n                                 \r\n                            </div>\r\n                            \r\n                          </Grid>\r\n                          \r\n                        )}\r\n\r\n                </Grid>\r\n              </React.Fragment>\r\n            )}\r\n\r\n\r\n              {matched && (sending || sent) && (\r\n                  <React.Fragment>\r\n\r\n                      <div style={{marginTop:\"10px\", width:\"50%\", marginLeft: \"27%\"}}>\r\n                        \r\n                           <LinearProgressWithLabel variant=\"determinate\" color=\"primary\"  value={sendingProgress} />     \r\n\r\n                      </div>\r\n\r\n                      <div style={{paddingTop: \"30px\", color: \"#2f942e\" , fontWeight:\"600\", fontSize: \"1rem\",  marginLeft: \"45%\"}}>\r\n                            {sending && !sent && (\r\n                                   'PLEASE WAIT ...'\r\n                                 )}     \r\n                                  \r\n                    </div>\r\n\r\n                  </React.Fragment>\r\n                )}\r\n\r\n\r\n          </div>\r\n\r\n          <BookingDialog\r\n            booking={seeDetailsBooking}\r\n            open={seeDetailsDialogOpen}\r\n            onClose={handleCloseSeeDetaisDialog}\r\n            deleteButtonDisabled={true}\r\n          />\r\n        </DialogContent>\r\n      </Dialog>\r\n    </React.Fragment>\r\n  );\r\n}","import React, { useEffect, useState } from 'react';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport PropTypes from 'prop-types';\r\nimport dateformat from 'dateformat';\r\nimport BookService from '../services/BookService';\r\n\r\nimport CircularProgress from '@material-ui/core/CircularProgress';\r\n\r\nimport GlobalState from '../../GlobalState';\r\n\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n\r\n    Container: {\r\n        width: \"100%\",\r\n        paddingTop: \"70%\",\r\n        position: \"relative\",\r\n        backgroundColor: \"#fff\"\r\n    },\r\n\r\n    ContainerPast: {\r\n        width: \"100%\",\r\n        paddingTop: \"70%\",\r\n        position: \"relative\",\r\n        backgroundColor: \"#fafafa\"\r\n    },\r\n    \r\n    DayLabel: {\r\n        position: \"absolute\",\r\n        top: \"5px\",\r\n        right: \"5px\",\r\n        color: \"#555\",\r\n        fontSize: \"1rem\"\r\n    },\r\n\r\n    DayLabelToday: {\r\n        position: \"absolute\",\r\n        top: \"5px\",\r\n        right: \"5px\",\r\n        backgroundColor: \"#1a73e8\",\r\n        color: \"#fff\",\r\n        fontSize: \"1rem\",\r\n        borderRadius: \"50%\",\r\n        padding: \"5px\",\r\n        lineHight: \"35px\",\r\n        minWidth: \"35px\"\r\n    },\r\n\r\n    DayLabelDisabled: {\r\n        position: \"absolute\",\r\n        top: \"5px\",\r\n        right: \"5px\",\r\n        color: \"#ddd\",\r\n        fontSize: \"1rem\"\r\n    },\r\n\r\n    BookingCountLabel: {\r\n        position: \"absolute\",\r\n        top: \"35%\",\r\n        left: \"40%\",\r\n        color: \"#3f51b5\",\r\n        backgroundColor: \"#ebedf7\",\r\n        fontSize: \"16px\",\r\n        fontWeight: \"600\",\r\n        padding: \"10px\",\r\n        borderRadius: \"50%\",\r\n        minWidth: \"40px\",\r\n        lineHight: \"40px\",\r\n        cursor: \"pointer\",\r\n        textAlign: \"center\"\r\n    },\r\n\r\n    BookingCountLabelBusy: {\r\n        position: \"absolute\",\r\n        top: \"35%\",\r\n        left: \"40%\",\r\n        color: \"#b00000\",\r\n        backgroundColor: \"#fce6e6\",\r\n        fontSize: \"16px\",\r\n        fontWeight: \"600\",\r\n        padding: \"10px\",\r\n        borderRadius: \"50%\",\r\n        minWidth: \"40px\",\r\n        cursor: \"pointer\"\r\n    },\r\n\r\n    LoadingProgress: {\r\n        position: \"absolute\",\r\n        top: \"40%\",\r\n        left: \"40%\",\r\n      },\r\n\r\n      BookingCountGauge: {\r\n        position: \"absolute\",\r\n        bottom: \"5%\",\r\n        left: \"8%\",\r\n        width : \"8%\",\r\n        height: \"85%\"\r\n    },\r\n\r\n  }));\r\n\r\nconst MAX_BOOKING_COUNT = 100;  \r\n\r\nconst MonthViewCell = ({key, cellIndex, month, daysInMonth, dayClicked}) => {\r\n    const classes = useStyles();\r\n\r\n    const [state, setState] = React.useContext(GlobalState);\r\n\r\n    const [dateStr, setDateStr] = React.useState('');\r\n\r\n    const [cellDate, setCellDate] = React.useState(new Date());\r\n\r\n    const [bookingsCount, setBookingsCount] = React.useState(-1);\r\n\r\n    const [disableDay, setDisableDay] = React.useState(false);\r\n\r\n    const [isPast, setIsPast] = React.useState(false);\r\n\r\n    useEffect( () => {\r\n\r\n        if (cellIndex <= daysInMonth.length)\r\n        {\r\n            const date = daysInMonth[cellIndex - 1];\r\n            const dateStr = dateformat(date, 'yyyy-mm-dd');\r\n            setDateStr(dateStr);\r\n            setCellDate(date);\r\n            setDisableDay(date.getMonth() !== month - 1);\r\n            const todayStr = dateformat(new Date(), 'yyyy-mm-dd');\r\n            setIsPast(dateStr < todayStr);\r\n        }\r\n        else\r\n        {\r\n            const day = cellIndex - daysInMonth.length;\r\n            const date = new Date((daysInMonth[daysInMonth.length - 1].getTime() + ( day * 86400000)));\r\n            const dateStr = dateformat(date, 'yyyy-mm-dd');\r\n            setDateStr(dateStr);\r\n            setCellDate(date);\r\n            setDisableDay(true);\r\n            const todayStr = dateformat(new Date(), 'yyyy-mm-dd');\r\n            setIsPast(dateStr < todayStr);\r\n        }\r\n\r\n    }, [cellIndex, month, daysInMonth]);\r\n\r\n    useEffect ( () => {\r\n\r\n        const fecthData = async () =>\r\n        {\r\n            if (!dateStr || dateStr.length <= 0)\r\n            {\r\n                return;\r\n            }\r\n        \r\n            if (disableDay)\r\n            {\r\n                setBookingsCount(-2);\r\n                return;\r\n            }\r\n\r\n            setBookingsCount(-1);\r\n\r\n            var res = state.AdminCalendarCache?.find(record => record.method === 'getBookingsCountByDateStr' && record.query === dateStr)?.res;\r\n\r\n            if (!res)\r\n            {\r\n                res = await BookService.getAllBookingsCountByDateStr(dateStr);\r\n                setState(state => ({...state, AdminCalendarCache : [...state.AdminCalendarCache, {method: 'getBookingsCountByDateStr' , query : dateStr, res: res}]}));\r\n            }\r\n        \r\n            if (res.data.count >= 0)\r\n            {\r\n                setBookingsCount(res.data.count);\r\n            }\r\n\r\n        }\r\n\r\n      fecthData();\r\n\r\n    }, [dateStr]);\r\n\r\n    const getDayLabel = (_cellIndex , _month , _daysInMonth) =>\r\n    {\r\n        var date = null;\r\n        var disabled = false;\r\n        var day = -1;\r\n\r\n    \r\n\r\n        if (_cellIndex <= _daysInMonth.length)\r\n        {\r\n            date = _daysInMonth[_cellIndex - 1];\r\n            day = date.getDate();\r\n            if (date.getMonth() !== _month - 1)\r\n            {\r\n                disabled = true;\r\n            }\r\n        }\r\n        else\r\n        {\r\n            const _day = _cellIndex - _daysInMonth.length;\r\n            const date = new Date((_daysInMonth[_daysInMonth.length - 1].getTime() + ( _day * 86400000)));\r\n            day = date.getDate();\r\n            disabled = true;\r\n        }\r\n\r\n        const isToday = dateformat(new Date(),'yyyy-mm-dd') === dateformat(date, 'yyyy-mm-dd');\r\n\r\n        return (\r\n            <span className={(disabled) ? classes.DayLabelDisabled : isToday ? classes.DayLabelToday : classes.DayLabel}>\r\n                 {day > 0 ? `${day}` : ''}\r\n             </span>\r\n        );\r\n    }\r\n\r\n    const getBookingsCountLabel = (_bookingsCount) =>\r\n    {\r\n        if (_bookingsCount === -1)\r\n        {\r\n            return (\r\n                <div className={classes.LoadingProgress}>\r\n                      <CircularProgress disableShrink  />\r\n                </div>\r\n            );  \r\n        }\r\n        else if (_bookingsCount > 0 )\r\n        {\r\n            if (_bookingsCount >= MAX_BOOKING_COUNT / 2)\r\n            {\r\n                return (\r\n                    <div onClick={(event => dayClicked(event,cellDate))} className={classes.BookingCountLabelBusy}>\r\n                        {_bookingsCount}\r\n                    </div>\r\n                );\r\n            }\r\n            else\r\n            {\r\n                return (\r\n                    <div onClick={(event => dayClicked(event,cellDate))} className={classes.BookingCountLabel}>\r\n                          {_bookingsCount < 10 ?  ` ${_bookingsCount}` : `${_bookingsCount}`}\r\n                    </div>\r\n                );\r\n            }\r\n        }\r\n    }\r\n\r\n    const getBookingsCountGauge = (_bookingsCount) =>\r\n    {\r\n        if (_bookingsCount > 0)\r\n        {\r\n            let percent = (_bookingsCount / MAX_BOOKING_COUNT) * 100;\r\n            if (percent > 100)\r\n            {\r\n                percent = 100;\r\n            }\r\n\r\n            percent = 100 - percent;\r\n\r\n            return (\r\n\r\n                <div className={classes.BookingCountGauge}>\r\n                  <div style={{padding:\"0\", margin:\"0\", width:\"100%\", height:\"100%\", backgroundColor: \"#3f51b5\"}} >\r\n                        <div  style={{padding:\"0\", margin:\"0\", width:\"100%\", height:`${percent}%`, backgroundColor: \"#fafafa\"}} >\r\n\r\n                        </div>\r\n                  </div>\r\n                </div>\r\n            );\r\n        }\r\n    }\r\n\r\n    return (\r\n        <React.Fragment>\r\n\r\n            <div className={classes.Container}>\r\n\r\n              {getDayLabel(cellIndex, month, daysInMonth)}\r\n\r\n              {getBookingsCountLabel(bookingsCount)}\r\n\r\n              {getBookingsCountGauge(bookingsCount)}\r\n\r\n            </div>\r\n\r\n        </React.Fragment>\r\n\r\n\r\n    );\r\n}\r\n\r\nMonthViewCell.propTypes = {\r\n    key: PropTypes.string.isRequired,\r\n    cellIndex: PropTypes.number.isRequired,\r\n    month: PropTypes.number.isRequired,\r\n    daysInMonth: PropTypes.arrayOf(PropTypes.date),\r\n    dayClicked: PropTypes.func\r\n  };\r\n\r\n \r\n  \r\nexport default MonthViewCell;","import calendar from 'node-calendar';\r\n\r\n\r\nexport default class CalendarUtil {\r\n\r\n    static getMonthRange = (month , year) =>\r\n    {\r\n        return new calendar.Calendar(calendar.SUNDAY).itermonthdates(year, month);\r\n    } \r\n\r\n} ","import React, { useEffect, useState } from 'react';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport PropTypes from 'prop-types';\r\nimport MonthViewCell from './MonthViewCell';\r\nimport CalendarUtil from './calendar-util';\r\n\r\nconst dayLables = ['Sun', 'Mon', 'Tue', 'Wed' , 'Thu', 'Fri', 'Sat'];\r\nconst days = [1,2,3,4,5,6,7]; \r\nconst rows = [1,2,3,4,5,6];\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n\r\n    table: {\r\n        width: \"100%\",\r\n        border: \"1px solid #ddd\",\r\n        borderCollapse: \"collapse\",\r\n    },\r\n\r\n    th: {\r\n        border: \"1px solid #ddd\",\r\n        borderCollapse: \"collapse\",\r\n        verticalAlign: \"middle\",\r\n        fontcolor: \"#555\",\r\n        fontWeight: \"400\",\r\n        fontSize: \"15px\",\r\n        paddingTop: \"5px\",\r\n        paddingBottom: \"5px\",\r\n        width: \"14%\"\r\n    },\r\n\r\n    td: {\r\n        border: \"1px solid #ddd\",\r\n        borderCollapse: \"collapse\",\r\n        verticalAlign: \"middle\",\r\n    }\r\n\r\n  }));\r\n\r\nconst MonthView = ({month, year, dayClicked}) => {\r\n    const classes = useStyles();\r\n\r\n    const daysInMonth = CalendarUtil.getMonthRange(month,year);\r\n\r\n    return (\r\n        <React.Fragment>\r\n\r\n            <table className={classes.table}>\r\n                <thead>\r\n                    <tr>\r\n                        {dayLables.map(label => (\r\n                            <th key={`th-${label}`} className={classes.th}>\r\n                                {label}\r\n                            </th>\r\n                        ))}\r\n                    </tr>\r\n                </thead>\r\n                <tbody>\r\n                    {rows.map(row => (\r\n                        <tr>\r\n                            {days.map(day => (\r\n                                <td className={classes.td}>\r\n                                    <MonthViewCell \r\n                                        key={`${month}${year}${(row-1) * days.length + day}`} \r\n                                        cellIndex={(row-1) * days.length + day} \r\n                                        month={month} \r\n                                        daysInMonth={daysInMonth}\r\n                                        dayClicked = {dayClicked}\r\n                                        />\r\n                                </td>\r\n                            ))}\r\n                        </tr>\r\n                    ))}            \r\n                </tbody>\r\n\r\n            </table>\r\n\r\n      \r\n        </React.Fragment>\r\n\r\n\r\n    );\r\n}\r\n\r\nMonthView.propTypes = {\r\n    month: PropTypes.number.isRequired,\r\n    year: PropTypes.number.isRequired,\r\n    dayClicked: PropTypes.func\r\n  };\r\n\r\n\r\nexport default MonthView;","import React, { useEffect, useState } from 'react';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport PropTypes from 'prop-types';\r\nimport dateformat from 'dateformat';\r\nimport BookService from '../services/BookService';\r\n\r\nimport CircularProgress from '@material-ui/core/CircularProgress';\r\nimport GlobalState from '../../GlobalState';\r\n\r\nimport axios from 'axios'\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n\r\n    Container: {\r\n        width: \"100%\",\r\n        paddingTop: \"40%\",\r\n        position: \"relative\",\r\n        backgroundColor: \"#fff\"\r\n    },\r\n\r\n    ContainerPast: {\r\n        width: \"100%\",\r\n        paddingTop: \"40%\",\r\n        position: \"relative\",\r\n        backgroundColor: \"#fafafa\"\r\n    },\r\n    \r\n    DayLabel: {\r\n        position: \"absolute\",\r\n        top: \"5px\",\r\n        right: \"5px\",\r\n        color: \"#555\",\r\n        fontSize: \"1rem\"\r\n    },\r\n\r\n    DayLabelDisabled: {\r\n        position: \"absolute\",\r\n        top: \"5px\",\r\n        right: \"5px\",\r\n        color: \"#ddd\",\r\n        fontSize: \"1rem\"\r\n    },\r\n\r\n    BookingCountLabel: {\r\n        position: \"absolute\",\r\n        top: \"25%\",\r\n        left: \"38%\",\r\n        color: \"#3f51b5\",\r\n        backgroundColor: \"#ebedf7\",\r\n        fontSize: \"14px\",\r\n        fontWeight: \"600\",\r\n        padding: \"5px\",\r\n        borderRadius: \"50%\",\r\n        minWidth: \"30px\",\r\n        cursor : \"pointer\",\r\n    },\r\n\r\n    BookingCountLabelBusy: {\r\n        position: \"absolute\",\r\n        top: \"25%\",\r\n        left: \"38%\",\r\n        color: \"#b00000\",\r\n        backgroundColor: \"#fce6e6\",\r\n        fontSize: \"14px\",\r\n        fontWeight: \"600\",\r\n        padding: \"5px\",\r\n        borderRadius: \"50%\",\r\n        minWidth: \"30px\",\r\n        cursor : \"pointer\",\r\n    },\r\n\r\n    LoadingProgress: {\r\n        position: \"absolute\",\r\n        top: \"40%\",\r\n        left: \"40%\",\r\n      },\r\n\r\n      BookingCountGauge: {\r\n        position: \"absolute\",\r\n        bottom: \"5%\",\r\n        left: \"8%\",\r\n        width : \"85%\",\r\n        height: \"8%\"\r\n    },\r\n\r\n  }));\r\n\r\nconst MAX_BOOKING_COUNT = 5;  \r\n\r\nconst WeekViewCell = ({key, date, time, dayClicked}) => {\r\n    const classes = useStyles();\r\n\r\n    const [state, setState] = React.useContext(GlobalState);\r\n    const [bookingsCount, setBookingsCount] = React.useState(-1);\r\n    const [isPast, setIsPast] = React.useState(false);\r\n\r\n    const [cellDate, setCellDate] = React.useState(new Date());\r\n\r\n    useEffect( () => {\r\n        const todayStr = dateformat(new Date(), 'yyyy-mm-dd');\r\n        setIsPast(date < todayStr);\r\n\r\n        setCellDate(new Date(date));\r\n\r\n    }, [date]);\r\n\r\n    useEffect ( () => {\r\n      \r\n      \r\n      \r\n        if (!date || date.length <= 0 || !time || time.length <= 0)\r\n        {\r\n            return;\r\n        }\r\n        \r\n        // if (isPast)\r\n        // {\r\n        //     setBookingsCount(-2);\r\n        //     return;\r\n        // }\r\n\r\n        setBookingsCount(-1);\r\n\r\n       \r\n\r\n        var res = state.AdminCalendarCache?.find(record => record.method === 'getBookingsCountByDateStrandTime' && record.query === `${date}${time}`)?.res;\r\n        if (res)\r\n        {\r\n            if (res.data.count >= 0)\r\n            {\r\n                setBookingsCount(res.data.count);\r\n            }  \r\n            return;\r\n        }\r\n\r\n        let source = axios.CancelToken.source();\r\n        BookService.getAllBookingsCountByDateStrandTime(date, time, source).then( res => {\r\n            if (res.data.count >= 0)\r\n            {\r\n                setBookingsCount(res.data.count);\r\n                setState(state => ({...state, AdminCalendarCache : [...state.AdminCalendarCache, {method: 'getBookingsCountByDateStrandTime' , query : `${date}${time}`, res: res}]}));\r\n            }  \r\n        }).catch( err => \r\n            {\r\n                //do nothing\r\n            });\r\n     \r\n        return () => {\r\n           if (source)\r\n              source.cancel('Cancelling in cleanup');\r\n        }\r\n     \r\n    }, [date, time]);\r\n\r\n\r\n    const getBookingsCountLabel = (_bookingsCount) =>\r\n    {\r\n        if (_bookingsCount === -1)\r\n        {\r\n            return (\r\n                <div className={classes.LoadingProgress}>\r\n                      <CircularProgress disableShrink  />\r\n                </div>\r\n            );  \r\n        }\r\n        else if (_bookingsCount > 0)\r\n        {\r\n            if (_bookingsCount >= MAX_BOOKING_COUNT)\r\n            {\r\n                return (\r\n                    <div onClick={(event => dayClicked(event,cellDate))} className={classes.BookingCountLabelBusy}>\r\n                        {_bookingsCount}\r\n                    </div>\r\n                );\r\n            }\r\n            else\r\n            {\r\n                return (\r\n                    <div onClick={(event => dayClicked(event,cellDate))} className={classes.BookingCountLabel}>\r\n                        {_bookingsCount}\r\n                    </div>\r\n                );\r\n            }\r\n        }\r\n    }\r\n\r\n    const getBookingsCountGauge = (_bookingsCount) =>\r\n    {\r\n        if (_bookingsCount > 0 )\r\n        {\r\n            let percent = (_bookingsCount / MAX_BOOKING_COUNT) * 100;\r\n            if (percent > 100)\r\n            {\r\n                percent = 100;\r\n            }\r\n\r\n            // percent = 100 - percent;\r\n\r\n            return (\r\n\r\n                <div className={classes.BookingCountGauge}>\r\n                  <div style={{padding:\"0\", margin:\"0\", width:\"100%\", height:\"100%\", backgroundColor: \"#f5f5f5\"}} >\r\n                        <div  style={{padding:\"0\", margin:\"0\", height:\"100%\", width:`${percent}%`, backgroundColor: \"#3f51b5\"}} >\r\n\r\n                        </div>\r\n                  </div>\r\n                </div>\r\n            );\r\n        }\r\n    }\r\n\r\n    return (\r\n        <React.Fragment>\r\n\r\n            <div className={isPast ? classes.ContainerPast : classes.Container}>\r\n\r\n              {getBookingsCountLabel(bookingsCount)}\r\n\r\n              {getBookingsCountGauge(bookingsCount)}\r\n\r\n            </div>\r\n\r\n        </React.Fragment>\r\n\r\n\r\n    );\r\n}\r\n\r\nWeekViewCell.propTypes = {\r\n    key: PropTypes.string.isRequired,\r\n    date: PropTypes.string.isRequired,\r\n    time: PropTypes.string.isRequired,\r\n    dayClicked: PropTypes.func\r\n  };\r\n\r\n \r\n  \r\nexport default WeekViewCell;","import React, { useEffect, useState } from 'react';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport PropTypes from 'prop-types';\r\nimport WeekViewCell from './WeekViewCell';\r\nimport dateformat from 'dateformat';\r\n\r\nconst rows = [\r\n    '09:00 AM',\r\n    '09:15 AM', \r\n    '09:30 AM', \r\n    '09:45 AM',\r\n    '10:00 AM',\r\n    '10:15 AM',\r\n    '10:30 AM',\r\n    '10:45 AM',\r\n    '11:00 AM',\r\n    '11:15 AM',\r\n    '11:30 AM',\r\n    '11:45 AM',\r\n    '12:00 PM',\r\n    '12:15 PM',\r\n    '12:30 PM',\r\n    '12:45 PM',\r\n    '01:00 PM',\r\n    '01:15 PM',\r\n    '01:30 PM',\r\n    '01:45 PM',\r\n    '02:00 PM',\r\n    '02:15 PM',\r\n    '02:30 PM',\r\n    '02:45 PM',\r\n    '03:00 PM',\r\n    '03:15 PM',\r\n    '03:30 PM',\r\n    '03:45 PM',\r\n    '04:00 PM',\r\n    '04:15 PM',\r\n    '04:30 PM',\r\n    '04:45 PM',\r\n    '05:00 PM',\r\n    '05:15 PM',\r\n    '05:30 PM',\r\n    '05:45 PM',\r\n];\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n\r\n    table: {\r\n        width: \"100%\",\r\n        border: \"1px solid #ddd\",\r\n        borderCollapse: \"collapse\",\r\n        overflowY: \"auto\"\r\n    },\r\n\r\n    th: {\r\n        border: \"1px solid #ddd\",\r\n        borderCollapse: \"collapse\",\r\n        verticalAlign: \"middle\",\r\n        fontcolor: \"#555\",\r\n        fontWeight: \"400\",\r\n        fontSize: \"15px\",\r\n        paddingTop: \"5px\",\r\n        paddingBottom: \"5px\",\r\n        width: \"12%\", \r\n    },\r\n\r\n    td: {\r\n        border: \"1px solid #ddd\",\r\n        borderCollapse: \"collapse\",\r\n        verticalAlign: \"middle\",\r\n        height : \"50px\",\r\n        width: \"12%\", \r\n    }\r\n\r\n  }));\r\n\r\nconst WeekView = ({dates, dayClicked}) => {\r\n    const classes = useStyles();\r\n\r\n    return (\r\n        <React.Fragment>\r\n\r\n        <div style={{overflowY: \"scroll\" , height: \"60px\"}}>\r\n            <table className={classes.table}>\r\n                <thead>\r\n                    <tr>\r\n                        <th style={{width: \"7%\"}}>\r\n                        \r\n                        </th>\r\n                            {dates.map(date => (\r\n                                <th className={classes.th}>\r\n                                    <div style={{paddingBottom: \"5px\", color: \"#aaa\"}}>\r\n                                         {dateformat(date, 'ddd')}\r\n                                    </div>\r\n                                    <div>\r\n                                        <span style={{color: \"#aaa\"}}>\r\n                                            {dateformat(date, 'mmm ')}\r\n                                        </span> \r\n                                        <span  style={(dateformat(new Date(),'yyyy-mm-dd') === dateformat(date, 'yyyy-mm-dd')) ? { backgroundColor: \"#1a73e8\", color: \"#fff\", borderRadius: \"50%\",  padding: \"5px\",} : {color: \"#333\", fontWeight:\"500\"}}>\r\n                                             {dateformat(date, ' d')}\r\n                                        </span>\r\n                                       \r\n                                    </div>\r\n                                </th>\r\n                        ))}\r\n                    </tr>\r\n                </thead>\r\n             </table>\r\n\r\n        </div>\r\n\r\n            <div style={{overflowY: \"scroll\" , height: \"70vh\"}}>\r\n                <table className={classes.table}>   \r\n                    <tbody>\r\n                        {rows.map(row => (\r\n                            <tr>\r\n                                <td style={{width: \"7%\"}}>\r\n                                    {row}\r\n                                </td>\r\n                                {dates.map(day => (\r\n                                    <td className={classes.td}>\r\n                                        <WeekViewCell \r\n                                                dayClicked = {dayClicked}\r\n                                                key={`${dateformat(day,'yyyy-mm-dd')}-${row.replace(':','-')}`} \r\n                                                date={dateformat(day,'yyyy-mm-dd')} \r\n                                                time={row}/>\r\n                                    </td>\r\n                                ))}\r\n                            </tr>\r\n                        ))}            \r\n                    </tbody>\r\n                </table>\r\n            </div>                    \r\n      \r\n        </React.Fragment>\r\n\r\n\r\n    );\r\n}\r\n\r\nWeekView.propTypes = {\r\n    dates: PropTypes.arrayOf(PropTypes.any).isRequired,\r\n    dayClicked: PropTypes.func\r\n  };\r\n\r\n\r\nexport default WeekView;","import React, { useEffect, useState } from 'react';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport PropTypes from 'prop-types';\r\nimport dateformat from 'dateformat';\r\nimport BookService from '../services/BookService';\r\n\r\nimport CircularProgress from '@material-ui/core/CircularProgress';\r\nimport GlobalState from '../../GlobalState';\r\nimport BookingDialog from '../BookingDialog';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n\r\n    Container: {\r\n        width: \"100%\",\r\n        height : \"50px\",\r\n        position: \"relative\",\r\n        backgroundColor: \"#fff\",\r\n        display: \"flex\",\r\n        alignItems : \"flex-start\",\r\n        justifyItems: \"flex-start\",\r\n        paddingLeft : \"10px\"\r\n\r\n    },\r\n\r\n    ContainerPast: {\r\n        width: \"100%\",\r\n        paddingTop: \"50px\",\r\n        position: \"relative\",\r\n        backgroundColor: \"#fafafa\"\r\n    },\r\n    \r\n    DayLabel: {\r\n        position: \"absolute\",\r\n        top: \"5px\",\r\n        right: \"5px\",\r\n        color: \"#555\",\r\n        fontSize: \"1rem\"\r\n    },\r\n\r\n    DayLabelDisabled: {\r\n        position: \"absolute\",\r\n        top: \"5px\",\r\n        right: \"5px\",\r\n        color: \"#ddd\",\r\n        fontSize: \"1rem\"\r\n    },\r\n\r\n    LoadingProgress: {\r\n        position: \"absolute\",\r\n        top: \"10%\",\r\n        left: \"40%\",\r\n      },\r\n\r\n      BookingCountGauge: {\r\n        position: \"absolute\",\r\n        bottom: \"5%\",\r\n        left: \"8%\",\r\n        width : \"85%\",\r\n        height: \"8%\"\r\n    },\r\n\r\n    bookingBox: {\r\n        display: \"flex\",\r\n        marginRight: \"10px\",\r\n        marginTop: \"5px\",\r\n        padding: \"10px\",\r\n        maxWidth : \"150px\",\r\n        overflowX: \"hidden\",\r\n        border : \"1px solid #eee\",\r\n        fontSize: \"12px\",\r\n        fontWeight : \"500\",\r\n        cursor: \"pointer\",\r\n        backgroundColor: \"#ebedf7\",\r\n        color: \"#3f51b5\",\r\n        boxShadow: \"2px 4px #fafafa\",\r\n\r\n        \"&:hover\": {\r\n            background: \"#3f51b5\",\r\n            color: \"#ebedf7\"\r\n          },\r\n    },\r\n\r\n    bookingBoxSampleTaken: {\r\n        display: \"flex\",\r\n        marginRight: \"10px\",\r\n        marginTop: \"5px\",\r\n        padding: \"10px\",\r\n        maxWidth : \"150px\",\r\n        overflowX: \"hidden\",\r\n        border : \"1px solid #eee\",\r\n        fontSize: \"12px\",\r\n        fontWeight : \"500\",\r\n        cursor: \"pointer\",\r\n        backgroundColor: \"#0066cc\",\r\n        color: \"#eee\",\r\n        boxShadow: \"2px 4px #fafafa\",\r\n\r\n        \"&:hover\": {\r\n            background: \"#0059b3\",\r\n            color: \"#fafafa\"\r\n          },\r\n    },\r\n\r\n    bookingBoxPositive: {\r\n        display: \"flex\",\r\n        marginRight: \"10px\",\r\n        marginTop: \"5px\",\r\n        padding: \"10px\",\r\n        maxWidth : \"150px\",\r\n        overflowX: \"hidden\",\r\n        border : \"1px solid #eee\",\r\n        fontSize: \"12px\",\r\n        fontWeight : \"500\",\r\n        cursor: \"pointer\",\r\n        backgroundColor: \"#d40b0b\",\r\n        color: \"#fff2f2\",\r\n        boxShadow: \"2px 4px #fafafa\",\r\n\r\n        \"&:hover\": {\r\n            background: \"#bf0000\",\r\n            color: \"#fff\"\r\n          },\r\n    },\r\n\r\n    bookingBoxReportSent: {\r\n        display: \"flex\",\r\n        marginRight: \"10px\",\r\n        marginTop: \"5px\",\r\n        padding: \"10px\",\r\n        maxWidth : \"150px\",\r\n        overflowX: \"hidden\",\r\n        border : \"1px solid #eee\",\r\n        fontSize: \"12px\",\r\n        fontWeight : \"500\",\r\n        cursor: \"pointer\",\r\n        backgroundColor: \"#009900\",\r\n        color: \"#eee\",\r\n        boxShadow: \"2px 4px #fafafa\",\r\n\r\n        \"&:hover\": {\r\n            background: \"#006e00\",\r\n            color: \"#fafafa\"\r\n          },\r\n    },\r\n\r\n  \r\n\r\n  }));\r\n\r\n\r\n\r\nconst DayViewCell = ({key, date, time}) => {\r\n    const classes = useStyles();\r\n\r\n    const [state, setState] = React.useContext(GlobalState);\r\n    const [bookings, setBookings] = React.useState(null);\r\n    const [filteredBookings, setFilteredBookings] = React.useState(null);\r\n    const [selectedBooking, setSelectedBooking] = React.useState(null);\r\n\r\n    const [refresh, setRefresh] = React.useState(true); \r\n\r\n    const [isPast, setIsPast] = React.useState(false);\r\n\r\n    const [openDialog, setOpenDialog] = React.useState(false);\r\n\r\n\r\n    useEffect( () => {\r\n        const todayStr = dateformat(new Date(), 'yyyy-mm-dd');\r\n        setIsPast(date < todayStr);\r\n\r\n    }, [date]);\r\n\r\n    useEffect( () => \r\n    {\r\n        if (bookings) {\r\n\r\n\r\n            if (state.dayViewCalFilter && state.dayViewCalFilter.trim().length > 0)\r\n            {\r\n                const search = state.dayViewCalFilter.trim().toUpperCase();\r\n                setFilteredBookings( bookings.filter(booking => booking.forenameCapital.indexOf(search) >= 0\r\n                                                            ||  booking.surnameCapital.indexOf(search) >= 0\r\n                                                            ||  `${booking.forenameCapital} ${booking.surnameCapital}`.indexOf(search) >= 0\r\n                    \r\n                    ));\r\n            }\r\n            else\r\n            {\r\n                setFilteredBookings([...bookings]);\r\n            }\r\n        }\r\n\r\n    }, [state.dayViewCalFilter, bookings]);\r\n \r\n\r\n\r\n    useEffect ( () => {\r\n       \r\n        const fetchData = async () =>\r\n        {\r\n            if (!date || date.length <= 0 || !time || time.length <= 0)\r\n            {\r\n                return;\r\n            }\r\n         \r\n            // if (isPast)\r\n            // {\r\n            //     setBookings([]);\r\n            //     return;\r\n            // }\r\n    \r\n            setBookings(null);\r\n    \r\n            var res = state.AdminCalendarCache?.find(record => record.method === 'getBookingsByDateStrandTime' && record.query === `${date}${time}`)?.res;\r\n            if (!res || openDialog)\r\n            {\r\n                res = await BookService.getAllBookingsByDateStrandTime(date, time);\r\n                setState(state => ({...state, AdminCalendarCache : [...state.AdminCalendarCache, {method: 'getBookingsByDateStrandTime' , query : `${date}${time}`, res: res}]}));\r\n            }\r\n          \r\n          \r\n            if (res.data.status === 'OK')\r\n            {\r\n                setBookings(res.data.bookings);\r\n            }   \r\n        }\r\n\r\n        if (openDialog)\r\n        {\r\n            setState(state => ({...state, AdminCalendarCache : state.AdminCalendarCache.filter(record => !(record.method === 'getBookingsByDateStrandTime' && record.query ===  `${date}${time}`))}));\r\n            setState(state => ({...state, AdminCalendarCache : state.AdminCalendarCache.filter(record => !(record.method === 'getBookingsCountByDateStrandTime' && record.query ===  `${date}${time}`))}));\r\n            setState(state => ({...state, AdminCalendarCache : state.AdminCalendarCache.filter(record => !(record.method === 'getBookingsCountByDateStr' && record.query ===  date))}));\r\n        }\r\n\r\n         fetchData();\r\n     \r\n    }, [date, time, state.bookingDialogDataChanged]);\r\n\r\n    const bookingCliked = (event, booking) =>\r\n    {\r\n        setSelectedBooking(booking);\r\n        setOpenDialog(true);\r\n    }\r\n\r\n    \r\n\r\n    const getBookingClass = (status) =>\r\n    {\r\n        switch (status) {\r\n\r\n            case 'sample_taken':\r\n                return classes.bookingBoxSampleTaken;\r\n            case 'positive':\r\n                return classes.bookingBoxPositive;\r\n            case 'report_sent':\r\n            case 'report_cert_sent':\r\n                return classes.bookingBoxReportSent;     \r\n\r\n            default : \r\n                return classes.bookingBox;\r\n        }\r\n    }\r\n\r\n    const getBookingsBox = (_bookings) =>\r\n    {\r\n        if (_bookings === null) \r\n        {\r\n            return (\r\n                <div className={classes.LoadingProgress}>\r\n                      <CircularProgress disableShrink  />\r\n                </div>\r\n            );  \r\n        }\r\n        else if (_bookings.length > 0)\r\n        {\r\n           return (\r\n                _bookings.map(booking => (\r\n\r\n                    <div style={booking.tr ? {borderTop: \"5px solid #d00fd6\"} : {} } className={getBookingClass(booking.status)} onClick={event => bookingCliked(event,booking)}>\r\n\r\n                        {`${booking.forenameCapital}-${booking.surnameCapital}`.substring(0,15)}\r\n\r\n                    </div>\r\n\r\n                ))\r\n\r\n           );\r\n        }\r\n    }\r\n\r\n\r\n    const handleCloseDialog = () =>\r\n    {\r\n        setOpenDialog(false);\r\n    }\r\n\r\n    return (\r\n        <React.Fragment>\r\n\r\n            <div className={classes.Container}>\r\n\r\n              {getBookingsBox(filteredBookings)}\r\n\r\n            </div>\r\n\r\n            <BookingDialog\r\n                booking={selectedBooking}\r\n                open={openDialog}\r\n                onClose={handleCloseDialog}\r\n            />\r\n\r\n        </React.Fragment>\r\n\r\n\r\n    );\r\n}\r\n\r\nDayViewCell.propTypes = {\r\n    key: PropTypes.string.isRequired,\r\n    date: PropTypes.string.isRequired,\r\n    time: PropTypes.string.isRequired,\r\n  };\r\n\r\n \r\n  \r\nexport default DayViewCell;","import React, { useEffect, useState } from 'react';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport PropTypes from 'prop-types';\r\nimport DayViewCell from './DayViewCell';\r\nimport dateformat from 'dateformat';\r\n\r\nconst rows = [\r\n    '09:00 AM',\r\n    '09:15 AM', \r\n    '09:30 AM', \r\n    '09:45 AM',\r\n    '10:00 AM',\r\n    '10:15 AM',\r\n    '10:30 AM',\r\n    '10:45 AM',\r\n    '11:00 AM',\r\n    '11:15 AM',\r\n    '11:30 AM',\r\n    '11:45 AM',\r\n    '12:00 PM',\r\n    '12:15 PM',\r\n    '12:30 PM',\r\n    '12:45 PM',\r\n    '01:00 PM',\r\n    '01:15 PM',\r\n    '01:30 PM',\r\n    '01:45 PM',\r\n    '02:00 PM',\r\n    '02:15 PM',\r\n    '02:30 PM',\r\n    '02:45 PM',\r\n    '03:00 PM',\r\n    '03:15 PM',\r\n    '03:30 PM',\r\n    '03:45 PM',\r\n    '04:00 PM',\r\n    '04:15 PM',\r\n    '04:30 PM',\r\n    '04:45 PM',\r\n    '05:00 PM',\r\n    '05:15 PM',\r\n    '05:30 PM',\r\n    '05:45 PM',\r\n];\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n\r\n    table: {\r\n        width: \"100%\",\r\n        border: \"1px solid #ddd\",\r\n        borderCollapse: \"collapse\",\r\n        overflowY: \"auto\"\r\n    },\r\n\r\n    th: {\r\n        border: \"1px solid #ddd\",\r\n        borderCollapse: \"collapse\",\r\n        verticalAlign: \"middle\",\r\n        fontcolor: \"#555\",\r\n        fontWeight: \"400\",\r\n        fontSize: \"15px\",\r\n        paddingTop: \"5px\",\r\n        paddingBottom: \"5px\",\r\n        width: \"12%\", \r\n    },\r\n\r\n    td: {\r\n        border: \"1px solid #ddd\",\r\n        borderCollapse: \"collapse\",\r\n        verticalAlign: \"middle\",\r\n        height : \"50px\",\r\n        width: \"84%\", \r\n    },\r\n\r\n    titleLabel: {\r\n        paddingBottom: \"17px\",\r\n        paddingTop: \"17px\",\r\n        color: \"#777\",\r\n        fontSize: \"16px\"\r\n    },\r\n\r\n    titleLabelToday: {\r\n        paddingBottom: \"17px\",\r\n        paddingTop: \"17px\",\r\n        color: \"#fff\",\r\n        backgroundColor: \"#1a73e8\",\r\n        fontSize: \"16px\"\r\n    },\r\n\r\n  }));\r\n\r\nconst DayView = ({date}) => {\r\n    const classes = useStyles();\r\n\r\n    return (\r\n        <React.Fragment>\r\n\r\n        <div style={{overflowY: \"scroll\" , height: \"60px\"}}>\r\n            <table className={classes.table}>\r\n                <thead>\r\n                    <tr>\r\n                        <th style={{width: \"7%\"}}>\r\n                        \r\n                        </th>\r\n                        <th style={{width: \"84%\"}}>\r\n                                <div className={(dateformat(new Date(),'yyyy-mm-dd') === dateformat(date, 'yyyy-mm-dd')) ? classes.titleLabelToday : classes.titleLabel }>\r\n                                        {dateformat(date,'dddd')}\r\n                                </div>                                \r\n                        </th>\r\n                    </tr>\r\n                </thead>\r\n             </table>\r\n\r\n        </div>\r\n\r\n            <div style={{overflowY: \"scroll\" , height: \"70vh\"}}>\r\n                <table className={classes.table}>   \r\n                    <tbody>\r\n                        {rows.map(row => (\r\n                            <tr>\r\n                                <td style={{width: \"7%\"}}>\r\n                                    {row}\r\n                                </td>\r\n                               \r\n                                <td className={classes.td}>\r\n                                     <DayViewCell key={`${dateformat(date,'yyyy-mm-dd')}-${row}`} date={dateformat(date,'yyyy-mm-dd')} time={row}/>  \r\n                                </td>\r\n                            \r\n                            </tr>\r\n                        ))}            \r\n                    </tbody>\r\n                </table>\r\n            </div>                    \r\n      \r\n        </React.Fragment>\r\n\r\n\r\n    );\r\n}\r\n\r\nDayView.propTypes = {\r\n    date: PropTypes.any.isRequired\r\n  };\r\n\r\n\r\nexport default DayView;","import React, { useEffect, useState } from 'react';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport MonthView from './MonthView';\r\nimport { Button, Grid, IconButton, InputAdornment, TextField, Tooltip } from '@material-ui/core';\r\nimport ToggleButton from '@material-ui/lab/ToggleButton';\r\nimport ToggleButtonGroup from '@material-ui/lab/ToggleButtonGroup';\r\n\r\nimport NavigateBeforeIcon from '@material-ui/icons/NavigateBefore';\r\nimport NavigateNextIcon from '@material-ui/icons/NavigateNext';\r\nimport WeekView from './WeekView';\r\nimport dateformat from 'dateformat';\r\nimport DayView from './DayView';\r\nimport GlobalState from '../../GlobalState';\r\n\r\nimport CloseIcon from '@material-ui/icons/Close';\r\n\r\n\r\n\r\nconst monthNames = [\"January\", \"February\", \"March\", \"April\", \"May\", \"June\",\r\n  \"July\", \"August\", \"September\", \"October\", \"November\", \"December\"\r\n];\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n\r\n    title: {\r\n        textAlign: \"center\",\r\n        fontSize: \"24px\",\r\n        fontColor: \"#333\"\r\n    },\r\n\r\n  }));\r\n\r\nexport default function CalendarView() {\r\n    const classes = useStyles();\r\n\r\n    const [state, setState] = React.useContext(GlobalState);\r\n\r\n    const [month, setMonth] = React.useState(new Date().getMonth() + 1);\r\n    const [year, setYear] = React.useState(new Date().getFullYear());\r\n\r\n    const [day, setDay] = React.useState(new Date());\r\n\r\n    const [firstDayofWeek, setFirstDayofWeek] = React.useState(new Date());\r\n\r\n    const [weekDates, setWeekDates] = React.useState([]);\r\n\r\n    const [mode, setMode] = React.useState('month');\r\n    const [selectedTab, setSeletedTab] = React.useState('month');\r\n\r\n    const [filter,setFilter] = React.useState('');\r\n\r\n    const filterChanged = (event) =>{\r\n        setFilter(event.target.value);\r\n        setState(state => ({...state, dayViewCalFilter : event.target.value?.trim()?.toUpperCase()}))\r\n      }\r\n\r\n      const removeFilter = () =>\r\n      {\r\n        setFilter('');\r\n        setState(state => ({...state, dayViewCalFilter : ''}));\r\n      }\r\n\r\n\r\n    useEffect( () => {\r\n        const today = new Date();\r\n        const dayofWeek = today.getDay();\r\n        const firstdayofweek = new Date(today.getTime() - ( dayofWeek * 86400000));\r\n        setFirstDayofWeek(firstdayofweek);\r\n        setState(state => ({...state, AdminCalendarCache : []}));\r\n\r\n        return () =>\r\n        {\r\n            setState(state => ({...state, AdminCalendarCache : []}));\r\n            removeFilter();\r\n        }\r\n       \r\n    }, []);\r\n\r\n\r\n    useEffect( () => {\r\n        const dates = [];\r\n        for (var i = 0; i < 7 ; i++)\r\n        {\r\n            dates.push(new Date(firstDayofWeek.getTime() + ( i * 86400000)));\r\n        }\r\n        setWeekDates(dates);\r\n\r\n    }, [firstDayofWeek]);\r\n\r\n    const handlePrevButton = (event) =>\r\n    {\r\n       if (mode === 'month')\r\n       {\r\n            if (month === 1)\r\n            {\r\n                setYear(year - 1);\r\n            } \r\n\r\n            const newMonth = month === 1 ? 12 : month - 1;\r\n            setMonth(newMonth);\r\n\r\n            const newDay = new Date(year, newMonth - 1 , 1, 0 ,0 ,0 ,0);\r\n            setDay(newDay);\r\n\r\n            const dayofWeek = newDay.getDay();\r\n            setFirstDayofWeek(new Date(newDay.getTime() - ( dayofWeek * 86400000)));\r\n\r\n       } \r\n       else if (mode === 'week')\r\n       {\r\n           const newFirstDayofWeek = new Date(firstDayofWeek.getTime() - ( 7 * 86400000));\r\n           setFirstDayofWeek(newFirstDayofWeek);\r\n\r\n           setDay(newFirstDayofWeek);\r\n           setMonth(newFirstDayofWeek.getMonth() + 1);\r\n           setYear(newFirstDayofWeek.getFullYear());\r\n\r\n       }\r\n       else if (mode === 'day')\r\n       {\r\n           const newDay = new Date(day.getTime() - ( 1 * 86400000));\r\n           setDay(newDay);\r\n\r\n           const dayofWeek = newDay.getDay();\r\n           setFirstDayofWeek(new Date(newDay.getTime() - ( dayofWeek * 86400000)));\r\n\r\n           setMonth(newDay.getMonth() + 1);\r\n           setYear(newDay.getFullYear());\r\n       }\r\n    }\r\n\r\n    const handleNextButton = (event) =>\r\n    {\r\n        if (mode === 'month')\r\n        {\r\n            if (month === 12)\r\n            {\r\n                setYear(year + 1);\r\n            } \r\n       \r\n            const newMonth = month === 12 ? 1 : month + 1;\r\n            setMonth(newMonth);\r\n\r\n            const newDay = new Date(year, newMonth - 1 , 1, 0 ,0 ,0 ,0);\r\n            setDay(newDay);\r\n\r\n            const dayofWeek = newDay.getDay();\r\n            setFirstDayofWeek(new Date(newDay.getTime() - ( dayofWeek * 86400000)));\r\n        }\r\n        else if (mode === 'week')\r\n        {\r\n            const newFirstDayofWeek = new Date(firstDayofWeek.getTime() + ( 7 * 86400000));\r\n            setFirstDayofWeek(newFirstDayofWeek);\r\n\r\n            setDay(newFirstDayofWeek);\r\n            setMonth(newFirstDayofWeek.getMonth() + 1);\r\n            setYear(newFirstDayofWeek.getFullYear());\r\n\r\n        }\r\n        else if (mode === 'day')\r\n        {\r\n            const newDay = new Date(day.getTime() + ( 1 * 86400000));\r\n            setDay(newDay);\r\n\r\n            const dayofWeek = newDay.getDay();\r\n            setFirstDayofWeek(new Date(newDay.getTime() - ( dayofWeek * 86400000)));\r\n \r\n            setMonth(newDay.getMonth() + 1);\r\n            setYear(newDay.getFullYear());\r\n        }\r\n    }\r\n\r\n    const goToday = (event) => {\r\n        const newDay = new Date();\r\n        const dayofWeek = newDay.getDay();\r\n        setFirstDayofWeek(new Date(newDay.getTime() - ( dayofWeek * 86400000)));\r\n        setDay(newDay);\r\n        setMonth(newDay.getMonth() + 1);\r\n        setYear(newDay.getFullYear());\r\n    }\r\n\r\n    const dayClicked = (event, date) =>\r\n    {\r\n        const newDay = new Date(date);\r\n        const dayofWeek = newDay.getDay();\r\n        setFirstDayofWeek(new Date(newDay.getTime() - ( dayofWeek * 86400000)));\r\n        setDay(newDay);\r\n        setMonth(newDay.getMonth() + 1);\r\n        setYear(newDay.getFullYear());\r\n        setSeletedTab('day');\r\n        setMode('day');\r\n    }\r\n\r\n    const getContentFromMode = (_mode) => {\r\n        if (_mode === 'month')\r\n        {\r\n            return (\r\n                <MonthView dayClicked={dayClicked} month={month} year={year}/>    \r\n            );\r\n        }    \r\n        else if (_mode === 'week')\r\n        {\r\n            return (\r\n                    <WeekView dayClicked={dayClicked} dates={weekDates}/>\r\n            );\r\n            \r\n        }\r\n        else if (_mode === 'day')\r\n        {\r\n            return (\r\n                <DayView date={day}/>\r\n            );\r\n        }\r\n    }\r\n\r\n    const getCalendarTitleFromMode = (_mode) => {\r\n        if (_mode === 'month')\r\n        {\r\n            return (\r\n                <span className={classes.title}> {`${monthNames[month - 1]} ${year}`} </span>   \r\n            );\r\n        }    \r\n        else if (_mode === 'week')\r\n        {\r\n            const endOfWeek = new Date(firstDayofWeek.getTime() + ( 6 * 86400000));\r\n            let endofWeekStr = '';\r\n            if (endOfWeek.getMonth() === firstDayofWeek.getMonth())\r\n            {\r\n                endofWeekStr = dateformat(endOfWeek,'d');\r\n            }else\r\n            {\r\n                endofWeekStr = dateformat(endOfWeek,'mmm d');\r\n            }\r\n\r\n            return (\r\n                <span className={classes.title}> {`${dateformat(firstDayofWeek,'mmm d')} - ${endofWeekStr}, ${year}`} </span>\r\n            );\r\n            \r\n        }\r\n        else if (_mode === 'day')\r\n        {\r\n            return (\r\n                <span className={classes.title}> {`${dateformat(day,'mmmm d, yyyy')}`} </span>\r\n            );\r\n        }\r\n    }\r\n\r\n\r\n    const handleTabChanged = (event, value) => {\r\n        if (value && value.length)\r\n        {\r\n          setSeletedTab(value);\r\n          setMode(value);\r\n        }\r\n    };\r\n\r\n    const getPrevButtonTitle = (_mode) =>\r\n    {\r\n        return `Previuos ${mode}`;\r\n    }\r\n\r\n    const getNextButtonTitle = (_mode) =>\r\n    {\r\n        return `Next ${mode}`;\r\n    }\r\n\r\n    return (\r\n        <React.Fragment>\r\n\r\n          <Grid\r\n            container\r\n            direction=\"row\"\r\n            justify=\"space-between\"\r\n            alignItems=\"center\"\r\n            style= {{marginBottom: \"10px\", marginTop: \"0px\"}}\r\n            >  \r\n\r\n            <Grid item md={3}>\r\n                <div  style={{display:\"flex\", alignItems: \"flex-start\", justifyContent: \"flex-start\" , paddingLeft: \"10px\"}}>\r\n                    <Tooltip title={getPrevButtonTitle(mode)} placement=\"bottom-start\">\r\n                        <IconButton \r\n                                color=\"default\" \r\n                                aria-label=\"prev\"\r\n                                onClick = {handlePrevButton}\r\n                                >\r\n                            <NavigateBeforeIcon style={{fontSize: '2rem'}}/>\r\n                        </IconButton>\r\n                    </Tooltip>\r\n\r\n                    <Tooltip title={getNextButtonTitle(mode)} placement=\"bottom-end\">\r\n                        <IconButton \r\n                                color=\"default\" \r\n                                aria-label=\"next\"\r\n                                onClick = {handleNextButton}\r\n                                >\r\n                            <NavigateNextIcon style={{fontSize: '2rem'}}/>\r\n                        </IconButton>\r\n                    </Tooltip>\r\n\r\n                    <Button style={{marginTop: \"11px\", marginLeft: \"10px\"}} onClick={goToday} variant=\"outlined\"> Today </Button>\r\n                </div>\r\n\r\n            </Grid>\r\n\r\n            <Grid item md={6}>\r\n\r\n                    <Grid\r\n                        container\r\n                        direction=\"row\"\r\n                        justify=\"center\"\r\n                        alignItems=\"flex-end\"\r\n                        spacing = {3}\r\n                        >\r\n                            <Grid item>\r\n                                    {getCalendarTitleFromMode(mode)}\r\n                            </Grid>\r\n                            {mode === 'day' && (\r\n                                        <Grid item>\r\n                                                <TextField\r\n                                                    variant=\"standard\"\r\n                                                    style={{marginBottom : \"5px\"}}\r\n                                                    value={filter}\r\n                                                    onChange={filterChanged}\r\n                                                    margin=\"normal\"\r\n                                                    size=\"small\"\r\n                                                    id=\"filter\"\r\n                                                    label=\"Filter\"\r\n                                                    name=\"filter\"\r\n                                                    autoComplete=\"off\"\r\n                                                    InputProps={{\r\n                                                        endAdornment : \r\n                                                            <InputAdornment position=\"end\">\r\n                                                                <Tooltip title=\"Clear\">\r\n                                                                            <IconButton\r\n                                                                            aria-label=\"remove filter\"\r\n                                                                            onClick={() => removeFilter()}\r\n                                                                            onMouseDown={() => removeFilter()}\r\n                                                                        >\r\n                                                                            <CloseIcon/>\r\n                                                                        </IconButton>\r\n                                                                </Tooltip>\r\n                                                            \r\n                                                            </InputAdornment>\r\n                                                          \r\n                                                    }}\r\n                                                   \r\n                                                />\r\n                                        </Grid>\r\n                            )}\r\n                           \r\n                    </Grid>\r\n                \r\n            </Grid>\r\n\r\n            <Grid item md={3}>\r\n                <div  style={{display:\"flex\", alignItems: \"flex-end\", justifyContent: \"flex-end\", paddingRight: \"10px\" }}>\r\n                    <ToggleButtonGroup\r\n                        value={selectedTab}\r\n                        exclusive\r\n                        onChange={handleTabChanged}\r\n                        aria-label=\"select view mode\"\r\n                    >\r\n                        <ToggleButton style={selectedTab === 'month' ? {width: \"80px\", color: \"#3f51b5\", backgroundColor: \"#ebedf7\" } : {width: \"80px\"}} value=\"month\" aria-label=\"month view\">\r\n                                month\r\n                        </ToggleButton>\r\n                        <ToggleButton style={selectedTab === 'week' ? {width: \"80px\", color: \"#3f51b5\", backgroundColor: \"#ebedf7\"} : {width: \"80px\"}}  value=\"week\" aria-label=\"week view\">\r\n                                week\r\n                        </ToggleButton>\r\n                        <ToggleButton style={selectedTab === 'day' ? {width: \"80px\", color: \"#3f51b5\", backgroundColor: \"#ebedf7\"} : {width: \"80px\"}} value=\"day\" aria-label=\"day view\">\r\n                                day\r\n                        </ToggleButton>\r\n                    </ToggleButtonGroup>\r\n                </div>\r\n            </Grid>\r\n\r\n           </Grid> \r\n\r\n             {getContentFromMode(mode)}\r\n\r\n        </React.Fragment>\r\n\r\n\r\n    );\r\n\r\n}","import axios from 'axios';\r\nimport { authToken, backendAPI } from '../../GlobalPath';\r\n\r\nexport default axios.create({\r\n  baseURL: backendAPI,\r\n  headers : {\r\n      'Authorization' : authToken,\r\n       'Content-Type': 'application/json',\r\n  }\r\n});","import API from './api';\r\nimport axiosRetry from 'axios-retry';\r\n\r\nexport default class BookService {\r\n\r\n   static changeDepositBooking = (bookingId, deposit) => {\r\n      return API.post(`/api/gynae/book/changedepositbooking?id=${bookingId}&deposit=${deposit}`);\r\n   }\r\n\r\n   static addNewBooking = (payload) =>\r\n   {\r\n      return API.post(`/api/gynae/book/addnewbooking`, payload);\r\n   }\r\n\r\n   static sendRegFormEmail = (bookingId) =>\r\n   {\r\n      return API.post(`/api/gynae/book/sendregformemail?id=${bookingId}`);\r\n   }\r\n\r\n   static payBooking = (bookingId,price, paymentMethod, corporate) =>\r\n   {\r\n      return API.post(`/api/gynae/book/paybooking?id=${bookingId}&paymentmethod=${paymentMethod}&corporate=${corporate}&price=${price}`);\r\n   }\r\n\r\n   static unPayBooking = (bookingId) =>\r\n   {\r\n      return API.post(`/api/gynae/book/unpaybooking?id=${bookingId}`);\r\n   }\r\n\r\n   static getShouldRefundsCount = () =>\r\n   {\r\n      return API.get(`/api/gynae/book/getshouldrefundscount?`);\r\n   }\r\n\r\n   static manualRefundBooking = (bookingId) =>\r\n   {\r\n      return API.post(`/api/gynae/payment/manualrefundpayment`, {bookingId: bookingId});\r\n   }\r\n\r\n   static refundBooking = (bookingId) =>\r\n   {\r\n      return API.post(`/api/gynae/payment/refundpayment`, {bookingId: bookingId});\r\n   }\r\n\r\n   static getBookingsStatsByDateStr = (dateStr) =>\r\n   {\r\n      return API.get(`/api/gynae/book/getbookingsstatsbydatestr?date=${dateStr}`);\r\n   }\r\n\r\n   static getBookingsCountByDateStr = (dateStr) =>\r\n   {\r\n      return API.get(`/api/gynae/book/getbookingscountbydatestr?date=${dateStr}`);\r\n   }\r\n\r\n   static getAllBookingsCountAll = () =>\r\n   {\r\n      return API.get(`/api/gynae/book/getallbookingscountall`);\r\n   }\r\n\r\n   static getBookingsCountByDateStrandTime = (dateStr, time, source) =>\r\n   {\r\n      return API.get(`/api/gynae/book/getbookingscountbydatestrandtime?date=${dateStr}&time=${time}`, {cancelToken: source.token});\r\n   }\r\n\r\n   static getBookingsByDateStrandTime = (dateStr, time) =>\r\n   {\r\n      return API.get(`/api/gynae/book/getbookingsbydatestrandtime?date=${dateStr}&time=${time}`);\r\n   }\r\n\r\n\r\n   static getAllBookingsCountByDateStr = (dateStr) =>\r\n   {\r\n      return API.get(`/api/gynae/book/getallbookingscountbydatestr?date=${dateStr}`);\r\n   }\r\n\r\n   static getAllBookingsCountByDateStrandTime = (dateStr, time, source) =>\r\n   {\r\n      return API.get(`/api/gynae/book/getallbookingscountbydatestrandtime?date=${dateStr}&time=${time}`, {cancelToken: source.token});\r\n   }\r\n\r\n   static getAllBookingsByDateStrandTime = (dateStr, time) =>\r\n   {\r\n      return API.get(`/api/gynae/book/getallbookingsbydatestrandtime?date=${dateStr}&time=${time}`);\r\n   }\r\n\r\n   static changeBackToBookingMade = (id) =>\r\n   {\r\n      return API.post(`/api/gynae/book/changebacktobookingmade?id=${id}`);\r\n   }\r\n\r\n   static changeToPatientAttended = (id) =>\r\n   {\r\n      return API.post(`/api/gynae/book/changetopatientattended?id=${id}`);\r\n   }\r\n\r\n   static updateBooking = (payload) =>\r\n   {\r\n      return API.post(`/api/gynae/book/updatebookappointment`, payload);\r\n   } \r\n\r\n   static updateBookingTime = (payload) =>\r\n   {\r\n      return API.post(`/api/gynae/book/updatebookappointmenttime`, payload);\r\n   } \r\n\r\n   static deleteBooking = (id) =>\r\n   {\r\n      return API.post(`/api/gynae/book/deletebookappointment?id=${id}`);\r\n   } \r\n\r\n   static unDeleteBooking = (id) =>\r\n   {\r\n      return API.post(`/api/gynae/book/undeletebookappointment?id=${id}`);\r\n   } \r\n   \r\n    static getBookingsByRef = (ref) =>\r\n    {\r\n       return API.get(`/api/gynae/book/getbookingsbyref?ref=${ref}`);\r\n    }\r\n\r\n    static getBookingById = (id) =>\r\n    {\r\n       return API.get(`/api/gynae/book/getbookingbyid?id=${id}`);\r\n    }\r\n\r\n    static getAllBookings = (limit) =>\r\n    {\r\n      if (!limit) limit = 25 \r\n      return API.get(`/api/gynae/book/getallbookings?limit=${limit}`);\r\n    }\r\n\r\n    static getDeletedBookings= (limit) =>\r\n    {\r\n      if (!limit) limit = 25 \r\n       return API.get(`/api/gynae/book/getdeletedbookings?limit=${limit}`);\r\n    }\r\n\r\n    static getTodayBookings= () =>\r\n    {\r\n       return API.get(`/api/gynae/book/gettodaybookings`);\r\n    }\r\n\r\n    static getOldBookings= (limit) =>\r\n    {\r\n      if (!limit) limit = 25 \r\n       return API.get(`/api/gynae/book/getoldbookings?limit=${limit}`);\r\n    }\r\n\r\n    static getFutureBookings= (limit) =>\r\n    {\r\n      if (!limit) limit = 25 \r\n       return API.get(`/api/gynae/book/getfuturebookings?limit=${limit}`);\r\n    }\r\n\r\n    static getRecentBookings= () =>\r\n    {\r\n       return API.get(`/api/gynae/book/getrecentbookings`);\r\n    }\r\n\r\n    static getRecentBookingsAll= (limit) =>\r\n    {\r\n      if (!limit) limit = 25 \r\n       return API.get(`/api/gynae/book/getrecentbookingsall?limit=${limit}`);\r\n    }\r\n}","import API from './api';\r\n\r\nexport default class PDFService {\r\n\r\n\r\n    static downloadGynaeRegForm = (id) =>\r\n    {\r\n       return API.get(`/api/pdf/downloadgynaeregform?id=${id}`, {\r\n        responseType: 'arraybuffer',\r\n        id: id,\r\n        headers: {\r\n            Accept: 'application/pdf',\r\n        }\r\n        });\r\n    }\r\n\r\n\r\n    static downloadCovidForm1 = (id) =>\r\n    {\r\n       return API.get(`/api/pdf/downloadcovidform1?id=${id}`, {\r\n        responseType: 'arraybuffer',\r\n        id: id,\r\n        headers: {\r\n            Accept: 'application/pdf',\r\n        }\r\n        });\r\n    }\r\n\r\n    static downloadCovidForm2 = (id) =>\r\n    {\r\n       return API.get(`/api/pdf/downloadcovidform2?id=${id}`, {\r\n        responseType: 'arraybuffer',\r\n        headers: {\r\n            Accept: 'application/pdf',\r\n        }\r\n        });\r\n    }\r\n\r\n    static downloadPdfResult = (id) =>\r\n    {\r\n       return API.get(`/api/pdf/downloadpdfresult?id=${id}`, {\r\n        responseType: 'arraybuffer',\r\n        headers: {\r\n            Accept: 'application/pdf',\r\n        }\r\n        });\r\n    }\r\n\r\n    static downloadPdfCert = (id) =>\r\n    {\r\n       return API.get(`/api/pdf/downloadpdfcert?id=${id}`, {\r\n        responseType: 'arraybuffer',\r\n        headers: {\r\n            Accept: 'application/pdf',\r\n        }\r\n        });\r\n    }\r\n\r\n    static downloadPdfLabReport = (id) =>\r\n    {\r\n       return API.get(`/api/pdf/downloadpdflabreport?id=${id}`, {\r\n        responseType: 'arraybuffer',\r\n        headers: {\r\n            Accept: 'application/pdf',\r\n        }\r\n        });\r\n    }\r\n\r\n\r\n}","import React, { useEffect, useRef, useState } from \"react\";\r\nimport BookService from \"./services/BookService\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport {\r\n  Backdrop,\r\n  Button,\r\n  Checkbox,\r\n  CircularProgress,\r\n  Divider,\r\n  FormControlLabel,\r\n  Grid,\r\n  InputAdornment,\r\n  InputLabel,\r\n  Link,\r\n  makeStyles,\r\n  MenuItem,\r\n  Select,\r\n  TextField,\r\n  Tooltip,\r\n} from \"@material-ui/core\";\r\nimport GlobalState from \"./../GlobalState\";\r\nimport { withStyles } from \"@material-ui/core/styles\";\r\n\r\nimport CreditCardIcon from \"@material-ui/icons/CreditCard\";\r\n\r\nimport Dialog from \"@material-ui/core/Dialog\";\r\nimport DialogContent from \"@material-ui/core/DialogContent\";\r\n\r\nimport DialogTitle from \"@material-ui/core/DialogTitle\";\r\nimport Draggable from \"react-draggable\";\r\nimport Paper from \"@material-ui/core/Paper\";\r\n\r\nimport Alert from \"@material-ui/lab/Alert\";\r\n\r\nimport PropTypes from \"prop-types\";\r\nimport LinearProgress from \"@material-ui/core/LinearProgress\";\r\nimport Box from \"@material-ui/core/Box\";\r\n\r\nimport Radio from \"@material-ui/core/Radio\";\r\nimport RadioGroup from \"@material-ui/core/RadioGroup\";\r\nimport FormControl from \"@material-ui/core/FormControl\";\r\nimport FormLabel from \"@material-ui/core/FormLabel\";\r\nimport { corporates } from \"./Corporates\";\r\nimport NumberFormat from \"react-number-format\";\r\n\r\n\r\nvar interval;\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  title: {\r\n    marginTop: theme.spacing(0),\r\n    marginBottom: theme.spacing(1),\r\n  },\r\n\r\n  refreshButton: {\r\n    marginLeft: theme.spacing(2),\r\n  },\r\n\r\n  checkIcon: {\r\n    color: \"green\",\r\n  },\r\n\r\n  closeIcon: {\r\n    color: \"red\",\r\n  },\r\n\r\n  RefLink: {\r\n    cursor: \"pointer\",\r\n  },\r\n\r\n  BookedLabel: {\r\n    backgroundColor: \"#606060\",\r\n    color: \"#fff\",\r\n    paddingRight: \"10px\",\r\n    paddingLeft: \"10px\",\r\n  },\r\n\r\n  PatientAttendedLabel: {\r\n    backgroundColor: \"#0066aa\",\r\n    color: \"#fff\",\r\n    paddingRight: \"15px\",\r\n    paddingLeft: \"10px\",\r\n  },\r\n\r\n  SampleTakenLabel: {\r\n    backgroundColor: \"#0066cc\",\r\n    color: \"#fff\",\r\n    paddingRight: \"40px\",\r\n    paddingLeft: \"10px\",\r\n  },\r\n\r\n  ReportSentLabel: {\r\n    backgroundColor: \"#009900\",\r\n    color: \"#fff\",\r\n    paddingRight: \"90px\",\r\n    paddingLeft: \"10px\",\r\n  },\r\n\r\n  ReportCertSentLabel: {\r\n    backgroundColor: \"#009900\",\r\n    color: \"#fff\",\r\n    paddingRight: \"68px\",\r\n    paddingLeft: \"10px\",\r\n  },\r\n\r\n  archiveButton: {},\r\n\r\n  smartMatchButton: {\r\n    backgroundColor: \"#2f942e\",\r\n    \"&:hover\": {\r\n      background: \"green\",\r\n      color: \"#fff\",\r\n    },\r\n    textDecoration: \"none !important\",\r\n    marginRight: \"10px\",\r\n    // padding: \"10px\"\r\n  },\r\n\r\n  infoTitle: {\r\n    fontWeight: \"400\",\r\n  },\r\n\r\n  infoData: {\r\n    paddingLeft: \"10px\",\r\n    fontWeight: \"800\",\r\n  },\r\n\r\n  matchButton: {\r\n    marginTop: \"30px\",\r\n    marginBottom: \"20px\",\r\n    backgroundColor: \"#2f942e\",\r\n    \"&:hover\": {\r\n      background: \"green\",\r\n      color: \"#fff\",\r\n    },\r\n    textDecoration: \"none !important\",\r\n    padding: \"10px\",\r\n    paddingLeft: \"50px\",\r\n    paddingRight: \"50px\",\r\n  },\r\n\r\n  resendButton: {\r\n    marginTop: \"5px\",\r\n    marginBottom: \"5px\",\r\n    backgroundColor: \"#2f942e\",\r\n    \"&:hover\": {\r\n      background: \"green\",\r\n      color: \"#fff\",\r\n    },\r\n    textDecoration: \"none !important\",\r\n    padding: \"10px\",\r\n    paddingLeft: \"50px\",\r\n    paddingRight: \"50px\",\r\n  },\r\n\r\n  resendFilesButton: {\r\n    marginTop: \"5px\",\r\n    marginBottom: \"5px\",\r\n    backgroundColor: \"#3792ad\",\r\n    \"&:hover\": {\r\n      background: \"#2f798f\",\r\n      color: \"#fff\",\r\n    },\r\n    textDecoration: \"none !important\",\r\n    padding: \"10px\",\r\n    paddingLeft: \"50px\",\r\n    paddingRight: \"50px\",\r\n  },\r\n\r\n  cancelButton: {\r\n    marginBottom: \"10px\",\r\n    textDecoration: \"none !important\",\r\n    padding: \"10px\",\r\n    paddingLeft: \"90px\",\r\n    paddingRight: \"90px\",\r\n  },\r\n\r\n  backdrop: {\r\n    zIndex: theme.zIndex.drawer + 5,\r\n    color: \"#fff\",\r\n  },\r\n}));\r\n\r\nfunction NumberFormatCustom(props) {\r\n  const { inputRef, onChange, ...other } = props;\r\n\r\n  return (\r\n    <NumberFormat\r\n      {...other}\r\n      getInputRef={inputRef}\r\n      onValueChange={(values) => {\r\n        onChange({\r\n          target: {\r\n            name: props.name,\r\n            value: values.value,\r\n          },\r\n        });\r\n      }}\r\n      thousandSeparator\r\n      isNumericString\r\n      prefix=\"\"\r\n    />\r\n  );\r\n}\r\n\r\nNumberFormatCustom.propTypes = {\r\n  inputRef: PropTypes.func.isRequired,\r\n  name: PropTypes.string.isRequired,\r\n  onChange: PropTypes.func.isRequired,\r\n};\r\n\r\n\r\nconst BorderLinearProgress = withStyles((theme) => ({\r\n  root: {\r\n    height: 10,\r\n    borderRadius: 5,\r\n  },\r\n  colorPrimary: {\r\n    backgroundColor: \"#cedbce\", //theme.palette.grey[theme.palette.type === 'light' ? 200 : 700],\r\n  },\r\n  bar: {\r\n    borderRadius: 5,\r\n    backgroundColor: \"#2f942e\",\r\n  },\r\n}))(LinearProgress);\r\nfunction LinearProgressWithLabel(props) {\r\n  return (\r\n    <Box display=\"flex\" alignItems=\"center\">\r\n      <Box width=\"100%\" mr={1}>\r\n        <BorderLinearProgress variant=\"determinate\" {...props} />\r\n      </Box>\r\n      <Box minWidth={35}>\r\n        <Typography\r\n          style={{ fontWeight: \"800\", color: \"#5e855e\" }}\r\n          variant=\"body2\"\r\n          color=\"textSecondary\"\r\n        >{`${Math.round(props.value)}%`}</Typography>\r\n      </Box>\r\n    </Box>\r\n  );\r\n}\r\n\r\nLinearProgressWithLabel.propTypes = {\r\n  /**\r\n   * The value of the progress indicator for the determinate and buffer variants.\r\n   * Value between 0 and 100.\r\n   */\r\n  value: PropTypes.number.isRequired,\r\n};\r\n\r\nfunction PaperComponent(props) {\r\n  return (\r\n    <Draggable\r\n      handle=\"#draggable-dialog-title\"\r\n      cancel={'[class*=\"MuiDialogContent-root\"]'}\r\n    >\r\n      <Paper {...props} />\r\n    </Draggable>\r\n  );\r\n}\r\n\r\nexport default function PayDialog(props) {\r\n  const classes = useStyles();\r\n\r\n  const [state, setState] = React.useContext(GlobalState);\r\n  const [paymentMethod, setPaymentMethod] = useState(\"credit card\");\r\n  const [corporate, setCorporate] = useState(corporates[0]);\r\n  const [saving, setSaving] = useState(false);\r\n\r\n  const [price, setPrice] = useState(\"\");\r\n  const [priceError, setPriceError] = useState(false);\r\n\r\n  useEffect( () => {\r\n    if (props.price)\r\n    {\r\n      setPrice(`${props.price}`)\r\n    }else\r\n    {\r\n      setPrice('')\r\n    }\r\n  }, [props.price, props.open])\r\n\r\n  const priceChanged = (event) =>\r\n  {\r\n    setPrice(event.target.value)\r\n    setPriceError(false)\r\n  }\r\n\r\n  const paymentMethodChanged = (event) => {\r\n    setPaymentMethod(event.target.value);\r\n  };\r\n\r\n  const handleClose = () => {\r\n    if (saving) return;\r\n\r\n    props.handleClose();\r\n    setPaymentMethod(\"credit card\");\r\n    setPrice('')\r\n    setCorporate(corporates[0]);\r\n    setSaving(false);\r\n  };\r\n\r\n  const corporateChanged = (event) => {\r\n    setCorporate(event.target.value);\r\n  };\r\n\r\n  const payClicked = async () => {\r\n\r\n\r\n    if (!price || price.trim().length === 0 || price === '0')\r\n    {\r\n      setPriceError(true)\r\n      return\r\n    }\r\n\r\n    setSaving(true);\r\n\r\n  \r\n\r\n    try {\r\n      await BookService.payBooking(\r\n        props.booking._id,\r\n        price,\r\n        paymentMethod,\r\n        paymentMethod === \"corporate\" ? corporate : \"\"\r\n      );\r\n      setSaving(false);\r\n      setState((state) => ({\r\n        ...state,\r\n        bookingPayChanged: !state.bookingPayChanged ? true : false,\r\n      }));\r\n      handleClose();\r\n    } catch (err) {\r\n      console.error(err);\r\n      setSaving(false);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <React.Fragment>\r\n      {props.booking && (\r\n        <React.Fragment>\r\n          <Dialog\r\n            maxWidth=\"xs\"\r\n            open={props.open}\r\n            onClose={handleClose}\r\n            PaperComponent={PaperComponent}\r\n            aria-labelledby=\"form-dialog-title\"\r\n          >\r\n            <DialogTitle id=\"draggable-dialog-title\">\r\n              <Grid\r\n                container\r\n                spacing={2}\r\n                direction=\"row\"\r\n                justify=\"center\"\r\n                alignItems=\"center\"\r\n              >\r\n                <Grid item>\r\n                  <CreditCardIcon\r\n                    style={{ color: \"#f50057\", fontSize: \"3rem\" }}\r\n                  />\r\n                </Grid>\r\n\r\n                <Grid item>\r\n                  <div\r\n                    style={{\r\n                      color: \"#f50057\",\r\n                      paddingBottom: \"10px\",\r\n                      fontWeight: \"800\",\r\n                    }}\r\n                  >\r\n                    {\" \"}\r\n                    PAY the CHARGE{\" \"}\r\n                  </div>\r\n                </Grid>\r\n              </Grid>\r\n\r\n              <Divider />\r\n            </DialogTitle>\r\n            <DialogContent>\r\n              <div\r\n                style={{\r\n                  height: \"300px\",\r\n                }}\r\n              >\r\n                <Grid\r\n                  container\r\n                  direction=\"column\"\r\n                  justify=\"space-between\"\r\n                  spacing={2}\r\n                  alignItems=\"flex-start\"\r\n                >\r\n                  <Grid item>\r\n                  <TextField\r\n                                autoFocus\r\n                                error={priceError}\r\n                                label=\"OTC Charges\"\r\n                                value={price}\r\n                                fullWidth\r\n                                required\r\n                                onChange={priceChanged}\r\n                                name=\"product-price\"\r\n                                id=\"product-price-id\"\r\n                                InputProps={{\r\n                                  inputComponent: NumberFormatCustom,\r\n                                  startAdornment: (\r\n                                    <InputAdornment position=\"start\">\r\n                                      £\r\n                                    </InputAdornment>\r\n                                  ),\r\n                                }}\r\n                              />\r\n\r\n                  </Grid>\r\n\r\n                  <Grid item>\r\n                    <div style={{ fontSize: \"17px\" }}>\r\n                      {\" \"}\r\n                      How do you want to pay?{\" \"}\r\n                    </div>\r\n                  </Grid>\r\n\r\n                  <Grid item>\r\n                    <FormControl component=\"fieldset\">\r\n                      <RadioGroup\r\n                        aria-label=\"paymentMethod\"\r\n                        name=\"paymentMethod\"\r\n                        value={paymentMethod}\r\n                        onChange={paymentMethodChanged}\r\n                      >\r\n                        <FormControlLabel\r\n                          value=\"credit card\"\r\n                          control={<Radio />}\r\n                          label=\"Credit Card\"\r\n                        />\r\n                        <FormControlLabel\r\n                          value=\"cash\"\r\n                          control={<Radio />}\r\n                          label=\"Cash\"\r\n                        />\r\n                        <FormControlLabel\r\n                          value=\"corporate\"\r\n                          control={<Radio />}\r\n                          label=\"Corporate\"\r\n                        />\r\n                      </RadioGroup>\r\n\r\n                      {paymentMethod === \"corporate\" && (\r\n                        <FormControl\r\n                          style={{ marginTop: \"10px\" }}\r\n                          className={classes.formControl}\r\n                        >\r\n                          <Select\r\n                            labelId=\"select-corporate\"\r\n                            id=\"select-corporate-id\"\r\n                            value={corporate}\r\n                            onChange={corporateChanged}\r\n                          >\r\n                            {corporates.map((element) => (\r\n                              <MenuItem\r\n                                value={element}\r\n                              >{`${element}`}</MenuItem>\r\n                            ))}\r\n                          </Select>\r\n                        </FormControl>\r\n                      )}\r\n                    </FormControl>\r\n                  </Grid>\r\n                </Grid>\r\n\r\n                <Grid item></Grid>\r\n\r\n                <div\r\n                  style={{\r\n                    position: \"absolute\",\r\n                    bottom: \"20px\",\r\n                    right: \"20px\",\r\n                  }}\r\n                >\r\n                  <Grid\r\n                    container\r\n                    direction=\"row\"\r\n                    justify=\"flex-end\"\r\n                    alignItems=\"center\"\r\n                    spacing={1}\r\n                  >\r\n                    <Grid item>\r\n                      <Button\r\n                        onClick={handleClose}\r\n                        style={{ width: \"100px\" }}\r\n                        disabled={saving}\r\n                      >\r\n                        back\r\n                      </Button>\r\n                    </Grid>\r\n                    <Grid item>\r\n                      <Button\r\n                        onClick={payClicked}\r\n                        variant=\"contained\"\r\n                        color=\"secondary\"\r\n                        style={{ width: \"100px\" }}\r\n                        disabled={saving}\r\n                      >\r\n                        Pay\r\n                      </Button>\r\n                    </Grid>\r\n                  </Grid>\r\n                </div>\r\n              </div>\r\n\r\n              <Backdrop className={classes.backdrop} open={saving}>\r\n                <CircularProgress color=\"inherit\" />\r\n              </Backdrop>\r\n            </DialogContent>\r\n          </Dialog>\r\n        </React.Fragment>\r\n      )}\r\n    </React.Fragment>\r\n  );\r\n}\r\n","import React, { useEffect, useState } from \"react\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport GlobalState from \"./../GlobalState\";\r\nimport Grid from \"@material-ui/core/Grid\";\r\nimport {\r\n  Button,\r\n  Checkbox,\r\n  DialogActions,\r\n  DialogContentText,\r\n  Divider,\r\n  FormControlLabel,\r\n  IconButton,\r\n  Switch,\r\n  TextField,\r\n  Tooltip,\r\n} from \"@material-ui/core\";\r\nimport PDFService from \"./services/PDFService\";\r\n\r\nimport { calculatePrice } from \"./PriceCalculator\";\r\n\r\nimport bookingService from \"./services/BookService\";\r\nimport CheckIcon from \"@material-ui/icons/Check\";\r\nimport CloseIcon from \"@material-ui/icons/Close\";\r\n\r\nimport Dialog from \"@material-ui/core/Dialog\";\r\nimport DialogContent from \"@material-ui/core/DialogContent\";\r\nimport DialogTitle from \"@material-ui/core/DialogTitle\";\r\nimport Draggable from \"react-draggable\";\r\nimport Slide from \"@material-ui/core/Slide\";\r\n\r\nimport Paper from \"@material-ui/core/Paper\";\r\n\r\nimport DeleteIcon from \"@material-ui/icons/Delete\";\r\nimport BookService from \"./services/BookService\";\r\n\r\nimport Backdrop from \"@material-ui/core/Backdrop\";\r\nimport CircularProgress from \"@material-ui/core/CircularProgress\";\r\nimport {\r\n  FormatDateFromString,\r\n  RevertFormatDateFromString,\r\n} from \"./DateFormatter\";\r\nimport PayDialog from \"./PayDialog\";\r\n\r\nimport PrintIcon from \"@material-ui/icons/Print\";\r\nimport UndoIcon from \"@material-ui/icons/Undo\";\r\n\r\nimport SendIcon from \"@material-ui/icons/Send\";\r\n\r\nimport HistoryIcon from \"@material-ui/icons/History\";\r\n\r\nimport FileCopyOutlinedIcon from \"@material-ui/icons/FileCopyOutlined\";\r\nimport { CalendarColors } from \"../Admin/calendar-admin/colors\";\r\nimport InvoiceService from \"../services/InvoiceService\";\r\nimport InvoiceDialog from \"../InvoiceDialog\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  box: {\r\n    backgroundColor: \"#373737\",\r\n    color: \"#fff\",\r\n    padding: \"1px\",\r\n    borderRadius: \"4px\",\r\n    textAlign: \"justify\",\r\n    paddingRight: \"40px\",\r\n  },\r\n\r\n  boxRed: {\r\n    backgroundColor: \"#dc2626\",\r\n    color: \"#fff\",\r\n    padding: \"1px\",\r\n    borderRadius: \"4px\",\r\n    textAlign: \"justify\",\r\n    paddingRight: \"40px\",\r\n  },\r\n\r\n  boxInfo: {\r\n    textAlign: \"justify\",\r\n    backgroundColor: \"#fafafa\",\r\n    color: \"#333\",\r\n    padding: \"1px\",\r\n    borderRadius: \"4px\",\r\n    paddingRight: \"40px\",\r\n    border: \"1px solid #eee\",\r\n  },\r\n\r\n  ul: {\r\n    listStyle: \"none\",\r\n    padding: \"0\",\r\n    margin: \"0\",\r\n  },\r\n\r\n  li: {\r\n    marginBottom: \"15px\",\r\n  },\r\n\r\n  icon: {\r\n    marginRight: \"8px\",\r\n  },\r\n\r\n  root: {\r\n    width: \"100%\",\r\n  },\r\n\r\n  lineThrough: {\r\n    textDecoration: \"line-through\",\r\n  },\r\n\r\n  heading: {\r\n    fontSize: theme.typography.pxToRem(15),\r\n    flexBasis: \"33.33%\",\r\n    flexShrink: 0,\r\n    color: theme.palette.text.secondary,\r\n  },\r\n  secondaryHeading: {\r\n    fontSize: theme.typography.pxToRem(15),\r\n  },\r\n\r\n  infoDetails: {\r\n    textAlign: \"left\",\r\n  },\r\n\r\n  infoTitle: {\r\n    fontWeight: \"800\",\r\n    marginRight: \"10px\",\r\n  },\r\n\r\n  infoData: {\r\n    fontWeight: \"400\",\r\n  },\r\n\r\n  title: {\r\n    textAlign: \"center\",\r\n    fontWeight: \"600\",\r\n    marginLeft: \"10px\",\r\n    marginBottom: \"5px\",\r\n  },\r\n\r\n  Accordion: {\r\n    backgroundColor: \"#f5f5f5\",\r\n    color: \"#222\",\r\n  },\r\n\r\n  AccordionDeleted: {\r\n    backgroundColor: \"#aaa\",\r\n    color: \"#555\",\r\n  },\r\n\r\n  DownloadForm: {\r\n    marginTop: \"10px\",\r\n    marginBottom: \"10px\",\r\n  },\r\n\r\n  infoDataCharges: {\r\n    fontSize: \"18px\",\r\n    color: \"green\",\r\n    fontWeight: \"600\",\r\n  },\r\n\r\n  infoDataChargesHigher: {\r\n    fontSize: \"18px\",\r\n    color: \"red\",\r\n    fontWeight: \"600\",\r\n  },\r\n  BookedLabel: {\r\n    color: \"#606060\",\r\n    paddingLeft: \"5px\",\r\n    paddingBottom: \"3px\",\r\n    paddingTop: \"3px\",\r\n    fontWeight: \"800\",\r\n    borderLeft: \"5px solid\",\r\n    borderColor: \"#606060\",\r\n    width: \"150px\",\r\n    display: \"inline-block\",\r\n  },\r\n\r\n  PatientAttendedLabel: {\r\n    color: \"#0066aa\",\r\n    paddingLeft: \"5px\",\r\n    paddingBottom: \"3px\",\r\n    paddingTop: \"3px\",\r\n    fontWeight: \"800\",\r\n    borderLeft: \"5px solid\",\r\n    borderColor: \"#0066aa\",\r\n    width: \"150px\",\r\n    display: \"inline-block\",\r\n  },\r\n\r\n  SampleTakenLabel: {\r\n    color: \"#0066cc\",\r\n    paddingRight: \"10px\",\r\n    paddingLeft: \"5px\",\r\n    paddingBottom: \"3px\",\r\n    paddingTop: \"3px\",\r\n    fontWeight: \"800\",\r\n    borderLeft: \"5px solid\",\r\n    borderColor: \"#0066cc\",\r\n  },\r\n\r\n  ReportSentLabel: {\r\n    color: \"#009900\",\r\n    paddingRight: \"10px\",\r\n    paddingLeft: \"5px\",\r\n    paddingBottom: \"3px\",\r\n    paddingTop: \"3px\",\r\n    fontWeight: \"800\",\r\n    borderLeft: \"5px solid\",\r\n    borderColor: \"#009900\",\r\n  },\r\n\r\n  ReportCertSentLabel: {\r\n    color: \"#009900\",\r\n    paddingRight: \"10px\",\r\n    paddingLeft: \"5px\",\r\n    paddingBottom: \"3px\",\r\n    paddingTop: \"3px\",\r\n    fontWeight: \"800\",\r\n    borderLeft: \"5px solid\",\r\n    borderColor: \"#009900\",\r\n  },\r\n\r\n  PositiveLabel: {\r\n    color: \"red\",\r\n    paddingRight: \"10px\",\r\n    paddingLeft: \"5px\",\r\n    paddingBottom: \"3px\",\r\n    paddingTop: \"3px\",\r\n    fontWeight: \"800\",\r\n    borderLeft: \"5px solid\",\r\n    borderColor: \"red\",\r\n  },\r\n\r\n  EditButton: {\r\n    marginBottom: \"20px\",\r\n    backgroundColor: \"#2f942e\",\r\n    \"&:hover\": {\r\n      background: \"green\",\r\n      color: \"#fff\",\r\n    },\r\n    textDecoration: \"none !important\",\r\n    padding: \"10px\",\r\n  },\r\n\r\n  ResendEmailsButton: {\r\n    // marginBottom : \"20px\",\r\n    color: \"#2f942e\",\r\n    borderColor: \"#2f942e\",\r\n    \"&:hover\": {\r\n      background: \"#fafffa\",\r\n      borderColor: \"#2f942e\",\r\n    },\r\n    textDecoration: \"none !important\",\r\n    paddingLeft: \"50px\",\r\n    paddingRight: \"50px\",\r\n  },\r\n\r\n  PayButton: {\r\n    marginLeft: \"70px\",\r\n    width: \"300px\",\r\n  },\r\n\r\n  PayLabel: {\r\n    marginLeft: \"20px\",\r\n\r\n    color: \"#2f942e\",\r\n    fontWeight: \"500\",\r\n    textAlign: \"center\",\r\n  },\r\n\r\n  RestoreButton: {\r\n    marginBottom: \"20px\",\r\n    backgroundColor: \"#eee\",\r\n    color: \"#333\",\r\n    \"&:hover\": {\r\n      background: \"#f1f1f1\",\r\n      color: \"#111\",\r\n    },\r\n    textDecoration: \"none !important\",\r\n    padding: \"10px\",\r\n  },\r\n\r\n  DeleteButton: {\r\n    marginBottom: \"20px\",\r\n    backgroundColor: \"#d90015\",\r\n    \"&:hover\": {\r\n      background: \"#b80012\",\r\n      color: \"#fff\",\r\n    },\r\n\r\n    padding: \"10px\",\r\n  },\r\n\r\n  SaveButton: {\r\n    marginBottom: \"10px\",\r\n    padding: \"10px\",\r\n\r\n    backgroundColor: \"#d1175e\",\r\n    \"&:hover\": {\r\n      background: \"#bd0d50\",\r\n      color: \"#fff\",\r\n    },\r\n  },\r\n\r\n  CancelButton: {\r\n    marginBottom: \"20px\",\r\n    // padding: \"10px\"\r\n  },\r\n\r\n  TextBox: {\r\n    padding: \"0px\",\r\n  },\r\n\r\n  checkIcon: {\r\n    color: \"green\",\r\n  },\r\n\r\n  checkIconSmall: {\r\n    color: \"green\",\r\n    paddingTop: \"5px\",\r\n  },\r\n\r\n  closeIcon: {\r\n    color: \"red\",\r\n  },\r\n\r\n  centeredLabel: {\r\n    display: \"flex\",\r\n    alignItems: \"center\",\r\n  },\r\n\r\n  backdrop: {\r\n    zIndex: theme.zIndex.drawer + 5,\r\n    color: \"#fff\",\r\n  },\r\n\r\n  PriceLabelPaid: {\r\n    color: theme.palette.primary.main,\r\n    fontWeight: \"600\",\r\n  },\r\n\r\n  PriceLabelNotPaid: {\r\n    color: theme.palette.secondary.main,\r\n    fontWeight: \"600\",\r\n  },\r\n\r\n  invoiceNumber: {\r\n    display: \"inline-block\",\r\n    fontWeight: \"500\",\r\n    width: \"72px\",\r\n    fontSize: \"1rem\",\r\n    color: theme.palette.primary.main,\r\n  },\r\n\r\n  printInvoiceButton: {\r\n    marginLeft: \"70px\",\r\n    fontSize: \"0.8rem\",\r\n    // width: \"300px\",\r\n  },\r\n\r\n  editInvoiceButton: {\r\n    marginLeft: \"10px\",\r\n    fontSize: \"0.8rem\",\r\n  },\r\n}));\r\n\r\nconst Transition = React.forwardRef(function Transition(props, ref) {\r\n  return <Slide direction=\"up\" ref={ref} {...props} />;\r\n});\r\n\r\nfunction PaperComponent(props) {\r\n  return (\r\n    <Draggable\r\n      handle=\"#alert-dialog-slide-title\"\r\n      cancel={'[class*=\"MuiDialogContent-root\"]'}\r\n    >\r\n      <Paper {...props} />\r\n    </Draggable>\r\n  );\r\n}\r\n\r\nexport default function BookingDialog(props) {\r\n  const classes = useStyles();\r\n\r\n  const [state, setState] = React.useContext(GlobalState);\r\n\r\n  const [copied, setCopied] = useState(false);\r\n\r\n  const [emailSent, setEmailSent] = React.useState(false);\r\n\r\n  const [openResendDialog, setOpenResendDialog] = React.useState(false);\r\n  const [openPayDialog, setOpenPayDialog] = React.useState(false);\r\n  const [openRefundDialog, setOpenRefundDialog] = React.useState(false);\r\n\r\n  const [selectedBooking, setSelectedBooking] = React.useState(null);\r\n\r\n  const [editMode, setEditMode] = React.useState({ edit: false, person: null });\r\n  const [deleteMode, setDeleteMode] = React.useState({\r\n    delete: false,\r\n    person: null,\r\n  });\r\n  const [restoreMode, setRestoreMode] = React.useState({\r\n    restore: false,\r\n    person: null,\r\n  });\r\n\r\n  const [saving, setSaving] = React.useState(false);\r\n  const [deleting, setDeleting] = React.useState(false);\r\n  const [restoring, setRestoring] = React.useState(false);\r\n\r\n  const [validationError, setValidationError] = React.useState({});\r\n\r\n  const [bookingDate, setBookingDate] = React.useState(\"\");\r\n  const [bookingTime, setBookingTime] = React.useState(\"\");\r\n\r\n  const [fullname, setFullname] = React.useState(\"\");\r\n  const [email, setEmail] = React.useState(\"\");\r\n  const [tel, setTel] = React.useState(\"\");\r\n  const [notes, setNotes] = React.useState(\"\");\r\n  const [service, setService] = React.useState(\"\");\r\n\r\n  const [refreshData, setRefreshData] = React.useState(false);\r\n\r\n  const [booking, setBooking] = React.useState(null);\r\n\r\n  const [recordChanged, setRecordChanged] = React.useState(false);\r\n\r\n  const [fieldChanged, setFieldChanged] = React.useState(false);\r\n\r\n  const [openUndoPayDialog, setOpenUndoPayDialog] = React.useState(false);\r\n\r\n  const [openTimeStampDialog, setOpenTimeStampDialog] = React.useState(false);\r\n\r\n  const handleCloseUndoPayDialog = () => {\r\n    setOpenUndoPayDialog(false);\r\n    setSelectedBooking(null);\r\n  };\r\n\r\n  const handleClosePayDialog = () => {\r\n    setOpenPayDialog(false);\r\n    setSelectedBooking(null);\r\n  };\r\n\r\n  const handleCloseRefundDialog = () => {\r\n    setOpenRefundDialog(false);\r\n    setSelectedBooking(null);\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (booking) {\r\n      const isChanged =\r\n        bookingDate !== FormatDateFromString(booking.bookingDate) ||\r\n        bookingTime !== booking.bookingTime ||\r\n        fullname !== booking.fullname ||\r\n        email !== booking.email ||\r\n        tel !== booking.phone ||\r\n        service !== booking.service ||\r\n        notes !== booking.notes;\r\n\r\n      setRecordChanged(isChanged);\r\n    }\r\n  }, [fieldChanged]);\r\n\r\n  useEffect(() => {\r\n    if (!props.open) {\r\n      setTimeout(() => {\r\n        setEditMode({ edit: false, person: null });\r\n        setRecordChanged(false);\r\n      }, 500);\r\n    }\r\n  }, [props.open]);\r\n\r\n  const bookingDateChanged = (event) => {\r\n    setBookingDate(event.target.value);\r\n    setValidationError({ ...validationError, bookingDateError: false });\r\n    setFieldChanged(!fieldChanged);\r\n  };\r\n\r\n  const bookingTimeChanged = (event) => {\r\n    setBookingTime(event.target.value);\r\n    setValidationError({ ...validationError, bookingTimeError: false });\r\n    setFieldChanged(!fieldChanged);\r\n  };\r\n\r\n  const fullnameChanged = (event) => {\r\n    setFullname(event.target.value);\r\n    setFieldChanged(!fieldChanged);\r\n  };\r\n\r\n  const emailChanged = (event) => {\r\n    setEmail(event.target.value);\r\n    setFieldChanged(!fieldChanged);\r\n  };\r\n\r\n  const telChanged = (event) => {\r\n    setTel(event.target.value);\r\n    setFieldChanged(!fieldChanged);\r\n  };\r\n\r\n  const serviceChanged = (event) => {\r\n    setService(event.target.value);\r\n    setFieldChanged(!fieldChanged);\r\n  };\r\n\r\n  const notesChanged = (event) => {\r\n    setNotes(event.target.value);\r\n    setFieldChanged(!fieldChanged);\r\n  };\r\n\r\n  const getStatusLabel = (status) => {\r\n    if (status === \"booked\") {\r\n      return <div className={classes.BookedLabel}> Booking Made </div>;\r\n    } else if (status === \"patient_attended\") {\r\n      return (\r\n        <div className={classes.PatientAttendedLabel}> Patient Attended </div>\r\n      );\r\n    } else {\r\n      return \"Unknown\";\r\n    }\r\n  };\r\n\r\n  const handleEditModeChanged = (edit, person) => {\r\n    if (edit) {\r\n      setFullname(person.fullname);\r\n      setBookingDate(FormatDateFromString(person.bookingDate));\r\n      setBookingTime(person.bookingTime.toUpperCase());\r\n      setEmail(person.email);\r\n      setTel(person.phone);\r\n      setService(person.service);\r\n      if (person.notes) {\r\n        setNotes(person.notes);\r\n      }\r\n\r\n      setEditMode({ edit: edit, person: person });\r\n    } else if (!edit && !person) {\r\n      setEditMode({ edit: edit, person: person });\r\n      setRecordChanged(false);\r\n    } else if (!edit && person) {\r\n      const booking = {};\r\n      const bookingId = person._id;\r\n      booking.email = email;\r\n      booking.phone = tel;\r\n      booking.fullname = fullname;\r\n      booking.notes = notes;\r\n      booking.service = service;\r\n      booking.bookingDate = RevertFormatDateFromString(bookingDate);\r\n      booking.bookingTime = bookingTime;\r\n      booking.bookingRef = person.bookingRef;\r\n\r\n      if (validateBooking(booking)) {\r\n        updateBooking({ bookingId: bookingId, person: booking });\r\n      }\r\n    }\r\n  };\r\n\r\n  const validateDate = (str) => {\r\n    var error = false;\r\n    if (!str || str.length !== 10) {\r\n      error = true;\r\n    }\r\n\r\n    if (str.charAt(4) !== \"-\" || str.charAt(7) !== \"-\") {\r\n      error = true;\r\n    }\r\n\r\n    try {\r\n      const result = /^\\d{4}-\\d{2}-\\d{2}$/.test(str);\r\n      if (!result) {\r\n        error = true;\r\n      }\r\n\r\n      const year = parseInt(str.substr(0, 4));\r\n      const month = parseInt(str.substr(5, 2));\r\n      const day = parseInt(str.substr(8, 2));\r\n\r\n      if (year < 1900) {\r\n        error = true;\r\n      }\r\n\r\n      if (month < 1 || month > 12) {\r\n        error = true;\r\n      }\r\n\r\n      if (day > 31) {\r\n        error = true;\r\n      }\r\n    } catch (err) {\r\n      error = true;\r\n    }\r\n\r\n    return !error;\r\n  };\r\n\r\n  const validateTime = (str) => {\r\n    var error = false;\r\n\r\n    const result = /^\\d{2}:\\d{2} AM$|^\\d{2}:\\d{2} PM$/.test(str);\r\n    if (!result) {\r\n      error = true;\r\n    }\r\n\r\n    try {\r\n      const hour = parseInt(str.substr(0, 2));\r\n      const minute = parseInt(str.substr(3, 2));\r\n\r\n      if (hour < 0 || hour > 12) {\r\n        error = true;\r\n      }\r\n\r\n      if (minute < 0 || minute > 59) {\r\n        error = true;\r\n      }\r\n    } catch (err) {\r\n      error = true;\r\n    }\r\n\r\n    return !error;\r\n  };\r\n\r\n  const validateBooking = (booking) => {\r\n    var error = false;\r\n\r\n    if (!validateDate(booking.bookingDate)) {\r\n      error = true;\r\n      setValidationError({ ...validationError, bookingDateError: true });\r\n    }\r\n\r\n    if (!validateTime(booking.bookingTime)) {\r\n      error = true;\r\n      setValidationError({ ...validationError, bookingTimeError: true });\r\n    }\r\n    return !error;\r\n  };\r\n\r\n  const updateBooking = (payload) => {\r\n    setSaving(true);\r\n    bookingService\r\n      .updateBooking(payload)\r\n      .then((res) => {\r\n        setSaving(false);\r\n        setEditMode({ edit: false, person: null });\r\n        setRefreshData(!refreshData);\r\n      })\r\n      .catch((err) => {\r\n        setSaving(false);\r\n        setEditMode({ edit: false, person: null });\r\n        console.log(err);\r\n      });\r\n  };\r\n\r\n  const deleteBooking = (id) => {\r\n    setDeleting(true);\r\n    bookingService\r\n      .deleteBooking(id)\r\n      .then((res) => {\r\n        setDeleting(false);\r\n        setDeleteMode({ delete: false, person: null });\r\n        setRefreshData(!refreshData);\r\n      })\r\n      .catch((err) => {\r\n        setDeleting(false);\r\n        setDeleteMode({ delete: false, person: null });\r\n        console.log(err);\r\n      });\r\n  };\r\n\r\n  const restoreBooking = (id) => {\r\n    setRestoring(true);\r\n    bookingService\r\n      .unDeleteBooking(id)\r\n      .then((res) => {\r\n        setRestoring(false);\r\n        setRestoreMode({ restore: false, person: null });\r\n        setRefreshData(!refreshData);\r\n      })\r\n      .catch((err) => {\r\n        setRestoring(false);\r\n        setRestoreMode({ restore: false, person: null });\r\n        console.log(err);\r\n      });\r\n  };\r\n\r\n  const handleDeleteModeChanged = (del, person) => {\r\n    if (del) {\r\n      setDeleteMode({ delete: del, person: person });\r\n    } else if (!del && !person) {\r\n      setDeleteMode({ delete: del, person: person });\r\n    } else if (!del && person) {\r\n      deleteBooking(person._id);\r\n    }\r\n  };\r\n\r\n  const handleRestoreModeChanged = (restore, person) => {\r\n    if (restore) {\r\n      setRestoreMode({ restore: restore, person: person });\r\n    } else if (!restore && !person) {\r\n      setRestoreMode({ restore: restore, person: person });\r\n    } else if (!restore && person) {\r\n      restoreBooking(person._id);\r\n    }\r\n  };\r\n\r\n  const changeBackToBookingMade = (event, id) => {\r\n    setSaving(true);\r\n    BookService.changeBackToBookingMade(id)\r\n      .then((res) => {\r\n        setSaving(false);\r\n        setRefreshData(!refreshData);\r\n      })\r\n      .catch((err) => {\r\n        console.log(err);\r\n        setSaving(false);\r\n      });\r\n  };\r\n\r\n  const changeToPatientAttended = (event, id) => {\r\n    setSaving(true);\r\n    BookService.changeToPatientAttended(id)\r\n      .then((res) => {\r\n        setSaving(false);\r\n        setRefreshData(!refreshData);\r\n      })\r\n      .catch((err) => {\r\n        console.log(err);\r\n        setSaving(false);\r\n      });\r\n  };\r\n\r\n  const Pay = (event, id) => {\r\n    setSelectedBooking(booking);\r\n    setOpenPayDialog(true);\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (props.booking) {\r\n      BookService.getBookingById(props.booking._id)\r\n        .then((res) => {\r\n          setBooking(res.data);\r\n        })\r\n        .catch((err) => {\r\n          console.log(err);\r\n        });\r\n\r\n      setState((state) => ({\r\n        ...state,\r\n        bookingDialogDataChanged: !state.bookingDialogDataChanged\r\n          ? true\r\n          : false,\r\n      }));\r\n    }\r\n  }, [refreshData, state.bookingPayChanged]);\r\n\r\n  useEffect(() => {\r\n    if (props.booking) {\r\n      setBooking(props.booking);\r\n    }\r\n  }, [props.booking]);\r\n\r\n  const undoPaymentClicked = async () => {\r\n    setSaving(true);\r\n    try {\r\n      await BookService.unPayBooking(booking._id);\r\n      setSaving(false);\r\n      setOpenUndoPayDialog(false);\r\n      setRefreshData(!refreshData);\r\n    } catch (err) {\r\n      console.error(err);\r\n      setSaving(false);\r\n      setOpenUndoPayDialog(false);\r\n    }\r\n  };\r\n\r\n  const refundPaymentClicked = async () => {\r\n    setSaving(true);\r\n    try {\r\n      await BookService.refundBooking(booking._id);\r\n      setSaving(false);\r\n      updateShouldRefundsCount();\r\n      setOpenRefundDialog(false);\r\n      setRefreshData(!refreshData);\r\n    } catch (err) {\r\n      console.error(err);\r\n      setSaving(false);\r\n      setOpenRefundDialog(false);\r\n    }\r\n  };\r\n\r\n  const updateShouldRefundsCount = async () => {\r\n    try {\r\n      const res = await BookService.getShouldRefundsCount();\r\n      if (res && res.data && res.data.status === \"OK\") {\r\n        setState((state) => ({ ...state, shouldRefunsCount: res.data.count }));\r\n      }\r\n    } catch (ex) {\r\n      console.error(ex);\r\n    }\r\n  };\r\n\r\n  const downloadRegForm = (id) => {\r\n    PDFService.downloadGynaeRegForm(id)\r\n      .then((res) => {\r\n        const file = new Blob([res.data], { type: \"application/pdf\" });\r\n\r\n        const fileURL = URL.createObjectURL(file);\r\n        window.open(fileURL, \"_blank\");\r\n      })\r\n      .catch((err) => {\r\n        console.log(err);\r\n      });\r\n  };\r\n\r\n  const sendRegForm = (id) => {\r\n    setSaving(true);\r\n    setEmailSent(false);\r\n    BookService.sendRegFormEmail(id)\r\n      .then((res) => {\r\n        setSaving(false);\r\n        if (res.data.status === \"OK\") {\r\n          setEmailSent(true);\r\n        }\r\n      })\r\n      .catch((err) => {\r\n        console.log(err);\r\n        setSaving(false);\r\n      });\r\n  };\r\n\r\n  const manualRefund = async () => {\r\n    setSaving(true);\r\n    try {\r\n      await BookService.manualRefundBooking(booking._id);\r\n      setSaving(false);\r\n      updateShouldRefundsCount();\r\n      setRefreshData(!refreshData);\r\n    } catch (err) {\r\n      console.error(err);\r\n      setSaving(false);\r\n      setOpenRefundDialog(false);\r\n    }\r\n  };\r\n\r\n  const depositChanged = async (event) => {\r\n    const checked = event.target.checked;\r\n    const deposit = checked ? 100 : 0;\r\n    setSaving(true);\r\n    try {\r\n      await BookService.changeDepositBooking(booking._id, deposit);\r\n      setSaving(false);\r\n      setRefreshData(!refreshData);\r\n    } catch (err) {\r\n      console.error(err);\r\n      setSaving(false);\r\n    }\r\n  };\r\n\r\n  const onClose = () => {\r\n    setEmailSent(false);\r\n    setEmailSentInvoice(false);\r\n    setInvoice(null);\r\n    props.onClose();\r\n  };\r\n\r\n  ///*** Invoice  ******************/\r\n\r\n  const [invoice, setInvoice] = React.useState(null);\r\n  const [invoiceLoaded, setInvoiceLoaded] = React.useState(false);\r\n  const [openInvoiceDialog, setOpenInvoiceDialog] = React.useState(false);\r\n  const [emailSentInvoice, setEmailSentInvoice] = React.useState(false);\r\n\r\n  const fetchInvoice = async () => {\r\n    try {\r\n      setInvoiceLoaded(false);\r\n      const res = await InvoiceService.getInvoiceByBookingId(props.booking._id);\r\n      setInvoice(res.data.invoice);\r\n      setInvoiceLoaded(true);\r\n    } catch (err) {\r\n      setInvoiceLoaded(true);\r\n      console.error(err);\r\n    }\r\n  };\r\n\r\n  React.useEffect(() => {\r\n    if (props.booking) {\r\n      fetchInvoice();\r\n    }\r\n  }, [props.booking, props.open]);\r\n\r\n  const handleCloseInvoiceDialog = (refresh) => {\r\n    setOpenInvoiceDialog(false);\r\n    setSelectedBooking(null);\r\n    fetchInvoice();\r\n  };\r\n\r\n  const OpenInvoiceDialog = () => {\r\n    setSelectedBooking(booking);\r\n    setInvoice(invoice);\r\n    setOpenInvoiceDialog(true);\r\n  };\r\n\r\n  const downloadInvoice = (id) => {\r\n    InvoiceService.downloadInvoice(id)\r\n      .then((res) => {\r\n        const file = new Blob([res.data], { type: \"application/pdf\" });\r\n\r\n        const fileURL = URL.createObjectURL(file);\r\n        window.open(fileURL, \"_blank\");\r\n      })\r\n      .catch((err) => {\r\n        console.log(err);\r\n      });\r\n  };\r\n\r\n  const sendInvoiceEmail = (id, _email) => {\r\n    setSaving(true);\r\n    setEmailSentInvoice(false);\r\n    InvoiceService.emailInvoice(id, _email)\r\n      .then((res) => {\r\n        setSaving(false);\r\n        if (res.data.status === \"OK\") {\r\n          setEmailSentInvoice(true);\r\n        }\r\n      })\r\n      .catch((err) => {\r\n        console.log(err);\r\n        setSaving(false);\r\n      });\r\n  };\r\n\r\n  //***************************** */\r\n\r\n  return (\r\n    <React.Fragment>\r\n      {booking && (\r\n        <React.Fragment>\r\n          <Dialog\r\n            maxWidth=\"md\"\r\n            open={props.open}\r\n            TransitionComponent={Transition}\r\n            keepMounted\r\n            onClose={onClose}\r\n            PaperComponent={PaperComponent}\r\n            aria-labelledby=\"alert-dialog-slide-title\"\r\n            aria-describedby=\"alert-dialog-slide-description\"\r\n          >\r\n            <DialogTitle\r\n              id=\"alert-dialog-slide-title\"\r\n              style={\r\n                booking.tr ? { backgroundColor: \"#7e0082\", color: \"#fff\" } : {}\r\n              }\r\n            >\r\n              <div style={{ position: \"absolute\", top: \"25x\", left: \"25px\" }}>\r\n                <Tooltip title=\"COPY EDIT LINK TO CLIPBOARD\">\r\n                  <IconButton\r\n                    onClick={() => {\r\n                      navigator.clipboard.writeText(\r\n                        `https://londonmedicalclinic.co.uk/medicalexpressclinic/user/edit/gynae/${booking._id}`\r\n                      );\r\n                      setCopied(true);\r\n                      setTimeout(() => {\r\n                        setCopied(false);\r\n                      }, 1500);\r\n                    }}\r\n                    aria-label=\"delete\"\r\n                    className={classes.margin}\r\n                    size=\"small\"\r\n                  >\r\n                    <FileCopyOutlinedIcon\r\n                      style={booking.tr ? { color: \"#ddd\" } : {}}\r\n                      fontSize=\"14px\"\r\n                    />\r\n                  </IconButton>\r\n                </Tooltip>\r\n\r\n                <span\r\n                  hidden={!copied}\r\n                  style={{ fontSize: \"12px\", transition: \"all 1s ease-in\" }}\r\n                >\r\n                  {\" \"}\r\n                  Copied{\" \"}\r\n                </span>\r\n              </div>\r\n\r\n              <div\r\n                style={{\r\n                  position: \"absolute\",\r\n                  top: \"25x\",\r\n                  right: \"60px\",\r\n                  backgroundColor: CalendarColors.GYNAE_COLOR,\r\n                  color: \"#fff\",\r\n                  padding: \"0px 5px\",\r\n                  borderRadius: \"10px\",\r\n                }}\r\n              >\r\n                GYNAE\r\n              </div>\r\n\r\n              <Grid\r\n                container\r\n                direction=\"row\"\r\n                justify=\"center\"\r\n                spacing={2}\r\n                alignItems=\"center\"\r\n              >\r\n                <Grid item>\r\n                  <div\r\n                    style={\r\n                      booking.deleted\r\n                        ? {\r\n                            paddingBottom: \"5px\",\r\n                            textDecoration: \"line-through\",\r\n                          }\r\n                        : {}\r\n                    }\r\n                  >\r\n                    {`${booking.fullname}`}\r\n                  </div>\r\n                </Grid>\r\n\r\n                {booking.deleted && (\r\n                  <Grid item>\r\n                    <Tooltip title=\"This record has been deleted.\">\r\n                      <DeleteIcon\r\n                        style={\r\n                          booking.tr\r\n                            ? {\r\n                                padding: 0,\r\n                                margin: 0,\r\n                                color: \"#fff\",\r\n                                fontSize: 25,\r\n                              }\r\n                            : {\r\n                                padding: 0,\r\n                                margin: 0,\r\n                                color: \"#333\",\r\n                                fontSize: 25,\r\n                              }\r\n                        }\r\n                      />\r\n                    </Tooltip>\r\n                  </Grid>\r\n                )}\r\n              </Grid>\r\n            </DialogTitle>\r\n            <DialogContent>\r\n              <div\r\n                style={{\r\n                  // height: \"550px\",\r\n                  paddingTop: \"0px\",\r\n                }}\r\n              >\r\n                <Grid item xs={12} md={12} key={`panel0`}>\r\n                  <div className={classes.infoDetails}>\r\n                    <ul className={classes.ul}>\r\n                      {/* Restore Functionality ******************************************* */}\r\n                      <li\r\n                        hidden={\r\n                          !(\r\n                            restoreMode.restore &&\r\n                            restoreMode.person._id === booking._id\r\n                          )\r\n                        }\r\n                      >\r\n                        <div\r\n                          style={{\r\n                            fontWeight: \"500\",\r\n                            paddingBottom: \"5px\",\r\n                            paddingLeft: \"5px\",\r\n                            fontSize: \"16px\",\r\n                            color: \"#333\",\r\n                          }}\r\n                        >\r\n                          Are you sure you want to restore this record?\r\n                        </div>\r\n                      </li>\r\n\r\n                      <li\r\n                        hidden={\r\n                          !booking.deleted ||\r\n                          (restoreMode.restore &&\r\n                            restoreMode.person._id === booking._id)\r\n                        }\r\n                      >\r\n                        <Button\r\n                          type=\"button\"\r\n                          fullWidth\r\n                          variant=\"contained\"\r\n                          color=\"primary\"\r\n                          onClick={() => {\r\n                            handleRestoreModeChanged(true, booking);\r\n                          }}\r\n                          className={classes.RestoreButton}\r\n                        >\r\n                          Restore This Record\r\n                        </Button>\r\n                      </li>\r\n\r\n                      <li\r\n                        hidden={\r\n                          !(\r\n                            restoreMode.restore &&\r\n                            restoreMode.person._id === booking._id\r\n                          )\r\n                        }\r\n                      >\r\n                        <Button\r\n                          type=\"button\"\r\n                          fullWidth\r\n                          variant=\"contained\"\r\n                          color=\"primary\"\r\n                          disabled={restoring}\r\n                          onClick={() => {\r\n                            handleRestoreModeChanged(false, booking);\r\n                          }}\r\n                          className={classes.SaveButton}\r\n                        >\r\n                          YES, Restore this!\r\n                        </Button>\r\n                      </li>\r\n\r\n                      <li\r\n                        hidden={\r\n                          !(\r\n                            restoreMode.restore &&\r\n                            restoreMode.person._id === booking._id\r\n                          )\r\n                        }\r\n                      >\r\n                        <Button\r\n                          type=\"button\"\r\n                          fullWidth\r\n                          variant=\"contained\"\r\n                          color=\"default\"\r\n                          disabled={restoring}\r\n                          onClick={() => {\r\n                            handleRestoreModeChanged(false, null);\r\n                          }}\r\n                          className={classes.CancelButton}\r\n                        >\r\n                          Cancel\r\n                        </Button>\r\n                      </li>\r\n\r\n                      {/*  ******************************************************************* */}\r\n\r\n                      {/* Edit Functionality ******************************************* */}\r\n\r\n                      <li\r\n                        hidden={\r\n                          booking.deleted ||\r\n                          deleteMode.delete ||\r\n                          (editMode.edit && editMode.person._id === booking._id)\r\n                        }\r\n                      >\r\n                        <Button\r\n                          type=\"button\"\r\n                          fullWidth\r\n                          variant=\"contained\"\r\n                          color=\"primary\"\r\n                          onClick={() => {\r\n                            handleEditModeChanged(true, booking);\r\n                          }}\r\n                          className={classes.EditButton}\r\n                        >\r\n                          Edit Booking Info\r\n                        </Button>\r\n                      </li>\r\n\r\n                      <li\r\n                        hidden={\r\n                          !(\r\n                            editMode.edit && editMode.person._id === booking._id\r\n                          )\r\n                        }\r\n                      >\r\n                        <Button\r\n                          type=\"button\"\r\n                          fullWidth\r\n                          variant=\"contained\"\r\n                          color=\"primary\"\r\n                          disabled={saving || !recordChanged}\r\n                          onClick={() => {\r\n                            handleEditModeChanged(false, booking);\r\n                          }}\r\n                          className={classes.SaveButton}\r\n                        >\r\n                          Save Changes\r\n                        </Button>\r\n                      </li>\r\n\r\n                      <li\r\n                        hidden={\r\n                          !(\r\n                            editMode.edit && editMode.person._id === booking._id\r\n                          )\r\n                        }\r\n                      >\r\n                        <Button\r\n                          type=\"button\"\r\n                          fullWidth\r\n                          variant=\"contained\"\r\n                          color=\"default\"\r\n                          disabled={saving}\r\n                          onClick={() => {\r\n                            handleEditModeChanged(false, null);\r\n                          }}\r\n                          className={classes.CancelButton}\r\n                        >\r\n                          Cancel\r\n                        </Button>\r\n                      </li>\r\n\r\n                      {/* ****************************************************************************************** */}\r\n\r\n                      {/* Delete Functionality ******************************************* */}\r\n\r\n                      <li\r\n                        hidden={\r\n                          !(\r\n                            deleteMode.delete &&\r\n                            deleteMode.person._id === booking._id\r\n                          )\r\n                        }\r\n                      >\r\n                        <div\r\n                          style={{\r\n                            fontWeight: \"600\",\r\n                            paddingBottom: \"5px\",\r\n                            paddingLeft: \"5px\",\r\n                            fontSize: \"16px\",\r\n                          }}\r\n                        >\r\n                          Are you sure you want to delete this record?\r\n                        </div>\r\n                      </li>\r\n\r\n                      <li\r\n                        hidden={\r\n                          props.deleteButtonDisabled ||\r\n                          booking.deleted ||\r\n                          editMode.edit ||\r\n                          (deleteMode.delete &&\r\n                            deleteMode.person._id === booking._id)\r\n                        }\r\n                      >\r\n                        {booking.OTCCharges > 0 && (\r\n                          <Tooltip title={\"Paid Records Cannot be Deleted!\"}>\r\n                            <div>\r\n                              <Button\r\n                                disabled={booking.OTCCharges > 0}\r\n                                type=\"button\"\r\n                                fullWidth\r\n                                variant=\"contained\"\r\n                                color=\"primary\"\r\n                                onClick={() => {\r\n                                  handleDeleteModeChanged(true, booking);\r\n                                }}\r\n                                className={classes.DeleteButton}\r\n                              >\r\n                                Delete This Record\r\n                              </Button>\r\n                            </div>\r\n                          </Tooltip>\r\n                        )}\r\n                        {booking.OTCCharges === 0 && (\r\n                          <Button\r\n                            disabled={booking.OTCCharges > 0}\r\n                            type=\"button\"\r\n                            fullWidth\r\n                            variant=\"contained\"\r\n                            color=\"primary\"\r\n                            onClick={() => {\r\n                              handleDeleteModeChanged(true, booking);\r\n                            }}\r\n                            className={classes.DeleteButton}\r\n                          >\r\n                            Delete This Record\r\n                          </Button>\r\n                        )}\r\n                      </li>\r\n\r\n                      <li\r\n                        hidden={\r\n                          !(\r\n                            deleteMode.delete &&\r\n                            deleteMode.person._id === booking._id\r\n                          )\r\n                        }\r\n                      >\r\n                        <Button\r\n                          type=\"button\"\r\n                          fullWidth\r\n                          variant=\"contained\"\r\n                          color=\"primary\"\r\n                          disabled={deleting}\r\n                          onClick={() => {\r\n                            handleDeleteModeChanged(false, booking);\r\n                          }}\r\n                          className={classes.SaveButton}\r\n                        >\r\n                          YES, Delete this!\r\n                        </Button>\r\n                      </li>\r\n\r\n                      <li\r\n                        hidden={\r\n                          !(\r\n                            deleteMode.delete &&\r\n                            deleteMode.person._id === booking._id\r\n                          )\r\n                        }\r\n                      >\r\n                        <Button\r\n                          type=\"button\"\r\n                          fullWidth\r\n                          variant=\"contained\"\r\n                          color=\"default\"\r\n                          disabled={deleting}\r\n                          onClick={() => {\r\n                            handleDeleteModeChanged(false, null);\r\n                          }}\r\n                          className={classes.CancelButton}\r\n                        >\r\n                          Cancel\r\n                        </Button>\r\n                      </li>\r\n\r\n                      {/* ****************************************************************************************** */}\r\n\r\n                      <li className={classes.li}>\r\n                        <Grid container spacing={2}>\r\n                          <Grid item xs={6}>\r\n                            <span className={classes.infoTitle}>\r\n                              BOOKED DATE\r\n                            </span>\r\n\r\n                            <span\r\n                              hidden={\r\n                                editMode.edit &&\r\n                                editMode.person._id === booking._id\r\n                              }\r\n                              className={classes.infoData}\r\n                            >\r\n                              {FormatDateFromString(booking.bookingDate)}\r\n                            </span>\r\n                            <span\r\n                              hidden={\r\n                                !(\r\n                                  editMode.edit &&\r\n                                  editMode.person._id === booking._id\r\n                                )\r\n                              }\r\n                              className={classes.infoData}\r\n                            >\r\n                              <TextField\r\n                                fullWidth\r\n                                error={validationError.bookingDateError}\r\n                                className={classes.TextBox}\r\n                                value={bookingDate}\r\n                                onChange={bookingDateChanged}\r\n                                inputProps={{\r\n                                  style: {\r\n                                    padding: 0,\r\n                                  },\r\n                                }}\r\n                              ></TextField>\r\n                            </span>\r\n                          </Grid>\r\n                          <Grid item xs={6}>\r\n                            <span className={classes.infoTitle}>\r\n                              BOOKED TIME\r\n                            </span>\r\n                            <span\r\n                              hidden={\r\n                                editMode.edit &&\r\n                                editMode.person._id === booking._id\r\n                              }\r\n                              className={classes.infoData}\r\n                            >\r\n                              {booking.bookingTime.toUpperCase()}\r\n                            </span>\r\n                            <span\r\n                              hidden={\r\n                                !(\r\n                                  editMode.edit &&\r\n                                  editMode.person._id === booking._id\r\n                                )\r\n                              }\r\n                              className={classes.infoData}\r\n                            >\r\n                              <TextField\r\n                                fullWidth\r\n                                error={validationError.bookingTimeError}\r\n                                className={classes.TextBox}\r\n                                value={bookingTime}\r\n                                onChange={bookingTimeChanged}\r\n                                inputProps={{\r\n                                  style: {\r\n                                    padding: 0,\r\n                                  },\r\n                                }}\r\n                              ></TextField>\r\n                            </span>\r\n                          </Grid>\r\n                        </Grid>\r\n                      </li>\r\n\r\n                      <li className={classes.li}>\r\n                        <Grid container spacing={2}>\r\n                          <Grid item xs={6}>\r\n                            <span className={classes.infoTitle}>FULLNAME</span>\r\n                            <span\r\n                              hidden={\r\n                                editMode.edit &&\r\n                                editMode.person._id === booking._id\r\n                              }\r\n                              className={classes.infoData}\r\n                            >\r\n                              {booking.fullname}\r\n                            </span>\r\n                            <span\r\n                              hidden={\r\n                                !(\r\n                                  editMode.edit &&\r\n                                  editMode.person._id === booking._id\r\n                                )\r\n                              }\r\n                              className={classes.infoData}\r\n                            >\r\n                              <TextField\r\n                                fullWidth\r\n                                className={classes.TextBox}\r\n                                value={fullname}\r\n                                onChange={fullnameChanged}\r\n                                inputProps={{\r\n                                  style: {\r\n                                    padding: 0,\r\n                                  },\r\n                                }}\r\n                              ></TextField>\r\n                            </span>\r\n                          </Grid>\r\n                          <Grid item xs={6}>\r\n                            <span className={classes.infoTitle}>EMAIL</span>\r\n                            <span\r\n                              hidden={\r\n                                editMode.edit &&\r\n                                editMode.person._id === booking._id\r\n                              }\r\n                              className={classes.infoData}\r\n                            >\r\n                              {booking.email}\r\n                            </span>\r\n                            <span\r\n                              hidden={\r\n                                !(\r\n                                  editMode.edit &&\r\n                                  editMode.person._id === booking._id\r\n                                )\r\n                              }\r\n                              className={classes.infoData}\r\n                            >\r\n                              <TextField\r\n                                fullWidth\r\n                                className={classes.TextBox}\r\n                                value={email}\r\n                                onChange={emailChanged}\r\n                                inputProps={{\r\n                                  style: {\r\n                                    padding: 0,\r\n                                  },\r\n                                }}\r\n                              ></TextField>\r\n                            </span>\r\n                          </Grid>\r\n                        </Grid>\r\n                      </li>\r\n                      <li className={classes.li} style={{ paddingTop: \"10px\" }}>\r\n                        <span className={classes.infoTitle}>SERVICE</span>\r\n                        <span\r\n                          hidden={\r\n                            editMode.edit && editMode.person._id === booking._id\r\n                          }\r\n                          className={classes.infoData}\r\n                        >\r\n                          {booking.service}\r\n                        </span>\r\n                        <span\r\n                          hidden={\r\n                            !(\r\n                              editMode.edit &&\r\n                              editMode.person._id === booking._id\r\n                            )\r\n                          }\r\n                          className={classes.infoData}\r\n                        >\r\n                          <TextField\r\n                            fullWidth\r\n                            className={classes.TextBox}\r\n                            value={service}\r\n                            onChange={serviceChanged}\r\n                            inputProps={{\r\n                              style: {\r\n                                padding: 0,\r\n                              },\r\n                            }}\r\n                          ></TextField>\r\n                        </span>\r\n                      </li>\r\n\r\n                      <li className={classes.li} style={{ paddingTop: \"10px\" }}>\r\n                        <Grid container spacing={2}>\r\n                          <Grid item xs={6}>\r\n                            <span className={classes.infoTitle}>TEL</span>\r\n                            <span\r\n                              hidden={\r\n                                editMode.edit &&\r\n                                editMode.person._id === booking._id\r\n                              }\r\n                              className={classes.infoData}\r\n                            >\r\n                              {booking.phone?.toUpperCase()}\r\n                            </span>\r\n                            <span\r\n                              hidden={\r\n                                !(\r\n                                  editMode.edit &&\r\n                                  editMode.person._id === booking._id\r\n                                )\r\n                              }\r\n                              className={classes.infoData}\r\n                            >\r\n                              <TextField\r\n                                fullWidth\r\n                                className={classes.TextBox}\r\n                                value={tel}\r\n                                onChange={telChanged}\r\n                                inputProps={{\r\n                                  style: {\r\n                                    padding: 0,\r\n                                  },\r\n                                }}\r\n                              ></TextField>\r\n                            </span>\r\n                          </Grid>\r\n                          <Grid item xs={6}>\r\n                            <span className={classes.infoTitle}>NOTES</span>\r\n                            <span\r\n                              hidden={\r\n                                editMode.edit &&\r\n                                editMode.person._id === booking._id\r\n                              }\r\n                              className={classes.infoData}\r\n                            >\r\n                              {booking.notes}\r\n                            </span>\r\n                            <span\r\n                              hidden={\r\n                                !(\r\n                                  editMode.edit &&\r\n                                  editMode.person._id === booking._id\r\n                                )\r\n                              }\r\n                              className={classes.infoData}\r\n                            >\r\n                              <TextField\r\n                                fullWidth\r\n                                className={classes.TextBox}\r\n                                value={notes}\r\n                                onChange={notesChanged}\r\n                                inputProps={{\r\n                                  style: {\r\n                                    padding: 0,\r\n                                  },\r\n                                }}\r\n                              ></TextField>\r\n                            </span>\r\n                          </Grid>\r\n                        </Grid>\r\n                      </li>\r\n\r\n                      <li className={classes.li} style={{ paddingTop: \"20px\" }}>\r\n                        <span className={classes.infoTitle}>STATUS</span>{\" \"}\r\n                        {getStatusLabel(booking.status)}\r\n                        {booking.status === \"patient_attended\" &&\r\n                          !(\r\n                            editMode.edit && editMode.person._id === booking._id\r\n                          ) &&\r\n                          !booking.deleted && (\r\n                            <Button\r\n                              variant=\"outlined\"\r\n                              color=\"primary\"\r\n                              disabled={saving}\r\n                              style={{ width: \"300px\" }}\r\n                              onClick={(event) =>\r\n                                changeBackToBookingMade(event, booking._id)\r\n                              }\r\n                            >\r\n                              Change Back To Booking Made\r\n                            </Button>\r\n                          )}\r\n                        {booking.status === \"booked\" &&\r\n                          !(\r\n                            editMode.edit && editMode.person._id === booking._id\r\n                          ) &&\r\n                          !booking.deleted && (\r\n                            <Button\r\n                              variant=\"outlined\"\r\n                              color=\"default\"\r\n                              disabled={saving}\r\n                              style={{ width: \"300px\" }}\r\n                              onClick={(event) =>\r\n                                changeToPatientAttended(event, booking._id)\r\n                              }\r\n                            >\r\n                              Change To Patient Attended\r\n                            </Button>\r\n                          )}\r\n                      </li>\r\n\r\n                      <li hidden={booking.deleted || editMode.edit}>\r\n                        <Button\r\n                          disabled={!booking.formData}\r\n                          startIcon={<PrintIcon />}\r\n                          type=\"button\"\r\n                          fullWidth\r\n                          variant=\"outlined\"\r\n                          color=\"primary\"\r\n                          onClick={() => {\r\n                            downloadRegForm(booking._id);\r\n                          }}\r\n                          className={classes.DownloadForm}\r\n                        >\r\n                          Download Registration Form\r\n                        </Button>\r\n                      </li>\r\n\r\n                      <li\r\n                        hidden={\r\n                          booking.deleted || editMode.edit || booking.formData\r\n                        }\r\n                      >\r\n                        <Button\r\n                          disabled={!booking.email || booking.email.length < 3}\r\n                          startIcon={<SendIcon />}\r\n                          type=\"button\"\r\n                          fullWidth\r\n                          variant=\"outlined\"\r\n                          color=\"primary\"\r\n                          onClick={() => {\r\n                            sendRegForm(booking._id);\r\n                          }}\r\n                          className={classes.DownloadForm}\r\n                          style={{ position: \"relative\" }}\r\n                        >\r\n                          Send Registration Form Email\r\n                          {emailSent && (\r\n                            <div\r\n                              style={{\r\n                                position: \"absolute\",\r\n                                right: \"10px\",\r\n                                top: \"5px\",\r\n                                color: \"#05ad19\",\r\n                              }}\r\n                            >\r\n                              Email Sent\r\n                            </div>\r\n                          )}\r\n                        </Button>\r\n                      </li>\r\n\r\n                      <Divider />\r\n\r\n                      <li className={classes.li} style={{ marginTop: \"20px\" }}>\r\n                        <span className={classes.infoTitle}>INVOICE # : </span>{\" \"}\r\n                        <span style={{ paddingLeft: \"0px\" }}>\r\n                          {!invoiceLoaded && (\r\n                            <span className={classes.invoiceNumber}> ... </span>\r\n                          )}\r\n                          {invoiceLoaded && invoice && (\r\n                            <span className={classes.invoiceNumber}>\r\n                              {\" \"}\r\n                              {invoice.invoiceNumber}{\" \"}\r\n                            </span>\r\n                          )}\r\n                          {invoiceLoaded && !invoice && (\r\n                            <span\r\n                              className={classes.invoiceNumber}\r\n                              style={{ color: \"red\", fontSize: \"0.9rem\" }}\r\n                            >\r\n                              {\" \"}\r\n                              N/A{\" \"}\r\n                            </span>\r\n                          )}\r\n                        </span>\r\n                        {!(\r\n                          editMode.edit && editMode.person._id === booking._id\r\n                        ) &&\r\n                          !booking.deleted && (\r\n                            <React.Fragment>\r\n                              {invoiceLoaded && !invoice && (\r\n                                <Button\r\n                                  variant=\"outlined\"\r\n                                  color=\"primary\"\r\n                                  className={classes.PayButton}\r\n                                  onClick={() => OpenInvoiceDialog()}\r\n                                >\r\n                                  Issue Invoice\r\n                                </Button>\r\n                              )}\r\n\r\n                              {invoiceLoaded && invoice && (\r\n                                <React.Fragment>\r\n                                  <Button\r\n                                    variant=\"outlined\"\r\n                                    startIcon={<PrintIcon />}\r\n                                    color=\"primary\"\r\n                                    className={classes.printInvoiceButton}\r\n                                    onClick={() => downloadInvoice(invoice._id)}\r\n                                  >\r\n                                    Download Invoice\r\n                                  </Button>\r\n\r\n                                  <Button\r\n                                    variant=\"outlined\"\r\n                                    color=\"secondary\"\r\n                                    className={classes.editInvoiceButton}\r\n                                    onClick={() => OpenInvoiceDialog()}\r\n                                  >\r\n                                    Edit Invoice\r\n                                  </Button>\r\n\r\n                                  <Button\r\n                                    disabled={\r\n                                      !booking.email || booking.email.length < 3\r\n                                    }\r\n                                    startIcon={<SendIcon />}\r\n                                    type=\"button\"\r\n                                    variant=\"outlined\"\r\n                                    color=\"primary\"\r\n                                    onClick={() => {\r\n                                      sendInvoiceEmail(\r\n                                        invoice._id,\r\n                                        booking.email\r\n                                      );\r\n                                    }}\r\n                                    style={{\r\n                                      position: \"relative\",\r\n                                      marginLeft: \"10px\",\r\n                                      paddingRight: \"130px\",\r\n                                      fontSize: \"0.8rem\",\r\n                                    }}\r\n                                  >\r\n                                    Send Invoice By Email\r\n                                    {emailSentInvoice && (\r\n                                      <div\r\n                                        style={{\r\n                                          position: \"absolute\",\r\n                                          right: \"10px\",\r\n                                          top: \"5px\",\r\n                                          color: \"#05ad19\",\r\n                                        }}\r\n                                      >\r\n                                        Email Sent\r\n                                      </div>\r\n                                    )}\r\n                                  </Button>\r\n                                </React.Fragment>\r\n                              )}\r\n                            </React.Fragment>\r\n                          )}\r\n                      </li>\r\n\r\n                      <li className={classes.li}>\r\n                        <div\r\n                          style={{\r\n                            borderTop: \"1px solid #ddd\",\r\n                            paddingTop: \"20px\",\r\n                          }}\r\n                        >\r\n                          <span className={classes.infoTitle}>\r\n                            {booking.paymentInfo ? \"ONLINE\" : \"PHONE\"} DEPOSIT\r\n                          </span>{\" \"}\r\n                          <span\r\n                            className={\r\n                              !booking.deposit || booking.deposit === 0\r\n                                ? classes.infoDataChargesHigher\r\n                                : classes.infoDataCharges\r\n                            }\r\n                          >{`£${booking.deposit.toLocaleString(\r\n                            \"en-GB\"\r\n                          )}`}</span>\r\n                          {!(\r\n                            editMode.edit && editMode.person._id === booking._id\r\n                          ) &&\r\n                            !booking.paid &&\r\n                            booking.deleted &&\r\n                            booking.deposit > 0 &&\r\n                            booking.paymentInfo && (\r\n                              <Button\r\n                                variant=\"outlined\"\r\n                                color=\"secondary\"\r\n                                className={classes.PayButton}\r\n                                onClick={(event) => setOpenRefundDialog(true)}\r\n                              >\r\n                                Refund Deposit\r\n                              </Button>\r\n                            )}\r\n                          {!(\r\n                            editMode.edit && editMode.person._id === booking._id\r\n                          ) &&\r\n                            !booking.paid &&\r\n                            booking.deleted &&\r\n                            booking.deposit > 0 &&\r\n                            !booking.paymentInfo && (\r\n                              <Button\r\n                                variant=\"outlined\"\r\n                                color=\"primary\"\r\n                                className={classes.PayButton}\r\n                                onClick={(event) => manualRefund()}\r\n                              >\r\n                                <span style={{ textTransform: \"capitalize\" }}>\r\n                                  I made the refund manually\r\n                                </span>\r\n                              </Button>\r\n                            )}\r\n                          {!(\r\n                            editMode.edit && editMode.person._id === booking._id\r\n                          ) &&\r\n                            // !booking.paid &&\r\n                            !booking.deleted &&\r\n                            // booking.deposit > 0 &&\r\n                            !booking.paymentInfo && (\r\n                              <FormControlLabel\r\n                                style={{ marginLeft: \"90px\" }}\r\n                                control={\r\n                                  <Switch\r\n                                    color=\"primary\"\r\n                                    checked={booking.deposit > 0}\r\n                                    onChange={depositChanged}\r\n                                    name=\"deposit\"\r\n                                  />\r\n                                }\r\n                                label={\r\n                                  booking.deposit > 0 ? (\r\n                                    <span className={classes.PriceLabelPaid}>\r\n                                      £100 Deposit Paid\r\n                                    </span>\r\n                                  ) : (\r\n                                    <span className={classes.PriceLabelNotPaid}>\r\n                                      £100 Deposit Not Paid\r\n                                    </span>\r\n                                  )\r\n                                }\r\n                              />\r\n                            )}\r\n                          {!(\r\n                            editMode.edit && editMode.person._id === booking._id\r\n                          ) &&\r\n                            booking.refund && (\r\n                              <React.Fragment>\r\n                                <span className={classes.PayLabel}>\r\n                                  {\" \"}\r\n                                  <CheckIcon\r\n                                    className={classes.checkIconSmall}\r\n                                  />{\" \"}\r\n                                  Refund Done\r\n                                  {booking.paidBy === \"corporate\"\r\n                                    ? ` \"${booking.corporate}\" `\r\n                                    : \"\"}\r\n                                </span>\r\n                              </React.Fragment>\r\n                            )}\r\n                        </div>\r\n                      </li>\r\n\r\n                      <li className={classes.li}>\r\n                        <span className={classes.infoTitle}>OTC CHARGES</span>{\" \"}\r\n                        <span\r\n                          style={{ paddingLeft: \"15px\" }}\r\n                          className={\r\n                            !booking.OTCCharges || booking.OTCCharges === 0\r\n                              ? classes.infoDataChargesHigher\r\n                              : classes.infoDataCharges\r\n                          }\r\n                        >{`£${booking.OTCCharges.toLocaleString(\r\n                          \"en-GB\"\r\n                        )}`}</span>\r\n                        {!(\r\n                          editMode.edit && editMode.person._id === booking._id\r\n                        ) &&\r\n                          !booking.paid &&\r\n                          !booking.deleted && (\r\n                            <Button\r\n                              variant=\"outlined\"\r\n                              color=\"secondary\"\r\n                              className={classes.PayButton}\r\n                              onClick={(event) => Pay(event, booking._id)}\r\n                            >\r\n                              Pay\r\n                            </Button>\r\n                          )}\r\n                        {!(\r\n                          editMode.edit && editMode.person._id === booking._id\r\n                        ) &&\r\n                          booking.paid && (\r\n                            <React.Fragment>\r\n                              <span className={classes.PayLabel}>\r\n                                {\" \"}\r\n                                <CheckIcon\r\n                                  className={classes.checkIconSmall}\r\n                                />{\" \"}\r\n                                Paid by {booking.paidBy}\r\n                                {booking.paidBy === \"corporate\"\r\n                                  ? ` \"${booking.corporate}\" `\r\n                                  : \"\"}\r\n                              </span>\r\n\r\n                              <Tooltip title=\"Undo Payment\">\r\n                                <IconButton\r\n                                  onClick={() => setOpenUndoPayDialog(true)}\r\n                                >\r\n                                  <UndoIcon style={{ color: \"red\" }} />\r\n                                </IconButton>\r\n                              </Tooltip>\r\n                            </React.Fragment>\r\n                          )}\r\n                      </li>\r\n\r\n                      <li className={classes.li}>\r\n                        <div\r\n                          style={{\r\n                            borderTop: \"1px solid #ddd\",\r\n                            paddingTop: \"10px\",\r\n                          }}\r\n                        >\r\n                          <span className={classes.infoTitle}>\r\n                            TOTAL CHARGES\r\n                          </span>{\" \"}\r\n                          <span\r\n                            className={\r\n                              !booking.OTCCharges || booking.OTCCharges === 0\r\n                                ? classes.infoDataChargesHigher\r\n                                : classes.infoDataCharges\r\n                            }\r\n                          >{`£${(\r\n                            booking.deposit + booking.OTCCharges\r\n                          ).toLocaleString(\"en-GB\")}`}</span>\r\n                        </div>\r\n                      </li>\r\n                    </ul>\r\n                  </div>\r\n                </Grid>\r\n              </div>\r\n              <Backdrop\r\n                className={classes.backdrop}\r\n                open={saving || deleting || restoring}\r\n              >\r\n                <CircularProgress color=\"inherit\" />\r\n              </Backdrop>\r\n            </DialogContent>\r\n\r\n            <PayDialog\r\n              booking={selectedBooking}\r\n              open={openPayDialog}\r\n              price={invoice ? invoice.grandTotal - booking.deposit : null}\r\n              handleClose={handleClosePayDialog}\r\n            />\r\n\r\n            <InvoiceDialog\r\n              booking={selectedBooking}\r\n              invoice={invoice}\r\n              open={openInvoiceDialog}\r\n              handleClose={handleCloseInvoiceDialog}\r\n            />\r\n          </Dialog>\r\n\r\n          <Dialog\r\n            open={openUndoPayDialog}\r\n            onClose={handleCloseUndoPayDialog}\r\n            aria-labelledby=\"alert-dialog-title\"\r\n            aria-describedby=\"alert-dialog-description\"\r\n          >\r\n            <DialogTitle style={{ color: \"#999\" }} id=\"alert-dialog-title\">\r\n              {\"Undo Payment\"}\r\n            </DialogTitle>\r\n            <DialogContent>\r\n              <DialogContentText\r\n                style={{ color: \"#333\", fontWeight: \"400\" }}\r\n                id=\"alert-dialog-description\"\r\n              >\r\n                Are you sure you want to undo payment for this booking?\r\n              </DialogContentText>\r\n            </DialogContent>\r\n            <DialogActions>\r\n              <Button onClick={handleCloseUndoPayDialog} color=\"default\">\r\n                Back\r\n              </Button>\r\n              <Button onClick={undoPaymentClicked} color=\"secondary\" autoFocus>\r\n                Yes, Undo Payment\r\n              </Button>\r\n            </DialogActions>\r\n          </Dialog>\r\n\r\n          <Dialog\r\n            open={openRefundDialog}\r\n            onClose={handleCloseRefundDialog}\r\n            aria-labelledby=\"alert-dialog-title\"\r\n            aria-describedby=\"alert-dialog-description\"\r\n          >\r\n            <DialogTitle style={{ color: \"#999\" }} id=\"alert-dialog-title\">\r\n              {\"Refund Deposit\"}\r\n            </DialogTitle>\r\n            <DialogContent>\r\n              <DialogContentText\r\n                style={{ color: \"#333\", fontWeight: \"400\" }}\r\n                id=\"alert-dialog-description\"\r\n              >\r\n                Are you sure you want to refund deposit payment for this\r\n                booking?\r\n              </DialogContentText>\r\n            </DialogContent>\r\n            <DialogActions>\r\n              <Button onClick={handleCloseRefundDialog} color=\"default\">\r\n                Back\r\n              </Button>\r\n              <Button\r\n                onClick={refundPaymentClicked}\r\n                color=\"secondary\"\r\n                autoFocus\r\n              >\r\n                Yes, Refund Payment\r\n              </Button>\r\n            </DialogActions>\r\n          </Dialog>\r\n        </React.Fragment>\r\n      )}\r\n    </React.Fragment>\r\n  );\r\n}\r\n","import React, {useEffect, useRef, useState} from 'react';\r\nimport { DataGrid } from '@material-ui/data-grid';\r\nimport BookService from './services/BookService';\r\nimport { Button, Checkbox, CircularProgress, Dialog, DialogContent, DialogTitle, Divider, FormControl, FormControlLabel, Grid, Icon, InputLabel, LinearProgress, Link, makeStyles, MenuItem, Paper, Select, SvgIcon, Switch, TextField, Tooltip } from '@material-ui/core';\r\nimport RefreshIcon from '@material-ui/icons/Refresh';\r\nimport { IconButton } from '@material-ui/core';\r\nimport CheckIcon from '@material-ui/icons/Check';\r\nimport CloseIcon from '@material-ui/icons/Close';\r\nimport GlobalState from './../GlobalState';\r\nimport { getMenuIndex } from './../MenuList';\r\nimport {FormatDateFromString, FormatDateFromStringShortYear} from './DateFormatter';\r\n\r\nimport SearchIcon from '@material-ui/icons/Search';\r\nimport BookingDialog from './BookingDialog';\r\n\r\nimport NewReleasesIcon from '@material-ui/icons/NewReleases';\r\nimport HistoryIcon from '@material-ui/icons/History';\r\nimport TimelineIcon from '@material-ui/icons/Timeline';\r\nimport DescriptionIcon from '@material-ui/icons/Description';\r\nimport AutorenewIcon from '@material-ui/icons/Autorenew';\r\nimport LiveTvIcon from '@material-ui/icons/LiveTv';\r\nimport PlaylistAddCheckIcon from '@material-ui/icons/PlaylistAddCheck';\r\nimport AddCircleOutlineIcon from '@material-ui/icons/AddCircleOutline';\r\nimport DeleteIcon from '@material-ui/icons/Delete';\r\nimport HourglassEmptyIcon from '@material-ui/icons/HourglassEmpty';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { faFileExcel } from \"@fortawesome/free-solid-svg-icons\";\r\nimport Draggable from 'react-draggable';\r\n\r\nimport * as dateformat from 'dateformat';\r\n\r\nimport DateFnsUtils from '@date-io/date-fns';\r\nimport {\r\n  MuiPickersUtilsProvider,\r\n  KeyboardTimePicker,\r\n  KeyboardDatePicker,\r\n} from '@material-ui/pickers';\r\n\r\nimport BusinessIcon from '@material-ui/icons/Business';\r\nimport CreditCardIcon from '@material-ui/icons/CreditCard';\r\nimport LocalAtmIcon from '@material-ui/icons/LocalAtm';\r\n\r\n\r\nimport ReactHTMLTableToExcel from 'react-html-table-to-excel';\r\nimport PriceCalculator from './PriceCalculator';\r\nimport { corporates } from './Corporates';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  title: {\r\n    marginTop: theme.spacing(0),\r\n    marginBottom: theme.spacing(1),\r\n\r\n  },\r\n  \r\n  refreshButton:{\r\n    marginLeft: theme.spacing(2),\r\n  },\r\n\r\n  checkIcon:{\r\n    color: \"green\"\r\n  },\r\n\r\n  closeIcon:{\r\n    color: \"red\"\r\n  },\r\n\r\n  RefLink: {\r\n    cursor: \"pointer\"\r\n  },\r\n\r\n  BookedLabel:{\r\n    backgroundColor: \"#606060\",\r\n    color: \"#fff\",\r\n    width: \"70px\",\r\n    textAlign: \"center\",\r\n  },\r\n\r\n  PatientAttendedLabel:{\r\n    backgroundColor: \"#0066aa\",\r\n    color: \"#fff\",\r\n    width: \"70px\",\r\n    textAlign: \"center\",\r\n  },\r\n\r\n  SampleTakenLabel:{\r\n    backgroundColor: \"#0066cc\",\r\n    color: \"#fff\",\r\n    width: \"70px\",\r\n    textAlign: \"center\",\r\n  },\r\n\r\n  ReportSentLabel:{\r\n    backgroundColor: \"#009900\",\r\n    color: \"#fff\",\r\n    width: \"70px\",\r\n    textAlign: \"center\",\r\n  },\r\n\r\n  ReportCertSentLabel:{\r\n    backgroundColor: \"#009900\",\r\n    color: \"#fff\",\r\n    width: \"70px\",\r\n    textAlign: \"center\",\r\n  },\r\n\r\n  PositiveLabel:{\r\n    backgroundColor: \"red\",\r\n    color: \"#fff\",\r\n    width: \"70px\",\r\n    textAlign: \"center\",\r\n  },\r\n\r\n  HideNowRows: {\r\n    position: \"absolute\",\r\n    top: \"40%\",\r\n    left: \"40%\",\r\n    width: \"600px\",\r\n    height: \"300px\",\r\n    backgroundColor : \"#fafafa\",\r\n    color : \"#111\",\r\n    zIndex: \"1000\",\r\n    display: \"flex\",\r\n    alignItems: \"center\",\r\n    justifyItems: \"center\"\r\n  },\r\n\r\n  ExportToExcelButton:\r\n  {\r\n    // marginBottom : \"20px\",\r\n    color : \"#2f942e\",\r\n    borderColor: \"#2f942e\",\r\n    \"&:hover\": {\r\n      background: \"#fafffa\",\r\n      borderColor: \"#2f942e\",\r\n    },\r\n    textDecoration : \"none !important\", \r\n   \r\n  },\r\n\r\n  ExportToExcelButtonInline:\r\n  {\r\n    // marginBottom : \"20px\",\r\n    color : \"#2f942e\",\r\n    borderColor: \"#2f942e\",\r\n    \"&:hover\": {\r\n      background: \"#fafffa\",\r\n      borderColor: \"#2f942e\",\r\n    },\r\n    textDecoration : \"none !important\", \r\n    cursor: \"pointer\",\r\n    padding: \"10px\"\r\n   \r\n  },\r\n\r\n  table: {\r\n    width: \"100%\",\r\n    border: \"1px solid #ddd\",\r\n    borderCollapse: \"collapse\",\r\n},\r\n\r\nth: {\r\n    border: \"1px solid #ddd\",\r\n    borderCollapse: \"collapse\",\r\n    verticalAlign: \"middle\",\r\n    fontcolor: \"#555\",\r\n    fontWeight: \"400\",\r\n    fontSize: \"15px\",\r\n    paddingTop: \"5px\",\r\n    paddingBottom: \"5px\",\r\n    width: \"14%\",\r\n    paddingLeft: \"5px\",\r\n},\r\n\r\ntd: {\r\n    border: \"1px solid #ddd\",\r\n    borderCollapse: \"collapse\",\r\n    verticalAlign: \"middle\",\r\n    paddingLeft: \"5px\",\r\n},\r\n\r\ntopSelect: {\r\n  margin: theme.spacing(1),\r\n  minWidth: 80,\r\n},\r\n\r\nnotifyIcon:{\r\n  width: \"16px\",\r\n  height: \"16px\",\r\n  borderRadius: \"50%\",\r\n  backgroundColor : \"rgb(220, 0, 78)\",\r\n  marginLeft: \"10px\"\r\n}\r\n\r\n}));\r\n\r\nconst getTableTitle = (str) =>{\r\n\r\n  if (str === 'today')\r\n  {\r\n    return `Today's Bookings`;\r\n  }else if (str === 'old')\r\n  {\r\n    return `Old Bookings`;\r\n  }else if (str === 'future')\r\n  {\r\n    return `Future Bookings`;\r\n  }else if (str === 'recent')\r\n  {\r\n    return `Recent Bookings`;\r\n  }else if (str === 'live')\r\n  {\r\n    return `Live Bookings`;\r\n  }else if (str === 'completed')\r\n  {\r\n    return `Completed Bookings`;\r\n  }else if (str === 'positive')\r\n  {\r\n    return `Positive Results`;\r\n  }else if (str === 'deleted')\r\n  {\r\n    return `Deleted Records`;\r\n  }else if (str === 'late')\r\n  {\r\n    return `40 Hours Late`;\r\n  }\r\n  \r\n  else\r\n  {\r\n    return `All Bookings`;\r\n  }\r\n\r\n}\r\n\r\nconst getTableIcon = (str) =>{\r\n\r\n  if (str === 'today')\r\n  {\r\n    return <NewReleasesIcon style={{fontSize:\"2.2rem\"}} />;\r\n  }else if (str === 'old')\r\n  {\r\n    return <HistoryIcon style={{fontSize:\"2.2rem\"}} />;\r\n  }else if (str === 'future')\r\n  {\r\n    return <TimelineIcon style={{fontSize:\"2.2rem\"}} />;\r\n  }else if (str === 'recent')\r\n  {\r\n    return <AutorenewIcon style={{fontSize:\"2.2rem\"}} />;\r\n  }else if (str === 'live')\r\n  {\r\n    return <LiveTvIcon style={{fontSize:\"2.2rem\"}} />;\r\n  }else if (str === 'completed')\r\n  {\r\n    return  <PlaylistAddCheckIcon style={{fontSize:\"2.2rem\"}} />;\r\n  }else if (str === 'positive')\r\n  {\r\n    return <AddCircleOutlineIcon style={{fontSize:\"2.2rem\"}} />\r\n  }else if (str === 'deleted')\r\n  {\r\n    return <DeleteIcon style={{fontSize:\"2.2rem\"}} />;\r\n  }else if (str === 'late')\r\n  {\r\n    return <HourglassEmptyIcon style={{fontSize:\"2.2rem\"}} />;\r\n  }\r\n  \r\n  else\r\n  {\r\n    return <DescriptionIcon style={{fontSize:\"2.2rem\"}} />;\r\n  }\r\n\r\n}\r\n\r\nfunction PaperComponent(props) {\r\n  return (\r\n    <Draggable handle=\"#draggable-dialog-title\" cancel={'[class*=\"MuiDialogContent-root\"]'}>\r\n      <Paper {...props} />\r\n    </Draggable>\r\n  );\r\n}\r\n\r\nexport default function BookingTable(props) {\r\n  \r\n  const classes = useStyles();\r\n\r\n  const [topCount, setTopCount] = React.useState(25)\r\n  const topCountChanged = (event) =>\r\n  {\r\n    setTopCount(event.target.value)\r\n    loadData(event.target.value)\r\n  }\r\n  \r\n\r\n  const [openDialogExcel, setOpenDialogExcel] = useState(false);\r\n  const handleCloseDialogExcel = () =>\r\n  {\r\n    setCorporate(corporates[0]);\r\n    setJustCorporate(false);\r\n    setOpenDialogExcel(false);\r\n  }\r\n\r\n\r\n  const [fromDate, setFromDate] = React.useState(new Date(new Date().getTime() - 7 * 24 * 60 * 60 * 1000 ));\r\n  const handleFromDateChange = (date) => {\r\n    setFromDate(date);\r\n    setFromDateStr(dateformat(date,'yyyy-mm-dd'));\r\n  };\r\n\r\n  const [untilDate, setUntilDate] = React.useState(new Date(new Date().getTime() - 1 * 24 * 60 * 60 * 1000 ));\r\n  const handleUntilDateChange = (date) => {\r\n    setUntilDate(date);\r\n    seUntilDateStr(dateformat(date,'yyyy-mm-dd'));\r\n  };\r\n\r\n  const [fromDateStr, setFromDateStr] = useState(dateformat(new Date(new Date().getTime() - 7 * 24 * 60 * 60 * 1000 ), 'yyyy-mm-dd'));\r\n  const [untilDateStr, seUntilDateStr] = useState(dateformat(new Date(new Date().getTime() - 1 * 24 * 60 * 60 * 1000 ), 'yyyy-mm-dd'));\r\n\r\n  const [justCorporate, setJustCorporate] = useState(false);\r\n\r\n  const[chkDate, setChkDate] = useState(true);\r\n  const[chkForename, setChkForename] = useState(true);\r\n  const[chkSurname, setChkSurname] = useState(true);\r\n  const[chkDOB, setChkDOB] = useState(true);\r\n  const[chkEmail, setChkEmail] = useState(true);\r\n  const[chkTel, setChkTel] = useState(true);\r\n  const[chkCertificate, setChkCertidicate] = useState(true);\r\n  const[chkAntiBodyTest, setChkAntiBodyTest] = useState(true);\r\n  const[chkextRef, setChkExtRef] = useState(true);\r\n  const[chkPrice, setChkPrice] = useState(true);\r\n\r\n  const justCorporateChanged = (event) =>\r\n  {\r\n    setJustCorporate(event.target.checked);\r\n  }\r\n  \r\n\r\n  const chkDateChanged = (event) =>\r\n  {\r\n    setChkDate(event.target.checked);\r\n  }\r\n\r\n  const chkForenameChanged = (event) =>\r\n  {\r\n    setChkForename(event.target.checked);\r\n  }\r\n\r\n  const chkSurnameChanged = (event) =>\r\n  {\r\n    setChkSurname(event.target.checked);\r\n  }\r\n\r\n  const chkDOBChanged = (event) =>\r\n  {\r\n    setChkDOB(event.target.checked);\r\n  }\r\n\r\n  const chkEmailChanged = (event) =>\r\n  {\r\n    setChkEmail(event.target.checked);\r\n  }\r\n\r\n  const chkTelChanged = (event) =>\r\n  {\r\n    setChkTel(event.target.checked);\r\n  }\r\n\r\n  const chkCertificateChanged = (event) =>\r\n  {\r\n    setChkCertidicate(event.target.checked);\r\n  }\r\n\r\n  const chkAntiBodyTestChanged = (event) =>\r\n  {\r\n    setChkAntiBodyTest(event.target.checked);\r\n  }\r\n\r\n  const chkextRefChanged = (event) =>\r\n  {\r\n    setChkExtRef(event.target.checked);\r\n  }\r\n\r\n  const chkPriceChanged = (event) =>\r\n  {\r\n    setChkPrice(event.target.checked);\r\n  }\r\n\r\n\r\n\r\n  var columns = [];\r\n\r\n  if (props.date === 'recent')\r\n  {\r\n    columns = [\r\n      // { field: 'id', headerName: '#', width: 70 },\r\n  \r\n      {field: '_id', headerName:' ', width: 70, renderCell: (params) =>{\r\n          return (\r\n\r\n           <React.Fragment>\r\n\r\n                <Button \r\n                        color=\"primary\"\r\n                        onClick = {event => openDetailsDialog(event, params.value)}\r\n                > \r\n            \r\n            <SearchIcon/> \r\n            \r\n            </Button>\r\n\r\n           </React.Fragment>\r\n\r\n          \r\n  \r\n          ); \r\n      \r\n        }\r\n      },\r\n\r\n      { field: 'paid', headerName: 'Paid', align: 'center' , width: 90, renderCell: (params) => { \r\n        if (!params.value)\r\n        {\r\n           return ( \r\n              <React.Fragment>                    \r\n                    <CloseIcon className={classes.closeIcon}/>                        \r\n              </React.Fragment>\r\n           );\r\n        }\r\n        else\r\n        {\r\n           if (params.getValue('paidBy') === 'credit card')\r\n           {\r\n             return ( <CreditCardIcon className={classes.checkIcon}/> );\r\n           }\r\n           else if (params.getValue('paidBy') === 'cash')\r\n           {\r\n             return ( <LocalAtmIcon className={classes.checkIcon}/> );\r\n           }\r\n           else if (params.getValue('paidBy') === 'corporate')\r\n           {\r\n             return ( <BusinessIcon className={classes.checkIcon}/> );\r\n           }\r\n           else\r\n           {\r\n             return '';  \r\n           }\r\n        }\r\n  }\r\n },\r\n\r\n\r\n      { field: 'timeStamp', headerName: 'TimeStamp', width: 200, valueFormatter: (params) => { \r\n        return formatTimeStamp(params.value);\r\n        }\r\n      },\r\n  \r\n      { field: 'bookingDate', headerName: 'B Date', width: 110, valueFormatter: (params) => { \r\n              return FormatDateFromString(params.value);\r\n          }\r\n       },\r\n      { field: 'bookingTimeNormalized', headerName: 'B Time', width: 105 , valueGetter: (params) => {\r\n        return params.getValue('bookingTime');\r\n      }},\r\n      { field: 'status', headerName: 'Status', width: 100, renderCell: (params) =>{\r\n          if (params.value === 'booked')\r\n          {\r\n            return (\r\n              <span className={classes.BookedLabel}>  BM </span>\r\n            );\r\n        \r\n          }else if (params.value === 'patient_attended')\r\n          {\r\n            return (\r\n              <span  className={classes.PatientAttendedLabel}> PA </span>\r\n            );\r\n          }\r\n          else{\r\n            return 'Unknown';\r\n          }\r\n        }\r\n      },\r\n      { field: 'bookingRef', headerName: 'Ref No.', width: 120 , renderCell: (params) =>{\r\n        return (\r\n          <Tooltip title=\"Go Find By Ref\" placement=\"right\">\r\n              <Link className={classes.RefLink}\r\n              //  onClick={\r\n              //   () => {\r\n              //     console.log(params.value);\r\n  \r\n              //     setState(state => ({...state, currentMenuIndex: getMenuIndex(`pcr` , `findByRef`)}));\r\n              //     setState(state => ({...state, ref : params.value}));\r\n              //     setState(state => ({...state, refError : false})); \r\n              //     setState(state => ({...state, foundRecords : []}));\r\n              //     setState(state => ({...state, findRecords : !state.findRecords}));\r\n              //   }\r\n              // }\r\n              \r\n              >\r\n                {params.value}\r\n              </Link>\r\n          </Tooltip>\r\n  \r\n        );\r\n      }},\r\n      { field: 'fullname', headerName: 'Fullname', width: 250 },\r\n      { field: 'email', headerName: 'Email', width: 200 },\r\n      { field: 'phone', headerName: 'Tel', width: 150 },\r\n      { field: 'service', headerName: 'Service', width: 250 },\r\n      { field: 'notes', headerName: 'Notes', width: 500 },\r\n    \r\n    ];\r\n\r\n  }\r\n  else\r\n  {\r\n    columns = [\r\n      // { field: 'id', headerName: '#', width: 70 },\r\n  \r\n      {field: '_id', headerName:' ', width: 70, renderCell: (params) =>{\r\n          return (\r\n            <React.Fragment>\r\n\r\n                <Button \r\n                        color=\"primary\"\r\n                        onClick = {event => openDetailsDialog(event, params.value)}\r\n                > \r\n            \r\n            <SearchIcon/> \r\n            \r\n            </Button>\r\n\r\n           </React.Fragment>\r\n  \r\n          ); \r\n      \r\n        }\r\n      },\r\n\r\n      { field: 'paid', headerName: 'Paid', align: 'center' , width: 90, renderCell: (params) => { \r\n               if (!params.value)\r\n               {\r\n                  return ( \r\n                    <React.Fragment>\r\n                                <CloseIcon className={classes.closeIcon}/> \r\n                                {parseInt(params.getValue('deposit')) > 0 && props.date === 'deleted' && (\r\n                                      <span className={classes.notifyIcon}>&nbsp;</span>\r\n                                )}\r\n\r\n                               \r\n                    </React.Fragment>\r\n                     \r\n                        \r\n                  \r\n                  \r\n                  );\r\n               }\r\n               else\r\n               {\r\n                  if (params.getValue('paidBy') === 'credit card')\r\n                  {\r\n                    return ( <CreditCardIcon className={classes.checkIcon}/> );\r\n                  }\r\n                  else if (params.getValue('paidBy') === 'cash')\r\n                  {\r\n                    return ( <LocalAtmIcon className={classes.checkIcon}/> );\r\n                  }\r\n                  else if (params.getValue('paidBy') === 'corporate')\r\n                  {\r\n                    return ( <BusinessIcon className={classes.checkIcon}/> );\r\n                  }\r\n                  else\r\n                  {\r\n                    return '';  \r\n                  }\r\n               }\r\n         }\r\n        },\r\n        { field: 'bookingDate', headerName: 'B Date', width: 110, valueFormatter: (params) => { \r\n          return FormatDateFromString(params.value);\r\n      }\r\n   },\r\n  { field: 'bookingTimeNormalized', headerName: 'B Time', width: 105 , valueGetter: (params) => {\r\n    return params.getValue('bookingTime');\r\n  }},\r\n  { field: 'status', headerName: 'Status', width: 100, renderCell: (params) =>{\r\n      if (params.value === 'booked')\r\n      {\r\n        return (\r\n          <span className={classes.BookedLabel}>  BM </span>\r\n        );\r\n    \r\n      }else if (params.value === 'patient_attended')\r\n      {\r\n        return (\r\n          <span  className={classes.PatientAttendedLabel}> PA </span>\r\n        );\r\n      }\r\n      else{\r\n        return 'Unknown';\r\n      }\r\n    }\r\n  },\r\n  { field: 'bookingRef', headerName: 'Ref No.', width: 120 , renderCell: (params) =>{\r\n    return (\r\n      <Tooltip title=\"Go Find By Ref\" placement=\"right\">\r\n          <Link className={classes.RefLink}\r\n          //  onClick={\r\n          //   () => {\r\n          //     console.log(params.value);\r\n\r\n          //     setState(state => ({...state, currentMenuIndex: getMenuIndex(`pcr` , `findByRef`)}));\r\n          //     setState(state => ({...state, ref : params.value}));\r\n          //     setState(state => ({...state, refError : false})); \r\n          //     setState(state => ({...state, foundRecords : []}));\r\n          //     setState(state => ({...state, findRecords : !state.findRecords}));\r\n          //   }\r\n          // }\r\n          \r\n          >\r\n            {params.value}\r\n          </Link>\r\n      </Tooltip>\r\n\r\n    );\r\n  }},\r\n  { field: 'fullname', headerName: 'Fullname', width: 250 },\r\n  { field: 'email', headerName: 'Email', width: 200 },\r\n  { field: 'phone', headerName: 'Tel', width: 150 },\r\n  { field: 'service', headerName: 'Service', width: 250 },\r\n  { field: 'notes', headerName: 'Notes', width: 500 },\r\n\r\n    \r\n    ];\r\n  \r\n\r\n  }\r\n\r\n\r\n\r\n  const [state, setState] = React.useContext(GlobalState);  \r\n\r\n  const [data, setData] = React.useState({bookings: [] , cachedBookings: [], isFetching : true});\r\n\r\n  const [selectedRow, setSelectedRow] = React.useState(null);\r\n\r\n  const [selectedBooking, setSelectedBooking] = React.useState(null);\r\n  const [seeDetailsDialogOpen, setSeeDetailsDialogOpen] = React.useState(false);\r\n\r\n  const [corporate, setCorporate] = useState(corporates[0]);\r\n  const corporateChanged = (event) =>\r\n  {\r\n    setCorporate(event.target.value);\r\n  }\r\n  \r\n\r\n  const [filter,setFilter] = React.useState('');\r\n\r\n\r\n  const lastPromise = useRef();\r\n\r\n  const formatTimeStamp = (timeStamp) =>\r\n  {\r\n    const todayStr = dateformat(new Date(), 'yyyy-mm-dd');\r\n    const timeStampStr = dateformat(timeStamp, 'yyyy-mm-dd');\r\n    if (todayStr === timeStampStr)\r\n    {\r\n      return dateformat(timeStamp, \"'Today', h:MM:ss TT\");\r\n    }\r\n    else\r\n    {\r\n       return dateformat(timeStamp, \"mmm dS, h:MM:ss TT\");\r\n    }\r\n  }\r\n\r\n  const loadData = (top) =>\r\n  {\r\n    var api = BookService.getAllBookings;\r\n    if (props.date === 'today')\r\n    {\r\n      api = BookService.getTodayBookings;\r\n    }else if (props.date === 'old')\r\n    {\r\n      api = BookService.getOldBookings;\r\n    }else if (props.date === 'future')\r\n    {\r\n      api = BookService.getFutureBookings;\r\n    }else if (props.date === 'recent')\r\n    {\r\n      api = BookService.getRecentBookingsAll;\r\n    }\r\n    else if (props.date === 'deleted')\r\n    {\r\n      api = BookService.getDeletedBookings;\r\n    }\r\n     \r\n    setData({bookings: [], cachedBookings: [], isFetching: true});\r\n   \r\n    // console.log(props)\r\n\r\n    const currentPromise = api(top).then( (res) =>{\r\n      // console.log(res)\r\n      for (var i=0; i < res.data.length; i++)\r\n      {\r\n        res.data[i] = {...res.data[i], id : i + 1}\r\n      }  \r\n      setData({bookings: [...res.data], cachedBookings: [...res.data], isFetching: false});\r\n      // return res.data;\r\n    }).catch(err => {\r\n      console.error(err)\r\n    })\r\n\r\n    // lastPromise.current = currentPromise;\r\n\r\n    // currentPromise.then(\r\n    //   result => {\r\n    //     if (currentPromise === lastPromise.current) {\r\n    //       setData({bookings: [...result], cachedBookings: [...result], isFetching: false});\r\n    //       setPage(1);\r\n    //     }\r\n    //   },\r\n    //   e => {\r\n    //     if (currentPromise === lastPromise.current) {\r\n    //         console.error(e);\r\n    //         setData({bookings: data.bookings, cachedBookings: data.cachedBookings, isFetching: false});\r\n    //     }\r\n    //   });\r\n\r\n  }\r\n\r\n  useEffect( () => {\r\n            setTopCount(25)\r\n            loadData(25)\r\n        },\r\n        [props.date]);\r\n\r\n\r\n\r\n\r\n  useEffect( () => {\r\n\r\n        if (filter && filter.trim().length > 0)\r\n        {\r\n          var filteredData = data.cachedBookings.filter( (element) => \r\n\r\n             (element.fullname.toLowerCase().indexOf(filter.toLowerCase()) >= 0)\r\n             || (element.service.toLowerCase().indexOf(filter.toLowerCase()) >= 0)\r\n               \r\n              \r\n          );\r\n  \r\n  \r\n          setData({bookings: [...filteredData], cachedBookings: data.cachedBookings, isFetching: false});\r\n        }else\r\n        {\r\n          setData({bookings: [...data.cachedBookings], cachedBookings: data.cachedBookings, isFetching: false});\r\n        }\r\n      },\r\n      [filter]);\r\n\r\n  \r\n      useEffect(() => {\r\n\r\n       loadData(topCount)\r\n    \r\n      }, [state.bookingDialogDataChanged]);    \r\n\r\n\r\n  const handleCloseSeeDetaisDialog = () =>\r\n  {\r\n    setSelectedBooking(null);\r\n    setSeeDetailsDialogOpen(false);\r\n  }    \r\n  \r\n  const openDetailsDialog = (event, id) =>\r\n  {\r\n    const booking = data.bookings.find(element => element._id === id);\r\n    setSelectedBooking(booking);\r\n    setSeeDetailsDialogOpen(true);\r\n\r\n  }\r\n\r\n  const refreshClicked = (event) =>{\r\n    setFilter('');\r\n    loadData(topCount)\r\n  }\r\n\r\n  const filterChanged = (event) =>{\r\n    setFilter(event.target.value);\r\n  }\r\n\r\n  const handleSelectionChanged = (newSelection) =>\r\n  {\r\n    if (newSelection.length > 0){\r\n      setSelectedRow(newSelection.rows[0]);\r\n    }\r\n    \r\n  }\r\n\r\n  const [page, setPage] = React.useState(1);\r\n\r\n  const handleExcelButtonClicked = (event) =>\r\n  {\r\n    setOpenDialogExcel(true);\r\n  }\r\n\r\n  const isTopSelectHidden = (date)=>\r\n  {\r\n    return date === 'live' || date === 'positive' || date === 'late' || date === 'today'\r\n  }\r\n\r\n\r\n  return (\r\n    <React.Fragment>\r\n      {data.isFetching && (\r\n        <div style={{ width: \"100%\", paddingTop: \"3px\" }}>\r\n          <LinearProgress color=\"primary\" />\r\n        </div>\r\n      )}\r\n      <Grid\r\n        container\r\n        direction=\"row\"\r\n        justify=\"space-between\"\r\n        alignItems=\"flex-end\"\r\n      >\r\n        <Grid item md={4}>\r\n          <div style={{ textAlign: \"left\", paddingLeft: \"10px\" }}>\r\n            <Grid\r\n              container\r\n              direction=\"row\"\r\n              justify=\"flex-start\"\r\n              alignItems=\"center\"\r\n            >\r\n              <Grid item>\r\n                <span style={{ paddingRight: \"15px\", color: \"#555\" }}>\r\n                  {\" \"}\r\n                  {getTableIcon(props.date)}{\" \"}\r\n                </span>\r\n              </Grid>\r\n              <Grid item>\r\n                <span\r\n                  style={{\r\n                    fontSize: \"1.4rem\",\r\n                    fontWeight: \"600\",\r\n                    color: \"#444\",\r\n                  }}\r\n                >\r\n                  {\" \"}\r\n                  {getTableTitle(props.date)}{\" \"}\r\n                </span>\r\n              </Grid>\r\n              <Grid item>\r\n                <Tooltip title=\"Refresh\" placement=\"right\">\r\n                  <IconButton\r\n                    color=\"primary\"\r\n                    className={classes.refreshButton}\r\n                    onClick={refreshClicked}\r\n                  >\r\n                    <RefreshIcon />\r\n                  </IconButton>\r\n                </Tooltip>\r\n              </Grid>\r\n            </Grid>\r\n          </div>\r\n        </Grid>\r\n\r\n        <Grid item md={3}>\r\n          {props.date === \"completed\" && state.showCreateExcel && (\r\n            <div style={{ paddingBottom: \"5px\" }}>\r\n              <Button\r\n                className={classes.ExportToExcelButton}\r\n                variant=\"outlined\"\r\n                color=\"default\"\r\n                onClick={handleExcelButtonClicked}\r\n                startIcon={\r\n                  <FontAwesomeIcon\r\n                    style={{ color: \"#009900\" }}\r\n                    icon={faFileExcel}\r\n                  />\r\n                }\r\n              >\r\n                export to excel\r\n              </Button>\r\n            </div>\r\n          )}\r\n        </Grid>\r\n\r\n        {data.isFetching && <div className={classes.HideNowRows}></div>}\r\n\r\n        <Grid item md={3}>\r\n          <TextField\r\n            variant=\"standard\"\r\n            value={filter}\r\n            onChange={filterChanged}\r\n            margin=\"normal\"\r\n            size=\"small\"\r\n            id=\"filter\"\r\n            label=\"Filter\"\r\n            name=\"filter\"\r\n            autoComplete=\"off\"\r\n          />\r\n        </Grid>\r\n\r\n        <Grid item hidden={isTopSelectHidden(props.date)}>\r\n          <FormControl className={classes.topSelect}>\r\n            <InputLabel id=\"top-select-label\">Limit</InputLabel>\r\n            <Select\r\n              labelId=\"top-select-label\"\r\n              id=\"top-simple-select\"\r\n              value={topCount}\r\n              onChange={topCountChanged}\r\n            >\r\n              <MenuItem value={25}>25</MenuItem>\r\n              <MenuItem value={50}>50</MenuItem>\r\n              <MenuItem value={100}>100</MenuItem>\r\n              <MenuItem value={500}>500</MenuItem>\r\n              <MenuItem value={1000}>1000</MenuItem>\r\n              <MenuItem value={10000}>ALL</MenuItem>\r\n            </Select>\r\n          </FormControl>\r\n\r\n          {/* <Button onClick={() => loadData(true)}> Show all records </Button> */}\r\n        </Grid>\r\n      </Grid>\r\n\r\n      <div style={{ height: 700, width: \"100%\" }}>\r\n        <DataGrid\r\n          rows={data.bookings}\r\n          columns={columns}\r\n          autoPageSize\r\n          page={page}\r\n          onPageChange={(params) => {\r\n            setPage(params.page);\r\n          }}\r\n          onSelectionChange={handleSelectionChanged}\r\n        />\r\n      </div>\r\n\r\n      <BookingDialog\r\n        booking={selectedBooking}\r\n        open={seeDetailsDialogOpen}\r\n        onClose={handleCloseSeeDetaisDialog}\r\n      />\r\n\r\n      {data.bookings && data.bookings.length > 0 && (\r\n        <Dialog\r\n          maxWidth=\"lg\"\r\n          open={openDialogExcel}\r\n          onClose={handleCloseDialogExcel}\r\n          PaperComponent={PaperComponent}\r\n          aria-labelledby=\"form-dialog-title\"\r\n        >\r\n          <DialogTitle id=\"draggable-dialog-title\">\r\n            <Grid\r\n              container\r\n              spacing={2}\r\n              direction=\"row\"\r\n              justify=\"center\"\r\n              alignItems=\"center\"\r\n            >\r\n              <Grid item>\r\n                <FontAwesomeIcon\r\n                  style={{ color: \"#2f942e\", fontSize: \"2rem\" }}\r\n                  icon={faFileExcel}\r\n                />\r\n              </Grid>\r\n\r\n              <Grid item>\r\n                <div\r\n                  style={{\r\n                    color: \"#2f942e\",\r\n                    paddingBottom: \"5px\",\r\n                    fontWeight: \"800\",\r\n                  }}\r\n                >\r\n                  {\" \"}\r\n                  Export to EXCEL{\" \"}\r\n                </div>\r\n              </Grid>\r\n            </Grid>\r\n\r\n            <Divider />\r\n          </DialogTitle>\r\n          <DialogContent>\r\n            <div\r\n              style={{\r\n                minHeight: \"600px\",\r\n                maxHeight: \"600px\",\r\n                minWidth: \"1200px\",\r\n                maxWidth: \"1200px\",\r\n              }}\r\n            >\r\n              <div>\r\n                <Grid row container justify=\"center\" spacing={3}>\r\n                  <Grid item>\r\n                    <FormControlLabel\r\n                      control={\r\n                        <Switch\r\n                          checked={justCorporate}\r\n                          onChange={justCorporateChanged}\r\n                          name=\"justCorporate\"\r\n                        />\r\n                      }\r\n                      label=\"Just Corporate Records\"\r\n                    />\r\n                  </Grid>\r\n\r\n                  {justCorporate && (\r\n                    <Grid item>\r\n                      <FormControl\r\n                        style={{ marginTop: \"0px\" }}\r\n                        className={classes.formControl}\r\n                      >\r\n                        <Select\r\n                          labelId=\"select-corporate\"\r\n                          id=\"select-corporate-id\"\r\n                          value={corporate}\r\n                          onChange={corporateChanged}\r\n                        >\r\n                          {corporates.map((element) => (\r\n                            <MenuItem value={element}>{`${element}`}</MenuItem>\r\n                          ))}\r\n                        </Select>\r\n                      </FormControl>\r\n                    </Grid>\r\n                  )}\r\n                </Grid>\r\n\r\n                <MuiPickersUtilsProvider utils={DateFnsUtils}>\r\n                  <Grid row container justify=\"center\" spacing={3}>\r\n                    <Grid item>\r\n                      <KeyboardDatePicker\r\n                        disableToolbar\r\n                        variant=\"inline\"\r\n                        format=\"dd/MM/yyyy\"\r\n                        margin=\"normal\"\r\n                        id=\"date-picker-from\"\r\n                        label=\"From\"\r\n                        value={fromDate}\r\n                        onChange={handleFromDateChange}\r\n                        KeyboardButtonProps={{\r\n                          \"aria-label\": \"change date\",\r\n                        }}\r\n                      />\r\n                    </Grid>\r\n\r\n                    <Grid item>\r\n                      <KeyboardDatePicker\r\n                        disableToolbar\r\n                        variant=\"inline\"\r\n                        format=\"dd/MM/yyyy\"\r\n                        margin=\"normal\"\r\n                        id=\"date-picker-until\"\r\n                        label=\"Until\"\r\n                        value={untilDate}\r\n                        onChange={handleUntilDateChange}\r\n                        KeyboardButtonProps={{\r\n                          \"aria-label\": \"change date\",\r\n                        }}\r\n                      />\r\n                    </Grid>\r\n\r\n                    <Grid item>\r\n                      <div style={{ paddingTop: \"30px\", marginLeft: \"20px\" }}>\r\n                        <ReactHTMLTableToExcel\r\n                          id=\"test-table-xls-button\"\r\n                          className={classes.ExportToExcelButtonInline}\r\n                          table=\"table-to-xls\"\r\n                          filename={`PCR.Report.${fromDateStr}.${untilDateStr}`}\r\n                          sheet=\"PCR-Report\"\r\n                          buttonText=\"Download as XLS\"\r\n                        />\r\n                      </div>\r\n                    </Grid>\r\n                  </Grid>\r\n                </MuiPickersUtilsProvider>\r\n              </div>\r\n\r\n              <div>\r\n                <Grid container spacing={3}>\r\n                  <Grid item xs>\r\n                    <FormControlLabel\r\n                      control={\r\n                        <Checkbox\r\n                          checked={chkDate}\r\n                          onChange={chkDateChanged}\r\n                          name=\"chkDate\"\r\n                        />\r\n                      }\r\n                      label=\"Date\"\r\n                    />\r\n                  </Grid>\r\n                  <Grid item xs>\r\n                    <FormControlLabel\r\n                      control={\r\n                        <Checkbox\r\n                          checked={chkForename}\r\n                          onChange={chkForenameChanged}\r\n                          name=\"chkForename\"\r\n                        />\r\n                      }\r\n                      label=\"Forename\"\r\n                    />\r\n                  </Grid>\r\n                  <Grid item xs>\r\n                    <FormControlLabel\r\n                      control={\r\n                        <Checkbox\r\n                          checked={chkSurname}\r\n                          onChange={chkSurnameChanged}\r\n                          name=\"chkSurname\"\r\n                        />\r\n                      }\r\n                      label=\"Surname\"\r\n                    />\r\n                  </Grid>\r\n                  <Grid item xs>\r\n                    <FormControlLabel\r\n                      control={\r\n                        <Checkbox\r\n                          checked={chkDOB}\r\n                          onChange={chkDOBChanged}\r\n                          name=\"chkDOB\"\r\n                        />\r\n                      }\r\n                      label=\"D.O.B\"\r\n                    />\r\n                  </Grid>\r\n                  <Grid item xs>\r\n                    <FormControlLabel\r\n                      control={\r\n                        <Checkbox\r\n                          checked={chkEmail}\r\n                          onChange={chkEmailChanged}\r\n                          name=\"chkEmail\"\r\n                        />\r\n                      }\r\n                      label=\"Email\"\r\n                    />\r\n                  </Grid>\r\n                  <Grid item xs>\r\n                    <FormControlLabel\r\n                      control={\r\n                        <Checkbox\r\n                          checked={chkTel}\r\n                          onChange={chkTelChanged}\r\n                          name=\"chkTel\"\r\n                        />\r\n                      }\r\n                      label=\"Tel\"\r\n                    />\r\n                  </Grid>\r\n                  <Grid item xs>\r\n                    <FormControlLabel\r\n                      control={\r\n                        <Checkbox\r\n                          checked={chkCertificate}\r\n                          onChange={chkCertificateChanged}\r\n                          name=\"chkCertificate\"\r\n                        />\r\n                      }\r\n                      label=\"Certificate\"\r\n                    />\r\n                  </Grid>\r\n                  <Grid item xs>\r\n                    <FormControlLabel\r\n                      control={\r\n                        <Checkbox\r\n                          checked={chkAntiBodyTest}\r\n                          onChange={chkAntiBodyTestChanged}\r\n                          name=\"chkAntiBodyTest\"\r\n                        />\r\n                      }\r\n                      label=\"AntiBodyTest\"\r\n                    />\r\n                  </Grid>\r\n                  <Grid item xs>\r\n                    <FormControlLabel\r\n                      control={\r\n                        <Checkbox\r\n                          checked={chkextRef}\r\n                          onChange={chkextRefChanged}\r\n                          name=\"chkextRef\"\r\n                        />\r\n                      }\r\n                      label=\"Lab No.\"\r\n                    />\r\n                  </Grid>\r\n                  <Grid item xs>\r\n                    <FormControlLabel\r\n                      control={\r\n                        <Checkbox\r\n                          checked={chkPrice}\r\n                          onChange={chkPriceChanged}\r\n                          name=\"chkPrice\"\r\n                        />\r\n                      }\r\n                      label=\"Price\"\r\n                    />\r\n                  </Grid>\r\n                </Grid>\r\n              </div>\r\n\r\n              <div style={{ width: \"100%\", paddingTop: \"20px\" }}>\r\n                <table className={classes.table} id=\"table-to-xls\">\r\n                  <tr>\r\n                    {chkDate && <th className={classes.th}>Date</th>}\r\n                    {chkForename && <th className={classes.th}>Forename</th>}\r\n                    {chkSurname && <th className={classes.th}>Surename</th>}\r\n                    {chkDOB && <th className={classes.th}>D.O.B</th>}\r\n                    {chkEmail && <th className={classes.th}>Email</th>}\r\n                    {chkTel && <th className={classes.th}>Tel</th>}\r\n                    {chkCertificate && (\r\n                      <th className={classes.th}>Certificate</th>\r\n                    )}\r\n                    {chkAntiBodyTest && (\r\n                      <th className={classes.th}>AntiBodyTest</th>\r\n                    )}\r\n                    {chkextRef && <th className={classes.th}>Lab No.</th>}\r\n                    {chkPrice && <th className={classes.th}>Price (£) </th>}\r\n                  </tr>\r\n\r\n                  {data.bookings\r\n                    .filter((booking) => {\r\n                      if (!justCorporate) {\r\n                        return (\r\n                          booking.bookingDate >= fromDateStr &&\r\n                          booking.bookingDate <= untilDateStr\r\n                        );\r\n                      } else {\r\n                        return (\r\n                          booking.bookingDate >= fromDateStr &&\r\n                          booking.bookingDate <= untilDateStr &&\r\n                          booking.paid &&\r\n                          booking.paidBy === \"corporate\" &&\r\n                          booking.corporate === corporate\r\n                        );\r\n                      }\r\n                    })\r\n\r\n                    .map((booking) => (\r\n                      <tr>\r\n                        {chkDate && (\r\n                          <td className={classes.td}>\r\n                            {FormatDateFromString(booking.bookingDate)}\r\n                          </td>\r\n                        )}\r\n                        {chkForename && (\r\n                          <td className={classes.td}>\r\n                            {booking.forenameCapital}\r\n                          </td>\r\n                        )}\r\n                        {chkSurname && (\r\n                          <td className={classes.td}>\r\n                            {booking.surnameCapital}\r\n                          </td>\r\n                        )}\r\n                        {chkDOB && (\r\n                          <th className={classes.th}>\r\n                            {/* {FormatDateFromString(booking.birthDate)} */}\r\n                          </th>\r\n                        )}\r\n                        {chkEmail && (\r\n                          <td className={classes.td}>{booking.email}</td>\r\n                        )}\r\n                        {chkTel && (\r\n                          <td className={classes.td}>{booking.phone}</td>\r\n                        )}\r\n                        {chkCertificate && (\r\n                          <td className={classes.td}>\r\n                            {booking.certificate ? \"YES\" : \"NO\"}\r\n                          </td>\r\n                        )}\r\n                        {chkAntiBodyTest && (\r\n                          <td className={classes.td}>\r\n                            {booking.antiBodyTest ? \"YES\" : \"NO\"}\r\n                          </td>\r\n                        )}\r\n                        {chkextRef && (\r\n                          <td className={classes.td}>{booking.extRef}</td>\r\n                        )}\r\n                        {chkPrice && (\r\n                          <td className={classes.td}>\r\n                            {PriceCalculator.calculatePrice(booking)}\r\n                          </td>\r\n                        )}\r\n                      </tr>\r\n                    ))}\r\n                </table>\r\n              </div>\r\n            </div>\r\n          </DialogContent>\r\n        </Dialog>\r\n      )}\r\n    </React.Fragment>\r\n  );\r\n} ","import React, { useEffect } from 'react';\r\nimport { useTheme } from '@material-ui/core/styles';\r\nimport { LineChart, Line, XAxis, YAxis, Label, ResponsiveContainer } from 'recharts';\r\nimport Title from './Title';\r\nimport dateformat from 'dateformat';\r\nimport BookService from './services/BookService';\r\nimport { LinearProgress } from '@material-ui/core';\r\n\r\n// Generate Sales Data\r\nfunction createData(time, amount) {\r\n  return { time, amount };\r\n}\r\n\r\n\r\nconst emptyData = [\r\n  createData('09:00', 0),\r\n  createData('10:00', 0),\r\n  createData('11:00', 0),\r\n  createData('12:00', 0),\r\n  createData('13:00', 0),\r\n  createData('14:00', 0),\r\n  createData('15:00', 0),\r\n  createData('16:00', 0),\r\n  createData('17:00', 0),\r\n  createData('18:00', undefined),\r\n\r\n];\r\n\r\nconst getCount = (data, str) =>\r\n{\r\n  if (!data)\r\n    return 0;\r\n\r\n  var count = 0;\r\n  for (var i=0; i < data.length; i++)\r\n  {\r\n    if (data[i]._id.substr(0,2) === str)\r\n    {\r\n      count += data[i].count;\r\n    }\r\n  }\r\n  return count;\r\n}\r\n\r\nexport default function Chart() {\r\n  const theme = useTheme();\r\n\r\n  const [data, setData] = React.useState(emptyData);\r\n  const [loading, setLoading] = React.useState(false)\r\n\r\n  useEffect(() =>\r\n  {\r\n    const fetchData = async () =>\r\n    {\r\n      const todayStr = dateformat(new Date(), 'yyyy-mm-dd');\r\n      var result = [];\r\n      try\r\n      {\r\n          setLoading(true)\r\n          const res = await BookService.getBookingsStatsByDateStr(todayStr);\r\n          setLoading(false)\r\n          const data = res.data.result;\r\n          result.push(createData('09:00', getCount(data,'09')));\r\n          result.push(createData('10:00', getCount(data,'10')));\r\n          result.push(createData('11:00', getCount(data,'11')));\r\n          result.push(createData('12:00', getCount(data,'12')));\r\n          result.push(createData('13:00', getCount(data,'13')));\r\n          result.push(createData('14:00', getCount(data,'14')));\r\n          result.push(createData('15:00', getCount(data,'15')));\r\n          result.push(createData('16:00', getCount(data,'16')));\r\n          result.push(createData('17:00', getCount(data,'17')));\r\n          result.push(createData('18:00', undefined));\r\n \r\n           setData(result);\r\n      }\r\n      catch(err){\r\n        setLoading(false)\r\n        console.error(err);\r\n      }\r\n\r\n    }\r\n  \r\n   fetchData();\r\n\r\n  }, [] );\r\n\r\n  return (\r\n    <React.Fragment>\r\n       {loading && (\r\n        <div style={{ width: \"100%\", paddingTop: \"3px\" }}>\r\n          <LinearProgress color=\"primary\" />\r\n        </div>\r\n      )}\r\n      <Title>Today</Title>\r\n      <ResponsiveContainer>\r\n        <LineChart\r\n          data={data}\r\n          margin={{\r\n            top: 16,\r\n            right: 16,\r\n            bottom: 0,\r\n            left: 24,\r\n          }}\r\n        >\r\n          <XAxis dataKey=\"time\" stroke={theme.palette.text.secondary} />\r\n          <YAxis stroke={theme.palette.text.secondary}>\r\n            <Label\r\n              angle={270}\r\n              position=\"left\"\r\n              style={{ textAnchor: 'middle', fill: theme.palette.text.primary }}\r\n            >\r\n              Online Bookings\r\n            </Label>\r\n          </YAxis>\r\n          <Line type=\"monotone\" dataKey=\"amount\" stroke={theme.palette.primary.main} dot={false} />\r\n        </LineChart>\r\n      </ResponsiveContainer>\r\n    </React.Fragment>\r\n  );\r\n}","import React, { useEffect } from \"react\";\r\nimport Link from \"@material-ui/core/Link\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport Title from \"./Title\";\r\nimport { Grid, LinearProgress, Tooltip } from \"@material-ui/core\";\r\nimport * as dateformat from \"dateformat\";\r\nimport BookService from \"./services/BookService\";\r\nimport BookingDialog from \"./BookingDialog\";\r\n\r\nconst useStyles = makeStyles({\r\n  depositContext: {\r\n    flex: 1,\r\n  },\r\n\r\n  bookingBox: {\r\n    display: \"flex\",\r\n    margin: \"5px\",\r\n    padding: \"5px\",\r\n    maxWidth: \"90px\",\r\n    minHeight: \"30px\",\r\n    border: \"1px solid #eee\",\r\n    fontSize: \"12px\",\r\n    fontWeight: \"500\",\r\n    cursor: \"pointer\",\r\n    backgroundColor: \"#ebedf7\",\r\n    color: \"#3f51b5\",\r\n    boxShadow: \"2px 4px #fafafa\",\r\n    borderRadius: \"5px\",\r\n    textAlign: \"center\",\r\n    alignItems: \"center\",\r\n    justifyItems: \"center\",\r\n    align: \"center\",\r\n\r\n    \"&:hover\": {\r\n      background: \"#3f51b5\",\r\n      color: \"#ebedf7\",\r\n    },\r\n  },\r\n});\r\n\r\nconst isWeekend = (date) => {\r\n  return (\r\n    date.getDay() === 1 ||\r\n    date.getDay() === 2 ||\r\n    date.getDay() === 3 ||\r\n    date.getDay() === 6 ||\r\n    date.getDay() === 0\r\n  );\r\n};\r\n\r\nconst isThursday = (date) => {\r\n  return date.getDay() === 4; /// Thursday\r\n};\r\n\r\nconst isFriday = (date) => {\r\n  return date.getDay() === 5; /// Friday\r\n};\r\n\r\nconst getCurrentTimeSlot = (now) => {\r\n  if (isWeekend(now)) {\r\n    return null;\r\n  }\r\n\r\n  var min = now.getMinutes();\r\n  var hour = now.getHours();\r\n\r\n  if (isThursday(now) && hour < 13) {\r\n    return null;\r\n  }\r\n\r\n  if (isFriday(now) && hour >= 13) {\r\n    return null;\r\n  }\r\n\r\n  if (hour < 10 || hour >= 18) return null;\r\n\r\n  const slotMinStr = min < 30 ? \"00\" : \"30\";\r\n  const pmStr = hour >= 12 ? \"PM\" : \"AM\";\r\n\r\n  if (hour > 12) hour = hour - 12;\r\n\r\n  const slotHourStr = `0${hour}`;\r\n\r\n  return `${slotHourStr}:${slotMinStr} ${pmStr}`;\r\n};\r\n\r\nconst getCurrentTimeSlotLabel = (timeStr) => {\r\n  if (!timeStr) {\r\n    return \"Closed\";\r\n  }\r\n\r\n  let endTimeStr = \"\";\r\n  switch (timeStr) {\r\n    case \"10:00 AM\":\r\n      endTimeStr = \"10:30 AM\";\r\n      break;\r\n    case \"10:30 AM\":\r\n      endTimeStr = \"11:00 AM\";\r\n      break;\r\n    case \"11:00 AM\":\r\n      endTimeStr = \"11:30 AM\";\r\n      break;\r\n    case \"11:30 AM\":\r\n      endTimeStr = \"12:00 PM\";\r\n      break;\r\n    case \"12:00 PM\":\r\n      endTimeStr = \"12:30 PM\";\r\n      break;\r\n    case \"12:30 PM\":\r\n      endTimeStr = \"01:00 PM\";\r\n      break;\r\n    case \"01:00 PM\":\r\n      endTimeStr = \"01:30 PM\";\r\n      break;\r\n    case \"01:30 PM\":\r\n      endTimeStr = \"02:00 PM\";\r\n      break;\r\n    case \"02:00 PM\":\r\n      endTimeStr = \"02:30 PM\";\r\n      break;\r\n    case \"02:30 PM\":\r\n      endTimeStr = \"03:00 PM\";\r\n      break;\r\n    case \"03:00 PM\":\r\n      endTimeStr = \"03:30 PM\";\r\n      break;\r\n    case \"03:30 PM\":\r\n      endTimeStr = \"04:00 PM\";\r\n      break;\r\n    case \"04:00 PM\":\r\n      endTimeStr = \"04:30 PM\";\r\n      break;\r\n    case \"04:30 PM\":\r\n      endTimeStr = \"05:00 PM\";\r\n      break;\r\n    case \"05:00 PM\":\r\n      endTimeStr = \"05:30 PM\";\r\n      break;\r\n    case \"05:30 PM\":\r\n      endTimeStr = \"06:00 PM\";\r\n      break;\r\n\r\n    default:\r\n      endTimeStr = \"\";\r\n      break;\r\n  }\r\n\r\n  return `${timeStr} - ${endTimeStr}`;\r\n};\r\n\r\nexport default function CurrentVisits() {\r\n  const classes = useStyles();\r\n\r\n  const [current, setCurrent] = React.useState(new Date());\r\n  const [bookings, setBookings] = React.useState([]);\r\n\r\n  const [selectedBooking, setSelectedBooking] = React.useState(null);\r\n  const [openDialog, setOpenDialog] = React.useState(false);\r\n\r\n  const [loading, setLoading] = React.useState(false);\r\n\r\n  useEffect(() => {\r\n    const interval = setInterval(() => {\r\n      setCurrent(new Date());\r\n    }, 30000);\r\n\r\n    return () => {\r\n      clearInterval(interval);\r\n    };\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    const currentTimeSlot = getCurrentTimeSlot(current);\r\n    if (!currentTimeSlot) return;\r\n    const todayStr = dateformat(current, \"yyyy-mm-dd\");\r\n    setLoading(true);\r\n    BookService.getBookingsByDateStrandTime(todayStr, currentTimeSlot)\r\n      .then((res) => {\r\n        setLoading(false);\r\n        if (res.data.status === \"OK\") {\r\n          setBookings([...res.data.bookings]);\r\n        }\r\n      })\r\n      .catch((err) => {\r\n        setLoading(false);\r\n        console.log(err);\r\n      });\r\n  }, [current]);\r\n\r\n  const getBookingsBox = (_bookings) => {\r\n    if (_bookings && _bookings.length > 0) {\r\n      return (\r\n        <div className={classes.root}>\r\n          <Grid\r\n            container\r\n            justify=\"flex-start\"\r\n            alignItems=\"flex-start\"\r\n            spacing={0}\r\n          >\r\n            {_bookings.map((booking) => (\r\n              <Grid item>\r\n                <div\r\n                  className={classes.bookingBox}\r\n                  onClick={(event) => bookingCliked(event, booking)}\r\n                >\r\n                  <span style={{ textAlign: \"center\" }}>\r\n                    {\" \"}\r\n                    {`${booking.surnameCapital}`.substring(0, 10)}{\" \"}\r\n                  </span>\r\n                </div>\r\n              </Grid>\r\n            ))}\r\n          </Grid>\r\n        </div>\r\n      );\r\n    }\r\n  };\r\n\r\n  const bookingCliked = (event, booking) => {\r\n    setSelectedBooking(booking);\r\n    setOpenDialog(true);\r\n  };\r\n\r\n  const handleCloseDialog = () => {\r\n    setOpenDialog(false);\r\n  };\r\n\r\n  return (\r\n    <React.Fragment>\r\n      {loading && (\r\n        <div style={{ width: \"100%\", paddingTop: \"3px\" }}>\r\n          <LinearProgress color=\"primary\" />\r\n        </div>\r\n      )}\r\n\r\n      <Title>Current Visits</Title>\r\n      <Typography component=\"p\" variant=\"h6\">\r\n        {getCurrentTimeSlotLabel(getCurrentTimeSlot(current))}\r\n      </Typography>\r\n      <Typography color=\"textSecondary\" className={classes.depositContext}>\r\n        on {dateformat(current, \"dd mmmm, yyyy\")}\r\n      </Typography>\r\n\r\n      {getBookingsBox(bookings)}\r\n\r\n      <BookingDialog\r\n        booking={selectedBooking}\r\n        open={openDialog}\r\n        onClose={handleCloseDialog}\r\n      />\r\n    </React.Fragment>\r\n  );\r\n}\r\n","import React, { useEffect } from 'react';\r\nimport Link from '@material-ui/core/Link';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport Table from '@material-ui/core/Table';\r\nimport TableBody from '@material-ui/core/TableBody';\r\nimport TableCell from '@material-ui/core/TableCell';\r\nimport TableHead from '@material-ui/core/TableHead';\r\nimport TableRow from '@material-ui/core/TableRow';\r\nimport Title from './Title';\r\nimport BookService from './services/BookService';\r\nimport * as dateformat from 'dateformat';\r\nimport GlobalState from './../GlobalState';\r\nimport { getMenuIndex } from './../MenuList';\r\nimport {FormatDateFromString, FormatDateFromStringShortYear} from './DateFormatter';\r\nimport { LinearProgress } from '@material-ui/core';\r\n\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  seeMore: {\r\n    marginTop: theme.spacing(3),\r\n  },\r\n}));\r\n\r\nexport default function BookingView() {\r\n  const classes = useStyles();\r\n  const [state, setState] = React.useContext(GlobalState);  \r\n\r\n  const [data, setData] = React.useState({bookings: [] , isFetching : false});\r\n\r\n  const [refresh, setRefresh] = React.useState(false);\r\n\r\n  const [loading, setLoading] = React.useState(false)\r\n\r\n  const seeMoreRecords = (event) => {\r\n    event.preventDefault();\r\n    setState(state=>({...state, currentMenuIndex:getMenuIndex('gynae',`recentBookings`)}));\r\n  }\r\n\r\n  const loadData = () => \r\n  {\r\n    setData({bookings: data.bookings, isFetching: true});\r\n    setLoading(true)\r\n    BookService.getRecentBookings().then( (res) =>{\r\n      setLoading(false)\r\n        setData({bookings: res.data, isFetching: false});\r\n\r\n    }).catch( (err) => {\r\n      setLoading(false)\r\n        console.log(err);\r\n        setData({bookings: data.bookings, isFetching: false});\r\n    });\r\n  }\r\n\r\n\r\n  useEffect( () => {\r\n          loadData();\r\n        },\r\n        [refresh]);   \r\n\r\n\r\n   useEffect( () => {\r\n     loadData();\r\n     const interval = setInterval(() => {\r\n       setRefresh(refresh => !refresh);\r\n     }, 30000);\r\n\r\n     return () =>\r\n     {\r\n       clearInterval(interval)\r\n     }\r\n     \r\n   }, []) ;    \r\n\r\n   const formatTimeStamp = (timeStamp) =>\r\n   {\r\n     const todayStr = dateformat(new Date(), 'yyyy-mm-dd');\r\n     const timeStampStr = dateformat(timeStamp, 'yyyy-mm-dd');\r\n     if (todayStr === timeStampStr)\r\n     {\r\n       return dateformat(timeStamp, \"'Today', h:MM:ss TT\");\r\n     }\r\n     else\r\n     {\r\n        return dateformat(timeStamp, \"mmm dS, h:MM:ss TT\");\r\n     }\r\n   }\r\n\r\n  return (\r\n    <React.Fragment>\r\n       {loading && (\r\n        <div style={{ width: \"100%\", paddingTop: \"3px\" }}>\r\n          <LinearProgress color=\"primary\" />\r\n        </div>\r\n      )}\r\n      <Title>Recent Bookings</Title>\r\n      <Table size=\"small\">\r\n        <TableHead>\r\n          <TableRow>\r\n            <TableCell>TimeStamp</TableCell>        \r\n            <TableCell>Fullname</TableCell>\r\n            <TableCell>Email</TableCell>\r\n            <TableCell>Tel</TableCell>\r\n            <TableCell>Service</TableCell>\r\n            <TableCell>Booked Date</TableCell>\r\n            <TableCell>Booked Time</TableCell> \r\n          </TableRow>\r\n        </TableHead>\r\n        <TableBody>\r\n          {data.bookings.map((row) => (\r\n            <TableRow key={row._id}>\r\n              <TableCell>{formatTimeStamp(row.timeStamp)}</TableCell>\r\n              <TableCell>{row.fullname}</TableCell>\r\n              <TableCell>{row.email}</TableCell>\r\n              <TableCell>{row.phone}</TableCell>\r\n              <TableCell>{row.service}</TableCell>\r\n              <TableCell>{FormatDateFromString(row.bookingDate)}</TableCell>\r\n              <TableCell>{row.bookingTime}</TableCell>\r\n            </TableRow>\r\n          ))}\r\n        </TableBody>\r\n      </Table>\r\n      <div className={classes.seeMore}>\r\n        <Link color=\"primary\" href=\"#\" onClick={seeMoreRecords}>\r\n          See more records\r\n        </Link>\r\n      </div>\r\n    </React.Fragment>\r\n  );\r\n}","import React from 'react';\r\nimport clsx from 'clsx';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport Paper from '@material-ui/core/Paper';\r\nimport Chart from './Chart';\r\nimport CurrentVisits from './CurrentVisits';\r\n\r\n\r\n\r\nimport { Tooltip } from '@material-ui/core';\r\nimport GlobalState from './../GlobalState';\r\nimport BookingView from './BookingView';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n \r\n  paper: {\r\n    padding: theme.spacing(2),\r\n    display: 'flex',\r\n    overflow: 'auto',\r\n    flexDirection: 'column',\r\n  },\r\n  fixedHeight: {\r\n    height: 240,\r\n  },\r\n}));\r\n\r\nexport default function DashboardPreview() {\r\n  const classes = useStyles();\r\n  const [state, setState] = React.useContext(GlobalState);\r\n\r\n  const fixedHeightPaper = clsx(classes.paper, classes.fixedHeight);\r\n\r\n  return (\r\n        <React.Fragment>\r\n\r\n<           Grid container spacing={3}>\r\n                    {/* Chart */}\r\n                    <Grid item xs={12} md={4} lg={6}>\r\n                    <Paper className={fixedHeightPaper}>\r\n                        <Chart />\r\n                    </Paper>\r\n                    </Grid>\r\n                    {/* Current Visits */}\r\n                    <Grid item xs={12} md={4} lg={6}>\r\n                    <Paper className={fixedHeightPaper}>\r\n                        <CurrentVisits />\r\n                    </Paper>\r\n                    </Grid>\r\n                    {/* Recent Bookings */}\r\n                    <Grid item xs={12}>\r\n                    <Paper className={classes.paper}>\r\n                        <BookingView/>\r\n                    </Paper>\r\n                    </Grid>\r\n          </Grid>\r\n        </React.Fragment>\r\n  );\r\n}","import React from 'react';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport GlobalState from './../GlobalState';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport Accordion from '@material-ui/core/Accordion';\r\nimport AccordionDetails from '@material-ui/core/AccordionDetails';\r\nimport AccordionSummary from '@material-ui/core/AccordionSummary';\r\nimport ExpandMoreIcon from '@material-ui/icons/ExpandMore';\r\nimport { Button, Checkbox, FormControlLabel, Link, TextField, Tooltip } from '@material-ui/core';\r\nimport PDFService from './services/PDFService';\r\n\r\nimport {calculatePrice} from './PriceCalculator';\r\n\r\n\r\nimport bookingService from './services/BookService';\r\nimport CheckIcon from '@material-ui/icons/Check';\r\nimport CloseIcon from '@material-ui/icons/Close';\r\nimport DeleteIcon from '@material-ui/icons/Delete';\r\n\r\nimport {FormatDateFromString, RevertFormatDateFromString} from './DateFormatter';\r\n\r\nimport PrintIcon from '@material-ui/icons/Print';\r\n\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  box: {\r\n    backgroundColor : \"#373737\",\r\n    color: \"#fff\",\r\n    padding : \"1px\",\r\n    borderRadius : \"4px\",\r\n    textAlign: \"justify\",\r\n    paddingRight: \"40px\"\r\n  },\r\n\r\n  boxRed: {\r\n    backgroundColor : \"#dc2626\",\r\n    color: \"#fff\",\r\n    padding : \"1px\",\r\n    borderRadius : \"4px\",\r\n    textAlign: \"justify\",\r\n    paddingRight: \"40px\"\r\n  },\r\n\r\n  boxInfo: {\r\n    textAlign: \"justify\",\r\n    backgroundColor : \"#fafafa\",\r\n    color: \"#333\",\r\n    padding : \"1px\",\r\n    borderRadius : \"4px\",\r\n    paddingRight: \"40px\",\r\n    border: \"1px solid #eee\",\r\n  },\r\n\r\n  ul: {\r\n     listStyle: \"none\",\r\n     padding: \"0\",\r\n     margin: \"0\"\r\n  },\r\n\r\n  li: {\r\n    marginBottom : \"15px\"\r\n  },\r\n\r\n\r\n  icon: {\r\n    marginRight : \"8px\"\r\n  },\r\n\r\n  root: {\r\n    width: '100%',\r\n  },\r\n\r\n  lineThrough:{\r\n    textDecoration : \"line-through\",\r\n  },\r\n\r\n\r\n\r\n  heading: {\r\n    fontSize: theme.typography.pxToRem(15),\r\n    flexBasis: '33.33%',\r\n    flexShrink: 0,\r\n    color: theme.palette.text.secondary,\r\n  },\r\n  secondaryHeading: {\r\n    fontSize: theme.typography.pxToRem(15),\r\n  },\r\n\r\n  infoDetails:{\r\n    textAlign: \"left\",\r\n  },\r\n\r\n  infoTitle:{\r\n    fontWeight: \"800\",\r\n    marginRight: \"10px\"\r\n  },\r\n\r\n  infoData:{\r\n    fontWeight: \"400\",\r\n  },\r\n\r\n  title:\r\n  {\r\n    // textAlign : \"center\",\r\n    // fontWeight : \"500\",\r\n    // margin: \"10px\",\r\n    // backgroundColor : \"#eee\",\r\n    // padding : \"10px\",\r\n    // borderRadius : \"4px\"\r\n    textAlign: \"center\",\r\n    fontWeight : \"600\",\r\n    marginLeft: \"10px\",\r\n    marginBottom: \"5px\"\r\n\r\n  },\r\n\r\n  Accordion:{\r\n    backgroundColor : \"#f5f5f5\",\r\n    color: \"#222\"\r\n  },\r\n\r\n  AccordionDeleted:{\r\n    backgroundColor : \"#aaa\",\r\n    color: \"#555\"\r\n  },\r\n\r\n  DownloadForm:{\r\n      marginTop: \"10px\",\r\n      marginBottom : \"10px\"\r\n  },\r\n\r\n  infoDataCharges:{\r\n    fontSize : \"18px\",\r\n    color: \"green\",\r\n    fontWeight : \"600\"\r\n  },\r\n\r\n  infoDataChargesHigher:{\r\n    fontSize : \"18px\",\r\n    color: \"red\",\r\n    fontWeight : \"600\"\r\n  },\r\n  BookedLabel:{\r\n    color: \"#606060\",\r\n    paddingRight: \"10px\",\r\n    paddingLeft: \"5px\",\r\n    paddingBottom: \"3px\",\r\n    paddingTop: \"3px\",\r\n    fontWeight: \"800\",\r\n    borderLeft: \"5px solid\",\r\n    borderColor: \"#606060\"\r\n  },\r\n\r\n  PatientAttendedLabel:{\r\n    color: \"#0066aa\",\r\n    paddingRight: \"10px\",\r\n    paddingLeft: \"5px\",\r\n    paddingBottom: \"3px\",\r\n    paddingTop: \"3px\",\r\n    fontWeight: \"800\",\r\n    borderLeft: \"5px solid\",\r\n    borderColor: \"#0066aa\"\r\n  },\r\n\r\n  SampleTakenLabel:{\r\n    color: \"#0066cc\",\r\n    paddingRight: \"10px\",\r\n    paddingLeft: \"5px\",\r\n    paddingBottom: \"3px\",\r\n    paddingTop: \"3px\",\r\n    fontWeight: \"800\",\r\n    borderLeft: \"5px solid\",\r\n    borderColor: \"#0066cc\"\r\n  },\r\n\r\n  ReportSentLabel:{\r\n    color: \"#009900\",\r\n    paddingRight: \"10px\",\r\n    paddingLeft: \"5px\",\r\n    paddingBottom: \"3px\",\r\n    paddingTop: \"3px\",\r\n    fontWeight: \"800\",\r\n    borderLeft: \"5px solid\",\r\n    borderColor: \"#009900\"\r\n  },\r\n\r\n  ReportCertSentLabel:{\r\n    color: \"#009900\",\r\n    paddingRight: \"10px\",\r\n    paddingLeft: \"5px\",\r\n    paddingBottom: \"3px\",\r\n    paddingTop: \"3px\",\r\n    fontWeight: \"800\",\r\n    borderLeft: \"5px solid\",\r\n    borderColor: \"#009900\"\r\n  },\r\n\r\n  PositiveLabel:{\r\n    color: \"red\",\r\n    paddingRight: \"10px\",\r\n    paddingLeft: \"5px\",\r\n    paddingBottom: \"3px\",\r\n    paddingTop: \"3px\",\r\n    fontWeight: \"800\",\r\n    borderLeft: \"5px solid\",\r\n    borderColor: \"red\"\r\n  },\r\n\r\n\r\n  EditButton:\r\n  {\r\n    marginBottom : \"20px\",\r\n    backgroundColor : \"#2f942e\",\r\n    \"&:hover\": {\r\n      background: \"green\",\r\n      color: \"#fff\"\r\n    },\r\n    textDecoration : \"none !important\",\r\n    padding: \"10px\",\r\n    width: \"400px\"   \r\n  },\r\n\r\n  RestoreButton:\r\n  {\r\n    marginBottom : \"20px\",\r\n    backgroundColor : \"#fafafa\",\r\n    color: \"#555\",\r\n    \"&:hover\": {\r\n      background: \"#f1f1f1\",\r\n      color: \"#111\"\r\n    },\r\n    textDecoration : \"none !important\",\r\n    padding: \"10px\" ,\r\n    width: \"400px\"    \r\n  },\r\n\r\n\r\n  DeleteButton:\r\n  {\r\n    marginBottom : \"20px\",\r\n    backgroundColor : \"#d90015\",\r\n    \"&:hover\": {\r\n      background: \"#b80012\",\r\n      color: \"#fff\"\r\n    },\r\n\r\n    padding: \"10px\",\r\n    width: \"400px\"   \r\n    \r\n  },\r\n\r\n  SaveButton:\r\n  {\r\n    marginBottom : \"10px\",\r\n    padding: \"10px\",\r\n\r\n    backgroundColor : \"#d1175e\",\r\n    \"&:hover\": {\r\n      background: \"#bd0d50\",\r\n      color: \"#fff\",\r\n      \r\n    },\r\n    width: \"400px\"   \r\n\r\n  },\r\n\r\n  CancelButton:\r\n  {\r\n    marginBottom : \"20px\",\r\n    // padding: \"10px\"\r\n  },\r\n\r\n  TextBox: {\r\n    \r\n    padding : \"0px\"\r\n\r\n  },\r\n\r\n  checkIcon:{\r\n    color: \"green\",   \r\n  },\r\n\r\n  closeIcon:{\r\n    color: \"red\"\r\n  },\r\n\r\n  centeredLabel : {\r\n    display: \"flex\",\r\n    alignItems: \"center\"\r\n  }\r\n\r\n\r\n\r\n\r\n\r\n\r\n}));\r\n\r\n\r\n\r\n\r\nexport default function PersonsBox() {\r\n    const classes = useStyles();\r\n\r\n    const [state, setState] = React.useContext(GlobalState);\r\n\r\n    const [expanded, setExpanded] = React.useState('panel0');\r\n\r\n    const [editMode, setEditMode] = React.useState({edit : false, person : null});\r\n    const [deleteMode, setDeleteMode] = React.useState({delete : false, person : null});\r\n    const [restoreMode, setRestoreMode] = React.useState({restore : false, person : null});\r\n\r\n    const [saving, setSaving] =  React.useState(false);\r\n    const [deleting, setDeleting] =  React.useState(false);\r\n    const [restoring, setRestoring] =  React.useState(false);\r\n\r\n    const [validationError, setValidationError] = React.useState({});\r\n\r\n\r\n    const [bookingDate, setBookingDate] = React.useState('');\r\n    const [bookingTime, setBookingTime] = React.useState('');\r\n\r\n    const [fullname, setFullname] = React.useState('');\r\n    const [email, setEmail] = React.useState('');\r\n    const [tel, setTel] = React.useState('');\r\n    const [service, setService] = React.useState('');\r\n    const [notes, setNotes] = React.useState('');\r\n\r\n\r\n    const bookingDateChanged = (event) =>\r\n    {\r\n      setBookingDate(event.target.value);\r\n      setValidationError({...validationError, bookingDateError : false});\r\n    }\r\n\r\n    const bookingTimeChanged = (event) =>\r\n    {\r\n      setBookingTime(event.target.value);\r\n      setValidationError({...validationError, bookingTimeError : false});\r\n    }\r\n\r\n    const fullnameChanged = (event) =>\r\n    {\r\n      setFullname(event.target.value);\r\n    }\r\n\r\n    const emailChanged = (event) =>\r\n    {\r\n      setEmail(event.target.value);\r\n    }\r\n\r\n    const telChanged = (event) =>\r\n    {\r\n      setTel(event.target.value);\r\n    }\r\n\r\n    const serviceChanged = (event) =>\r\n    {\r\n      setService(event.target.value);\r\n    }\r\n\r\n    const notesChanged = (event) =>\r\n    {\r\n      setNotes(event.target.value);\r\n    }\r\n\r\n\r\n    const handleChange = (panel) => (event, isExpanded) => {\r\n      setExpanded(isExpanded ? panel : false);\r\n    };\r\n\r\n    const getStatusLabel = (status) => {\r\n      if (status === 'booked')\r\n      {\r\n        return (\r\n          <span className={classes.BookedLabel}> Booking Made </span>\r\n        );\r\n    \r\n      }else if (status === 'patient_attended')\r\n      {\r\n        return (\r\n          <span  className={classes.PatientAttendedLabel}> Patient Attended </span>\r\n        );\r\n    \r\n      }\r\n      else{\r\n        return 'Unknown';\r\n      }\r\n    }\r\n\r\n\r\n   const handleEditModeChanged = (edit, person) => {\r\n\r\n       if (edit)\r\n       {\r\n         setFullname(person.fullname);\r\n         setBookingDate(FormatDateFromString(person.bookingDate));\r\n         setBookingTime(person.bookingTime);\r\n         setEmail(person.email);\r\n         setTel(person.phone);\r\n         setService(person.service)\r\n         if (person.notes)\r\n         {\r\n          setNotes(person.notes);\r\n         }\r\n        \r\n         setEditMode({edit: edit, person: person});\r\n\r\n       }\r\n       else if (!edit && !person)\r\n       {\r\n         setEditMode({edit: edit, person: person});\r\n       }\r\n       else if (!edit && person)\r\n       {\r\n          const booking = {};\r\n          const bookingId = person._id;\r\n          booking.email = email;\r\n          booking.phone = tel;\r\n          booking.fullname = fullname;\r\n          booking.notes = notes;\r\n          booking.service = service;\r\n          booking.bookingDate = RevertFormatDateFromString(bookingDate);\r\n          booking.bookingTime = bookingTime;\r\n          booking.bookingRef = person.bookingRef;\r\n\r\n          if  (validateBooking(booking))\r\n          {\r\n            updateBooking({bookingId: bookingId, person: booking});\r\n          }\r\n       }\r\n   }\r\n\r\n   const validateDate = (str) =>\r\n   {\r\n     var error = false;\r\n     if (!str || str.length !== 10)\r\n     {\r\n       error = true;\r\n     }\r\n\r\n     if (str.charAt(4) !== '-'  || str.charAt(7) !== '-')\r\n     {\r\n       error = true;\r\n     }\r\n\r\n     try\r\n     {\r\n       \r\n       const result = /^\\d{4}-\\d{2}-\\d{2}$/.test(str);\r\n       if (!result)\r\n       {\r\n          error = true;\r\n       }\r\n\r\n       const year = parseInt(str.substr(0,4));\r\n       const month = parseInt(str.substr(5,2));\r\n       const day = parseInt(str.substr(8,2));\r\n\r\n       if (year < 1900)\r\n       {\r\n          error = true;\r\n       }\r\n\r\n       if (month < 1 || month > 12)\r\n       {\r\n         error = true;\r\n       }        \r\n\r\n       if (day > 31)\r\n       {\r\n         error = true;\r\n       }\r\n\r\n     }catch(err)\r\n     {\r\n       error = true;\r\n     }\r\n\r\n\r\n\r\n     return !error;\r\n   }\r\n\r\n   const validateTime =(str) =>\r\n   {\r\n     var error = false;\r\n\r\n     const result = /^\\d{2}:\\d{2} AM$|^\\d{2}:\\d{2} PM$/.test(str);\r\n     if (!result)\r\n     {\r\n        error = true;\r\n     }\r\n\r\n     try{\r\n       const hour = parseInt(str.substr(0,2));\r\n       const minute = parseInt(str.substr(3,2));\r\n\r\n       if (hour < 0 || hour > 12)\r\n       {\r\n         error = true;\r\n       }\r\n\r\n       if (minute < 0 || minute > 59)\r\n       {\r\n         error = true;\r\n       }\r\n\r\n     }catch(err)\r\n     {\r\n       error = true;\r\n     }\r\n\r\n     return !error;\r\n   }\r\n\r\n   const validateBooking = (booking) =>\r\n   {\r\n      var error = false;\r\n\r\n      if (!validateDate(booking.bookingDate))\r\n      {\r\n        error = true;\r\n        setValidationError({...validationError, bookingDateError : true});\r\n      }\r\n\r\n      if (!validateTime(booking.bookingTime))\r\n      {\r\n        error = true;\r\n        setValidationError({...validationError, bookingTimeError : true});\r\n      }\r\n     \r\n\r\n      return !error;\r\n   }\r\n\r\n   const updateBooking = (payload) =>\r\n   {\r\n       setSaving(true);\r\n       bookingService.updateBooking(payload).then( (res) => {\r\n        setSaving(false);\r\n        setEditMode({edit: false, person: null});\r\n        setState(state => ({...state, RefreshPersonInfo : !state.RefreshPersonInfo}));\r\n\r\n       }).catch ( (err) => {\r\n         setSaving(false);\r\n         setEditMode({edit: false, person: null});\r\n         console.log(err);\r\n       });\r\n   }\r\n\r\n   const deleteBooking = (id) =>\r\n   {\r\n       setDeleting(true);\r\n       bookingService.deleteBooking(id).then( (res) => {\r\n        setDeleting(false);\r\n        setDeleteMode({delete: false, person: null});\r\n        setState(state => ({...state, RefreshPersonInfo : !state.RefreshPersonInfo}));\r\n\r\n       }).catch ( (err) => {\r\n          setDeleting(false);\r\n          setDeleteMode({delete: false, person: null});\r\n         console.log(err);\r\n       });\r\n   }\r\n\r\n   const restoreBooking = (id) =>\r\n   {\r\n       setRestoring(true);\r\n       bookingService.unDeleteBooking(id).then( (res) => {\r\n        setRestoring(false);\r\n        setRestoreMode({restore: false, person: null});\r\n        setState(state => ({...state, RefreshPersonInfo : !state.RefreshPersonInfo}));\r\n\r\n       }).catch ( (err) => {\r\n        setRestoring(false);\r\n        setRestoreMode({restore: false, person: null});\r\n         console.log(err);\r\n       });\r\n   }\r\n\r\n   const changeBackToBookingMade = (event, id) =>\r\n   {\r\n     setSaving(true);\r\n     bookingService.changeBackToBookingMade(id).then(res => {\r\n       setSaving(false);\r\n       setState(state => ({...state, RefreshPersonInfo : !state.RefreshPersonInfo}));\r\n     }).catch(err => {\r\n       console.log(err);\r\n       setSaving(false);\r\n     })\r\n   }\r\n\r\n\r\n\r\n   const handleDeleteModeChanged = (del, person) => {\r\n\r\n    if (del)\r\n    {\r\n      setDeleteMode({delete: del, person: person});\r\n    }\r\n    else if (!del && !person)\r\n    {\r\n      setDeleteMode({delete: del, person: person});\r\n    }\r\n    else if (!del && person)\r\n    {\r\n        deleteBooking(person._id);\r\n    }\r\n  }\r\n\r\n  const handleRestoreModeChanged = (restore, person) => {\r\n\r\n    if (restore)\r\n    {\r\n      setRestoreMode({restore: restore, person: person});\r\n    }\r\n    else if (!restore && !person)\r\n    {\r\n      setRestoreMode({restore: restore, person: person});\r\n    }\r\n    else if (!restore && person)\r\n    {\r\n        restoreBooking(person._id);\r\n    }\r\n  }\r\n\r\n  return (\r\n    <React.Fragment>\r\n          \r\n      <Grid container direction=\"column\" spacing={1} justify=\"flex-start\" alignItems=\"center\">\r\n          <div className={classes.title}> Following Records Found :</div>\r\n\r\n          {state.foundRecords.map((person,index) => (\r\n   \r\n                <Grid item xs={12} md={12} key={`panel${index}`}>\r\n                <div className={classes.root}>\r\n                    <Accordion className={person.deleted ? classes.AccordionDeleted : classes.Accordion} expanded={expanded === `panel${index}`} onChange={handleChange(`panel${index}`)}>\r\n                    <AccordionSummary className={person.deleted ? classes.lineThrough : ''}\r\n                        expandIcon={<ExpandMoreIcon />}\r\n                        aria-controls=\"panel1bh-content\"\r\n                        id={`panel${index}bh-header`}\r\n                    >\r\n                      {person.deleted && (\r\n                          <Tooltip  title=\"This record has been deleted.\">\r\n                            <DeleteIcon  style={{padding: 0, margin: 0,  color: \"#fff\", fontSize: 25 }}/>\r\n                        </Tooltip>\r\n                      )}\r\n\r\n                        <Typography className={classes.heading}> {`#${index+1}`} </Typography>\r\n                        <Typography className={classes.secondaryHeading}>\r\n                        {`${person.fullname}`}\r\n                        </Typography>\r\n                    </AccordionSummary>\r\n\r\n                    <AccordionDetails className={classes.infoDetails}>\r\n                        \r\n\r\n\r\n                        <ul className={classes.ul}>\r\n\r\n                        {/* Restore Functionality ******************************************* */}  \r\n                        <li hidden={!(restoreMode.restore && restoreMode.person._id  === person._id)}>\r\n                              <div style={{fontWeight: \"500\", paddingBottom: \"5px\", paddingLeft: \"5px\", fontSize:\"16px\" , color:\"#fff\"}}>\r\n                                Are you sure you want to restore this record?\r\n                              </div>\r\n                            </li>\r\n\r\n                            <li hidden={!person.deleted || (restoreMode.restore && restoreMode.person._id === person._id)}>\r\n                                 <Button\r\n\r\n                                    type=\"button\"\r\n                                    fullWidth\r\n                                    variant=\"contained\"\r\n                                    color=\"primary\"\r\n                                    onClick = {() => {handleRestoreModeChanged(true, person)}}\r\n                                    className={classes.RestoreButton}\r\n                                 >\r\n                                   Restore This Record\r\n                                </Button>\r\n                            </li>\r\n\r\n                            <li hidden={!(restoreMode.restore && restoreMode.person._id  === person._id)}>\r\n                                 <Button\r\n                                    type=\"button\"\r\n                                    fullWidth\r\n                                    variant=\"contained\"\r\n                                    color=\"primary\"\r\n                                    disabled = {restoring}\r\n                                    onClick = {() => {handleRestoreModeChanged(false, person)}}\r\n                                    className={classes.SaveButton}\r\n                                 >\r\n                                    YES, Restore this!\r\n                                </Button>\r\n                            </li>\r\n\r\n                            <li hidden={!(restoreMode.restore && restoreMode.person._id  === person._id)}>\r\n                                 <Button\r\n                                    type=\"button\"\r\n                                    fullWidth\r\n                                    variant=\"contained\"\r\n                                    color=\"default\"\r\n                                    disabled = {restoring}\r\n                                    onClick = {() => {handleRestoreModeChanged(false, null)}}\r\n                                    className={classes.CancelButton}\r\n                                 >\r\n                                    Cancel\r\n                                </Button>\r\n                            </li>\r\n\r\n                           {/*  ******************************************************************* */}\r\n\r\n                              {/* Edit Functionality ******************************************* */}\r\n\r\n                            <li hidden={person.deleted || deleteMode.delete || (editMode.edit && editMode.person._id === person._id)}>\r\n                                 <Button\r\n                                    type=\"button\"\r\n                                    fullWidth\r\n                                    variant=\"contained\"\r\n                                    color=\"primary\"\r\n                                    onClick = {() => {handleEditModeChanged(true, person)}}\r\n                                    className={classes.EditButton}\r\n                                 >\r\n                                    Edit Booking Info\r\n                                </Button>\r\n                            </li>\r\n\r\n                            <li hidden={!(editMode.edit && editMode.person._id  === person._id)}>\r\n                                 <Button\r\n                                    type=\"button\"\r\n                                    fullWidth\r\n                                    variant=\"contained\"\r\n                                    color=\"primary\"\r\n                                    disabled = {saving}\r\n                                    onClick = {() => {handleEditModeChanged(false, person)}}\r\n                                    className={classes.SaveButton}\r\n                                 >\r\n                                    Save Changes\r\n                                </Button>\r\n                            </li>\r\n\r\n                            <li hidden={!(editMode.edit && editMode.person._id === person._id)}>\r\n                                 <Button\r\n                                    type=\"button\"\r\n                                    fullWidth\r\n                                    variant=\"contained\"\r\n                                    color=\"default\"\r\n                                    disabled = {saving}\r\n                                    onClick = {() => {handleEditModeChanged(false, null)}}\r\n                                    className={classes.CancelButton}\r\n                                 >\r\n                                    Cancel\r\n                                </Button>\r\n                            </li>\r\n                            \r\n                            {/* ****************************************************************************************** */}\r\n\r\n\r\n                            {/* Delete Functionality ******************************************* */}\r\n\r\n                            <li hidden={!(deleteMode.delete && deleteMode.person._id  === person._id)}>\r\n                              <div style={{fontWeight: \"600\",  paddingBottom: \"5px\", paddingLeft: \"5px\", fontSize:\"16px\"}}>\r\n                                Are you sure you want to delete this record?\r\n                              </div>\r\n                            </li>\r\n\r\n                            <li hidden={person.deleted ||  editMode.edit || (deleteMode.delete && deleteMode.person._id === person._id)}>\r\n                                 <Button\r\n                                    type=\"button\"\r\n                                    fullWidth\r\n                                    variant=\"contained\"\r\n                                    color=\"primary\"\r\n                                    onClick = {() => {handleDeleteModeChanged(true, person)}}\r\n                                    className={classes.DeleteButton}\r\n                                 >\r\n                                   Delete This Record\r\n                                </Button>\r\n                            </li>\r\n\r\n                            <li hidden={!(deleteMode.delete && deleteMode.person._id  === person._id)}>\r\n                                 <Button\r\n                                    type=\"button\"\r\n                                    fullWidth\r\n                                    variant=\"contained\"\r\n                                    color=\"primary\"\r\n                                    disabled = {deleting}\r\n                                    onClick = {() => {handleDeleteModeChanged(false, person)}}\r\n                                    className={classes.SaveButton}\r\n                                 >\r\n                                    YES, Delete this!\r\n                                </Button>\r\n                            </li>\r\n\r\n                            <li hidden={!(deleteMode.delete && deleteMode.person._id === person._id)}>\r\n                                 <Button\r\n                                    type=\"button\"\r\n                                    fullWidth\r\n                                    variant=\"contained\"\r\n                                    color=\"default\"\r\n                                    disabled = {deleting}\r\n                                    onClick = {() => {handleDeleteModeChanged(false, null)}}\r\n                                    className={classes.CancelButton}\r\n                                 >\r\n                                    Cancel\r\n                                </Button>\r\n                            </li>\r\n                                 \r\n                            {/* ****************************************************************************************** */}\r\n\r\n                            <li className={classes.li}>\r\n                                <span className={classes.infoTitle}>BOOKED DATE</span> \r\n                            \r\n\r\n                                <span hidden={(editMode.edit && editMode.person._id  === person._id)} className={classes.infoData}>\r\n                                   {FormatDateFromString(person.bookingDate) }\r\n                                  </span>  \r\n                                        <span hidden={!(editMode.edit && editMode.person._id  === person._id)} className={classes.infoData}>\r\n                                          <TextField \r\n                                                      fullWidth\r\n                                                      error={validationError.bookingDateError}\r\n                                                      className={classes.TextBox} \r\n                                                      value={bookingDate}\r\n                                                      onChange = {bookingDateChanged}\r\n                                                      inputProps= {{\r\n                                                          style:{\r\n                                                            padding: 0\r\n                                                          }\r\n                                                        }\r\n                                                      }\r\n                                                      > \r\n                                          </TextField> \r\n                                        </span> \r\n\r\n\r\n                            </li>\r\n\r\n                            <li className={classes.li}>\r\n                                <span className={classes.infoTitle}>BOOKED TIME</span> \r\n                                <span hidden={(editMode.edit && editMode.person._id  === person._id)} className={classes.infoData}>{person.bookingTime}</span>  \r\n                                        <span hidden={!(editMode.edit && editMode.person._id  === person._id)} className={classes.infoData}>\r\n                                          <TextField \r\n                                                      fullWidth\r\n                                                      error={validationError.bookingTimeError}\r\n                                                      className={classes.TextBox} \r\n                                                      value={bookingTime}\r\n                                                      onChange = {bookingTimeChanged}\r\n                                                      inputProps= {{\r\n                                                          style:{\r\n                                                            padding: 0\r\n                                                          }\r\n                                                        }\r\n                                                      }\r\n                                                      > \r\n                                          </TextField> \r\n                                        </span> \r\n\r\n\r\n                            </li>\r\n\r\n                            <li className={classes.li}>\r\n                            <span className={classes.infoTitle}>FULLNAME</span> \r\n                                        <span hidden={(editMode.edit && editMode.person._id  === person._id)} className={classes.infoData}>{person.fullname}</span>  \r\n                                        <span hidden={!(editMode.edit && editMode.person._id  === person._id)} className={classes.infoData}>\r\n                                        <TextField \r\n                                                      fullWidth\r\n                                                      className={classes.TextBox} \r\n                                                      value={fullname}\r\n                                                      onChange = {fullnameChanged}\r\n                                                      inputProps= {{\r\n                                                          style:{\r\n                                                            padding: 0\r\n                                                          }\r\n                                                        }\r\n                                                      }\r\n                                                      > \r\n                                          </TextField> \r\n                                        </span> \r\n                            </li>\r\n                            <li className={classes.li}>\r\n                                <span className={classes.infoTitle}>EMAIL</span> \r\n                                       <span hidden={(editMode.edit && editMode.person._id  === person._id)} className={classes.infoData}>{person.email}</span>  \r\n                                        <span hidden={!(editMode.edit && editMode.person._id  === person._id)} className={classes.infoData}>\r\n                                        <TextField \r\n                                                      fullWidth\r\n                                                      className={classes.TextBox} \r\n                                                      value={email}\r\n                                                      onChange = {emailChanged}\r\n                                                      inputProps= {{\r\n                                                          style:{\r\n                                                            padding: 0\r\n                                                          }\r\n                                                        }\r\n                                                      }\r\n                                                      > \r\n                                          </TextField> \r\n                                        </span>   \r\n                            </li>\r\n                            <li className={classes.li}>\r\n                                <span className={classes.infoTitle}>TEL</span>\r\n                                 <span hidden={(editMode.edit && editMode.person._id  === person._id)} className={classes.infoData}>{person.phone}</span>  \r\n                                        <span hidden={!(editMode.edit && editMode.person._id  === person._id)} className={classes.infoData}>\r\n                                        <TextField \r\n                                                      fullWidth\r\n                                                      className={classes.TextBox} \r\n                                                      value={tel}\r\n                                                      onChange = {telChanged}\r\n                                                      inputProps= {{\r\n                                                          style:{\r\n                                                            padding: 0\r\n                                                          }\r\n                                                        }\r\n                                                      }\r\n                                                      > \r\n                                          </TextField> \r\n                                        </span>  \r\n                            </li>\r\n                            <li className={classes.li}>\r\n                                <span className={classes.infoTitle}>SERVICE</span>\r\n                                 <span hidden={(editMode.edit && editMode.person._id  === person._id)} className={classes.infoData}>{person.service}</span>  \r\n                                        <span hidden={!(editMode.edit && editMode.person._id  === person._id)} className={classes.infoData}>\r\n                                        <TextField \r\n                                                      fullWidth\r\n                                                      className={classes.TextBox} \r\n                                                      value={service}\r\n                                                      onChange = {serviceChanged}\r\n                                                      inputProps= {{\r\n                                                          style:{\r\n                                                            padding: 0\r\n                                                          }\r\n                                                        }\r\n                                                      }\r\n                                                      > \r\n                                          </TextField> \r\n                                        </span>  \r\n                            </li>\r\n                            <li className={classes.li}>\r\n                                <span className={classes.infoTitle}>NOTES</span>\r\n                                 <span hidden={(editMode.edit && editMode.person._id  === person._id)} className={classes.infoData}>{person.notes}</span>  \r\n                                        <span hidden={!(editMode.edit && editMode.person._id  === person._id)} className={classes.infoData}>\r\n                                        <TextField \r\n                                                      fullWidth\r\n                                                      className={classes.TextBox} \r\n                                                      value={notes}\r\n                                                      onChange = {notesChanged}\r\n                                                      inputProps= {{\r\n                                                          style:{\r\n                                                            padding: 0\r\n                                                          }\r\n                                                        }\r\n                                                      }\r\n                                                      > \r\n                                          </TextField> \r\n                                        </span>  \r\n                            </li>\r\n                            <li className={classes.li}>\r\n                                <span className={classes.infoTitle}>STATUS</span> \r\n                                {getStatusLabel(person.status)} \r\n                            </li>\r\n      \r\n\r\n                        </ul>\r\n\r\n                    </AccordionDetails>\r\n                    </Accordion>\r\n                </div>\r\n            </Grid> \r\n          ))}\r\n    </Grid>\r\n    </React.Fragment>\r\n  );\r\n}\r\n","import React, { useEffect } from 'react';\r\nimport Button from '@material-ui/core/Button';\r\nimport CssBaseline from '@material-ui/core/CssBaseline';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport GlobalState from './../GlobalState';\r\nimport Alert from '@material-ui/lab/Alert';\r\nimport PropTypes from 'prop-types';\r\nimport MaskedInput from 'react-text-mask';\r\nimport { FormControl, Grid, Input, InputLabel } from '@material-ui/core';\r\nimport BookService from './services/BookService';\r\nimport PersonsBox from './PersonsBox';\r\nimport { width } from '@material-ui/system';\r\n\r\n\r\nconst isBoolean = (param) => typeof(param) === \"boolean\"\r\n\r\nconst useFocus = (initialFocus = false, id = \"\") => {\r\n    const [focus, setFocus] = React.useState(initialFocus)\r\n    const setFocusWithTrueDefault = (param) => setFocus(isBoolean(param)? param : true)\r\n    return ([\r\n        setFocusWithTrueDefault, {\r\n            autoFocus: focus,\r\n            key: `${id}${focus}`,\r\n            onFocus: () => setFocus(true),\r\n            onBlur: () => setFocus(false),\r\n        },\r\n    ])\r\n}\r\n\r\n\r\nfunction TextMaskCustom(props) {\r\n    const { inputRef, ...other } = props;\r\n  \r\n    return (\r\n      <MaskedInput\r\n        {...other}\r\n        ref={(ref) => {\r\n          inputRef(ref ? ref.inputElement : null);\r\n        }}\r\n        mask={[/\\d/, /\\d/, /\\d/, '-', /\\d/, /\\d/, /\\d/, '-', /\\d/, /\\d/, /\\d/]}\r\n        // placeholderChar={'\\u2000'}\r\n        showMask\r\n      />\r\n    );\r\n  }\r\n  \r\n  TextMaskCustom.propTypes = {\r\n    inputRef: PropTypes.func.isRequired,\r\n  };\r\n\r\n\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n\r\n    root: {\r\n        width: '100%',\r\n        '& > * + *': {\r\n          marginTop: theme.spacing(2),\r\n        },\r\n        marginTop: \"20px\"\r\n      },  \r\n\r\n    paper: {\r\n        marginTop: theme.spacing(8),\r\n        display: 'flex',\r\n        flexDirection: 'column',\r\n        alignItems: 'center',\r\n    },\r\n\r\n    avatar: {\r\n        margin: theme.spacing(1),\r\n        backgroundColor: theme.palette.secondary.main,\r\n    },\r\n\r\n    form: {\r\n        width: '100%', // Fix IE 11 issue.\r\n        marginTop: theme.spacing(1),\r\n    },\r\n\r\n    Find: {\r\n        width: \"80px\"\r\n    },\r\n\r\n    Clear:{\r\n        marginRight: \"20px\"\r\n    },\r\n\r\n    title:{\r\n        marginTop : \"20px\"\r\n    },\r\n\r\n    TextBox:{\r\n        marginTop: \"30px\",\r\n        \"& > *\" :\r\n        {\r\n            textAlign: \"center\"\r\n        },\r\n  \r\n    },\r\n\r\n    TextField:{\r\n\r\n    },\r\n\r\n    NoRecordsFound:{\r\n        marginTop: \"20px\",\r\n        color: \"red\",\r\n        fontWeight: \"600\",\r\n        fontSize: \"14px\",\r\n    },\r\n\r\n    PersonsBox:{\r\n        marginTop : \"20px\",\r\n        marginBottom: \"50px\",\r\n    }\r\n\r\n}));\r\n\r\nexport default function FindByRef() {\r\n  const classes = useStyles();\r\n  const [state, setState] = React.useContext(GlobalState);\r\n  \r\n  const [setFocus, focusProps] = useFocus(true);\r\n\r\n//   useEffect( () =>\r\n//   {\r\n//      findRecords();\r\n//   }, [state.findRecords]);\r\n\r\n useEffect ( () => {\r\n    setState(state => ({...state, foundRecords : []}));\r\n }, [])\r\n\r\n  useEffect( () => {\r\n    BookService.getBookingsByRef(state.ref).then( (res)=>\r\n    {\r\n        if (res.data.length > 0)\r\n        {\r\n            setState(state => ({...state, foundRecords : res.data}));\r\n        }\r\n    });\r\n    }, [state.RefreshPersonInfo]);\r\n\r\n    const handleChange = (event) =>\r\n    {\r\n        setState(state => ({...state, ref : event.target.value}));\r\n        setState(state => ({...state, refError : false})); \r\n    }\r\n\r\n    const clearField = () =>\r\n    {\r\n        setState(state => ({...state, refError : false})); \r\n        setState(state => ({...state, ref : '___-___-___'}));\r\n        setState(state => ({...state, foundRecords : []}));\r\n        setFocus();\r\n    }\r\n\r\n    const findRecords = () =>\r\n    {\r\n        if (!state.ref || state.ref.indexOf('_') >= 0)\r\n        {\r\n            setState(state => ({...state, refError : true}));  \r\n            return;\r\n        }\r\n\r\n        setState(state => ({...state, submiting : true}));\r\n        setState(state => ({...state, foundRecords : []}));\r\n\r\n        BookService.getBookingsByRef(state.ref).then( (res)=>\r\n        {\r\n            setState(state => ({...state, submiting : false}));\r\n            if (res.data.length > 0)\r\n            {\r\n                setState(state => ({...state, foundRecords : res.data}));\r\n            }\r\n            else\r\n            {\r\n                setState(state => ({...state, foundRecords : null}));\r\n            }\r\n            \r\n            console.log(res.data);\r\n\r\n        }).catch( (err) =>\r\n        {\r\n            console.log(err);\r\n            setState(state => ({...state, submiting : false}));\r\n        });\r\n    }\r\n\r\n  return (\r\n    <React.Fragment>\r\n        <CssBaseline />\r\n        <div className={classes.title}>\r\n            <Typography component=\"h6\" variant=\"h6\" align=\"center\">\r\n                Find Booking Appoinments\r\n            </Typography>  \r\n        </div> \r\n\r\n        <Grid container direction=\"column\" spacing={1} justify=\"flex-start\"  alignItems=\"center\">\r\n\r\n        <Grid item xs={12} md={12}>\r\n            <FormControl className={classes.TextBox}>\r\n                <TextField\r\n                    {...focusProps}\r\n                    autoFocus \r\n                    pattern=\"[0-9]*\"\r\n                    error = {state.refError ? true : false} \r\n                    value = {state.ref}\r\n                    className = {classes.TextField}\r\n                    width = \"50px\"\r\n                    onChange={handleChange}\r\n                    label=\"Reference No.\"\r\n                    helperText=\"Enter Your 9-digits Reference No.\"\r\n                    name=\"refNo\"\r\n                    id=\"refNo\"\r\n                    variant=\"outlined\"\r\n                    \r\n                    size=\"medium\"\r\n                    margin=\"normal\"\r\n                    fullWidth = {true}\r\n                    InputProps={{\r\n                        inputComponent: TextMaskCustom,\r\n                        style: { textAlign: 'center', fontSize:\"24px\", width: \"210px\", paddingLeft: \"20px\" }\r\n                    }}\r\n\r\n                    onKeyPress= {event => {\r\n                        if (event.key === 'Enter') {\r\n                            findRecords();\r\n                        }\r\n                      }}\r\n                />         \r\n            </FormControl>\r\n        </Grid>\r\n\r\n        <Grid item xs={12} md={12}>\r\n               \r\n                <Button\r\n                    disabled = {state.submiting}\r\n                    color=\"default\"\r\n                    onClick = {clearField}\r\n                    onTouchTap = {clearField}\r\n                    className={classes.Clear}\r\n                >\r\n                    Clear \r\n                </Button>  \r\n            \r\n                <Button\r\n                    type=\"button\"\r\n                    disabled = {state.submiting}\r\n                    variant=\"contained\"\r\n                    color=\"primary\"\r\n                    onClick = {findRecords}\r\n                    onTouchTap = {findRecords}\r\n                    className={classes.Find}\r\n                >\r\n                    Find \r\n                </Button>  \r\n        </Grid>\r\n\r\n        <Grid item xs={12} md={12}>\r\n\r\n                    \r\n\r\n            {state.foundRecords && state.foundRecords.length > 0 && (\r\n                <React.Fragment>\r\n\r\n                    <div className={classes.PersonsBox}>\r\n                          <PersonsBox/>\r\n                    </div>\r\n                    \r\n\r\n\r\n                </React.Fragment>\r\n            )}   \r\n\r\n            {!state.foundRecords && (\r\n                <React.Fragment>\r\n\r\n                <div className={classes.root}>\r\n                    <Alert severity=\"error\"> <strong>No Records Found !</strong> <br/> Please check you reference number again.</Alert>\r\n                </div> \r\n                   \r\n                </React.Fragment>\r\n            )}\r\n\r\n        </Grid>\r\n        \r\n        \r\n        </Grid>\r\n        \r\n    </React.Fragment>\r\n   \r\n  );\r\n}","import React, { useEffect, useState } from 'react';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport PropTypes from 'prop-types';\r\nimport dateformat from 'dateformat';\r\nimport BookService from '../services/BookService';\r\n\r\nimport CircularProgress from '@material-ui/core/CircularProgress';\r\n\r\nimport GlobalState from '../../GlobalState';\r\n\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n\r\n    Container: {\r\n        width: \"100%\",\r\n        paddingTop: \"70%\",\r\n        position: \"relative\",\r\n        backgroundColor: \"#fff\",\r\n        cursor: \"pointer\"\r\n    },\r\n\r\n    ContainerPast: {\r\n        width: \"100%\",\r\n        paddingTop: \"70%\",\r\n        position: \"relative\",\r\n        backgroundColor: \"#fafafa\"\r\n    },\r\n    \r\n    DayLabel: {\r\n        position: \"absolute\",\r\n        top: \"5px\",\r\n        right: \"5px\",\r\n        color: \"#555\",\r\n        fontSize: \"1rem\"\r\n    },\r\n\r\n    DayLabelToday: {\r\n        position: \"absolute\",\r\n        top: \"5px\",\r\n        right: \"5px\",\r\n        backgroundColor: \"#1a73e8\",\r\n        color: \"#fff\",\r\n        fontSize: \"1rem\",\r\n        borderRadius: \"50%\",\r\n        padding: \"5px\",\r\n        lineHight: \"35px\",\r\n        minWidth: \"35px\"\r\n    },\r\n\r\n    DayLabelDisabled: {\r\n        position: \"absolute\",\r\n        top: \"5px\",\r\n        right: \"5px\",\r\n        color: \"#ddd\",\r\n        fontSize: \"1rem\"\r\n    },\r\n\r\n    BookingCountLabel: {\r\n        position: \"absolute\",\r\n        top: \"35%\",\r\n        left: \"40%\",\r\n        color: \"#3f51b5\",\r\n        backgroundColor: \"#ebedf7\",\r\n        fontSize: \"16px\",\r\n        fontWeight: \"600\",\r\n        padding: \"10px\",\r\n        borderRadius: \"50%\",\r\n        minWidth: \"40px\",\r\n        lineHight: \"40px\",\r\n        cursor: \"pointer\",\r\n        textAlign: \"center\"\r\n    },\r\n\r\n    BookingCountLabelBusy: {\r\n        position: \"absolute\",\r\n        top: \"35%\",\r\n        left: \"40%\",\r\n        color: \"#b00000\",\r\n        backgroundColor: \"#fce6e6\",\r\n        fontSize: \"16px\",\r\n        fontWeight: \"600\",\r\n        padding: \"10px\",\r\n        borderRadius: \"50%\",\r\n        minWidth: \"40px\",\r\n        cursor: \"pointer\",\r\n        textAlign: \"center\"\r\n    },\r\n\r\n    LoadingProgress: {\r\n        position: \"absolute\",\r\n        top: \"40%\",\r\n        left: \"40%\",\r\n      },\r\n\r\n      BookingCountGauge: {\r\n        position: \"absolute\",\r\n        bottom: \"5%\",\r\n        left: \"8%\",\r\n        width : \"8%\",\r\n        height: \"85%\"\r\n    },\r\n\r\n  }));\r\n\r\nconst MAX_BOOKING_COUNT = 10;  \r\n\r\nconst MonthViewCell = ({key, cellIndex, month, daysInMonth, dayClicked}) => {\r\n    const classes = useStyles();\r\n\r\n    const [state, setState] = React.useContext(GlobalState);\r\n\r\n    const [dateStr, setDateStr] = React.useState('');\r\n\r\n    const [cellDate, setCellDate] = React.useState(new Date());\r\n\r\n    const [bookingsCount, setBookingsCount] = React.useState(-1);\r\n\r\n    const [disableDay, setDisableDay] = React.useState(false);\r\n\r\n    const [isPast, setIsPast] = React.useState(false);\r\n\r\n    useEffect( () => {\r\n\r\n        if (cellIndex <= daysInMonth.length)\r\n        {\r\n            const date = daysInMonth[cellIndex - 1];\r\n            const dateStr = dateformat(date, 'yyyy-mm-dd');\r\n            setDateStr(dateStr);\r\n            setCellDate(date);\r\n            setDisableDay(date.getMonth() !== month - 1);\r\n            const todayStr = dateformat(new Date(), 'yyyy-mm-dd');\r\n            setIsPast(dateStr < todayStr);\r\n        }\r\n        else\r\n        {\r\n            const day = cellIndex - daysInMonth.length;\r\n            const date = new Date((daysInMonth[daysInMonth.length - 1].getTime() + ( day * 86400000)));\r\n            const dateStr = dateformat(date, 'yyyy-mm-dd');\r\n            setDateStr(dateStr);\r\n            setCellDate(date);\r\n            setDisableDay(true);\r\n            const todayStr = dateformat(new Date(), 'yyyy-mm-dd');\r\n            setIsPast(dateStr < todayStr);\r\n        }\r\n\r\n    }, [cellIndex, month, daysInMonth]);\r\n\r\n    useEffect ( () => {\r\n\r\n        const fecthData = async () =>\r\n        {\r\n            if (!dateStr || dateStr.length <= 0)\r\n            {\r\n                return;\r\n            }\r\n        \r\n            if (disableDay)\r\n            {\r\n                setBookingsCount(-2);\r\n                return;\r\n            }\r\n\r\n            setBookingsCount(-1);\r\n\r\n            var res = state.AdminCalendarCache?.find(record => record.method === 'getBookingsCountByDateStr' && record.query === dateStr)?.res;\r\n\r\n            if (!res)\r\n            {\r\n                res = await BookService.getAllBookingsCountByDateStr(dateStr);\r\n                setState(state => ({...state, AdminCalendarCache : [...state.AdminCalendarCache, {method: 'getBookingsCountByDateStr' , query : dateStr, res: res}]}));\r\n            }\r\n        \r\n            if (res.data.count >= 0)\r\n            {\r\n                setBookingsCount(res.data.count);\r\n            }\r\n\r\n        }\r\n\r\n      fecthData();\r\n\r\n    }, [dateStr]);\r\n\r\n    const getDayLabel = (_cellIndex , _month , _daysInMonth) =>\r\n    {\r\n        var date = null;\r\n        var disabled = false;\r\n        var day = -1;\r\n\r\n    \r\n\r\n        if (_cellIndex <= _daysInMonth.length)\r\n        {\r\n            date = _daysInMonth[_cellIndex - 1];\r\n            day = date.getDate();\r\n            if (date.getMonth() !== _month - 1)\r\n            {\r\n                disabled = true;\r\n            }\r\n        }\r\n        else\r\n        {\r\n            const _day = _cellIndex - _daysInMonth.length;\r\n            const date = new Date((_daysInMonth[_daysInMonth.length - 1].getTime() + ( _day * 86400000)));\r\n            day = date.getDate();\r\n            disabled = true;\r\n        }\r\n\r\n        const isToday = dateformat(new Date(),'yyyy-mm-dd') === dateformat(date, 'yyyy-mm-dd');\r\n\r\n        return (\r\n            <span className={(disabled) ? classes.DayLabelDisabled : isToday ? classes.DayLabelToday : classes.DayLabel}>\r\n                 {day > 0 ? `${day}` : ''}\r\n             </span>\r\n        );\r\n    }\r\n\r\n    const getBookingsCountLabel = (_bookingsCount) =>\r\n    {\r\n        if (_bookingsCount === -1)\r\n        {\r\n            return (\r\n                <div className={classes.LoadingProgress}>\r\n                      <CircularProgress disableShrink  />\r\n                </div>\r\n            );  \r\n        }\r\n        else if (_bookingsCount > 0 )\r\n        {\r\n            if (_bookingsCount >= MAX_BOOKING_COUNT / 2)\r\n            {\r\n                return (\r\n                    <div onClick={(event => dayClicked(event,cellDate))} className={classes.BookingCountLabelBusy}>\r\n                        {_bookingsCount < 10 ?  ` ${_bookingsCount}` : `${_bookingsCount}`}\r\n                    </div>\r\n                );\r\n            }\r\n            else\r\n            {\r\n                return (\r\n                    <div onClick={(event => dayClicked(event,cellDate))} className={classes.BookingCountLabel}>\r\n                          {_bookingsCount < 10 ?  ` ${_bookingsCount}` : `${_bookingsCount}`}\r\n                    </div>\r\n                );\r\n            }\r\n        }\r\n    }\r\n\r\n    const getBookingsCountGauge = (_bookingsCount) =>\r\n    {\r\n        if (_bookingsCount > 0)\r\n        {\r\n            let percent = (_bookingsCount / MAX_BOOKING_COUNT) * 100;\r\n            if (percent > 100)\r\n            {\r\n                percent = 100;\r\n            }\r\n\r\n            percent = 100 - percent;\r\n\r\n            return (\r\n\r\n                <div className={classes.BookingCountGauge}>\r\n                  <div style={{padding:\"0\", margin:\"0\", width:\"100%\", height:\"100%\", backgroundColor: \"#3f51b5\"}} >\r\n                        <div  style={{padding:\"0\", margin:\"0\", width:\"100%\", height:`${percent}%`, backgroundColor: \"#fafafa\"}} >\r\n\r\n                        </div>\r\n                  </div>\r\n                </div>\r\n            );\r\n        }\r\n    }\r\n\r\n    return (\r\n        <React.Fragment>\r\n\r\n            <div className={classes.Container} onClick={(event => dayClicked(event,cellDate))}>\r\n\r\n              {getDayLabel(cellIndex, month, daysInMonth)}\r\n\r\n              {getBookingsCountLabel(bookingsCount)}\r\n\r\n              {getBookingsCountGauge(bookingsCount)}\r\n\r\n            </div>\r\n\r\n        </React.Fragment>\r\n\r\n\r\n    );\r\n}\r\n\r\nMonthViewCell.propTypes = {\r\n    key: PropTypes.string.isRequired,\r\n    cellIndex: PropTypes.number.isRequired,\r\n    month: PropTypes.number.isRequired,\r\n    daysInMonth: PropTypes.arrayOf(PropTypes.date),\r\n    dayClicked: PropTypes.func\r\n  };\r\n\r\n \r\n  \r\nexport default MonthViewCell;","import calendar from 'node-calendar';\r\n\r\n\r\nexport default class CalendarUtil {\r\n\r\n    static getMonthRange = (month , year) =>\r\n    {\r\n        return new calendar.Calendar(calendar.SUNDAY).itermonthdates(year, month);\r\n    } \r\n\r\n} ","import React, { useEffect, useState } from 'react';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport PropTypes from 'prop-types';\r\nimport MonthViewCell from './MonthViewCell';\r\nimport CalendarUtil from './calendar-util';\r\n\r\nconst dayLables = ['Sun', 'Mon', 'Tue', 'Wed' , 'Thu', 'Fri', 'Sat'];\r\nconst days = [1,2,3,4,5,6,7]; \r\nconst rows = [1,2,3,4,5,6];\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n\r\n    table: {\r\n        width: \"100%\",\r\n        border: \"1px solid #ddd\",\r\n        borderCollapse: \"collapse\",\r\n    },\r\n\r\n    th: {\r\n        border: \"1px solid #ddd\",\r\n        borderCollapse: \"collapse\",\r\n        verticalAlign: \"middle\",\r\n        fontcolor: \"#555\",\r\n        fontWeight: \"400\",\r\n        fontSize: \"15px\",\r\n        paddingTop: \"5px\",\r\n        paddingBottom: \"5px\",\r\n        width: \"14%\"\r\n    },\r\n\r\n    td: {\r\n        border: \"1px solid #ddd\",\r\n        borderCollapse: \"collapse\",\r\n        verticalAlign: \"middle\",\r\n    }\r\n\r\n  }));\r\n\r\nconst MonthView = ({month, year, dayClicked}) => {\r\n    const classes = useStyles();\r\n\r\n    const daysInMonth = CalendarUtil.getMonthRange(month,year);\r\n\r\n    return (\r\n        <React.Fragment>\r\n\r\n            <table className={classes.table}>\r\n                <thead>\r\n                    <tr>\r\n                        {dayLables.map(label => (\r\n                            <th key={`th-${label}`} className={classes.th}>\r\n                                {label}\r\n                            </th>\r\n                        ))}\r\n                    </tr>\r\n                </thead>\r\n                <tbody>\r\n                    {rows.map(row => (\r\n                        <tr>\r\n                            {days.map(day => (\r\n                                <td className={classes.td}>\r\n                                    <MonthViewCell \r\n                                        key={`${month}${year}${(row-1) * days.length + day}`} \r\n                                        cellIndex={(row-1) * days.length + day} \r\n                                        month={month} \r\n                                        daysInMonth={daysInMonth}\r\n                                        dayClicked = {dayClicked}\r\n                                        />\r\n                                </td>\r\n                            ))}\r\n                        </tr>\r\n                    ))}            \r\n                </tbody>\r\n\r\n            </table>\r\n\r\n      \r\n        </React.Fragment>\r\n\r\n\r\n    );\r\n}\r\n\r\nMonthView.propTypes = {\r\n    month: PropTypes.number.isRequired,\r\n    year: PropTypes.number.isRequired,\r\n    dayClicked: PropTypes.func\r\n  };\r\n\r\n\r\nexport default MonthView;","import React, { useEffect, useState } from 'react';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport PropTypes from 'prop-types';\r\nimport dateformat from 'dateformat';\r\nimport BookService from '../services/BookService';\r\n\r\nimport CircularProgress from '@material-ui/core/CircularProgress';\r\nimport GlobalState from '../../GlobalState';\r\n\r\nimport axios from 'axios'\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n\r\n    Container: {\r\n        width: \"100%\",\r\n        paddingTop: \"40%\",\r\n        position: \"relative\",\r\n        backgroundColor: \"#fff\",\r\n        cursor: \"pointer\"\r\n    },\r\n\r\n    ContainerPast: {\r\n        width: \"100%\",\r\n        paddingTop: \"40%\",\r\n        position: \"relative\",\r\n        backgroundColor: \"#fafafa\",\r\n        cursor: \"pointer\"\r\n    },\r\n    \r\n    DayLabel: {\r\n        position: \"absolute\",\r\n        top: \"5px\",\r\n        right: \"5px\",\r\n        color: \"#555\",\r\n        fontSize: \"1rem\"\r\n    },\r\n\r\n    DayLabelDisabled: {\r\n        position: \"absolute\",\r\n        top: \"5px\",\r\n        right: \"5px\",\r\n        color: \"#ddd\",\r\n        fontSize: \"1rem\"\r\n    },\r\n\r\n    BookingCountLabel: {\r\n        position: \"absolute\",\r\n        top: \"25%\",\r\n        left: \"38%\",\r\n        color: \"#3f51b5\",\r\n        backgroundColor: \"#ebedf7\",\r\n        fontSize: \"14px\",\r\n        fontWeight: \"600\",\r\n        padding: \"5px\",\r\n        borderRadius: \"50%\",\r\n        minWidth: \"30px\",\r\n        cursor : \"pointer\",\r\n        textAlign: \"center\"\r\n    },\r\n\r\n    BookingCountLabelBusy: {\r\n        position: \"absolute\",\r\n        top: \"25%\",\r\n        left: \"38%\",\r\n        color: \"#b00000\",\r\n        backgroundColor: \"#fce6e6\",\r\n        fontSize: \"14px\",\r\n        fontWeight: \"600\",\r\n        padding: \"5px\",\r\n        borderRadius: \"50%\",\r\n        minWidth: \"30px\",\r\n        cursor : \"pointer\",\r\n        textAlign: \"center\"\r\n    },\r\n\r\n    LoadingProgress: {\r\n        position: \"absolute\",\r\n        top: \"40%\",\r\n        left: \"40%\",\r\n      },\r\n\r\n      BookingCountGauge: {\r\n        position: \"absolute\",\r\n        bottom: \"5%\",\r\n        left: \"8%\",\r\n        width : \"85%\",\r\n        height: \"8%\"\r\n    },\r\n\r\n  }));\r\n\r\nconst MAX_BOOKING_COUNT = 1;  \r\n\r\nconst WeekViewCell = ({key, date, time, dayClicked}) => {\r\n    const classes = useStyles();\r\n\r\n    const [state, setState] = React.useContext(GlobalState);\r\n    const [bookingsCount, setBookingsCount] = React.useState(-1);\r\n    const [isPast, setIsPast] = React.useState(false);\r\n\r\n    const [cellDate, setCellDate] = React.useState(new Date());\r\n\r\n    useEffect( () => {\r\n        const todayStr = dateformat(new Date(), 'yyyy-mm-dd');\r\n        setIsPast(date < todayStr);\r\n\r\n        setCellDate(new Date(date));\r\n\r\n    }, [date]);\r\n\r\n    useEffect ( () => {\r\n      \r\n      \r\n      \r\n        if (!date || date.length <= 0 || !time || time.length <= 0)\r\n        {\r\n            return;\r\n        }\r\n        \r\n        // if (isPast)\r\n        // {\r\n        //     setBookingsCount(-2);\r\n        //     return;\r\n        // }\r\n\r\n        setBookingsCount(-1);\r\n\r\n       \r\n\r\n        var res = state.AdminCalendarCache?.find(record => record.method === 'getBookingsCountByDateStrandTime' && record.query === `${date}${time}`)?.res;\r\n        if (res)\r\n        {\r\n            if (res.data.count >= 0)\r\n            {\r\n                setBookingsCount(res.data.count);\r\n            }  \r\n            return;\r\n        }\r\n\r\n        let source = axios.CancelToken.source();\r\n        BookService.getAllBookingsCountByDateStrandTime(date, time, source).then( res => {\r\n            if (res.data.count >= 0)\r\n            {\r\n                setBookingsCount(res.data.count);\r\n                setState(state => ({...state, AdminCalendarCache : [...state.AdminCalendarCache, {method: 'getBookingsCountByDateStrandTime' , query : `${date}${time}`, res: res}]}));\r\n            }  \r\n        }).catch( err => \r\n            {\r\n                //do nothing\r\n            });\r\n     \r\n        return () => {\r\n           if (source)\r\n              source.cancel('Cancelling in cleanup');\r\n        }\r\n     \r\n    }, [date, time]);\r\n\r\n\r\n    const getBookingsCountLabel = (_bookingsCount) =>\r\n    {\r\n        if (_bookingsCount === -1)\r\n        {\r\n            return (\r\n                <div className={classes.LoadingProgress}>\r\n                      <CircularProgress disableShrink  />\r\n                </div>\r\n            );  \r\n        }\r\n        else if (_bookingsCount > 0)\r\n        {\r\n            if (_bookingsCount >= MAX_BOOKING_COUNT)\r\n            {\r\n                return (\r\n                    <div onClick={(event => dayClicked(event,cellDate))} className={classes.BookingCountLabelBusy}>\r\n                          {_bookingsCount < 10 ? ` ${_bookingsCount}` : `${_bookingsCount}` }\r\n                    </div>\r\n                );\r\n            }\r\n            else\r\n            {\r\n                return (\r\n                    <div onClick={(event => dayClicked(event,cellDate))} className={classes.BookingCountLabel}>\r\n                        {_bookingsCount < 10 ? ` ${_bookingsCount}` : `${_bookingsCount}` }\r\n                    </div>\r\n                );\r\n            }\r\n        }\r\n    }\r\n\r\n    const getBookingsCountGauge = (_bookingsCount) =>\r\n    {\r\n        if (_bookingsCount > 0 )\r\n        {\r\n            let percent = (_bookingsCount / MAX_BOOKING_COUNT) * 100;\r\n            if (percent > 100)\r\n            {\r\n                percent = 100;\r\n            }\r\n\r\n            // percent = 100 - percent;\r\n\r\n            return (\r\n\r\n                <div className={classes.BookingCountGauge}>\r\n                  <div style={{padding:\"0\", margin:\"0\", width:\"100%\", height:\"100%\", backgroundColor: \"#f5f5f5\"}} >\r\n                        <div  style={{padding:\"0\", margin:\"0\", height:\"100%\", width:`${percent}%`, backgroundColor: \"#3f51b5\"}} >\r\n\r\n                        </div>\r\n                  </div>\r\n                </div>\r\n            );\r\n        }\r\n    }\r\n\r\n    return (\r\n        <React.Fragment>\r\n\r\n            <div className={isPast ? classes.ContainerPast : classes.Container} onClick={(event => dayClicked(event,cellDate))}>\r\n\r\n              {getBookingsCountLabel(bookingsCount)}\r\n\r\n              {getBookingsCountGauge(bookingsCount)}\r\n\r\n            </div>\r\n\r\n        </React.Fragment>\r\n\r\n\r\n    );\r\n}\r\n\r\nWeekViewCell.propTypes = {\r\n    key: PropTypes.string.isRequired,\r\n    date: PropTypes.string.isRequired,\r\n    time: PropTypes.string.isRequired,\r\n    dayClicked: PropTypes.func\r\n  };\r\n\r\n \r\n  \r\nexport default WeekViewCell;","import React, { useEffect, useState } from 'react';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport PropTypes from 'prop-types';\r\nimport WeekViewCell from './WeekViewCell';\r\nimport dateformat from 'dateformat';\r\n\r\nconst rows = [\r\n    '10:00 AM',\r\n    '10:30 AM', \r\n    '11:00 AM', \r\n    '11:30 AM', \r\n    '12:00 PM',\r\n    '12:30 PM',\r\n    '01:00 PM',\r\n    '01:30 PM',\r\n    '02:00 PM',\r\n    '02:30 PM',\r\n    '03:00 PM',\r\n    '03:30 PM',\r\n    '04:00 PM',\r\n    '04:30 PM',\r\n    '05:00 PM',\r\n    '05:30 PM',\r\n];\r\n\r\n\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n\r\n    table: {\r\n        width: \"100%\",\r\n        border: \"1px solid #ddd\",\r\n        borderCollapse: \"collapse\",\r\n        overflowY: \"auto\"\r\n    },\r\n\r\n    th: {\r\n        border: \"1px solid #ddd\",\r\n        borderCollapse: \"collapse\",\r\n        verticalAlign: \"middle\",\r\n        fontcolor: \"#555\",\r\n        fontWeight: \"400\",\r\n        fontSize: \"15px\",\r\n        paddingTop: \"5px\",\r\n        paddingBottom: \"5px\",\r\n        width: \"12%\", \r\n    },\r\n\r\n    td: {\r\n        border: \"1px solid #ddd\",\r\n        borderCollapse: \"collapse\",\r\n        verticalAlign: \"middle\",\r\n        height : \"50px\",\r\n        width: \"12%\", \r\n    }\r\n\r\n  }));\r\n\r\nconst WeekView = ({dates, dayClicked}) => {\r\n    const classes = useStyles();\r\n\r\n    return (\r\n        <React.Fragment>\r\n\r\n        <div style={{overflowY: \"scroll\" , height: \"60px\"}}>\r\n            <table className={classes.table}>\r\n                <thead>\r\n                    <tr>\r\n                        <th style={{width: \"7%\"}}>\r\n                        \r\n                        </th>\r\n                            {dates.map(date => (\r\n                                <th className={classes.th}>\r\n                                    <div style={{paddingBottom: \"5px\", color: \"#aaa\"}}>\r\n                                         {dateformat(date, 'ddd')}\r\n                                    </div>\r\n                                    <div>\r\n                                        <span style={{color: \"#aaa\"}}>\r\n                                            {dateformat(date, 'mmm ')}\r\n                                        </span> \r\n                                        <span  style={(dateformat(new Date(),'yyyy-mm-dd') === dateformat(date, 'yyyy-mm-dd')) ? { backgroundColor: \"#1a73e8\", color: \"#fff\", borderRadius: \"50%\",  padding: \"5px\",} : {color: \"#333\", fontWeight:\"500\"}}>\r\n                                             {dateformat(date, ' d')}\r\n                                        </span>\r\n                                       \r\n                                    </div>\r\n                                </th>\r\n                        ))}\r\n                    </tr>\r\n                </thead>\r\n             </table>\r\n\r\n        </div>\r\n\r\n            <div style={{overflowY: \"scroll\" , height: \"70vh\"}}>\r\n                <table className={classes.table}>   \r\n                    <tbody>\r\n                        {rows.map(row => (\r\n                            <tr>\r\n                                <td style={{width: \"7%\"}}>\r\n                                    {row}\r\n                                </td>\r\n                                {dates.map(day => (\r\n                                    <td className={classes.td}>\r\n                                        <WeekViewCell \r\n                                                dayClicked = {dayClicked}\r\n                                                key={`${dateformat(day,'yyyy-mm-dd')}-${row.replace(':','-')}`} \r\n                                                date={dateformat(day,'yyyy-mm-dd')} \r\n                                                time={row}/>\r\n                                    </td>\r\n                                ))}\r\n                            </tr>\r\n                        ))}            \r\n                    </tbody>\r\n                </table>\r\n            </div>                    \r\n      \r\n        </React.Fragment>\r\n\r\n\r\n    );\r\n}\r\n\r\nWeekView.propTypes = {\r\n    dates: PropTypes.arrayOf(PropTypes.any).isRequired,\r\n    dayClicked: PropTypes.func\r\n  };\r\n\r\n\r\nexport default WeekView;","import React, { useEffect, useRef, useState } from \"react\";\r\nimport BookService from \"./services/BookService\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport {\r\n  Backdrop,\r\n  Button,\r\n  Checkbox,\r\n  CircularProgress,\r\n  Divider,\r\n  FormControlLabel,\r\n  Grid,\r\n  InputAdornment,\r\n  InputLabel,\r\n  Link,\r\n  makeStyles,\r\n  MenuItem,\r\n  Select,\r\n  Switch,\r\n  TextField,\r\n  Tooltip,\r\n} from \"@material-ui/core\";\r\nimport GlobalState from \"../GlobalState\";\r\nimport { withStyles } from \"@material-ui/core/styles\";\r\n\r\nimport CreditCardIcon from \"@material-ui/icons/CreditCard\";\r\n\r\nimport Dialog from \"@material-ui/core/Dialog\";\r\nimport DialogContent from \"@material-ui/core/DialogContent\";\r\n\r\nimport DialogTitle from \"@material-ui/core/DialogTitle\";\r\nimport Draggable from \"react-draggable\";\r\nimport Paper from \"@material-ui/core/Paper\";\r\n\r\nimport Alert from \"@material-ui/lab/Alert\";\r\n\r\nimport PropTypes from \"prop-types\";\r\nimport LinearProgress from \"@material-ui/core/LinearProgress\";\r\nimport Box from \"@material-ui/core/Box\";\r\n\r\nimport Radio from \"@material-ui/core/Radio\";\r\nimport RadioGroup from \"@material-ui/core/RadioGroup\";\r\nimport FormControl from \"@material-ui/core/FormControl\";\r\nimport FormLabel from \"@material-ui/core/FormLabel\";\r\nimport { corporates } from \"./Corporates\";\r\nimport NumberFormat from \"react-number-format\";\r\n\r\nimport AddIcon from \"@material-ui/icons/Add\";\r\nimport { validate } from \"email-validator\";\r\nimport DateRangeIcon from \"@material-ui/icons/DateRange\";\r\nimport { CalendarColors } from \"../Admin/calendar-admin/colors\";\r\n\r\nvar interval;\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  title: {\r\n    marginTop: theme.spacing(0),\r\n    marginBottom: theme.spacing(1),\r\n  },\r\n\r\n  refreshButton: {\r\n    marginLeft: theme.spacing(2),\r\n  },\r\n\r\n  checkIcon: {\r\n    color: \"green\",\r\n  },\r\n\r\n  closeIcon: {\r\n    color: \"red\",\r\n  },\r\n\r\n  RefLink: {\r\n    cursor: \"pointer\",\r\n  },\r\n\r\n  BookedLabel: {\r\n    backgroundColor: \"#606060\",\r\n    color: \"#fff\",\r\n    paddingRight: \"10px\",\r\n    paddingLeft: \"10px\",\r\n  },\r\n\r\n  PatientAttendedLabel: {\r\n    backgroundColor: \"#0066aa\",\r\n    color: \"#fff\",\r\n    paddingRight: \"15px\",\r\n    paddingLeft: \"10px\",\r\n  },\r\n\r\n  SampleTakenLabel: {\r\n    backgroundColor: \"#0066cc\",\r\n    color: \"#fff\",\r\n    paddingRight: \"40px\",\r\n    paddingLeft: \"10px\",\r\n  },\r\n\r\n  ReportSentLabel: {\r\n    backgroundColor: \"#009900\",\r\n    color: \"#fff\",\r\n    paddingRight: \"90px\",\r\n    paddingLeft: \"10px\",\r\n  },\r\n\r\n  ReportCertSentLabel: {\r\n    backgroundColor: \"#009900\",\r\n    color: \"#fff\",\r\n    paddingRight: \"68px\",\r\n    paddingLeft: \"10px\",\r\n  },\r\n\r\n  archiveButton: {},\r\n\r\n  smartMatchButton: {\r\n    backgroundColor: \"#2f942e\",\r\n    \"&:hover\": {\r\n      background: \"green\",\r\n      color: \"#fff\",\r\n    },\r\n    textDecoration: \"none !important\",\r\n    marginRight: \"10px\",\r\n    // padding: \"10px\"\r\n  },\r\n\r\n  infoTitle: {\r\n    fontWeight: \"400\",\r\n  },\r\n\r\n  infoData: {\r\n    paddingLeft: \"10px\",\r\n    fontWeight: \"800\",\r\n  },\r\n\r\n  matchButton: {\r\n    marginTop: \"30px\",\r\n    marginBottom: \"20px\",\r\n    backgroundColor: \"#2f942e\",\r\n    \"&:hover\": {\r\n      background: \"green\",\r\n      color: \"#fff\",\r\n    },\r\n    textDecoration: \"none !important\",\r\n    padding: \"10px\",\r\n    paddingLeft: \"50px\",\r\n    paddingRight: \"50px\",\r\n  },\r\n\r\n  resendButton: {\r\n    marginTop: \"5px\",\r\n    marginBottom: \"5px\",\r\n    backgroundColor: \"#2f942e\",\r\n    \"&:hover\": {\r\n      background: \"green\",\r\n      color: \"#fff\",\r\n    },\r\n    textDecoration: \"none !important\",\r\n    padding: \"10px\",\r\n    paddingLeft: \"50px\",\r\n    paddingRight: \"50px\",\r\n  },\r\n\r\n  resendFilesButton: {\r\n    marginTop: \"5px\",\r\n    marginBottom: \"5px\",\r\n    backgroundColor: \"#3792ad\",\r\n    \"&:hover\": {\r\n      background: \"#2f798f\",\r\n      color: \"#fff\",\r\n    },\r\n    textDecoration: \"none !important\",\r\n    padding: \"10px\",\r\n    paddingLeft: \"50px\",\r\n    paddingRight: \"50px\",\r\n  },\r\n\r\n  cancelButton: {\r\n    marginBottom: \"10px\",\r\n    textDecoration: \"none !important\",\r\n    padding: \"10px\",\r\n    paddingLeft: \"90px\",\r\n    paddingRight: \"90px\",\r\n  },\r\n\r\n  CalendarIcon: {\r\n    color: theme.palette.primary.main,\r\n  },\r\n\r\n  DateTimeLabel: {\r\n    fontWeight: \"500\",\r\n    color: theme.palette.primary.main,\r\n  },\r\n\r\n  backdrop: {\r\n    zIndex: theme.zIndex.drawer + 5,\r\n    color: \"#fff\",\r\n  },\r\n\r\n  PriceLabelPaid:{\r\n    color: theme.palette.primary.main,\r\n    fontWeight: \"600\"\r\n  },\r\n\r\n  PriceLabelNotPaid:{\r\n    color: theme.palette.secondary.main,\r\n    fontWeight: \"600\"\r\n  },\r\n\r\n\r\n}));\r\n\r\nconst Packages = [\r\n  { packageName: \"Consultation with Consultant Gynaecologist\" },\r\n  { packageName: `Coil Fitting/Coil Removal` },\r\n  { packageName: `Well Woman Check` },\r\n  { packageName: `Sexual Health Screening` },\r\n  { packageName: `Pre-pregnancy/Fertility check` },\r\n  { packageName: `Gynaecological Ultrasound` },\r\n  { packageName: `HPV Vaccination` },\r\n  { packageName: `Cervical / Pap Smear` },\r\n  { packageName: `HPV Treatment / Wart Cryo-Therapy` },\r\n];\r\n\r\nfunction NumberFormatCustom(props) {\r\n  const { inputRef, onChange, ...other } = props;\r\n\r\n  return (\r\n    <NumberFormat\r\n      {...other}\r\n      getInputRef={inputRef}\r\n      onValueChange={(values) => {\r\n        onChange({\r\n          target: {\r\n            name: props.name,\r\n            value: values.value,\r\n          },\r\n        });\r\n      }}\r\n      thousandSeparator\r\n      isNumericString\r\n      prefix=\"\"\r\n    />\r\n  );\r\n}\r\n\r\nNumberFormatCustom.propTypes = {\r\n  inputRef: PropTypes.func.isRequired,\r\n  name: PropTypes.string.isRequired,\r\n  onChange: PropTypes.func.isRequired,\r\n};\r\n\r\nconst BorderLinearProgress = withStyles((theme) => ({\r\n  root: {\r\n    height: 10,\r\n    borderRadius: 5,\r\n  },\r\n  colorPrimary: {\r\n    backgroundColor: \"#cedbce\", //theme.palette.grey[theme.palette.type === 'light' ? 200 : 700],\r\n  },\r\n  bar: {\r\n    borderRadius: 5,\r\n    backgroundColor: \"#2f942e\",\r\n  },\r\n}))(LinearProgress);\r\nfunction LinearProgressWithLabel(props) {\r\n  return (\r\n    <Box display=\"flex\" alignItems=\"center\">\r\n      <Box width=\"100%\" mr={1}>\r\n        <BorderLinearProgress variant=\"determinate\" {...props} />\r\n      </Box>\r\n      <Box minWidth={35}>\r\n        <Typography\r\n          style={{ fontWeight: \"800\", color: \"#5e855e\" }}\r\n          variant=\"body2\"\r\n          color=\"textSecondary\"\r\n        >{`${Math.round(props.value)}%`}</Typography>\r\n      </Box>\r\n    </Box>\r\n  );\r\n}\r\n\r\nLinearProgressWithLabel.propTypes = {\r\n  /**\r\n   * The value of the progress indicator for the determinate and buffer variants.\r\n   * Value between 0 and 100.\r\n   */\r\n  value: PropTypes.number.isRequired,\r\n};\r\n\r\nfunction PaperComponent(props) {\r\n  return (\r\n    <Draggable\r\n      handle=\"#draggable-dialog-title\"\r\n      cancel={'[class*=\"MuiDialogContent-root\"]'}\r\n    >\r\n      <Paper {...props} />\r\n    </Draggable>\r\n  );\r\n}\r\n\r\nexport default function NewBookingDialog(props) {\r\n  const classes = useStyles();\r\n\r\n  const [state, setState] = React.useContext(GlobalState);\r\n  const [saving, setSaving] = useState(false);\r\n\r\n  const [fullname, setFullname] = React.useState(\"\");\r\n  const [fullnameError, setFullnameError] = React.useState(false);\r\n\r\n  const [phone, setPhone] = React.useState(\"\");\r\n  const [email, setEmail] = React.useState(\"\");\r\n  const [service, setService] = React.useState(\"\");\r\n  const [notes, setNotes] = React.useState(\"\");\r\n\r\n  const [deposit, setDeposit] = React.useState(false);\r\n\r\n  const depositChanged = (event) => {\r\n    setDeposit(event.target.checked);\r\n  };\r\n\r\n  const fullnameChanged = (event) => {\r\n    setFullname(event.target.value);\r\n    setFullnameError(false);\r\n  };\r\n\r\n  const phoneChanged = (event) => {\r\n    setPhone(event.target.value);\r\n  };\r\n\r\n  const emailChanged = (event) => {\r\n    setEmail(event.target.value);\r\n  };\r\n\r\n  const serviceChanged = (event) => {\r\n    setService(event.target.value);\r\n  };\r\n\r\n  const notesChanged = (event) => {\r\n    setNotes(event.target.value);\r\n  };\r\n\r\n  const handleClose = () => {\r\n    if (saving) return;\r\n\r\n    setFullname(\"\");\r\n    setFullnameError(false);\r\n    setPhone(\"\");\r\n    setEmail(\"\");\r\n    setService(\"\");\r\n    setNotes(\"\");\r\n    setDeposit(false);\r\n\r\n    props.handleClose();\r\n    setSaving(false);\r\n  };\r\n\r\n  const validateBooking = () => {\r\n    let error = false;\r\n    if (!fullname || fullname.trim().length < 1) {\r\n      setFullnameError(true);\r\n      error = true;\r\n    }\r\n    return !error;\r\n  };\r\n\r\n  const saveClicked = async () => {\r\n    if (!validateBooking()) {\r\n      return;\r\n    }\r\n\r\n    setSaving(true);\r\n\r\n    try {\r\n      await BookService.addNewBooking({\r\n        bookingDate: props.date,\r\n        bookingTime: props.time,\r\n        fullname: fullname,\r\n        phone: phone,\r\n        email: email,\r\n        service: service,\r\n        notes: notes,\r\n        deposit: deposit ? 100 : 0,\r\n      });\r\n      setSaving(false);\r\n      setState((state) => ({\r\n        ...state,\r\n        bookingDialogDataChanged: !state.bookingDialogDataChanged\r\n          ? true\r\n          : false,\r\n      }));\r\n      handleClose();\r\n    } catch (err) {\r\n      console.error(err);\r\n      setSaving(false);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <React.Fragment>\r\n      {props.date && props.time && (\r\n        <React.Fragment>\r\n          <Dialog\r\n            maxWidth=\"xs\"\r\n            open={props.open}\r\n            onClose={handleClose}\r\n            PaperComponent={PaperComponent}\r\n            aria-labelledby=\"form-dialog-title\"\r\n          >\r\n            <DialogTitle id=\"draggable-dialog-title\" style={{position:\"relative\"}}>\r\n              <Grid\r\n                container\r\n                spacing={2}\r\n                direction=\"row\"\r\n                justify=\"center\"\r\n                alignItems=\"center\"\r\n              >\r\n                <Grid item>\r\n                  <AddIcon style={{ color: \"#f50057\", fontSize: \"3rem\" }} />\r\n                </Grid>\r\n\r\n                <Grid item>\r\n                  <div\r\n                    style={{\r\n                      color: \"#f50057\",\r\n                      paddingBottom: \"10px\",\r\n                      fontWeight: \"800\",\r\n                    }}\r\n                  >\r\n                    {\" \"}\r\n                    ADD New Booking{\" \"}\r\n                  </div>\r\n                </Grid>\r\n              </Grid>\r\n\r\n              <div style={{position:\"absolute\", top: \"5px\", right: \"5px\", backgroundColor:CalendarColors.GYNAE_COLOR, color:\"#fff\", padding: \"0px 5px\", borderRadius:\"10px\", fontSize:\"1rem\"}}>\r\n                    GYNAE\r\n              </div>\r\n\r\n              <Divider />\r\n            </DialogTitle>\r\n            <DialogContent>\r\n              <div\r\n                style={{\r\n                  height: \"480px\",\r\n                }}\r\n              >\r\n                <Grid\r\n                  container\r\n                  direction=\"row\"\r\n                  justify=\"stretch\"\r\n                  spacing={2}\r\n                  alignItems=\"center\"\r\n                >\r\n                  <Grid item xs={12}>\r\n                    <Grid\r\n                      container\r\n                      direction=\"row\"\r\n                      justify=\"center\"\r\n                      alignItems=\"center\"\r\n                      spacing={1}\r\n                    >\r\n                      <Grid item>\r\n                        <DateRangeIcon className={classes.CalendarIcon} />\r\n                      </Grid>\r\n                      <Grid item>\r\n                        <span className={classes.DateTimeLabel}>\r\n                          {props.date} , {props.time}\r\n                        </span>\r\n                      </Grid>\r\n                    </Grid>\r\n                  </Grid>\r\n\r\n                  <Grid item xs={12}>\r\n                    <TextField\r\n                      fullWidth\r\n                      autoFocus\r\n                      error={fullnameError}\r\n                      label=\"Full Name\"\r\n                      value={fullname}\r\n                      required\r\n                      onChange={fullnameChanged}\r\n                      name=\"fullname\"\r\n                      id=\"fullname-id\"\r\n                      autoComplete=\"none\"\r\n                    />\r\n                  </Grid>\r\n\r\n                  <Grid item xs={12}>\r\n                    <TextField\r\n                      fullWidth\r\n                      label=\"Telephone\"\r\n                      value={phone}\r\n                      onChange={phoneChanged}\r\n                      name=\"phone\"\r\n                      id=\"phone-id\"\r\n                      autoComplete=\"none\"\r\n                    />\r\n                  </Grid>\r\n\r\n                  <Grid item xs={12}>\r\n                    <TextField\r\n                      fullWidth\r\n                      label=\"Email\"\r\n                      value={email}\r\n                      onChange={emailChanged}\r\n                      name=\"email\"\r\n                      id=\"email-id\"\r\n                      autoComplete=\"none\"\r\n                    />\r\n                  </Grid>\r\n\r\n                  <Grid item xs={12} md={12}>\r\n                    <FormControl className={classes.formControl} fullWidth>\r\n                      <InputLabel id=\"service-label-id\">Service</InputLabel>\r\n                      <Select\r\n                        fullWidth\r\n                        labelId=\"service-label-id\"\r\n                        id=\"service-id\"\r\n                        value={service}\r\n                        onChange={serviceChanged}\r\n                      >\r\n                        {Packages.map((item) => (\r\n                          <MenuItem value={item.packageName}>\r\n                            {item.packageName}\r\n                          </MenuItem>\r\n                        ))}\r\n                      </Select>\r\n                    </FormControl>\r\n                  </Grid>\r\n\r\n                  <Grid item xs={12}>\r\n                    <TextField\r\n                      fullWidth\r\n                      label=\"Notes\"\r\n                      value={notes}\r\n                      onChange={notesChanged}\r\n                      name=\"notes\"\r\n                      id=\"notes-id\"\r\n                      autoComplete=\"none\"\r\n                    />\r\n                  </Grid>\r\n\r\n                  <Grid otem xs={12} style={{marginTop:\"15px\"}}>\r\n                    <FormControlLabel\r\n                      control={\r\n                        <Switch\r\n                          color=\"primary\"\r\n                          checked={deposit}\r\n                          onChange={depositChanged}\r\n                          name=\"deposit\"\r\n                        />\r\n                      }\r\n                      label={deposit ? <span className={classes.PriceLabelPaid}>£100 Deposit Paid</span> : <span className={classes.PriceLabelNotPaid}>£100 Deposit Not Paid</span>}\r\n                    />\r\n                  </Grid>\r\n                </Grid>\r\n\r\n                <div\r\n                  style={{\r\n                    position: \"absolute\",\r\n                    bottom: \"20px\",\r\n                    right: \"20px\",\r\n                  }}\r\n                >\r\n                  <Grid\r\n                    container\r\n                    direction=\"row\"\r\n                    justify=\"flex-end\"\r\n                    alignItems=\"center\"\r\n                    spacing={1}\r\n                  >\r\n                    <Grid item>\r\n                      <Button\r\n                        onClick={handleClose}\r\n                        style={{ width: \"100px\" }}\r\n                        disabled={saving}\r\n                      >\r\n                        back\r\n                      </Button>\r\n                    </Grid>\r\n                    <Grid item>\r\n                      <Button\r\n                        onClick={saveClicked}\r\n                        variant=\"contained\"\r\n                        color=\"secondary\"\r\n                        style={{ width: \"100px\" }}\r\n                        disabled={saving}\r\n                      >\r\n                        Save\r\n                      </Button>\r\n                    </Grid>\r\n                  </Grid>\r\n                </div>\r\n              </div>\r\n\r\n              <Backdrop className={classes.backdrop} open={saving}>\r\n                <CircularProgress color=\"inherit\" />\r\n              </Backdrop>\r\n            </DialogContent>\r\n          </Dialog>\r\n        </React.Fragment>\r\n      )}\r\n    </React.Fragment>\r\n  );\r\n}\r\n","import React, { useEffect, useState } from \"react\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport PropTypes from \"prop-types\";\r\nimport dateformat from \"dateformat\";\r\nimport BookService from \"../services/BookService\";\r\n\r\nimport CircularProgress from \"@material-ui/core/CircularProgress\";\r\nimport GlobalState from \"../../GlobalState\";\r\nimport BookingDialog from \"../BookingDialog\";\r\nimport NewBookingDialog from \"../NewBookingDialog\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  Container: {\r\n    width: \"100%\",\r\n    height: \"50px\",\r\n    position: \"relative\",\r\n    backgroundColor: \"#fff\",\r\n    display: \"flex\",\r\n    alignItems: \"flex-start\",\r\n    justifyItems: \"flex-start\",\r\n    paddingLeft: \"10px\",\r\n  },\r\n\r\n  ContainerPast: {\r\n    width: \"100%\",\r\n    paddingTop: \"50px\",\r\n    position: \"relative\",\r\n    backgroundColor: \"#fafafa\",\r\n  },\r\n\r\n  DayLabel: {\r\n    position: \"absolute\",\r\n    top: \"5px\",\r\n    right: \"5px\",\r\n    color: \"#555\",\r\n    fontSize: \"1rem\",\r\n  },\r\n\r\n  DayLabelDisabled: {\r\n    position: \"absolute\",\r\n    top: \"5px\",\r\n    right: \"5px\",\r\n    color: \"#ddd\",\r\n    fontSize: \"1rem\",\r\n  },\r\n\r\n  LoadingProgress: {\r\n    position: \"absolute\",\r\n    top: \"10%\",\r\n    left: \"40%\",\r\n  },\r\n\r\n  BookingCountGauge: {\r\n    position: \"absolute\",\r\n    bottom: \"5%\",\r\n    left: \"8%\",\r\n    width: \"85%\",\r\n    height: \"8%\",\r\n  },\r\n\r\n  bookingBox: {\r\n    display: \"flex\",\r\n    marginRight: \"10px\",\r\n    marginTop: \"5px\",\r\n    padding: \"10px\",\r\n    maxWidth: \"150px\",\r\n    overflowX: \"hidden\",\r\n    border: \"1px solid #eee\",\r\n    fontSize: \"12px\",\r\n    fontWeight: \"500\",\r\n    cursor: \"pointer\",\r\n    backgroundColor: \"#ebedf7\",\r\n    color: \"#3f51b5\",\r\n    boxShadow: \"2px 4px #fafafa\",\r\n\r\n    \"&:hover\": {\r\n      background: \"#3f51b5\",\r\n      color: \"#ebedf7\",\r\n    },\r\n  },\r\n\r\n  bookingBoxNew: {\r\n    display: \"flex\",\r\n    marginRight: \"10px\",\r\n    marginTop: \"5px\",\r\n    padding: \"10px\",\r\n    maxWidth: \"150px\",\r\n    overflowX: \"hidden\",\r\n    border: \"1px solid #ddd\",\r\n    color: \"#ccc\",\r\n    fontSize: \"12px\",\r\n    fontWeight: \"500\",\r\n    cursor: \"pointer\",\r\n    backgroundColor: \"#fff\",\r\n\r\n    boxShadow: \"2px 4px #fafafa\",\r\n    transition: \"all 0.5s ease\",\r\n    borderRadius: \"4px\",\r\n\r\n    \"&:hover\": {\r\n      background: \"#fff\",\r\n      color: theme.palette.secondary.main,\r\n      borderColor:  theme.palette.secondary.main,\r\n    },\r\n  },\r\n\r\n  bookingBoxSampleTaken: {\r\n    display: \"flex\",\r\n    marginRight: \"10px\",\r\n    marginTop: \"5px\",\r\n    padding: \"10px\",\r\n    maxWidth: \"150px\",\r\n    overflowX: \"hidden\",\r\n    border: \"1px solid #eee\",\r\n    fontSize: \"12px\",\r\n    fontWeight: \"500\",\r\n    cursor: \"pointer\",\r\n    backgroundColor: \"#0066cc\",\r\n    color: \"#eee\",\r\n    boxShadow: \"2px 4px #fafafa\",\r\n\r\n    \"&:hover\": {\r\n      background: \"#0059b3\",\r\n      color: \"#fafafa\",\r\n    },\r\n  },\r\n\r\n  bookingBoxPositive: {\r\n    display: \"flex\",\r\n    marginRight: \"10px\",\r\n    marginTop: \"5px\",\r\n    padding: \"10px\",\r\n    maxWidth: \"150px\",\r\n    overflowX: \"hidden\",\r\n    border: \"1px solid #eee\",\r\n    fontSize: \"12px\",\r\n    fontWeight: \"500\",\r\n    cursor: \"pointer\",\r\n    backgroundColor: \"#d40b0b\",\r\n    color: \"#fff2f2\",\r\n    boxShadow: \"2px 4px #fafafa\",\r\n\r\n    \"&:hover\": {\r\n      background: \"#bf0000\",\r\n      color: \"#fff\",\r\n    },\r\n  },\r\n\r\n  bookingBoxReportSent: {\r\n    display: \"flex\",\r\n    marginRight: \"10px\",\r\n    marginTop: \"5px\",\r\n    padding: \"10px\",\r\n    maxWidth: \"150px\",\r\n    overflowX: \"hidden\",\r\n    border: \"1px solid #eee\",\r\n    fontSize: \"12px\",\r\n    fontWeight: \"500\",\r\n    cursor: \"pointer\",\r\n    backgroundColor: \"#009900\",\r\n    color: \"#eee\",\r\n    boxShadow: \"2px 4px #fafafa\",\r\n\r\n    \"&:hover\": {\r\n      background: \"#006e00\",\r\n      color: \"#fafafa\",\r\n    },\r\n  },\r\n}));\r\n\r\nconst DayViewCell = ({ key, date, time }) => {\r\n  const classes = useStyles();\r\n\r\n  const [state, setState] = React.useContext(GlobalState);\r\n  const [bookings, setBookings] = React.useState(null);\r\n  const [filteredBookings, setFilteredBookings] = React.useState(null);\r\n  const [selectedBooking, setSelectedBooking] = React.useState(null);\r\n\r\n  const [refresh, setRefresh] = React.useState(true);\r\n\r\n  const [isPast, setIsPast] = React.useState(false);\r\n\r\n  const [openDialog, setOpenDialog] = React.useState(false);\r\n  const [openDialogAddNew, setOpenDialogAddNew] = React.useState(false);\r\n\r\n\r\n  useEffect(() => {\r\n    const todayStr = dateformat(new Date(), \"yyyy-mm-dd\");\r\n    setIsPast(date < todayStr);\r\n  }, [date]);\r\n\r\n  useEffect(() => {\r\n    if (bookings) {\r\n      if (state.dayViewCalFilter && state.dayViewCalFilter.trim().length > 0) {\r\n        const search = state.dayViewCalFilter.trim().toUpperCase();\r\n        setFilteredBookings(\r\n          bookings.filter(\r\n            (booking) =>\r\n              booking.fullname.toLowerCase().indexOf(search.toLowerCase()) >= 0\r\n          )\r\n        );\r\n      } else {\r\n        setFilteredBookings([...bookings]);\r\n      }\r\n    }\r\n  }, [state.dayViewCalFilter, bookings]);\r\n\r\n  useEffect(() => {\r\n    const fetchData = async () => {\r\n      if (!date || date.length <= 0 || !time || time.length <= 0) {\r\n        return;\r\n      }\r\n\r\n      // if (isPast)\r\n      // {\r\n      //     setBookings([]);\r\n      //     return;\r\n      // }\r\n\r\n      setBookings(null);\r\n\r\n      var res = state.AdminCalendarCache?.find(\r\n        (record) =>\r\n          record.method === \"getBookingsByDateStrandTime\" &&\r\n          record.query === `${date}${time}`\r\n      )?.res;\r\n      if (!res || openDialog || openDialogAddNew) {\r\n        res = await BookService.getAllBookingsByDateStrandTime(date, time);\r\n        setState((state) => ({\r\n          ...state,\r\n          AdminCalendarCache: [\r\n            ...state.AdminCalendarCache,\r\n            {\r\n              method: \"getBookingsByDateStrandTime\",\r\n              query: `${date}${time}`,\r\n              res: res,\r\n            },\r\n          ],\r\n        }));\r\n      }\r\n\r\n      if (res.data.status === \"OK\") {\r\n        setBookings(res.data.bookings);\r\n      }\r\n    };\r\n\r\n    if (openDialog || openDialogAddNew) {\r\n      setState((state) => ({\r\n        ...state,\r\n        AdminCalendarCache: state.AdminCalendarCache.filter(\r\n          (record) =>\r\n            !(\r\n              record.method === \"getBookingsByDateStrandTime\" &&\r\n              record.query === `${date}${time}`\r\n            )\r\n        ),\r\n      }));\r\n      setState((state) => ({\r\n        ...state,\r\n        AdminCalendarCache: state.AdminCalendarCache.filter(\r\n          (record) =>\r\n            !(\r\n              record.method === \"getBookingsCountByDateStrandTime\" &&\r\n              record.query === `${date}${time}`\r\n            )\r\n        ),\r\n      }));\r\n      setState((state) => ({\r\n        ...state,\r\n        AdminCalendarCache: state.AdminCalendarCache.filter(\r\n          (record) =>\r\n            !(\r\n              record.method === \"getBookingsCountByDateStr\" &&\r\n              record.query === date\r\n            )\r\n        ),\r\n      }));\r\n    }\r\n\r\n    fetchData();\r\n  }, [date, time, state.bookingDialogDataChanged]);\r\n\r\n  const bookingCliked = (event, booking) => {\r\n    setSelectedBooking(booking);\r\n    setOpenDialog(true);\r\n  };\r\n\r\n  const getBookingClass = (status) => {\r\n    switch (status) {\r\n      case \"patient_attended\":\r\n        return classes.bookingBoxSampleTaken;\r\n      default:\r\n        return classes.bookingBox;\r\n    }\r\n  };\r\n\r\n  const addNewBookingClicked = () =>\r\n  {\r\n      setOpenDialogAddNew(true)\r\n  }\r\n\r\n  const getBookingsBox = (_bookings) => {\r\n    if (_bookings === null) {\r\n      return (\r\n        <div className={classes.LoadingProgress}>\r\n          <CircularProgress disableShrink />\r\n        </div>\r\n      );\r\n    } else if (_bookings.length >= 0) {\r\n      return (\r\n        <React.Fragment>\r\n          {_bookings.map((booking) => (\r\n            <div\r\n              style={booking.tr ? { borderTop: \"5px solid #d00fd6\" } : {}}\r\n              className={getBookingClass(booking.status)}\r\n              onClick={(event) => bookingCliked(event, booking)}\r\n            >\r\n              {`${booking.fullname}`.substring(0, 15)}\r\n            </div>\r\n          ))}\r\n\r\n          <div className={classes.bookingBoxNew} onClick={addNewBookingClicked}> + Add New Booking</div>\r\n        </React.Fragment>\r\n      );\r\n    }\r\n  };\r\n\r\n  const handleCloseDialog = () => {\r\n    setOpenDialog(false);\r\n  };\r\n\r\n  const handleCloseDialogAddNew = () => {\r\n    setOpenDialogAddNew(false);\r\n  };\r\n\r\n  return (\r\n    <React.Fragment>\r\n      <div className={classes.Container}>\r\n        {getBookingsBox(filteredBookings)}\r\n      </div>\r\n\r\n      <BookingDialog\r\n        booking={selectedBooking}\r\n        open={openDialog}\r\n        onClose={handleCloseDialog}\r\n      />\r\n\r\n      <NewBookingDialog\r\n        date={date}\r\n        time={time}\r\n        open={openDialogAddNew}\r\n        handleClose={handleCloseDialogAddNew}\r\n        />\r\n    </React.Fragment>\r\n  );\r\n};\r\n\r\nDayViewCell.propTypes = {\r\n  key: PropTypes.string.isRequired,\r\n  date: PropTypes.string.isRequired,\r\n  time: PropTypes.string.isRequired,\r\n};\r\n\r\nexport default DayViewCell;\r\n","import React, { useEffect, useState } from 'react';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport PropTypes from 'prop-types';\r\nimport DayViewCell from './DayViewCell';\r\nimport dateformat from 'dateformat';\r\n\r\n\r\n\r\n\r\nconst rows = [\r\n    '10:00 AM',\r\n    '10:30 AM', \r\n    '11:00 AM', \r\n    '11:30 AM', \r\n    '12:00 PM',\r\n    '12:30 PM',\r\n    '01:00 PM',\r\n    '01:30 PM',\r\n    '02:00 PM',\r\n    '02:30 PM',\r\n    '03:00 PM',\r\n    '03:30 PM',\r\n    '04:00 PM',\r\n    '04:30 PM',\r\n    '05:00 PM',\r\n    '05:30 PM',\r\n];\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n\r\n    table: {\r\n        width: \"100%\",\r\n        border: \"1px solid #ddd\",\r\n        borderCollapse: \"collapse\",\r\n        overflowY: \"auto\"\r\n    },\r\n\r\n    th: {\r\n        border: \"1px solid #ddd\",\r\n        borderCollapse: \"collapse\",\r\n        verticalAlign: \"middle\",\r\n        fontcolor: \"#555\",\r\n        fontWeight: \"400\",\r\n        fontSize: \"15px\",\r\n        paddingTop: \"5px\",\r\n        paddingBottom: \"5px\",\r\n        width: \"12%\", \r\n    },\r\n\r\n    td: {\r\n        border: \"1px solid #ddd\",\r\n        borderCollapse: \"collapse\",\r\n        verticalAlign: \"middle\",\r\n        height : \"50px\",\r\n        width: \"84%\", \r\n    },\r\n\r\n    titleLabel: {\r\n        paddingBottom: \"17px\",\r\n        paddingTop: \"17px\",\r\n        color: \"#777\",\r\n        fontSize: \"16px\"\r\n    },\r\n\r\n    titleLabelToday: {\r\n        paddingBottom: \"17px\",\r\n        paddingTop: \"17px\",\r\n        color: \"#fff\",\r\n        backgroundColor: \"#1a73e8\",\r\n        fontSize: \"16px\"\r\n    },\r\n\r\n  }));\r\n\r\nconst DayView = ({date}) => {\r\n    const classes = useStyles();\r\n\r\n    return (\r\n        <React.Fragment>\r\n\r\n        <div style={{overflowY: \"scroll\" , height: \"60px\"}}>\r\n            <table className={classes.table}>\r\n                <thead>\r\n                    <tr>\r\n                        <th style={{width: \"7%\"}}>\r\n                        \r\n                        </th>\r\n                        <th style={{width: \"84%\"}}>\r\n                                <div className={(dateformat(new Date(),'yyyy-mm-dd') === dateformat(date, 'yyyy-mm-dd')) ? classes.titleLabelToday : classes.titleLabel }>\r\n                                        {dateformat(date,'dddd')}\r\n                                </div>                                \r\n                        </th>\r\n                    </tr>\r\n                </thead>\r\n             </table>\r\n\r\n        </div>\r\n\r\n            <div style={{overflowY: \"scroll\" , height: \"70vh\"}}>\r\n                <table className={classes.table}>   \r\n                    <tbody>\r\n                        {rows.map(row => (\r\n                            <tr>\r\n                                <td style={{width: \"7%\"}}>\r\n                                    {row}\r\n                                </td>\r\n                               \r\n                                <td className={classes.td}>\r\n                                     <DayViewCell key={`${dateformat(date,'yyyy-mm-dd')}-${row}`} date={dateformat(date,'yyyy-mm-dd')} time={row}/>  \r\n                                </td>\r\n                            \r\n                            </tr>\r\n                        ))}            \r\n                    </tbody>\r\n                </table>\r\n            </div>                    \r\n      \r\n        </React.Fragment>\r\n\r\n\r\n    );\r\n}\r\n\r\nDayView.propTypes = {\r\n    date: PropTypes.any.isRequired\r\n  };\r\n\r\n\r\nexport default DayView;","import React, { useEffect, useState } from 'react';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport MonthView from './MonthView';\r\nimport { Button, Grid, IconButton, InputAdornment, TextField, Tooltip } from '@material-ui/core';\r\nimport ToggleButton from '@material-ui/lab/ToggleButton';\r\nimport ToggleButtonGroup from '@material-ui/lab/ToggleButtonGroup';\r\n\r\nimport NavigateBeforeIcon from '@material-ui/icons/NavigateBefore';\r\nimport NavigateNextIcon from '@material-ui/icons/NavigateNext';\r\nimport WeekView from './WeekView';\r\nimport dateformat from 'dateformat';\r\nimport DayView from './DayView';\r\nimport GlobalState from '../../GlobalState';\r\n\r\nimport CloseIcon from '@material-ui/icons/Close';\r\n\r\n\r\n\r\nconst monthNames = [\"January\", \"February\", \"March\", \"April\", \"May\", \"June\",\r\n  \"July\", \"August\", \"September\", \"October\", \"November\", \"December\"\r\n];\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n\r\n    title: {\r\n        textAlign: \"center\",\r\n        fontSize: \"24px\",\r\n        fontColor: \"#333\"\r\n    },\r\n\r\n  }));\r\n\r\nexport default function CalendarView() {\r\n    const classes = useStyles();\r\n\r\n    const [state, setState] = React.useContext(GlobalState);\r\n\r\n    const [month, setMonth] = React.useState(new Date().getMonth() + 1);\r\n    const [year, setYear] = React.useState(new Date().getFullYear());\r\n\r\n    const [day, setDay] = React.useState(new Date());\r\n\r\n    const [firstDayofWeek, setFirstDayofWeek] = React.useState(new Date());\r\n\r\n    const [weekDates, setWeekDates] = React.useState([]);\r\n\r\n    const [mode, setMode] = React.useState('month');\r\n    const [selectedTab, setSeletedTab] = React.useState('month');\r\n\r\n    const [filter,setFilter] = React.useState('');\r\n\r\n    const filterChanged = (event) =>{\r\n        setFilter(event.target.value);\r\n        setState(state => ({...state, dayViewCalFilter : event.target.value?.trim()?.toUpperCase()}))\r\n      }\r\n\r\n      const removeFilter = () =>\r\n      {\r\n        setFilter('');\r\n        setState(state => ({...state, dayViewCalFilter : ''}));\r\n      }\r\n\r\n\r\n    useEffect( () => {\r\n        const today = new Date();\r\n        const dayofWeek = today.getDay();\r\n        const firstdayofweek = new Date(today.getTime() - ( dayofWeek * 86400000));\r\n        setFirstDayofWeek(firstdayofweek);\r\n        setState(state => ({...state, AdminCalendarCache : []}));\r\n\r\n        return () =>\r\n        {\r\n            setState(state => ({...state, AdminCalendarCache : []}));\r\n            removeFilter();\r\n        }\r\n       \r\n    }, []);\r\n\r\n\r\n    useEffect( () => {\r\n        const dates = [];\r\n        for (var i = 0; i < 7 ; i++)\r\n        {\r\n            dates.push(new Date(firstDayofWeek.getTime() + ( i * 86400000)));\r\n        }\r\n        setWeekDates(dates);\r\n\r\n    }, [firstDayofWeek]);\r\n\r\n    const handlePrevButton = (event) =>\r\n    {\r\n       if (mode === 'month')\r\n       {\r\n            if (month === 1)\r\n            {\r\n                setYear(year - 1);\r\n            } \r\n\r\n            const newMonth = month === 1 ? 12 : month - 1;\r\n            setMonth(newMonth);\r\n\r\n            const newDay = new Date(year, newMonth - 1 , 1, 0 ,0 ,0 ,0);\r\n            setDay(newDay);\r\n\r\n            const dayofWeek = newDay.getDay();\r\n            setFirstDayofWeek(new Date(newDay.getTime() - ( dayofWeek * 86400000)));\r\n\r\n       } \r\n       else if (mode === 'week')\r\n       {\r\n           const newFirstDayofWeek = new Date(firstDayofWeek.getTime() - ( 7 * 86400000));\r\n           setFirstDayofWeek(newFirstDayofWeek);\r\n\r\n           setDay(newFirstDayofWeek);\r\n           setMonth(newFirstDayofWeek.getMonth() + 1);\r\n           setYear(newFirstDayofWeek.getFullYear());\r\n\r\n       }\r\n       else if (mode === 'day')\r\n       {\r\n           const newDay = new Date(day.getTime() - ( 1 * 86400000));\r\n           setDay(newDay);\r\n\r\n           const dayofWeek = newDay.getDay();\r\n           setFirstDayofWeek(new Date(newDay.getTime() - ( dayofWeek * 86400000)));\r\n\r\n           setMonth(newDay.getMonth() + 1);\r\n           setYear(newDay.getFullYear());\r\n       }\r\n    }\r\n\r\n    const handleNextButton = (event) =>\r\n    {\r\n        if (mode === 'month')\r\n        {\r\n            if (month === 12)\r\n            {\r\n                setYear(year + 1);\r\n            } \r\n       \r\n            const newMonth = month === 12 ? 1 : month + 1;\r\n            setMonth(newMonth);\r\n\r\n            const newDay = new Date(year, newMonth - 1 , 1, 0 ,0 ,0 ,0);\r\n            setDay(newDay);\r\n\r\n            const dayofWeek = newDay.getDay();\r\n            setFirstDayofWeek(new Date(newDay.getTime() - ( dayofWeek * 86400000)));\r\n        }\r\n        else if (mode === 'week')\r\n        {\r\n            const newFirstDayofWeek = new Date(firstDayofWeek.getTime() + ( 7 * 86400000));\r\n            setFirstDayofWeek(newFirstDayofWeek);\r\n\r\n            setDay(newFirstDayofWeek);\r\n            setMonth(newFirstDayofWeek.getMonth() + 1);\r\n            setYear(newFirstDayofWeek.getFullYear());\r\n\r\n        }\r\n        else if (mode === 'day')\r\n        {\r\n            const newDay = new Date(day.getTime() + ( 1 * 86400000));\r\n            setDay(newDay);\r\n\r\n            const dayofWeek = newDay.getDay();\r\n            setFirstDayofWeek(new Date(newDay.getTime() - ( dayofWeek * 86400000)));\r\n \r\n            setMonth(newDay.getMonth() + 1);\r\n            setYear(newDay.getFullYear());\r\n        }\r\n    }\r\n\r\n    const goToday = (event) => {\r\n        const newDay = new Date();\r\n        const dayofWeek = newDay.getDay();\r\n        setFirstDayofWeek(new Date(newDay.getTime() - ( dayofWeek * 86400000)));\r\n        setDay(newDay);\r\n        setMonth(newDay.getMonth() + 1);\r\n        setYear(newDay.getFullYear());\r\n    }\r\n\r\n    const dayClicked = (event, date) =>\r\n    {\r\n        const newDay = new Date(date);\r\n        const dayofWeek = newDay.getDay();\r\n        setFirstDayofWeek(new Date(newDay.getTime() - ( dayofWeek * 86400000)));\r\n        setDay(newDay);\r\n        setMonth(newDay.getMonth() + 1);\r\n        setYear(newDay.getFullYear());\r\n        setSeletedTab('day');\r\n        setMode('day');\r\n    }\r\n\r\n    const getContentFromMode = (_mode) => {\r\n        if (_mode === 'month')\r\n        {\r\n            return (\r\n                <MonthView dayClicked={dayClicked} month={month} year={year}/>    \r\n            );\r\n        }    \r\n        else if (_mode === 'week')\r\n        {\r\n            return (\r\n                    <WeekView dayClicked={dayClicked} dates={weekDates}/>\r\n            );\r\n            \r\n        }\r\n        else if (_mode === 'day')\r\n        {\r\n            return (\r\n                <DayView date={day}/>\r\n            );\r\n        }\r\n    }\r\n\r\n    const getCalendarTitleFromMode = (_mode) => {\r\n        if (_mode === 'month')\r\n        {\r\n            return (\r\n                <span className={classes.title}> {`${monthNames[month - 1]} ${year}`} </span>   \r\n            );\r\n        }    \r\n        else if (_mode === 'week')\r\n        {\r\n            const endOfWeek = new Date(firstDayofWeek.getTime() + ( 6 * 86400000));\r\n            let endofWeekStr = '';\r\n            if (endOfWeek.getMonth() === firstDayofWeek.getMonth())\r\n            {\r\n                endofWeekStr = dateformat(endOfWeek,'d');\r\n            }else\r\n            {\r\n                endofWeekStr = dateformat(endOfWeek,'mmm d');\r\n            }\r\n\r\n            return (\r\n                <span className={classes.title}> {`${dateformat(firstDayofWeek,'mmm d')} - ${endofWeekStr}, ${year}`} </span>\r\n            );\r\n            \r\n        }\r\n        else if (_mode === 'day')\r\n        {\r\n            return (\r\n                <span className={classes.title}> {`${dateformat(day,'mmmm d, yyyy')}`} </span>\r\n            );\r\n        }\r\n    }\r\n\r\n\r\n    const handleTabChanged = (event, value) => {\r\n        if (value && value.length)\r\n        {\r\n          setSeletedTab(value);\r\n          setMode(value);\r\n        }\r\n    };\r\n\r\n    const getPrevButtonTitle = (_mode) =>\r\n    {\r\n        return `Previuos ${mode}`;\r\n    }\r\n\r\n    const getNextButtonTitle = (_mode) =>\r\n    {\r\n        return `Next ${mode}`;\r\n    }\r\n\r\n    return (\r\n        <React.Fragment>\r\n\r\n          <Grid\r\n            container\r\n            direction=\"row\"\r\n            justify=\"space-between\"\r\n            alignItems=\"center\"\r\n            style= {{marginBottom: \"10px\", marginTop: \"0px\"}}\r\n            >  \r\n\r\n            <Grid item md={3}>\r\n                <div  style={{display:\"flex\", alignItems: \"flex-start\", justifyContent: \"flex-start\" , paddingLeft: \"10px\"}}>\r\n                    <Tooltip title={getPrevButtonTitle(mode)} placement=\"bottom-start\">\r\n                        <IconButton \r\n                                color=\"default\" \r\n                                aria-label=\"prev\"\r\n                                onClick = {handlePrevButton}\r\n                                >\r\n                            <NavigateBeforeIcon style={{fontSize: '2rem'}}/>\r\n                        </IconButton>\r\n                    </Tooltip>\r\n\r\n                    <Tooltip title={getNextButtonTitle(mode)} placement=\"bottom-end\">\r\n                        <IconButton \r\n                                color=\"default\" \r\n                                aria-label=\"next\"\r\n                                onClick = {handleNextButton}\r\n                                >\r\n                            <NavigateNextIcon style={{fontSize: '2rem'}}/>\r\n                        </IconButton>\r\n                    </Tooltip>\r\n\r\n                    <Button style={{marginTop: \"11px\", marginLeft: \"10px\"}} onClick={goToday} variant=\"outlined\"> Today </Button>\r\n                </div>\r\n\r\n            </Grid>\r\n\r\n            <Grid item md={6}>\r\n\r\n                    <Grid\r\n                        container\r\n                        direction=\"row\"\r\n                        justify=\"center\"\r\n                        alignItems=\"flex-end\"\r\n                        spacing = {3}\r\n                        >\r\n                            <Grid item>\r\n                                    {getCalendarTitleFromMode(mode)}\r\n                            </Grid>\r\n                            {mode === 'day' && (\r\n                                        <Grid item>\r\n                                                <TextField\r\n                                                    variant=\"standard\"\r\n                                                    style={{marginBottom : \"5px\"}}\r\n                                                    value={filter}\r\n                                                    onChange={filterChanged}\r\n                                                    margin=\"normal\"\r\n                                                    size=\"small\"\r\n                                                    id=\"filter\"\r\n                                                    label=\"Filter\"\r\n                                                    name=\"filter\"\r\n                                                    autoComplete=\"off\"\r\n                                                    InputProps={{\r\n                                                        endAdornment : \r\n                                                            <InputAdornment position=\"end\">\r\n                                                                <Tooltip title=\"Clear\">\r\n                                                                            <IconButton\r\n                                                                            aria-label=\"remove filter\"\r\n                                                                            onClick={() => removeFilter()}\r\n                                                                            onMouseDown={() => removeFilter()}\r\n                                                                        >\r\n                                                                            <CloseIcon/>\r\n                                                                        </IconButton>\r\n                                                                </Tooltip>\r\n                                                            \r\n                                                            </InputAdornment>\r\n                                                          \r\n                                                    }}\r\n                                                   \r\n                                                />\r\n                                        </Grid>\r\n                            )}\r\n                           \r\n                    </Grid>\r\n                \r\n            </Grid>\r\n\r\n            <Grid item md={3}>\r\n                <div  style={{display:\"flex\", alignItems: \"flex-end\", justifyContent: \"flex-end\", paddingRight: \"10px\" }}>\r\n                    <ToggleButtonGroup\r\n                        value={selectedTab}\r\n                        exclusive\r\n                        onChange={handleTabChanged}\r\n                        aria-label=\"select view mode\"\r\n                    >\r\n                        <ToggleButton style={selectedTab === 'month' ? {width: \"80px\", color: \"#3f51b5\", backgroundColor: \"#ebedf7\" } : {width: \"80px\"}} value=\"month\" aria-label=\"month view\">\r\n                                month\r\n                        </ToggleButton>\r\n                        <ToggleButton style={selectedTab === 'week' ? {width: \"80px\", color: \"#3f51b5\", backgroundColor: \"#ebedf7\"} : {width: \"80px\"}}  value=\"week\" aria-label=\"week view\">\r\n                                week\r\n                        </ToggleButton>\r\n                        <ToggleButton style={selectedTab === 'day' ? {width: \"80px\", color: \"#3f51b5\", backgroundColor: \"#ebedf7\"} : {width: \"80px\"}} value=\"day\" aria-label=\"day view\">\r\n                                day\r\n                        </ToggleButton>\r\n                    </ToggleButtonGroup>\r\n                </div>\r\n            </Grid>\r\n\r\n           </Grid> \r\n\r\n             {getContentFromMode(mode)}\r\n\r\n        </React.Fragment>\r\n\r\n\r\n    );\r\n\r\n}","import axios from 'axios';\r\nimport { authToken, backendAPI } from '../../GlobalPath';\r\n\r\nexport default axios.create({\r\n  baseURL: backendAPI,\r\n  headers : {\r\n      'Authorization' : authToken,\r\n       'Content-Type': 'application/json',\r\n  }\r\n});","import API from './api';\r\nimport axiosRetry from 'axios-retry';\r\n\r\nexport default class BookService {\r\n\r\n\r\n   static addNewBooking = (payload) =>\r\n   {\r\n      return API.post(`/api/gp/book/addnewbooking`, payload);\r\n   }\r\n\r\n\r\n   static sendRegFormEmail = (bookingId) =>\r\n   {\r\n      return API.post(`/api/gp/book/sendregformemail?id=${bookingId}`);\r\n   }\r\n   static payBooking = (bookingId,price, paymentMethod, corporate) =>\r\n   {\r\n      return API.post(`/api/gp/book/paybooking?id=${bookingId}&paymentmethod=${paymentMethod}&corporate=${corporate}&price=${price}`);\r\n   }\r\n\r\n   static unPayBooking = (bookingId) =>\r\n   {\r\n      return API.post(`/api/gp/book/unpaybooking?id=${bookingId}`);\r\n   }\r\n\r\n   static getShouldRefundsCount = () =>\r\n   {\r\n      return API.get(`/api/gp/book/getshouldrefundscount?`);\r\n   }\r\n\r\n   \r\n\r\n   static refundBooking = (bookingId) =>\r\n   {\r\n      return API.post(`/api/gp/payment/refundpayment`, {bookingId: bookingId});\r\n   }\r\n\r\n   static getBookingsStatsByDateStr = (dateStr) =>\r\n   {\r\n      return API.get(`/api/gp/book/getbookingsstatsbydatestr?date=${dateStr}`);\r\n   }\r\n\r\n   static getBookingsCountByDateStr = (dateStr) =>\r\n   {\r\n      return API.get(`/api/gp/book/getbookingscountbydatestr?date=${dateStr}`);\r\n   }\r\n\r\n   static getAllBookingsCountAll = () =>\r\n   {\r\n      return API.get(`/api/gp/book/getallbookingscountall`);\r\n   }\r\n\r\n   static getBookingsCountByDateStrandTime = (dateStr, time, source) =>\r\n   {\r\n      return API.get(`/api/gp/book/getbookingscountbydatestrandtime?date=${dateStr}&time=${time}`, {cancelToken: source.token});\r\n   }\r\n\r\n   static getBookingsByDateStrandTime = (dateStr, time) =>\r\n   {\r\n      return API.get(`/api/gp/book/getbookingsbydatestrandtime?date=${dateStr}&time=${time}`);\r\n   }\r\n\r\n\r\n   static getAllBookingsCountByDateStr = (dateStr) =>\r\n   {\r\n      return API.get(`/api/gp/book/getallbookingscountbydatestr?date=${dateStr}`);\r\n   }\r\n\r\n   static getAllBookingsCountByDateStrandTime = (dateStr, time, source) =>\r\n   {\r\n      return API.get(`/api/gp/book/getallbookingscountbydatestrandtime?date=${dateStr}&time=${time}`, {cancelToken: source.token});\r\n   }\r\n\r\n   static getAllBookingsByDateStrandTime = (dateStr, time) =>\r\n   {\r\n      return API.get(`/api/gp/book/getallbookingsbydatestrandtime?date=${dateStr}&time=${time}`);\r\n   }\r\n\r\n   static changeBackToBookingMade = (id) =>\r\n   {\r\n      return API.post(`/api/gp/book/changebacktobookingmade?id=${id}`);\r\n   }\r\n\r\n   static changeToPatientAttended = (id) =>\r\n   {\r\n      return API.post(`/api/gp/book/changetopatientattended?id=${id}`);\r\n   }\r\n\r\n   static updateBooking = (payload) =>\r\n   {\r\n      return API.post(`/api/gp/book/updatebookappointment`, payload);\r\n   } \r\n\r\n   static updateBookingTime = (payload) =>\r\n   {\r\n      return API.post(`/api/gp/book/updatebookappointmenttime`, payload);\r\n   } \r\n\r\n   static deleteBooking = (id) =>\r\n   {\r\n      return API.post(`/api/gp/book/deletebookappointment?id=${id}`);\r\n   } \r\n\r\n   static unDeleteBooking = (id) =>\r\n   {\r\n      return API.post(`/api/gp/book/undeletebookappointment?id=${id}`);\r\n   } \r\n   \r\n    static getBookingsByRef = (ref) =>\r\n    {\r\n       return API.get(`/api/gp/book/getbookingsbyref?ref=${ref}`);\r\n    }\r\n\r\n    static getBookingById = (id) =>\r\n    {\r\n       return API.get(`/api/gp/book/getbookingbyid?id=${id}`);\r\n    }\r\n\r\n    static getAllBookings = (limit) =>\r\n    {\r\n      if (!limit) limit = 25 \r\n      return API.get(`/api/gp/book/getallbookings?limit=${limit}`);\r\n    }\r\n\r\n    static getDeletedBookings= (limit) =>\r\n    {\r\n      if (!limit) limit = 25 \r\n       return API.get(`/api/gp/book/getdeletedbookings?limit=${limit}`);\r\n    }\r\n\r\n    static getTodayBookings= () =>\r\n    {\r\n       return API.get(`/api/gp/book/gettodaybookings`);\r\n    }\r\n\r\n    static getOldBookings= (limit) =>\r\n    {\r\n      if (!limit) limit = 25 \r\n       return API.get(`/api/gp/book/getoldbookings?limit=${limit}`);\r\n    }\r\n\r\n    static getFutureBookings= (limit) =>\r\n    {\r\n      if (!limit) limit = 25 \r\n       return API.get(`/api/gp/book/getfuturebookings?limit=${limit}`);\r\n    }\r\n\r\n    static getRecentBookings= () =>\r\n    {\r\n       return API.get(`/api/gp/book/getrecentbookings`);\r\n    }\r\n\r\n    static getRecentBookingsAll= (limit) =>\r\n    {\r\n      if (!limit) limit = 25 \r\n       return API.get(`/api/gp/book/getrecentbookingsall?limit=${limit}`);\r\n    }\r\n}","import API from './api';\r\n\r\nexport default class PDFService {\r\n\r\n\r\n    static downloadGPRegForm = (id) =>\r\n    {\r\n       return API.get(`/api/pdf/downloadgpregform?id=${id}`, {\r\n        responseType: 'arraybuffer',\r\n        id: id,\r\n        headers: {\r\n            Accept: 'application/pdf',\r\n        }\r\n        });\r\n    }\r\n\r\n\r\n\r\n}","import React, { useEffect, useRef, useState } from \"react\";\r\nimport BookService from \"./services/BookService\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport {\r\n  Backdrop,\r\n  Button,\r\n  Checkbox,\r\n  CircularProgress,\r\n  Divider,\r\n  FormControlLabel,\r\n  Grid,\r\n  InputAdornment,\r\n  InputLabel,\r\n  Link,\r\n  makeStyles,\r\n  MenuItem,\r\n  Select,\r\n  TextField,\r\n  Tooltip,\r\n} from \"@material-ui/core\";\r\nimport GlobalState from \"./../GlobalState\";\r\nimport { withStyles } from \"@material-ui/core/styles\";\r\n\r\nimport CreditCardIcon from \"@material-ui/icons/CreditCard\";\r\n\r\nimport Dialog from \"@material-ui/core/Dialog\";\r\nimport DialogContent from \"@material-ui/core/DialogContent\";\r\n\r\nimport DialogTitle from \"@material-ui/core/DialogTitle\";\r\nimport Draggable from \"react-draggable\";\r\nimport Paper from \"@material-ui/core/Paper\";\r\n\r\nimport Alert from \"@material-ui/lab/Alert\";\r\n\r\nimport PropTypes from \"prop-types\";\r\nimport LinearProgress from \"@material-ui/core/LinearProgress\";\r\nimport Box from \"@material-ui/core/Box\";\r\n\r\nimport Radio from \"@material-ui/core/Radio\";\r\nimport RadioGroup from \"@material-ui/core/RadioGroup\";\r\nimport FormControl from \"@material-ui/core/FormControl\";\r\nimport FormLabel from \"@material-ui/core/FormLabel\";\r\nimport { corporates } from \"./Corporates\";\r\nimport NumberFormat from \"react-number-format\";\r\n\r\n\r\nvar interval;\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  title: {\r\n    marginTop: theme.spacing(0),\r\n    marginBottom: theme.spacing(1),\r\n  },\r\n\r\n  refreshButton: {\r\n    marginLeft: theme.spacing(2),\r\n  },\r\n\r\n  checkIcon: {\r\n    color: \"green\",\r\n  },\r\n\r\n  closeIcon: {\r\n    color: \"red\",\r\n  },\r\n\r\n  RefLink: {\r\n    cursor: \"pointer\",\r\n  },\r\n\r\n  BookedLabel: {\r\n    backgroundColor: \"#606060\",\r\n    color: \"#fff\",\r\n    paddingRight: \"10px\",\r\n    paddingLeft: \"10px\",\r\n  },\r\n\r\n  PatientAttendedLabel: {\r\n    backgroundColor: \"#0066aa\",\r\n    color: \"#fff\",\r\n    paddingRight: \"15px\",\r\n    paddingLeft: \"10px\",\r\n  },\r\n\r\n  SampleTakenLabel: {\r\n    backgroundColor: \"#0066cc\",\r\n    color: \"#fff\",\r\n    paddingRight: \"40px\",\r\n    paddingLeft: \"10px\",\r\n  },\r\n\r\n  ReportSentLabel: {\r\n    backgroundColor: \"#009900\",\r\n    color: \"#fff\",\r\n    paddingRight: \"90px\",\r\n    paddingLeft: \"10px\",\r\n  },\r\n\r\n  ReportCertSentLabel: {\r\n    backgroundColor: \"#009900\",\r\n    color: \"#fff\",\r\n    paddingRight: \"68px\",\r\n    paddingLeft: \"10px\",\r\n  },\r\n\r\n  archiveButton: {},\r\n\r\n  smartMatchButton: {\r\n    backgroundColor: \"#2f942e\",\r\n    \"&:hover\": {\r\n      background: \"green\",\r\n      color: \"#fff\",\r\n    },\r\n    textDecoration: \"none !important\",\r\n    marginRight: \"10px\",\r\n    // padding: \"10px\"\r\n  },\r\n\r\n  infoTitle: {\r\n    fontWeight: \"400\",\r\n  },\r\n\r\n  infoData: {\r\n    paddingLeft: \"10px\",\r\n    fontWeight: \"800\",\r\n  },\r\n\r\n  matchButton: {\r\n    marginTop: \"30px\",\r\n    marginBottom: \"20px\",\r\n    backgroundColor: \"#2f942e\",\r\n    \"&:hover\": {\r\n      background: \"green\",\r\n      color: \"#fff\",\r\n    },\r\n    textDecoration: \"none !important\",\r\n    padding: \"10px\",\r\n    paddingLeft: \"50px\",\r\n    paddingRight: \"50px\",\r\n  },\r\n\r\n  resendButton: {\r\n    marginTop: \"5px\",\r\n    marginBottom: \"5px\",\r\n    backgroundColor: \"#2f942e\",\r\n    \"&:hover\": {\r\n      background: \"green\",\r\n      color: \"#fff\",\r\n    },\r\n    textDecoration: \"none !important\",\r\n    padding: \"10px\",\r\n    paddingLeft: \"50px\",\r\n    paddingRight: \"50px\",\r\n  },\r\n\r\n  resendFilesButton: {\r\n    marginTop: \"5px\",\r\n    marginBottom: \"5px\",\r\n    backgroundColor: \"#3792ad\",\r\n    \"&:hover\": {\r\n      background: \"#2f798f\",\r\n      color: \"#fff\",\r\n    },\r\n    textDecoration: \"none !important\",\r\n    padding: \"10px\",\r\n    paddingLeft: \"50px\",\r\n    paddingRight: \"50px\",\r\n  },\r\n\r\n  cancelButton: {\r\n    marginBottom: \"10px\",\r\n    textDecoration: \"none !important\",\r\n    padding: \"10px\",\r\n    paddingLeft: \"90px\",\r\n    paddingRight: \"90px\",\r\n  },\r\n\r\n  backdrop: {\r\n    zIndex: theme.zIndex.drawer + 5,\r\n    color: \"#fff\",\r\n  },\r\n}));\r\n\r\nfunction NumberFormatCustom(props) {\r\n  const { inputRef, onChange, ...other } = props;\r\n\r\n  return (\r\n    <NumberFormat\r\n      {...other}\r\n      getInputRef={inputRef}\r\n      onValueChange={(values) => {\r\n        onChange({\r\n          target: {\r\n            name: props.name,\r\n            value: values.value,\r\n          },\r\n        });\r\n      }}\r\n      thousandSeparator\r\n      isNumericString\r\n      prefix=\"\"\r\n    />\r\n  );\r\n}\r\n\r\nNumberFormatCustom.propTypes = {\r\n  inputRef: PropTypes.func.isRequired,\r\n  name: PropTypes.string.isRequired,\r\n  onChange: PropTypes.func.isRequired,\r\n};\r\n\r\n\r\nconst BorderLinearProgress = withStyles((theme) => ({\r\n  root: {\r\n    height: 10,\r\n    borderRadius: 5,\r\n  },\r\n  colorPrimary: {\r\n    backgroundColor: \"#cedbce\", //theme.palette.grey[theme.palette.type === 'light' ? 200 : 700],\r\n  },\r\n  bar: {\r\n    borderRadius: 5,\r\n    backgroundColor: \"#2f942e\",\r\n  },\r\n}))(LinearProgress);\r\nfunction LinearProgressWithLabel(props) {\r\n  return (\r\n    <Box display=\"flex\" alignItems=\"center\">\r\n      <Box width=\"100%\" mr={1}>\r\n        <BorderLinearProgress variant=\"determinate\" {...props} />\r\n      </Box>\r\n      <Box minWidth={35}>\r\n        <Typography\r\n          style={{ fontWeight: \"800\", color: \"#5e855e\" }}\r\n          variant=\"body2\"\r\n          color=\"textSecondary\"\r\n        >{`${Math.round(props.value)}%`}</Typography>\r\n      </Box>\r\n    </Box>\r\n  );\r\n}\r\n\r\nLinearProgressWithLabel.propTypes = {\r\n  /**\r\n   * The value of the progress indicator for the determinate and buffer variants.\r\n   * Value between 0 and 100.\r\n   */\r\n  value: PropTypes.number.isRequired,\r\n};\r\n\r\nfunction PaperComponent(props) {\r\n  return (\r\n    <Draggable\r\n      handle=\"#draggable-dialog-title\"\r\n      cancel={'[class*=\"MuiDialogContent-root\"]'}\r\n    >\r\n      <Paper {...props} />\r\n    </Draggable>\r\n  );\r\n}\r\n\r\nexport default function PayDialog(props) {\r\n  const classes = useStyles();\r\n\r\n  const [state, setState] = React.useContext(GlobalState);\r\n  const [paymentMethod, setPaymentMethod] = useState(\"credit card\");\r\n  const [corporate, setCorporate] = useState(corporates[0]);\r\n  const [saving, setSaving] = useState(false);\r\n\r\n  const [price, setPrice] = useState(\"\");\r\n  const [priceError, setPriceError] = useState(false);\r\n\r\n  useEffect( () => {\r\n    if (props.price)\r\n    {\r\n      setPrice(`${props.price}`)\r\n    }else\r\n    {\r\n      setPrice('')\r\n    }\r\n  }, [props.price, props.open])\r\n\r\n\r\n  const priceChanged = (event) =>\r\n  {\r\n    setPrice(event.target.value)\r\n    setPriceError(false)\r\n  }\r\n\r\n  const paymentMethodChanged = (event) => {\r\n    setPaymentMethod(event.target.value);\r\n  };\r\n\r\n  const handleClose = () => {\r\n    if (saving) return;\r\n\r\n    props.handleClose();\r\n    setPaymentMethod(\"credit card\");\r\n    setPrice('')\r\n    setCorporate(corporates[0]);\r\n    setSaving(false);\r\n  };\r\n\r\n  const corporateChanged = (event) => {\r\n    setCorporate(event.target.value);\r\n  };\r\n\r\n  const payClicked = async () => {\r\n\r\n\r\n    if (!price || price.trim().length === 0 || price === '0')\r\n    {\r\n      setPriceError(true)\r\n      return\r\n    }\r\n\r\n    setSaving(true);\r\n\r\n  \r\n\r\n    try {\r\n      await BookService.payBooking(\r\n        props.booking._id,\r\n        price,\r\n        paymentMethod,\r\n        paymentMethod === \"corporate\" ? corporate : \"\"\r\n      );\r\n      setSaving(false);\r\n      setState((state) => ({\r\n        ...state,\r\n        bookingPayChanged: !state.bookingPayChanged ? true : false,\r\n      }));\r\n      handleClose();\r\n    } catch (err) {\r\n      console.error(err);\r\n      setSaving(false);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <React.Fragment>\r\n      {props.booking && (\r\n        <React.Fragment>\r\n          <Dialog\r\n            maxWidth=\"xs\"\r\n            open={props.open}\r\n            onClose={handleClose}\r\n            PaperComponent={PaperComponent}\r\n            aria-labelledby=\"form-dialog-title\"\r\n          >\r\n            <DialogTitle id=\"draggable-dialog-title\">\r\n              <Grid\r\n                container\r\n                spacing={2}\r\n                direction=\"row\"\r\n                justify=\"center\"\r\n                alignItems=\"center\"\r\n              >\r\n                <Grid item>\r\n                  <CreditCardIcon\r\n                    style={{ color: \"#f50057\", fontSize: \"3rem\" }}\r\n                  />\r\n                </Grid>\r\n\r\n                <Grid item>\r\n                  <div\r\n                    style={{\r\n                      color: \"#f50057\",\r\n                      paddingBottom: \"10px\",\r\n                      fontWeight: \"800\",\r\n                    }}\r\n                  >\r\n                    {\" \"}\r\n                    PAY the CHARGE{\" \"}\r\n                  </div>\r\n                </Grid>\r\n              </Grid>\r\n\r\n              <Divider />\r\n            </DialogTitle>\r\n            <DialogContent>\r\n              <div\r\n                style={{\r\n                  height: \"300px\",\r\n                }}\r\n              >\r\n                <Grid\r\n                  container\r\n                  direction=\"column\"\r\n                  justify=\"space-between\"\r\n                  spacing={2}\r\n                  alignItems=\"flex-start\"\r\n                >\r\n                  <Grid item>\r\n                  <TextField\r\n                                autoFocus\r\n                                error={priceError}\r\n                                label=\"TOTAL Charges\"\r\n                                value={price}\r\n                                fullWidth\r\n                                required\r\n                                onChange={priceChanged}\r\n                                name=\"product-price\"\r\n                                id=\"product-price-id\"\r\n                                InputProps={{\r\n                                  inputComponent: NumberFormatCustom,\r\n                                  startAdornment: (\r\n                                    <InputAdornment position=\"start\">\r\n                                      £\r\n                                    </InputAdornment>\r\n                                  ),\r\n                                }}\r\n                              />\r\n\r\n                  </Grid>\r\n\r\n                  <Grid item>\r\n                    <div style={{ fontSize: \"17px\" }}>\r\n                      {\" \"}\r\n                      How do you want to pay?{\" \"}\r\n                    </div>\r\n                  </Grid>\r\n\r\n                  <Grid item>\r\n                    <FormControl component=\"fieldset\">\r\n                      <RadioGroup\r\n                        aria-label=\"paymentMethod\"\r\n                        name=\"paymentMethod\"\r\n                        value={paymentMethod}\r\n                        onChange={paymentMethodChanged}\r\n                      >\r\n                        <FormControlLabel\r\n                          value=\"credit card\"\r\n                          control={<Radio />}\r\n                          label=\"Credit Card\"\r\n                        />\r\n                        <FormControlLabel\r\n                          value=\"cash\"\r\n                          control={<Radio />}\r\n                          label=\"Cash\"\r\n                        />\r\n                        <FormControlLabel\r\n                          value=\"corporate\"\r\n                          control={<Radio />}\r\n                          label=\"Corporate\"\r\n                        />\r\n                      </RadioGroup>\r\n\r\n                      {paymentMethod === \"corporate\" && (\r\n                        <FormControl\r\n                          style={{ marginTop: \"10px\" }}\r\n                          className={classes.formControl}\r\n                        >\r\n                          <Select\r\n                            labelId=\"select-corporate\"\r\n                            id=\"select-corporate-id\"\r\n                            value={corporate}\r\n                            onChange={corporateChanged}\r\n                          >\r\n                            {corporates.map((element) => (\r\n                              <MenuItem\r\n                                value={element}\r\n                              >{`${element}`}</MenuItem>\r\n                            ))}\r\n                          </Select>\r\n                        </FormControl>\r\n                      )}\r\n                    </FormControl>\r\n                  </Grid>\r\n                </Grid>\r\n\r\n                <Grid item></Grid>\r\n\r\n                <div\r\n                  style={{\r\n                    position: \"absolute\",\r\n                    bottom: \"20px\",\r\n                    right: \"20px\",\r\n                  }}\r\n                >\r\n                  <Grid\r\n                    container\r\n                    direction=\"row\"\r\n                    justify=\"flex-end\"\r\n                    alignItems=\"center\"\r\n                    spacing={1}\r\n                  >\r\n                    <Grid item>\r\n                      <Button\r\n                        onClick={handleClose}\r\n                        style={{ width: \"100px\" }}\r\n                        disabled={saving}\r\n                      >\r\n                        back\r\n                      </Button>\r\n                    </Grid>\r\n                    <Grid item>\r\n                      <Button\r\n                        onClick={payClicked}\r\n                        variant=\"contained\"\r\n                        color=\"secondary\"\r\n                        style={{ width: \"100px\" }}\r\n                        disabled={saving}\r\n                      >\r\n                        Pay\r\n                      </Button>\r\n                    </Grid>\r\n                  </Grid>\r\n                </div>\r\n              </div>\r\n\r\n              <Backdrop className={classes.backdrop} open={saving}>\r\n                <CircularProgress color=\"inherit\" />\r\n              </Backdrop>\r\n            </DialogContent>\r\n          </Dialog>\r\n        </React.Fragment>\r\n      )}\r\n    </React.Fragment>\r\n  );\r\n}\r\n","import React, { useEffect, useState } from \"react\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport GlobalState from \"./../GlobalState\";\r\nimport Grid from \"@material-ui/core/Grid\";\r\nimport {\r\n  Button,\r\n  Checkbox,\r\n  DialogActions,\r\n  DialogContentText,\r\n  Divider,\r\n  FormControlLabel,\r\n  IconButton,\r\n  TextField,\r\n  Tooltip,\r\n} from \"@material-ui/core\";\r\nimport PDFService from \"./services/PDFService\";\r\n\r\nimport { calculatePrice } from \"./PriceCalculator\";\r\n\r\nimport bookingService from \"./services/BookService\";\r\nimport CheckIcon from \"@material-ui/icons/Check\";\r\nimport CloseIcon from \"@material-ui/icons/Close\";\r\n\r\nimport Dialog from \"@material-ui/core/Dialog\";\r\nimport DialogContent from \"@material-ui/core/DialogContent\";\r\nimport DialogTitle from \"@material-ui/core/DialogTitle\";\r\nimport Draggable from \"react-draggable\";\r\nimport Slide from \"@material-ui/core/Slide\";\r\n\r\nimport Paper from \"@material-ui/core/Paper\";\r\n\r\nimport DeleteIcon from \"@material-ui/icons/Delete\";\r\nimport BookService from \"./services/BookService\";\r\n\r\nimport Backdrop from \"@material-ui/core/Backdrop\";\r\nimport CircularProgress from \"@material-ui/core/CircularProgress\";\r\nimport {\r\n  FormatDateFromString,\r\n  RevertFormatDateFromString,\r\n} from \"./DateFormatter\";\r\nimport PayDialog from \"./PayDialog\";\r\n\r\nimport PrintIcon from \"@material-ui/icons/Print\";\r\nimport UndoIcon from \"@material-ui/icons/Undo\";\r\n\r\nimport SendIcon from \"@material-ui/icons/Send\";\r\n\r\nimport HistoryIcon from \"@material-ui/icons/History\";\r\n\r\nimport FileCopyOutlinedIcon from \"@material-ui/icons/FileCopyOutlined\";\r\nimport { CalendarColors } from \"../Admin/calendar-admin/colors\";\r\nimport InvoiceDialog from \"../InvoiceDialog\";\r\nimport InvoiceService from \"../services/InvoiceService\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  box: {\r\n    backgroundColor: \"#373737\",\r\n    color: \"#fff\",\r\n    padding: \"1px\",\r\n    borderRadius: \"4px\",\r\n    textAlign: \"justify\",\r\n    paddingRight: \"40px\",\r\n  },\r\n\r\n  boxRed: {\r\n    backgroundColor: \"#dc2626\",\r\n    color: \"#fff\",\r\n    padding: \"1px\",\r\n    borderRadius: \"4px\",\r\n    textAlign: \"justify\",\r\n    paddingRight: \"40px\",\r\n  },\r\n\r\n  boxInfo: {\r\n    textAlign: \"justify\",\r\n    backgroundColor: \"#fafafa\",\r\n    color: \"#333\",\r\n    padding: \"1px\",\r\n    borderRadius: \"4px\",\r\n    paddingRight: \"40px\",\r\n    border: \"1px solid #eee\",\r\n  },\r\n\r\n  ul: {\r\n    listStyle: \"none\",\r\n    padding: \"0\",\r\n    margin: \"0\",\r\n  },\r\n\r\n  li: {\r\n    marginBottom: \"15px\",\r\n  },\r\n\r\n  icon: {\r\n    marginRight: \"8px\",\r\n  },\r\n\r\n  root: {\r\n    width: \"100%\",\r\n  },\r\n\r\n  lineThrough: {\r\n    textDecoration: \"line-through\",\r\n  },\r\n\r\n  heading: {\r\n    fontSize: theme.typography.pxToRem(15),\r\n    flexBasis: \"33.33%\",\r\n    flexShrink: 0,\r\n    color: theme.palette.text.secondary,\r\n  },\r\n  secondaryHeading: {\r\n    fontSize: theme.typography.pxToRem(15),\r\n  },\r\n\r\n  infoDetails: {\r\n    textAlign: \"left\",\r\n  },\r\n\r\n  infoTitle: {\r\n    fontWeight: \"800\",\r\n    marginRight: \"10px\",\r\n  },\r\n\r\n  infoData: {\r\n    fontWeight: \"400\",\r\n  },\r\n\r\n  title: {\r\n    textAlign: \"center\",\r\n    fontWeight: \"600\",\r\n    marginLeft: \"10px\",\r\n    marginBottom: \"5px\",\r\n  },\r\n\r\n  Accordion: {\r\n    backgroundColor: \"#f5f5f5\",\r\n    color: \"#222\",\r\n  },\r\n\r\n  AccordionDeleted: {\r\n    backgroundColor: \"#aaa\",\r\n    color: \"#555\",\r\n  },\r\n\r\n  DownloadForm: {\r\n    marginTop: \"10px\",\r\n    marginBottom: \"10px\",\r\n  },\r\n\r\n  infoDataCharges: {\r\n    fontSize: \"18px\",\r\n    color: \"green\",\r\n    fontWeight: \"600\",\r\n  },\r\n\r\n  infoDataChargesHigher: {\r\n    fontSize: \"18px\",\r\n    color: \"red\",\r\n    fontWeight: \"600\",\r\n  },\r\n  BookedLabel: {\r\n    color: \"#606060\",\r\n    paddingLeft: \"5px\",\r\n    paddingBottom: \"3px\",\r\n    paddingTop: \"3px\",\r\n    fontWeight: \"800\",\r\n    borderLeft: \"5px solid\",\r\n    borderColor: \"#606060\",\r\n    width: \"150px\",\r\n    display: \"inline-block\",\r\n  },\r\n\r\n  PatientAttendedLabel: {\r\n    color: \"#0066aa\",\r\n    paddingLeft: \"5px\",\r\n    paddingBottom: \"3px\",\r\n    paddingTop: \"3px\",\r\n    fontWeight: \"800\",\r\n    borderLeft: \"5px solid\",\r\n    borderColor: \"#0066aa\",\r\n    width: \"150px\",\r\n    display: \"inline-block\",\r\n  },\r\n\r\n  SampleTakenLabel: {\r\n    color: \"#0066cc\",\r\n    paddingRight: \"10px\",\r\n    paddingLeft: \"5px\",\r\n    paddingBottom: \"3px\",\r\n    paddingTop: \"3px\",\r\n    fontWeight: \"800\",\r\n    borderLeft: \"5px solid\",\r\n    borderColor: \"#0066cc\",\r\n  },\r\n\r\n  ReportSentLabel: {\r\n    color: \"#009900\",\r\n    paddingRight: \"10px\",\r\n    paddingLeft: \"5px\",\r\n    paddingBottom: \"3px\",\r\n    paddingTop: \"3px\",\r\n    fontWeight: \"800\",\r\n    borderLeft: \"5px solid\",\r\n    borderColor: \"#009900\",\r\n  },\r\n\r\n  ReportCertSentLabel: {\r\n    color: \"#009900\",\r\n    paddingRight: \"10px\",\r\n    paddingLeft: \"5px\",\r\n    paddingBottom: \"3px\",\r\n    paddingTop: \"3px\",\r\n    fontWeight: \"800\",\r\n    borderLeft: \"5px solid\",\r\n    borderColor: \"#009900\",\r\n  },\r\n\r\n  PositiveLabel: {\r\n    color: \"red\",\r\n    paddingRight: \"10px\",\r\n    paddingLeft: \"5px\",\r\n    paddingBottom: \"3px\",\r\n    paddingTop: \"3px\",\r\n    fontWeight: \"800\",\r\n    borderLeft: \"5px solid\",\r\n    borderColor: \"red\",\r\n  },\r\n\r\n  EditButton: {\r\n    marginBottom: \"20px\",\r\n    backgroundColor: \"#2f942e\",\r\n    \"&:hover\": {\r\n      background: \"green\",\r\n      color: \"#fff\",\r\n    },\r\n    textDecoration: \"none !important\",\r\n    padding: \"10px\",\r\n  },\r\n\r\n  ResendEmailsButton: {\r\n    // marginBottom : \"20px\",\r\n    color: \"#2f942e\",\r\n    borderColor: \"#2f942e\",\r\n    \"&:hover\": {\r\n      background: \"#fafffa\",\r\n      borderColor: \"#2f942e\",\r\n    },\r\n    textDecoration: \"none !important\",\r\n    paddingLeft: \"50px\",\r\n    paddingRight: \"50px\",\r\n  },\r\n\r\n  PayButton: {\r\n    marginLeft: \"70px\",\r\n    width: \"300px\",\r\n  },\r\n\r\n  printInvoiceButton: {\r\n    marginLeft: \"70px\",\r\n    fontSize: \"0.8rem\",\r\n    // width: \"300px\",\r\n  },\r\n\r\n  editInvoiceButton: {\r\n    marginLeft: \"10px\",\r\n    fontSize: \"0.8rem\",\r\n  },\r\n\r\n  PayLabel: {\r\n    marginLeft: \"20px\",\r\n\r\n    color: \"#2f942e\",\r\n    fontWeight: \"500\",\r\n    textAlign: \"center\",\r\n  },\r\n\r\n  RestoreButton: {\r\n    marginBottom: \"20px\",\r\n    backgroundColor: \"#eee\",\r\n    color: \"#333\",\r\n    \"&:hover\": {\r\n      background: \"#f1f1f1\",\r\n      color: \"#111\",\r\n    },\r\n    textDecoration: \"none !important\",\r\n    padding: \"10px\",\r\n  },\r\n\r\n  DeleteButton: {\r\n    marginBottom: \"20px\",\r\n    backgroundColor: \"#d90015\",\r\n    \"&:hover\": {\r\n      background: \"#b80012\",\r\n      color: \"#fff\",\r\n    },\r\n\r\n    padding: \"10px\",\r\n  },\r\n\r\n  SaveButton: {\r\n    marginBottom: \"10px\",\r\n    padding: \"10px\",\r\n\r\n    backgroundColor: \"#d1175e\",\r\n    \"&:hover\": {\r\n      background: \"#bd0d50\",\r\n      color: \"#fff\",\r\n    },\r\n  },\r\n\r\n  CancelButton: {\r\n    marginBottom: \"20px\",\r\n    // padding: \"10px\"\r\n  },\r\n\r\n  TextBox: {\r\n    padding: \"0px\",\r\n  },\r\n\r\n  checkIcon: {\r\n    color: \"green\",\r\n  },\r\n\r\n  checkIconSmall: {\r\n    color: \"green\",\r\n    paddingTop: \"5px\",\r\n  },\r\n\r\n  closeIcon: {\r\n    color: \"red\",\r\n  },\r\n\r\n  centeredLabel: {\r\n    display: \"flex\",\r\n    alignItems: \"center\",\r\n  },\r\n\r\n  backdrop: {\r\n    zIndex: theme.zIndex.drawer + 5,\r\n    color: \"#fff\",\r\n  },\r\n\r\n  invoiceNumber: {\r\n    display: \"inline-block\",\r\n    fontWeight: \"500\",\r\n    width: \"72px\",\r\n    fontSize: \"1rem\",\r\n    color: theme.palette.primary.main,\r\n  },\r\n}));\r\n\r\nconst Transition = React.forwardRef(function Transition(props, ref) {\r\n  return <Slide direction=\"up\" ref={ref} {...props} />;\r\n});\r\n\r\nfunction PaperComponent(props) {\r\n  return (\r\n    <Draggable\r\n      handle=\"#alert-dialog-slide-title\"\r\n      cancel={'[class*=\"MuiDialogContent-root\"]'}\r\n    >\r\n      <Paper {...props} />\r\n    </Draggable>\r\n  );\r\n}\r\n\r\nexport default function BookingDialog(props) {\r\n  const classes = useStyles();\r\n\r\n  const [state, setState] = React.useContext(GlobalState);\r\n\r\n  const [copied, setCopied] = useState(false);\r\n\r\n  const [emailSent, setEmailSent] = React.useState(false);\r\n  const [emailSentInvoice, setEmailSentInvoice] = React.useState(false);\r\n\r\n  const [openResendDialog, setOpenResendDialog] = React.useState(false);\r\n  const [openPayDialog, setOpenPayDialog] = React.useState(false);\r\n  const [openRefundDialog, setOpenRefundDialog] = React.useState(false);\r\n\r\n  const [openInvoiceDialog, setOpenInvoiceDialog] = React.useState(false);\r\n\r\n  const [selectedBooking, setSelectedBooking] = React.useState(null);\r\n\r\n  const [editMode, setEditMode] = React.useState({ edit: false, person: null });\r\n  const [deleteMode, setDeleteMode] = React.useState({\r\n    delete: false,\r\n    person: null,\r\n  });\r\n  const [restoreMode, setRestoreMode] = React.useState({\r\n    restore: false,\r\n    person: null,\r\n  });\r\n\r\n  const [saving, setSaving] = React.useState(false);\r\n  const [deleting, setDeleting] = React.useState(false);\r\n  const [restoring, setRestoring] = React.useState(false);\r\n\r\n  const [validationError, setValidationError] = React.useState({});\r\n\r\n  const [bookingDate, setBookingDate] = React.useState(\"\");\r\n  const [bookingTime, setBookingTime] = React.useState(\"\");\r\n\r\n  const [fullname, setFullname] = React.useState(\"\");\r\n  const [email, setEmail] = React.useState(\"\");\r\n  const [tel, setTel] = React.useState(\"\");\r\n  const [notes, setNotes] = React.useState(\"\");\r\n  const [service, setService] = React.useState(\"\");\r\n\r\n  const [refreshData, setRefreshData] = React.useState(false);\r\n\r\n  const [booking, setBooking] = React.useState(null);\r\n\r\n  const [recordChanged, setRecordChanged] = React.useState(false);\r\n\r\n  const [fieldChanged, setFieldChanged] = React.useState(false);\r\n\r\n  const [openUndoPayDialog, setOpenUndoPayDialog] = React.useState(false);\r\n\r\n  const [openTimeStampDialog, setOpenTimeStampDialog] = React.useState(false);\r\n\r\n  const [invoice, setInvoice] = React.useState(null);\r\n  const [invoiceLoaded, setInvoiceLoaded] = React.useState(false);\r\n\r\n  const fetchInvoice = async () => {\r\n    try {\r\n      setInvoiceLoaded(false);\r\n      const res = await InvoiceService.getInvoiceByBookingId(props.booking._id);\r\n      setInvoice(res.data.invoice);\r\n      setInvoiceLoaded(true);\r\n    } catch (err) {\r\n      setInvoiceLoaded(true);\r\n      console.error(err);\r\n    }\r\n  };\r\n\r\n  React.useEffect(() => {\r\n    if (props.booking) {\r\n      fetchInvoice();\r\n    }\r\n  }, [props.booking, props.open]);\r\n\r\n  const handleCloseTimeStampDialog = () => {\r\n    setOpenTimeStampDialog(false);\r\n    setSelectedBooking(null);\r\n  };\r\n\r\n  const handleCloseUndoPayDialog = () => {\r\n    setOpenUndoPayDialog(false);\r\n    setSelectedBooking(null);\r\n  };\r\n\r\n  const handleCloseResendDialog = () => {\r\n    setOpenResendDialog(false);\r\n    setSelectedBooking(null);\r\n  };\r\n\r\n  const handleClosePayDialog = () => {\r\n    setOpenPayDialog(false);\r\n    setSelectedBooking(null);\r\n  };\r\n\r\n  const handleCloseRefundDialog = () => {\r\n    setOpenRefundDialog(false);\r\n    setSelectedBooking(null);\r\n  };\r\n\r\n  const handleCloseInvoiceDialog = (refresh) => {\r\n    setOpenInvoiceDialog(false);\r\n    setSelectedBooking(null);\r\n    fetchInvoice();\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (booking) {\r\n      const isChanged =\r\n        bookingDate !== FormatDateFromString(booking.bookingDate) ||\r\n        bookingTime !== booking.bookingTime ||\r\n        fullname !== booking.fullname ||\r\n        email !== booking.email ||\r\n        tel !== booking.phone ||\r\n        notes !== booking.notes;\r\n\r\n      setRecordChanged(isChanged);\r\n    }\r\n  }, [fieldChanged]);\r\n\r\n  useEffect(() => {\r\n    if (!props.open) {\r\n      setTimeout(() => {\r\n        setEditMode({ edit: false, person: null });\r\n        setRecordChanged(false);\r\n      }, 500);\r\n    }\r\n  }, [props.open]);\r\n\r\n  const bookingDateChanged = (event) => {\r\n    setBookingDate(event.target.value);\r\n    setValidationError({ ...validationError, bookingDateError: false });\r\n    setFieldChanged(!fieldChanged);\r\n  };\r\n\r\n  const bookingTimeChanged = (event) => {\r\n    setBookingTime(event.target.value);\r\n    setValidationError({ ...validationError, bookingTimeError: false });\r\n    setFieldChanged(!fieldChanged);\r\n  };\r\n\r\n  const fullnameChanged = (event) => {\r\n    setFullname(event.target.value);\r\n    setFieldChanged(!fieldChanged);\r\n  };\r\n\r\n  const emailChanged = (event) => {\r\n    setEmail(event.target.value);\r\n    setFieldChanged(!fieldChanged);\r\n  };\r\n\r\n  const telChanged = (event) => {\r\n    setTel(event.target.value);\r\n    setFieldChanged(!fieldChanged);\r\n  };\r\n\r\n  const serviceChanged = (event) => {\r\n    setService(event.target.value);\r\n    setFieldChanged(!fieldChanged);\r\n  };\r\n\r\n  const notesChanged = (event) => {\r\n    setNotes(event.target.value);\r\n    setFieldChanged(!fieldChanged);\r\n  };\r\n\r\n  const getStatusLabel = (status) => {\r\n    if (status === \"booked\") {\r\n      return <div className={classes.BookedLabel}> Booking Made </div>;\r\n    } else if (status === \"patient_attended\") {\r\n      return (\r\n        <div className={classes.PatientAttendedLabel}> Patient Attended </div>\r\n      );\r\n    } else {\r\n      return \"Unknown\";\r\n    }\r\n  };\r\n\r\n  const handleEditModeChanged = (edit, person) => {\r\n    if (edit) {\r\n      setFullname(person.fullname);\r\n      setBookingDate(FormatDateFromString(person.bookingDate));\r\n      setBookingTime(person.bookingTime.toUpperCase());\r\n      setEmail(person.email);\r\n      setTel(person.phone);\r\n      if (person.notes) {\r\n        setNotes(person.notes);\r\n      }\r\n\r\n      setEditMode({ edit: edit, person: person });\r\n    } else if (!edit && !person) {\r\n      setEditMode({ edit: edit, person: person });\r\n      setRecordChanged(false);\r\n    } else if (!edit && person) {\r\n      const booking = {};\r\n      const bookingId = person._id;\r\n      booking.email = email;\r\n      booking.phone = tel;\r\n      booking.fullname = fullname;\r\n      booking.notes = notes;\r\n      booking.service = service;\r\n      booking.bookingDate = RevertFormatDateFromString(bookingDate);\r\n      booking.bookingTime = bookingTime;\r\n      booking.bookingRef = person.bookingRef;\r\n\r\n      if (validateBooking(booking)) {\r\n        updateBooking({ bookingId: bookingId, person: booking });\r\n      }\r\n    }\r\n  };\r\n\r\n  const validateDate = (str) => {\r\n    var error = false;\r\n    if (!str || str.length !== 10) {\r\n      error = true;\r\n    }\r\n\r\n    if (str.charAt(4) !== \"-\" || str.charAt(7) !== \"-\") {\r\n      error = true;\r\n    }\r\n\r\n    try {\r\n      const result = /^\\d{4}-\\d{2}-\\d{2}$/.test(str);\r\n      if (!result) {\r\n        error = true;\r\n      }\r\n\r\n      const year = parseInt(str.substr(0, 4));\r\n      const month = parseInt(str.substr(5, 2));\r\n      const day = parseInt(str.substr(8, 2));\r\n\r\n      if (year < 1900) {\r\n        error = true;\r\n      }\r\n\r\n      if (month < 1 || month > 12) {\r\n        error = true;\r\n      }\r\n\r\n      if (day > 31) {\r\n        error = true;\r\n      }\r\n    } catch (err) {\r\n      error = true;\r\n    }\r\n\r\n    return !error;\r\n  };\r\n\r\n  const validateTime = (str) => {\r\n    var error = false;\r\n\r\n    const result = /^\\d{2}:\\d{2} AM$|^\\d{2}:\\d{2} PM$/.test(str);\r\n    if (!result) {\r\n      error = true;\r\n    }\r\n\r\n    try {\r\n      const hour = parseInt(str.substr(0, 2));\r\n      const minute = parseInt(str.substr(3, 2));\r\n\r\n      if (hour < 0 || hour > 12) {\r\n        error = true;\r\n      }\r\n\r\n      if (minute < 0 || minute > 59) {\r\n        error = true;\r\n      }\r\n    } catch (err) {\r\n      error = true;\r\n    }\r\n\r\n    return !error;\r\n  };\r\n\r\n  const validateBooking = (booking) => {\r\n    var error = false;\r\n\r\n    if (!validateDate(booking.bookingDate)) {\r\n      error = true;\r\n      setValidationError({ ...validationError, bookingDateError: true });\r\n    }\r\n\r\n    if (!validateTime(booking.bookingTime)) {\r\n      error = true;\r\n      setValidationError({ ...validationError, bookingTimeError: true });\r\n    }\r\n    return !error;\r\n  };\r\n\r\n  const updateBooking = (payload) => {\r\n    setSaving(true);\r\n    bookingService\r\n      .updateBooking(payload)\r\n      .then((res) => {\r\n        setSaving(false);\r\n        setEditMode({ edit: false, person: null });\r\n        setRefreshData(!refreshData);\r\n      })\r\n      .catch((err) => {\r\n        setSaving(false);\r\n        setEditMode({ edit: false, person: null });\r\n        console.log(err);\r\n      });\r\n  };\r\n\r\n  const deleteBooking = (id) => {\r\n    setDeleting(true);\r\n    bookingService\r\n      .deleteBooking(id)\r\n      .then((res) => {\r\n        setDeleting(false);\r\n        setDeleteMode({ delete: false, person: null });\r\n        setRefreshData(!refreshData);\r\n      })\r\n      .catch((err) => {\r\n        setDeleting(false);\r\n        setDeleteMode({ delete: false, person: null });\r\n        console.log(err);\r\n      });\r\n  };\r\n\r\n  const restoreBooking = (id) => {\r\n    setRestoring(true);\r\n    bookingService\r\n      .unDeleteBooking(id)\r\n      .then((res) => {\r\n        setRestoring(false);\r\n        setRestoreMode({ restore: false, person: null });\r\n        setRefreshData(!refreshData);\r\n      })\r\n      .catch((err) => {\r\n        setRestoring(false);\r\n        setRestoreMode({ restore: false, person: null });\r\n        console.log(err);\r\n      });\r\n  };\r\n\r\n  const handleDeleteModeChanged = (del, person) => {\r\n    if (del) {\r\n      setDeleteMode({ delete: del, person: person });\r\n    } else if (!del && !person) {\r\n      setDeleteMode({ delete: del, person: person });\r\n    } else if (!del && person) {\r\n      deleteBooking(person._id);\r\n    }\r\n  };\r\n\r\n  const handleRestoreModeChanged = (restore, person) => {\r\n    if (restore) {\r\n      setRestoreMode({ restore: restore, person: person });\r\n    } else if (!restore && !person) {\r\n      setRestoreMode({ restore: restore, person: person });\r\n    } else if (!restore && person) {\r\n      restoreBooking(person._id);\r\n    }\r\n  };\r\n\r\n  const changeBackToBookingMade = (event, id) => {\r\n    setSaving(true);\r\n    BookService.changeBackToBookingMade(id)\r\n      .then((res) => {\r\n        setSaving(false);\r\n        setRefreshData(!refreshData);\r\n      })\r\n      .catch((err) => {\r\n        console.log(err);\r\n        setSaving(false);\r\n      });\r\n  };\r\n\r\n  const changeToPatientAttended = (event, id) => {\r\n    setSaving(true);\r\n    BookService.changeToPatientAttended(id)\r\n      .then((res) => {\r\n        setSaving(false);\r\n        setRefreshData(!refreshData);\r\n      })\r\n      .catch((err) => {\r\n        console.log(err);\r\n        setSaving(false);\r\n      });\r\n  };\r\n\r\n  const Pay = () => {\r\n    setSelectedBooking(booking);\r\n    setOpenPayDialog(true);\r\n  };\r\n\r\n  const OpenInvoiceDialog = () => {\r\n    setSelectedBooking(booking);\r\n    setInvoice(invoice);\r\n    setOpenInvoiceDialog(true);\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (props.booking) {\r\n      BookService.getBookingById(props.booking._id)\r\n        .then((res) => {\r\n          setBooking(res.data);\r\n        })\r\n        .catch((err) => {\r\n          console.log(err);\r\n        });\r\n\r\n      setState((state) => ({\r\n        ...state,\r\n        bookingDialogDataChanged: !state.bookingDialogDataChanged\r\n          ? true\r\n          : false,\r\n      }));\r\n    }\r\n  }, [refreshData, state.bookingPayChanged]);\r\n\r\n  useEffect(() => {\r\n    if (props.booking) {\r\n      setBooking(props.booking);\r\n    }\r\n  }, [props.booking]);\r\n\r\n  const undoPaymentClicked = async () => {\r\n    setSaving(true);\r\n    try {\r\n      await BookService.unPayBooking(booking._id);\r\n      setSaving(false);\r\n      setOpenUndoPayDialog(false);\r\n      setRefreshData(!refreshData);\r\n    } catch (err) {\r\n      console.error(err);\r\n      setSaving(false);\r\n      setOpenUndoPayDialog(false);\r\n    }\r\n  };\r\n\r\n  const refundPaymentClicked = async () => {\r\n    setSaving(true);\r\n    try {\r\n      await BookService.refundBooking(booking._id);\r\n      setSaving(false);\r\n      updateShouldRefundsCount();\r\n      setOpenRefundDialog(false);\r\n      setRefreshData(!refreshData);\r\n    } catch (err) {\r\n      console.error(err);\r\n      setSaving(false);\r\n      setOpenRefundDialog(false);\r\n    }\r\n  };\r\n\r\n  const updateShouldRefundsCount = async () => {\r\n    try {\r\n      const res = await BookService.getShouldRefundsCount();\r\n      if (res && res.data && res.data.status === \"OK\") {\r\n        setState((state) => ({ ...state, shouldRefunsCount: res.data.count }));\r\n      }\r\n    } catch (ex) {\r\n      console.error(ex);\r\n    }\r\n  };\r\n\r\n  const downloadRegForm = (id) => {\r\n    PDFService.downloadGPRegForm(id)\r\n      .then((res) => {\r\n        const file = new Blob([res.data], { type: \"application/pdf\" });\r\n\r\n        const fileURL = URL.createObjectURL(file);\r\n        window.open(fileURL, \"_blank\");\r\n      })\r\n      .catch((err) => {\r\n        console.log(err);\r\n      });\r\n  };\r\n\r\n  const downloadInvoice = (id) => {\r\n    InvoiceService.downloadInvoice(id)\r\n      .then((res) => {\r\n        const file = new Blob([res.data], { type: \"application/pdf\" });\r\n\r\n        const fileURL = URL.createObjectURL(file);\r\n        window.open(fileURL, \"_blank\");\r\n      })\r\n      .catch((err) => {\r\n        console.log(err);\r\n      });\r\n  };\r\n\r\n  const sendRegForm = (id) => {\r\n    setSaving(true);\r\n    setEmailSent(false);\r\n    BookService.sendRegFormEmail(id)\r\n      .then((res) => {\r\n        setSaving(false);\r\n        if (res.data.status === \"OK\") {\r\n          setEmailSent(true);\r\n        }\r\n      })\r\n      .catch((err) => {\r\n        console.log(err);\r\n        setSaving(false);\r\n      });\r\n  };\r\n\r\n  const sendInvoiceEmail = (id, _email) => {\r\n    setSaving(true);\r\n    setEmailSentInvoice(false);\r\n    InvoiceService.emailInvoice(id, _email)\r\n      .then((res) => {\r\n        setSaving(false);\r\n        if (res.data.status === \"OK\") {\r\n          setEmailSentInvoice(true);\r\n        }\r\n      })\r\n      .catch((err) => {\r\n        console.log(err);\r\n        setSaving(false);\r\n      });\r\n  };\r\n\r\n  const onClose = () => {\r\n    setEmailSent(false);\r\n    setEmailSentInvoice(false);\r\n    setInvoice(null);\r\n    props.onClose();\r\n  };\r\n\r\n  return (\r\n    <React.Fragment>\r\n      {booking && (\r\n        <React.Fragment>\r\n          <Dialog\r\n            maxWidth=\"md\"\r\n            open={props.open}\r\n            TransitionComponent={Transition}\r\n            keepMounted\r\n            onClose={onClose}\r\n            PaperComponent={PaperComponent}\r\n            aria-labelledby=\"alert-dialog-slide-title\"\r\n            aria-describedby=\"alert-dialog-slide-description\"\r\n          >\r\n            <DialogTitle\r\n              id=\"alert-dialog-slide-title\"\r\n              style={\r\n                booking.tr ? { backgroundColor: \"#7e0082\", color: \"#fff\" } : {}\r\n              }\r\n            >\r\n              <div style={{ position: \"absolute\", top: \"25x\", left: \"25px\" }}>\r\n                <Tooltip title=\"COPY EDIT LINK TO CLIPBOARD\">\r\n                  <IconButton\r\n                    onClick={() => {\r\n                      navigator.clipboard.writeText(\r\n                        `https://londonmedicalclinic.co.uk/medicalexpressclinic/user/edit/gynae/${booking._id}`\r\n                      );\r\n                      setCopied(true);\r\n                      setTimeout(() => {\r\n                        setCopied(false);\r\n                      }, 1500);\r\n                    }}\r\n                    aria-label=\"delete\"\r\n                    className={classes.margin}\r\n                    size=\"small\"\r\n                  >\r\n                    <FileCopyOutlinedIcon\r\n                      style={booking.tr ? { color: \"#ddd\" } : {}}\r\n                      fontSize=\"14px\"\r\n                    />\r\n                  </IconButton>\r\n                </Tooltip>\r\n\r\n                <span\r\n                  hidden={!copied}\r\n                  style={{ fontSize: \"12px\", transition: \"all 1s ease-in\" }}\r\n                >\r\n                  {\" \"}\r\n                  Copied{\" \"}\r\n                </span>\r\n              </div>\r\n\r\n              <div\r\n                style={{\r\n                  position: \"absolute\",\r\n                  top: \"25x\",\r\n                  right: \"60px\",\r\n                  backgroundColor: CalendarColors.GP_COLOR,\r\n                  color: \"#fff\",\r\n                  padding: \"0px 5px\",\r\n                  borderRadius: \"10px\",\r\n                }}\r\n              >\r\n                GP\r\n              </div>\r\n\r\n              {/* {booking.tr && (\r\n                <div style={{position:\"absolute\",  right: \"15px\"}}>\r\n                     TR\r\n                </div>\r\n\r\n              )} */}\r\n\r\n              <Grid\r\n                container\r\n                direction=\"row\"\r\n                justify=\"center\"\r\n                spacing={2}\r\n                alignItems=\"center\"\r\n              >\r\n                <Grid item>\r\n                  <div\r\n                    style={\r\n                      booking.deleted\r\n                        ? {\r\n                            paddingBottom: \"5px\",\r\n                            textDecoration: \"line-through\",\r\n                          }\r\n                        : {}\r\n                    }\r\n                  >\r\n                    {`${booking.fullname}`}\r\n                  </div>\r\n                </Grid>\r\n\r\n                {booking.deleted && (\r\n                  <Grid item>\r\n                    <Tooltip title=\"This record has been deleted.\">\r\n                      <DeleteIcon\r\n                        style={\r\n                          booking.tr\r\n                            ? {\r\n                                padding: 0,\r\n                                margin: 0,\r\n                                color: \"#fff\",\r\n                                fontSize: 25,\r\n                              }\r\n                            : {\r\n                                padding: 0,\r\n                                margin: 0,\r\n                                color: \"#333\",\r\n                                fontSize: 25,\r\n                              }\r\n                        }\r\n                      />\r\n                    </Tooltip>\r\n                  </Grid>\r\n                )}\r\n              </Grid>\r\n            </DialogTitle>\r\n            <DialogContent>\r\n              <div\r\n                style={{\r\n                  // height: \"550px\",\r\n                  paddingTop: \"0px\",\r\n                }}\r\n              >\r\n                <Grid item xs={12} md={12} key={`panel0`}>\r\n                  <div className={classes.infoDetails}>\r\n                    <ul className={classes.ul}>\r\n                      {/* Restore Functionality ******************************************* */}\r\n                      <li\r\n                        hidden={\r\n                          !(\r\n                            restoreMode.restore &&\r\n                            restoreMode.person._id === booking._id\r\n                          )\r\n                        }\r\n                      >\r\n                        <div\r\n                          style={{\r\n                            fontWeight: \"500\",\r\n                            paddingBottom: \"5px\",\r\n                            paddingLeft: \"5px\",\r\n                            fontSize: \"16px\",\r\n                            color: \"#333\",\r\n                          }}\r\n                        >\r\n                          Are you sure you want to restore this record?\r\n                        </div>\r\n                      </li>\r\n\r\n                      <li\r\n                        hidden={\r\n                          !booking.deleted ||\r\n                          (restoreMode.restore &&\r\n                            restoreMode.person._id === booking._id)\r\n                        }\r\n                      >\r\n                        <Button\r\n                          type=\"button\"\r\n                          fullWidth\r\n                          variant=\"contained\"\r\n                          color=\"primary\"\r\n                          onClick={() => {\r\n                            handleRestoreModeChanged(true, booking);\r\n                          }}\r\n                          className={classes.RestoreButton}\r\n                        >\r\n                          Restore This Record\r\n                        </Button>\r\n                      </li>\r\n\r\n                      <li\r\n                        hidden={\r\n                          !(\r\n                            restoreMode.restore &&\r\n                            restoreMode.person._id === booking._id\r\n                          )\r\n                        }\r\n                      >\r\n                        <Button\r\n                          type=\"button\"\r\n                          fullWidth\r\n                          variant=\"contained\"\r\n                          color=\"primary\"\r\n                          disabled={restoring}\r\n                          onClick={() => {\r\n                            handleRestoreModeChanged(false, booking);\r\n                          }}\r\n                          className={classes.SaveButton}\r\n                        >\r\n                          YES, Restore this!\r\n                        </Button>\r\n                      </li>\r\n\r\n                      <li\r\n                        hidden={\r\n                          !(\r\n                            restoreMode.restore &&\r\n                            restoreMode.person._id === booking._id\r\n                          )\r\n                        }\r\n                      >\r\n                        <Button\r\n                          type=\"button\"\r\n                          fullWidth\r\n                          variant=\"contained\"\r\n                          color=\"default\"\r\n                          disabled={restoring}\r\n                          onClick={() => {\r\n                            handleRestoreModeChanged(false, null);\r\n                          }}\r\n                          className={classes.CancelButton}\r\n                        >\r\n                          Cancel\r\n                        </Button>\r\n                      </li>\r\n\r\n                      {/*  ******************************************************************* */}\r\n\r\n                      {/* Edit Functionality ******************************************* */}\r\n\r\n                      <li\r\n                        hidden={\r\n                          booking.deleted ||\r\n                          deleteMode.delete ||\r\n                          (editMode.edit && editMode.person._id === booking._id)\r\n                        }\r\n                      >\r\n                        <Button\r\n                          type=\"button\"\r\n                          fullWidth\r\n                          variant=\"contained\"\r\n                          color=\"primary\"\r\n                          onClick={() => {\r\n                            handleEditModeChanged(true, booking);\r\n                          }}\r\n                          className={classes.EditButton}\r\n                        >\r\n                          Edit Booking Info\r\n                        </Button>\r\n                      </li>\r\n\r\n                      <li\r\n                        hidden={\r\n                          !(\r\n                            editMode.edit && editMode.person._id === booking._id\r\n                          )\r\n                        }\r\n                      >\r\n                        <Button\r\n                          type=\"button\"\r\n                          fullWidth\r\n                          variant=\"contained\"\r\n                          color=\"primary\"\r\n                          disabled={saving || !recordChanged}\r\n                          onClick={() => {\r\n                            handleEditModeChanged(false, booking);\r\n                          }}\r\n                          className={classes.SaveButton}\r\n                        >\r\n                          Save Changes\r\n                        </Button>\r\n                      </li>\r\n\r\n                      <li\r\n                        hidden={\r\n                          !(\r\n                            editMode.edit && editMode.person._id === booking._id\r\n                          )\r\n                        }\r\n                      >\r\n                        <Button\r\n                          type=\"button\"\r\n                          fullWidth\r\n                          variant=\"contained\"\r\n                          color=\"default\"\r\n                          disabled={saving}\r\n                          onClick={() => {\r\n                            handleEditModeChanged(false, null);\r\n                          }}\r\n                          className={classes.CancelButton}\r\n                        >\r\n                          Cancel\r\n                        </Button>\r\n                      </li>\r\n\r\n                      {/* ****************************************************************************************** */}\r\n\r\n                      {/* Delete Functionality ******************************************* */}\r\n\r\n                      <li\r\n                        hidden={\r\n                          !(\r\n                            deleteMode.delete &&\r\n                            deleteMode.person._id === booking._id\r\n                          )\r\n                        }\r\n                      >\r\n                        <div\r\n                          style={{\r\n                            fontWeight: \"600\",\r\n                            paddingBottom: \"5px\",\r\n                            paddingLeft: \"5px\",\r\n                            fontSize: \"16px\",\r\n                          }}\r\n                        >\r\n                          Are you sure you want to delete this record?\r\n                        </div>\r\n                      </li>\r\n\r\n                      <li\r\n                        hidden={\r\n                          props.deleteButtonDisabled ||\r\n                          booking.deleted ||\r\n                          editMode.edit ||\r\n                          (deleteMode.delete &&\r\n                            deleteMode.person._id === booking._id)\r\n                        }\r\n                      >\r\n                        {booking.OTCCharges > 0 && (\r\n                          <Tooltip title={\"Paid Records Cannot be Deleted!\"}>\r\n                            <div>\r\n                              <Button\r\n                                disabled={booking.OTCCharges > 0}\r\n                                type=\"button\"\r\n                                fullWidth\r\n                                variant=\"contained\"\r\n                                color=\"primary\"\r\n                                onClick={() => {\r\n                                  handleDeleteModeChanged(true, booking);\r\n                                }}\r\n                                className={classes.DeleteButton}\r\n                              >\r\n                                Delete This Record\r\n                              </Button>\r\n                            </div>\r\n                          </Tooltip>\r\n                        )}\r\n                        {booking.OTCCharges === 0 && (\r\n                          <Button\r\n                            disabled={booking.OTCCharges > 0}\r\n                            type=\"button\"\r\n                            fullWidth\r\n                            variant=\"contained\"\r\n                            color=\"primary\"\r\n                            onClick={() => {\r\n                              handleDeleteModeChanged(true, booking);\r\n                            }}\r\n                            className={classes.DeleteButton}\r\n                          >\r\n                            Delete This Record\r\n                          </Button>\r\n                        )}\r\n                      </li>\r\n\r\n                      <li\r\n                        hidden={\r\n                          !(\r\n                            deleteMode.delete &&\r\n                            deleteMode.person._id === booking._id\r\n                          )\r\n                        }\r\n                      >\r\n                        <Button\r\n                          type=\"button\"\r\n                          fullWidth\r\n                          variant=\"contained\"\r\n                          color=\"primary\"\r\n                          disabled={deleting}\r\n                          onClick={() => {\r\n                            handleDeleteModeChanged(false, booking);\r\n                          }}\r\n                          className={classes.SaveButton}\r\n                        >\r\n                          YES, Delete this!\r\n                        </Button>\r\n                      </li>\r\n\r\n                      <li\r\n                        hidden={\r\n                          !(\r\n                            deleteMode.delete &&\r\n                            deleteMode.person._id === booking._id\r\n                          )\r\n                        }\r\n                      >\r\n                        <Button\r\n                          type=\"button\"\r\n                          fullWidth\r\n                          variant=\"contained\"\r\n                          color=\"default\"\r\n                          disabled={deleting}\r\n                          onClick={() => {\r\n                            handleDeleteModeChanged(false, null);\r\n                          }}\r\n                          className={classes.CancelButton}\r\n                        >\r\n                          Cancel\r\n                        </Button>\r\n                      </li>\r\n\r\n                      {/* ****************************************************************************************** */}\r\n\r\n                      <li className={classes.li}>\r\n                        <Grid container spacing={2}>\r\n                          <Grid item xs={6}>\r\n                            <span className={classes.infoTitle}>\r\n                              BOOKED DATE\r\n                            </span>\r\n\r\n                            <span\r\n                              hidden={\r\n                                editMode.edit &&\r\n                                editMode.person._id === booking._id\r\n                              }\r\n                              className={classes.infoData}\r\n                            >\r\n                              {FormatDateFromString(booking.bookingDate)}\r\n                            </span>\r\n                            <span\r\n                              hidden={\r\n                                !(\r\n                                  editMode.edit &&\r\n                                  editMode.person._id === booking._id\r\n                                )\r\n                              }\r\n                              className={classes.infoData}\r\n                            >\r\n                              <TextField\r\n                                fullWidth\r\n                                error={validationError.bookingDateError}\r\n                                className={classes.TextBox}\r\n                                value={bookingDate}\r\n                                onChange={bookingDateChanged}\r\n                                inputProps={{\r\n                                  style: {\r\n                                    padding: 0,\r\n                                  },\r\n                                }}\r\n                              ></TextField>\r\n                            </span>\r\n                          </Grid>\r\n                          <Grid item xs={6}>\r\n                            <span className={classes.infoTitle}>\r\n                              BOOKED TIME\r\n                            </span>\r\n                            <span\r\n                              hidden={\r\n                                editMode.edit &&\r\n                                editMode.person._id === booking._id\r\n                              }\r\n                              className={classes.infoData}\r\n                            >\r\n                              {booking.bookingTime.toUpperCase()}\r\n                            </span>\r\n                            <span\r\n                              hidden={\r\n                                !(\r\n                                  editMode.edit &&\r\n                                  editMode.person._id === booking._id\r\n                                )\r\n                              }\r\n                              className={classes.infoData}\r\n                            >\r\n                              <TextField\r\n                                fullWidth\r\n                                error={validationError.bookingTimeError}\r\n                                className={classes.TextBox}\r\n                                value={bookingTime}\r\n                                onChange={bookingTimeChanged}\r\n                                inputProps={{\r\n                                  style: {\r\n                                    padding: 0,\r\n                                  },\r\n                                }}\r\n                              ></TextField>\r\n                            </span>\r\n                          </Grid>\r\n                        </Grid>\r\n                      </li>\r\n\r\n                      <li className={classes.li}>\r\n                        <Grid container spacing={2}>\r\n                          <Grid item xs={6}>\r\n                            <span className={classes.infoTitle}>FULLNAME</span>\r\n                            <span\r\n                              hidden={\r\n                                editMode.edit &&\r\n                                editMode.person._id === booking._id\r\n                              }\r\n                              className={classes.infoData}\r\n                            >\r\n                              {booking.fullname}\r\n                            </span>\r\n                            <span\r\n                              hidden={\r\n                                !(\r\n                                  editMode.edit &&\r\n                                  editMode.person._id === booking._id\r\n                                )\r\n                              }\r\n                              className={classes.infoData}\r\n                            >\r\n                              <TextField\r\n                                fullWidth\r\n                                className={classes.TextBox}\r\n                                value={fullname}\r\n                                onChange={fullnameChanged}\r\n                                inputProps={{\r\n                                  style: {\r\n                                    padding: 0,\r\n                                  },\r\n                                }}\r\n                              ></TextField>\r\n                            </span>\r\n                          </Grid>\r\n                          <Grid item xs={6}>\r\n                            <span className={classes.infoTitle}>EMAIL</span>\r\n                            <span\r\n                              hidden={\r\n                                editMode.edit &&\r\n                                editMode.person._id === booking._id\r\n                              }\r\n                              className={classes.infoData}\r\n                            >\r\n                              {booking.email}\r\n                            </span>\r\n                            <span\r\n                              hidden={\r\n                                !(\r\n                                  editMode.edit &&\r\n                                  editMode.person._id === booking._id\r\n                                )\r\n                              }\r\n                              className={classes.infoData}\r\n                            >\r\n                              <TextField\r\n                                fullWidth\r\n                                className={classes.TextBox}\r\n                                value={email}\r\n                                onChange={emailChanged}\r\n                                inputProps={{\r\n                                  style: {\r\n                                    padding: 0,\r\n                                  },\r\n                                }}\r\n                              ></TextField>\r\n                            </span>\r\n                          </Grid>\r\n                        </Grid>\r\n                      </li>\r\n                      <li className={classes.li}>\r\n                        <Grid container spacing={2}>\r\n                          <Grid item xs={6}>\r\n                            <span className={classes.infoTitle}>TEL</span>\r\n                            <span\r\n                              hidden={\r\n                                editMode.edit &&\r\n                                editMode.person._id === booking._id\r\n                              }\r\n                              className={classes.infoData}\r\n                            >\r\n                              {booking.phone?.toUpperCase()}\r\n                            </span>\r\n                            <span\r\n                              hidden={\r\n                                !(\r\n                                  editMode.edit &&\r\n                                  editMode.person._id === booking._id\r\n                                )\r\n                              }\r\n                              className={classes.infoData}\r\n                            >\r\n                              <TextField\r\n                                fullWidth\r\n                                className={classes.TextBox}\r\n                                value={tel}\r\n                                onChange={telChanged}\r\n                                inputProps={{\r\n                                  style: {\r\n                                    padding: 0,\r\n                                  },\r\n                                }}\r\n                              ></TextField>\r\n                            </span>\r\n                          </Grid>\r\n                          <Grid item xs={6}>\r\n                            <span className={classes.infoTitle}>NOTES</span>\r\n                            <span\r\n                              hidden={\r\n                                editMode.edit &&\r\n                                editMode.person._id === booking._id\r\n                              }\r\n                              className={classes.infoData}\r\n                            >\r\n                              {booking.notes}\r\n                            </span>\r\n                            <span\r\n                              hidden={\r\n                                !(\r\n                                  editMode.edit &&\r\n                                  editMode.person._id === booking._id\r\n                                )\r\n                              }\r\n                              className={classes.infoData}\r\n                            >\r\n                              <TextField\r\n                                fullWidth\r\n                                className={classes.TextBox}\r\n                                value={notes}\r\n                                onChange={notesChanged}\r\n                                inputProps={{\r\n                                  style: {\r\n                                    padding: 0,\r\n                                  },\r\n                                }}\r\n                              ></TextField>\r\n                            </span>\r\n                          </Grid>\r\n                        </Grid>\r\n                      </li>\r\n\r\n                      <li className={classes.li} style={{ paddingTop: \"20px\" }}>\r\n                        <span className={classes.infoTitle}>STATUS</span>{\" \"}\r\n                        {getStatusLabel(booking.status)}\r\n                        {booking.status === \"patient_attended\" &&\r\n                          !(\r\n                            editMode.edit && editMode.person._id === booking._id\r\n                          ) &&\r\n                          !booking.deleted && (\r\n                            <Button\r\n                              variant=\"outlined\"\r\n                              color=\"primary\"\r\n                              disabled={saving}\r\n                              style={{ width: \"300px\" }}\r\n                              onClick={(event) =>\r\n                                changeBackToBookingMade(event, booking._id)\r\n                              }\r\n                            >\r\n                              Change Back To Booking Made\r\n                            </Button>\r\n                          )}\r\n                        {booking.status === \"booked\" &&\r\n                          !(\r\n                            editMode.edit && editMode.person._id === booking._id\r\n                          ) &&\r\n                          !booking.deleted && (\r\n                            <Button\r\n                              variant=\"outlined\"\r\n                              color=\"default\"\r\n                              disabled={saving}\r\n                              style={{ width: \"300px\" }}\r\n                              onClick={(event) =>\r\n                                changeToPatientAttended(event, booking._id)\r\n                              }\r\n                            >\r\n                              Change To Patient Attended\r\n                            </Button>\r\n                          )}\r\n                      </li>\r\n\r\n                      <li hidden={booking.deleted || editMode.edit}>\r\n                        <Button\r\n                          disabled={!booking.formData}\r\n                          startIcon={<PrintIcon />}\r\n                          type=\"button\"\r\n                          fullWidth\r\n                          variant=\"outlined\"\r\n                          color=\"primary\"\r\n                          onClick={() => {\r\n                            downloadRegForm(booking._id);\r\n                          }}\r\n                          className={classes.DownloadForm}\r\n                        >\r\n                          Download Registration Form\r\n                        </Button>\r\n                      </li>\r\n\r\n                      <li\r\n                        hidden={\r\n                          booking.deleted || editMode.edit || booking.formData\r\n                        }\r\n                      >\r\n                        <Button\r\n                          disabled={!booking.email || booking.email.length < 3}\r\n                          startIcon={<SendIcon />}\r\n                          type=\"button\"\r\n                          fullWidth\r\n                          variant=\"outlined\"\r\n                          color=\"primary\"\r\n                          onClick={() => {\r\n                            sendRegForm(booking._id);\r\n                          }}\r\n                          className={classes.DownloadForm}\r\n                          style={{ position: \"relative\" }}\r\n                        >\r\n                          Send Registration Form Email\r\n                          {emailSent && (\r\n                            <div\r\n                              style={{\r\n                                position: \"absolute\",\r\n                                right: \"10px\",\r\n                                top: \"5px\",\r\n                                color: \"#05ad19\",\r\n                              }}\r\n                            >\r\n                              Email Sent\r\n                            </div>\r\n                          )}\r\n                        </Button>\r\n                      </li>\r\n\r\n                      <Divider />\r\n\r\n                      <li className={classes.li} style={{ marginTop: \"20px\" }}>\r\n                        <span className={classes.infoTitle}>INVOICE # : </span>{\" \"}\r\n                        <span style={{ paddingLeft: \"0px\" }}>\r\n                          {!invoiceLoaded && (\r\n                            <span className={classes.invoiceNumber}> ... </span>\r\n                          )}\r\n                          {invoiceLoaded && invoice && (\r\n                            <span className={classes.invoiceNumber}>\r\n                              {\" \"}\r\n                              {invoice.invoiceNumber}{\" \"}\r\n                            </span>\r\n                          )}\r\n                          {invoiceLoaded && !invoice && (\r\n                            <span\r\n                              className={classes.invoiceNumber}\r\n                              style={{ color: \"red\", fontSize: \"0.9rem\" }}\r\n                            >\r\n                              {\" \"}\r\n                              N/A{\" \"}\r\n                            </span>\r\n                          )}\r\n                        </span>\r\n                        {!(\r\n                          editMode.edit && editMode.person._id === booking._id\r\n                        ) &&\r\n                          !booking.deleted && (\r\n                            <React.Fragment>\r\n                              {invoiceLoaded && !invoice && (\r\n                                <Button\r\n                                  variant=\"outlined\"\r\n                                  color=\"primary\"\r\n                                  className={classes.PayButton}\r\n                                  onClick={() => OpenInvoiceDialog()}\r\n                                >\r\n                                  Issue Invoice\r\n                                </Button>\r\n                              )}\r\n\r\n                              {invoiceLoaded && invoice && (\r\n                                <React.Fragment>\r\n                                  <Button\r\n                                    variant=\"outlined\"\r\n                                    startIcon={<PrintIcon />}\r\n                                    color=\"primary\"\r\n                                    className={classes.printInvoiceButton}\r\n                                    onClick={() => downloadInvoice(invoice._id)}\r\n                                  >\r\n                                    Download Invoice\r\n                                  </Button>\r\n\r\n                                  <Button\r\n                                    variant=\"outlined\"\r\n                                    color=\"secondary\"\r\n                                    className={classes.editInvoiceButton}\r\n                                    onClick={() => OpenInvoiceDialog()}\r\n                                  >\r\n                                    Edit Invoice\r\n                                  </Button>\r\n\r\n                                  <Button\r\n                                    disabled={\r\n                                      !booking.email || booking.email.length < 3\r\n                                    }\r\n                                    startIcon={<SendIcon />}\r\n                                    type=\"button\"\r\n                                    variant=\"outlined\"\r\n                                    color=\"primary\"\r\n                                    onClick={() => {\r\n                                      sendInvoiceEmail(\r\n                                        invoice._id,\r\n                                        booking.email\r\n                                      );\r\n                                    }}\r\n                                    style={{\r\n                                      position: \"relative\",\r\n                                      marginLeft: \"10px\",\r\n                                      paddingRight: \"130px\",\r\n                                      fontSize: \"0.8rem\",\r\n                                    }}\r\n                                  >\r\n                                    Send Invoice By Email\r\n                                    {emailSentInvoice && (\r\n                                      <div\r\n                                        style={{\r\n                                          position: \"absolute\",\r\n                                          right: \"10px\",\r\n                                          top: \"5px\",\r\n                                          color: \"#05ad19\",\r\n                                        }}\r\n                                      >\r\n                                        Email Sent\r\n                                      </div>\r\n                                    )}\r\n                                  </Button>\r\n                                </React.Fragment>\r\n                              )}\r\n                            </React.Fragment>\r\n                          )}\r\n                      </li>\r\n\r\n                      <li className={classes.li} style={{ marginTop: \"20px\" }}>\r\n                        <span className={classes.infoTitle}>TOTAL CHARGES</span>{\" \"}\r\n                        <span\r\n                          style={{ paddingLeft: \"15px\" }}\r\n                          className={\r\n                            !booking.OTCCharges || booking.OTCCharges === 0\r\n                              ? classes.infoDataChargesHigher\r\n                              : classes.infoDataCharges\r\n                          }\r\n                        >{`£${booking.OTCCharges.toLocaleString(\r\n                          \"en-GB\"\r\n                        )}`}</span>\r\n                        {!(\r\n                          editMode.edit && editMode.person._id === booking._id\r\n                        ) &&\r\n                          !booking.paid &&\r\n                          !booking.deleted && (\r\n                            <Button\r\n                              variant=\"outlined\"\r\n                              color=\"secondary\"\r\n                              className={classes.PayButton}\r\n                              onClick={(event) => Pay()}\r\n                            >\r\n                              Pay\r\n                            </Button>\r\n                          )}\r\n                        {!(\r\n                          editMode.edit && editMode.person._id === booking._id\r\n                        ) &&\r\n                          booking.paid && (\r\n                            <React.Fragment>\r\n                              <span className={classes.PayLabel}>\r\n                                {\" \"}\r\n                                <CheckIcon\r\n                                  className={classes.checkIconSmall}\r\n                                />{\" \"}\r\n                                Paid by {booking.paidBy}\r\n                                {booking.paidBy === \"corporate\"\r\n                                  ? ` \"${booking.corporate}\" `\r\n                                  : \"\"}\r\n                              </span>\r\n\r\n                              <Tooltip title=\"Undo Payment\">\r\n                                <IconButton\r\n                                  onClick={() => setOpenUndoPayDialog(true)}\r\n                                >\r\n                                  <UndoIcon style={{ color: \"red\" }} />\r\n                                </IconButton>\r\n                              </Tooltip>\r\n                            </React.Fragment>\r\n                          )}\r\n                      </li>\r\n\r\n                      {/* <li className={classes.li}>\r\n                        <div\r\n                          style={{\r\n                            borderTop: \"1px solid #ddd\",\r\n                            paddingTop: \"10px\",\r\n                          }}\r\n                        >\r\n                          <span className={classes.infoTitle}>\r\n                            TOTAL CHARGES\r\n                          </span>{\" \"}\r\n                          <span\r\n                            className={\r\n                              !booking.OTCCharges || booking.OTCCharges === 0\r\n                                ? classes.infoDataChargesHigher\r\n                                : classes.infoDataCharges\r\n                            }\r\n                          >{`£${(\r\n                            booking.deposit + booking.OTCCharges\r\n                          ).toLocaleString(\"en-GB\")}`}</span>\r\n                        </div>\r\n                      </li> */}\r\n                    </ul>\r\n                  </div>\r\n                </Grid>\r\n              </div>\r\n              <Backdrop\r\n                className={classes.backdrop}\r\n                open={saving || deleting || restoring}\r\n              >\r\n                <CircularProgress color=\"inherit\" />\r\n              </Backdrop>\r\n            </DialogContent>\r\n\r\n            <PayDialog\r\n              booking={selectedBooking}\r\n              open={openPayDialog}\r\n              price={invoice ? invoice.grandTotal : null}\r\n              handleClose={handleClosePayDialog}\r\n            />\r\n\r\n            <InvoiceDialog\r\n              booking={selectedBooking}\r\n              invoice={invoice}\r\n              open={openInvoiceDialog}\r\n              handleClose={handleCloseInvoiceDialog}\r\n            />\r\n          </Dialog>\r\n\r\n          <Dialog\r\n            open={openUndoPayDialog}\r\n            onClose={handleCloseUndoPayDialog}\r\n            aria-labelledby=\"alert-dialog-title\"\r\n            aria-describedby=\"alert-dialog-description\"\r\n          >\r\n            <DialogTitle style={{ color: \"#999\" }} id=\"alert-dialog-title\">\r\n              {\"Undo Payment\"}\r\n            </DialogTitle>\r\n            <DialogContent>\r\n              <DialogContentText\r\n                style={{ color: \"#333\", fontWeight: \"400\" }}\r\n                id=\"alert-dialog-description\"\r\n              >\r\n                Are you sure you want to undo payment for this booking?\r\n              </DialogContentText>\r\n            </DialogContent>\r\n            <DialogActions>\r\n              <Button onClick={handleCloseUndoPayDialog} color=\"default\">\r\n                Back\r\n              </Button>\r\n              <Button onClick={undoPaymentClicked} color=\"secondary\" autoFocus>\r\n                Yes, Undo Payment\r\n              </Button>\r\n            </DialogActions>\r\n          </Dialog>\r\n\r\n          <Dialog\r\n            open={openRefundDialog}\r\n            onClose={handleCloseRefundDialog}\r\n            aria-labelledby=\"alert-dialog-title\"\r\n            aria-describedby=\"alert-dialog-description\"\r\n          >\r\n            <DialogTitle style={{ color: \"#999\" }} id=\"alert-dialog-title\">\r\n              {\"Refund Deposit\"}\r\n            </DialogTitle>\r\n            <DialogContent>\r\n              <DialogContentText\r\n                style={{ color: \"#333\", fontWeight: \"400\" }}\r\n                id=\"alert-dialog-description\"\r\n              >\r\n                Are you sure you want to refund deposit payment for this\r\n                booking?\r\n              </DialogContentText>\r\n            </DialogContent>\r\n            <DialogActions>\r\n              <Button onClick={handleCloseRefundDialog} color=\"default\">\r\n                Back\r\n              </Button>\r\n              <Button\r\n                onClick={refundPaymentClicked}\r\n                color=\"secondary\"\r\n                autoFocus\r\n              >\r\n                Yes, Refund Payment\r\n              </Button>\r\n            </DialogActions>\r\n          </Dialog>\r\n        </React.Fragment>\r\n      )}\r\n    </React.Fragment>\r\n  );\r\n}\r\n","import React, {useEffect, useRef, useState} from 'react';\r\nimport { DataGrid } from '@material-ui/data-grid';\r\nimport BookService from './services/BookService';\r\nimport { Button, Checkbox, CircularProgress, Dialog, DialogContent, DialogTitle, Divider, FormControl, FormControlLabel, Grid, Icon, InputLabel, LinearProgress, Link, makeStyles, MenuItem, Paper, Select, SvgIcon, Switch, TextField, Tooltip } from '@material-ui/core';\r\nimport RefreshIcon from '@material-ui/icons/Refresh';\r\nimport { IconButton } from '@material-ui/core';\r\nimport CheckIcon from '@material-ui/icons/Check';\r\nimport CloseIcon from '@material-ui/icons/Close';\r\nimport GlobalState from './../GlobalState';\r\nimport { getMenuIndex } from './../MenuList';\r\nimport {FormatDateFromString, FormatDateFromStringShortYear} from './DateFormatter';\r\n\r\nimport SearchIcon from '@material-ui/icons/Search';\r\nimport BookingDialog from './BookingDialog';\r\n\r\nimport NewReleasesIcon from '@material-ui/icons/NewReleases';\r\nimport HistoryIcon from '@material-ui/icons/History';\r\nimport TimelineIcon from '@material-ui/icons/Timeline';\r\nimport DescriptionIcon from '@material-ui/icons/Description';\r\nimport AutorenewIcon from '@material-ui/icons/Autorenew';\r\nimport LiveTvIcon from '@material-ui/icons/LiveTv';\r\nimport PlaylistAddCheckIcon from '@material-ui/icons/PlaylistAddCheck';\r\nimport AddCircleOutlineIcon from '@material-ui/icons/AddCircleOutline';\r\nimport DeleteIcon from '@material-ui/icons/Delete';\r\nimport HourglassEmptyIcon from '@material-ui/icons/HourglassEmpty';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { faFileExcel } from \"@fortawesome/free-solid-svg-icons\";\r\nimport Draggable from 'react-draggable';\r\n\r\nimport * as dateformat from 'dateformat';\r\n\r\nimport DateFnsUtils from '@date-io/date-fns';\r\nimport {\r\n  MuiPickersUtilsProvider,\r\n  KeyboardTimePicker,\r\n  KeyboardDatePicker,\r\n} from '@material-ui/pickers';\r\n\r\nimport BusinessIcon from '@material-ui/icons/Business';\r\nimport CreditCardIcon from '@material-ui/icons/CreditCard';\r\nimport LocalAtmIcon from '@material-ui/icons/LocalAtm';\r\n\r\n\r\nimport ReactHTMLTableToExcel from 'react-html-table-to-excel';\r\nimport PriceCalculator from './PriceCalculator';\r\nimport { corporates } from './Corporates';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  title: {\r\n    marginTop: theme.spacing(0),\r\n    marginBottom: theme.spacing(1),\r\n\r\n  },\r\n  \r\n  refreshButton:{\r\n    marginLeft: theme.spacing(2),\r\n  },\r\n\r\n  checkIcon:{\r\n    color: \"green\"\r\n  },\r\n\r\n  closeIcon:{\r\n    color: \"red\"\r\n  },\r\n\r\n  RefLink: {\r\n    cursor: \"pointer\"\r\n  },\r\n\r\n  BookedLabel:{\r\n    backgroundColor: \"#606060\",\r\n    color: \"#fff\",\r\n    width: \"70px\",\r\n    textAlign: \"center\",\r\n  },\r\n\r\n  PatientAttendedLabel:{\r\n    backgroundColor: \"#0066aa\",\r\n    color: \"#fff\",\r\n    width: \"70px\",\r\n    textAlign: \"center\",\r\n  },\r\n\r\n  SampleTakenLabel:{\r\n    backgroundColor: \"#0066cc\",\r\n    color: \"#fff\",\r\n    width: \"70px\",\r\n    textAlign: \"center\",\r\n  },\r\n\r\n  ReportSentLabel:{\r\n    backgroundColor: \"#009900\",\r\n    color: \"#fff\",\r\n    width: \"70px\",\r\n    textAlign: \"center\",\r\n  },\r\n\r\n  ReportCertSentLabel:{\r\n    backgroundColor: \"#009900\",\r\n    color: \"#fff\",\r\n    width: \"70px\",\r\n    textAlign: \"center\",\r\n  },\r\n\r\n  PositiveLabel:{\r\n    backgroundColor: \"red\",\r\n    color: \"#fff\",\r\n    width: \"70px\",\r\n    textAlign: \"center\",\r\n  },\r\n\r\n  HideNowRows: {\r\n    position: \"absolute\",\r\n    top: \"40%\",\r\n    left: \"40%\",\r\n    width: \"600px\",\r\n    height: \"300px\",\r\n    backgroundColor : \"#fafafa\",\r\n    color : \"#111\",\r\n    zIndex: \"1000\",\r\n    display: \"flex\",\r\n    alignItems: \"center\",\r\n    justifyItems: \"center\"\r\n  },\r\n\r\n  ExportToExcelButton:\r\n  {\r\n    // marginBottom : \"20px\",\r\n    color : \"#2f942e\",\r\n    borderColor: \"#2f942e\",\r\n    \"&:hover\": {\r\n      background: \"#fafffa\",\r\n      borderColor: \"#2f942e\",\r\n    },\r\n    textDecoration : \"none !important\", \r\n   \r\n  },\r\n\r\n  ExportToExcelButtonInline:\r\n  {\r\n    // marginBottom : \"20px\",\r\n    color : \"#2f942e\",\r\n    borderColor: \"#2f942e\",\r\n    \"&:hover\": {\r\n      background: \"#fafffa\",\r\n      borderColor: \"#2f942e\",\r\n    },\r\n    textDecoration : \"none !important\", \r\n    cursor: \"pointer\",\r\n    padding: \"10px\"\r\n   \r\n  },\r\n\r\n  table: {\r\n    width: \"100%\",\r\n    border: \"1px solid #ddd\",\r\n    borderCollapse: \"collapse\",\r\n},\r\n\r\nth: {\r\n    border: \"1px solid #ddd\",\r\n    borderCollapse: \"collapse\",\r\n    verticalAlign: \"middle\",\r\n    fontcolor: \"#555\",\r\n    fontWeight: \"400\",\r\n    fontSize: \"15px\",\r\n    paddingTop: \"5px\",\r\n    paddingBottom: \"5px\",\r\n    width: \"14%\",\r\n    paddingLeft: \"5px\",\r\n},\r\n\r\ntd: {\r\n    border: \"1px solid #ddd\",\r\n    borderCollapse: \"collapse\",\r\n    verticalAlign: \"middle\",\r\n    paddingLeft: \"5px\",\r\n},\r\n\r\ntopSelect: {\r\n  margin: theme.spacing(1),\r\n  minWidth: 80,\r\n},\r\n\r\nnotifyIcon:{\r\n  width: \"16px\",\r\n  height: \"16px\",\r\n  borderRadius: \"50%\",\r\n  backgroundColor : \"rgb(220, 0, 78)\",\r\n  marginLeft: \"10px\"\r\n}\r\n\r\n}));\r\n\r\nconst getTableTitle = (str) =>{\r\n\r\n  if (str === 'today')\r\n  {\r\n    return `Today's Bookings`;\r\n  }else if (str === 'old')\r\n  {\r\n    return `Old Bookings`;\r\n  }else if (str === 'future')\r\n  {\r\n    return `Future Bookings`;\r\n  }else if (str === 'recent')\r\n  {\r\n    return `Recent Bookings`;\r\n  }else if (str === 'live')\r\n  {\r\n    return `Live Bookings`;\r\n  }else if (str === 'completed')\r\n  {\r\n    return `Completed Bookings`;\r\n  }else if (str === 'positive')\r\n  {\r\n    return `Positive Results`;\r\n  }else if (str === 'deleted')\r\n  {\r\n    return `Deleted Records`;\r\n  }else if (str === 'late')\r\n  {\r\n    return `40 Hours Late`;\r\n  }\r\n  \r\n  else\r\n  {\r\n    return `All Bookings`;\r\n  }\r\n\r\n}\r\n\r\nconst getTableIcon = (str) =>{\r\n\r\n  if (str === 'today')\r\n  {\r\n    return <NewReleasesIcon style={{fontSize:\"2.2rem\"}} />;\r\n  }else if (str === 'old')\r\n  {\r\n    return <HistoryIcon style={{fontSize:\"2.2rem\"}} />;\r\n  }else if (str === 'future')\r\n  {\r\n    return <TimelineIcon style={{fontSize:\"2.2rem\"}} />;\r\n  }else if (str === 'recent')\r\n  {\r\n    return <AutorenewIcon style={{fontSize:\"2.2rem\"}} />;\r\n  }else if (str === 'live')\r\n  {\r\n    return <LiveTvIcon style={{fontSize:\"2.2rem\"}} />;\r\n  }else if (str === 'completed')\r\n  {\r\n    return  <PlaylistAddCheckIcon style={{fontSize:\"2.2rem\"}} />;\r\n  }else if (str === 'positive')\r\n  {\r\n    return <AddCircleOutlineIcon style={{fontSize:\"2.2rem\"}} />\r\n  }else if (str === 'deleted')\r\n  {\r\n    return <DeleteIcon style={{fontSize:\"2.2rem\"}} />;\r\n  }else if (str === 'late')\r\n  {\r\n    return <HourglassEmptyIcon style={{fontSize:\"2.2rem\"}} />;\r\n  }\r\n  \r\n  else\r\n  {\r\n    return <DescriptionIcon style={{fontSize:\"2.2rem\"}} />;\r\n  }\r\n\r\n}\r\n\r\nfunction PaperComponent(props) {\r\n  return (\r\n    <Draggable handle=\"#draggable-dialog-title\" cancel={'[class*=\"MuiDialogContent-root\"]'}>\r\n      <Paper {...props} />\r\n    </Draggable>\r\n  );\r\n}\r\n\r\nexport default function BookingTable(props) {\r\n  \r\n  const classes = useStyles();\r\n\r\n  const [topCount, setTopCount] = React.useState(25)\r\n  const topCountChanged = (event) =>\r\n  {\r\n    setTopCount(event.target.value)\r\n    loadData(event.target.value)\r\n  }\r\n  \r\n\r\n  const [openDialogExcel, setOpenDialogExcel] = useState(false);\r\n  const handleCloseDialogExcel = () =>\r\n  {\r\n    setCorporate(corporates[0]);\r\n    setJustCorporate(false);\r\n    setOpenDialogExcel(false);\r\n  }\r\n\r\n\r\n  const [fromDate, setFromDate] = React.useState(new Date(new Date().getTime() - 7 * 24 * 60 * 60 * 1000 ));\r\n  const handleFromDateChange = (date) => {\r\n    setFromDate(date);\r\n    setFromDateStr(dateformat(date,'yyyy-mm-dd'));\r\n  };\r\n\r\n  const [untilDate, setUntilDate] = React.useState(new Date(new Date().getTime() - 1 * 24 * 60 * 60 * 1000 ));\r\n  const handleUntilDateChange = (date) => {\r\n    setUntilDate(date);\r\n    seUntilDateStr(dateformat(date,'yyyy-mm-dd'));\r\n  };\r\n\r\n  const [fromDateStr, setFromDateStr] = useState(dateformat(new Date(new Date().getTime() - 7 * 24 * 60 * 60 * 1000 ), 'yyyy-mm-dd'));\r\n  const [untilDateStr, seUntilDateStr] = useState(dateformat(new Date(new Date().getTime() - 1 * 24 * 60 * 60 * 1000 ), 'yyyy-mm-dd'));\r\n\r\n  const [justCorporate, setJustCorporate] = useState(false);\r\n\r\n  const[chkDate, setChkDate] = useState(true);\r\n  const[chkForename, setChkForename] = useState(true);\r\n  const[chkSurname, setChkSurname] = useState(true);\r\n  const[chkDOB, setChkDOB] = useState(true);\r\n  const[chkEmail, setChkEmail] = useState(true);\r\n  const[chkTel, setChkTel] = useState(true);\r\n  const[chkCertificate, setChkCertidicate] = useState(true);\r\n  const[chkAntiBodyTest, setChkAntiBodyTest] = useState(true);\r\n  const[chkextRef, setChkExtRef] = useState(true);\r\n  const[chkPrice, setChkPrice] = useState(true);\r\n\r\n  const justCorporateChanged = (event) =>\r\n  {\r\n    setJustCorporate(event.target.checked);\r\n  }\r\n  \r\n\r\n  const chkDateChanged = (event) =>\r\n  {\r\n    setChkDate(event.target.checked);\r\n  }\r\n\r\n  const chkForenameChanged = (event) =>\r\n  {\r\n    setChkForename(event.target.checked);\r\n  }\r\n\r\n  const chkSurnameChanged = (event) =>\r\n  {\r\n    setChkSurname(event.target.checked);\r\n  }\r\n\r\n  const chkDOBChanged = (event) =>\r\n  {\r\n    setChkDOB(event.target.checked);\r\n  }\r\n\r\n  const chkEmailChanged = (event) =>\r\n  {\r\n    setChkEmail(event.target.checked);\r\n  }\r\n\r\n  const chkTelChanged = (event) =>\r\n  {\r\n    setChkTel(event.target.checked);\r\n  }\r\n\r\n  const chkCertificateChanged = (event) =>\r\n  {\r\n    setChkCertidicate(event.target.checked);\r\n  }\r\n\r\n  const chkAntiBodyTestChanged = (event) =>\r\n  {\r\n    setChkAntiBodyTest(event.target.checked);\r\n  }\r\n\r\n  const chkextRefChanged = (event) =>\r\n  {\r\n    setChkExtRef(event.target.checked);\r\n  }\r\n\r\n  const chkPriceChanged = (event) =>\r\n  {\r\n    setChkPrice(event.target.checked);\r\n  }\r\n\r\n\r\n\r\n  var columns = [];\r\n\r\n  if (props.date === 'recent')\r\n  {\r\n    columns = [\r\n      // { field: 'id', headerName: '#', width: 70 },\r\n  \r\n      {field: '_id', headerName:' ', width: 70, renderCell: (params) =>{\r\n          return (\r\n\r\n           <React.Fragment>\r\n\r\n                <Button \r\n                        color=\"primary\"\r\n                        onClick = {event => openDetailsDialog(event, params.value)}\r\n                > \r\n            \r\n            <SearchIcon/> \r\n            \r\n            </Button>\r\n\r\n           </React.Fragment>\r\n\r\n          \r\n  \r\n          ); \r\n      \r\n        }\r\n      },\r\n\r\n      { field: 'paid', headerName: 'Paid', align: 'center' , width: 90, renderCell: (params) => { \r\n        if (!params.value)\r\n        {\r\n           return ( \r\n              <React.Fragment>                    \r\n                    <CloseIcon className={classes.closeIcon}/>                        \r\n              </React.Fragment>\r\n           );\r\n        }\r\n        else\r\n        {\r\n           if (params.getValue('paidBy') === 'credit card')\r\n           {\r\n             return ( <CreditCardIcon className={classes.checkIcon}/> );\r\n           }\r\n           else if (params.getValue('paidBy') === 'cash')\r\n           {\r\n             return ( <LocalAtmIcon className={classes.checkIcon}/> );\r\n           }\r\n           else if (params.getValue('paidBy') === 'corporate')\r\n           {\r\n             return ( <BusinessIcon className={classes.checkIcon}/> );\r\n           }\r\n           else\r\n           {\r\n             return '';  \r\n           }\r\n        }\r\n  }\r\n },\r\n\r\n\r\n      { field: 'timeStamp', headerName: 'TimeStamp', width: 200, valueFormatter: (params) => { \r\n        return formatTimeStamp(params.value);\r\n        }\r\n      },\r\n  \r\n      { field: 'bookingDate', headerName: 'B Date', width: 110, valueFormatter: (params) => { \r\n              return FormatDateFromString(params.value);\r\n          }\r\n       },\r\n      { field: 'bookingTimeNormalized', headerName: 'B Time', width: 105 , valueGetter: (params) => {\r\n        return params.getValue('bookingTime');\r\n      }},\r\n      { field: 'status', headerName: 'Status', width: 100, renderCell: (params) =>{\r\n          if (params.value === 'booked')\r\n          {\r\n            return (\r\n              <span className={classes.BookedLabel}>  BM </span>\r\n            );\r\n        \r\n          }else if (params.value === 'patient_attended')\r\n          {\r\n            return (\r\n              <span  className={classes.PatientAttendedLabel}> PA </span>\r\n            );\r\n          }\r\n          else{\r\n            return 'Unknown';\r\n          }\r\n        }\r\n      },\r\n      { field: 'bookingRef', headerName: 'Ref No.', width: 120 , renderCell: (params) =>{\r\n        return (\r\n          <Tooltip title=\"Go Find By Ref\" placement=\"right\">\r\n              <Link className={classes.RefLink}\r\n              //  onClick={\r\n              //   () => {\r\n              //     console.log(params.value);\r\n  \r\n              //     setState(state => ({...state, currentMenuIndex: getMenuIndex(`pcr` , `findByRef`)}));\r\n              //     setState(state => ({...state, ref : params.value}));\r\n              //     setState(state => ({...state, refError : false})); \r\n              //     setState(state => ({...state, foundRecords : []}));\r\n              //     setState(state => ({...state, findRecords : !state.findRecords}));\r\n              //   }\r\n              // }\r\n              \r\n              >\r\n                {params.value}\r\n              </Link>\r\n          </Tooltip>\r\n  \r\n        );\r\n      }},\r\n      { field: 'fullname', headerName: 'Fullname', width: 250 },\r\n      { field: 'email', headerName: 'Email', width: 200 },\r\n      { field: 'phone', headerName: 'Tel', width: 150 },\r\n      { field: 'notes', headerName: 'Notes', width: 500 },\r\n    \r\n    ];\r\n\r\n  }\r\n  else\r\n  {\r\n    columns = [\r\n      // { field: 'id', headerName: '#', width: 70 },\r\n  \r\n      {field: '_id', headerName:' ', width: 70, renderCell: (params) =>{\r\n          return (\r\n            <React.Fragment>\r\n\r\n                <Button \r\n                        color=\"primary\"\r\n                        onClick = {event => openDetailsDialog(event, params.value)}\r\n                > \r\n            \r\n            <SearchIcon/> \r\n            \r\n            </Button>\r\n\r\n           </React.Fragment>\r\n  \r\n          ); \r\n      \r\n        }\r\n      },\r\n\r\n      { field: 'paid', headerName: 'Paid', align: 'center' , width: 90, renderCell: (params) => { \r\n               if (!params.value)\r\n               {\r\n                  return ( \r\n                    <React.Fragment>\r\n                                <CloseIcon className={classes.closeIcon}/> \r\n                                {parseInt(params.getValue('deposit')) > 0 && props.date === 'deleted' && (\r\n                                      <span className={classes.notifyIcon}>&nbsp;</span>\r\n                                )}\r\n\r\n                               \r\n                    </React.Fragment>\r\n                     \r\n                        \r\n                  \r\n                  \r\n                  );\r\n               }\r\n               else\r\n               {\r\n                  if (params.getValue('paidBy') === 'credit card')\r\n                  {\r\n                    return ( <CreditCardIcon className={classes.checkIcon}/> );\r\n                  }\r\n                  else if (params.getValue('paidBy') === 'cash')\r\n                  {\r\n                    return ( <LocalAtmIcon className={classes.checkIcon}/> );\r\n                  }\r\n                  else if (params.getValue('paidBy') === 'corporate')\r\n                  {\r\n                    return ( <BusinessIcon className={classes.checkIcon}/> );\r\n                  }\r\n                  else\r\n                  {\r\n                    return '';  \r\n                  }\r\n               }\r\n         }\r\n        },\r\n        { field: 'bookingDate', headerName: 'B Date', width: 110, valueFormatter: (params) => { \r\n          return FormatDateFromString(params.value);\r\n      }\r\n   },\r\n  { field: 'bookingTimeNormalized', headerName: 'B Time', width: 105 , valueGetter: (params) => {\r\n    return params.getValue('bookingTime');\r\n  }},\r\n  { field: 'status', headerName: 'Status', width: 100, renderCell: (params) =>{\r\n      if (params.value === 'booked')\r\n      {\r\n        return (\r\n          <span className={classes.BookedLabel}>  BM </span>\r\n        );\r\n    \r\n      }else if (params.value === 'patient_attended')\r\n      {\r\n        return (\r\n          <span  className={classes.PatientAttendedLabel}> PA </span>\r\n        );\r\n      }\r\n      else{\r\n        return 'Unknown';\r\n      }\r\n    }\r\n  },\r\n  { field: 'bookingRef', headerName: 'Ref No.', width: 120 , renderCell: (params) =>{\r\n    return (\r\n      <Tooltip title=\"Go Find By Ref\" placement=\"right\">\r\n          <Link className={classes.RefLink}\r\n          //  onClick={\r\n          //   () => {\r\n          //     console.log(params.value);\r\n\r\n          //     setState(state => ({...state, currentMenuIndex: getMenuIndex(`pcr` , `findByRef`)}));\r\n          //     setState(state => ({...state, ref : params.value}));\r\n          //     setState(state => ({...state, refError : false})); \r\n          //     setState(state => ({...state, foundRecords : []}));\r\n          //     setState(state => ({...state, findRecords : !state.findRecords}));\r\n          //   }\r\n          // }\r\n          \r\n          >\r\n            {params.value}\r\n          </Link>\r\n      </Tooltip>\r\n\r\n    );\r\n  }},\r\n  { field: 'fullname', headerName: 'Fullname', width: 250 },\r\n  { field: 'email', headerName: 'Email', width: 200 },\r\n  { field: 'phone', headerName: 'Tel', width: 150 },\r\n  { field: 'notes', headerName: 'Notes', width: 500 },\r\n\r\n    \r\n    ];\r\n  \r\n\r\n  }\r\n\r\n\r\n\r\n  const [state, setState] = React.useContext(GlobalState);  \r\n\r\n  const [data, setData] = React.useState({bookings: [] , cachedBookings: [], isFetching : true});\r\n\r\n  const [selectedRow, setSelectedRow] = React.useState(null);\r\n\r\n  const [selectedBooking, setSelectedBooking] = React.useState(null);\r\n  const [seeDetailsDialogOpen, setSeeDetailsDialogOpen] = React.useState(false);\r\n\r\n  const [corporate, setCorporate] = useState(corporates[0]);\r\n  const corporateChanged = (event) =>\r\n  {\r\n    setCorporate(event.target.value);\r\n  }\r\n  \r\n\r\n  const [filter,setFilter] = React.useState('');\r\n\r\n\r\n  const lastPromise = useRef();\r\n\r\n  const formatTimeStamp = (timeStamp) =>\r\n  {\r\n    const todayStr = dateformat(new Date(), 'yyyy-mm-dd');\r\n    const timeStampStr = dateformat(timeStamp, 'yyyy-mm-dd');\r\n    if (todayStr === timeStampStr)\r\n    {\r\n      return dateformat(timeStamp, \"'Today', h:MM:ss TT\");\r\n    }\r\n    else\r\n    {\r\n       return dateformat(timeStamp, \"mmm dS, h:MM:ss TT\");\r\n    }\r\n  }\r\n\r\n  const loadData = (top) =>\r\n  {\r\n    var api = BookService.getAllBookings;\r\n    if (props.date === 'today')\r\n    {\r\n      api = BookService.getTodayBookings;\r\n    }else if (props.date === 'old')\r\n    {\r\n      api = BookService.getOldBookings;\r\n    }else if (props.date === 'future')\r\n    {\r\n      api = BookService.getFutureBookings;\r\n    }else if (props.date === 'recent')\r\n    {\r\n      api = BookService.getRecentBookingsAll;\r\n    }\r\n    else if (props.date === 'deleted')\r\n    {\r\n      api = BookService.getDeletedBookings;\r\n    }\r\n     \r\n    setData({bookings: [], cachedBookings: [], isFetching: true});\r\n   \r\n    // console.log(props)\r\n\r\n    const currentPromise = api(top).then( (res) =>{\r\n      // console.log(res)\r\n      for (var i=0; i < res.data.length; i++)\r\n      {\r\n        res.data[i] = {...res.data[i], id : i + 1}\r\n      }  \r\n      setData({bookings: [...res.data], cachedBookings: [...res.data], isFetching: false});\r\n      // return res.data;\r\n    }).catch(err => {\r\n      console.error(err)\r\n    })\r\n\r\n    // lastPromise.current = currentPromise;\r\n\r\n    // currentPromise.then(\r\n    //   result => {\r\n    //     if (currentPromise === lastPromise.current) {\r\n    //       setData({bookings: [...result], cachedBookings: [...result], isFetching: false});\r\n    //       setPage(1);\r\n    //     }\r\n    //   },\r\n    //   e => {\r\n    //     if (currentPromise === lastPromise.current) {\r\n    //         console.error(e);\r\n    //         setData({bookings: data.bookings, cachedBookings: data.cachedBookings, isFetching: false});\r\n    //     }\r\n    //   });\r\n\r\n  }\r\n\r\n  useEffect( () => {\r\n            setTopCount(25)\r\n            loadData(25)\r\n        },\r\n        [props.date]);\r\n\r\n\r\n\r\n\r\n  useEffect( () => {\r\n\r\n        if (filter && filter.trim().length > 0)\r\n        {\r\n          var filteredData = data.cachedBookings.filter( (element) => \r\n\r\n             (element.fullname.toLowerCase().indexOf(filter.toLowerCase()) >= 0)\r\n             || (element.service.toLowerCase().indexOf(filter.toLowerCase()) >= 0)\r\n               \r\n              \r\n          );\r\n  \r\n  \r\n          setData({bookings: [...filteredData], cachedBookings: data.cachedBookings, isFetching: false});\r\n        }else\r\n        {\r\n          setData({bookings: [...data.cachedBookings], cachedBookings: data.cachedBookings, isFetching: false});\r\n        }\r\n      },\r\n      [filter]);\r\n\r\n  \r\n      useEffect(() => {\r\n\r\n       loadData(topCount)\r\n    \r\n      }, [state.bookingDialogDataChanged]);    \r\n\r\n\r\n  const handleCloseSeeDetaisDialog = () =>\r\n  {\r\n    setSelectedBooking(null);\r\n    setSeeDetailsDialogOpen(false);\r\n  }    \r\n  \r\n  const openDetailsDialog = (event, id) =>\r\n  {\r\n    const booking = data.bookings.find(element => element._id === id);\r\n    setSelectedBooking(booking);\r\n    setSeeDetailsDialogOpen(true);\r\n\r\n  }\r\n\r\n  const refreshClicked = (event) =>{\r\n    setFilter('');\r\n    loadData(topCount)\r\n  }\r\n\r\n  const filterChanged = (event) =>{\r\n    setFilter(event.target.value);\r\n  }\r\n\r\n  const handleSelectionChanged = (newSelection) =>\r\n  {\r\n    if (newSelection.length > 0){\r\n      setSelectedRow(newSelection.rows[0]);\r\n    }\r\n    \r\n  }\r\n\r\n  const [page, setPage] = React.useState(1);\r\n\r\n  const handleExcelButtonClicked = (event) =>\r\n  {\r\n    setOpenDialogExcel(true);\r\n  }\r\n\r\n  const isTopSelectHidden = (date)=>\r\n  {\r\n    return date === 'live' || date === 'positive' || date === 'late' || date === 'today'\r\n  }\r\n\r\n\r\n  return (\r\n    <React.Fragment>\r\n      {data.isFetching && (\r\n        <div style={{ width: \"100%\", paddingTop: \"3px\" }}>\r\n          <LinearProgress color=\"primary\" />\r\n        </div>\r\n      )}\r\n      <Grid\r\n        container\r\n        direction=\"row\"\r\n        justify=\"space-between\"\r\n        alignItems=\"flex-end\"\r\n      >\r\n        <Grid item md={4}>\r\n          <div style={{ textAlign: \"left\", paddingLeft: \"10px\" }}>\r\n            <Grid\r\n              container\r\n              direction=\"row\"\r\n              justify=\"flex-start\"\r\n              alignItems=\"center\"\r\n            >\r\n              <Grid item>\r\n                <span style={{ paddingRight: \"15px\", color: \"#555\" }}>\r\n                  {\" \"}\r\n                  {getTableIcon(props.date)}{\" \"}\r\n                </span>\r\n              </Grid>\r\n              <Grid item>\r\n                <span\r\n                  style={{\r\n                    fontSize: \"1.4rem\",\r\n                    fontWeight: \"600\",\r\n                    color: \"#444\",\r\n                  }}\r\n                >\r\n                  {\" \"}\r\n                  {getTableTitle(props.date)}{\" \"}\r\n                </span>\r\n              </Grid>\r\n              <Grid item>\r\n                <Tooltip title=\"Refresh\" placement=\"right\">\r\n                  <IconButton\r\n                    color=\"primary\"\r\n                    className={classes.refreshButton}\r\n                    onClick={refreshClicked}\r\n                  >\r\n                    <RefreshIcon />\r\n                  </IconButton>\r\n                </Tooltip>\r\n              </Grid>\r\n            </Grid>\r\n          </div>\r\n        </Grid>\r\n\r\n        <Grid item md={3}>\r\n          {props.date === \"completed\" && state.showCreateExcel && (\r\n            <div style={{ paddingBottom: \"5px\" }}>\r\n              <Button\r\n                className={classes.ExportToExcelButton}\r\n                variant=\"outlined\"\r\n                color=\"default\"\r\n                onClick={handleExcelButtonClicked}\r\n                startIcon={\r\n                  <FontAwesomeIcon\r\n                    style={{ color: \"#009900\" }}\r\n                    icon={faFileExcel}\r\n                  />\r\n                }\r\n              >\r\n                export to excel\r\n              </Button>\r\n            </div>\r\n          )}\r\n        </Grid>\r\n\r\n        {data.isFetching && <div className={classes.HideNowRows}></div>}\r\n\r\n        <Grid item md={3}>\r\n          <TextField\r\n            variant=\"standard\"\r\n            value={filter}\r\n            onChange={filterChanged}\r\n            margin=\"normal\"\r\n            size=\"small\"\r\n            id=\"filter\"\r\n            label=\"Filter\"\r\n            name=\"filter\"\r\n            autoComplete=\"off\"\r\n          />\r\n        </Grid>\r\n\r\n        <Grid item hidden={isTopSelectHidden(props.date)}>\r\n          <FormControl className={classes.topSelect}>\r\n            <InputLabel id=\"top-select-label\">Limit</InputLabel>\r\n            <Select\r\n              labelId=\"top-select-label\"\r\n              id=\"top-simple-select\"\r\n              value={topCount}\r\n              onChange={topCountChanged}\r\n            >\r\n              <MenuItem value={25}>25</MenuItem>\r\n              <MenuItem value={50}>50</MenuItem>\r\n              <MenuItem value={100}>100</MenuItem>\r\n              <MenuItem value={500}>500</MenuItem>\r\n              <MenuItem value={1000}>1000</MenuItem>\r\n              <MenuItem value={10000}>ALL</MenuItem>\r\n            </Select>\r\n          </FormControl>\r\n\r\n          {/* <Button onClick={() => loadData(true)}> Show all records </Button> */}\r\n        </Grid>\r\n      </Grid>\r\n\r\n      <div style={{ height: 700, width: \"100%\" }}>\r\n        <DataGrid\r\n          rows={data.bookings}\r\n          columns={columns}\r\n          autoPageSize\r\n          page={page}\r\n          onPageChange={(params) => {\r\n            setPage(params.page);\r\n          }}\r\n          onSelectionChange={handleSelectionChanged}\r\n        />\r\n      </div>\r\n\r\n      <BookingDialog\r\n        booking={selectedBooking}\r\n        open={seeDetailsDialogOpen}\r\n        onClose={handleCloseSeeDetaisDialog}\r\n      />\r\n\r\n      {data.bookings && data.bookings.length > 0 && (\r\n        <Dialog\r\n          maxWidth=\"lg\"\r\n          open={openDialogExcel}\r\n          onClose={handleCloseDialogExcel}\r\n          PaperComponent={PaperComponent}\r\n          aria-labelledby=\"form-dialog-title\"\r\n        >\r\n          <DialogTitle id=\"draggable-dialog-title\">\r\n            <Grid\r\n              container\r\n              spacing={2}\r\n              direction=\"row\"\r\n              justify=\"center\"\r\n              alignItems=\"center\"\r\n            >\r\n              <Grid item>\r\n                <FontAwesomeIcon\r\n                  style={{ color: \"#2f942e\", fontSize: \"2rem\" }}\r\n                  icon={faFileExcel}\r\n                />\r\n              </Grid>\r\n\r\n              <Grid item>\r\n                <div\r\n                  style={{\r\n                    color: \"#2f942e\",\r\n                    paddingBottom: \"5px\",\r\n                    fontWeight: \"800\",\r\n                  }}\r\n                >\r\n                  {\" \"}\r\n                  Export to EXCEL{\" \"}\r\n                </div>\r\n              </Grid>\r\n            </Grid>\r\n\r\n            <Divider />\r\n          </DialogTitle>\r\n          <DialogContent>\r\n            <div\r\n              style={{\r\n                minHeight: \"600px\",\r\n                maxHeight: \"600px\",\r\n                minWidth: \"1200px\",\r\n                maxWidth: \"1200px\",\r\n              }}\r\n            >\r\n              <div>\r\n                <Grid row container justify=\"center\" spacing={3}>\r\n                  <Grid item>\r\n                    <FormControlLabel\r\n                      control={\r\n                        <Switch\r\n                          checked={justCorporate}\r\n                          onChange={justCorporateChanged}\r\n                          name=\"justCorporate\"\r\n                        />\r\n                      }\r\n                      label=\"Just Corporate Records\"\r\n                    />\r\n                  </Grid>\r\n\r\n                  {justCorporate && (\r\n                    <Grid item>\r\n                      <FormControl\r\n                        style={{ marginTop: \"0px\" }}\r\n                        className={classes.formControl}\r\n                      >\r\n                        <Select\r\n                          labelId=\"select-corporate\"\r\n                          id=\"select-corporate-id\"\r\n                          value={corporate}\r\n                          onChange={corporateChanged}\r\n                        >\r\n                          {corporates.map((element) => (\r\n                            <MenuItem value={element}>{`${element}`}</MenuItem>\r\n                          ))}\r\n                        </Select>\r\n                      </FormControl>\r\n                    </Grid>\r\n                  )}\r\n                </Grid>\r\n\r\n                <MuiPickersUtilsProvider utils={DateFnsUtils}>\r\n                  <Grid row container justify=\"center\" spacing={3}>\r\n                    <Grid item>\r\n                      <KeyboardDatePicker\r\n                        disableToolbar\r\n                        variant=\"inline\"\r\n                        format=\"dd/MM/yyyy\"\r\n                        margin=\"normal\"\r\n                        id=\"date-picker-from\"\r\n                        label=\"From\"\r\n                        value={fromDate}\r\n                        onChange={handleFromDateChange}\r\n                        KeyboardButtonProps={{\r\n                          \"aria-label\": \"change date\",\r\n                        }}\r\n                      />\r\n                    </Grid>\r\n\r\n                    <Grid item>\r\n                      <KeyboardDatePicker\r\n                        disableToolbar\r\n                        variant=\"inline\"\r\n                        format=\"dd/MM/yyyy\"\r\n                        margin=\"normal\"\r\n                        id=\"date-picker-until\"\r\n                        label=\"Until\"\r\n                        value={untilDate}\r\n                        onChange={handleUntilDateChange}\r\n                        KeyboardButtonProps={{\r\n                          \"aria-label\": \"change date\",\r\n                        }}\r\n                      />\r\n                    </Grid>\r\n\r\n                    <Grid item>\r\n                      <div style={{ paddingTop: \"30px\", marginLeft: \"20px\" }}>\r\n                        <ReactHTMLTableToExcel\r\n                          id=\"test-table-xls-button\"\r\n                          className={classes.ExportToExcelButtonInline}\r\n                          table=\"table-to-xls\"\r\n                          filename={`PCR.Report.${fromDateStr}.${untilDateStr}`}\r\n                          sheet=\"PCR-Report\"\r\n                          buttonText=\"Download as XLS\"\r\n                        />\r\n                      </div>\r\n                    </Grid>\r\n                  </Grid>\r\n                </MuiPickersUtilsProvider>\r\n              </div>\r\n\r\n              <div>\r\n                <Grid container spacing={3}>\r\n                  <Grid item xs>\r\n                    <FormControlLabel\r\n                      control={\r\n                        <Checkbox\r\n                          checked={chkDate}\r\n                          onChange={chkDateChanged}\r\n                          name=\"chkDate\"\r\n                        />\r\n                      }\r\n                      label=\"Date\"\r\n                    />\r\n                  </Grid>\r\n                  <Grid item xs>\r\n                    <FormControlLabel\r\n                      control={\r\n                        <Checkbox\r\n                          checked={chkForename}\r\n                          onChange={chkForenameChanged}\r\n                          name=\"chkForename\"\r\n                        />\r\n                      }\r\n                      label=\"Forename\"\r\n                    />\r\n                  </Grid>\r\n                  <Grid item xs>\r\n                    <FormControlLabel\r\n                      control={\r\n                        <Checkbox\r\n                          checked={chkSurname}\r\n                          onChange={chkSurnameChanged}\r\n                          name=\"chkSurname\"\r\n                        />\r\n                      }\r\n                      label=\"Surname\"\r\n                    />\r\n                  </Grid>\r\n                  <Grid item xs>\r\n                    <FormControlLabel\r\n                      control={\r\n                        <Checkbox\r\n                          checked={chkDOB}\r\n                          onChange={chkDOBChanged}\r\n                          name=\"chkDOB\"\r\n                        />\r\n                      }\r\n                      label=\"D.O.B\"\r\n                    />\r\n                  </Grid>\r\n                  <Grid item xs>\r\n                    <FormControlLabel\r\n                      control={\r\n                        <Checkbox\r\n                          checked={chkEmail}\r\n                          onChange={chkEmailChanged}\r\n                          name=\"chkEmail\"\r\n                        />\r\n                      }\r\n                      label=\"Email\"\r\n                    />\r\n                  </Grid>\r\n                  <Grid item xs>\r\n                    <FormControlLabel\r\n                      control={\r\n                        <Checkbox\r\n                          checked={chkTel}\r\n                          onChange={chkTelChanged}\r\n                          name=\"chkTel\"\r\n                        />\r\n                      }\r\n                      label=\"Tel\"\r\n                    />\r\n                  </Grid>\r\n                  <Grid item xs>\r\n                    <FormControlLabel\r\n                      control={\r\n                        <Checkbox\r\n                          checked={chkCertificate}\r\n                          onChange={chkCertificateChanged}\r\n                          name=\"chkCertificate\"\r\n                        />\r\n                      }\r\n                      label=\"Certificate\"\r\n                    />\r\n                  </Grid>\r\n                  <Grid item xs>\r\n                    <FormControlLabel\r\n                      control={\r\n                        <Checkbox\r\n                          checked={chkAntiBodyTest}\r\n                          onChange={chkAntiBodyTestChanged}\r\n                          name=\"chkAntiBodyTest\"\r\n                        />\r\n                      }\r\n                      label=\"AntiBodyTest\"\r\n                    />\r\n                  </Grid>\r\n                  <Grid item xs>\r\n                    <FormControlLabel\r\n                      control={\r\n                        <Checkbox\r\n                          checked={chkextRef}\r\n                          onChange={chkextRefChanged}\r\n                          name=\"chkextRef\"\r\n                        />\r\n                      }\r\n                      label=\"Lab No.\"\r\n                    />\r\n                  </Grid>\r\n                  <Grid item xs>\r\n                    <FormControlLabel\r\n                      control={\r\n                        <Checkbox\r\n                          checked={chkPrice}\r\n                          onChange={chkPriceChanged}\r\n                          name=\"chkPrice\"\r\n                        />\r\n                      }\r\n                      label=\"Price\"\r\n                    />\r\n                  </Grid>\r\n                </Grid>\r\n              </div>\r\n\r\n              <div style={{ width: \"100%\", paddingTop: \"20px\" }}>\r\n                <table className={classes.table} id=\"table-to-xls\">\r\n                  <tr>\r\n                    {chkDate && <th className={classes.th}>Date</th>}\r\n                    {chkForename && <th className={classes.th}>Forename</th>}\r\n                    {chkSurname && <th className={classes.th}>Surename</th>}\r\n                    {chkDOB && <th className={classes.th}>D.O.B</th>}\r\n                    {chkEmail && <th className={classes.th}>Email</th>}\r\n                    {chkTel && <th className={classes.th}>Tel</th>}\r\n                    {chkCertificate && (\r\n                      <th className={classes.th}>Certificate</th>\r\n                    )}\r\n                    {chkAntiBodyTest && (\r\n                      <th className={classes.th}>AntiBodyTest</th>\r\n                    )}\r\n                    {chkextRef && <th className={classes.th}>Lab No.</th>}\r\n                    {chkPrice && <th className={classes.th}>Price (£) </th>}\r\n                  </tr>\r\n\r\n                  {data.bookings\r\n                    .filter((booking) => {\r\n                      if (!justCorporate) {\r\n                        return (\r\n                          booking.bookingDate >= fromDateStr &&\r\n                          booking.bookingDate <= untilDateStr\r\n                        );\r\n                      } else {\r\n                        return (\r\n                          booking.bookingDate >= fromDateStr &&\r\n                          booking.bookingDate <= untilDateStr &&\r\n                          booking.paid &&\r\n                          booking.paidBy === \"corporate\" &&\r\n                          booking.corporate === corporate\r\n                        );\r\n                      }\r\n                    })\r\n\r\n                    .map((booking) => (\r\n                      <tr>\r\n                        {chkDate && (\r\n                          <td className={classes.td}>\r\n                            {FormatDateFromString(booking.bookingDate)}\r\n                          </td>\r\n                        )}\r\n                        {chkForename && (\r\n                          <td className={classes.td}>\r\n                            {booking.forenameCapital}\r\n                          </td>\r\n                        )}\r\n                        {chkSurname && (\r\n                          <td className={classes.td}>\r\n                            {booking.surnameCapital}\r\n                          </td>\r\n                        )}\r\n                        {chkDOB && (\r\n                          <th className={classes.th}>\r\n                            {/* {FormatDateFromString(booking.birthDate)} */}\r\n                          </th>\r\n                        )}\r\n                        {chkEmail && (\r\n                          <td className={classes.td}>{booking.email}</td>\r\n                        )}\r\n                        {chkTel && (\r\n                          <td className={classes.td}>{booking.phone}</td>\r\n                        )}\r\n                        {chkCertificate && (\r\n                          <td className={classes.td}>\r\n                            {booking.certificate ? \"YES\" : \"NO\"}\r\n                          </td>\r\n                        )}\r\n                        {chkAntiBodyTest && (\r\n                          <td className={classes.td}>\r\n                            {booking.antiBodyTest ? \"YES\" : \"NO\"}\r\n                          </td>\r\n                        )}\r\n                        {chkextRef && (\r\n                          <td className={classes.td}>{booking.extRef}</td>\r\n                        )}\r\n                        {chkPrice && (\r\n                          <td className={classes.td}>\r\n                            {PriceCalculator.calculatePrice(booking)}\r\n                          </td>\r\n                        )}\r\n                      </tr>\r\n                    ))}\r\n                </table>\r\n              </div>\r\n            </div>\r\n          </DialogContent>\r\n        </Dialog>\r\n      )}\r\n    </React.Fragment>\r\n  );\r\n} ","import React, { useEffect } from 'react';\r\nimport { useTheme } from '@material-ui/core/styles';\r\nimport { LineChart, Line, XAxis, YAxis, Label, ResponsiveContainer } from 'recharts';\r\nimport Title from './Title';\r\nimport dateformat from 'dateformat';\r\nimport BookService from './services/BookService';\r\nimport { LinearProgress } from '@material-ui/core';\r\n\r\n// Generate Sales Data\r\nfunction createData(time, amount) {\r\n  return { time, amount };\r\n}\r\n\r\n\r\nconst emptyData = [\r\n  createData('09:00', 0),\r\n  createData('10:00', 0),\r\n  createData('11:00', 0),\r\n  createData('12:00', 0),\r\n  createData('13:00', 0),\r\n  createData('14:00', 0),\r\n  createData('15:00', 0),\r\n  createData('16:00', 0),\r\n  createData('17:00', 0),\r\n  createData('18:00', undefined),\r\n\r\n];\r\n\r\nconst getCount = (data, str) =>\r\n{\r\n  if (!data)\r\n    return 0;\r\n\r\n  var count = 0;\r\n  for (var i=0; i < data.length; i++)\r\n  {\r\n    if (data[i]._id.substr(0,2) === str)\r\n    {\r\n      count += data[i].count;\r\n    }\r\n  }\r\n  return count;\r\n}\r\n\r\nexport default function Chart() {\r\n  const theme = useTheme();\r\n\r\n  const [data, setData] = React.useState(emptyData);\r\n  const [loading, setLoading] = React.useState(false)\r\n\r\n  useEffect(() =>\r\n  {\r\n    const fetchData = async () =>\r\n    {\r\n      const todayStr = dateformat(new Date(), 'yyyy-mm-dd');\r\n      var result = [];\r\n      try\r\n      {\r\n          setLoading(true)\r\n          const res = await BookService.getBookingsStatsByDateStr(todayStr);\r\n          setLoading(false)\r\n          const data = res.data.result;\r\n          result.push(createData('09:00', getCount(data,'09')));\r\n          result.push(createData('10:00', getCount(data,'10')));\r\n          result.push(createData('11:00', getCount(data,'11')));\r\n          result.push(createData('12:00', getCount(data,'12')));\r\n          result.push(createData('13:00', getCount(data,'13')));\r\n          result.push(createData('14:00', getCount(data,'14')));\r\n          result.push(createData('15:00', getCount(data,'15')));\r\n          result.push(createData('16:00', getCount(data,'16')));\r\n          result.push(createData('17:00', getCount(data,'17')));\r\n          result.push(createData('18:00', undefined));\r\n \r\n           setData(result);\r\n      }\r\n      catch(err){\r\n        setLoading(false)\r\n        console.error(err);\r\n      }\r\n\r\n    }\r\n  \r\n   fetchData();\r\n\r\n  }, [] );\r\n\r\n  return (\r\n    <React.Fragment>\r\n       {loading && (\r\n        <div style={{ width: \"100%\", paddingTop: \"3px\" }}>\r\n          <LinearProgress color=\"primary\" />\r\n        </div>\r\n      )}\r\n      <Title>Today</Title>\r\n      <ResponsiveContainer>\r\n        <LineChart\r\n          data={data}\r\n          margin={{\r\n            top: 16,\r\n            right: 16,\r\n            bottom: 0,\r\n            left: 24,\r\n          }}\r\n        >\r\n          <XAxis dataKey=\"time\" stroke={theme.palette.text.secondary} />\r\n          <YAxis stroke={theme.palette.text.secondary}>\r\n            <Label\r\n              angle={270}\r\n              position=\"left\"\r\n              style={{ textAnchor: 'middle', fill: theme.palette.text.primary }}\r\n            >\r\n              Online Bookings\r\n            </Label>\r\n          </YAxis>\r\n          <Line type=\"monotone\" dataKey=\"amount\" stroke={theme.palette.primary.main} dot={false} />\r\n        </LineChart>\r\n      </ResponsiveContainer>\r\n    </React.Fragment>\r\n  );\r\n}","import React, { useEffect } from \"react\";\r\nimport Link from \"@material-ui/core/Link\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport Title from \"./Title\";\r\nimport { Grid, LinearProgress, Tooltip } from \"@material-ui/core\";\r\nimport * as dateformat from \"dateformat\";\r\nimport BookService from \"./services/BookService\";\r\nimport BookingDialog from \"./BookingDialog\";\r\n\r\nconst useStyles = makeStyles({\r\n  depositContext: {\r\n    flex: 1,\r\n  },\r\n\r\n  bookingBox: {\r\n    display: \"flex\",\r\n    margin: \"5px\",\r\n    padding: \"5px\",\r\n    maxWidth: \"90px\",\r\n    minHeight: \"30px\",\r\n    border: \"1px solid #eee\",\r\n    fontSize: \"12px\",\r\n    fontWeight: \"500\",\r\n    cursor: \"pointer\",\r\n    backgroundColor: \"#ebedf7\",\r\n    color: \"#3f51b5\",\r\n    boxShadow: \"2px 4px #fafafa\",\r\n    borderRadius: \"5px\",\r\n    textAlign: \"center\",\r\n    alignItems: \"center\",\r\n    justifyItems: \"center\",\r\n    align: \"center\",\r\n\r\n    \"&:hover\": {\r\n      background: \"#3f51b5\",\r\n      color: \"#ebedf7\",\r\n    },\r\n  },\r\n});\r\n\r\nconst isWeekend = (date) => {\r\n  return (\r\n    date.getDay() === 1 ||\r\n    date.getDay() === 2 ||\r\n    date.getDay() === 3 ||\r\n    date.getDay() === 6 ||\r\n    date.getDay() === 0\r\n  );\r\n};\r\n\r\nconst isThursday = (date) => {\r\n  return date.getDay() === 4; /// Thursday\r\n};\r\n\r\nconst isFriday = (date) => {\r\n  return date.getDay() === 5; /// Friday\r\n};\r\n\r\nconst getCurrentTimeSlot = (now) => {\r\n \r\n\r\n  var min = now.getMinutes();\r\n  var hour = now.getHours();\r\n\r\n  if (isWeekend(now) && (hour >= 14 || hour < 10)) {\r\n    return null;\r\n  }\r\n\r\n  if (hour >= 18 || hour < 10) {\r\n    return null;\r\n  }\r\n\r\n  const slotMinStr = min < 30 ? \"00\" : \"30\";\r\n  const pmStr = hour >= 12 ? \"PM\" : \"AM\";\r\n\r\n  if (hour > 12) hour = hour - 12;\r\n\r\n  const slotHourStr = `0${hour}`;\r\n\r\n  return `${slotHourStr}:${slotMinStr} ${pmStr}`;\r\n};\r\n\r\nconst getCurrentTimeSlotLabel = (timeStr) => {\r\n  if (!timeStr) {\r\n    return \"Closed\";\r\n  }\r\n\r\n  let endTimeStr = \"\";\r\n  switch (timeStr) {\r\n    case \"10:00 AM\":\r\n      endTimeStr = \"10:30 AM\";\r\n      break;\r\n    case \"10:30 AM\":\r\n      endTimeStr = \"11:00 AM\";\r\n      break;\r\n    case \"11:00 AM\":\r\n      endTimeStr = \"11:30 AM\";\r\n      break;\r\n    case \"11:30 AM\":\r\n      endTimeStr = \"12:00 PM\";\r\n      break;\r\n    case \"12:00 PM\":\r\n      endTimeStr = \"12:30 PM\";\r\n      break;\r\n    case \"12:30 PM\":\r\n      endTimeStr = \"01:00 PM\";\r\n      break;\r\n    case \"01:00 PM\":\r\n      endTimeStr = \"01:30 PM\";\r\n      break;\r\n    case \"01:30 PM\":\r\n      endTimeStr = \"02:00 PM\";\r\n      break;\r\n    case \"02:00 PM\":\r\n      endTimeStr = \"02:30 PM\";\r\n      break;\r\n    case \"02:30 PM\":\r\n      endTimeStr = \"03:00 PM\";\r\n      break;\r\n    case \"03:00 PM\":\r\n      endTimeStr = \"03:30 PM\";\r\n      break;\r\n    case \"03:30 PM\":\r\n      endTimeStr = \"04:00 PM\";\r\n      break;\r\n    case \"04:00 PM\":\r\n      endTimeStr = \"04:30 PM\";\r\n      break;\r\n    case \"04:30 PM\":\r\n      endTimeStr = \"05:00 PM\";\r\n      break;\r\n    case \"05:00 PM\":\r\n      endTimeStr = \"05:30 PM\";\r\n      break;\r\n    case \"05:30 PM\":\r\n      endTimeStr = \"06:00 PM\";\r\n      break;\r\n\r\n    default:\r\n      endTimeStr = \"\";\r\n      break;\r\n  }\r\n\r\n  return `${timeStr} - ${endTimeStr}`;\r\n};\r\n\r\nexport default function CurrentVisits() {\r\n  const classes = useStyles();\r\n\r\n  const [current, setCurrent] = React.useState(new Date());\r\n  const [bookings, setBookings] = React.useState([]);\r\n\r\n  const [selectedBooking, setSelectedBooking] = React.useState(null);\r\n  const [openDialog, setOpenDialog] = React.useState(false);\r\n\r\n  const [loading, setLoading] = React.useState(false);\r\n\r\n  useEffect(() => {\r\n    const interval = setInterval(() => {\r\n      setCurrent(new Date());\r\n    }, 30000);\r\n\r\n    return () => {\r\n      clearInterval(interval);\r\n    };\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    const currentTimeSlot = getCurrentTimeSlot(current);\r\n    if (!currentTimeSlot) return;\r\n    const todayStr = dateformat(current, \"yyyy-mm-dd\");\r\n    setLoading(true);\r\n    BookService.getBookingsByDateStrandTime(todayStr, currentTimeSlot)\r\n      .then((res) => {\r\n        setLoading(false);\r\n        if (res.data.status === \"OK\") {\r\n          setBookings([...res.data.bookings]);\r\n        }\r\n      })\r\n      .catch((err) => {\r\n        setLoading(false);\r\n        console.log(err);\r\n      });\r\n  }, [current]);\r\n\r\n  const getBookingsBox = (_bookings) => {\r\n    if (_bookings && _bookings.length > 0) {\r\n      return (\r\n        <div className={classes.root}>\r\n          <Grid\r\n            container\r\n            justify=\"flex-start\"\r\n            alignItems=\"flex-start\"\r\n            spacing={0}\r\n          >\r\n            {_bookings.map((booking) => (\r\n              <Grid item>\r\n                <div\r\n                  className={classes.bookingBox}\r\n                  onClick={(event) => bookingCliked(event, booking)}\r\n                >\r\n                  <span style={{ textAlign: \"center\" }}>\r\n                    {\" \"}\r\n                    {`${booking.surnameCapital}`.substring(0, 10)}{\" \"}\r\n                  </span>\r\n                </div>\r\n              </Grid>\r\n            ))}\r\n          </Grid>\r\n        </div>\r\n      );\r\n    }\r\n  };\r\n\r\n  const bookingCliked = (event, booking) => {\r\n    setSelectedBooking(booking);\r\n    setOpenDialog(true);\r\n  };\r\n\r\n  const handleCloseDialog = () => {\r\n    setOpenDialog(false);\r\n  };\r\n\r\n  return (\r\n    <React.Fragment>\r\n      {loading && (\r\n        <div style={{ width: \"100%\", paddingTop: \"3px\" }}>\r\n          <LinearProgress color=\"primary\" />\r\n        </div>\r\n      )}\r\n\r\n      <Title>Current Visits</Title>\r\n      <Typography component=\"p\" variant=\"h6\">\r\n        {getCurrentTimeSlotLabel(getCurrentTimeSlot(current))}\r\n      </Typography>\r\n      <Typography color=\"textSecondary\" className={classes.depositContext}>\r\n        on {dateformat(current, \"dd mmmm, yyyy\")}\r\n      </Typography>\r\n\r\n      {getBookingsBox(bookings)}\r\n\r\n      <BookingDialog\r\n        booking={selectedBooking}\r\n        open={openDialog}\r\n        onClose={handleCloseDialog}\r\n      />\r\n    </React.Fragment>\r\n  );\r\n}\r\n","import React, { useEffect } from 'react';\r\nimport Link from '@material-ui/core/Link';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport Table from '@material-ui/core/Table';\r\nimport TableBody from '@material-ui/core/TableBody';\r\nimport TableCell from '@material-ui/core/TableCell';\r\nimport TableHead from '@material-ui/core/TableHead';\r\nimport TableRow from '@material-ui/core/TableRow';\r\nimport Title from './Title';\r\nimport BookService from './services/BookService';\r\nimport * as dateformat from 'dateformat';\r\nimport GlobalState from './../GlobalState';\r\nimport { getMenuIndex } from './../MenuList';\r\nimport {FormatDateFromString, FormatDateFromStringShortYear} from './DateFormatter';\r\nimport { LinearProgress } from '@material-ui/core';\r\n\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  seeMore: {\r\n    marginTop: theme.spacing(3),\r\n  },\r\n}));\r\n\r\nexport default function BookingView() {\r\n  const classes = useStyles();\r\n  const [state, setState] = React.useContext(GlobalState);  \r\n\r\n  const [data, setData] = React.useState({bookings: [] , isFetching : false});\r\n\r\n  const [refresh, setRefresh] = React.useState(false);\r\n\r\n  const [loading, setLoading] = React.useState(false)\r\n\r\n  const seeMoreRecords = (event) => {\r\n    event.preventDefault();\r\n    setState(state=>({...state, currentMenuIndex:getMenuIndex('gynae',`recentBookings`)}));\r\n  }\r\n\r\n  const loadData = () => \r\n  {\r\n    setData({bookings: data.bookings, isFetching: true});\r\n    setLoading(true)\r\n    BookService.getRecentBookings().then( (res) =>{\r\n      setLoading(false)\r\n        setData({bookings: res.data, isFetching: false});\r\n\r\n    }).catch( (err) => {\r\n      setLoading(false)\r\n        console.log(err);\r\n        setData({bookings: data.bookings, isFetching: false});\r\n    });\r\n  }\r\n\r\n\r\n  useEffect( () => {\r\n          loadData();\r\n        },\r\n        [refresh]);   \r\n\r\n\r\n   useEffect( () => {\r\n     loadData();\r\n     const interval = setInterval(() => {\r\n       setRefresh(refresh => !refresh);\r\n     }, 30000);\r\n\r\n     return () =>\r\n     {\r\n       clearInterval(interval)\r\n     }\r\n     \r\n   }, []) ;    \r\n\r\n   const formatTimeStamp = (timeStamp) =>\r\n   {\r\n     const todayStr = dateformat(new Date(), 'yyyy-mm-dd');\r\n     const timeStampStr = dateformat(timeStamp, 'yyyy-mm-dd');\r\n     if (todayStr === timeStampStr)\r\n     {\r\n       return dateformat(timeStamp, \"'Today', h:MM:ss TT\");\r\n     }\r\n     else\r\n     {\r\n        return dateformat(timeStamp, \"mmm dS, h:MM:ss TT\");\r\n     }\r\n   }\r\n\r\n  return (\r\n    <React.Fragment>\r\n       {loading && (\r\n        <div style={{ width: \"100%\", paddingTop: \"3px\" }}>\r\n          <LinearProgress color=\"primary\" />\r\n        </div>\r\n      )}\r\n      <Title>Recent Bookings</Title>\r\n      <Table size=\"small\">\r\n        <TableHead>\r\n          <TableRow>\r\n            <TableCell>TimeStamp</TableCell>        \r\n            <TableCell>Fullname</TableCell>\r\n            <TableCell>Email</TableCell>\r\n            <TableCell>Tel</TableCell>\r\n            <TableCell>Booked Date</TableCell>\r\n            <TableCell>Booked Time</TableCell> \r\n          </TableRow>\r\n        </TableHead>\r\n        <TableBody>\r\n          {data.bookings.map((row) => (\r\n            <TableRow key={row._id}>\r\n              <TableCell>{formatTimeStamp(row.timeStamp)}</TableCell>\r\n              <TableCell>{row.fullname}</TableCell>\r\n              <TableCell>{row.email}</TableCell>\r\n              <TableCell>{row.phone}</TableCell>\r\n              <TableCell>{FormatDateFromString(row.bookingDate)}</TableCell>\r\n              <TableCell>{row.bookingTime}</TableCell>\r\n            </TableRow>\r\n          ))}\r\n        </TableBody>\r\n      </Table>\r\n      <div className={classes.seeMore}>\r\n        <Link color=\"primary\" href=\"#\" onClick={seeMoreRecords}>\r\n          See more records\r\n        </Link>\r\n      </div>\r\n    </React.Fragment>\r\n  );\r\n}","import React from 'react';\r\nimport clsx from 'clsx';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport Paper from '@material-ui/core/Paper';\r\nimport Chart from './Chart';\r\nimport CurrentVisits from './CurrentVisits';\r\n\r\n\r\n\r\nimport { Tooltip } from '@material-ui/core';\r\nimport GlobalState from './../GlobalState';\r\nimport BookingView from './BookingView';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n \r\n  paper: {\r\n    padding: theme.spacing(2),\r\n    display: 'flex',\r\n    overflow: 'auto',\r\n    flexDirection: 'column',\r\n  },\r\n  fixedHeight: {\r\n    height: 240,\r\n  },\r\n}));\r\n\r\nexport default function DashboardPreview() {\r\n  const classes = useStyles();\r\n  const [state, setState] = React.useContext(GlobalState);\r\n\r\n  const fixedHeightPaper = clsx(classes.paper, classes.fixedHeight);\r\n\r\n  return (\r\n        <React.Fragment>\r\n\r\n<           Grid container spacing={3}>\r\n                    {/* Chart */}\r\n                    <Grid item xs={12} md={4} lg={6}>\r\n                    <Paper className={fixedHeightPaper}>\r\n                        <Chart />\r\n                    </Paper>\r\n                    </Grid>\r\n                    {/* Current Visits */}\r\n                    <Grid item xs={12} md={4} lg={6}>\r\n                    <Paper className={fixedHeightPaper}>\r\n                        <CurrentVisits />\r\n                    </Paper>\r\n                    </Grid>\r\n                    {/* Recent Bookings */}\r\n                    <Grid item xs={12}>\r\n                    <Paper className={classes.paper}>\r\n                        <BookingView/>\r\n                    </Paper>\r\n                    </Grid>\r\n          </Grid>\r\n        </React.Fragment>\r\n  );\r\n}","import React from 'react';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport GlobalState from './../GlobalState';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport Accordion from '@material-ui/core/Accordion';\r\nimport AccordionDetails from '@material-ui/core/AccordionDetails';\r\nimport AccordionSummary from '@material-ui/core/AccordionSummary';\r\nimport ExpandMoreIcon from '@material-ui/icons/ExpandMore';\r\nimport { Button, Checkbox, FormControlLabel, Link, TextField, Tooltip } from '@material-ui/core';\r\nimport PDFService from './services/PDFService';\r\n\r\nimport {calculatePrice} from './PriceCalculator';\r\n\r\n\r\nimport bookingService from './services/BookService';\r\nimport CheckIcon from '@material-ui/icons/Check';\r\nimport CloseIcon from '@material-ui/icons/Close';\r\nimport DeleteIcon from '@material-ui/icons/Delete';\r\n\r\nimport {FormatDateFromString, RevertFormatDateFromString} from './DateFormatter';\r\n\r\nimport PrintIcon from '@material-ui/icons/Print';\r\n\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  box: {\r\n    backgroundColor : \"#373737\",\r\n    color: \"#fff\",\r\n    padding : \"1px\",\r\n    borderRadius : \"4px\",\r\n    textAlign: \"justify\",\r\n    paddingRight: \"40px\"\r\n  },\r\n\r\n  boxRed: {\r\n    backgroundColor : \"#dc2626\",\r\n    color: \"#fff\",\r\n    padding : \"1px\",\r\n    borderRadius : \"4px\",\r\n    textAlign: \"justify\",\r\n    paddingRight: \"40px\"\r\n  },\r\n\r\n  boxInfo: {\r\n    textAlign: \"justify\",\r\n    backgroundColor : \"#fafafa\",\r\n    color: \"#333\",\r\n    padding : \"1px\",\r\n    borderRadius : \"4px\",\r\n    paddingRight: \"40px\",\r\n    border: \"1px solid #eee\",\r\n  },\r\n\r\n  ul: {\r\n     listStyle: \"none\",\r\n     padding: \"0\",\r\n     margin: \"0\"\r\n  },\r\n\r\n  li: {\r\n    marginBottom : \"15px\"\r\n  },\r\n\r\n\r\n  icon: {\r\n    marginRight : \"8px\"\r\n  },\r\n\r\n  root: {\r\n    width: '100%',\r\n  },\r\n\r\n  lineThrough:{\r\n    textDecoration : \"line-through\",\r\n  },\r\n\r\n\r\n\r\n  heading: {\r\n    fontSize: theme.typography.pxToRem(15),\r\n    flexBasis: '33.33%',\r\n    flexShrink: 0,\r\n    color: theme.palette.text.secondary,\r\n  },\r\n  secondaryHeading: {\r\n    fontSize: theme.typography.pxToRem(15),\r\n  },\r\n\r\n  infoDetails:{\r\n    textAlign: \"left\",\r\n  },\r\n\r\n  infoTitle:{\r\n    fontWeight: \"800\",\r\n    marginRight: \"10px\"\r\n  },\r\n\r\n  infoData:{\r\n    fontWeight: \"400\",\r\n  },\r\n\r\n  title:\r\n  {\r\n    // textAlign : \"center\",\r\n    // fontWeight : \"500\",\r\n    // margin: \"10px\",\r\n    // backgroundColor : \"#eee\",\r\n    // padding : \"10px\",\r\n    // borderRadius : \"4px\"\r\n    textAlign: \"center\",\r\n    fontWeight : \"600\",\r\n    marginLeft: \"10px\",\r\n    marginBottom: \"5px\"\r\n\r\n  },\r\n\r\n  Accordion:{\r\n    backgroundColor : \"#f5f5f5\",\r\n    color: \"#222\"\r\n  },\r\n\r\n  AccordionDeleted:{\r\n    backgroundColor : \"#aaa\",\r\n    color: \"#555\"\r\n  },\r\n\r\n  DownloadForm:{\r\n      marginTop: \"10px\",\r\n      marginBottom : \"10px\"\r\n  },\r\n\r\n  infoDataCharges:{\r\n    fontSize : \"18px\",\r\n    color: \"green\",\r\n    fontWeight : \"600\"\r\n  },\r\n\r\n  infoDataChargesHigher:{\r\n    fontSize : \"18px\",\r\n    color: \"red\",\r\n    fontWeight : \"600\"\r\n  },\r\n  BookedLabel:{\r\n    color: \"#606060\",\r\n    paddingRight: \"10px\",\r\n    paddingLeft: \"5px\",\r\n    paddingBottom: \"3px\",\r\n    paddingTop: \"3px\",\r\n    fontWeight: \"800\",\r\n    borderLeft: \"5px solid\",\r\n    borderColor: \"#606060\"\r\n  },\r\n\r\n  PatientAttendedLabel:{\r\n    color: \"#0066aa\",\r\n    paddingRight: \"10px\",\r\n    paddingLeft: \"5px\",\r\n    paddingBottom: \"3px\",\r\n    paddingTop: \"3px\",\r\n    fontWeight: \"800\",\r\n    borderLeft: \"5px solid\",\r\n    borderColor: \"#0066aa\"\r\n  },\r\n\r\n  SampleTakenLabel:{\r\n    color: \"#0066cc\",\r\n    paddingRight: \"10px\",\r\n    paddingLeft: \"5px\",\r\n    paddingBottom: \"3px\",\r\n    paddingTop: \"3px\",\r\n    fontWeight: \"800\",\r\n    borderLeft: \"5px solid\",\r\n    borderColor: \"#0066cc\"\r\n  },\r\n\r\n  ReportSentLabel:{\r\n    color: \"#009900\",\r\n    paddingRight: \"10px\",\r\n    paddingLeft: \"5px\",\r\n    paddingBottom: \"3px\",\r\n    paddingTop: \"3px\",\r\n    fontWeight: \"800\",\r\n    borderLeft: \"5px solid\",\r\n    borderColor: \"#009900\"\r\n  },\r\n\r\n  ReportCertSentLabel:{\r\n    color: \"#009900\",\r\n    paddingRight: \"10px\",\r\n    paddingLeft: \"5px\",\r\n    paddingBottom: \"3px\",\r\n    paddingTop: \"3px\",\r\n    fontWeight: \"800\",\r\n    borderLeft: \"5px solid\",\r\n    borderColor: \"#009900\"\r\n  },\r\n\r\n  PositiveLabel:{\r\n    color: \"red\",\r\n    paddingRight: \"10px\",\r\n    paddingLeft: \"5px\",\r\n    paddingBottom: \"3px\",\r\n    paddingTop: \"3px\",\r\n    fontWeight: \"800\",\r\n    borderLeft: \"5px solid\",\r\n    borderColor: \"red\"\r\n  },\r\n\r\n\r\n  EditButton:\r\n  {\r\n    marginBottom : \"20px\",\r\n    backgroundColor : \"#2f942e\",\r\n    \"&:hover\": {\r\n      background: \"green\",\r\n      color: \"#fff\"\r\n    },\r\n    textDecoration : \"none !important\",\r\n    padding: \"10px\",\r\n    width: \"400px\"   \r\n  },\r\n\r\n  RestoreButton:\r\n  {\r\n    marginBottom : \"20px\",\r\n    backgroundColor : \"#fafafa\",\r\n    color: \"#555\",\r\n    \"&:hover\": {\r\n      background: \"#f1f1f1\",\r\n      color: \"#111\"\r\n    },\r\n    textDecoration : \"none !important\",\r\n    padding: \"10px\" ,\r\n    width: \"400px\"    \r\n  },\r\n\r\n\r\n  DeleteButton:\r\n  {\r\n    marginBottom : \"20px\",\r\n    backgroundColor : \"#d90015\",\r\n    \"&:hover\": {\r\n      background: \"#b80012\",\r\n      color: \"#fff\"\r\n    },\r\n\r\n    padding: \"10px\",\r\n    width: \"400px\"   \r\n    \r\n  },\r\n\r\n  SaveButton:\r\n  {\r\n    marginBottom : \"10px\",\r\n    padding: \"10px\",\r\n\r\n    backgroundColor : \"#d1175e\",\r\n    \"&:hover\": {\r\n      background: \"#bd0d50\",\r\n      color: \"#fff\",\r\n      \r\n    },\r\n    width: \"400px\"   \r\n\r\n  },\r\n\r\n  CancelButton:\r\n  {\r\n    marginBottom : \"20px\",\r\n    // padding: \"10px\"\r\n  },\r\n\r\n  TextBox: {\r\n    \r\n    padding : \"0px\"\r\n\r\n  },\r\n\r\n  checkIcon:{\r\n    color: \"green\",   \r\n  },\r\n\r\n  closeIcon:{\r\n    color: \"red\"\r\n  },\r\n\r\n  centeredLabel : {\r\n    display: \"flex\",\r\n    alignItems: \"center\"\r\n  }\r\n\r\n\r\n\r\n\r\n\r\n\r\n}));\r\n\r\n\r\n\r\n\r\nexport default function PersonsBox() {\r\n    const classes = useStyles();\r\n\r\n    const [state, setState] = React.useContext(GlobalState);\r\n\r\n    const [expanded, setExpanded] = React.useState('panel0');\r\n\r\n    const [editMode, setEditMode] = React.useState({edit : false, person : null});\r\n    const [deleteMode, setDeleteMode] = React.useState({delete : false, person : null});\r\n    const [restoreMode, setRestoreMode] = React.useState({restore : false, person : null});\r\n\r\n    const [saving, setSaving] =  React.useState(false);\r\n    const [deleting, setDeleting] =  React.useState(false);\r\n    const [restoring, setRestoring] =  React.useState(false);\r\n\r\n    const [validationError, setValidationError] = React.useState({});\r\n\r\n\r\n    const [bookingDate, setBookingDate] = React.useState('');\r\n    const [bookingTime, setBookingTime] = React.useState('');\r\n\r\n    const [fullname, setFullname] = React.useState('');\r\n    const [email, setEmail] = React.useState('');\r\n    const [tel, setTel] = React.useState('');\r\n    const [service, setService] = React.useState('');\r\n    const [notes, setNotes] = React.useState('');\r\n\r\n\r\n    const bookingDateChanged = (event) =>\r\n    {\r\n      setBookingDate(event.target.value);\r\n      setValidationError({...validationError, bookingDateError : false});\r\n    }\r\n\r\n    const bookingTimeChanged = (event) =>\r\n    {\r\n      setBookingTime(event.target.value);\r\n      setValidationError({...validationError, bookingTimeError : false});\r\n    }\r\n\r\n    const fullnameChanged = (event) =>\r\n    {\r\n      setFullname(event.target.value);\r\n    }\r\n\r\n    const emailChanged = (event) =>\r\n    {\r\n      setEmail(event.target.value);\r\n    }\r\n\r\n    const telChanged = (event) =>\r\n    {\r\n      setTel(event.target.value);\r\n    }\r\n\r\n    const serviceChanged = (event) =>\r\n    {\r\n      setService(event.target.value);\r\n    }\r\n\r\n    const notesChanged = (event) =>\r\n    {\r\n      setNotes(event.target.value);\r\n    }\r\n\r\n\r\n    const handleChange = (panel) => (event, isExpanded) => {\r\n      setExpanded(isExpanded ? panel : false);\r\n    };\r\n\r\n    const getStatusLabel = (status) => {\r\n      if (status === 'booked')\r\n      {\r\n        return (\r\n          <span className={classes.BookedLabel}> Booking Made </span>\r\n        );\r\n    \r\n      }else if (status === 'patient_attended')\r\n      {\r\n        return (\r\n          <span  className={classes.PatientAttendedLabel}> Patient Attended </span>\r\n        );\r\n    \r\n      }\r\n      else{\r\n        return 'Unknown';\r\n      }\r\n    }\r\n\r\n\r\n   const handleEditModeChanged = (edit, person) => {\r\n\r\n       if (edit)\r\n       {\r\n         setFullname(person.fullname);\r\n         setBookingDate(FormatDateFromString(person.bookingDate));\r\n         setBookingTime(person.bookingTime);\r\n         setEmail(person.email);\r\n         setTel(person.phone);\r\n         setService(person.service)\r\n         if (person.notes)\r\n         {\r\n          setNotes(person.notes);\r\n         }\r\n        \r\n         setEditMode({edit: edit, person: person});\r\n\r\n       }\r\n       else if (!edit && !person)\r\n       {\r\n         setEditMode({edit: edit, person: person});\r\n       }\r\n       else if (!edit && person)\r\n       {\r\n          const booking = {};\r\n          const bookingId = person._id;\r\n          booking.email = email;\r\n          booking.phone = tel;\r\n          booking.fullname = fullname;\r\n          booking.notes = notes;\r\n          booking.service = service;\r\n          booking.bookingDate = RevertFormatDateFromString(bookingDate);\r\n          booking.bookingTime = bookingTime;\r\n          booking.bookingRef = person.bookingRef;\r\n\r\n          if  (validateBooking(booking))\r\n          {\r\n            updateBooking({bookingId: bookingId, person: booking});\r\n          }\r\n       }\r\n   }\r\n\r\n   const validateDate = (str) =>\r\n   {\r\n     var error = false;\r\n     if (!str || str.length !== 10)\r\n     {\r\n       error = true;\r\n     }\r\n\r\n     if (str.charAt(4) !== '-'  || str.charAt(7) !== '-')\r\n     {\r\n       error = true;\r\n     }\r\n\r\n     try\r\n     {\r\n       \r\n       const result = /^\\d{4}-\\d{2}-\\d{2}$/.test(str);\r\n       if (!result)\r\n       {\r\n          error = true;\r\n       }\r\n\r\n       const year = parseInt(str.substr(0,4));\r\n       const month = parseInt(str.substr(5,2));\r\n       const day = parseInt(str.substr(8,2));\r\n\r\n       if (year < 1900)\r\n       {\r\n          error = true;\r\n       }\r\n\r\n       if (month < 1 || month > 12)\r\n       {\r\n         error = true;\r\n       }        \r\n\r\n       if (day > 31)\r\n       {\r\n         error = true;\r\n       }\r\n\r\n     }catch(err)\r\n     {\r\n       error = true;\r\n     }\r\n\r\n\r\n\r\n     return !error;\r\n   }\r\n\r\n   const validateTime =(str) =>\r\n   {\r\n     var error = false;\r\n\r\n     const result = /^\\d{2}:\\d{2} AM$|^\\d{2}:\\d{2} PM$/.test(str);\r\n     if (!result)\r\n     {\r\n        error = true;\r\n     }\r\n\r\n     try{\r\n       const hour = parseInt(str.substr(0,2));\r\n       const minute = parseInt(str.substr(3,2));\r\n\r\n       if (hour < 0 || hour > 12)\r\n       {\r\n         error = true;\r\n       }\r\n\r\n       if (minute < 0 || minute > 59)\r\n       {\r\n         error = true;\r\n       }\r\n\r\n     }catch(err)\r\n     {\r\n       error = true;\r\n     }\r\n\r\n     return !error;\r\n   }\r\n\r\n   const validateBooking = (booking) =>\r\n   {\r\n      var error = false;\r\n\r\n      if (!validateDate(booking.bookingDate))\r\n      {\r\n        error = true;\r\n        setValidationError({...validationError, bookingDateError : true});\r\n      }\r\n\r\n      if (!validateTime(booking.bookingTime))\r\n      {\r\n        error = true;\r\n        setValidationError({...validationError, bookingTimeError : true});\r\n      }\r\n     \r\n\r\n      return !error;\r\n   }\r\n\r\n   const updateBooking = (payload) =>\r\n   {\r\n       setSaving(true);\r\n       bookingService.updateBooking(payload).then( (res) => {\r\n        setSaving(false);\r\n        setEditMode({edit: false, person: null});\r\n        setState(state => ({...state, RefreshPersonInfo : !state.RefreshPersonInfo}));\r\n\r\n       }).catch ( (err) => {\r\n         setSaving(false);\r\n         setEditMode({edit: false, person: null});\r\n         console.log(err);\r\n       });\r\n   }\r\n\r\n   const deleteBooking = (id) =>\r\n   {\r\n       setDeleting(true);\r\n       bookingService.deleteBooking(id).then( (res) => {\r\n        setDeleting(false);\r\n        setDeleteMode({delete: false, person: null});\r\n        setState(state => ({...state, RefreshPersonInfo : !state.RefreshPersonInfo}));\r\n\r\n       }).catch ( (err) => {\r\n          setDeleting(false);\r\n          setDeleteMode({delete: false, person: null});\r\n         console.log(err);\r\n       });\r\n   }\r\n\r\n   const restoreBooking = (id) =>\r\n   {\r\n       setRestoring(true);\r\n       bookingService.unDeleteBooking(id).then( (res) => {\r\n        setRestoring(false);\r\n        setRestoreMode({restore: false, person: null});\r\n        setState(state => ({...state, RefreshPersonInfo : !state.RefreshPersonInfo}));\r\n\r\n       }).catch ( (err) => {\r\n        setRestoring(false);\r\n        setRestoreMode({restore: false, person: null});\r\n         console.log(err);\r\n       });\r\n   }\r\n\r\n   const changeBackToBookingMade = (event, id) =>\r\n   {\r\n     setSaving(true);\r\n     bookingService.changeBackToBookingMade(id).then(res => {\r\n       setSaving(false);\r\n       setState(state => ({...state, RefreshPersonInfo : !state.RefreshPersonInfo}));\r\n     }).catch(err => {\r\n       console.log(err);\r\n       setSaving(false);\r\n     })\r\n   }\r\n\r\n\r\n\r\n   const handleDeleteModeChanged = (del, person) => {\r\n\r\n    if (del)\r\n    {\r\n      setDeleteMode({delete: del, person: person});\r\n    }\r\n    else if (!del && !person)\r\n    {\r\n      setDeleteMode({delete: del, person: person});\r\n    }\r\n    else if (!del && person)\r\n    {\r\n        deleteBooking(person._id);\r\n    }\r\n  }\r\n\r\n  const handleRestoreModeChanged = (restore, person) => {\r\n\r\n    if (restore)\r\n    {\r\n      setRestoreMode({restore: restore, person: person});\r\n    }\r\n    else if (!restore && !person)\r\n    {\r\n      setRestoreMode({restore: restore, person: person});\r\n    }\r\n    else if (!restore && person)\r\n    {\r\n        restoreBooking(person._id);\r\n    }\r\n  }\r\n\r\n  return (\r\n    <React.Fragment>\r\n          \r\n      <Grid container direction=\"column\" spacing={1} justify=\"flex-start\" alignItems=\"center\">\r\n          <div className={classes.title}> Following Records Found :</div>\r\n\r\n          {state.foundRecords.map((person,index) => (\r\n   \r\n                <Grid item xs={12} md={12} key={`panel${index}`}>\r\n                <div className={classes.root}>\r\n                    <Accordion className={person.deleted ? classes.AccordionDeleted : classes.Accordion} expanded={expanded === `panel${index}`} onChange={handleChange(`panel${index}`)}>\r\n                    <AccordionSummary className={person.deleted ? classes.lineThrough : ''}\r\n                        expandIcon={<ExpandMoreIcon />}\r\n                        aria-controls=\"panel1bh-content\"\r\n                        id={`panel${index}bh-header`}\r\n                    >\r\n                      {person.deleted && (\r\n                          <Tooltip  title=\"This record has been deleted.\">\r\n                            <DeleteIcon  style={{padding: 0, margin: 0,  color: \"#fff\", fontSize: 25 }}/>\r\n                        </Tooltip>\r\n                      )}\r\n\r\n                        <Typography className={classes.heading}> {`#${index+1}`} </Typography>\r\n                        <Typography className={classes.secondaryHeading}>\r\n                        {`${person.fullname}`}\r\n                        </Typography>\r\n                    </AccordionSummary>\r\n\r\n                    <AccordionDetails className={classes.infoDetails}>\r\n                        \r\n\r\n\r\n                        <ul className={classes.ul}>\r\n\r\n                        {/* Restore Functionality ******************************************* */}  \r\n                        <li hidden={!(restoreMode.restore && restoreMode.person._id  === person._id)}>\r\n                              <div style={{fontWeight: \"500\", paddingBottom: \"5px\", paddingLeft: \"5px\", fontSize:\"16px\" , color:\"#fff\"}}>\r\n                                Are you sure you want to restore this record?\r\n                              </div>\r\n                            </li>\r\n\r\n                            <li hidden={!person.deleted || (restoreMode.restore && restoreMode.person._id === person._id)}>\r\n                                 <Button\r\n\r\n                                    type=\"button\"\r\n                                    fullWidth\r\n                                    variant=\"contained\"\r\n                                    color=\"primary\"\r\n                                    onClick = {() => {handleRestoreModeChanged(true, person)}}\r\n                                    className={classes.RestoreButton}\r\n                                 >\r\n                                   Restore This Record\r\n                                </Button>\r\n                            </li>\r\n\r\n                            <li hidden={!(restoreMode.restore && restoreMode.person._id  === person._id)}>\r\n                                 <Button\r\n                                    type=\"button\"\r\n                                    fullWidth\r\n                                    variant=\"contained\"\r\n                                    color=\"primary\"\r\n                                    disabled = {restoring}\r\n                                    onClick = {() => {handleRestoreModeChanged(false, person)}}\r\n                                    className={classes.SaveButton}\r\n                                 >\r\n                                    YES, Restore this!\r\n                                </Button>\r\n                            </li>\r\n\r\n                            <li hidden={!(restoreMode.restore && restoreMode.person._id  === person._id)}>\r\n                                 <Button\r\n                                    type=\"button\"\r\n                                    fullWidth\r\n                                    variant=\"contained\"\r\n                                    color=\"default\"\r\n                                    disabled = {restoring}\r\n                                    onClick = {() => {handleRestoreModeChanged(false, null)}}\r\n                                    className={classes.CancelButton}\r\n                                 >\r\n                                    Cancel\r\n                                </Button>\r\n                            </li>\r\n\r\n                           {/*  ******************************************************************* */}\r\n\r\n                              {/* Edit Functionality ******************************************* */}\r\n\r\n                            <li hidden={person.deleted || deleteMode.delete || (editMode.edit && editMode.person._id === person._id)}>\r\n                                 <Button\r\n                                    type=\"button\"\r\n                                    fullWidth\r\n                                    variant=\"contained\"\r\n                                    color=\"primary\"\r\n                                    onClick = {() => {handleEditModeChanged(true, person)}}\r\n                                    className={classes.EditButton}\r\n                                 >\r\n                                    Edit Booking Info\r\n                                </Button>\r\n                            </li>\r\n\r\n                            <li hidden={!(editMode.edit && editMode.person._id  === person._id)}>\r\n                                 <Button\r\n                                    type=\"button\"\r\n                                    fullWidth\r\n                                    variant=\"contained\"\r\n                                    color=\"primary\"\r\n                                    disabled = {saving}\r\n                                    onClick = {() => {handleEditModeChanged(false, person)}}\r\n                                    className={classes.SaveButton}\r\n                                 >\r\n                                    Save Changes\r\n                                </Button>\r\n                            </li>\r\n\r\n                            <li hidden={!(editMode.edit && editMode.person._id === person._id)}>\r\n                                 <Button\r\n                                    type=\"button\"\r\n                                    fullWidth\r\n                                    variant=\"contained\"\r\n                                    color=\"default\"\r\n                                    disabled = {saving}\r\n                                    onClick = {() => {handleEditModeChanged(false, null)}}\r\n                                    className={classes.CancelButton}\r\n                                 >\r\n                                    Cancel\r\n                                </Button>\r\n                            </li>\r\n                            \r\n                            {/* ****************************************************************************************** */}\r\n\r\n\r\n                            {/* Delete Functionality ******************************************* */}\r\n\r\n                            <li hidden={!(deleteMode.delete && deleteMode.person._id  === person._id)}>\r\n                              <div style={{fontWeight: \"600\",  paddingBottom: \"5px\", paddingLeft: \"5px\", fontSize:\"16px\"}}>\r\n                                Are you sure you want to delete this record?\r\n                              </div>\r\n                            </li>\r\n\r\n                            <li hidden={person.deleted ||  editMode.edit || (deleteMode.delete && deleteMode.person._id === person._id)}>\r\n                                 <Button\r\n                                    type=\"button\"\r\n                                    fullWidth\r\n                                    variant=\"contained\"\r\n                                    color=\"primary\"\r\n                                    onClick = {() => {handleDeleteModeChanged(true, person)}}\r\n                                    className={classes.DeleteButton}\r\n                                 >\r\n                                   Delete This Record\r\n                                </Button>\r\n                            </li>\r\n\r\n                            <li hidden={!(deleteMode.delete && deleteMode.person._id  === person._id)}>\r\n                                 <Button\r\n                                    type=\"button\"\r\n                                    fullWidth\r\n                                    variant=\"contained\"\r\n                                    color=\"primary\"\r\n                                    disabled = {deleting}\r\n                                    onClick = {() => {handleDeleteModeChanged(false, person)}}\r\n                                    className={classes.SaveButton}\r\n                                 >\r\n                                    YES, Delete this!\r\n                                </Button>\r\n                            </li>\r\n\r\n                            <li hidden={!(deleteMode.delete && deleteMode.person._id === person._id)}>\r\n                                 <Button\r\n                                    type=\"button\"\r\n                                    fullWidth\r\n                                    variant=\"contained\"\r\n                                    color=\"default\"\r\n                                    disabled = {deleting}\r\n                                    onClick = {() => {handleDeleteModeChanged(false, null)}}\r\n                                    className={classes.CancelButton}\r\n                                 >\r\n                                    Cancel\r\n                                </Button>\r\n                            </li>\r\n                                 \r\n                            {/* ****************************************************************************************** */}\r\n\r\n                            <li className={classes.li}>\r\n                                <span className={classes.infoTitle}>BOOKED DATE</span> \r\n                            \r\n\r\n                                <span hidden={(editMode.edit && editMode.person._id  === person._id)} className={classes.infoData}>\r\n                                   {FormatDateFromString(person.bookingDate) }\r\n                                  </span>  \r\n                                        <span hidden={!(editMode.edit && editMode.person._id  === person._id)} className={classes.infoData}>\r\n                                          <TextField \r\n                                                      fullWidth\r\n                                                      error={validationError.bookingDateError}\r\n                                                      className={classes.TextBox} \r\n                                                      value={bookingDate}\r\n                                                      onChange = {bookingDateChanged}\r\n                                                      inputProps= {{\r\n                                                          style:{\r\n                                                            padding: 0\r\n                                                          }\r\n                                                        }\r\n                                                      }\r\n                                                      > \r\n                                          </TextField> \r\n                                        </span> \r\n\r\n\r\n                            </li>\r\n\r\n                            <li className={classes.li}>\r\n                                <span className={classes.infoTitle}>BOOKED TIME</span> \r\n                                <span hidden={(editMode.edit && editMode.person._id  === person._id)} className={classes.infoData}>{person.bookingTime}</span>  \r\n                                        <span hidden={!(editMode.edit && editMode.person._id  === person._id)} className={classes.infoData}>\r\n                                          <TextField \r\n                                                      fullWidth\r\n                                                      error={validationError.bookingTimeError}\r\n                                                      className={classes.TextBox} \r\n                                                      value={bookingTime}\r\n                                                      onChange = {bookingTimeChanged}\r\n                                                      inputProps= {{\r\n                                                          style:{\r\n                                                            padding: 0\r\n                                                          }\r\n                                                        }\r\n                                                      }\r\n                                                      > \r\n                                          </TextField> \r\n                                        </span> \r\n\r\n\r\n                            </li>\r\n\r\n                            <li className={classes.li}>\r\n                            <span className={classes.infoTitle}>FULLNAME</span> \r\n                                        <span hidden={(editMode.edit && editMode.person._id  === person._id)} className={classes.infoData}>{person.fullname}</span>  \r\n                                        <span hidden={!(editMode.edit && editMode.person._id  === person._id)} className={classes.infoData}>\r\n                                        <TextField \r\n                                                      fullWidth\r\n                                                      className={classes.TextBox} \r\n                                                      value={fullname}\r\n                                                      onChange = {fullnameChanged}\r\n                                                      inputProps= {{\r\n                                                          style:{\r\n                                                            padding: 0\r\n                                                          }\r\n                                                        }\r\n                                                      }\r\n                                                      > \r\n                                          </TextField> \r\n                                        </span> \r\n                            </li>\r\n                            <li className={classes.li}>\r\n                                <span className={classes.infoTitle}>EMAIL</span> \r\n                                       <span hidden={(editMode.edit && editMode.person._id  === person._id)} className={classes.infoData}>{person.email}</span>  \r\n                                        <span hidden={!(editMode.edit && editMode.person._id  === person._id)} className={classes.infoData}>\r\n                                        <TextField \r\n                                                      fullWidth\r\n                                                      className={classes.TextBox} \r\n                                                      value={email}\r\n                                                      onChange = {emailChanged}\r\n                                                      inputProps= {{\r\n                                                          style:{\r\n                                                            padding: 0\r\n                                                          }\r\n                                                        }\r\n                                                      }\r\n                                                      > \r\n                                          </TextField> \r\n                                        </span>   \r\n                            </li>\r\n                            <li className={classes.li}>\r\n                                <span className={classes.infoTitle}>TEL</span>\r\n                                 <span hidden={(editMode.edit && editMode.person._id  === person._id)} className={classes.infoData}>{person.phone}</span>  \r\n                                        <span hidden={!(editMode.edit && editMode.person._id  === person._id)} className={classes.infoData}>\r\n                                        <TextField \r\n                                                      fullWidth\r\n                                                      className={classes.TextBox} \r\n                                                      value={tel}\r\n                                                      onChange = {telChanged}\r\n                                                      inputProps= {{\r\n                                                          style:{\r\n                                                            padding: 0\r\n                                                          }\r\n                                                        }\r\n                                                      }\r\n                                                      > \r\n                                          </TextField> \r\n                                        </span>  \r\n                            </li>\r\n                            <li className={classes.li}>\r\n                                <span className={classes.infoTitle}>SERVICE</span>\r\n                                 <span hidden={(editMode.edit && editMode.person._id  === person._id)} className={classes.infoData}>{person.service}</span>  \r\n                                        <span hidden={!(editMode.edit && editMode.person._id  === person._id)} className={classes.infoData}>\r\n                                        <TextField \r\n                                                      fullWidth\r\n                                                      className={classes.TextBox} \r\n                                                      value={service}\r\n                                                      onChange = {serviceChanged}\r\n                                                      inputProps= {{\r\n                                                          style:{\r\n                                                            padding: 0\r\n                                                          }\r\n                                                        }\r\n                                                      }\r\n                                                      > \r\n                                          </TextField> \r\n                                        </span>  \r\n                            </li>\r\n                            <li className={classes.li}>\r\n                                <span className={classes.infoTitle}>NOTES</span>\r\n                                 <span hidden={(editMode.edit && editMode.person._id  === person._id)} className={classes.infoData}>{person.notes}</span>  \r\n                                        <span hidden={!(editMode.edit && editMode.person._id  === person._id)} className={classes.infoData}>\r\n                                        <TextField \r\n                                                      fullWidth\r\n                                                      className={classes.TextBox} \r\n                                                      value={notes}\r\n                                                      onChange = {notesChanged}\r\n                                                      inputProps= {{\r\n                                                          style:{\r\n                                                            padding: 0\r\n                                                          }\r\n                                                        }\r\n                                                      }\r\n                                                      > \r\n                                          </TextField> \r\n                                        </span>  \r\n                            </li>\r\n                            <li className={classes.li}>\r\n                                <span className={classes.infoTitle}>STATUS</span> \r\n                                {getStatusLabel(person.status)} \r\n                            </li>\r\n      \r\n\r\n                        </ul>\r\n\r\n                    </AccordionDetails>\r\n                    </Accordion>\r\n                </div>\r\n            </Grid> \r\n          ))}\r\n    </Grid>\r\n    </React.Fragment>\r\n  );\r\n}\r\n","import React, { useEffect } from 'react';\r\nimport Button from '@material-ui/core/Button';\r\nimport CssBaseline from '@material-ui/core/CssBaseline';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport GlobalState from './../GlobalState';\r\nimport Alert from '@material-ui/lab/Alert';\r\nimport PropTypes from 'prop-types';\r\nimport MaskedInput from 'react-text-mask';\r\nimport { FormControl, Grid, Input, InputLabel } from '@material-ui/core';\r\nimport BookService from './services/BookService';\r\nimport PersonsBox from './PersonsBox';\r\nimport { width } from '@material-ui/system';\r\n\r\n\r\nconst isBoolean = (param) => typeof(param) === \"boolean\"\r\n\r\nconst useFocus = (initialFocus = false, id = \"\") => {\r\n    const [focus, setFocus] = React.useState(initialFocus)\r\n    const setFocusWithTrueDefault = (param) => setFocus(isBoolean(param)? param : true)\r\n    return ([\r\n        setFocusWithTrueDefault, {\r\n            autoFocus: focus,\r\n            key: `${id}${focus}`,\r\n            onFocus: () => setFocus(true),\r\n            onBlur: () => setFocus(false),\r\n        },\r\n    ])\r\n}\r\n\r\n\r\nfunction TextMaskCustom(props) {\r\n    const { inputRef, ...other } = props;\r\n  \r\n    return (\r\n      <MaskedInput\r\n        {...other}\r\n        ref={(ref) => {\r\n          inputRef(ref ? ref.inputElement : null);\r\n        }}\r\n        mask={[/\\d/, /\\d/, /\\d/, '-', /\\d/, /\\d/, /\\d/, '-', /\\d/, /\\d/, /\\d/]}\r\n        // placeholderChar={'\\u2000'}\r\n        showMask\r\n      />\r\n    );\r\n  }\r\n  \r\n  TextMaskCustom.propTypes = {\r\n    inputRef: PropTypes.func.isRequired,\r\n  };\r\n\r\n\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n\r\n    root: {\r\n        width: '100%',\r\n        '& > * + *': {\r\n          marginTop: theme.spacing(2),\r\n        },\r\n        marginTop: \"20px\"\r\n      },  \r\n\r\n    paper: {\r\n        marginTop: theme.spacing(8),\r\n        display: 'flex',\r\n        flexDirection: 'column',\r\n        alignItems: 'center',\r\n    },\r\n\r\n    avatar: {\r\n        margin: theme.spacing(1),\r\n        backgroundColor: theme.palette.secondary.main,\r\n    },\r\n\r\n    form: {\r\n        width: '100%', // Fix IE 11 issue.\r\n        marginTop: theme.spacing(1),\r\n    },\r\n\r\n    Find: {\r\n        width: \"80px\"\r\n    },\r\n\r\n    Clear:{\r\n        marginRight: \"20px\"\r\n    },\r\n\r\n    title:{\r\n        marginTop : \"20px\"\r\n    },\r\n\r\n    TextBox:{\r\n        marginTop: \"30px\",\r\n        \"& > *\" :\r\n        {\r\n            textAlign: \"center\"\r\n        },\r\n  \r\n    },\r\n\r\n    TextField:{\r\n\r\n    },\r\n\r\n    NoRecordsFound:{\r\n        marginTop: \"20px\",\r\n        color: \"red\",\r\n        fontWeight: \"600\",\r\n        fontSize: \"14px\",\r\n    },\r\n\r\n    PersonsBox:{\r\n        marginTop : \"20px\",\r\n        marginBottom: \"50px\",\r\n    }\r\n\r\n}));\r\n\r\nexport default function FindByRef() {\r\n  const classes = useStyles();\r\n  const [state, setState] = React.useContext(GlobalState);\r\n  \r\n  const [setFocus, focusProps] = useFocus(true);\r\n\r\n//   useEffect( () =>\r\n//   {\r\n//      findRecords();\r\n//   }, [state.findRecords]);\r\n\r\n useEffect ( () => {\r\n    setState(state => ({...state, foundRecords : []}));\r\n }, [])\r\n\r\n  useEffect( () => {\r\n    BookService.getBookingsByRef(state.ref).then( (res)=>\r\n    {\r\n        if (res.data.length > 0)\r\n        {\r\n            setState(state => ({...state, foundRecords : res.data}));\r\n        }\r\n    });\r\n    }, [state.RefreshPersonInfo]);\r\n\r\n    const handleChange = (event) =>\r\n    {\r\n        setState(state => ({...state, ref : event.target.value}));\r\n        setState(state => ({...state, refError : false})); \r\n    }\r\n\r\n    const clearField = () =>\r\n    {\r\n        setState(state => ({...state, refError : false})); \r\n        setState(state => ({...state, ref : '___-___-___'}));\r\n        setState(state => ({...state, foundRecords : []}));\r\n        setFocus();\r\n    }\r\n\r\n    const findRecords = () =>\r\n    {\r\n        if (!state.ref || state.ref.indexOf('_') >= 0)\r\n        {\r\n            setState(state => ({...state, refError : true}));  \r\n            return;\r\n        }\r\n\r\n        setState(state => ({...state, submiting : true}));\r\n        setState(state => ({...state, foundRecords : []}));\r\n\r\n        BookService.getBookingsByRef(state.ref).then( (res)=>\r\n        {\r\n            setState(state => ({...state, submiting : false}));\r\n            if (res.data.length > 0)\r\n            {\r\n                setState(state => ({...state, foundRecords : res.data}));\r\n            }\r\n            else\r\n            {\r\n                setState(state => ({...state, foundRecords : null}));\r\n            }\r\n            \r\n            console.log(res.data);\r\n\r\n        }).catch( (err) =>\r\n        {\r\n            console.log(err);\r\n            setState(state => ({...state, submiting : false}));\r\n        });\r\n    }\r\n\r\n  return (\r\n    <React.Fragment>\r\n        <CssBaseline />\r\n        <div className={classes.title}>\r\n            <Typography component=\"h6\" variant=\"h6\" align=\"center\">\r\n                Find Booking Appoinments\r\n            </Typography>  \r\n        </div> \r\n\r\n        <Grid container direction=\"column\" spacing={1} justify=\"flex-start\"  alignItems=\"center\">\r\n\r\n        <Grid item xs={12} md={12}>\r\n            <FormControl className={classes.TextBox}>\r\n                <TextField\r\n                    {...focusProps}\r\n                    autoFocus \r\n                    pattern=\"[0-9]*\"\r\n                    error = {state.refError ? true : false} \r\n                    value = {state.ref}\r\n                    className = {classes.TextField}\r\n                    width = \"50px\"\r\n                    onChange={handleChange}\r\n                    label=\"Reference No.\"\r\n                    helperText=\"Enter Your 9-digits Reference No.\"\r\n                    name=\"refNo\"\r\n                    id=\"refNo\"\r\n                    variant=\"outlined\"\r\n                    \r\n                    size=\"medium\"\r\n                    margin=\"normal\"\r\n                    fullWidth = {true}\r\n                    InputProps={{\r\n                        inputComponent: TextMaskCustom,\r\n                        style: { textAlign: 'center', fontSize:\"24px\", width: \"210px\", paddingLeft: \"20px\" }\r\n                    }}\r\n\r\n                    onKeyPress= {event => {\r\n                        if (event.key === 'Enter') {\r\n                            findRecords();\r\n                        }\r\n                      }}\r\n                />         \r\n            </FormControl>\r\n        </Grid>\r\n\r\n        <Grid item xs={12} md={12}>\r\n               \r\n                <Button\r\n                    disabled = {state.submiting}\r\n                    color=\"default\"\r\n                    onClick = {clearField}\r\n                    onTouchTap = {clearField}\r\n                    className={classes.Clear}\r\n                >\r\n                    Clear \r\n                </Button>  \r\n            \r\n                <Button\r\n                    type=\"button\"\r\n                    disabled = {state.submiting}\r\n                    variant=\"contained\"\r\n                    color=\"primary\"\r\n                    onClick = {findRecords}\r\n                    onTouchTap = {findRecords}\r\n                    className={classes.Find}\r\n                >\r\n                    Find \r\n                </Button>  \r\n        </Grid>\r\n\r\n        <Grid item xs={12} md={12}>\r\n\r\n                    \r\n\r\n            {state.foundRecords && state.foundRecords.length > 0 && (\r\n                <React.Fragment>\r\n\r\n                    <div className={classes.PersonsBox}>\r\n                          <PersonsBox/>\r\n                    </div>\r\n                    \r\n\r\n\r\n                </React.Fragment>\r\n            )}   \r\n\r\n            {!state.foundRecords && (\r\n                <React.Fragment>\r\n\r\n                <div className={classes.root}>\r\n                    <Alert severity=\"error\"> <strong>No Records Found !</strong> <br/> Please check you reference number again.</Alert>\r\n                </div> \r\n                   \r\n                </React.Fragment>\r\n            )}\r\n\r\n        </Grid>\r\n        \r\n        \r\n        </Grid>\r\n        \r\n    </React.Fragment>\r\n   \r\n  );\r\n}","import React, { useEffect, useState } from 'react';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport PropTypes from 'prop-types';\r\nimport dateformat from 'dateformat';\r\nimport BookService from '../services/BookService';\r\n\r\nimport CircularProgress from '@material-ui/core/CircularProgress';\r\n\r\nimport GlobalState from '../../GlobalState';\r\n\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n\r\n    Container: {\r\n        width: \"100%\",\r\n        paddingTop: \"70%\",\r\n        position: \"relative\",\r\n        backgroundColor: \"#fff\",\r\n        cursor: \"pointer\"\r\n    },\r\n\r\n    ContainerPast: {\r\n        width: \"100%\",\r\n        paddingTop: \"70%\",\r\n        position: \"relative\",\r\n        backgroundColor: \"#fafafa\"\r\n    },\r\n    \r\n    DayLabel: {\r\n        position: \"absolute\",\r\n        top: \"5px\",\r\n        right: \"5px\",\r\n        color: \"#555\",\r\n        fontSize: \"1rem\"\r\n    },\r\n\r\n    DayLabelToday: {\r\n        position: \"absolute\",\r\n        top: \"5px\",\r\n        right: \"5px\",\r\n        backgroundColor: \"#1a73e8\",\r\n        color: \"#fff\",\r\n        fontSize: \"1rem\",\r\n        borderRadius: \"50%\",\r\n        padding: \"5px\",\r\n        lineHight: \"35px\",\r\n        minWidth: \"35px\"\r\n    },\r\n\r\n    DayLabelDisabled: {\r\n        position: \"absolute\",\r\n        top: \"5px\",\r\n        right: \"5px\",\r\n        color: \"#ddd\",\r\n        fontSize: \"1rem\"\r\n    },\r\n\r\n    BookingCountLabel: {\r\n        position: \"absolute\",\r\n        top: \"35%\",\r\n        left: \"40%\",\r\n        color: \"#3f51b5\",\r\n        backgroundColor: \"#ebedf7\",\r\n        fontSize: \"16px\",\r\n        fontWeight: \"600\",\r\n        padding: \"10px\",\r\n        borderRadius: \"50%\",\r\n        minWidth: \"40px\",\r\n        lineHight: \"40px\",\r\n        cursor: \"pointer\",\r\n        textAlign: \"center\"\r\n    },\r\n\r\n    BookingCountLabelBusy: {\r\n        position: \"absolute\",\r\n        top: \"35%\",\r\n        left: \"40%\",\r\n        color: \"#b00000\",\r\n        backgroundColor: \"#fce6e6\",\r\n        fontSize: \"16px\",\r\n        fontWeight: \"600\",\r\n        padding: \"10px\",\r\n        borderRadius: \"50%\",\r\n        minWidth: \"40px\",\r\n        cursor: \"pointer\",\r\n        textAlign: \"center\"\r\n    },\r\n\r\n    LoadingProgress: {\r\n        position: \"absolute\",\r\n        top: \"40%\",\r\n        left: \"40%\",\r\n      },\r\n\r\n      BookingCountGauge: {\r\n        position: \"absolute\",\r\n        bottom: \"5%\",\r\n        left: \"8%\",\r\n        width : \"8%\",\r\n        height: \"85%\"\r\n    },\r\n\r\n  }));\r\n\r\nconst MAX_BOOKING_COUNT = 10;  \r\n\r\nconst MonthViewCell = ({key, cellIndex, month, daysInMonth, dayClicked}) => {\r\n    const classes = useStyles();\r\n\r\n    const [state, setState] = React.useContext(GlobalState);\r\n\r\n    const [dateStr, setDateStr] = React.useState('');\r\n\r\n    const [cellDate, setCellDate] = React.useState(new Date());\r\n\r\n    const [bookingsCount, setBookingsCount] = React.useState(-1);\r\n\r\n    const [disableDay, setDisableDay] = React.useState(false);\r\n\r\n    const [isPast, setIsPast] = React.useState(false);\r\n\r\n    useEffect( () => {\r\n\r\n        if (cellIndex <= daysInMonth.length)\r\n        {\r\n            const date = daysInMonth[cellIndex - 1];\r\n            const dateStr = dateformat(date, 'yyyy-mm-dd');\r\n            setDateStr(dateStr);\r\n            setCellDate(date);\r\n            setDisableDay(date.getMonth() !== month - 1);\r\n            const todayStr = dateformat(new Date(), 'yyyy-mm-dd');\r\n            setIsPast(dateStr < todayStr);\r\n        }\r\n        else\r\n        {\r\n            const day = cellIndex - daysInMonth.length;\r\n            const date = new Date((daysInMonth[daysInMonth.length - 1].getTime() + ( day * 86400000)));\r\n            const dateStr = dateformat(date, 'yyyy-mm-dd');\r\n            setDateStr(dateStr);\r\n            setCellDate(date);\r\n            setDisableDay(true);\r\n            const todayStr = dateformat(new Date(), 'yyyy-mm-dd');\r\n            setIsPast(dateStr < todayStr);\r\n        }\r\n\r\n    }, [cellIndex, month, daysInMonth]);\r\n\r\n    useEffect ( () => {\r\n\r\n        const fecthData = async () =>\r\n        {\r\n            if (!dateStr || dateStr.length <= 0)\r\n            {\r\n                return;\r\n            }\r\n        \r\n            if (disableDay)\r\n            {\r\n                setBookingsCount(-2);\r\n                return;\r\n            }\r\n\r\n            setBookingsCount(-1);\r\n\r\n            var res = state.AdminCalendarCache?.find(record => record.method === 'getBookingsCountByDateStr' && record.query === dateStr)?.res;\r\n\r\n            if (!res)\r\n            {\r\n                res = await BookService.getAllBookingsCountByDateStr(dateStr);\r\n                setState(state => ({...state, AdminCalendarCache : [...state.AdminCalendarCache, {method: 'getBookingsCountByDateStr' , query : dateStr, res: res}]}));\r\n            }\r\n        \r\n            if (res.data.count >= 0)\r\n            {\r\n                setBookingsCount(res.data.count);\r\n            }\r\n\r\n        }\r\n\r\n      fecthData();\r\n\r\n    }, [dateStr]);\r\n\r\n    const getDayLabel = (_cellIndex , _month , _daysInMonth) =>\r\n    {\r\n        var date = null;\r\n        var disabled = false;\r\n        var day = -1;\r\n\r\n    \r\n\r\n        if (_cellIndex <= _daysInMonth.length)\r\n        {\r\n            date = _daysInMonth[_cellIndex - 1];\r\n            day = date.getDate();\r\n            if (date.getMonth() !== _month - 1)\r\n            {\r\n                disabled = true;\r\n            }\r\n        }\r\n        else\r\n        {\r\n            const _day = _cellIndex - _daysInMonth.length;\r\n            const date = new Date((_daysInMonth[_daysInMonth.length - 1].getTime() + ( _day * 86400000)));\r\n            day = date.getDate();\r\n            disabled = true;\r\n        }\r\n\r\n        const isToday = dateformat(new Date(),'yyyy-mm-dd') === dateformat(date, 'yyyy-mm-dd');\r\n\r\n        return (\r\n            <span className={(disabled) ? classes.DayLabelDisabled : isToday ? classes.DayLabelToday : classes.DayLabel}>\r\n                 {day > 0 ? `${day}` : ''}\r\n             </span>\r\n        );\r\n    }\r\n\r\n    const getBookingsCountLabel = (_bookingsCount) =>\r\n    {\r\n        if (_bookingsCount === -1)\r\n        {\r\n            return (\r\n                <div className={classes.LoadingProgress}>\r\n                      <CircularProgress disableShrink  />\r\n                </div>\r\n            );  \r\n        }\r\n        else if (_bookingsCount > 0 )\r\n        {\r\n            if (_bookingsCount >= MAX_BOOKING_COUNT / 2)\r\n            {\r\n                return (\r\n                    <div onClick={(event => dayClicked(event,cellDate))} className={classes.BookingCountLabelBusy}>\r\n                        {_bookingsCount < 10 ?  ` ${_bookingsCount}` : `${_bookingsCount}`}\r\n                    </div>\r\n                );\r\n            }\r\n            else\r\n            {\r\n                return (\r\n                    <div onClick={(event => dayClicked(event,cellDate))} className={classes.BookingCountLabel}>\r\n                          {_bookingsCount < 10 ?  ` ${_bookingsCount}` : `${_bookingsCount}`}\r\n                    </div>\r\n                );\r\n            }\r\n        }\r\n    }\r\n\r\n    const getBookingsCountGauge = (_bookingsCount) =>\r\n    {\r\n        if (_bookingsCount > 0)\r\n        {\r\n            let percent = (_bookingsCount / MAX_BOOKING_COUNT) * 100;\r\n            if (percent > 100)\r\n            {\r\n                percent = 100;\r\n            }\r\n\r\n            percent = 100 - percent;\r\n\r\n            return (\r\n\r\n                <div className={classes.BookingCountGauge}>\r\n                  <div style={{padding:\"0\", margin:\"0\", width:\"100%\", height:\"100%\", backgroundColor: \"#3f51b5\"}} >\r\n                        <div  style={{padding:\"0\", margin:\"0\", width:\"100%\", height:`${percent}%`, backgroundColor: \"#fafafa\"}} >\r\n\r\n                        </div>\r\n                  </div>\r\n                </div>\r\n            );\r\n        }\r\n    }\r\n\r\n    return (\r\n        <React.Fragment>\r\n\r\n            <div className={classes.Container}  onClick={(event => dayClicked(event,cellDate))} >\r\n\r\n              {getDayLabel(cellIndex, month, daysInMonth)}\r\n\r\n              {getBookingsCountLabel(bookingsCount)}\r\n\r\n              {getBookingsCountGauge(bookingsCount)}\r\n\r\n            </div>\r\n\r\n        </React.Fragment>\r\n\r\n\r\n    );\r\n}\r\n\r\nMonthViewCell.propTypes = {\r\n    key: PropTypes.string.isRequired,\r\n    cellIndex: PropTypes.number.isRequired,\r\n    month: PropTypes.number.isRequired,\r\n    daysInMonth: PropTypes.arrayOf(PropTypes.date),\r\n    dayClicked: PropTypes.func\r\n  };\r\n\r\n \r\n  \r\nexport default MonthViewCell;","import calendar from 'node-calendar';\r\n\r\n\r\nexport default class CalendarUtil {\r\n\r\n    static getMonthRange = (month , year) =>\r\n    {\r\n        return new calendar.Calendar(calendar.SUNDAY).itermonthdates(year, month);\r\n    } \r\n\r\n} ","import React, { useEffect, useState } from 'react';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport PropTypes from 'prop-types';\r\nimport MonthViewCell from './MonthViewCell';\r\nimport CalendarUtil from './calendar-util';\r\n\r\nconst dayLables = ['Sun', 'Mon', 'Tue', 'Wed' , 'Thu', 'Fri', 'Sat'];\r\nconst days = [1,2,3,4,5,6,7]; \r\nconst rows = [1,2,3,4,5,6];\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n\r\n    table: {\r\n        width: \"100%\",\r\n        border: \"1px solid #ddd\",\r\n        borderCollapse: \"collapse\",\r\n    },\r\n\r\n    th: {\r\n        border: \"1px solid #ddd\",\r\n        borderCollapse: \"collapse\",\r\n        verticalAlign: \"middle\",\r\n        fontcolor: \"#555\",\r\n        fontWeight: \"400\",\r\n        fontSize: \"15px\",\r\n        paddingTop: \"5px\",\r\n        paddingBottom: \"5px\",\r\n        width: \"14%\"\r\n    },\r\n\r\n    td: {\r\n        border: \"1px solid #ddd\",\r\n        borderCollapse: \"collapse\",\r\n        verticalAlign: \"middle\",\r\n    }\r\n\r\n  }));\r\n\r\nconst MonthView = ({month, year, dayClicked}) => {\r\n    const classes = useStyles();\r\n\r\n    const daysInMonth = CalendarUtil.getMonthRange(month,year);\r\n\r\n    return (\r\n        <React.Fragment>\r\n\r\n            <table className={classes.table}>\r\n                <thead>\r\n                    <tr>\r\n                        {dayLables.map(label => (\r\n                            <th key={`th-${label}`} className={classes.th}>\r\n                                {label}\r\n                            </th>\r\n                        ))}\r\n                    </tr>\r\n                </thead>\r\n                <tbody>\r\n                    {rows.map(row => (\r\n                        <tr>\r\n                            {days.map(day => (\r\n                                <td className={classes.td}>\r\n                                    <MonthViewCell \r\n                                        key={`${month}${year}${(row-1) * days.length + day}`} \r\n                                        cellIndex={(row-1) * days.length + day} \r\n                                        month={month} \r\n                                        daysInMonth={daysInMonth}\r\n                                        dayClicked = {dayClicked}\r\n                                        />\r\n                                </td>\r\n                            ))}\r\n                        </tr>\r\n                    ))}            \r\n                </tbody>\r\n\r\n            </table>\r\n\r\n      \r\n        </React.Fragment>\r\n\r\n\r\n    );\r\n}\r\n\r\nMonthView.propTypes = {\r\n    month: PropTypes.number.isRequired,\r\n    year: PropTypes.number.isRequired,\r\n    dayClicked: PropTypes.func\r\n  };\r\n\r\n\r\nexport default MonthView;","import React, { useEffect, useState } from 'react';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport PropTypes from 'prop-types';\r\nimport dateformat from 'dateformat';\r\nimport BookService from '../services/BookService';\r\n\r\nimport CircularProgress from '@material-ui/core/CircularProgress';\r\nimport GlobalState from '../../GlobalState';\r\n\r\nimport axios from 'axios'\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n\r\n    Container: {\r\n        width: \"100%\",\r\n        paddingTop: \"40%\",\r\n        position: \"relative\",\r\n        backgroundColor: \"#fff\",\r\n        cursor: \"pointer\"\r\n    },\r\n\r\n    ContainerPast: {\r\n        width: \"100%\",\r\n        paddingTop: \"40%\",\r\n        position: \"relative\",\r\n        backgroundColor: \"#fafafa\",\r\n        cursor: \"pointer\"\r\n    },\r\n    \r\n    DayLabel: {\r\n        position: \"absolute\",\r\n        top: \"5px\",\r\n        right: \"5px\",\r\n        color: \"#555\",\r\n        fontSize: \"1rem\"\r\n    },\r\n\r\n    DayLabelDisabled: {\r\n        position: \"absolute\",\r\n        top: \"5px\",\r\n        right: \"5px\",\r\n        color: \"#ddd\",\r\n        fontSize: \"1rem\"\r\n    },\r\n\r\n    BookingCountLabel: {\r\n        position: \"absolute\",\r\n        top: \"25%\",\r\n        left: \"38%\",\r\n        color: \"#3f51b5\",\r\n        backgroundColor: \"#ebedf7\",\r\n        fontSize: \"14px\",\r\n        fontWeight: \"600\",\r\n        padding: \"5px\",\r\n        borderRadius: \"50%\",\r\n        minWidth: \"30px\",\r\n        cursor : \"pointer\",\r\n        textAlign: \"center\"\r\n    },\r\n\r\n    BookingCountLabelBusy: {\r\n        position: \"absolute\",\r\n        top: \"25%\",\r\n        left: \"38%\",\r\n        color: \"#b00000\",\r\n        backgroundColor: \"#fce6e6\",\r\n        fontSize: \"14px\",\r\n        fontWeight: \"600\",\r\n        padding: \"5px\",\r\n        borderRadius: \"50%\",\r\n        minWidth: \"30px\",\r\n        cursor : \"pointer\",\r\n        textAlign: \"center\"\r\n    },\r\n\r\n    LoadingProgress: {\r\n        position: \"absolute\",\r\n        top: \"40%\",\r\n        left: \"40%\",\r\n      },\r\n\r\n      BookingCountGauge: {\r\n        position: \"absolute\",\r\n        bottom: \"5%\",\r\n        left: \"8%\",\r\n        width : \"85%\",\r\n        height: \"8%\"\r\n    },\r\n\r\n  }));\r\n\r\nconst MAX_BOOKING_COUNT = 1;  \r\n\r\nconst WeekViewCell = ({key, date, time, dayClicked}) => {\r\n    const classes = useStyles();\r\n\r\n    const [state, setState] = React.useContext(GlobalState);\r\n    const [bookingsCount, setBookingsCount] = React.useState(-1);\r\n    const [isPast, setIsPast] = React.useState(false);\r\n\r\n    const [cellDate, setCellDate] = React.useState(new Date());\r\n\r\n    useEffect( () => {\r\n        const todayStr = dateformat(new Date(), 'yyyy-mm-dd');\r\n        setIsPast(date < todayStr);\r\n\r\n        setCellDate(new Date(date));\r\n\r\n    }, [date]);\r\n\r\n    useEffect ( () => {\r\n      \r\n      \r\n      \r\n        if (!date || date.length <= 0 || !time || time.length <= 0)\r\n        {\r\n            return;\r\n        }\r\n        \r\n        // if (isPast)\r\n        // {\r\n        //     setBookingsCount(-2);\r\n        //     return;\r\n        // }\r\n\r\n        setBookingsCount(-1);\r\n\r\n       \r\n\r\n        var res = state.AdminCalendarCache?.find(record => record.method === 'getBookingsCountByDateStrandTime' && record.query === `${date}${time}`)?.res;\r\n        if (res)\r\n        {\r\n            if (res.data.count >= 0)\r\n            {\r\n                setBookingsCount(res.data.count);\r\n            }  \r\n            return;\r\n        }\r\n\r\n        let source = axios.CancelToken.source();\r\n        BookService.getAllBookingsCountByDateStrandTime(date, time, source).then( res => {\r\n            if (res.data.count >= 0)\r\n            {\r\n                setBookingsCount(res.data.count);\r\n                setState(state => ({...state, AdminCalendarCache : [...state.AdminCalendarCache, {method: 'getBookingsCountByDateStrandTime' , query : `${date}${time}`, res: res}]}));\r\n            }  \r\n        }).catch( err => \r\n            {\r\n                //do nothing\r\n            });\r\n     \r\n        return () => {\r\n           if (source)\r\n              source.cancel('Cancelling in cleanup');\r\n        }\r\n     \r\n    }, [date, time]);\r\n\r\n\r\n    const getBookingsCountLabel = (_bookingsCount) =>\r\n    {\r\n        if (_bookingsCount === -1)\r\n        {\r\n            return (\r\n                <div className={classes.LoadingProgress}>\r\n                      <CircularProgress disableShrink  />\r\n                </div>\r\n            );  \r\n        }\r\n        else if (_bookingsCount > 0)\r\n        {\r\n            if (_bookingsCount >= MAX_BOOKING_COUNT)\r\n            {\r\n                return (\r\n                    <div onClick={(event => dayClicked(event,cellDate))} className={classes.BookingCountLabelBusy}>\r\n                          {_bookingsCount < 10 ? ` ${_bookingsCount}` : `${_bookingsCount}` }\r\n                    </div>\r\n                );\r\n            }\r\n            else\r\n            {\r\n                return (\r\n                    <div onClick={(event => dayClicked(event,cellDate))} className={classes.BookingCountLabel}>\r\n                        {_bookingsCount < 10 ? ` ${_bookingsCount}` : `${_bookingsCount}` }\r\n                    </div>\r\n                );\r\n            }\r\n        }\r\n    }\r\n\r\n    const getBookingsCountGauge = (_bookingsCount) =>\r\n    {\r\n        if (_bookingsCount > 0 )\r\n        {\r\n            let percent = (_bookingsCount / MAX_BOOKING_COUNT) * 100;\r\n            if (percent > 100)\r\n            {\r\n                percent = 100;\r\n            }\r\n\r\n            // percent = 100 - percent;\r\n\r\n            return (\r\n\r\n                <div className={classes.BookingCountGauge}>\r\n                  <div style={{padding:\"0\", margin:\"0\", width:\"100%\", height:\"100%\", backgroundColor: \"#f5f5f5\"}} >\r\n                        <div  style={{padding:\"0\", margin:\"0\", height:\"100%\", width:`${percent}%`, backgroundColor: \"#3f51b5\"}} >\r\n\r\n                        </div>\r\n                  </div>\r\n                </div>\r\n            );\r\n        }\r\n    }\r\n\r\n    return (\r\n        <React.Fragment>\r\n\r\n            <div className={isPast ? classes.ContainerPast : classes.Container} onClick={(event => dayClicked(event,cellDate))} >\r\n\r\n              {getBookingsCountLabel(bookingsCount)}\r\n\r\n              {getBookingsCountGauge(bookingsCount)}\r\n\r\n            </div>\r\n\r\n        </React.Fragment>\r\n\r\n\r\n    );\r\n}\r\n\r\nWeekViewCell.propTypes = {\r\n    key: PropTypes.string.isRequired,\r\n    date: PropTypes.string.isRequired,\r\n    time: PropTypes.string.isRequired,\r\n    dayClicked: PropTypes.func\r\n  };\r\n\r\n \r\n  \r\nexport default WeekViewCell;","import React, { useEffect, useState } from 'react';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport PropTypes from 'prop-types';\r\nimport WeekViewCell from './WeekViewCell';\r\nimport dateformat from 'dateformat';\r\n\r\nconst rows = [\r\n    '10:00 AM',\r\n    '10:30 AM', \r\n    '11:00 AM', \r\n    '11:30 AM', \r\n    '12:00 PM',\r\n    '12:30 PM',\r\n    '01:00 PM',\r\n    '01:30 PM',\r\n    '02:00 PM',\r\n    '02:30 PM',\r\n    '03:00 PM',\r\n    '03:30 PM',\r\n    '04:00 PM',\r\n    '04:30 PM',\r\n    '05:00 PM',\r\n    '05:30 PM',\r\n];\r\n\r\n\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n\r\n    table: {\r\n        width: \"100%\",\r\n        border: \"1px solid #ddd\",\r\n        borderCollapse: \"collapse\",\r\n        overflowY: \"auto\"\r\n    },\r\n\r\n    th: {\r\n        border: \"1px solid #ddd\",\r\n        borderCollapse: \"collapse\",\r\n        verticalAlign: \"middle\",\r\n        fontcolor: \"#555\",\r\n        fontWeight: \"400\",\r\n        fontSize: \"15px\",\r\n        paddingTop: \"5px\",\r\n        paddingBottom: \"5px\",\r\n        width: \"12%\", \r\n    },\r\n\r\n    td: {\r\n        border: \"1px solid #ddd\",\r\n        borderCollapse: \"collapse\",\r\n        verticalAlign: \"middle\",\r\n        height : \"50px\",\r\n        width: \"12%\", \r\n    }\r\n\r\n  }));\r\n\r\nconst WeekView = ({dates, dayClicked}) => {\r\n    const classes = useStyles();\r\n\r\n    return (\r\n        <React.Fragment>\r\n\r\n        <div style={{overflowY: \"scroll\" , height: \"60px\"}}>\r\n            <table className={classes.table}>\r\n                <thead>\r\n                    <tr>\r\n                        <th style={{width: \"7%\"}}>\r\n                        \r\n                        </th>\r\n                            {dates.map(date => (\r\n                                <th className={classes.th}>\r\n                                    <div style={{paddingBottom: \"5px\", color: \"#aaa\"}}>\r\n                                         {dateformat(date, 'ddd')}\r\n                                    </div>\r\n                                    <div>\r\n                                        <span style={{color: \"#aaa\"}}>\r\n                                            {dateformat(date, 'mmm ')}\r\n                                        </span> \r\n                                        <span  style={(dateformat(new Date(),'yyyy-mm-dd') === dateformat(date, 'yyyy-mm-dd')) ? { backgroundColor: \"#1a73e8\", color: \"#fff\", borderRadius: \"50%\",  padding: \"5px\",} : {color: \"#333\", fontWeight:\"500\"}}>\r\n                                             {dateformat(date, ' d')}\r\n                                        </span>\r\n                                       \r\n                                    </div>\r\n                                </th>\r\n                        ))}\r\n                    </tr>\r\n                </thead>\r\n             </table>\r\n\r\n        </div>\r\n\r\n            <div style={{overflowY: \"scroll\" , height: \"70vh\"}}>\r\n                <table className={classes.table}>   \r\n                    <tbody>\r\n                        {rows.map(row => (\r\n                            <tr>\r\n                                <td style={{width: \"7%\"}}>\r\n                                    {row}\r\n                                </td>\r\n                                {dates.map(day => (\r\n                                    <td className={classes.td}>\r\n                                        <WeekViewCell \r\n                                                dayClicked = {dayClicked}\r\n                                                key={`${dateformat(day,'yyyy-mm-dd')}-${row.replace(':','-')}`} \r\n                                                date={dateformat(day,'yyyy-mm-dd')} \r\n                                                time={row}/>\r\n                                    </td>\r\n                                ))}\r\n                            </tr>\r\n                        ))}            \r\n                    </tbody>\r\n                </table>\r\n            </div>                    \r\n      \r\n        </React.Fragment>\r\n\r\n\r\n    );\r\n}\r\n\r\nWeekView.propTypes = {\r\n    dates: PropTypes.arrayOf(PropTypes.any).isRequired,\r\n    dayClicked: PropTypes.func\r\n  };\r\n\r\n\r\nexport default WeekView;","import React, { useEffect, useRef, useState } from \"react\";\r\nimport BookService from \"./services/BookService\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport {\r\n  Backdrop,\r\n  Button,\r\n  Checkbox,\r\n  CircularProgress,\r\n  Divider,\r\n  FormControlLabel,\r\n  Grid,\r\n  InputAdornment,\r\n  InputLabel,\r\n  Link,\r\n  makeStyles,\r\n  MenuItem,\r\n  Select,\r\n  Switch,\r\n  TextField,\r\n  Tooltip,\r\n} from \"@material-ui/core\";\r\nimport GlobalState from \"../GlobalState\";\r\nimport { withStyles } from \"@material-ui/core/styles\";\r\n\r\nimport CreditCardIcon from \"@material-ui/icons/CreditCard\";\r\n\r\nimport Dialog from \"@material-ui/core/Dialog\";\r\nimport DialogContent from \"@material-ui/core/DialogContent\";\r\n\r\nimport DialogTitle from \"@material-ui/core/DialogTitle\";\r\nimport Draggable from \"react-draggable\";\r\nimport Paper from \"@material-ui/core/Paper\";\r\n\r\nimport Alert from \"@material-ui/lab/Alert\";\r\n\r\nimport PropTypes from \"prop-types\";\r\nimport LinearProgress from \"@material-ui/core/LinearProgress\";\r\nimport Box from \"@material-ui/core/Box\";\r\n\r\nimport Radio from \"@material-ui/core/Radio\";\r\nimport RadioGroup from \"@material-ui/core/RadioGroup\";\r\nimport FormControl from \"@material-ui/core/FormControl\";\r\nimport FormLabel from \"@material-ui/core/FormLabel\";\r\nimport { corporates } from \"./Corporates\";\r\nimport NumberFormat from \"react-number-format\";\r\n\r\nimport AddIcon from \"@material-ui/icons/Add\";\r\nimport { validate } from \"email-validator\";\r\nimport DateRangeIcon from \"@material-ui/icons/DateRange\";\r\nimport { CalendarColors } from \"../Admin/calendar-admin/colors\";\r\n\r\nvar interval;\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  title: {\r\n    marginTop: theme.spacing(0),\r\n    marginBottom: theme.spacing(1),\r\n  },\r\n\r\n  refreshButton: {\r\n    marginLeft: theme.spacing(2),\r\n  },\r\n\r\n  checkIcon: {\r\n    color: \"green\",\r\n  },\r\n\r\n  closeIcon: {\r\n    color: \"red\",\r\n  },\r\n\r\n  RefLink: {\r\n    cursor: \"pointer\",\r\n  },\r\n\r\n  BookedLabel: {\r\n    backgroundColor: \"#606060\",\r\n    color: \"#fff\",\r\n    paddingRight: \"10px\",\r\n    paddingLeft: \"10px\",\r\n  },\r\n\r\n  PatientAttendedLabel: {\r\n    backgroundColor: \"#0066aa\",\r\n    color: \"#fff\",\r\n    paddingRight: \"15px\",\r\n    paddingLeft: \"10px\",\r\n  },\r\n\r\n  SampleTakenLabel: {\r\n    backgroundColor: \"#0066cc\",\r\n    color: \"#fff\",\r\n    paddingRight: \"40px\",\r\n    paddingLeft: \"10px\",\r\n  },\r\n\r\n  ReportSentLabel: {\r\n    backgroundColor: \"#009900\",\r\n    color: \"#fff\",\r\n    paddingRight: \"90px\",\r\n    paddingLeft: \"10px\",\r\n  },\r\n\r\n  ReportCertSentLabel: {\r\n    backgroundColor: \"#009900\",\r\n    color: \"#fff\",\r\n    paddingRight: \"68px\",\r\n    paddingLeft: \"10px\",\r\n  },\r\n\r\n  archiveButton: {},\r\n\r\n  smartMatchButton: {\r\n    backgroundColor: \"#2f942e\",\r\n    \"&:hover\": {\r\n      background: \"green\",\r\n      color: \"#fff\",\r\n    },\r\n    textDecoration: \"none !important\",\r\n    marginRight: \"10px\",\r\n    // padding: \"10px\"\r\n  },\r\n\r\n  infoTitle: {\r\n    fontWeight: \"400\",\r\n  },\r\n\r\n  infoData: {\r\n    paddingLeft: \"10px\",\r\n    fontWeight: \"800\",\r\n  },\r\n\r\n  matchButton: {\r\n    marginTop: \"30px\",\r\n    marginBottom: \"20px\",\r\n    backgroundColor: \"#2f942e\",\r\n    \"&:hover\": {\r\n      background: \"green\",\r\n      color: \"#fff\",\r\n    },\r\n    textDecoration: \"none !important\",\r\n    padding: \"10px\",\r\n    paddingLeft: \"50px\",\r\n    paddingRight: \"50px\",\r\n  },\r\n\r\n  resendButton: {\r\n    marginTop: \"5px\",\r\n    marginBottom: \"5px\",\r\n    backgroundColor: \"#2f942e\",\r\n    \"&:hover\": {\r\n      background: \"green\",\r\n      color: \"#fff\",\r\n    },\r\n    textDecoration: \"none !important\",\r\n    padding: \"10px\",\r\n    paddingLeft: \"50px\",\r\n    paddingRight: \"50px\",\r\n  },\r\n\r\n  resendFilesButton: {\r\n    marginTop: \"5px\",\r\n    marginBottom: \"5px\",\r\n    backgroundColor: \"#3792ad\",\r\n    \"&:hover\": {\r\n      background: \"#2f798f\",\r\n      color: \"#fff\",\r\n    },\r\n    textDecoration: \"none !important\",\r\n    padding: \"10px\",\r\n    paddingLeft: \"50px\",\r\n    paddingRight: \"50px\",\r\n  },\r\n\r\n  cancelButton: {\r\n    marginBottom: \"10px\",\r\n    textDecoration: \"none !important\",\r\n    padding: \"10px\",\r\n    paddingLeft: \"90px\",\r\n    paddingRight: \"90px\",\r\n  },\r\n\r\n  CalendarIcon: {\r\n    color: theme.palette.primary.main,\r\n  },\r\n\r\n  DateTimeLabel: {\r\n    fontWeight: \"500\",\r\n    color: theme.palette.primary.main,\r\n  },\r\n\r\n  backdrop: {\r\n    zIndex: theme.zIndex.drawer + 5,\r\n    color: \"#fff\",\r\n  },\r\n\r\n  PriceLabelPaid:{\r\n    color: theme.palette.primary.main,\r\n    fontWeight: \"600\"\r\n  },\r\n\r\n  PriceLabelNotPaid:{\r\n    color: theme.palette.secondary.main,\r\n    fontWeight: \"600\"\r\n  },\r\n\r\n\r\n}));\r\n\r\nconst Packages = [\r\n  { packageName: \"Consultation with Consultant Gynaecologist\" },\r\n  { packageName: `Coil Fitting/Coil Removal` },\r\n  { packageName: `Well Woman Check` },\r\n  { packageName: `Sexual Health Screening` },\r\n  { packageName: `Pre-pregnancy/Fertility check` },\r\n  { packageName: `Gynaecological Ultrasound` },\r\n  { packageName: `HPV Vaccination` },\r\n  { packageName: `Cervical / Pap Smear` },\r\n  { packageName: `HPV Treatment / Wart Cryo-Therapy` },\r\n];\r\n\r\nfunction NumberFormatCustom(props) {\r\n  const { inputRef, onChange, ...other } = props;\r\n\r\n  return (\r\n    <NumberFormat\r\n      {...other}\r\n      getInputRef={inputRef}\r\n      onValueChange={(values) => {\r\n        onChange({\r\n          target: {\r\n            name: props.name,\r\n            value: values.value,\r\n          },\r\n        });\r\n      }}\r\n      thousandSeparator\r\n      isNumericString\r\n      prefix=\"\"\r\n    />\r\n  );\r\n}\r\n\r\nNumberFormatCustom.propTypes = {\r\n  inputRef: PropTypes.func.isRequired,\r\n  name: PropTypes.string.isRequired,\r\n  onChange: PropTypes.func.isRequired,\r\n};\r\n\r\nconst BorderLinearProgress = withStyles((theme) => ({\r\n  root: {\r\n    height: 10,\r\n    borderRadius: 5,\r\n  },\r\n  colorPrimary: {\r\n    backgroundColor: \"#cedbce\", //theme.palette.grey[theme.palette.type === 'light' ? 200 : 700],\r\n  },\r\n  bar: {\r\n    borderRadius: 5,\r\n    backgroundColor: \"#2f942e\",\r\n  },\r\n}))(LinearProgress);\r\nfunction LinearProgressWithLabel(props) {\r\n  return (\r\n    <Box display=\"flex\" alignItems=\"center\">\r\n      <Box width=\"100%\" mr={1}>\r\n        <BorderLinearProgress variant=\"determinate\" {...props} />\r\n      </Box>\r\n      <Box minWidth={35}>\r\n        <Typography\r\n          style={{ fontWeight: \"800\", color: \"#5e855e\" }}\r\n          variant=\"body2\"\r\n          color=\"textSecondary\"\r\n        >{`${Math.round(props.value)}%`}</Typography>\r\n      </Box>\r\n    </Box>\r\n  );\r\n}\r\n\r\nLinearProgressWithLabel.propTypes = {\r\n  /**\r\n   * The value of the progress indicator for the determinate and buffer variants.\r\n   * Value between 0 and 100.\r\n   */\r\n  value: PropTypes.number.isRequired,\r\n};\r\n\r\nfunction PaperComponent(props) {\r\n  return (\r\n    <Draggable\r\n      handle=\"#draggable-dialog-title\"\r\n      cancel={'[class*=\"MuiDialogContent-root\"]'}\r\n    >\r\n      <Paper {...props} />\r\n    </Draggable>\r\n  );\r\n}\r\n\r\nexport default function NewBookingDialog(props) {\r\n  const classes = useStyles();\r\n\r\n  const [state, setState] = React.useContext(GlobalState);\r\n  const [saving, setSaving] = useState(false);\r\n\r\n  const [fullname, setFullname] = React.useState(\"\");\r\n  const [fullnameError, setFullnameError] = React.useState(false);\r\n\r\n  const [phone, setPhone] = React.useState(\"\");\r\n  const [email, setEmail] = React.useState(\"\");\r\n  const [notes, setNotes] = React.useState(\"\");\r\n\r\n  \r\n  const fullnameChanged = (event) => {\r\n    setFullname(event.target.value);\r\n    setFullnameError(false);\r\n  };\r\n\r\n  const phoneChanged = (event) => {\r\n    setPhone(event.target.value);\r\n  };\r\n\r\n  const emailChanged = (event) => {\r\n    setEmail(event.target.value);\r\n  };\r\n\r\n\r\n  const notesChanged = (event) => {\r\n    setNotes(event.target.value);\r\n  };\r\n\r\n  const handleClose = () => {\r\n    if (saving) return;\r\n\r\n    setFullname(\"\");\r\n    setFullnameError(false);\r\n    setPhone(\"\");\r\n    setEmail(\"\");\r\n    setNotes(\"\");\r\n    \r\n    props.handleClose();\r\n    setSaving(false);\r\n  };\r\n\r\n  const validateBooking = () => {\r\n    let error = false;\r\n    if (!fullname || fullname.trim().length < 1) {\r\n      setFullnameError(true);\r\n      error = true;\r\n    }\r\n    return !error;\r\n  };\r\n\r\n  const saveClicked = async () => {\r\n    if (!validateBooking()) {\r\n      return;\r\n    }\r\n\r\n    setSaving(true);\r\n\r\n    try {\r\n      await BookService.addNewBooking({\r\n        bookingDate: props.date,\r\n        bookingTime: props.time,\r\n        fullname: fullname,\r\n        phone: phone,\r\n        email: email,\r\n        notes: notes,\r\n      });\r\n      setSaving(false);\r\n      setState((state) => ({\r\n        ...state,\r\n        bookingDialogDataChanged: !state.bookingDialogDataChanged\r\n          ? true\r\n          : false,\r\n      }));\r\n      handleClose();\r\n    } catch (err) {\r\n      console.error(err);\r\n      setSaving(false);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <React.Fragment>\r\n      {props.date && props.time && (\r\n        <React.Fragment>\r\n          <Dialog\r\n            maxWidth=\"xs\"\r\n            open={props.open}\r\n            onClose={handleClose}\r\n            PaperComponent={PaperComponent}\r\n            aria-labelledby=\"form-dialog-title\"\r\n          >\r\n            <DialogTitle id=\"draggable-dialog-title\">\r\n              <Grid\r\n                container\r\n                spacing={2}\r\n                direction=\"row\"\r\n                justify=\"center\"\r\n                alignItems=\"center\"\r\n              >\r\n                <Grid item>\r\n                  <AddIcon style={{ color: \"#f50057\", fontSize: \"3rem\" }} />\r\n                </Grid>\r\n\r\n                <Grid item>\r\n                  <div\r\n                    style={{\r\n                      color: \"#f50057\",\r\n                      paddingBottom: \"10px\",\r\n                      fontWeight: \"800\",\r\n                    }}\r\n                  >\r\n                    {\" \"}\r\n                    ADD New Booking{\" \"}\r\n                  </div>\r\n                </Grid>\r\n              </Grid>\r\n\r\n              <div style={{position:\"absolute\", top: \"5px\", right: \"5px\", backgroundColor:CalendarColors.GP_COLOR, color:\"#fff\", padding: \"0px 5px\", borderRadius:\"10px\", fontSize:\"1rem\"}}>\r\n                    GP\r\n              </div>\r\n\r\n\r\n              <Divider />\r\n            </DialogTitle>\r\n            <DialogContent>\r\n              <div\r\n                style={{\r\n                  height: \"400px\",\r\n                }}\r\n              >\r\n                <Grid\r\n                  container\r\n                  direction=\"row\"\r\n                  justify=\"stretch\"\r\n                  spacing={2}\r\n                  alignItems=\"center\"\r\n                >\r\n                  <Grid item xs={12}>\r\n                    <Grid\r\n                      container\r\n                      direction=\"row\"\r\n                      justify=\"center\"\r\n                      alignItems=\"center\"\r\n                      spacing={1}\r\n                    >\r\n                      <Grid item>\r\n                        <DateRangeIcon className={classes.CalendarIcon} />\r\n                      </Grid>\r\n                      <Grid item>\r\n                        <span className={classes.DateTimeLabel}>\r\n                          {props.date} , {props.time}\r\n                        </span>\r\n                      </Grid>\r\n                    </Grid>\r\n                  </Grid>\r\n\r\n                  <Grid item xs={12}>\r\n                    <TextField\r\n                      fullWidth\r\n                      autoFocus\r\n                      error={fullnameError}\r\n                      label=\"Full Name\"\r\n                      value={fullname}\r\n                      required\r\n                      onChange={fullnameChanged}\r\n                      name=\"fullname\"\r\n                      id=\"fullname-id\"\r\n                      autoComplete=\"none\"\r\n                    />\r\n                  </Grid>\r\n\r\n                  <Grid item xs={12}>\r\n                    <TextField\r\n                      fullWidth\r\n                      label=\"Telephone\"\r\n                      value={phone}\r\n                      onChange={phoneChanged}\r\n                      name=\"phone\"\r\n                      id=\"phone-id\"\r\n                      autoComplete=\"none\"\r\n                    />\r\n                  </Grid>\r\n\r\n                  <Grid item xs={12}>\r\n                    <TextField\r\n                      fullWidth\r\n                      label=\"Email\"\r\n                      value={email}\r\n                      onChange={emailChanged}\r\n                      name=\"email\"\r\n                      id=\"email-id\"\r\n                      autoComplete=\"none\"\r\n                    />\r\n                  </Grid>\r\n\r\n\r\n                  <Grid item xs={12}>\r\n                    <TextField\r\n                      fullWidth\r\n                      label=\"Notes\"\r\n                      value={notes}\r\n                      onChange={notesChanged}\r\n                      name=\"notes\"\r\n                      id=\"notes-id\"\r\n                      autoComplete=\"none\"\r\n                    />\r\n                  </Grid>\r\n\r\n                </Grid>\r\n\r\n                <div\r\n                  style={{\r\n                    position: \"absolute\",\r\n                    bottom: \"20px\",\r\n                    right: \"20px\",\r\n                  }}\r\n                >\r\n                  <Grid\r\n                    container\r\n                    direction=\"row\"\r\n                    justify=\"flex-end\"\r\n                    alignItems=\"center\"\r\n                    spacing={1}\r\n                  >\r\n                    <Grid item>\r\n                      <Button\r\n                        onClick={handleClose}\r\n                        style={{ width: \"100px\" }}\r\n                        disabled={saving}\r\n                      >\r\n                        back\r\n                      </Button>\r\n                    </Grid>\r\n                    <Grid item>\r\n                      <Button\r\n                        onClick={saveClicked}\r\n                        variant=\"contained\"\r\n                        color=\"secondary\"\r\n                        style={{ width: \"100px\" }}\r\n                        disabled={saving}\r\n                      >\r\n                        Save\r\n                      </Button>\r\n                    </Grid>\r\n                  </Grid>\r\n                </div>\r\n              </div>\r\n\r\n              <Backdrop className={classes.backdrop} open={saving}>\r\n                <CircularProgress color=\"inherit\" />\r\n              </Backdrop>\r\n            </DialogContent>\r\n          </Dialog>\r\n        </React.Fragment>\r\n      )}\r\n    </React.Fragment>\r\n  );\r\n}\r\n","import React, { useEffect, useState } from \"react\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport PropTypes from \"prop-types\";\r\nimport dateformat from \"dateformat\";\r\nimport BookService from \"../services/BookService\";\r\n\r\nimport CircularProgress from \"@material-ui/core/CircularProgress\";\r\nimport GlobalState from \"../../GlobalState\";\r\nimport BookingDialog from \"../BookingDialog\";\r\nimport NewBookingDialog from \"../NewBookingDialog\";\r\nimport clsx from \"clsx\";\r\nimport { CalendarColors } from \"../../Admin/calendar-admin/colors\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  Container: {\r\n    width: \"100%\",\r\n    height: \"50px\",\r\n    position: \"relative\",\r\n    backgroundColor: \"#fff\",\r\n    display: \"flex\",\r\n    alignItems: \"flex-start\",\r\n    justifyItems: \"flex-start\",\r\n    paddingLeft: \"10px\",\r\n  },\r\n\r\n  ContainerPast: {\r\n    width: \"100%\",\r\n    paddingTop: \"50px\",\r\n    position: \"relative\",\r\n    backgroundColor: \"#fafafa\",\r\n  },\r\n\r\n  DayLabel: {\r\n    position: \"absolute\",\r\n    top: \"5px\",\r\n    right: \"5px\",\r\n    color: \"#555\",\r\n    fontSize: \"1rem\",\r\n  },\r\n\r\n  DayLabelDisabled: {\r\n    position: \"absolute\",\r\n    top: \"5px\",\r\n    right: \"5px\",\r\n    color: \"#ddd\",\r\n    fontSize: \"1rem\",\r\n  },\r\n\r\n  LoadingProgress: {\r\n    position: \"absolute\",\r\n    top: \"10%\",\r\n    left: \"40%\",\r\n  },\r\n\r\n  BookingCountGauge: {\r\n    position: \"absolute\",\r\n    bottom: \"5%\",\r\n    left: \"8%\",\r\n    width: \"85%\",\r\n    height: \"8%\",\r\n  },\r\n\r\n  bookingBox: {\r\n    display: \"flex\",\r\n    marginRight: \"10px\",\r\n    marginTop: \"5px\",\r\n    padding: \"10px\",\r\n    maxWidth: \"150px\",\r\n    overflowX: \"hidden\",\r\n    border: \"1px solid #eee\",\r\n    fontSize: \"12px\",\r\n    fontWeight: \"500\",\r\n    cursor: \"pointer\",\r\n    backgroundColor: \"#ebedf7\",\r\n    color: \"#3f51b5\",\r\n    boxShadow: \"2px 4px #fafafa\",\r\n\r\n    \"&:hover\": {\r\n      background: \"#3f51b5\",\r\n      color: \"#ebedf7\",\r\n    },\r\n  },\r\n\r\n  bookingBoxNew: {\r\n    display: \"flex\",\r\n    marginRight: \"10px\",\r\n    marginTop: \"5px\",\r\n    padding: \"10px\",\r\n    maxWidth: \"150px\",\r\n    overflowX: \"hidden\",\r\n    border: \"1px solid #ddd\",\r\n    color: \"#ccc\",\r\n    fontSize: \"12px\",\r\n    fontWeight: \"500\",\r\n    cursor: \"pointer\",\r\n    backgroundColor: \"#fff\",\r\n\r\n    boxShadow: \"2px 4px #fafafa\",\r\n    transition: \"all 0.5s ease\",\r\n    borderRadius: \"4px\",\r\n\r\n    \"&:hover\": {\r\n      background: \"#fff\",\r\n      color: theme.palette.secondary.main,\r\n      borderColor: theme.palette.secondary.main,\r\n    },\r\n  },\r\n\r\n  bookingBoxSampleTaken: {\r\n    display: \"flex\",\r\n    marginRight: \"10px\",\r\n    marginTop: \"5px\",\r\n    padding: \"10px\",\r\n    maxWidth: \"150px\",\r\n    overflowX: \"hidden\",\r\n    border: \"1px solid #eee\",\r\n    fontSize: \"12px\",\r\n    fontWeight: \"500\",\r\n    cursor: \"pointer\",\r\n    backgroundColor: \"#0066cc\",\r\n    color: \"#eee\",\r\n    boxShadow: \"2px 4px #fafafa\",\r\n\r\n    \"&:hover\": {\r\n      background: \"#0059b3\",\r\n      color: \"#fafafa\",\r\n    },\r\n  },\r\n\r\n  bookingBoxPositive: {\r\n    display: \"flex\",\r\n    marginRight: \"10px\",\r\n    marginTop: \"5px\",\r\n    padding: \"10px\",\r\n    maxWidth: \"150px\",\r\n    overflowX: \"hidden\",\r\n    border: \"1px solid #eee\",\r\n    fontSize: \"12px\",\r\n    fontWeight: \"500\",\r\n    cursor: \"pointer\",\r\n    backgroundColor: \"#d40b0b\",\r\n    color: \"#fff2f2\",\r\n    boxShadow: \"2px 4px #fafafa\",\r\n\r\n    \"&:hover\": {\r\n      background: \"#bf0000\",\r\n      color: \"#fff\",\r\n    },\r\n  },\r\n\r\n  bookingBoxReportSent: {\r\n    display: \"flex\",\r\n    marginRight: \"10px\",\r\n    marginTop: \"5px\",\r\n    padding: \"10px\",\r\n    maxWidth: \"150px\",\r\n    overflowX: \"hidden\",\r\n    border: \"1px solid #eee\",\r\n    fontSize: \"12px\",\r\n    fontWeight: \"500\",\r\n    cursor: \"pointer\",\r\n    backgroundColor: \"#009900\",\r\n    color: \"#eee\",\r\n    boxShadow: \"2px 4px #fafafa\",\r\n\r\n    \"&:hover\": {\r\n      background: \"#006e00\",\r\n      color: \"#fafafa\",\r\n    },\r\n  },\r\n\r\n\r\n\r\n}));\r\n\r\nconst DayViewCell = ({ key, date, time }) => {\r\n  const classes = useStyles();\r\n\r\n  const [state, setState] = React.useContext(GlobalState);\r\n  const [bookings, setBookings] = React.useState(null);\r\n  const [filteredBookings, setFilteredBookings] = React.useState(null);\r\n  const [selectedBooking, setSelectedBooking] = React.useState(null);\r\n\r\n  const [refresh, setRefresh] = React.useState(true);\r\n\r\n  const [isPast, setIsPast] = React.useState(false);\r\n\r\n  const [openDialog, setOpenDialog] = React.useState(false);\r\n  const [openDialogAddNew, setOpenDialogAddNew] = React.useState(false);\r\n\r\n  useEffect(() => {\r\n    const todayStr = dateformat(new Date(), \"yyyy-mm-dd\");\r\n    setIsPast(date < todayStr);\r\n  }, [date]);\r\n\r\n  useEffect(() => {\r\n    if (bookings) {\r\n      if (state.dayViewCalFilter && state.dayViewCalFilter.trim().length > 0) {\r\n        const search = state.dayViewCalFilter.trim().toUpperCase();\r\n        setFilteredBookings(\r\n          bookings.filter(\r\n            (booking) =>\r\n              booking.fullname.toLowerCase().indexOf(search.toLowerCase()) >= 0\r\n          )\r\n        );\r\n      } else {\r\n        setFilteredBookings([...bookings]);\r\n      }\r\n    }\r\n  }, [state.dayViewCalFilter, bookings]);\r\n\r\n  useEffect(() => {\r\n    const fetchData = async () => {\r\n      if (!date || date.length <= 0 || !time || time.length <= 0) {\r\n        return;\r\n      }\r\n\r\n      // if (isPast)\r\n      // {\r\n      //     setBookings([]);\r\n      //     return;\r\n      // }\r\n\r\n      setBookings(null);\r\n\r\n      var res = state.AdminCalendarCache?.find(\r\n        (record) =>\r\n          record.method === \"getBookingsByDateStrandTime\" &&\r\n          record.query === `${date}${time}`\r\n      )?.res;\r\n      if (!res || openDialog || openDialogAddNew) {\r\n        res = await BookService.getAllBookingsByDateStrandTime(date, time);\r\n        setState((state) => ({\r\n          ...state,\r\n          AdminCalendarCache: [\r\n            ...state.AdminCalendarCache,\r\n            {\r\n              method: \"getBookingsByDateStrandTime\",\r\n              query: `${date}${time}`,\r\n              res: res,\r\n            },\r\n          ],\r\n        }));\r\n      }\r\n\r\n      if (res.data.status === \"OK\") {\r\n        setBookings(res.data.bookings);\r\n      }\r\n    };\r\n\r\n    if (openDialog || openDialogAddNew) {\r\n      setState((state) => ({\r\n        ...state,\r\n        AdminCalendarCache: state.AdminCalendarCache.filter(\r\n          (record) =>\r\n            !(\r\n              record.method === \"getBookingsByDateStrandTime\" &&\r\n              record.query === `${date}${time}`\r\n            )\r\n        ),\r\n      }));\r\n      setState((state) => ({\r\n        ...state,\r\n        AdminCalendarCache: state.AdminCalendarCache.filter(\r\n          (record) =>\r\n            !(\r\n              record.method === \"getBookingsCountByDateStrandTime\" &&\r\n              record.query === `${date}${time}`\r\n            )\r\n        ),\r\n      }));\r\n      setState((state) => ({\r\n        ...state,\r\n        AdminCalendarCache: state.AdminCalendarCache.filter(\r\n          (record) =>\r\n            !(\r\n              record.method === \"getBookingsCountByDateStr\" &&\r\n              record.query === date\r\n            )\r\n        ),\r\n      }));\r\n    }\r\n\r\n    fetchData();\r\n  }, [date, time, state.bookingDialogDataChanged]);\r\n\r\n  const bookingCliked = (event, booking) => {\r\n    setSelectedBooking(booking);\r\n    setOpenDialog(true);\r\n  };\r\n\r\n  const getBookingClass = (status) => {\r\n    switch (status) {\r\n      case \"patient_attended\":\r\n        return classes.bookingBoxSampleTaken;\r\n      default:\r\n        return classes.bookingBox;\r\n    }\r\n  };\r\n\r\n  const addNewBookingClicked = () => {\r\n    setOpenDialogAddNew(true);\r\n  };\r\n\r\n\r\n  const getBookingsBox = (_bookings) => {\r\n    if (_bookings === null) {\r\n      return (\r\n        <div className={classes.LoadingProgress}>\r\n          <CircularProgress disableShrink />\r\n        </div>\r\n      );\r\n    } else if (_bookings.length >= 0) {\r\n      return (\r\n        <React.Fragment>\r\n          {_bookings.map((booking) => (\r\n            <div\r\n              style={booking.tr ? { borderTop: \"5px solid #d00fd6\" } : {}}\r\n              className={\r\n                getBookingClass(booking.status)\r\n                }\r\n              onClick={(event) => bookingCliked(event, booking)}\r\n            >\r\n              {`${booking.fullname}`.substring(0, 15)}\r\n            </div>\r\n          ))}\r\n\r\n          <div className={classes.bookingBoxNew} onClick={addNewBookingClicked}>\r\n            {\" \"}\r\n            + Add New Booking\r\n          </div>\r\n        </React.Fragment>\r\n      );\r\n    }\r\n  };\r\n\r\n  const handleCloseDialog = () => {\r\n    setOpenDialog(false);\r\n  };\r\n\r\n  const handleCloseDialogAddNew = () => {\r\n    setOpenDialogAddNew(false);\r\n  };\r\n\r\n  return (\r\n    <React.Fragment>\r\n      <div className={classes.Container}>\r\n        {getBookingsBox(filteredBookings)}\r\n      </div>\r\n\r\n      <BookingDialog\r\n        booking={selectedBooking}\r\n        open={openDialog}\r\n        onClose={handleCloseDialog}\r\n      />\r\n\r\n      <NewBookingDialog\r\n        date={date}\r\n        time={time}\r\n        open={openDialogAddNew}\r\n        handleClose={handleCloseDialogAddNew}\r\n      />\r\n    </React.Fragment>\r\n  );\r\n};\r\n\r\nDayViewCell.propTypes = {\r\n  key: PropTypes.string.isRequired,\r\n  date: PropTypes.string.isRequired,\r\n  time: PropTypes.string.isRequired,\r\n};\r\n\r\nexport default DayViewCell;\r\n","import React, { useEffect, useState } from 'react';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport PropTypes from 'prop-types';\r\nimport DayViewCell from './DayViewCell';\r\nimport dateformat from 'dateformat';\r\n\r\n\r\n\r\n\r\nconst rows = [\r\n    '10:00 AM',\r\n    '10:30 AM', \r\n    '11:00 AM', \r\n    '11:30 AM', \r\n    '12:00 PM',\r\n    '12:30 PM',\r\n    '01:00 PM',\r\n    '01:30 PM',\r\n    '02:00 PM',\r\n    '02:30 PM',\r\n    '03:00 PM',\r\n    '03:30 PM',\r\n    '04:00 PM',\r\n    '04:30 PM',\r\n    '05:00 PM',\r\n    '05:30 PM',\r\n];\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n\r\n    table: {\r\n        width: \"100%\",\r\n        border: \"1px solid #ddd\",\r\n        borderCollapse: \"collapse\",\r\n        overflowY: \"auto\"\r\n    },\r\n\r\n    th: {\r\n        border: \"1px solid #ddd\",\r\n        borderCollapse: \"collapse\",\r\n        verticalAlign: \"middle\",\r\n        fontcolor: \"#555\",\r\n        fontWeight: \"400\",\r\n        fontSize: \"15px\",\r\n        paddingTop: \"5px\",\r\n        paddingBottom: \"5px\",\r\n        width: \"12%\", \r\n    },\r\n\r\n    td: {\r\n        border: \"1px solid #ddd\",\r\n        borderCollapse: \"collapse\",\r\n        verticalAlign: \"middle\",\r\n        height : \"50px\",\r\n        width: \"84%\", \r\n    },\r\n\r\n    titleLabel: {\r\n        paddingBottom: \"17px\",\r\n        paddingTop: \"17px\",\r\n        color: \"#777\",\r\n        fontSize: \"16px\"\r\n    },\r\n\r\n    titleLabelToday: {\r\n        paddingBottom: \"17px\",\r\n        paddingTop: \"17px\",\r\n        color: \"#fff\",\r\n        backgroundColor: \"#1a73e8\",\r\n        fontSize: \"16px\"\r\n    },\r\n\r\n  }));\r\n\r\nconst DayView = ({date}) => {\r\n    const classes = useStyles();\r\n\r\n    return (\r\n        <React.Fragment>\r\n\r\n        <div style={{overflowY: \"scroll\" , height: \"60px\"}}>\r\n            <table className={classes.table}>\r\n                <thead>\r\n                    <tr>\r\n                        <th style={{width: \"7%\"}}>\r\n                        \r\n                        </th>\r\n                        <th style={{width: \"84%\"}}>\r\n                                <div className={(dateformat(new Date(),'yyyy-mm-dd') === dateformat(date, 'yyyy-mm-dd')) ? classes.titleLabelToday : classes.titleLabel }>\r\n                                        {dateformat(date,'dddd')}\r\n                                </div>                                \r\n                        </th>\r\n                    </tr>\r\n                </thead>\r\n             </table>\r\n\r\n        </div>\r\n\r\n            <div style={{overflowY: \"scroll\" , height: \"70vh\"}}>\r\n                <table className={classes.table}>   \r\n                    <tbody>\r\n                        {rows.map(row => (\r\n                            <tr>\r\n                                <td style={{width: \"7%\"}}>\r\n                                    {row}\r\n                                </td>\r\n                               \r\n                                <td className={classes.td}>\r\n                                     <DayViewCell key={`${dateformat(date,'yyyy-mm-dd')}-${row}`} date={dateformat(date,'yyyy-mm-dd')} time={row}/>  \r\n                                </td>\r\n                            \r\n                            </tr>\r\n                        ))}            \r\n                    </tbody>\r\n                </table>\r\n            </div>                    \r\n      \r\n        </React.Fragment>\r\n\r\n\r\n    );\r\n}\r\n\r\nDayView.propTypes = {\r\n    date: PropTypes.any.isRequired\r\n  };\r\n\r\n\r\nexport default DayView;","import React, { useEffect, useState } from 'react';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport MonthView from './MonthView';\r\nimport { Button, Grid, IconButton, InputAdornment, TextField, Tooltip } from '@material-ui/core';\r\nimport ToggleButton from '@material-ui/lab/ToggleButton';\r\nimport ToggleButtonGroup from '@material-ui/lab/ToggleButtonGroup';\r\n\r\nimport NavigateBeforeIcon from '@material-ui/icons/NavigateBefore';\r\nimport NavigateNextIcon from '@material-ui/icons/NavigateNext';\r\nimport WeekView from './WeekView';\r\nimport dateformat from 'dateformat';\r\nimport DayView from './DayView';\r\nimport GlobalState from '../../GlobalState';\r\n\r\nimport CloseIcon from '@material-ui/icons/Close';\r\n\r\n\r\n\r\nconst monthNames = [\"January\", \"February\", \"March\", \"April\", \"May\", \"June\",\r\n  \"July\", \"August\", \"September\", \"October\", \"November\", \"December\"\r\n];\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n\r\n    title: {\r\n        textAlign: \"center\",\r\n        fontSize: \"24px\",\r\n        fontColor: \"#333\"\r\n    },\r\n\r\n  }));\r\n\r\nexport default function CalendarView() {\r\n    const classes = useStyles();\r\n\r\n    const [state, setState] = React.useContext(GlobalState);\r\n\r\n    const [month, setMonth] = React.useState(new Date().getMonth() + 1);\r\n    const [year, setYear] = React.useState(new Date().getFullYear());\r\n\r\n    const [day, setDay] = React.useState(new Date());\r\n\r\n    const [firstDayofWeek, setFirstDayofWeek] = React.useState(new Date());\r\n\r\n    const [weekDates, setWeekDates] = React.useState([]);\r\n\r\n    const [mode, setMode] = React.useState('month');\r\n    const [selectedTab, setSeletedTab] = React.useState('month');\r\n\r\n    const [filter,setFilter] = React.useState('');\r\n\r\n    const filterChanged = (event) =>{\r\n        setFilter(event.target.value);\r\n        setState(state => ({...state, dayViewCalFilter : event.target.value?.trim()?.toUpperCase()}))\r\n      }\r\n\r\n      const removeFilter = () =>\r\n      {\r\n        setFilter('');\r\n        setState(state => ({...state, dayViewCalFilter : ''}));\r\n      }\r\n\r\n\r\n    useEffect( () => {\r\n        const today = new Date();\r\n        const dayofWeek = today.getDay();\r\n        const firstdayofweek = new Date(today.getTime() - ( dayofWeek * 86400000));\r\n        setFirstDayofWeek(firstdayofweek);\r\n        setState(state => ({...state, AdminCalendarCache : []}));\r\n\r\n        return () =>\r\n        {\r\n            setState(state => ({...state, AdminCalendarCache : []}));\r\n            removeFilter();\r\n        }\r\n       \r\n    }, []);\r\n\r\n\r\n    useEffect( () => {\r\n        const dates = [];\r\n        for (var i = 0; i < 7 ; i++)\r\n        {\r\n            dates.push(new Date(firstDayofWeek.getTime() + ( i * 86400000)));\r\n        }\r\n        setWeekDates(dates);\r\n\r\n    }, [firstDayofWeek]);\r\n\r\n    const handlePrevButton = (event) =>\r\n    {\r\n       if (mode === 'month')\r\n       {\r\n            if (month === 1)\r\n            {\r\n                setYear(year - 1);\r\n            } \r\n\r\n            const newMonth = month === 1 ? 12 : month - 1;\r\n            setMonth(newMonth);\r\n\r\n            const newDay = new Date(year, newMonth - 1 , 1, 0 ,0 ,0 ,0);\r\n            setDay(newDay);\r\n\r\n            const dayofWeek = newDay.getDay();\r\n            setFirstDayofWeek(new Date(newDay.getTime() - ( dayofWeek * 86400000)));\r\n\r\n       } \r\n       else if (mode === 'week')\r\n       {\r\n           const newFirstDayofWeek = new Date(firstDayofWeek.getTime() - ( 7 * 86400000));\r\n           setFirstDayofWeek(newFirstDayofWeek);\r\n\r\n           setDay(newFirstDayofWeek);\r\n           setMonth(newFirstDayofWeek.getMonth() + 1);\r\n           setYear(newFirstDayofWeek.getFullYear());\r\n\r\n       }\r\n       else if (mode === 'day')\r\n       {\r\n           const newDay = new Date(day.getTime() - ( 1 * 86400000));\r\n           setDay(newDay);\r\n\r\n           const dayofWeek = newDay.getDay();\r\n           setFirstDayofWeek(new Date(newDay.getTime() - ( dayofWeek * 86400000)));\r\n\r\n           setMonth(newDay.getMonth() + 1);\r\n           setYear(newDay.getFullYear());\r\n       }\r\n    }\r\n\r\n    const handleNextButton = (event) =>\r\n    {\r\n        if (mode === 'month')\r\n        {\r\n            if (month === 12)\r\n            {\r\n                setYear(year + 1);\r\n            } \r\n       \r\n            const newMonth = month === 12 ? 1 : month + 1;\r\n            setMonth(newMonth);\r\n\r\n            const newDay = new Date(year, newMonth - 1 , 1, 0 ,0 ,0 ,0);\r\n            setDay(newDay);\r\n\r\n            const dayofWeek = newDay.getDay();\r\n            setFirstDayofWeek(new Date(newDay.getTime() - ( dayofWeek * 86400000)));\r\n        }\r\n        else if (mode === 'week')\r\n        {\r\n            const newFirstDayofWeek = new Date(firstDayofWeek.getTime() + ( 7 * 86400000));\r\n            setFirstDayofWeek(newFirstDayofWeek);\r\n\r\n            setDay(newFirstDayofWeek);\r\n            setMonth(newFirstDayofWeek.getMonth() + 1);\r\n            setYear(newFirstDayofWeek.getFullYear());\r\n\r\n        }\r\n        else if (mode === 'day')\r\n        {\r\n            const newDay = new Date(day.getTime() + ( 1 * 86400000));\r\n            setDay(newDay);\r\n\r\n            const dayofWeek = newDay.getDay();\r\n            setFirstDayofWeek(new Date(newDay.getTime() - ( dayofWeek * 86400000)));\r\n \r\n            setMonth(newDay.getMonth() + 1);\r\n            setYear(newDay.getFullYear());\r\n        }\r\n    }\r\n\r\n    const goToday = (event) => {\r\n        const newDay = new Date();\r\n        const dayofWeek = newDay.getDay();\r\n        setFirstDayofWeek(new Date(newDay.getTime() - ( dayofWeek * 86400000)));\r\n        setDay(newDay);\r\n        setMonth(newDay.getMonth() + 1);\r\n        setYear(newDay.getFullYear());\r\n    }\r\n\r\n    const dayClicked = (event, date) =>\r\n    {\r\n        const newDay = new Date(date);\r\n        const dayofWeek = newDay.getDay();\r\n        setFirstDayofWeek(new Date(newDay.getTime() - ( dayofWeek * 86400000)));\r\n        setDay(newDay);\r\n        setMonth(newDay.getMonth() + 1);\r\n        setYear(newDay.getFullYear());\r\n        setSeletedTab('day');\r\n        setMode('day');\r\n    }\r\n\r\n    const getContentFromMode = (_mode) => {\r\n        if (_mode === 'month')\r\n        {\r\n            return (\r\n                <MonthView dayClicked={dayClicked} month={month} year={year}/>    \r\n            );\r\n        }    \r\n        else if (_mode === 'week')\r\n        {\r\n            return (\r\n                    <WeekView dayClicked={dayClicked} dates={weekDates}/>\r\n            );\r\n            \r\n        }\r\n        else if (_mode === 'day')\r\n        {\r\n            return (\r\n                <DayView date={day}/>\r\n            );\r\n        }\r\n    }\r\n\r\n    const getCalendarTitleFromMode = (_mode) => {\r\n        if (_mode === 'month')\r\n        {\r\n            return (\r\n                <span className={classes.title}> {`${monthNames[month - 1]} ${year}`} </span>   \r\n            );\r\n        }    \r\n        else if (_mode === 'week')\r\n        {\r\n            const endOfWeek = new Date(firstDayofWeek.getTime() + ( 6 * 86400000));\r\n            let endofWeekStr = '';\r\n            if (endOfWeek.getMonth() === firstDayofWeek.getMonth())\r\n            {\r\n                endofWeekStr = dateformat(endOfWeek,'d');\r\n            }else\r\n            {\r\n                endofWeekStr = dateformat(endOfWeek,'mmm d');\r\n            }\r\n\r\n            return (\r\n                <span className={classes.title}> {`${dateformat(firstDayofWeek,'mmm d')} - ${endofWeekStr}, ${year}`} </span>\r\n            );\r\n            \r\n        }\r\n        else if (_mode === 'day')\r\n        {\r\n            return (\r\n                <span className={classes.title}> {`${dateformat(day,'mmmm d, yyyy')}`} </span>\r\n            );\r\n        }\r\n    }\r\n\r\n\r\n    const handleTabChanged = (event, value) => {\r\n        if (value && value.length)\r\n        {\r\n          setSeletedTab(value);\r\n          setMode(value);\r\n        }\r\n    };\r\n\r\n    const getPrevButtonTitle = (_mode) =>\r\n    {\r\n        return `Previuos ${mode}`;\r\n    }\r\n\r\n    const getNextButtonTitle = (_mode) =>\r\n    {\r\n        return `Next ${mode}`;\r\n    }\r\n\r\n    return (\r\n        <React.Fragment>\r\n\r\n          <Grid\r\n            container\r\n            direction=\"row\"\r\n            justify=\"space-between\"\r\n            alignItems=\"center\"\r\n            style= {{marginBottom: \"10px\", marginTop: \"0px\"}}\r\n            >  \r\n\r\n            <Grid item md={3}>\r\n                <div  style={{display:\"flex\", alignItems: \"flex-start\", justifyContent: \"flex-start\" , paddingLeft: \"10px\"}}>\r\n                    <Tooltip title={getPrevButtonTitle(mode)} placement=\"bottom-start\">\r\n                        <IconButton \r\n                                color=\"default\" \r\n                                aria-label=\"prev\"\r\n                                onClick = {handlePrevButton}\r\n                                >\r\n                            <NavigateBeforeIcon style={{fontSize: '2rem'}}/>\r\n                        </IconButton>\r\n                    </Tooltip>\r\n\r\n                    <Tooltip title={getNextButtonTitle(mode)} placement=\"bottom-end\">\r\n                        <IconButton \r\n                                color=\"default\" \r\n                                aria-label=\"next\"\r\n                                onClick = {handleNextButton}\r\n                                >\r\n                            <NavigateNextIcon style={{fontSize: '2rem'}}/>\r\n                        </IconButton>\r\n                    </Tooltip>\r\n\r\n                    <Button style={{marginTop: \"11px\", marginLeft: \"10px\"}} onClick={goToday} variant=\"outlined\"> Today </Button>\r\n                </div>\r\n\r\n            </Grid>\r\n\r\n            <Grid item md={6}>\r\n\r\n                    <Grid\r\n                        container\r\n                        direction=\"row\"\r\n                        justify=\"center\"\r\n                        alignItems=\"flex-end\"\r\n                        spacing = {3}\r\n                        >\r\n                            <Grid item>\r\n                                    {getCalendarTitleFromMode(mode)}\r\n                            </Grid>\r\n                            {mode === 'day' && (\r\n                                        <Grid item>\r\n                                                <TextField\r\n                                                    variant=\"standard\"\r\n                                                    style={{marginBottom : \"5px\"}}\r\n                                                    value={filter}\r\n                                                    onChange={filterChanged}\r\n                                                    margin=\"normal\"\r\n                                                    size=\"small\"\r\n                                                    id=\"filter\"\r\n                                                    label=\"Filter\"\r\n                                                    name=\"filter\"\r\n                                                    autoComplete=\"off\"\r\n                                                    InputProps={{\r\n                                                        endAdornment : \r\n                                                            <InputAdornment position=\"end\">\r\n                                                                <Tooltip title=\"Clear\">\r\n                                                                            <IconButton\r\n                                                                            aria-label=\"remove filter\"\r\n                                                                            onClick={() => removeFilter()}\r\n                                                                            onMouseDown={() => removeFilter()}\r\n                                                                        >\r\n                                                                            <CloseIcon/>\r\n                                                                        </IconButton>\r\n                                                                </Tooltip>\r\n                                                            \r\n                                                            </InputAdornment>\r\n                                                          \r\n                                                    }}\r\n                                                   \r\n                                                />\r\n                                        </Grid>\r\n                            )}\r\n                           \r\n                    </Grid>\r\n                \r\n            </Grid>\r\n\r\n            <Grid item md={3}>\r\n                <div  style={{display:\"flex\", alignItems: \"flex-end\", justifyContent: \"flex-end\", paddingRight: \"10px\" }}>\r\n                    <ToggleButtonGroup\r\n                        value={selectedTab}\r\n                        exclusive\r\n                        onChange={handleTabChanged}\r\n                        aria-label=\"select view mode\"\r\n                    >\r\n                        <ToggleButton style={selectedTab === 'month' ? {width: \"80px\", color: \"#3f51b5\", backgroundColor: \"#ebedf7\" } : {width: \"80px\"}} value=\"month\" aria-label=\"month view\">\r\n                                month\r\n                        </ToggleButton>\r\n                        <ToggleButton style={selectedTab === 'week' ? {width: \"80px\", color: \"#3f51b5\", backgroundColor: \"#ebedf7\"} : {width: \"80px\"}}  value=\"week\" aria-label=\"week view\">\r\n                                week\r\n                        </ToggleButton>\r\n                        <ToggleButton style={selectedTab === 'day' ? {width: \"80px\", color: \"#3f51b5\", backgroundColor: \"#ebedf7\"} : {width: \"80px\"}} value=\"day\" aria-label=\"day view\">\r\n                                day\r\n                        </ToggleButton>\r\n                    </ToggleButtonGroup>\r\n                </div>\r\n            </Grid>\r\n\r\n           </Grid> \r\n\r\n             {getContentFromMode(mode)}\r\n\r\n        </React.Fragment>\r\n\r\n\r\n    );\r\n\r\n}","import axios from 'axios';\r\nimport { authToken, backendAPI } from '../../GlobalPath';\r\n\r\nexport default axios.create({\r\n  baseURL: backendAPI,\r\n  headers : {\r\n      'Authorization' : authToken,\r\n       'Content-Type': 'application/json',\r\n  }\r\n});","import API from './api';\r\nimport axiosRetry from 'axios-retry';\r\n\r\nexport default class BookService {\r\n\r\n\r\n   static addNewBooking = (payload) =>\r\n   {\r\n      return API.post(`/api/std/book/addnewbooking`, payload);\r\n   }\r\n   \r\n   static sendRegFormEmail = (bookingId) =>\r\n   {\r\n      return API.post(`/api/std/book/sendregformemail?id=${bookingId}`);\r\n   }\r\n   static payBooking = (bookingId,price, paymentMethod, corporate) =>\r\n   {\r\n      return API.post(`/api/std/book/paybooking?id=${bookingId}&paymentmethod=${paymentMethod}&corporate=${corporate}&price=${price}`);\r\n   }\r\n\r\n   static unPayBooking = (bookingId) =>\r\n   {\r\n      return API.post(`/api/std/book/unpaybooking?id=${bookingId}`);\r\n   }\r\n\r\n   static getShouldRefundsCount = () =>\r\n   {\r\n      return API.get(`/api/std/book/getshouldrefundscount?`);\r\n   }\r\n\r\n   \r\n\r\n   static refundBooking = (bookingId) =>\r\n   {\r\n      return API.post(`/api/std/payment/refundpayment`, {bookingId: bookingId});\r\n   }\r\n\r\n   static getBookingsStatsByDateStr = (dateStr) =>\r\n   {\r\n      return API.get(`/api/std/book/getbookingsstatsbydatestr?date=${dateStr}`);\r\n   }\r\n\r\n   static getBookingsCountByDateStr = (dateStr) =>\r\n   {\r\n      return API.get(`/api/std/book/getbookingscountbydatestr?date=${dateStr}`);\r\n   }\r\n\r\n   static getAllBookingsCountAll = () =>\r\n   {\r\n      return API.get(`/api/std/book/getallbookingscountall`);\r\n   }\r\n\r\n   static getBookingsCountByDateStrandTime = (dateStr, time, source) =>\r\n   {\r\n      return API.get(`/api/std/book/getbookingscountbydatestrandtime?date=${dateStr}&time=${time}`, {cancelToken: source.token});\r\n   }\r\n\r\n   static getBookingsByDateStrandTime = (dateStr, time) =>\r\n   {\r\n      return API.get(`/api/std/book/getbookingsbydatestrandtime?date=${dateStr}&time=${time}`);\r\n   }\r\n\r\n\r\n   static getAllBookingsCountByDateStr = (dateStr) =>\r\n   {\r\n      return API.get(`/api/std/book/getallbookingscountbydatestr?date=${dateStr}`);\r\n   }\r\n\r\n   static getAllBookingsCountByDateStrandTime = (dateStr, time, source) =>\r\n   {\r\n      return API.get(`/api/std/book/getallbookingscountbydatestrandtime?date=${dateStr}&time=${time}`, {cancelToken: source.token});\r\n   }\r\n\r\n   static getAllBookingsByDateStrandTime = (dateStr, time) =>\r\n   {\r\n      return API.get(`/api/std/book/getallbookingsbydatestrandtime?date=${dateStr}&time=${time}`);\r\n   }\r\n\r\n   static changeBackToBookingMade = (id) =>\r\n   {\r\n      return API.post(`/api/std/book/changebacktobookingmade?id=${id}`);\r\n   }\r\n\r\n   static changeToPatientAttended = (id) =>\r\n   {\r\n      return API.post(`/api/std/book/changetopatientattended?id=${id}`);\r\n   }\r\n\r\n   static updateBooking = (payload) =>\r\n   {\r\n      return API.post(`/api/std/book/updatebookappointment`, payload);\r\n   } \r\n\r\n   static updateBookingTime = (payload) =>\r\n   {\r\n      return API.post(`/api/std/book/updatebookappointmenttime`, payload);\r\n   } \r\n\r\n   static deleteBooking = (id) =>\r\n   {\r\n      return API.post(`/api/std/book/deletebookappointment?id=${id}`);\r\n   } \r\n\r\n   static unDeleteBooking = (id) =>\r\n   {\r\n      return API.post(`/api/std/book/undeletebookappointment?id=${id}`);\r\n   } \r\n   \r\n    static getBookingsByRef = (ref) =>\r\n    {\r\n       return API.get(`/api/std/book/getbookingsbyref?ref=${ref}`);\r\n    }\r\n\r\n    static getBookingById = (id) =>\r\n    {\r\n       return API.get(`/api/std/book/getbookingbyid?id=${id}`);\r\n    }\r\n\r\n    static getAllBookings = (limit) =>\r\n    {\r\n      if (!limit) limit = 25 \r\n      return API.get(`/api/std/book/getallbookings?limit=${limit}`);\r\n    }\r\n\r\n    static getDeletedBookings= (limit) =>\r\n    {\r\n      if (!limit) limit = 25 \r\n       return API.get(`/api/std/book/getdeletedbookings?limit=${limit}`);\r\n    }\r\n\r\n    static getTodayBookings= () =>\r\n    {\r\n       return API.get(`/api/std/book/gettodaybookings`);\r\n    }\r\n\r\n    static getOldBookings= (limit) =>\r\n    {\r\n      if (!limit) limit = 25 \r\n       return API.get(`/api/std/book/getoldbookings?limit=${limit}`);\r\n    }\r\n\r\n    static getFutureBookings= (limit) =>\r\n    {\r\n      if (!limit) limit = 25 \r\n       return API.get(`/api/std/book/getfuturebookings?limit=${limit}`);\r\n    }\r\n\r\n    static getRecentBookings= () =>\r\n    {\r\n       return API.get(`/api/std/book/getrecentbookings`);\r\n    }\r\n\r\n    static getRecentBookingsAll= (limit) =>\r\n    {\r\n      if (!limit) limit = 25 \r\n       return API.get(`/api/std/book/getrecentbookingsall?limit=${limit}`);\r\n    }\r\n}","import API from './api';\r\n\r\nexport default class PDFService {\r\n\r\n\r\n    static downloadSTDRegForm = (id) =>\r\n    {\r\n       return API.get(`/api/pdf/downloadstdregform?id=${id}`, {\r\n        responseType: 'arraybuffer',\r\n        id: id,\r\n        headers: {\r\n            Accept: 'application/pdf',\r\n        }\r\n        });\r\n    }\r\n\r\n}","import React, { useEffect, useRef, useState } from \"react\";\r\nimport BookService from \"./services/BookService\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport {\r\n  Backdrop,\r\n  Button,\r\n  Checkbox,\r\n  CircularProgress,\r\n  Divider,\r\n  FormControlLabel,\r\n  Grid,\r\n  InputAdornment,\r\n  InputLabel,\r\n  Link,\r\n  makeStyles,\r\n  MenuItem,\r\n  Select,\r\n  TextField,\r\n  Tooltip,\r\n} from \"@material-ui/core\";\r\nimport GlobalState from \"../GlobalState\";\r\nimport { withStyles } from \"@material-ui/core/styles\";\r\n\r\nimport CreditCardIcon from \"@material-ui/icons/CreditCard\";\r\n\r\nimport Dialog from \"@material-ui/core/Dialog\";\r\nimport DialogContent from \"@material-ui/core/DialogContent\";\r\n\r\nimport DialogTitle from \"@material-ui/core/DialogTitle\";\r\nimport Draggable from \"react-draggable\";\r\nimport Paper from \"@material-ui/core/Paper\";\r\n\r\nimport Alert from \"@material-ui/lab/Alert\";\r\n\r\nimport PropTypes from \"prop-types\";\r\nimport LinearProgress from \"@material-ui/core/LinearProgress\";\r\nimport Box from \"@material-ui/core/Box\";\r\n\r\nimport Radio from \"@material-ui/core/Radio\";\r\nimport RadioGroup from \"@material-ui/core/RadioGroup\";\r\nimport FormControl from \"@material-ui/core/FormControl\";\r\nimport FormLabel from \"@material-ui/core/FormLabel\";\r\nimport { corporates } from \"./Corporates\";\r\nimport NumberFormat from \"react-number-format\";\r\n\r\n\r\nvar interval;\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  title: {\r\n    marginTop: theme.spacing(0),\r\n    marginBottom: theme.spacing(1),\r\n  },\r\n\r\n  refreshButton: {\r\n    marginLeft: theme.spacing(2),\r\n  },\r\n\r\n  checkIcon: {\r\n    color: \"green\",\r\n  },\r\n\r\n  closeIcon: {\r\n    color: \"red\",\r\n  },\r\n\r\n  RefLink: {\r\n    cursor: \"pointer\",\r\n  },\r\n\r\n  BookedLabel: {\r\n    backgroundColor: \"#606060\",\r\n    color: \"#fff\",\r\n    paddingRight: \"10px\",\r\n    paddingLeft: \"10px\",\r\n  },\r\n\r\n  PatientAttendedLabel: {\r\n    backgroundColor: \"#0066aa\",\r\n    color: \"#fff\",\r\n    paddingRight: \"15px\",\r\n    paddingLeft: \"10px\",\r\n  },\r\n\r\n  SampleTakenLabel: {\r\n    backgroundColor: \"#0066cc\",\r\n    color: \"#fff\",\r\n    paddingRight: \"40px\",\r\n    paddingLeft: \"10px\",\r\n  },\r\n\r\n  ReportSentLabel: {\r\n    backgroundColor: \"#009900\",\r\n    color: \"#fff\",\r\n    paddingRight: \"90px\",\r\n    paddingLeft: \"10px\",\r\n  },\r\n\r\n  ReportCertSentLabel: {\r\n    backgroundColor: \"#009900\",\r\n    color: \"#fff\",\r\n    paddingRight: \"68px\",\r\n    paddingLeft: \"10px\",\r\n  },\r\n\r\n  archiveButton: {},\r\n\r\n  smartMatchButton: {\r\n    backgroundColor: \"#2f942e\",\r\n    \"&:hover\": {\r\n      background: \"green\",\r\n      color: \"#fff\",\r\n    },\r\n    textDecoration: \"none !important\",\r\n    marginRight: \"10px\",\r\n    // padding: \"10px\"\r\n  },\r\n\r\n  infoTitle: {\r\n    fontWeight: \"400\",\r\n  },\r\n\r\n  infoData: {\r\n    paddingLeft: \"10px\",\r\n    fontWeight: \"800\",\r\n  },\r\n\r\n  matchButton: {\r\n    marginTop: \"30px\",\r\n    marginBottom: \"20px\",\r\n    backgroundColor: \"#2f942e\",\r\n    \"&:hover\": {\r\n      background: \"green\",\r\n      color: \"#fff\",\r\n    },\r\n    textDecoration: \"none !important\",\r\n    padding: \"10px\",\r\n    paddingLeft: \"50px\",\r\n    paddingRight: \"50px\",\r\n  },\r\n\r\n  resendButton: {\r\n    marginTop: \"5px\",\r\n    marginBottom: \"5px\",\r\n    backgroundColor: \"#2f942e\",\r\n    \"&:hover\": {\r\n      background: \"green\",\r\n      color: \"#fff\",\r\n    },\r\n    textDecoration: \"none !important\",\r\n    padding: \"10px\",\r\n    paddingLeft: \"50px\",\r\n    paddingRight: \"50px\",\r\n  },\r\n\r\n  resendFilesButton: {\r\n    marginTop: \"5px\",\r\n    marginBottom: \"5px\",\r\n    backgroundColor: \"#3792ad\",\r\n    \"&:hover\": {\r\n      background: \"#2f798f\",\r\n      color: \"#fff\",\r\n    },\r\n    textDecoration: \"none !important\",\r\n    padding: \"10px\",\r\n    paddingLeft: \"50px\",\r\n    paddingRight: \"50px\",\r\n  },\r\n\r\n  cancelButton: {\r\n    marginBottom: \"10px\",\r\n    textDecoration: \"none !important\",\r\n    padding: \"10px\",\r\n    paddingLeft: \"90px\",\r\n    paddingRight: \"90px\",\r\n  },\r\n  backdrop: {\r\n    zIndex: theme.zIndex.drawer + 5,\r\n    color: \"#fff\",\r\n  },\r\n}));\r\n\r\nfunction NumberFormatCustom(props) {\r\n  const { inputRef, onChange, ...other } = props;\r\n\r\n  return (\r\n    <NumberFormat\r\n      {...other}\r\n      getInputRef={inputRef}\r\n      onValueChange={(values) => {\r\n        onChange({\r\n          target: {\r\n            name: props.name,\r\n            value: values.value,\r\n          },\r\n        });\r\n      }}\r\n      thousandSeparator\r\n      isNumericString\r\n      prefix=\"\"\r\n    />\r\n  );\r\n}\r\n\r\nNumberFormatCustom.propTypes = {\r\n  inputRef: PropTypes.func.isRequired,\r\n  name: PropTypes.string.isRequired,\r\n  onChange: PropTypes.func.isRequired,\r\n};\r\n\r\n\r\nconst BorderLinearProgress = withStyles((theme) => ({\r\n  root: {\r\n    height: 10,\r\n    borderRadius: 5,\r\n  },\r\n  colorPrimary: {\r\n    backgroundColor: \"#cedbce\", //theme.palette.grey[theme.palette.type === 'light' ? 200 : 700],\r\n  },\r\n  bar: {\r\n    borderRadius: 5,\r\n    backgroundColor: \"#2f942e\",\r\n  },\r\n}))(LinearProgress);\r\nfunction LinearProgressWithLabel(props) {\r\n  return (\r\n    <Box display=\"flex\" alignItems=\"center\">\r\n      <Box width=\"100%\" mr={1}>\r\n        <BorderLinearProgress variant=\"determinate\" {...props} />\r\n      </Box>\r\n      <Box minWidth={35}>\r\n        <Typography\r\n          style={{ fontWeight: \"800\", color: \"#5e855e\" }}\r\n          variant=\"body2\"\r\n          color=\"textSecondary\"\r\n        >{`${Math.round(props.value)}%`}</Typography>\r\n      </Box>\r\n    </Box>\r\n  );\r\n}\r\n\r\nLinearProgressWithLabel.propTypes = {\r\n  /**\r\n   * The value of the progress indicator for the determinate and buffer variants.\r\n   * Value between 0 and 100.\r\n   */\r\n  value: PropTypes.number.isRequired,\r\n};\r\n\r\nfunction PaperComponent(props) {\r\n  return (\r\n    <Draggable\r\n      handle=\"#draggable-dialog-title\"\r\n      cancel={'[class*=\"MuiDialogContent-root\"]'}\r\n    >\r\n      <Paper {...props} />\r\n    </Draggable>\r\n  );\r\n}\r\n\r\nexport default function PayDialog(props) {\r\n  const classes = useStyles();\r\n\r\n  const [state, setState] = React.useContext(GlobalState);\r\n  const [paymentMethod, setPaymentMethod] = useState(\"credit card\");\r\n  const [corporate, setCorporate] = useState(corporates[0]);\r\n  const [saving, setSaving] = useState(false);\r\n\r\n  const [price, setPrice] = useState(\"\");\r\n  const [priceError, setPriceError] = useState(false);\r\n\r\n  useEffect( () => {\r\n    if (props.price)\r\n    {\r\n      setPrice(`${props.price}`)\r\n    }else\r\n    {\r\n      setPrice('')\r\n    }\r\n  }, [props.price, props.open])\r\n\r\n  const priceChanged = (event) =>\r\n  {\r\n    setPrice(event.target.value)\r\n    setPriceError(false)\r\n  }\r\n\r\n  const paymentMethodChanged = (event) => {\r\n    setPaymentMethod(event.target.value);\r\n  };\r\n\r\n  const handleClose = () => {\r\n    if (saving) return;\r\n\r\n    props.handleClose();\r\n    setPaymentMethod(\"credit card\");\r\n    setPrice('')\r\n    setCorporate(corporates[0]);\r\n    setSaving(false);\r\n  };\r\n\r\n  const corporateChanged = (event) => {\r\n    setCorporate(event.target.value);\r\n  };\r\n\r\n  const payClicked = async () => {\r\n\r\n\r\n    if (!price || price.trim().length === 0 || price === '0')\r\n    {\r\n      setPriceError(true)\r\n      return\r\n    }\r\n\r\n    setSaving(true);\r\n\r\n  \r\n\r\n    try {\r\n      await BookService.payBooking(\r\n        props.booking._id,\r\n        price,\r\n        paymentMethod,\r\n        paymentMethod === \"corporate\" ? corporate : \"\"\r\n      );\r\n      setSaving(false);\r\n      setState((state) => ({\r\n        ...state,\r\n        bookingPayChanged: !state.bookingPayChanged ? true : false,\r\n      }));\r\n      handleClose();\r\n    } catch (err) {\r\n      console.error(err);\r\n      setSaving(false);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <React.Fragment>\r\n      {props.booking && (\r\n        <React.Fragment>\r\n          <Dialog\r\n            maxWidth=\"xs\"\r\n            open={props.open}\r\n            onClose={handleClose}\r\n            PaperComponent={PaperComponent}\r\n            aria-labelledby=\"form-dialog-title\"\r\n          >\r\n            <DialogTitle id=\"draggable-dialog-title\">\r\n              <Grid\r\n                container\r\n                spacing={2}\r\n                direction=\"row\"\r\n                justify=\"center\"\r\n                alignItems=\"center\"\r\n              >\r\n                <Grid item>\r\n                  <CreditCardIcon\r\n                    style={{ color: \"#f50057\", fontSize: \"3rem\" }}\r\n                  />\r\n                </Grid>\r\n\r\n                <Grid item>\r\n                  <div\r\n                    style={{\r\n                      color: \"#f50057\",\r\n                      paddingBottom: \"10px\",\r\n                      fontWeight: \"800\",\r\n                    }}\r\n                  >\r\n                    {\" \"}\r\n                    PAY the CHARGE{\" \"}\r\n                  </div>\r\n                </Grid>\r\n              </Grid>\r\n\r\n              <Divider />\r\n            </DialogTitle>\r\n            <DialogContent>\r\n              <div\r\n                style={{\r\n                  height: \"300px\",\r\n                }}\r\n              >\r\n                <Grid\r\n                  container\r\n                  direction=\"column\"\r\n                  justify=\"space-between\"\r\n                  spacing={2}\r\n                  alignItems=\"flex-start\"\r\n                >\r\n                  <Grid item>\r\n                  <TextField\r\n                                autoFocus\r\n                                error={priceError}\r\n                                label=\"TOTAL Charges\"\r\n                                value={price}\r\n                                fullWidth\r\n                                required\r\n                                onChange={priceChanged}\r\n                                name=\"product-price\"\r\n                                id=\"product-price-id\"\r\n                                InputProps={{\r\n                                  inputComponent: NumberFormatCustom,\r\n                                  startAdornment: (\r\n                                    <InputAdornment position=\"start\">\r\n                                      £\r\n                                    </InputAdornment>\r\n                                  ),\r\n                                }}\r\n                              />\r\n\r\n                  </Grid>\r\n\r\n                  <Grid item>\r\n                    <div style={{ fontSize: \"17px\" }}>\r\n                      {\" \"}\r\n                      How do you want to pay?{\" \"}\r\n                    </div>\r\n                  </Grid>\r\n\r\n                  <Grid item>\r\n                    <FormControl component=\"fieldset\">\r\n                      <RadioGroup\r\n                        aria-label=\"paymentMethod\"\r\n                        name=\"paymentMethod\"\r\n                        value={paymentMethod}\r\n                        onChange={paymentMethodChanged}\r\n                      >\r\n                        <FormControlLabel\r\n                          value=\"credit card\"\r\n                          control={<Radio />}\r\n                          label=\"Credit Card\"\r\n                        />\r\n                        <FormControlLabel\r\n                          value=\"cash\"\r\n                          control={<Radio />}\r\n                          label=\"Cash\"\r\n                        />\r\n                        <FormControlLabel\r\n                          value=\"corporate\"\r\n                          control={<Radio />}\r\n                          label=\"Corporate\"\r\n                        />\r\n                      </RadioGroup>\r\n\r\n                      {paymentMethod === \"corporate\" && (\r\n                        <FormControl\r\n                          style={{ marginTop: \"10px\" }}\r\n                          className={classes.formControl}\r\n                        >\r\n                          <Select\r\n                            labelId=\"select-corporate\"\r\n                            id=\"select-corporate-id\"\r\n                            value={corporate}\r\n                            onChange={corporateChanged}\r\n                          >\r\n                            {corporates.map((element) => (\r\n                              <MenuItem\r\n                                value={element}\r\n                              >{`${element}`}</MenuItem>\r\n                            ))}\r\n                          </Select>\r\n                        </FormControl>\r\n                      )}\r\n                    </FormControl>\r\n                  </Grid>\r\n                </Grid>\r\n\r\n                <Grid item></Grid>\r\n\r\n                <div\r\n                  style={{\r\n                    position: \"absolute\",\r\n                    bottom: \"20px\",\r\n                    right: \"20px\",\r\n                  }}\r\n                >\r\n                  <Grid\r\n                    container\r\n                    direction=\"row\"\r\n                    justify=\"flex-end\"\r\n                    alignItems=\"center\"\r\n                    spacing={1}\r\n                  >\r\n                    <Grid item>\r\n                      <Button\r\n                        onClick={handleClose}\r\n                        style={{ width: \"100px\" }}\r\n                        disabled={saving}\r\n                      >\r\n                        back\r\n                      </Button>\r\n                    </Grid>\r\n                    <Grid item>\r\n                      <Button\r\n                        onClick={payClicked}\r\n                        variant=\"contained\"\r\n                        color=\"secondary\"\r\n                        style={{ width: \"100px\" }}\r\n                        disabled={saving}\r\n                      >\r\n                        Pay\r\n                      </Button>\r\n                    </Grid>\r\n                  </Grid>\r\n                </div>\r\n              </div>\r\n\r\n              <Backdrop className={classes.backdrop} open={saving}>\r\n                <CircularProgress color=\"inherit\" />\r\n              </Backdrop>\r\n            </DialogContent>\r\n          </Dialog>\r\n        </React.Fragment>\r\n      )}\r\n    </React.Fragment>\r\n  );\r\n}\r\n","import React, { useEffect, useState } from \"react\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport GlobalState from \"../GlobalState\";\r\nimport Grid from \"@material-ui/core/Grid\";\r\nimport {\r\n  Button,\r\n  Checkbox,\r\n  DialogActions,\r\n  DialogContentText,\r\n  Divider,\r\n  FormControlLabel,\r\n  IconButton,\r\n  TextField,\r\n  Tooltip,\r\n} from \"@material-ui/core\";\r\nimport PDFService from \"./services/PDFService\";\r\n\r\nimport { calculatePrice } from \"./PriceCalculator\";\r\n\r\nimport bookingService from \"./services/BookService\";\r\nimport CheckIcon from \"@material-ui/icons/Check\";\r\nimport CloseIcon from \"@material-ui/icons/Close\";\r\n\r\nimport Dialog from \"@material-ui/core/Dialog\";\r\nimport DialogContent from \"@material-ui/core/DialogContent\";\r\nimport DialogTitle from \"@material-ui/core/DialogTitle\";\r\nimport Draggable from \"react-draggable\";\r\nimport Slide from \"@material-ui/core/Slide\";\r\n\r\nimport Paper from \"@material-ui/core/Paper\";\r\n\r\nimport DeleteIcon from \"@material-ui/icons/Delete\";\r\nimport BookService from \"./services/BookService\";\r\n\r\nimport Backdrop from \"@material-ui/core/Backdrop\";\r\nimport CircularProgress from \"@material-ui/core/CircularProgress\";\r\nimport {\r\n  FormatDateFromString,\r\n  RevertFormatDateFromString,\r\n} from \"./DateFormatter\";\r\nimport PayDialog from \"./PayDialog\";\r\n\r\nimport PrintIcon from \"@material-ui/icons/Print\";\r\nimport UndoIcon from \"@material-ui/icons/Undo\";\r\n\r\nimport SendIcon from \"@material-ui/icons/Send\";\r\n\r\nimport HistoryIcon from \"@material-ui/icons/History\";\r\n\r\nimport FileCopyOutlinedIcon from \"@material-ui/icons/FileCopyOutlined\";\r\nimport { CalendarColors } from \"../Admin/calendar-admin/colors\";\r\nimport InvoiceService from \"../services/InvoiceService\";\r\nimport InvoiceDialog from \"../InvoiceDialog\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  box: {\r\n    backgroundColor: \"#373737\",\r\n    color: \"#fff\",\r\n    padding: \"1px\",\r\n    borderRadius: \"4px\",\r\n    textAlign: \"justify\",\r\n    paddingRight: \"40px\",\r\n  },\r\n\r\n  boxRed: {\r\n    backgroundColor: \"#dc2626\",\r\n    color: \"#fff\",\r\n    padding: \"1px\",\r\n    borderRadius: \"4px\",\r\n    textAlign: \"justify\",\r\n    paddingRight: \"40px\",\r\n  },\r\n\r\n  boxInfo: {\r\n    textAlign: \"justify\",\r\n    backgroundColor: \"#fafafa\",\r\n    color: \"#333\",\r\n    padding: \"1px\",\r\n    borderRadius: \"4px\",\r\n    paddingRight: \"40px\",\r\n    border: \"1px solid #eee\",\r\n  },\r\n\r\n  ul: {\r\n    listStyle: \"none\",\r\n    padding: \"0\",\r\n    margin: \"0\",\r\n  },\r\n\r\n  li: {\r\n    marginBottom: \"15px\",\r\n  },\r\n\r\n  icon: {\r\n    marginRight: \"8px\",\r\n  },\r\n\r\n  root: {\r\n    width: \"100%\",\r\n  },\r\n\r\n  lineThrough: {\r\n    textDecoration: \"line-through\",\r\n  },\r\n\r\n  heading: {\r\n    fontSize: theme.typography.pxToRem(15),\r\n    flexBasis: \"33.33%\",\r\n    flexShrink: 0,\r\n    color: theme.palette.text.secondary,\r\n  },\r\n  secondaryHeading: {\r\n    fontSize: theme.typography.pxToRem(15),\r\n  },\r\n\r\n  infoDetails: {\r\n    textAlign: \"left\",\r\n  },\r\n\r\n  infoTitle: {\r\n    fontWeight: \"800\",\r\n    marginRight: \"10px\",\r\n  },\r\n\r\n  infoData: {\r\n    fontWeight: \"400\",\r\n  },\r\n\r\n  title: {\r\n    textAlign: \"center\",\r\n    fontWeight: \"600\",\r\n    marginLeft: \"10px\",\r\n    marginBottom: \"5px\",\r\n  },\r\n\r\n  Accordion: {\r\n    backgroundColor: \"#f5f5f5\",\r\n    color: \"#222\",\r\n  },\r\n\r\n  AccordionDeleted: {\r\n    backgroundColor: \"#aaa\",\r\n    color: \"#555\",\r\n  },\r\n\r\n  DownloadForm: {\r\n    marginTop: \"10px\",\r\n    marginBottom: \"10px\",\r\n  },\r\n\r\n  infoDataCharges: {\r\n    fontSize: \"18px\",\r\n    color: \"green\",\r\n    fontWeight: \"600\",\r\n  },\r\n\r\n  infoDataChargesHigher: {\r\n    fontSize: \"18px\",\r\n    color: \"red\",\r\n    fontWeight: \"600\",\r\n  },\r\n  BookedLabel: {\r\n    color: \"#606060\",\r\n    paddingLeft: \"5px\",\r\n    paddingBottom: \"3px\",\r\n    paddingTop: \"3px\",\r\n    fontWeight: \"800\",\r\n    borderLeft: \"5px solid\",\r\n    borderColor: \"#606060\",\r\n    width: \"150px\",\r\n    display: \"inline-block\",\r\n  },\r\n\r\n  PatientAttendedLabel: {\r\n    color: \"#0066aa\",\r\n    paddingLeft: \"5px\",\r\n    paddingBottom: \"3px\",\r\n    paddingTop: \"3px\",\r\n    fontWeight: \"800\",\r\n    borderLeft: \"5px solid\",\r\n    borderColor: \"#0066aa\",\r\n    width: \"150px\",\r\n    display: \"inline-block\",\r\n  },\r\n\r\n  SampleTakenLabel: {\r\n    color: \"#0066cc\",\r\n    paddingRight: \"10px\",\r\n    paddingLeft: \"5px\",\r\n    paddingBottom: \"3px\",\r\n    paddingTop: \"3px\",\r\n    fontWeight: \"800\",\r\n    borderLeft: \"5px solid\",\r\n    borderColor: \"#0066cc\",\r\n  },\r\n\r\n  ReportSentLabel: {\r\n    color: \"#009900\",\r\n    paddingRight: \"10px\",\r\n    paddingLeft: \"5px\",\r\n    paddingBottom: \"3px\",\r\n    paddingTop: \"3px\",\r\n    fontWeight: \"800\",\r\n    borderLeft: \"5px solid\",\r\n    borderColor: \"#009900\",\r\n  },\r\n\r\n  ReportCertSentLabel: {\r\n    color: \"#009900\",\r\n    paddingRight: \"10px\",\r\n    paddingLeft: \"5px\",\r\n    paddingBottom: \"3px\",\r\n    paddingTop: \"3px\",\r\n    fontWeight: \"800\",\r\n    borderLeft: \"5px solid\",\r\n    borderColor: \"#009900\",\r\n  },\r\n\r\n  PositiveLabel: {\r\n    color: \"red\",\r\n    paddingRight: \"10px\",\r\n    paddingLeft: \"5px\",\r\n    paddingBottom: \"3px\",\r\n    paddingTop: \"3px\",\r\n    fontWeight: \"800\",\r\n    borderLeft: \"5px solid\",\r\n    borderColor: \"red\",\r\n  },\r\n\r\n  EditButton: {\r\n    marginBottom: \"20px\",\r\n    backgroundColor: \"#2f942e\",\r\n    \"&:hover\": {\r\n      background: \"green\",\r\n      color: \"#fff\",\r\n    },\r\n    textDecoration: \"none !important\",\r\n    padding: \"10px\",\r\n  },\r\n\r\n  ResendEmailsButton: {\r\n    // marginBottom : \"20px\",\r\n    color: \"#2f942e\",\r\n    borderColor: \"#2f942e\",\r\n    \"&:hover\": {\r\n      background: \"#fafffa\",\r\n      borderColor: \"#2f942e\",\r\n    },\r\n    textDecoration: \"none !important\",\r\n    paddingLeft: \"50px\",\r\n    paddingRight: \"50px\",\r\n  },\r\n\r\n  PayButton: {\r\n    marginLeft: \"70px\",\r\n    width: \"300px\",\r\n  },\r\n\r\n  PayLabel: {\r\n    marginLeft: \"20px\",\r\n\r\n    color: \"#2f942e\",\r\n    fontWeight: \"500\",\r\n    textAlign: \"center\",\r\n  },\r\n\r\n  RestoreButton: {\r\n    marginBottom: \"20px\",\r\n    backgroundColor: \"#eee\",\r\n    color: \"#333\",\r\n    \"&:hover\": {\r\n      background: \"#f1f1f1\",\r\n      color: \"#111\",\r\n    },\r\n    textDecoration: \"none !important\",\r\n    padding: \"10px\",\r\n  },\r\n\r\n  DeleteButton: {\r\n    marginBottom: \"20px\",\r\n    backgroundColor: \"#d90015\",\r\n    \"&:hover\": {\r\n      background: \"#b80012\",\r\n      color: \"#fff\",\r\n    },\r\n\r\n    padding: \"10px\",\r\n  },\r\n\r\n  SaveButton: {\r\n    marginBottom: \"10px\",\r\n    padding: \"10px\",\r\n\r\n    backgroundColor: \"#d1175e\",\r\n    \"&:hover\": {\r\n      background: \"#bd0d50\",\r\n      color: \"#fff\",\r\n    },\r\n  },\r\n\r\n  CancelButton: {\r\n    marginBottom: \"20px\",\r\n    // padding: \"10px\"\r\n  },\r\n\r\n  TextBox: {\r\n    padding: \"0px\",\r\n  },\r\n\r\n  checkIcon: {\r\n    color: \"green\",\r\n  },\r\n\r\n  checkIconSmall: {\r\n    color: \"green\",\r\n    paddingTop: \"5px\",\r\n  },\r\n\r\n  closeIcon: {\r\n    color: \"red\",\r\n  },\r\n\r\n  centeredLabel: {\r\n    display: \"flex\",\r\n    alignItems: \"center\",\r\n  },\r\n\r\n  backdrop: {\r\n    zIndex: theme.zIndex.drawer + 5,\r\n    color: \"#fff\",\r\n  },\r\n\r\n  invoiceNumber: {\r\n    display: \"inline-block\",\r\n    fontWeight: \"500\",\r\n    width: \"72px\",\r\n    fontSize: \"1rem\",\r\n    color: theme.palette.primary.main,\r\n  },\r\n\r\n  printInvoiceButton: {\r\n    marginLeft: \"70px\",\r\n    fontSize: \"0.8rem\",\r\n    // width: \"300px\",\r\n  },\r\n\r\n  editInvoiceButton: {\r\n    marginLeft: \"10px\",\r\n    fontSize: \"0.8rem\",\r\n  },\r\n}));\r\n\r\nconst Transition = React.forwardRef(function Transition(props, ref) {\r\n  return <Slide direction=\"up\" ref={ref} {...props} />;\r\n});\r\n\r\nfunction PaperComponent(props) {\r\n  return (\r\n    <Draggable\r\n      handle=\"#alert-dialog-slide-title\"\r\n      cancel={'[class*=\"MuiDialogContent-root\"]'}\r\n    >\r\n      <Paper {...props} />\r\n    </Draggable>\r\n  );\r\n}\r\n\r\nexport default function BookingDialog(props) {\r\n  const classes = useStyles();\r\n\r\n  const [state, setState] = React.useContext(GlobalState);\r\n\r\n  const [copied, setCopied] = useState(false);\r\n\r\n  const [emailSent, setEmailSent] = React.useState(false);\r\n\r\n  const [openResendDialog, setOpenResendDialog] = React.useState(false);\r\n  const [openPayDialog, setOpenPayDialog] = React.useState(false);\r\n  const [openRefundDialog, setOpenRefundDialog] = React.useState(false);\r\n\r\n  const [selectedBooking, setSelectedBooking] = React.useState(null);\r\n\r\n  const [editMode, setEditMode] = React.useState({ edit: false, person: null });\r\n  const [deleteMode, setDeleteMode] = React.useState({\r\n    delete: false,\r\n    person: null,\r\n  });\r\n  const [restoreMode, setRestoreMode] = React.useState({\r\n    restore: false,\r\n    person: null,\r\n  });\r\n\r\n  const [saving, setSaving] = React.useState(false);\r\n  const [deleting, setDeleting] = React.useState(false);\r\n  const [restoring, setRestoring] = React.useState(false);\r\n\r\n  const [validationError, setValidationError] = React.useState({});\r\n\r\n  const [bookingDate, setBookingDate] = React.useState(\"\");\r\n  const [bookingTime, setBookingTime] = React.useState(\"\");\r\n\r\n  const [fullname, setFullname] = React.useState(\"\");\r\n  const [email, setEmail] = React.useState(\"\");\r\n  const [tel, setTel] = React.useState(\"\");\r\n  const [notes, setNotes] = React.useState(\"\");\r\n  const [service, setService] = React.useState(\"\");\r\n\r\n  const [refreshData, setRefreshData] = React.useState(false);\r\n\r\n  const [booking, setBooking] = React.useState(null);\r\n\r\n  const [recordChanged, setRecordChanged] = React.useState(false);\r\n\r\n  const [fieldChanged, setFieldChanged] = React.useState(false);\r\n\r\n  const [openUndoPayDialog, setOpenUndoPayDialog] = React.useState(false);\r\n\r\n  const [openTimeStampDialog, setOpenTimeStampDialog] = React.useState(false);\r\n\r\n  const handleCloseTimeStampDialog = () => {\r\n    setOpenTimeStampDialog(false);\r\n    setSelectedBooking(null);\r\n  };\r\n\r\n  const handleCloseUndoPayDialog = () => {\r\n    setOpenUndoPayDialog(false);\r\n    setSelectedBooking(null);\r\n  };\r\n\r\n  const handleCloseResendDialog = () => {\r\n    setOpenResendDialog(false);\r\n    setSelectedBooking(null);\r\n  };\r\n\r\n  const handleClosePayDialog = () => {\r\n    setOpenPayDialog(false);\r\n    setSelectedBooking(null);\r\n  };\r\n\r\n  const handleCloseRefundDialog = () => {\r\n    setOpenRefundDialog(false);\r\n    setSelectedBooking(null);\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (booking) {\r\n      const isChanged =\r\n        bookingDate !== FormatDateFromString(booking.bookingDate) ||\r\n        bookingTime !== booking.bookingTime ||\r\n        fullname !== booking.fullname ||\r\n        email !== booking.email ||\r\n        tel !== booking.phone ||\r\n        notes !== booking.notes ||\r\n        service !== booking.packageName;\r\n\r\n      setRecordChanged(isChanged);\r\n    }\r\n  }, [fieldChanged]);\r\n\r\n  useEffect(() => {\r\n    if (!props.open) {\r\n      setTimeout(() => {\r\n        setEditMode({ edit: false, person: null });\r\n        setRecordChanged(false);\r\n      }, 500);\r\n    }\r\n  }, [props.open]);\r\n\r\n  const bookingDateChanged = (event) => {\r\n    setBookingDate(event.target.value);\r\n    setValidationError({ ...validationError, bookingDateError: false });\r\n    setFieldChanged(!fieldChanged);\r\n  };\r\n\r\n  const bookingTimeChanged = (event) => {\r\n    setBookingTime(event.target.value);\r\n    setValidationError({ ...validationError, bookingTimeError: false });\r\n    setFieldChanged(!fieldChanged);\r\n  };\r\n\r\n  const fullnameChanged = (event) => {\r\n    setFullname(event.target.value);\r\n    setFieldChanged(!fieldChanged);\r\n  };\r\n\r\n  const emailChanged = (event) => {\r\n    setEmail(event.target.value);\r\n    setFieldChanged(!fieldChanged);\r\n  };\r\n\r\n  const telChanged = (event) => {\r\n    setTel(event.target.value);\r\n    setFieldChanged(!fieldChanged);\r\n  };\r\n\r\n  const serviceChanged = (event) => {\r\n    setService(event.target.value);\r\n    setFieldChanged(!fieldChanged);\r\n  };\r\n\r\n  const notesChanged = (event) => {\r\n    setNotes(event.target.value);\r\n    setFieldChanged(!fieldChanged);\r\n  };\r\n\r\n  const getStatusLabel = (status) => {\r\n    if (status === \"booked\") {\r\n      return <div className={classes.BookedLabel}> Booking Made </div>;\r\n    } else if (status === \"patient_attended\") {\r\n      return (\r\n        <div className={classes.PatientAttendedLabel}> Patient Attended </div>\r\n      );\r\n    } else {\r\n      return \"Unknown\";\r\n    }\r\n  };\r\n\r\n  const handleEditModeChanged = (edit, person) => {\r\n    if (edit) {\r\n      setFullname(person.fullname);\r\n      setBookingDate(FormatDateFromString(person.bookingDate));\r\n      setBookingTime(person.bookingTime.toUpperCase());\r\n      setEmail(person.email);\r\n      setTel(person.phone);\r\n      setService(person.packageName);\r\n      if (person.notes) {\r\n        setNotes(person.notes);\r\n      }\r\n\r\n      setEditMode({ edit: edit, person: person });\r\n    } else if (!edit && !person) {\r\n      setEditMode({ edit: edit, person: person });\r\n      setRecordChanged(false);\r\n    } else if (!edit && person) {\r\n      const booking = {};\r\n      const bookingId = person._id;\r\n      booking.email = email;\r\n      booking.phone = tel;\r\n      booking.fullname = fullname;\r\n      booking.notes = notes;\r\n      booking.packageName = service;\r\n      booking.bookingDate = RevertFormatDateFromString(bookingDate);\r\n      booking.bookingTime = bookingTime;\r\n      booking.bookingRef = person.bookingRef;\r\n\r\n      if (validateBooking(booking)) {\r\n        updateBooking({ bookingId: bookingId, person: booking });\r\n      }\r\n    }\r\n  };\r\n\r\n  const validateDate = (str) => {\r\n    var error = false;\r\n    if (!str || str.length !== 10) {\r\n      error = true;\r\n    }\r\n\r\n    if (str.charAt(4) !== \"-\" || str.charAt(7) !== \"-\") {\r\n      error = true;\r\n    }\r\n\r\n    try {\r\n      const result = /^\\d{4}-\\d{2}-\\d{2}$/.test(str);\r\n      if (!result) {\r\n        error = true;\r\n      }\r\n\r\n      const year = parseInt(str.substr(0, 4));\r\n      const month = parseInt(str.substr(5, 2));\r\n      const day = parseInt(str.substr(8, 2));\r\n\r\n      if (year < 1900) {\r\n        error = true;\r\n      }\r\n\r\n      if (month < 1 || month > 12) {\r\n        error = true;\r\n      }\r\n\r\n      if (day > 31) {\r\n        error = true;\r\n      }\r\n    } catch (err) {\r\n      error = true;\r\n    }\r\n\r\n    return !error;\r\n  };\r\n\r\n  const validateTime = (str) => {\r\n    var error = false;\r\n\r\n    const result = /^\\d{2}:\\d{2} AM$|^\\d{2}:\\d{2} PM$/.test(str);\r\n    if (!result) {\r\n      error = true;\r\n    }\r\n\r\n    try {\r\n      const hour = parseInt(str.substr(0, 2));\r\n      const minute = parseInt(str.substr(3, 2));\r\n\r\n      if (hour < 0 || hour > 12) {\r\n        error = true;\r\n      }\r\n\r\n      if (minute < 0 || minute > 59) {\r\n        error = true;\r\n      }\r\n    } catch (err) {\r\n      error = true;\r\n    }\r\n\r\n    return !error;\r\n  };\r\n\r\n  const validateBooking = (booking) => {\r\n    var error = false;\r\n\r\n    if (!validateDate(booking.bookingDate)) {\r\n      error = true;\r\n      setValidationError({ ...validationError, bookingDateError: true });\r\n    }\r\n\r\n    if (!validateTime(booking.bookingTime)) {\r\n      error = true;\r\n      setValidationError({ ...validationError, bookingTimeError: true });\r\n    }\r\n    return !error;\r\n  };\r\n\r\n  const updateBooking = (payload) => {\r\n    setSaving(true);\r\n    bookingService\r\n      .updateBooking(payload)\r\n      .then((res) => {\r\n        setSaving(false);\r\n        setEditMode({ edit: false, person: null });\r\n        setRefreshData(!refreshData);\r\n      })\r\n      .catch((err) => {\r\n        setSaving(false);\r\n        setEditMode({ edit: false, person: null });\r\n        console.log(err);\r\n      });\r\n  };\r\n\r\n  const deleteBooking = (id) => {\r\n    setDeleting(true);\r\n    bookingService\r\n      .deleteBooking(id)\r\n      .then((res) => {\r\n        setDeleting(false);\r\n        setDeleteMode({ delete: false, person: null });\r\n        setRefreshData(!refreshData);\r\n      })\r\n      .catch((err) => {\r\n        setDeleting(false);\r\n        setDeleteMode({ delete: false, person: null });\r\n        console.log(err);\r\n      });\r\n  };\r\n\r\n  const restoreBooking = (id) => {\r\n    setRestoring(true);\r\n    bookingService\r\n      .unDeleteBooking(id)\r\n      .then((res) => {\r\n        setRestoring(false);\r\n        setRestoreMode({ restore: false, person: null });\r\n        setRefreshData(!refreshData);\r\n      })\r\n      .catch((err) => {\r\n        setRestoring(false);\r\n        setRestoreMode({ restore: false, person: null });\r\n        console.log(err);\r\n      });\r\n  };\r\n\r\n  const handleDeleteModeChanged = (del, person) => {\r\n    if (del) {\r\n      setDeleteMode({ delete: del, person: person });\r\n    } else if (!del && !person) {\r\n      setDeleteMode({ delete: del, person: person });\r\n    } else if (!del && person) {\r\n      deleteBooking(person._id);\r\n    }\r\n  };\r\n\r\n  const handleRestoreModeChanged = (restore, person) => {\r\n    if (restore) {\r\n      setRestoreMode({ restore: restore, person: person });\r\n    } else if (!restore && !person) {\r\n      setRestoreMode({ restore: restore, person: person });\r\n    } else if (!restore && person) {\r\n      restoreBooking(person._id);\r\n    }\r\n  };\r\n\r\n  const changeBackToBookingMade = (event, id) => {\r\n    setSaving(true);\r\n    BookService.changeBackToBookingMade(id)\r\n      .then((res) => {\r\n        setSaving(false);\r\n        setRefreshData(!refreshData);\r\n      })\r\n      .catch((err) => {\r\n        console.log(err);\r\n        setSaving(false);\r\n      });\r\n  };\r\n\r\n  const changeToPatientAttended = (event, id) => {\r\n    setSaving(true);\r\n    BookService.changeToPatientAttended(id)\r\n      .then((res) => {\r\n        setSaving(false);\r\n        setRefreshData(!refreshData);\r\n      })\r\n      .catch((err) => {\r\n        console.log(err);\r\n        setSaving(false);\r\n      });\r\n  };\r\n\r\n  const Pay = (event, id) => {\r\n    setSelectedBooking(booking);\r\n    setOpenPayDialog(true);\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (props.booking) {\r\n      BookService.getBookingById(props.booking._id)\r\n        .then((res) => {\r\n          setBooking(res.data);\r\n        })\r\n        .catch((err) => {\r\n          console.log(err);\r\n        });\r\n\r\n      setState((state) => ({\r\n        ...state,\r\n        bookingDialogDataChanged: !state.bookingDialogDataChanged\r\n          ? true\r\n          : false,\r\n      }));\r\n    }\r\n  }, [refreshData, state.bookingPayChanged]);\r\n\r\n  useEffect(() => {\r\n    if (props.booking) {\r\n      setBooking(props.booking);\r\n    }\r\n  }, [props.booking]);\r\n\r\n  const undoPaymentClicked = async () => {\r\n    setSaving(true);\r\n    try {\r\n      await BookService.unPayBooking(booking._id);\r\n      setSaving(false);\r\n      setOpenUndoPayDialog(false);\r\n      setRefreshData(!refreshData);\r\n    } catch (err) {\r\n      console.error(err);\r\n      setSaving(false);\r\n      setOpenUndoPayDialog(false);\r\n    }\r\n  };\r\n\r\n  const refundPaymentClicked = async () => {\r\n    setSaving(true);\r\n    try {\r\n      await BookService.refundBooking(booking._id);\r\n      setSaving(false);\r\n      updateShouldRefundsCount();\r\n      setOpenRefundDialog(false);\r\n      setRefreshData(!refreshData);\r\n    } catch (err) {\r\n      console.error(err);\r\n      setSaving(false);\r\n      setOpenRefundDialog(false);\r\n    }\r\n  };\r\n\r\n  const updateShouldRefundsCount = async () => {\r\n    try {\r\n      const res = await BookService.getShouldRefundsCount();\r\n      if (res && res.data && res.data.status === \"OK\") {\r\n        setState((state) => ({ ...state, shouldRefunsCount: res.data.count }));\r\n      }\r\n    } catch (ex) {\r\n      console.error(ex);\r\n    }\r\n  };\r\n\r\n  const downloadRegForm = (id) => {\r\n    PDFService.downloadSTDRegForm(id)\r\n      .then((res) => {\r\n        const file = new Blob([res.data], { type: \"application/pdf\" });\r\n\r\n        const fileURL = URL.createObjectURL(file);\r\n        window.open(fileURL, \"_blank\");\r\n      })\r\n      .catch((err) => {\r\n        console.log(err);\r\n      });\r\n  };\r\n\r\n  const sendRegForm = (id) => {\r\n    setSaving(true);\r\n    setEmailSent(false);\r\n    BookService.sendRegFormEmail(id)\r\n      .then((res) => {\r\n        setSaving(false);\r\n        if (res.data.status === \"OK\") {\r\n          setEmailSent(true);\r\n        }\r\n      })\r\n      .catch((err) => {\r\n        console.log(err);\r\n        setSaving(false);\r\n      });\r\n  };\r\n\r\n  const onClose = () => {\r\n    setEmailSent(false);\r\n    setEmailSentInvoice(false);\r\n    setInvoice(null);\r\n\r\n    props.onClose();\r\n  };\r\n\r\n  ///*** Invoice  ******************/\r\n\r\n  const [invoice, setInvoice] = React.useState(null);\r\n  const [invoiceLoaded, setInvoiceLoaded] = React.useState(false);\r\n  const [openInvoiceDialog, setOpenInvoiceDialog] = React.useState(false);\r\n  const [emailSentInvoice, setEmailSentInvoice] = React.useState(false);\r\n\r\n  const fetchInvoice = async () => {\r\n    try {\r\n      setInvoiceLoaded(false);\r\n      const res = await InvoiceService.getInvoiceByBookingId(props.booking._id);\r\n      setInvoice(res.data.invoice);\r\n      setInvoiceLoaded(true);\r\n    } catch (err) {\r\n      setInvoiceLoaded(true);\r\n      console.error(err);\r\n    }\r\n  };\r\n\r\n  React.useEffect(() => {\r\n    if (props.booking) {\r\n      fetchInvoice();\r\n    }\r\n  }, [props.booking, props.open]);\r\n\r\n  const handleCloseInvoiceDialog = (refresh) => {\r\n    setOpenInvoiceDialog(false);\r\n    setSelectedBooking(null);\r\n    fetchInvoice();\r\n  };\r\n\r\n  const OpenInvoiceDialog = () => {\r\n    setSelectedBooking(booking);\r\n    setInvoice(invoice);\r\n    setOpenInvoiceDialog(true);\r\n  };\r\n\r\n  const downloadInvoice = (id) => {\r\n    InvoiceService.downloadInvoice(id)\r\n      .then((res) => {\r\n        const file = new Blob([res.data], { type: \"application/pdf\" });\r\n\r\n        const fileURL = URL.createObjectURL(file);\r\n        window.open(fileURL, \"_blank\");\r\n      })\r\n      .catch((err) => {\r\n        console.log(err);\r\n      });\r\n  };\r\n\r\n  const sendInvoiceEmail = (id, _email) => {\r\n    setSaving(true);\r\n    setEmailSentInvoice(false);\r\n    InvoiceService.emailInvoice(id, _email)\r\n      .then((res) => {\r\n        setSaving(false);\r\n        if (res.data.status === \"OK\") {\r\n          setEmailSentInvoice(true);\r\n        }\r\n      })\r\n      .catch((err) => {\r\n        console.log(err);\r\n        setSaving(false);\r\n      });\r\n  };\r\n\r\n  //***************************** */\r\n\r\n  return (\r\n    <React.Fragment>\r\n      {booking && (\r\n        <React.Fragment>\r\n          <Dialog\r\n            maxWidth=\"md\"\r\n            open={props.open}\r\n            TransitionComponent={Transition}\r\n            keepMounted\r\n            onClose={onClose}\r\n            PaperComponent={PaperComponent}\r\n            aria-labelledby=\"alert-dialog-slide-title\"\r\n            aria-describedby=\"alert-dialog-slide-description\"\r\n          >\r\n            <DialogTitle\r\n              id=\"alert-dialog-slide-title\"\r\n              style={\r\n                booking.tr ? { backgroundColor: \"#7e0082\", color: \"#fff\" } : {}\r\n              }\r\n            >\r\n              <div style={{ position: \"absolute\", top: \"25x\", left: \"25px\" }}>\r\n                <Tooltip title=\"COPY EDIT LINK TO CLIPBOARD\">\r\n                  <IconButton\r\n                    onClick={() => {\r\n                      navigator.clipboard.writeText(\r\n                        `https://londonmedicalclinic.co.uk/medicalexpressclinic/user/edit/std/${booking._id}`\r\n                      );\r\n                      setCopied(true);\r\n                      setTimeout(() => {\r\n                        setCopied(false);\r\n                      }, 1500);\r\n                    }}\r\n                    aria-label=\"delete\"\r\n                    className={classes.margin}\r\n                    size=\"small\"\r\n                  >\r\n                    <FileCopyOutlinedIcon\r\n                      style={booking.tr ? { color: \"#ddd\" } : {}}\r\n                      fontSize=\"14px\"\r\n                    />\r\n                  </IconButton>\r\n                </Tooltip>\r\n\r\n                <span\r\n                  hidden={!copied}\r\n                  style={{ fontSize: \"12px\", transition: \"all 1s ease-in\" }}\r\n                >\r\n                  {\" \"}\r\n                  Copied{\" \"}\r\n                </span>\r\n              </div>\r\n\r\n              <div\r\n                style={{\r\n                  position: \"absolute\",\r\n                  top: \"25x\",\r\n                  right: \"60px\",\r\n                  backgroundColor: CalendarColors.STD_COLOR,\r\n                  color: \"#fff\",\r\n                  padding: \"0px 5px\",\r\n                  borderRadius: \"10px\",\r\n                }}\r\n              >\r\n                STD\r\n              </div>\r\n\r\n              <Grid\r\n                container\r\n                direction=\"row\"\r\n                justify=\"center\"\r\n                spacing={2}\r\n                alignItems=\"center\"\r\n              >\r\n                <Grid item>\r\n                  <div\r\n                    style={\r\n                      booking.deleted\r\n                        ? {\r\n                            paddingBottom: \"5px\",\r\n                            textDecoration: \"line-through\",\r\n                          }\r\n                        : {}\r\n                    }\r\n                  >\r\n                    {`${booking.fullname}`}\r\n                  </div>\r\n                </Grid>\r\n\r\n                {booking.deleted && (\r\n                  <Grid item>\r\n                    <Tooltip title=\"This record has been deleted.\">\r\n                      <DeleteIcon\r\n                        style={\r\n                          booking.tr\r\n                            ? {\r\n                                padding: 0,\r\n                                margin: 0,\r\n                                color: \"#fff\",\r\n                                fontSize: 25,\r\n                              }\r\n                            : {\r\n                                padding: 0,\r\n                                margin: 0,\r\n                                color: \"#333\",\r\n                                fontSize: 25,\r\n                              }\r\n                        }\r\n                      />\r\n                    </Tooltip>\r\n                  </Grid>\r\n                )}\r\n              </Grid>\r\n            </DialogTitle>\r\n            <DialogContent>\r\n              <div\r\n                style={{\r\n                  // height: \"550px\",\r\n                  paddingTop: \"0px\",\r\n                }}\r\n              >\r\n                <Grid item xs={12} md={12} key={`panel0`}>\r\n                  <div className={classes.infoDetails}>\r\n                    <ul className={classes.ul}>\r\n                      {/* Restore Functionality ******************************************* */}\r\n                      <li\r\n                        hidden={\r\n                          !(\r\n                            restoreMode.restore &&\r\n                            restoreMode.person._id === booking._id\r\n                          )\r\n                        }\r\n                      >\r\n                        <div\r\n                          style={{\r\n                            fontWeight: \"500\",\r\n                            paddingBottom: \"5px\",\r\n                            paddingLeft: \"5px\",\r\n                            fontSize: \"16px\",\r\n                            color: \"#333\",\r\n                          }}\r\n                        >\r\n                          Are you sure you want to restore this record?\r\n                        </div>\r\n                      </li>\r\n\r\n                      <li\r\n                        hidden={\r\n                          !booking.deleted ||\r\n                          (restoreMode.restore &&\r\n                            restoreMode.person._id === booking._id)\r\n                        }\r\n                      >\r\n                        <Button\r\n                          type=\"button\"\r\n                          fullWidth\r\n                          variant=\"contained\"\r\n                          color=\"primary\"\r\n                          onClick={() => {\r\n                            handleRestoreModeChanged(true, booking);\r\n                          }}\r\n                          className={classes.RestoreButton}\r\n                        >\r\n                          Restore This Record\r\n                        </Button>\r\n                      </li>\r\n\r\n                      <li\r\n                        hidden={\r\n                          !(\r\n                            restoreMode.restore &&\r\n                            restoreMode.person._id === booking._id\r\n                          )\r\n                        }\r\n                      >\r\n                        <Button\r\n                          type=\"button\"\r\n                          fullWidth\r\n                          variant=\"contained\"\r\n                          color=\"primary\"\r\n                          disabled={restoring}\r\n                          onClick={() => {\r\n                            handleRestoreModeChanged(false, booking);\r\n                          }}\r\n                          className={classes.SaveButton}\r\n                        >\r\n                          YES, Restore this!\r\n                        </Button>\r\n                      </li>\r\n\r\n                      <li\r\n                        hidden={\r\n                          !(\r\n                            restoreMode.restore &&\r\n                            restoreMode.person._id === booking._id\r\n                          )\r\n                        }\r\n                      >\r\n                        <Button\r\n                          type=\"button\"\r\n                          fullWidth\r\n                          variant=\"contained\"\r\n                          color=\"default\"\r\n                          disabled={restoring}\r\n                          onClick={() => {\r\n                            handleRestoreModeChanged(false, null);\r\n                          }}\r\n                          className={classes.CancelButton}\r\n                        >\r\n                          Cancel\r\n                        </Button>\r\n                      </li>\r\n\r\n                      {/*  ******************************************************************* */}\r\n\r\n                      {/* Edit Functionality ******************************************* */}\r\n\r\n                      <li\r\n                        hidden={\r\n                          booking.deleted ||\r\n                          deleteMode.delete ||\r\n                          (editMode.edit && editMode.person._id === booking._id)\r\n                        }\r\n                      >\r\n                        <Button\r\n                          type=\"button\"\r\n                          fullWidth\r\n                          variant=\"contained\"\r\n                          color=\"primary\"\r\n                          onClick={() => {\r\n                            handleEditModeChanged(true, booking);\r\n                          }}\r\n                          className={classes.EditButton}\r\n                        >\r\n                          Edit Booking Info\r\n                        </Button>\r\n                      </li>\r\n\r\n                      <li\r\n                        hidden={\r\n                          !(\r\n                            editMode.edit && editMode.person._id === booking._id\r\n                          )\r\n                        }\r\n                      >\r\n                        <Button\r\n                          type=\"button\"\r\n                          fullWidth\r\n                          variant=\"contained\"\r\n                          color=\"primary\"\r\n                          disabled={saving || !recordChanged}\r\n                          onClick={() => {\r\n                            handleEditModeChanged(false, booking);\r\n                          }}\r\n                          className={classes.SaveButton}\r\n                        >\r\n                          Save Changes\r\n                        </Button>\r\n                      </li>\r\n\r\n                      <li\r\n                        hidden={\r\n                          !(\r\n                            editMode.edit && editMode.person._id === booking._id\r\n                          )\r\n                        }\r\n                      >\r\n                        <Button\r\n                          type=\"button\"\r\n                          fullWidth\r\n                          variant=\"contained\"\r\n                          color=\"default\"\r\n                          disabled={saving}\r\n                          onClick={() => {\r\n                            handleEditModeChanged(false, null);\r\n                          }}\r\n                          className={classes.CancelButton}\r\n                        >\r\n                          Cancel\r\n                        </Button>\r\n                      </li>\r\n\r\n                      {/* ****************************************************************************************** */}\r\n\r\n                      {/* Delete Functionality ******************************************* */}\r\n\r\n                      <li\r\n                        hidden={\r\n                          !(\r\n                            deleteMode.delete &&\r\n                            deleteMode.person._id === booking._id\r\n                          )\r\n                        }\r\n                      >\r\n                        <div\r\n                          style={{\r\n                            fontWeight: \"600\",\r\n                            paddingBottom: \"5px\",\r\n                            paddingLeft: \"5px\",\r\n                            fontSize: \"16px\",\r\n                          }}\r\n                        >\r\n                          Are you sure you want to delete this record?\r\n                        </div>\r\n                      </li>\r\n\r\n                      <li\r\n                        hidden={\r\n                          props.deleteButtonDisabled ||\r\n                          booking.deleted ||\r\n                          editMode.edit ||\r\n                          (deleteMode.delete &&\r\n                            deleteMode.person._id === booking._id)\r\n                        }\r\n                      >\r\n                        {booking.OTCCharges > 0 && (\r\n                          <Tooltip title={\"Paid Records Cannot be Deleted!\"}>\r\n                            <div>\r\n                              <Button\r\n                                disabled={booking.OTCCharges > 0}\r\n                                type=\"button\"\r\n                                fullWidth\r\n                                variant=\"contained\"\r\n                                color=\"primary\"\r\n                                onClick={() => {\r\n                                  handleDeleteModeChanged(true, booking);\r\n                                }}\r\n                                className={classes.DeleteButton}\r\n                              >\r\n                                Delete This Record\r\n                              </Button>\r\n                            </div>\r\n                          </Tooltip>\r\n                        )}\r\n                        {booking.OTCCharges === 0 && (\r\n                          <Button\r\n                            disabled={booking.OTCCharges > 0}\r\n                            type=\"button\"\r\n                            fullWidth\r\n                            variant=\"contained\"\r\n                            color=\"primary\"\r\n                            onClick={() => {\r\n                              handleDeleteModeChanged(true, booking);\r\n                            }}\r\n                            className={classes.DeleteButton}\r\n                          >\r\n                            Delete This Record\r\n                          </Button>\r\n                        )}\r\n                      </li>\r\n\r\n                      <li\r\n                        hidden={\r\n                          !(\r\n                            deleteMode.delete &&\r\n                            deleteMode.person._id === booking._id\r\n                          )\r\n                        }\r\n                      >\r\n                        <Button\r\n                          type=\"button\"\r\n                          fullWidth\r\n                          variant=\"contained\"\r\n                          color=\"primary\"\r\n                          disabled={deleting}\r\n                          onClick={() => {\r\n                            handleDeleteModeChanged(false, booking);\r\n                          }}\r\n                          className={classes.SaveButton}\r\n                        >\r\n                          YES, Delete this!\r\n                        </Button>\r\n                      </li>\r\n\r\n                      <li\r\n                        hidden={\r\n                          !(\r\n                            deleteMode.delete &&\r\n                            deleteMode.person._id === booking._id\r\n                          )\r\n                        }\r\n                      >\r\n                        <Button\r\n                          type=\"button\"\r\n                          fullWidth\r\n                          variant=\"contained\"\r\n                          color=\"default\"\r\n                          disabled={deleting}\r\n                          onClick={() => {\r\n                            handleDeleteModeChanged(false, null);\r\n                          }}\r\n                          className={classes.CancelButton}\r\n                        >\r\n                          Cancel\r\n                        </Button>\r\n                      </li>\r\n\r\n                      {/* ****************************************************************************************** */}\r\n\r\n                      <li className={classes.li}>\r\n                        <Grid container spacing={2}>\r\n                          <Grid item xs={6}>\r\n                            <span className={classes.infoTitle}>\r\n                              BOOKED DATE\r\n                            </span>\r\n\r\n                            <span\r\n                              hidden={\r\n                                editMode.edit &&\r\n                                editMode.person._id === booking._id\r\n                              }\r\n                              className={classes.infoData}\r\n                            >\r\n                              {FormatDateFromString(booking.bookingDate)}\r\n                            </span>\r\n                            <span\r\n                              hidden={\r\n                                !(\r\n                                  editMode.edit &&\r\n                                  editMode.person._id === booking._id\r\n                                )\r\n                              }\r\n                              className={classes.infoData}\r\n                            >\r\n                              <TextField\r\n                                fullWidth\r\n                                error={validationError.bookingDateError}\r\n                                className={classes.TextBox}\r\n                                value={bookingDate}\r\n                                onChange={bookingDateChanged}\r\n                                inputProps={{\r\n                                  style: {\r\n                                    padding: 0,\r\n                                  },\r\n                                }}\r\n                              ></TextField>\r\n                            </span>\r\n                          </Grid>\r\n                          <Grid item xs={6}>\r\n                            <span className={classes.infoTitle}>\r\n                              BOOKED TIME\r\n                            </span>\r\n                            <span\r\n                              hidden={\r\n                                editMode.edit &&\r\n                                editMode.person._id === booking._id\r\n                              }\r\n                              className={classes.infoData}\r\n                            >\r\n                              {booking.bookingTime.toUpperCase()}\r\n                            </span>\r\n                            <span\r\n                              hidden={\r\n                                !(\r\n                                  editMode.edit &&\r\n                                  editMode.person._id === booking._id\r\n                                )\r\n                              }\r\n                              className={classes.infoData}\r\n                            >\r\n                              <TextField\r\n                                fullWidth\r\n                                error={validationError.bookingTimeError}\r\n                                className={classes.TextBox}\r\n                                value={bookingTime}\r\n                                onChange={bookingTimeChanged}\r\n                                inputProps={{\r\n                                  style: {\r\n                                    padding: 0,\r\n                                  },\r\n                                }}\r\n                              ></TextField>\r\n                            </span>\r\n                          </Grid>\r\n                        </Grid>\r\n                      </li>\r\n\r\n                      <li className={classes.li}>\r\n                        <Grid container spacing={2}>\r\n                          <Grid item xs={6}>\r\n                            <span className={classes.infoTitle}>FULLNAME</span>\r\n                            <span\r\n                              hidden={\r\n                                editMode.edit &&\r\n                                editMode.person._id === booking._id\r\n                              }\r\n                              className={classes.infoData}\r\n                            >\r\n                              {booking.fullname}\r\n                            </span>\r\n                            <span\r\n                              hidden={\r\n                                !(\r\n                                  editMode.edit &&\r\n                                  editMode.person._id === booking._id\r\n                                )\r\n                              }\r\n                              className={classes.infoData}\r\n                            >\r\n                              <TextField\r\n                                fullWidth\r\n                                className={classes.TextBox}\r\n                                value={fullname}\r\n                                onChange={fullnameChanged}\r\n                                inputProps={{\r\n                                  style: {\r\n                                    padding: 0,\r\n                                  },\r\n                                }}\r\n                              ></TextField>\r\n                            </span>\r\n                          </Grid>\r\n                          <Grid item xs={6}>\r\n                            <span className={classes.infoTitle}>EMAIL</span>\r\n                            <span\r\n                              hidden={\r\n                                editMode.edit &&\r\n                                editMode.person._id === booking._id\r\n                              }\r\n                              className={classes.infoData}\r\n                            >\r\n                              {booking.email}\r\n                            </span>\r\n                            <span\r\n                              hidden={\r\n                                !(\r\n                                  editMode.edit &&\r\n                                  editMode.person._id === booking._id\r\n                                )\r\n                              }\r\n                              className={classes.infoData}\r\n                            >\r\n                              <TextField\r\n                                fullWidth\r\n                                className={classes.TextBox}\r\n                                value={email}\r\n                                onChange={emailChanged}\r\n                                inputProps={{\r\n                                  style: {\r\n                                    padding: 0,\r\n                                  },\r\n                                }}\r\n                              ></TextField>\r\n                            </span>\r\n                          </Grid>\r\n                        </Grid>\r\n                      </li>\r\n                      <li className={classes.li}>\r\n                        <Grid container spacing={2}>\r\n                          <Grid item xs={6}>\r\n                            <span className={classes.infoTitle}>TEL</span>\r\n                            <span\r\n                              hidden={\r\n                                editMode.edit &&\r\n                                editMode.person._id === booking._id\r\n                              }\r\n                              className={classes.infoData}\r\n                            >\r\n                              {booking.phone?.toUpperCase()}\r\n                            </span>\r\n                            <span\r\n                              hidden={\r\n                                !(\r\n                                  editMode.edit &&\r\n                                  editMode.person._id === booking._id\r\n                                )\r\n                              }\r\n                              className={classes.infoData}\r\n                            >\r\n                              <TextField\r\n                                fullWidth\r\n                                className={classes.TextBox}\r\n                                value={tel}\r\n                                onChange={telChanged}\r\n                                inputProps={{\r\n                                  style: {\r\n                                    padding: 0,\r\n                                  },\r\n                                }}\r\n                              ></TextField>\r\n                            </span>\r\n                          </Grid>\r\n                          <Grid item xs={6}>\r\n                            <span className={classes.infoTitle}>NOTES</span>\r\n                            <span\r\n                              hidden={\r\n                                editMode.edit &&\r\n                                editMode.person._id === booking._id\r\n                              }\r\n                              className={classes.infoData}\r\n                            >\r\n                              {booking.notes}\r\n                            </span>\r\n                            <span\r\n                              hidden={\r\n                                !(\r\n                                  editMode.edit &&\r\n                                  editMode.person._id === booking._id\r\n                                )\r\n                              }\r\n                              className={classes.infoData}\r\n                            >\r\n                              <TextField\r\n                                fullWidth\r\n                                className={classes.TextBox}\r\n                                value={notes}\r\n                                onChange={notesChanged}\r\n                                inputProps={{\r\n                                  style: {\r\n                                    padding: 0,\r\n                                  },\r\n                                }}\r\n                              ></TextField>\r\n                            </span>\r\n                          </Grid>\r\n                        </Grid>\r\n                      </li>\r\n\r\n                      <li className={classes.li} style={{ paddingTop: \"10px\" }}>\r\n                        <span className={classes.infoTitle}>Package</span>\r\n                        <span\r\n                          hidden={\r\n                            editMode.edit && editMode.person._id === booking._id\r\n                          }\r\n                          className={classes.infoData}\r\n                        >\r\n                          {booking.packageName}\r\n                        </span>\r\n                        <span\r\n                          hidden={\r\n                            !(\r\n                              editMode.edit &&\r\n                              editMode.person._id === booking._id\r\n                            )\r\n                          }\r\n                          className={classes.infoData}\r\n                        >\r\n                          <TextField\r\n                            fullWidth\r\n                            className={classes.TextBox}\r\n                            value={service}\r\n                            onChange={serviceChanged}\r\n                            inputProps={{\r\n                              style: {\r\n                                padding: 0,\r\n                              },\r\n                            }}\r\n                          ></TextField>\r\n                        </span>\r\n                      </li>\r\n\r\n                      <li className={classes.li} style={{ paddingTop: \"10px\" }}>\r\n                        <span className={classes.infoTitle}>STATUS</span>{\" \"}\r\n                        {getStatusLabel(booking.status)}\r\n                        {booking.status === \"patient_attended\" &&\r\n                          !(\r\n                            editMode.edit && editMode.person._id === booking._id\r\n                          ) &&\r\n                          !booking.deleted && (\r\n                            <Button\r\n                              variant=\"outlined\"\r\n                              color=\"primary\"\r\n                              disabled={saving}\r\n                              style={{ width: \"300px\" }}\r\n                              onClick={(event) =>\r\n                                changeBackToBookingMade(event, booking._id)\r\n                              }\r\n                            >\r\n                              Change Back To Booking Made\r\n                            </Button>\r\n                          )}\r\n                        {booking.status === \"booked\" &&\r\n                          !(\r\n                            editMode.edit && editMode.person._id === booking._id\r\n                          ) &&\r\n                          !booking.deleted && (\r\n                            <Button\r\n                              variant=\"outlined\"\r\n                              color=\"default\"\r\n                              disabled={saving}\r\n                              style={{ width: \"300px\" }}\r\n                              onClick={(event) =>\r\n                                changeToPatientAttended(event, booking._id)\r\n                              }\r\n                            >\r\n                              Change To Patient Attended\r\n                            </Button>\r\n                          )}\r\n                      </li>\r\n\r\n                      <li className={classes.li} style={{ paddingTop: \"10px\" }}>\r\n                        <span\r\n                          hidden={\r\n                            editMode.edit && editMode.person._id === booking._id\r\n                          }\r\n                          className={classes.infoTitle}\r\n                        >\r\n                          Estimated Price\r\n                        </span>\r\n                        <span\r\n                          hidden={\r\n                            editMode.edit && editMode.person._id === booking._id\r\n                          }\r\n                          className={classes.infoData}\r\n                        >\r\n                          {booking.estimatedPrice}\r\n                        </span>\r\n                      </li>\r\n\r\n                      <li hidden={booking.deleted || editMode.edit}>\r\n                        <Button\r\n                          disabled={!booking.formData}\r\n                          startIcon={<PrintIcon />}\r\n                          type=\"button\"\r\n                          fullWidth\r\n                          variant=\"outlined\"\r\n                          color=\"primary\"\r\n                          onClick={() => {\r\n                            downloadRegForm(booking._id);\r\n                          }}\r\n                          className={classes.DownloadForm}\r\n                        >\r\n                          Download Registration Form\r\n                        </Button>\r\n                      </li>\r\n\r\n                      <li\r\n                        hidden={\r\n                          booking.deleted || editMode.edit || booking.formData\r\n                        }\r\n                      >\r\n                        <Button\r\n                          disabled={!booking.email || booking.email.length < 3}\r\n                          startIcon={<SendIcon />}\r\n                          type=\"button\"\r\n                          fullWidth\r\n                          variant=\"outlined\"\r\n                          color=\"primary\"\r\n                          onClick={() => {\r\n                            sendRegForm(booking._id);\r\n                          }}\r\n                          className={classes.DownloadForm}\r\n                          style={{ position: \"relative\" }}\r\n                        >\r\n                          Send Registration Form Email\r\n                          {emailSent && (\r\n                            <div\r\n                              style={{\r\n                                position: \"absolute\",\r\n                                right: \"10px\",\r\n                                top: \"5px\",\r\n                                color: \"#05ad19\",\r\n                              }}\r\n                            >\r\n                              Email Sent\r\n                            </div>\r\n                          )}\r\n                        </Button>\r\n                      </li>\r\n\r\n                      <Divider />\r\n\r\n                      <li className={classes.li} style={{ marginTop: \"20px\" }}>\r\n                        <span className={classes.infoTitle}>INVOICE # : </span>{\" \"}\r\n                        <span style={{ paddingLeft: \"0px\" }}>\r\n                          {!invoiceLoaded && (\r\n                            <span className={classes.invoiceNumber}> ... </span>\r\n                          )}\r\n                          {invoiceLoaded && invoice && (\r\n                            <span className={classes.invoiceNumber}>\r\n                              {\" \"}\r\n                              {invoice.invoiceNumber}{\" \"}\r\n                            </span>\r\n                          )}\r\n                          {invoiceLoaded && !invoice && (\r\n                            <span\r\n                              className={classes.invoiceNumber}\r\n                              style={{ color: \"red\", fontSize: \"0.9rem\" }}\r\n                            >\r\n                              {\" \"}\r\n                              N/A{\" \"}\r\n                            </span>\r\n                          )}\r\n                        </span>\r\n                        {!(\r\n                          editMode.edit && editMode.person._id === booking._id\r\n                        ) &&\r\n                          !booking.deleted && (\r\n                            <React.Fragment>\r\n                              {invoiceLoaded && !invoice && (\r\n                                <Button\r\n                                  variant=\"outlined\"\r\n                                  color=\"primary\"\r\n                                  className={classes.PayButton}\r\n                                  onClick={() => OpenInvoiceDialog()}\r\n                                >\r\n                                  Issue Invoice\r\n                                </Button>\r\n                              )}\r\n\r\n                              {invoiceLoaded && invoice && (\r\n                                <React.Fragment>\r\n                                  <Button\r\n                                    variant=\"outlined\"\r\n                                    startIcon={<PrintIcon />}\r\n                                    color=\"primary\"\r\n                                    className={classes.printInvoiceButton}\r\n                                    onClick={() => downloadInvoice(invoice._id)}\r\n                                  >\r\n                                    Download Invoice\r\n                                  </Button>\r\n\r\n                                  <Button\r\n                                    variant=\"outlined\"\r\n                                    color=\"secondary\"\r\n                                    className={classes.editInvoiceButton}\r\n                                    onClick={() => OpenInvoiceDialog()}\r\n                                  >\r\n                                    Edit Invoice\r\n                                  </Button>\r\n\r\n                                  <Button\r\n                                    disabled={\r\n                                      !booking.email || booking.email.length < 3\r\n                                    }\r\n                                    startIcon={<SendIcon />}\r\n                                    type=\"button\"\r\n                                    variant=\"outlined\"\r\n                                    color=\"primary\"\r\n                                    onClick={() => {\r\n                                      sendInvoiceEmail(\r\n                                        invoice._id,\r\n                                        booking.email\r\n                                      );\r\n                                    }}\r\n                                    style={{\r\n                                      position: \"relative\",\r\n                                      marginLeft: \"10px\",\r\n                                      paddingRight: \"130px\",\r\n                                      fontSize: \"0.8rem\",\r\n                                    }}\r\n                                  >\r\n                                    Send Invoice By Email\r\n                                    {emailSentInvoice && (\r\n                                      <div\r\n                                        style={{\r\n                                          position: \"absolute\",\r\n                                          right: \"10px\",\r\n                                          top: \"5px\",\r\n                                          color: \"#05ad19\",\r\n                                        }}\r\n                                      >\r\n                                        Email Sent\r\n                                      </div>\r\n                                    )}\r\n                                  </Button>\r\n                                </React.Fragment>\r\n                              )}\r\n                            </React.Fragment>\r\n                          )}\r\n                      </li>\r\n\r\n                      <li className={classes.li} style={{ marginTop: \"20px\" }}>\r\n                        <span className={classes.infoTitle}>TOTAL CHARGES</span>{\" \"}\r\n                        <span\r\n                          style={{ paddingLeft: \"15px\" }}\r\n                          className={\r\n                            !booking.OTCCharges || booking.OTCCharges === 0\r\n                              ? classes.infoDataChargesHigher\r\n                              : classes.infoDataCharges\r\n                          }\r\n                        >{`£${booking.OTCCharges.toLocaleString(\r\n                          \"en-GB\"\r\n                        )}`}</span>\r\n                        {!(\r\n                          editMode.edit && editMode.person._id === booking._id\r\n                        ) &&\r\n                          !booking.paid &&\r\n                          !booking.deleted && (\r\n                            <Button\r\n                              variant=\"outlined\"\r\n                              color=\"secondary\"\r\n                              className={classes.PayButton}\r\n                              onClick={(event) => Pay(event, booking._id)}\r\n                            >\r\n                              Pay\r\n                            </Button>\r\n                          )}\r\n                        {!(\r\n                          editMode.edit && editMode.person._id === booking._id\r\n                        ) &&\r\n                          booking.paid && (\r\n                            <React.Fragment>\r\n                              <span className={classes.PayLabel}>\r\n                                {\" \"}\r\n                                <CheckIcon\r\n                                  className={classes.checkIconSmall}\r\n                                />{\" \"}\r\n                                Paid by {booking.paidBy}\r\n                                {booking.paidBy === \"corporate\"\r\n                                  ? ` \"${booking.corporate}\" `\r\n                                  : \"\"}\r\n                              </span>\r\n\r\n                              <Tooltip title=\"Undo Payment\">\r\n                                <IconButton\r\n                                  onClick={() => setOpenUndoPayDialog(true)}\r\n                                >\r\n                                  <UndoIcon style={{ color: \"red\" }} />\r\n                                </IconButton>\r\n                              </Tooltip>\r\n                            </React.Fragment>\r\n                          )}\r\n                      </li>\r\n                    </ul>\r\n                  </div>\r\n                </Grid>\r\n              </div>\r\n              <Backdrop\r\n                className={classes.backdrop}\r\n                open={saving || deleting || restoring}\r\n              >\r\n                <CircularProgress color=\"inherit\" />\r\n              </Backdrop>\r\n            </DialogContent>\r\n\r\n            <PayDialog\r\n              booking={selectedBooking}\r\n              open={openPayDialog}\r\n              price={invoice ? invoice.grandTotal : null}\r\n              handleClose={handleClosePayDialog}\r\n            />\r\n\r\n            <InvoiceDialog\r\n              booking={selectedBooking}\r\n              invoice={invoice}\r\n              open={openInvoiceDialog}\r\n              handleClose={handleCloseInvoiceDialog}\r\n            />\r\n          </Dialog>\r\n\r\n          <Dialog\r\n            open={openUndoPayDialog}\r\n            onClose={handleCloseUndoPayDialog}\r\n            aria-labelledby=\"alert-dialog-title\"\r\n            aria-describedby=\"alert-dialog-description\"\r\n          >\r\n            <DialogTitle style={{ color: \"#999\" }} id=\"alert-dialog-title\">\r\n              {\"Undo Payment\"}\r\n            </DialogTitle>\r\n            <DialogContent>\r\n              <DialogContentText\r\n                style={{ color: \"#333\", fontWeight: \"400\" }}\r\n                id=\"alert-dialog-description\"\r\n              >\r\n                Are you sure you want to undo payment for this booking?\r\n              </DialogContentText>\r\n            </DialogContent>\r\n            <DialogActions>\r\n              <Button onClick={handleCloseUndoPayDialog} color=\"default\">\r\n                Back\r\n              </Button>\r\n              <Button onClick={undoPaymentClicked} color=\"secondary\" autoFocus>\r\n                Yes, Undo Payment\r\n              </Button>\r\n            </DialogActions>\r\n          </Dialog>\r\n\r\n          <Dialog\r\n            open={openRefundDialog}\r\n            onClose={handleCloseRefundDialog}\r\n            aria-labelledby=\"alert-dialog-title\"\r\n            aria-describedby=\"alert-dialog-description\"\r\n          >\r\n            <DialogTitle style={{ color: \"#999\" }} id=\"alert-dialog-title\">\r\n              {\"Refund Deposit\"}\r\n            </DialogTitle>\r\n            <DialogContent>\r\n              <DialogContentText\r\n                style={{ color: \"#333\", fontWeight: \"400\" }}\r\n                id=\"alert-dialog-description\"\r\n              >\r\n                Are you sure you want to refund deposit payment for this\r\n                booking?\r\n              </DialogContentText>\r\n            </DialogContent>\r\n            <DialogActions>\r\n              <Button onClick={handleCloseRefundDialog} color=\"default\">\r\n                Back\r\n              </Button>\r\n              <Button\r\n                onClick={refundPaymentClicked}\r\n                color=\"secondary\"\r\n                autoFocus\r\n              >\r\n                Yes, Refund Payment\r\n              </Button>\r\n            </DialogActions>\r\n          </Dialog>\r\n        </React.Fragment>\r\n      )}\r\n    </React.Fragment>\r\n  );\r\n}\r\n","import React, {useEffect, useRef, useState} from 'react';\r\nimport { DataGrid } from '@material-ui/data-grid';\r\nimport BookService from './services/BookService';\r\nimport { Button, Checkbox, CircularProgress, Dialog, DialogContent, DialogTitle, Divider, FormControl, FormControlLabel, Grid, Icon, InputLabel, LinearProgress, Link, makeStyles, MenuItem, Paper, Select, SvgIcon, Switch, TextField, Tooltip } from '@material-ui/core';\r\nimport RefreshIcon from '@material-ui/icons/Refresh';\r\nimport { IconButton } from '@material-ui/core';\r\nimport CheckIcon from '@material-ui/icons/Check';\r\nimport CloseIcon from '@material-ui/icons/Close';\r\nimport GlobalState from './../GlobalState';\r\nimport { getMenuIndex } from './../MenuList';\r\nimport {FormatDateFromString, FormatDateFromStringShortYear} from './DateFormatter';\r\n\r\nimport SearchIcon from '@material-ui/icons/Search';\r\nimport BookingDialog from './BookingDialog';\r\n\r\nimport NewReleasesIcon from '@material-ui/icons/NewReleases';\r\nimport HistoryIcon from '@material-ui/icons/History';\r\nimport TimelineIcon from '@material-ui/icons/Timeline';\r\nimport DescriptionIcon from '@material-ui/icons/Description';\r\nimport AutorenewIcon from '@material-ui/icons/Autorenew';\r\nimport LiveTvIcon from '@material-ui/icons/LiveTv';\r\nimport PlaylistAddCheckIcon from '@material-ui/icons/PlaylistAddCheck';\r\nimport AddCircleOutlineIcon from '@material-ui/icons/AddCircleOutline';\r\nimport DeleteIcon from '@material-ui/icons/Delete';\r\nimport HourglassEmptyIcon from '@material-ui/icons/HourglassEmpty';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { faFileExcel } from \"@fortawesome/free-solid-svg-icons\";\r\nimport Draggable from 'react-draggable';\r\n\r\nimport * as dateformat from 'dateformat';\r\n\r\nimport DateFnsUtils from '@date-io/date-fns';\r\nimport {\r\n  MuiPickersUtilsProvider,\r\n  KeyboardTimePicker,\r\n  KeyboardDatePicker,\r\n} from '@material-ui/pickers';\r\n\r\nimport BusinessIcon from '@material-ui/icons/Business';\r\nimport CreditCardIcon from '@material-ui/icons/CreditCard';\r\nimport LocalAtmIcon from '@material-ui/icons/LocalAtm';\r\n\r\n\r\nimport ReactHTMLTableToExcel from 'react-html-table-to-excel';\r\nimport PriceCalculator from './PriceCalculator';\r\nimport { corporates } from './Corporates';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  title: {\r\n    marginTop: theme.spacing(0),\r\n    marginBottom: theme.spacing(1),\r\n\r\n  },\r\n  \r\n  refreshButton:{\r\n    marginLeft: theme.spacing(2),\r\n  },\r\n\r\n  checkIcon:{\r\n    color: \"green\"\r\n  },\r\n\r\n  closeIcon:{\r\n    color: \"red\"\r\n  },\r\n\r\n  RefLink: {\r\n    cursor: \"pointer\"\r\n  },\r\n\r\n  BookedLabel:{\r\n    backgroundColor: \"#606060\",\r\n    color: \"#fff\",\r\n    width: \"70px\",\r\n    textAlign: \"center\",\r\n  },\r\n\r\n  PatientAttendedLabel:{\r\n    backgroundColor: \"#0066aa\",\r\n    color: \"#fff\",\r\n    width: \"70px\",\r\n    textAlign: \"center\",\r\n  },\r\n\r\n  SampleTakenLabel:{\r\n    backgroundColor: \"#0066cc\",\r\n    color: \"#fff\",\r\n    width: \"70px\",\r\n    textAlign: \"center\",\r\n  },\r\n\r\n  ReportSentLabel:{\r\n    backgroundColor: \"#009900\",\r\n    color: \"#fff\",\r\n    width: \"70px\",\r\n    textAlign: \"center\",\r\n  },\r\n\r\n  ReportCertSentLabel:{\r\n    backgroundColor: \"#009900\",\r\n    color: \"#fff\",\r\n    width: \"70px\",\r\n    textAlign: \"center\",\r\n  },\r\n\r\n  PositiveLabel:{\r\n    backgroundColor: \"red\",\r\n    color: \"#fff\",\r\n    width: \"70px\",\r\n    textAlign: \"center\",\r\n  },\r\n\r\n  HideNowRows: {\r\n    position: \"absolute\",\r\n    top: \"40%\",\r\n    left: \"40%\",\r\n    width: \"600px\",\r\n    height: \"300px\",\r\n    backgroundColor : \"#fafafa\",\r\n    color : \"#111\",\r\n    zIndex: \"1000\",\r\n    display: \"flex\",\r\n    alignItems: \"center\",\r\n    justifyItems: \"center\"\r\n  },\r\n\r\n  ExportToExcelButton:\r\n  {\r\n    // marginBottom : \"20px\",\r\n    color : \"#2f942e\",\r\n    borderColor: \"#2f942e\",\r\n    \"&:hover\": {\r\n      background: \"#fafffa\",\r\n      borderColor: \"#2f942e\",\r\n    },\r\n    textDecoration : \"none !important\", \r\n   \r\n  },\r\n\r\n  ExportToExcelButtonInline:\r\n  {\r\n    // marginBottom : \"20px\",\r\n    color : \"#2f942e\",\r\n    borderColor: \"#2f942e\",\r\n    \"&:hover\": {\r\n      background: \"#fafffa\",\r\n      borderColor: \"#2f942e\",\r\n    },\r\n    textDecoration : \"none !important\", \r\n    cursor: \"pointer\",\r\n    padding: \"10px\"\r\n   \r\n  },\r\n\r\n  table: {\r\n    width: \"100%\",\r\n    border: \"1px solid #ddd\",\r\n    borderCollapse: \"collapse\",\r\n},\r\n\r\nth: {\r\n    border: \"1px solid #ddd\",\r\n    borderCollapse: \"collapse\",\r\n    verticalAlign: \"middle\",\r\n    fontcolor: \"#555\",\r\n    fontWeight: \"400\",\r\n    fontSize: \"15px\",\r\n    paddingTop: \"5px\",\r\n    paddingBottom: \"5px\",\r\n    width: \"14%\",\r\n    paddingLeft: \"5px\",\r\n},\r\n\r\ntd: {\r\n    border: \"1px solid #ddd\",\r\n    borderCollapse: \"collapse\",\r\n    verticalAlign: \"middle\",\r\n    paddingLeft: \"5px\",\r\n},\r\n\r\ntopSelect: {\r\n  margin: theme.spacing(1),\r\n  minWidth: 80,\r\n},\r\n\r\nnotifyIcon:{\r\n  width: \"16px\",\r\n  height: \"16px\",\r\n  borderRadius: \"50%\",\r\n  backgroundColor : \"rgb(220, 0, 78)\",\r\n  marginLeft: \"10px\"\r\n}\r\n\r\n}));\r\n\r\nconst getTableTitle = (str) =>{\r\n\r\n  if (str === 'today')\r\n  {\r\n    return `Today's Bookings`;\r\n  }else if (str === 'old')\r\n  {\r\n    return `Old Bookings`;\r\n  }else if (str === 'future')\r\n  {\r\n    return `Future Bookings`;\r\n  }else if (str === 'recent')\r\n  {\r\n    return `Recent Bookings`;\r\n  }else if (str === 'live')\r\n  {\r\n    return `Live Bookings`;\r\n  }else if (str === 'completed')\r\n  {\r\n    return `Completed Bookings`;\r\n  }else if (str === 'positive')\r\n  {\r\n    return `Positive Results`;\r\n  }else if (str === 'deleted')\r\n  {\r\n    return `Deleted Records`;\r\n  }else if (str === 'late')\r\n  {\r\n    return `40 Hours Late`;\r\n  }\r\n  \r\n  else\r\n  {\r\n    return `All Bookings`;\r\n  }\r\n\r\n}\r\n\r\nconst getTableIcon = (str) =>{\r\n\r\n  if (str === 'today')\r\n  {\r\n    return <NewReleasesIcon style={{fontSize:\"2.2rem\"}} />;\r\n  }else if (str === 'old')\r\n  {\r\n    return <HistoryIcon style={{fontSize:\"2.2rem\"}} />;\r\n  }else if (str === 'future')\r\n  {\r\n    return <TimelineIcon style={{fontSize:\"2.2rem\"}} />;\r\n  }else if (str === 'recent')\r\n  {\r\n    return <AutorenewIcon style={{fontSize:\"2.2rem\"}} />;\r\n  }else if (str === 'live')\r\n  {\r\n    return <LiveTvIcon style={{fontSize:\"2.2rem\"}} />;\r\n  }else if (str === 'completed')\r\n  {\r\n    return  <PlaylistAddCheckIcon style={{fontSize:\"2.2rem\"}} />;\r\n  }else if (str === 'positive')\r\n  {\r\n    return <AddCircleOutlineIcon style={{fontSize:\"2.2rem\"}} />\r\n  }else if (str === 'deleted')\r\n  {\r\n    return <DeleteIcon style={{fontSize:\"2.2rem\"}} />;\r\n  }else if (str === 'late')\r\n  {\r\n    return <HourglassEmptyIcon style={{fontSize:\"2.2rem\"}} />;\r\n  }\r\n  \r\n  else\r\n  {\r\n    return <DescriptionIcon style={{fontSize:\"2.2rem\"}} />;\r\n  }\r\n\r\n}\r\n\r\nfunction PaperComponent(props) {\r\n  return (\r\n    <Draggable handle=\"#draggable-dialog-title\" cancel={'[class*=\"MuiDialogContent-root\"]'}>\r\n      <Paper {...props} />\r\n    </Draggable>\r\n  );\r\n}\r\n\r\nexport default function BookingTable(props) {\r\n  \r\n  const classes = useStyles();\r\n\r\n  const [topCount, setTopCount] = React.useState(25)\r\n  const topCountChanged = (event) =>\r\n  {\r\n    setTopCount(event.target.value)\r\n    loadData(event.target.value)\r\n  }\r\n  \r\n\r\n  const [openDialogExcel, setOpenDialogExcel] = useState(false);\r\n  const handleCloseDialogExcel = () =>\r\n  {\r\n    setCorporate(corporates[0]);\r\n    setJustCorporate(false);\r\n    setOpenDialogExcel(false);\r\n  }\r\n\r\n\r\n  const [fromDate, setFromDate] = React.useState(new Date(new Date().getTime() - 7 * 24 * 60 * 60 * 1000 ));\r\n  const handleFromDateChange = (date) => {\r\n    setFromDate(date);\r\n    setFromDateStr(dateformat(date,'yyyy-mm-dd'));\r\n  };\r\n\r\n  const [untilDate, setUntilDate] = React.useState(new Date(new Date().getTime() - 1 * 24 * 60 * 60 * 1000 ));\r\n  const handleUntilDateChange = (date) => {\r\n    setUntilDate(date);\r\n    seUntilDateStr(dateformat(date,'yyyy-mm-dd'));\r\n  };\r\n\r\n  const [fromDateStr, setFromDateStr] = useState(dateformat(new Date(new Date().getTime() - 7 * 24 * 60 * 60 * 1000 ), 'yyyy-mm-dd'));\r\n  const [untilDateStr, seUntilDateStr] = useState(dateformat(new Date(new Date().getTime() - 1 * 24 * 60 * 60 * 1000 ), 'yyyy-mm-dd'));\r\n\r\n  const [justCorporate, setJustCorporate] = useState(false);\r\n\r\n  const[chkDate, setChkDate] = useState(true);\r\n  const[chkForename, setChkForename] = useState(true);\r\n  const[chkSurname, setChkSurname] = useState(true);\r\n  const[chkDOB, setChkDOB] = useState(true);\r\n  const[chkEmail, setChkEmail] = useState(true);\r\n  const[chkTel, setChkTel] = useState(true);\r\n  const[chkCertificate, setChkCertidicate] = useState(true);\r\n  const[chkAntiBodyTest, setChkAntiBodyTest] = useState(true);\r\n  const[chkextRef, setChkExtRef] = useState(true);\r\n  const[chkPrice, setChkPrice] = useState(true);\r\n\r\n  const justCorporateChanged = (event) =>\r\n  {\r\n    setJustCorporate(event.target.checked);\r\n  }\r\n  \r\n\r\n  const chkDateChanged = (event) =>\r\n  {\r\n    setChkDate(event.target.checked);\r\n  }\r\n\r\n  const chkForenameChanged = (event) =>\r\n  {\r\n    setChkForename(event.target.checked);\r\n  }\r\n\r\n  const chkSurnameChanged = (event) =>\r\n  {\r\n    setChkSurname(event.target.checked);\r\n  }\r\n\r\n  const chkDOBChanged = (event) =>\r\n  {\r\n    setChkDOB(event.target.checked);\r\n  }\r\n\r\n  const chkEmailChanged = (event) =>\r\n  {\r\n    setChkEmail(event.target.checked);\r\n  }\r\n\r\n  const chkTelChanged = (event) =>\r\n  {\r\n    setChkTel(event.target.checked);\r\n  }\r\n\r\n  const chkCertificateChanged = (event) =>\r\n  {\r\n    setChkCertidicate(event.target.checked);\r\n  }\r\n\r\n  const chkAntiBodyTestChanged = (event) =>\r\n  {\r\n    setChkAntiBodyTest(event.target.checked);\r\n  }\r\n\r\n  const chkextRefChanged = (event) =>\r\n  {\r\n    setChkExtRef(event.target.checked);\r\n  }\r\n\r\n  const chkPriceChanged = (event) =>\r\n  {\r\n    setChkPrice(event.target.checked);\r\n  }\r\n\r\n\r\n\r\n  var columns = [];\r\n\r\n  if (props.date === 'recent')\r\n  {\r\n    columns = [\r\n      // { field: 'id', headerName: '#', width: 70 },\r\n  \r\n      {field: '_id', headerName:' ', width: 70, renderCell: (params) =>{\r\n          return (\r\n\r\n           <React.Fragment>\r\n\r\n                <Button \r\n                        color=\"primary\"\r\n                        onClick = {event => openDetailsDialog(event, params.value)}\r\n                > \r\n            \r\n            <SearchIcon/> \r\n            \r\n            </Button>\r\n\r\n           </React.Fragment>\r\n\r\n          \r\n  \r\n          ); \r\n      \r\n        }\r\n      },\r\n\r\n      { field: 'paid', headerName: 'Paid', align: 'center' , width: 90, renderCell: (params) => { \r\n        if (!params.value)\r\n        {\r\n           return ( \r\n              <React.Fragment>                    \r\n                    <CloseIcon className={classes.closeIcon}/>                        \r\n              </React.Fragment>\r\n           );\r\n        }\r\n        else\r\n        {\r\n           if (params.getValue('paidBy') === 'credit card')\r\n           {\r\n             return ( <CreditCardIcon className={classes.checkIcon}/> );\r\n           }\r\n           else if (params.getValue('paidBy') === 'cash')\r\n           {\r\n             return ( <LocalAtmIcon className={classes.checkIcon}/> );\r\n           }\r\n           else if (params.getValue('paidBy') === 'corporate')\r\n           {\r\n             return ( <BusinessIcon className={classes.checkIcon}/> );\r\n           }\r\n           else\r\n           {\r\n             return '';  \r\n           }\r\n        }\r\n  }\r\n },\r\n\r\n\r\n      { field: 'timeStamp', headerName: 'TimeStamp', width: 200, valueFormatter: (params) => { \r\n        return formatTimeStamp(params.value);\r\n        }\r\n      },\r\n  \r\n      { field: 'bookingDate', headerName: 'B Date', width: 110, valueFormatter: (params) => { \r\n              return FormatDateFromString(params.value);\r\n          }\r\n       },\r\n      { field: 'bookingTimeNormalized', headerName: 'B Time', width: 105 , valueGetter: (params) => {\r\n        return params.getValue('bookingTime');\r\n      }},\r\n      { field: 'status', headerName: 'Status', width: 100, renderCell: (params) =>{\r\n          if (params.value === 'booked')\r\n          {\r\n            return (\r\n              <span className={classes.BookedLabel}>  BM </span>\r\n            );\r\n        \r\n          }else if (params.value === 'patient_attended')\r\n          {\r\n            return (\r\n              <span  className={classes.PatientAttendedLabel}> PA </span>\r\n            );\r\n          }\r\n          else{\r\n            return 'Unknown';\r\n          }\r\n        }\r\n      },\r\n      { field: 'bookingRef', headerName: 'Ref No.', width: 120 , renderCell: (params) =>{\r\n        return (\r\n          <Tooltip title=\"Go Find By Ref\" placement=\"right\">\r\n              <Link className={classes.RefLink}\r\n              //  onClick={\r\n              //   () => {\r\n              //     console.log(params.value);\r\n  \r\n              //     setState(state => ({...state, currentMenuIndex: getMenuIndex(`pcr` , `findByRef`)}));\r\n              //     setState(state => ({...state, ref : params.value}));\r\n              //     setState(state => ({...state, refError : false})); \r\n              //     setState(state => ({...state, foundRecords : []}));\r\n              //     setState(state => ({...state, findRecords : !state.findRecords}));\r\n              //   }\r\n              // }\r\n              \r\n              >\r\n                {params.value}\r\n              </Link>\r\n          </Tooltip>\r\n  \r\n        );\r\n      }},\r\n      { field: 'fullname', headerName: 'Fullname', width: 250 },\r\n      { field: 'email', headerName: 'Email', width: 200 },\r\n      { field: 'phone', headerName: 'Tel', width: 150 },\r\n      { field: 'notes', headerName: 'Notes', width: 500 },\r\n    \r\n    ];\r\n\r\n  }\r\n  else\r\n  {\r\n    columns = [\r\n      // { field: 'id', headerName: '#', width: 70 },\r\n  \r\n      {field: '_id', headerName:' ', width: 70, renderCell: (params) =>{\r\n          return (\r\n            <React.Fragment>\r\n\r\n                <Button \r\n                        color=\"primary\"\r\n                        onClick = {event => openDetailsDialog(event, params.value)}\r\n                > \r\n            \r\n            <SearchIcon/> \r\n            \r\n            </Button>\r\n\r\n           </React.Fragment>\r\n  \r\n          ); \r\n      \r\n        }\r\n      },\r\n\r\n      { field: 'paid', headerName: 'Paid', align: 'center' , width: 90, renderCell: (params) => { \r\n               if (!params.value)\r\n               {\r\n                  return ( \r\n                    <React.Fragment>\r\n                                <CloseIcon className={classes.closeIcon}/> \r\n                                {parseInt(params.getValue('deposit')) > 0 && props.date === 'deleted' && (\r\n                                      <span className={classes.notifyIcon}>&nbsp;</span>\r\n                                )}\r\n\r\n                               \r\n                    </React.Fragment>\r\n                     \r\n                        \r\n                  \r\n                  \r\n                  );\r\n               }\r\n               else\r\n               {\r\n                  if (params.getValue('paidBy') === 'credit card')\r\n                  {\r\n                    return ( <CreditCardIcon className={classes.checkIcon}/> );\r\n                  }\r\n                  else if (params.getValue('paidBy') === 'cash')\r\n                  {\r\n                    return ( <LocalAtmIcon className={classes.checkIcon}/> );\r\n                  }\r\n                  else if (params.getValue('paidBy') === 'corporate')\r\n                  {\r\n                    return ( <BusinessIcon className={classes.checkIcon}/> );\r\n                  }\r\n                  else\r\n                  {\r\n                    return '';  \r\n                  }\r\n               }\r\n         }\r\n        },\r\n        { field: 'bookingDate', headerName: 'B Date', width: 110, valueFormatter: (params) => { \r\n          return FormatDateFromString(params.value);\r\n      }\r\n   },\r\n  { field: 'bookingTimeNormalized', headerName: 'B Time', width: 105 , valueGetter: (params) => {\r\n    return params.getValue('bookingTime');\r\n  }},\r\n  { field: 'status', headerName: 'Status', width: 100, renderCell: (params) =>{\r\n      if (params.value === 'booked')\r\n      {\r\n        return (\r\n          <span className={classes.BookedLabel}>  BM </span>\r\n        );\r\n    \r\n      }else if (params.value === 'patient_attended')\r\n      {\r\n        return (\r\n          <span  className={classes.PatientAttendedLabel}> PA </span>\r\n        );\r\n      }\r\n      else{\r\n        return 'Unknown';\r\n      }\r\n    }\r\n  },\r\n  { field: 'bookingRef', headerName: 'Ref No.', width: 120 , renderCell: (params) =>{\r\n    return (\r\n      <Tooltip title=\"Go Find By Ref\" placement=\"right\">\r\n          <Link className={classes.RefLink}\r\n          //  onClick={\r\n          //   () => {\r\n          //     console.log(params.value);\r\n\r\n          //     setState(state => ({...state, currentMenuIndex: getMenuIndex(`pcr` , `findByRef`)}));\r\n          //     setState(state => ({...state, ref : params.value}));\r\n          //     setState(state => ({...state, refError : false})); \r\n          //     setState(state => ({...state, foundRecords : []}));\r\n          //     setState(state => ({...state, findRecords : !state.findRecords}));\r\n          //   }\r\n          // }\r\n          \r\n          >\r\n            {params.value}\r\n          </Link>\r\n      </Tooltip>\r\n\r\n    );\r\n  }},\r\n  { field: 'fullname', headerName: 'Fullname', width: 250 },\r\n  { field: 'email', headerName: 'Email', width: 200 },\r\n  { field: 'phone', headerName: 'Tel', width: 150 },\r\n  { field: 'notes', headerName: 'Notes', width: 500 },\r\n\r\n    \r\n    ];\r\n  \r\n\r\n  }\r\n\r\n\r\n\r\n  const [state, setState] = React.useContext(GlobalState);  \r\n\r\n  const [data, setData] = React.useState({bookings: [] , cachedBookings: [], isFetching : true});\r\n\r\n  const [selectedRow, setSelectedRow] = React.useState(null);\r\n\r\n  const [selectedBooking, setSelectedBooking] = React.useState(null);\r\n  const [seeDetailsDialogOpen, setSeeDetailsDialogOpen] = React.useState(false);\r\n\r\n  const [corporate, setCorporate] = useState(corporates[0]);\r\n  const corporateChanged = (event) =>\r\n  {\r\n    setCorporate(event.target.value);\r\n  }\r\n  \r\n\r\n  const [filter,setFilter] = React.useState('');\r\n\r\n\r\n  const lastPromise = useRef();\r\n\r\n  const formatTimeStamp = (timeStamp) =>\r\n  {\r\n    const todayStr = dateformat(new Date(), 'yyyy-mm-dd');\r\n    const timeStampStr = dateformat(timeStamp, 'yyyy-mm-dd');\r\n    if (todayStr === timeStampStr)\r\n    {\r\n      return dateformat(timeStamp, \"'Today', h:MM:ss TT\");\r\n    }\r\n    else\r\n    {\r\n       return dateformat(timeStamp, \"mmm dS, h:MM:ss TT\");\r\n    }\r\n  }\r\n\r\n  const loadData = (top) =>\r\n  {\r\n    var api = BookService.getAllBookings;\r\n    if (props.date === 'today')\r\n    {\r\n      api = BookService.getTodayBookings;\r\n    }else if (props.date === 'old')\r\n    {\r\n      api = BookService.getOldBookings;\r\n    }else if (props.date === 'future')\r\n    {\r\n      api = BookService.getFutureBookings;\r\n    }else if (props.date === 'recent')\r\n    {\r\n      api = BookService.getRecentBookingsAll;\r\n    }\r\n    else if (props.date === 'deleted')\r\n    {\r\n      api = BookService.getDeletedBookings;\r\n    }\r\n     \r\n    setData({bookings: [], cachedBookings: [], isFetching: true});\r\n   \r\n    // console.log(props)\r\n\r\n    const currentPromise = api(top).then( (res) =>{\r\n      // console.log(res)\r\n      for (var i=0; i < res.data.length; i++)\r\n      {\r\n        res.data[i] = {...res.data[i], id : i + 1}\r\n      }  \r\n      setData({bookings: [...res.data], cachedBookings: [...res.data], isFetching: false});\r\n      // return res.data;\r\n    }).catch(err => {\r\n      console.error(err)\r\n    })\r\n\r\n    // lastPromise.current = currentPromise;\r\n\r\n    // currentPromise.then(\r\n    //   result => {\r\n    //     if (currentPromise === lastPromise.current) {\r\n    //       setData({bookings: [...result], cachedBookings: [...result], isFetching: false});\r\n    //       setPage(1);\r\n    //     }\r\n    //   },\r\n    //   e => {\r\n    //     if (currentPromise === lastPromise.current) {\r\n    //         console.error(e);\r\n    //         setData({bookings: data.bookings, cachedBookings: data.cachedBookings, isFetching: false});\r\n    //     }\r\n    //   });\r\n\r\n  }\r\n\r\n  useEffect( () => {\r\n            setTopCount(25)\r\n            loadData(25)\r\n        },\r\n        [props.date]);\r\n\r\n\r\n\r\n\r\n  useEffect( () => {\r\n\r\n        if (filter && filter.trim().length > 0)\r\n        {\r\n          var filteredData = data.cachedBookings.filter( (element) => \r\n\r\n             (element.fullname.toLowerCase().indexOf(filter.toLowerCase()) >= 0)\r\n             || (element.service.toLowerCase().indexOf(filter.toLowerCase()) >= 0)\r\n               \r\n              \r\n          );\r\n  \r\n  \r\n          setData({bookings: [...filteredData], cachedBookings: data.cachedBookings, isFetching: false});\r\n        }else\r\n        {\r\n          setData({bookings: [...data.cachedBookings], cachedBookings: data.cachedBookings, isFetching: false});\r\n        }\r\n      },\r\n      [filter]);\r\n\r\n  \r\n      useEffect(() => {\r\n\r\n       loadData(topCount)\r\n    \r\n      }, [state.bookingDialogDataChanged]);    \r\n\r\n\r\n  const handleCloseSeeDetaisDialog = () =>\r\n  {\r\n    setSelectedBooking(null);\r\n    setSeeDetailsDialogOpen(false);\r\n  }    \r\n  \r\n  const openDetailsDialog = (event, id) =>\r\n  {\r\n    const booking = data.bookings.find(element => element._id === id);\r\n    setSelectedBooking(booking);\r\n    setSeeDetailsDialogOpen(true);\r\n\r\n  }\r\n\r\n  const refreshClicked = (event) =>{\r\n    setFilter('');\r\n    loadData(topCount)\r\n  }\r\n\r\n  const filterChanged = (event) =>{\r\n    setFilter(event.target.value);\r\n  }\r\n\r\n  const handleSelectionChanged = (newSelection) =>\r\n  {\r\n    if (newSelection.length > 0){\r\n      setSelectedRow(newSelection.rows[0]);\r\n    }\r\n    \r\n  }\r\n\r\n  const [page, setPage] = React.useState(1);\r\n\r\n  const handleExcelButtonClicked = (event) =>\r\n  {\r\n    setOpenDialogExcel(true);\r\n  }\r\n\r\n  const isTopSelectHidden = (date)=>\r\n  {\r\n    return date === 'live' || date === 'positive' || date === 'late' || date === 'today'\r\n  }\r\n\r\n\r\n  return (\r\n    <React.Fragment>\r\n      {data.isFetching && (\r\n        <div style={{ width: \"100%\", paddingTop: \"3px\" }}>\r\n          <LinearProgress color=\"primary\" />\r\n        </div>\r\n      )}\r\n      <Grid\r\n        container\r\n        direction=\"row\"\r\n        justify=\"space-between\"\r\n        alignItems=\"flex-end\"\r\n      >\r\n        <Grid item md={4}>\r\n          <div style={{ textAlign: \"left\", paddingLeft: \"10px\" }}>\r\n            <Grid\r\n              container\r\n              direction=\"row\"\r\n              justify=\"flex-start\"\r\n              alignItems=\"center\"\r\n            >\r\n              <Grid item>\r\n                <span style={{ paddingRight: \"15px\", color: \"#555\" }}>\r\n                  {\" \"}\r\n                  {getTableIcon(props.date)}{\" \"}\r\n                </span>\r\n              </Grid>\r\n              <Grid item>\r\n                <span\r\n                  style={{\r\n                    fontSize: \"1.4rem\",\r\n                    fontWeight: \"600\",\r\n                    color: \"#444\",\r\n                  }}\r\n                >\r\n                  {\" \"}\r\n                  {getTableTitle(props.date)}{\" \"}\r\n                </span>\r\n              </Grid>\r\n              <Grid item>\r\n                <Tooltip title=\"Refresh\" placement=\"right\">\r\n                  <IconButton\r\n                    color=\"primary\"\r\n                    className={classes.refreshButton}\r\n                    onClick={refreshClicked}\r\n                  >\r\n                    <RefreshIcon />\r\n                  </IconButton>\r\n                </Tooltip>\r\n              </Grid>\r\n            </Grid>\r\n          </div>\r\n        </Grid>\r\n\r\n        <Grid item md={3}>\r\n          {props.date === \"completed\" && state.showCreateExcel && (\r\n            <div style={{ paddingBottom: \"5px\" }}>\r\n              <Button\r\n                className={classes.ExportToExcelButton}\r\n                variant=\"outlined\"\r\n                color=\"default\"\r\n                onClick={handleExcelButtonClicked}\r\n                startIcon={\r\n                  <FontAwesomeIcon\r\n                    style={{ color: \"#009900\" }}\r\n                    icon={faFileExcel}\r\n                  />\r\n                }\r\n              >\r\n                export to excel\r\n              </Button>\r\n            </div>\r\n          )}\r\n        </Grid>\r\n\r\n        {data.isFetching && <div className={classes.HideNowRows}></div>}\r\n\r\n        <Grid item md={3}>\r\n          <TextField\r\n            variant=\"standard\"\r\n            value={filter}\r\n            onChange={filterChanged}\r\n            margin=\"normal\"\r\n            size=\"small\"\r\n            id=\"filter\"\r\n            label=\"Filter\"\r\n            name=\"filter\"\r\n            autoComplete=\"off\"\r\n          />\r\n        </Grid>\r\n\r\n        <Grid item hidden={isTopSelectHidden(props.date)}>\r\n          <FormControl className={classes.topSelect}>\r\n            <InputLabel id=\"top-select-label\">Limit</InputLabel>\r\n            <Select\r\n              labelId=\"top-select-label\"\r\n              id=\"top-simple-select\"\r\n              value={topCount}\r\n              onChange={topCountChanged}\r\n            >\r\n              <MenuItem value={25}>25</MenuItem>\r\n              <MenuItem value={50}>50</MenuItem>\r\n              <MenuItem value={100}>100</MenuItem>\r\n              <MenuItem value={500}>500</MenuItem>\r\n              <MenuItem value={1000}>1000</MenuItem>\r\n              <MenuItem value={10000}>ALL</MenuItem>\r\n            </Select>\r\n          </FormControl>\r\n\r\n          {/* <Button onClick={() => loadData(true)}> Show all records </Button> */}\r\n        </Grid>\r\n      </Grid>\r\n\r\n      <div style={{ height: 700, width: \"100%\" }}>\r\n        <DataGrid\r\n          rows={data.bookings}\r\n          columns={columns}\r\n          autoPageSize\r\n          page={page}\r\n          onPageChange={(params) => {\r\n            setPage(params.page);\r\n          }}\r\n          onSelectionChange={handleSelectionChanged}\r\n        />\r\n      </div>\r\n\r\n      <BookingDialog\r\n        booking={selectedBooking}\r\n        open={seeDetailsDialogOpen}\r\n        onClose={handleCloseSeeDetaisDialog}\r\n      />\r\n\r\n      {data.bookings && data.bookings.length > 0 && (\r\n        <Dialog\r\n          maxWidth=\"lg\"\r\n          open={openDialogExcel}\r\n          onClose={handleCloseDialogExcel}\r\n          PaperComponent={PaperComponent}\r\n          aria-labelledby=\"form-dialog-title\"\r\n        >\r\n          <DialogTitle id=\"draggable-dialog-title\">\r\n            <Grid\r\n              container\r\n              spacing={2}\r\n              direction=\"row\"\r\n              justify=\"center\"\r\n              alignItems=\"center\"\r\n            >\r\n              <Grid item>\r\n                <FontAwesomeIcon\r\n                  style={{ color: \"#2f942e\", fontSize: \"2rem\" }}\r\n                  icon={faFileExcel}\r\n                />\r\n              </Grid>\r\n\r\n              <Grid item>\r\n                <div\r\n                  style={{\r\n                    color: \"#2f942e\",\r\n                    paddingBottom: \"5px\",\r\n                    fontWeight: \"800\",\r\n                  }}\r\n                >\r\n                  {\" \"}\r\n                  Export to EXCEL{\" \"}\r\n                </div>\r\n              </Grid>\r\n            </Grid>\r\n\r\n            <Divider />\r\n          </DialogTitle>\r\n          <DialogContent>\r\n            <div\r\n              style={{\r\n                minHeight: \"600px\",\r\n                maxHeight: \"600px\",\r\n                minWidth: \"1200px\",\r\n                maxWidth: \"1200px\",\r\n              }}\r\n            >\r\n              <div>\r\n                <Grid row container justify=\"center\" spacing={3}>\r\n                  <Grid item>\r\n                    <FormControlLabel\r\n                      control={\r\n                        <Switch\r\n                          checked={justCorporate}\r\n                          onChange={justCorporateChanged}\r\n                          name=\"justCorporate\"\r\n                        />\r\n                      }\r\n                      label=\"Just Corporate Records\"\r\n                    />\r\n                  </Grid>\r\n\r\n                  {justCorporate && (\r\n                    <Grid item>\r\n                      <FormControl\r\n                        style={{ marginTop: \"0px\" }}\r\n                        className={classes.formControl}\r\n                      >\r\n                        <Select\r\n                          labelId=\"select-corporate\"\r\n                          id=\"select-corporate-id\"\r\n                          value={corporate}\r\n                          onChange={corporateChanged}\r\n                        >\r\n                          {corporates.map((element) => (\r\n                            <MenuItem value={element}>{`${element}`}</MenuItem>\r\n                          ))}\r\n                        </Select>\r\n                      </FormControl>\r\n                    </Grid>\r\n                  )}\r\n                </Grid>\r\n\r\n                <MuiPickersUtilsProvider utils={DateFnsUtils}>\r\n                  <Grid row container justify=\"center\" spacing={3}>\r\n                    <Grid item>\r\n                      <KeyboardDatePicker\r\n                        disableToolbar\r\n                        variant=\"inline\"\r\n                        format=\"dd/MM/yyyy\"\r\n                        margin=\"normal\"\r\n                        id=\"date-picker-from\"\r\n                        label=\"From\"\r\n                        value={fromDate}\r\n                        onChange={handleFromDateChange}\r\n                        KeyboardButtonProps={{\r\n                          \"aria-label\": \"change date\",\r\n                        }}\r\n                      />\r\n                    </Grid>\r\n\r\n                    <Grid item>\r\n                      <KeyboardDatePicker\r\n                        disableToolbar\r\n                        variant=\"inline\"\r\n                        format=\"dd/MM/yyyy\"\r\n                        margin=\"normal\"\r\n                        id=\"date-picker-until\"\r\n                        label=\"Until\"\r\n                        value={untilDate}\r\n                        onChange={handleUntilDateChange}\r\n                        KeyboardButtonProps={{\r\n                          \"aria-label\": \"change date\",\r\n                        }}\r\n                      />\r\n                    </Grid>\r\n\r\n                    <Grid item>\r\n                      <div style={{ paddingTop: \"30px\", marginLeft: \"20px\" }}>\r\n                        <ReactHTMLTableToExcel\r\n                          id=\"test-table-xls-button\"\r\n                          className={classes.ExportToExcelButtonInline}\r\n                          table=\"table-to-xls\"\r\n                          filename={`PCR.Report.${fromDateStr}.${untilDateStr}`}\r\n                          sheet=\"PCR-Report\"\r\n                          buttonText=\"Download as XLS\"\r\n                        />\r\n                      </div>\r\n                    </Grid>\r\n                  </Grid>\r\n                </MuiPickersUtilsProvider>\r\n              </div>\r\n\r\n              <div>\r\n                <Grid container spacing={3}>\r\n                  <Grid item xs>\r\n                    <FormControlLabel\r\n                      control={\r\n                        <Checkbox\r\n                          checked={chkDate}\r\n                          onChange={chkDateChanged}\r\n                          name=\"chkDate\"\r\n                        />\r\n                      }\r\n                      label=\"Date\"\r\n                    />\r\n                  </Grid>\r\n                  <Grid item xs>\r\n                    <FormControlLabel\r\n                      control={\r\n                        <Checkbox\r\n                          checked={chkForename}\r\n                          onChange={chkForenameChanged}\r\n                          name=\"chkForename\"\r\n                        />\r\n                      }\r\n                      label=\"Forename\"\r\n                    />\r\n                  </Grid>\r\n                  <Grid item xs>\r\n                    <FormControlLabel\r\n                      control={\r\n                        <Checkbox\r\n                          checked={chkSurname}\r\n                          onChange={chkSurnameChanged}\r\n                          name=\"chkSurname\"\r\n                        />\r\n                      }\r\n                      label=\"Surname\"\r\n                    />\r\n                  </Grid>\r\n                  <Grid item xs>\r\n                    <FormControlLabel\r\n                      control={\r\n                        <Checkbox\r\n                          checked={chkDOB}\r\n                          onChange={chkDOBChanged}\r\n                          name=\"chkDOB\"\r\n                        />\r\n                      }\r\n                      label=\"D.O.B\"\r\n                    />\r\n                  </Grid>\r\n                  <Grid item xs>\r\n                    <FormControlLabel\r\n                      control={\r\n                        <Checkbox\r\n                          checked={chkEmail}\r\n                          onChange={chkEmailChanged}\r\n                          name=\"chkEmail\"\r\n                        />\r\n                      }\r\n                      label=\"Email\"\r\n                    />\r\n                  </Grid>\r\n                  <Grid item xs>\r\n                    <FormControlLabel\r\n                      control={\r\n                        <Checkbox\r\n                          checked={chkTel}\r\n                          onChange={chkTelChanged}\r\n                          name=\"chkTel\"\r\n                        />\r\n                      }\r\n                      label=\"Tel\"\r\n                    />\r\n                  </Grid>\r\n                  <Grid item xs>\r\n                    <FormControlLabel\r\n                      control={\r\n                        <Checkbox\r\n                          checked={chkCertificate}\r\n                          onChange={chkCertificateChanged}\r\n                          name=\"chkCertificate\"\r\n                        />\r\n                      }\r\n                      label=\"Certificate\"\r\n                    />\r\n                  </Grid>\r\n                  <Grid item xs>\r\n                    <FormControlLabel\r\n                      control={\r\n                        <Checkbox\r\n                          checked={chkAntiBodyTest}\r\n                          onChange={chkAntiBodyTestChanged}\r\n                          name=\"chkAntiBodyTest\"\r\n                        />\r\n                      }\r\n                      label=\"AntiBodyTest\"\r\n                    />\r\n                  </Grid>\r\n                  <Grid item xs>\r\n                    <FormControlLabel\r\n                      control={\r\n                        <Checkbox\r\n                          checked={chkextRef}\r\n                          onChange={chkextRefChanged}\r\n                          name=\"chkextRef\"\r\n                        />\r\n                      }\r\n                      label=\"Lab No.\"\r\n                    />\r\n                  </Grid>\r\n                  <Grid item xs>\r\n                    <FormControlLabel\r\n                      control={\r\n                        <Checkbox\r\n                          checked={chkPrice}\r\n                          onChange={chkPriceChanged}\r\n                          name=\"chkPrice\"\r\n                        />\r\n                      }\r\n                      label=\"Price\"\r\n                    />\r\n                  </Grid>\r\n                </Grid>\r\n              </div>\r\n\r\n              <div style={{ width: \"100%\", paddingTop: \"20px\" }}>\r\n                <table className={classes.table} id=\"table-to-xls\">\r\n                  <tr>\r\n                    {chkDate && <th className={classes.th}>Date</th>}\r\n                    {chkForename && <th className={classes.th}>Forename</th>}\r\n                    {chkSurname && <th className={classes.th}>Surename</th>}\r\n                    {chkDOB && <th className={classes.th}>D.O.B</th>}\r\n                    {chkEmail && <th className={classes.th}>Email</th>}\r\n                    {chkTel && <th className={classes.th}>Tel</th>}\r\n                    {chkCertificate && (\r\n                      <th className={classes.th}>Certificate</th>\r\n                    )}\r\n                    {chkAntiBodyTest && (\r\n                      <th className={classes.th}>AntiBodyTest</th>\r\n                    )}\r\n                    {chkextRef && <th className={classes.th}>Lab No.</th>}\r\n                    {chkPrice && <th className={classes.th}>Price (£) </th>}\r\n                  </tr>\r\n\r\n                  {data.bookings\r\n                    .filter((booking) => {\r\n                      if (!justCorporate) {\r\n                        return (\r\n                          booking.bookingDate >= fromDateStr &&\r\n                          booking.bookingDate <= untilDateStr\r\n                        );\r\n                      } else {\r\n                        return (\r\n                          booking.bookingDate >= fromDateStr &&\r\n                          booking.bookingDate <= untilDateStr &&\r\n                          booking.paid &&\r\n                          booking.paidBy === \"corporate\" &&\r\n                          booking.corporate === corporate\r\n                        );\r\n                      }\r\n                    })\r\n\r\n                    .map((booking) => (\r\n                      <tr>\r\n                        {chkDate && (\r\n                          <td className={classes.td}>\r\n                            {FormatDateFromString(booking.bookingDate)}\r\n                          </td>\r\n                        )}\r\n                        {chkForename && (\r\n                          <td className={classes.td}>\r\n                            {booking.forenameCapital}\r\n                          </td>\r\n                        )}\r\n                        {chkSurname && (\r\n                          <td className={classes.td}>\r\n                            {booking.surnameCapital}\r\n                          </td>\r\n                        )}\r\n                        {chkDOB && (\r\n                          <th className={classes.th}>\r\n                            {/* {FormatDateFromString(booking.birthDate)} */}\r\n                          </th>\r\n                        )}\r\n                        {chkEmail && (\r\n                          <td className={classes.td}>{booking.email}</td>\r\n                        )}\r\n                        {chkTel && (\r\n                          <td className={classes.td}>{booking.phone}</td>\r\n                        )}\r\n                        {chkCertificate && (\r\n                          <td className={classes.td}>\r\n                            {booking.certificate ? \"YES\" : \"NO\"}\r\n                          </td>\r\n                        )}\r\n                        {chkAntiBodyTest && (\r\n                          <td className={classes.td}>\r\n                            {booking.antiBodyTest ? \"YES\" : \"NO\"}\r\n                          </td>\r\n                        )}\r\n                        {chkextRef && (\r\n                          <td className={classes.td}>{booking.extRef}</td>\r\n                        )}\r\n                        {chkPrice && (\r\n                          <td className={classes.td}>\r\n                            {PriceCalculator.calculatePrice(booking)}\r\n                          </td>\r\n                        )}\r\n                      </tr>\r\n                    ))}\r\n                </table>\r\n              </div>\r\n            </div>\r\n          </DialogContent>\r\n        </Dialog>\r\n      )}\r\n    </React.Fragment>\r\n  );\r\n} ","import React, { useEffect } from 'react';\r\nimport { useTheme } from '@material-ui/core/styles';\r\nimport { LineChart, Line, XAxis, YAxis, Label, ResponsiveContainer } from 'recharts';\r\nimport Title from './Title';\r\nimport dateformat from 'dateformat';\r\nimport BookService from './services/BookService';\r\nimport { LinearProgress } from '@material-ui/core';\r\n\r\n// Generate Sales Data\r\nfunction createData(time, amount) {\r\n  return { time, amount };\r\n}\r\n\r\n\r\nconst emptyData = [\r\n  createData('09:00', 0),\r\n  createData('10:00', 0),\r\n  createData('11:00', 0),\r\n  createData('12:00', 0),\r\n  createData('13:00', 0),\r\n  createData('14:00', 0),\r\n  createData('15:00', 0),\r\n  createData('16:00', 0),\r\n  createData('17:00', 0),\r\n  createData('18:00', undefined),\r\n\r\n];\r\n\r\nconst getCount = (data, str) =>\r\n{\r\n  if (!data)\r\n    return 0;\r\n\r\n  var count = 0;\r\n  for (var i=0; i < data.length; i++)\r\n  {\r\n    if (data[i]._id.substr(0,2) === str)\r\n    {\r\n      count += data[i].count;\r\n    }\r\n  }\r\n  return count;\r\n}\r\n\r\nexport default function Chart() {\r\n  const theme = useTheme();\r\n\r\n  const [data, setData] = React.useState(emptyData);\r\n  const [loading, setLoading] = React.useState(false)\r\n\r\n  useEffect(() =>\r\n  {\r\n    const fetchData = async () =>\r\n    {\r\n      const todayStr = dateformat(new Date(), 'yyyy-mm-dd');\r\n      var result = [];\r\n      try\r\n      {\r\n          setLoading(true)\r\n          const res = await BookService.getBookingsStatsByDateStr(todayStr);\r\n          setLoading(false)\r\n          const data = res.data.result;\r\n          result.push(createData('09:00', getCount(data,'09')));\r\n          result.push(createData('10:00', getCount(data,'10')));\r\n          result.push(createData('11:00', getCount(data,'11')));\r\n          result.push(createData('12:00', getCount(data,'12')));\r\n          result.push(createData('13:00', getCount(data,'13')));\r\n          result.push(createData('14:00', getCount(data,'14')));\r\n          result.push(createData('15:00', getCount(data,'15')));\r\n          result.push(createData('16:00', getCount(data,'16')));\r\n          result.push(createData('17:00', getCount(data,'17')));\r\n          result.push(createData('18:00', undefined));\r\n \r\n           setData(result);\r\n      }\r\n      catch(err){\r\n        setLoading(false)\r\n        console.error(err);\r\n      }\r\n\r\n    }\r\n  \r\n   fetchData();\r\n\r\n  }, [] );\r\n\r\n  return (\r\n    <React.Fragment>\r\n       {loading && (\r\n        <div style={{ width: \"100%\", paddingTop: \"3px\" }}>\r\n          <LinearProgress color=\"primary\" />\r\n        </div>\r\n      )}\r\n      <Title>Today</Title>\r\n      <ResponsiveContainer>\r\n        <LineChart\r\n          data={data}\r\n          margin={{\r\n            top: 16,\r\n            right: 16,\r\n            bottom: 0,\r\n            left: 24,\r\n          }}\r\n        >\r\n          <XAxis dataKey=\"time\" stroke={theme.palette.text.secondary} />\r\n          <YAxis stroke={theme.palette.text.secondary}>\r\n            <Label\r\n              angle={270}\r\n              position=\"left\"\r\n              style={{ textAnchor: 'middle', fill: theme.palette.text.primary }}\r\n            >\r\n              Online Bookings\r\n            </Label>\r\n          </YAxis>\r\n          <Line type=\"monotone\" dataKey=\"amount\" stroke={theme.palette.primary.main} dot={false} />\r\n        </LineChart>\r\n      </ResponsiveContainer>\r\n    </React.Fragment>\r\n  );\r\n}","import React, { useEffect } from \"react\";\r\nimport Link from \"@material-ui/core/Link\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport Title from \"./Title\";\r\nimport { Grid, LinearProgress, Tooltip } from \"@material-ui/core\";\r\nimport * as dateformat from \"dateformat\";\r\nimport BookService from \"./services/BookService\";\r\nimport BookingDialog from \"./BookingDialog\";\r\n\r\nconst useStyles = makeStyles({\r\n  depositContext: {\r\n    flex: 1,\r\n  },\r\n\r\n  bookingBox: {\r\n    display: \"flex\",\r\n    margin: \"5px\",\r\n    padding: \"5px\",\r\n    maxWidth: \"90px\",\r\n    minHeight: \"30px\",\r\n    border: \"1px solid #eee\",\r\n    fontSize: \"12px\",\r\n    fontWeight: \"500\",\r\n    cursor: \"pointer\",\r\n    backgroundColor: \"#ebedf7\",\r\n    color: \"#3f51b5\",\r\n    boxShadow: \"2px 4px #fafafa\",\r\n    borderRadius: \"5px\",\r\n    textAlign: \"center\",\r\n    alignItems: \"center\",\r\n    justifyItems: \"center\",\r\n    align: \"center\",\r\n\r\n    \"&:hover\": {\r\n      background: \"#3f51b5\",\r\n      color: \"#ebedf7\",\r\n    },\r\n  },\r\n});\r\n\r\nconst isWeekend = (date) =>\r\n{\r\n    return (date.getDay() === 0 || date.getDay() === 6) /// Weekend\r\n}\r\n\r\nconst getCurrentTimeSlot = (now) =>\r\n{\r\n    var min = now.getMinutes();\r\n    var hour = now.getHours();\r\n    var pm = (hour >= 12);\r\n    if (hour > 12)\r\n    {\r\n      hour = hour - 12;\r\n    }\r\n\r\n    if (min >= 0 && min < 15)\r\n    {\r\n      min = 0;\r\n    }else if (min >= 15 && min < 30)\r\n    {\r\n      min = 15;\r\n    }else if (min >= 30 && min < 45)\r\n    {\r\n      min = 30;\r\n    }else if (min >= 45)\r\n    {\r\n      min = 45;\r\n    }\r\n\r\n    const minStr = min < 10 ? `0${min}` : `${min}`;\r\n    const hourStr = hour < 10 ? `0${hour}` : `${hour}`;\r\n    const pmStr = pm ? 'PM' : 'AM';\r\n\r\n    const timeStr = `${hourStr}:${minStr} ${pmStr}`;\r\n\r\n    if (isWeekend(now))\r\n    {\r\n      if (now.getHours() < 10 || now.getHours() >= 14)\r\n      {\r\n        return null;\r\n      }\r\n      else\r\n      {\r\n        return timeStr;\r\n      }\r\n    }\r\n    else\r\n    {\r\n      if (now.getHours() < 9 || now.getHours() >= 18)\r\n      {\r\n        return null;\r\n      }\r\n      else\r\n      {\r\n        return timeStr;\r\n      }\r\n\r\n    }\r\n}\r\n\r\nconst getCurrentTimeSlotLabel = (timeStr) =>\r\n{\r\n  if (!timeStr)\r\n  {\r\n    return 'Closed';\r\n  }\r\n\r\n  var hour = parseInt(timeStr.substr(0,2));\r\n  var minute = parseInt(timeStr.substr(3,2)); \r\n  var pm = timeStr.indexOf('PM') > 0;\r\n  if (minute !== 45)\r\n  {\r\n    minute += 15;\r\n  }\r\n  else{\r\n    minute = 0;\r\n    hour += 1;\r\n    if (hour >= 12)\r\n    {\r\n      pm = true;\r\n    }\r\n    if (hour > 12)\r\n    {\r\n      hour = hour - 12;\r\n    }\r\n  }\r\n\r\n  const minStr = minute < 10 ? `0${minute}` : `${minute}`;\r\n  const hourStr = hour < 10 ? `0${hour}` : `${hour}`;\r\n  const pmStr = pm ? 'PM' : 'AM';\r\n\r\n  const endTimeStr = `${hourStr}:${minStr} ${pmStr}`;\r\n\r\n  return `${timeStr} - ${endTimeStr}`;\r\n\r\n}\r\n\r\nexport default function CurrentVisits() {\r\n  const classes = useStyles();\r\n\r\n  const [current, setCurrent] = React.useState(new Date());\r\n  const [bookings, setBookings] = React.useState([]);\r\n\r\n  const [selectedBooking, setSelectedBooking] = React.useState(null);\r\n  const [openDialog, setOpenDialog] = React.useState(false);\r\n\r\n  const [loading, setLoading] = React.useState(false);\r\n\r\n  useEffect(() => {\r\n    const interval = setInterval(() => {\r\n      setCurrent(new Date());\r\n    }, 30000);\r\n\r\n    return () => {\r\n      clearInterval(interval);\r\n    };\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    const currentTimeSlot = getCurrentTimeSlot(current);\r\n    if (!currentTimeSlot) return;\r\n    const todayStr = dateformat(current, \"yyyy-mm-dd\");\r\n    setLoading(true);\r\n    BookService.getBookingsByDateStrandTime(todayStr, currentTimeSlot)\r\n      .then((res) => {\r\n        setLoading(false);\r\n        if (res.data.status === \"OK\") {\r\n          setBookings([...res.data.bookings]);\r\n        }\r\n      })\r\n      .catch((err) => {\r\n        setLoading(false);\r\n        console.log(err);\r\n      });\r\n  }, [current]);\r\n\r\n  const getBookingsBox = (_bookings) => {\r\n    if (_bookings && _bookings.length > 0) {\r\n      return (\r\n        <div className={classes.root}>\r\n          <Grid\r\n            container\r\n            justify=\"flex-start\"\r\n            alignItems=\"flex-start\"\r\n            spacing={0}\r\n          >\r\n            {_bookings.map((booking) => (\r\n              <Grid item>\r\n                <div\r\n                  className={classes.bookingBox}\r\n                  onClick={(event) => bookingCliked(event, booking)}\r\n                >\r\n                  <span style={{ textAlign: \"center\" }}>\r\n                    {\" \"}\r\n                    {`${booking.surnameCapital}`.substring(0, 10)}{\" \"}\r\n                  </span>\r\n                </div>\r\n              </Grid>\r\n            ))}\r\n          </Grid>\r\n        </div>\r\n      );\r\n    }\r\n  };\r\n\r\n  const bookingCliked = (event, booking) => {\r\n    setSelectedBooking(booking);\r\n    setOpenDialog(true);\r\n  };\r\n\r\n  const handleCloseDialog = () => {\r\n    setOpenDialog(false);\r\n  };\r\n\r\n  return (\r\n    <React.Fragment>\r\n      {loading && (\r\n        <div style={{ width: \"100%\", paddingTop: \"3px\" }}>\r\n          <LinearProgress color=\"primary\" />\r\n        </div>\r\n      )}\r\n\r\n      <Title>Current Visits</Title>\r\n      <Typography component=\"p\" variant=\"h6\">\r\n        {getCurrentTimeSlotLabel(getCurrentTimeSlot(current))}\r\n      </Typography>\r\n      <Typography color=\"textSecondary\" className={classes.depositContext}>\r\n        on {dateformat(current, \"dd mmmm, yyyy\")}\r\n      </Typography>\r\n\r\n      {getBookingsBox(bookings)}\r\n\r\n      <BookingDialog\r\n        booking={selectedBooking}\r\n        open={openDialog}\r\n        onClose={handleCloseDialog}\r\n      />\r\n    </React.Fragment>\r\n  );\r\n}\r\n","import React, { useEffect } from 'react';\r\nimport Link from '@material-ui/core/Link';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport Table from '@material-ui/core/Table';\r\nimport TableBody from '@material-ui/core/TableBody';\r\nimport TableCell from '@material-ui/core/TableCell';\r\nimport TableHead from '@material-ui/core/TableHead';\r\nimport TableRow from '@material-ui/core/TableRow';\r\nimport Title from './Title';\r\nimport BookService from './services/BookService';\r\nimport * as dateformat from 'dateformat';\r\nimport GlobalState from './../GlobalState';\r\nimport { getMenuIndex } from './../MenuList';\r\nimport {FormatDateFromString, FormatDateFromStringShortYear} from './DateFormatter';\r\nimport { LinearProgress } from '@material-ui/core';\r\n\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  seeMore: {\r\n    marginTop: theme.spacing(3),\r\n  },\r\n}));\r\n\r\nexport default function BookingView() {\r\n  const classes = useStyles();\r\n  const [state, setState] = React.useContext(GlobalState);  \r\n\r\n  const [data, setData] = React.useState({bookings: [] , isFetching : false});\r\n\r\n  const [refresh, setRefresh] = React.useState(false);\r\n\r\n  const [loading, setLoading] = React.useState(false)\r\n\r\n  const seeMoreRecords = (event) => {\r\n    event.preventDefault();\r\n    setState(state=>({...state, currentMenuIndex:getMenuIndex('gynae',`recentBookings`)}));\r\n  }\r\n\r\n  const loadData = () => \r\n  {\r\n    setData({bookings: data.bookings, isFetching: true});\r\n    setLoading(true)\r\n    BookService.getRecentBookings().then( (res) =>{\r\n      setLoading(false)\r\n        setData({bookings: res.data, isFetching: false});\r\n\r\n    }).catch( (err) => {\r\n      setLoading(false)\r\n        console.log(err);\r\n        setData({bookings: data.bookings, isFetching: false});\r\n    });\r\n  }\r\n\r\n\r\n  useEffect( () => {\r\n          loadData();\r\n        },\r\n        [refresh]);   \r\n\r\n\r\n   useEffect( () => {\r\n     loadData();\r\n     const interval = setInterval(() => {\r\n       setRefresh(refresh => !refresh);\r\n     }, 30000);\r\n\r\n     return () =>\r\n     {\r\n       clearInterval(interval)\r\n     }\r\n     \r\n   }, []) ;    \r\n\r\n   const formatTimeStamp = (timeStamp) =>\r\n   {\r\n     const todayStr = dateformat(new Date(), 'yyyy-mm-dd');\r\n     const timeStampStr = dateformat(timeStamp, 'yyyy-mm-dd');\r\n     if (todayStr === timeStampStr)\r\n     {\r\n       return dateformat(timeStamp, \"'Today', h:MM:ss TT\");\r\n     }\r\n     else\r\n     {\r\n        return dateformat(timeStamp, \"mmm dS, h:MM:ss TT\");\r\n     }\r\n   }\r\n\r\n  return (\r\n    <React.Fragment>\r\n       {loading && (\r\n        <div style={{ width: \"100%\", paddingTop: \"3px\" }}>\r\n          <LinearProgress color=\"primary\" />\r\n        </div>\r\n      )}\r\n      <Title>Recent Bookings</Title>\r\n      <Table size=\"small\">\r\n        <TableHead>\r\n          <TableRow>\r\n            <TableCell>TimeStamp</TableCell>        \r\n            <TableCell>Fullname</TableCell>\r\n            <TableCell>Email</TableCell>\r\n            <TableCell>Tel</TableCell>\r\n            <TableCell>Booked Date</TableCell>\r\n            <TableCell>Booked Time</TableCell> \r\n          </TableRow>\r\n        </TableHead>\r\n        <TableBody>\r\n          {data.bookings.map((row) => (\r\n            <TableRow key={row._id}>\r\n              <TableCell>{formatTimeStamp(row.timeStamp)}</TableCell>\r\n              <TableCell>{row.fullname}</TableCell>\r\n              <TableCell>{row.email}</TableCell>\r\n              <TableCell>{row.phone}</TableCell>\r\n              <TableCell>{FormatDateFromString(row.bookingDate)}</TableCell>\r\n              <TableCell>{row.bookingTime}</TableCell>\r\n            </TableRow>\r\n          ))}\r\n        </TableBody>\r\n      </Table>\r\n      <div className={classes.seeMore}>\r\n        <Link color=\"primary\" href=\"#\" onClick={seeMoreRecords}>\r\n          See more records\r\n        </Link>\r\n      </div>\r\n    </React.Fragment>\r\n  );\r\n}","import React from 'react';\r\nimport clsx from 'clsx';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport Paper from '@material-ui/core/Paper';\r\nimport Chart from './Chart';\r\nimport CurrentVisits from './CurrentVisits';\r\n\r\n\r\n\r\nimport { Tooltip } from '@material-ui/core';\r\nimport GlobalState from './../GlobalState';\r\nimport BookingView from './BookingView';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n \r\n  paper: {\r\n    padding: theme.spacing(2),\r\n    display: 'flex',\r\n    overflow: 'auto',\r\n    flexDirection: 'column',\r\n  },\r\n  fixedHeight: {\r\n    height: 240,\r\n  },\r\n}));\r\n\r\nexport default function DashboardPreview() {\r\n  const classes = useStyles();\r\n  const [state, setState] = React.useContext(GlobalState);\r\n\r\n  const fixedHeightPaper = clsx(classes.paper, classes.fixedHeight);\r\n\r\n  return (\r\n        <React.Fragment>\r\n\r\n<           Grid container spacing={3}>\r\n                    {/* Chart */}\r\n                    <Grid item xs={12} md={4} lg={6}>\r\n                    <Paper className={fixedHeightPaper}>\r\n                        <Chart />\r\n                    </Paper>\r\n                    </Grid>\r\n                    {/* Current Visits */}\r\n                    <Grid item xs={12} md={4} lg={6}>\r\n                    <Paper className={fixedHeightPaper}>\r\n                        <CurrentVisits />\r\n                    </Paper>\r\n                    </Grid>\r\n                    {/* Recent Bookings */}\r\n                    <Grid item xs={12}>\r\n                    <Paper className={classes.paper}>\r\n                        <BookingView/>\r\n                    </Paper>\r\n                    </Grid>\r\n          </Grid>\r\n        </React.Fragment>\r\n  );\r\n}","import React from 'react';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport GlobalState from './../GlobalState';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport Accordion from '@material-ui/core/Accordion';\r\nimport AccordionDetails from '@material-ui/core/AccordionDetails';\r\nimport AccordionSummary from '@material-ui/core/AccordionSummary';\r\nimport ExpandMoreIcon from '@material-ui/icons/ExpandMore';\r\nimport { Button, Checkbox, FormControlLabel, Link, TextField, Tooltip } from '@material-ui/core';\r\nimport PDFService from './services/PDFService';\r\n\r\nimport {calculatePrice} from './PriceCalculator';\r\n\r\n\r\nimport bookingService from './services/BookService';\r\nimport CheckIcon from '@material-ui/icons/Check';\r\nimport CloseIcon from '@material-ui/icons/Close';\r\nimport DeleteIcon from '@material-ui/icons/Delete';\r\n\r\nimport {FormatDateFromString, RevertFormatDateFromString} from './DateFormatter';\r\n\r\nimport PrintIcon from '@material-ui/icons/Print';\r\n\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  box: {\r\n    backgroundColor : \"#373737\",\r\n    color: \"#fff\",\r\n    padding : \"1px\",\r\n    borderRadius : \"4px\",\r\n    textAlign: \"justify\",\r\n    paddingRight: \"40px\"\r\n  },\r\n\r\n  boxRed: {\r\n    backgroundColor : \"#dc2626\",\r\n    color: \"#fff\",\r\n    padding : \"1px\",\r\n    borderRadius : \"4px\",\r\n    textAlign: \"justify\",\r\n    paddingRight: \"40px\"\r\n  },\r\n\r\n  boxInfo: {\r\n    textAlign: \"justify\",\r\n    backgroundColor : \"#fafafa\",\r\n    color: \"#333\",\r\n    padding : \"1px\",\r\n    borderRadius : \"4px\",\r\n    paddingRight: \"40px\",\r\n    border: \"1px solid #eee\",\r\n  },\r\n\r\n  ul: {\r\n     listStyle: \"none\",\r\n     padding: \"0\",\r\n     margin: \"0\"\r\n  },\r\n\r\n  li: {\r\n    marginBottom : \"15px\"\r\n  },\r\n\r\n\r\n  icon: {\r\n    marginRight : \"8px\"\r\n  },\r\n\r\n  root: {\r\n    width: '100%',\r\n  },\r\n\r\n  lineThrough:{\r\n    textDecoration : \"line-through\",\r\n  },\r\n\r\n\r\n\r\n  heading: {\r\n    fontSize: theme.typography.pxToRem(15),\r\n    flexBasis: '33.33%',\r\n    flexShrink: 0,\r\n    color: theme.palette.text.secondary,\r\n  },\r\n  secondaryHeading: {\r\n    fontSize: theme.typography.pxToRem(15),\r\n  },\r\n\r\n  infoDetails:{\r\n    textAlign: \"left\",\r\n  },\r\n\r\n  infoTitle:{\r\n    fontWeight: \"800\",\r\n    marginRight: \"10px\"\r\n  },\r\n\r\n  infoData:{\r\n    fontWeight: \"400\",\r\n  },\r\n\r\n  title:\r\n  {\r\n    // textAlign : \"center\",\r\n    // fontWeight : \"500\",\r\n    // margin: \"10px\",\r\n    // backgroundColor : \"#eee\",\r\n    // padding : \"10px\",\r\n    // borderRadius : \"4px\"\r\n    textAlign: \"center\",\r\n    fontWeight : \"600\",\r\n    marginLeft: \"10px\",\r\n    marginBottom: \"5px\"\r\n\r\n  },\r\n\r\n  Accordion:{\r\n    backgroundColor : \"#f5f5f5\",\r\n    color: \"#222\"\r\n  },\r\n\r\n  AccordionDeleted:{\r\n    backgroundColor : \"#aaa\",\r\n    color: \"#555\"\r\n  },\r\n\r\n  DownloadForm:{\r\n      marginTop: \"10px\",\r\n      marginBottom : \"10px\"\r\n  },\r\n\r\n  infoDataCharges:{\r\n    fontSize : \"18px\",\r\n    color: \"green\",\r\n    fontWeight : \"600\"\r\n  },\r\n\r\n  infoDataChargesHigher:{\r\n    fontSize : \"18px\",\r\n    color: \"red\",\r\n    fontWeight : \"600\"\r\n  },\r\n  BookedLabel:{\r\n    color: \"#606060\",\r\n    paddingRight: \"10px\",\r\n    paddingLeft: \"5px\",\r\n    paddingBottom: \"3px\",\r\n    paddingTop: \"3px\",\r\n    fontWeight: \"800\",\r\n    borderLeft: \"5px solid\",\r\n    borderColor: \"#606060\"\r\n  },\r\n\r\n  PatientAttendedLabel:{\r\n    color: \"#0066aa\",\r\n    paddingRight: \"10px\",\r\n    paddingLeft: \"5px\",\r\n    paddingBottom: \"3px\",\r\n    paddingTop: \"3px\",\r\n    fontWeight: \"800\",\r\n    borderLeft: \"5px solid\",\r\n    borderColor: \"#0066aa\"\r\n  },\r\n\r\n  SampleTakenLabel:{\r\n    color: \"#0066cc\",\r\n    paddingRight: \"10px\",\r\n    paddingLeft: \"5px\",\r\n    paddingBottom: \"3px\",\r\n    paddingTop: \"3px\",\r\n    fontWeight: \"800\",\r\n    borderLeft: \"5px solid\",\r\n    borderColor: \"#0066cc\"\r\n  },\r\n\r\n  ReportSentLabel:{\r\n    color: \"#009900\",\r\n    paddingRight: \"10px\",\r\n    paddingLeft: \"5px\",\r\n    paddingBottom: \"3px\",\r\n    paddingTop: \"3px\",\r\n    fontWeight: \"800\",\r\n    borderLeft: \"5px solid\",\r\n    borderColor: \"#009900\"\r\n  },\r\n\r\n  ReportCertSentLabel:{\r\n    color: \"#009900\",\r\n    paddingRight: \"10px\",\r\n    paddingLeft: \"5px\",\r\n    paddingBottom: \"3px\",\r\n    paddingTop: \"3px\",\r\n    fontWeight: \"800\",\r\n    borderLeft: \"5px solid\",\r\n    borderColor: \"#009900\"\r\n  },\r\n\r\n  PositiveLabel:{\r\n    color: \"red\",\r\n    paddingRight: \"10px\",\r\n    paddingLeft: \"5px\",\r\n    paddingBottom: \"3px\",\r\n    paddingTop: \"3px\",\r\n    fontWeight: \"800\",\r\n    borderLeft: \"5px solid\",\r\n    borderColor: \"red\"\r\n  },\r\n\r\n\r\n  EditButton:\r\n  {\r\n    marginBottom : \"20px\",\r\n    backgroundColor : \"#2f942e\",\r\n    \"&:hover\": {\r\n      background: \"green\",\r\n      color: \"#fff\"\r\n    },\r\n    textDecoration : \"none !important\",\r\n    padding: \"10px\",\r\n    width: \"400px\"   \r\n  },\r\n\r\n  RestoreButton:\r\n  {\r\n    marginBottom : \"20px\",\r\n    backgroundColor : \"#fafafa\",\r\n    color: \"#555\",\r\n    \"&:hover\": {\r\n      background: \"#f1f1f1\",\r\n      color: \"#111\"\r\n    },\r\n    textDecoration : \"none !important\",\r\n    padding: \"10px\" ,\r\n    width: \"400px\"    \r\n  },\r\n\r\n\r\n  DeleteButton:\r\n  {\r\n    marginBottom : \"20px\",\r\n    backgroundColor : \"#d90015\",\r\n    \"&:hover\": {\r\n      background: \"#b80012\",\r\n      color: \"#fff\"\r\n    },\r\n\r\n    padding: \"10px\",\r\n    width: \"400px\"   \r\n    \r\n  },\r\n\r\n  SaveButton:\r\n  {\r\n    marginBottom : \"10px\",\r\n    padding: \"10px\",\r\n\r\n    backgroundColor : \"#d1175e\",\r\n    \"&:hover\": {\r\n      background: \"#bd0d50\",\r\n      color: \"#fff\",\r\n      \r\n    },\r\n    width: \"400px\"   \r\n\r\n  },\r\n\r\n  CancelButton:\r\n  {\r\n    marginBottom : \"20px\",\r\n    // padding: \"10px\"\r\n  },\r\n\r\n  TextBox: {\r\n    \r\n    padding : \"0px\"\r\n\r\n  },\r\n\r\n  checkIcon:{\r\n    color: \"green\",   \r\n  },\r\n\r\n  closeIcon:{\r\n    color: \"red\"\r\n  },\r\n\r\n  centeredLabel : {\r\n    display: \"flex\",\r\n    alignItems: \"center\"\r\n  }\r\n\r\n\r\n\r\n\r\n\r\n\r\n}));\r\n\r\n\r\n\r\n\r\nexport default function PersonsBox() {\r\n    const classes = useStyles();\r\n\r\n    const [state, setState] = React.useContext(GlobalState);\r\n\r\n    const [expanded, setExpanded] = React.useState('panel0');\r\n\r\n    const [editMode, setEditMode] = React.useState({edit : false, person : null});\r\n    const [deleteMode, setDeleteMode] = React.useState({delete : false, person : null});\r\n    const [restoreMode, setRestoreMode] = React.useState({restore : false, person : null});\r\n\r\n    const [saving, setSaving] =  React.useState(false);\r\n    const [deleting, setDeleting] =  React.useState(false);\r\n    const [restoring, setRestoring] =  React.useState(false);\r\n\r\n    const [validationError, setValidationError] = React.useState({});\r\n\r\n\r\n    const [bookingDate, setBookingDate] = React.useState('');\r\n    const [bookingTime, setBookingTime] = React.useState('');\r\n\r\n    const [fullname, setFullname] = React.useState('');\r\n    const [email, setEmail] = React.useState('');\r\n    const [tel, setTel] = React.useState('');\r\n    const [service, setService] = React.useState('');\r\n    const [notes, setNotes] = React.useState('');\r\n\r\n\r\n    const bookingDateChanged = (event) =>\r\n    {\r\n      setBookingDate(event.target.value);\r\n      setValidationError({...validationError, bookingDateError : false});\r\n    }\r\n\r\n    const bookingTimeChanged = (event) =>\r\n    {\r\n      setBookingTime(event.target.value);\r\n      setValidationError({...validationError, bookingTimeError : false});\r\n    }\r\n\r\n    const fullnameChanged = (event) =>\r\n    {\r\n      setFullname(event.target.value);\r\n    }\r\n\r\n    const emailChanged = (event) =>\r\n    {\r\n      setEmail(event.target.value);\r\n    }\r\n\r\n    const telChanged = (event) =>\r\n    {\r\n      setTel(event.target.value);\r\n    }\r\n\r\n    const serviceChanged = (event) =>\r\n    {\r\n      setService(event.target.value);\r\n    }\r\n\r\n    const notesChanged = (event) =>\r\n    {\r\n      setNotes(event.target.value);\r\n    }\r\n\r\n\r\n    const handleChange = (panel) => (event, isExpanded) => {\r\n      setExpanded(isExpanded ? panel : false);\r\n    };\r\n\r\n    const getStatusLabel = (status) => {\r\n      if (status === 'booked')\r\n      {\r\n        return (\r\n          <span className={classes.BookedLabel}> Booking Made </span>\r\n        );\r\n    \r\n      }else if (status === 'patient_attended')\r\n      {\r\n        return (\r\n          <span  className={classes.PatientAttendedLabel}> Patient Attended </span>\r\n        );\r\n    \r\n      }\r\n      else{\r\n        return 'Unknown';\r\n      }\r\n    }\r\n\r\n\r\n   const handleEditModeChanged = (edit, person) => {\r\n\r\n       if (edit)\r\n       {\r\n         setFullname(person.fullname);\r\n         setBookingDate(FormatDateFromString(person.bookingDate));\r\n         setBookingTime(person.bookingTime);\r\n         setEmail(person.email);\r\n         setTel(person.phone);\r\n         setService(person.service)\r\n         if (person.notes)\r\n         {\r\n          setNotes(person.notes);\r\n         }\r\n        \r\n         setEditMode({edit: edit, person: person});\r\n\r\n       }\r\n       else if (!edit && !person)\r\n       {\r\n         setEditMode({edit: edit, person: person});\r\n       }\r\n       else if (!edit && person)\r\n       {\r\n          const booking = {};\r\n          const bookingId = person._id;\r\n          booking.email = email;\r\n          booking.phone = tel;\r\n          booking.fullname = fullname;\r\n          booking.notes = notes;\r\n          booking.service = service;\r\n          booking.bookingDate = RevertFormatDateFromString(bookingDate);\r\n          booking.bookingTime = bookingTime;\r\n          booking.bookingRef = person.bookingRef;\r\n\r\n          if  (validateBooking(booking))\r\n          {\r\n            updateBooking({bookingId: bookingId, person: booking});\r\n          }\r\n       }\r\n   }\r\n\r\n   const validateDate = (str) =>\r\n   {\r\n     var error = false;\r\n     if (!str || str.length !== 10)\r\n     {\r\n       error = true;\r\n     }\r\n\r\n     if (str.charAt(4) !== '-'  || str.charAt(7) !== '-')\r\n     {\r\n       error = true;\r\n     }\r\n\r\n     try\r\n     {\r\n       \r\n       const result = /^\\d{4}-\\d{2}-\\d{2}$/.test(str);\r\n       if (!result)\r\n       {\r\n          error = true;\r\n       }\r\n\r\n       const year = parseInt(str.substr(0,4));\r\n       const month = parseInt(str.substr(5,2));\r\n       const day = parseInt(str.substr(8,2));\r\n\r\n       if (year < 1900)\r\n       {\r\n          error = true;\r\n       }\r\n\r\n       if (month < 1 || month > 12)\r\n       {\r\n         error = true;\r\n       }        \r\n\r\n       if (day > 31)\r\n       {\r\n         error = true;\r\n       }\r\n\r\n     }catch(err)\r\n     {\r\n       error = true;\r\n     }\r\n\r\n\r\n\r\n     return !error;\r\n   }\r\n\r\n   const validateTime =(str) =>\r\n   {\r\n     var error = false;\r\n\r\n     const result = /^\\d{2}:\\d{2} AM$|^\\d{2}:\\d{2} PM$/.test(str);\r\n     if (!result)\r\n     {\r\n        error = true;\r\n     }\r\n\r\n     try{\r\n       const hour = parseInt(str.substr(0,2));\r\n       const minute = parseInt(str.substr(3,2));\r\n\r\n       if (hour < 0 || hour > 12)\r\n       {\r\n         error = true;\r\n       }\r\n\r\n       if (minute < 0 || minute > 59)\r\n       {\r\n         error = true;\r\n       }\r\n\r\n     }catch(err)\r\n     {\r\n       error = true;\r\n     }\r\n\r\n     return !error;\r\n   }\r\n\r\n   const validateBooking = (booking) =>\r\n   {\r\n      var error = false;\r\n\r\n      if (!validateDate(booking.bookingDate))\r\n      {\r\n        error = true;\r\n        setValidationError({...validationError, bookingDateError : true});\r\n      }\r\n\r\n      if (!validateTime(booking.bookingTime))\r\n      {\r\n        error = true;\r\n        setValidationError({...validationError, bookingTimeError : true});\r\n      }\r\n     \r\n\r\n      return !error;\r\n   }\r\n\r\n   const updateBooking = (payload) =>\r\n   {\r\n       setSaving(true);\r\n       bookingService.updateBooking(payload).then( (res) => {\r\n        setSaving(false);\r\n        setEditMode({edit: false, person: null});\r\n        setState(state => ({...state, RefreshPersonInfo : !state.RefreshPersonInfo}));\r\n\r\n       }).catch ( (err) => {\r\n         setSaving(false);\r\n         setEditMode({edit: false, person: null});\r\n         console.log(err);\r\n       });\r\n   }\r\n\r\n   const deleteBooking = (id) =>\r\n   {\r\n       setDeleting(true);\r\n       bookingService.deleteBooking(id).then( (res) => {\r\n        setDeleting(false);\r\n        setDeleteMode({delete: false, person: null});\r\n        setState(state => ({...state, RefreshPersonInfo : !state.RefreshPersonInfo}));\r\n\r\n       }).catch ( (err) => {\r\n          setDeleting(false);\r\n          setDeleteMode({delete: false, person: null});\r\n         console.log(err);\r\n       });\r\n   }\r\n\r\n   const restoreBooking = (id) =>\r\n   {\r\n       setRestoring(true);\r\n       bookingService.unDeleteBooking(id).then( (res) => {\r\n        setRestoring(false);\r\n        setRestoreMode({restore: false, person: null});\r\n        setState(state => ({...state, RefreshPersonInfo : !state.RefreshPersonInfo}));\r\n\r\n       }).catch ( (err) => {\r\n        setRestoring(false);\r\n        setRestoreMode({restore: false, person: null});\r\n         console.log(err);\r\n       });\r\n   }\r\n\r\n   const changeBackToBookingMade = (event, id) =>\r\n   {\r\n     setSaving(true);\r\n     bookingService.changeBackToBookingMade(id).then(res => {\r\n       setSaving(false);\r\n       setState(state => ({...state, RefreshPersonInfo : !state.RefreshPersonInfo}));\r\n     }).catch(err => {\r\n       console.log(err);\r\n       setSaving(false);\r\n     })\r\n   }\r\n\r\n\r\n\r\n   const handleDeleteModeChanged = (del, person) => {\r\n\r\n    if (del)\r\n    {\r\n      setDeleteMode({delete: del, person: person});\r\n    }\r\n    else if (!del && !person)\r\n    {\r\n      setDeleteMode({delete: del, person: person});\r\n    }\r\n    else if (!del && person)\r\n    {\r\n        deleteBooking(person._id);\r\n    }\r\n  }\r\n\r\n  const handleRestoreModeChanged = (restore, person) => {\r\n\r\n    if (restore)\r\n    {\r\n      setRestoreMode({restore: restore, person: person});\r\n    }\r\n    else if (!restore && !person)\r\n    {\r\n      setRestoreMode({restore: restore, person: person});\r\n    }\r\n    else if (!restore && person)\r\n    {\r\n        restoreBooking(person._id);\r\n    }\r\n  }\r\n\r\n  return (\r\n    <React.Fragment>\r\n          \r\n      <Grid container direction=\"column\" spacing={1} justify=\"flex-start\" alignItems=\"center\">\r\n          <div className={classes.title}> Following Records Found :</div>\r\n\r\n          {state.foundRecords.map((person,index) => (\r\n   \r\n                <Grid item xs={12} md={12} key={`panel${index}`}>\r\n                <div className={classes.root}>\r\n                    <Accordion className={person.deleted ? classes.AccordionDeleted : classes.Accordion} expanded={expanded === `panel${index}`} onChange={handleChange(`panel${index}`)}>\r\n                    <AccordionSummary className={person.deleted ? classes.lineThrough : ''}\r\n                        expandIcon={<ExpandMoreIcon />}\r\n                        aria-controls=\"panel1bh-content\"\r\n                        id={`panel${index}bh-header`}\r\n                    >\r\n                      {person.deleted && (\r\n                          <Tooltip  title=\"This record has been deleted.\">\r\n                            <DeleteIcon  style={{padding: 0, margin: 0,  color: \"#fff\", fontSize: 25 }}/>\r\n                        </Tooltip>\r\n                      )}\r\n\r\n                        <Typography className={classes.heading}> {`#${index+1}`} </Typography>\r\n                        <Typography className={classes.secondaryHeading}>\r\n                        {`${person.fullname}`}\r\n                        </Typography>\r\n                    </AccordionSummary>\r\n\r\n                    <AccordionDetails className={classes.infoDetails}>\r\n                        \r\n\r\n\r\n                        <ul className={classes.ul}>\r\n\r\n                        {/* Restore Functionality ******************************************* */}  \r\n                        <li hidden={!(restoreMode.restore && restoreMode.person._id  === person._id)}>\r\n                              <div style={{fontWeight: \"500\", paddingBottom: \"5px\", paddingLeft: \"5px\", fontSize:\"16px\" , color:\"#fff\"}}>\r\n                                Are you sure you want to restore this record?\r\n                              </div>\r\n                            </li>\r\n\r\n                            <li hidden={!person.deleted || (restoreMode.restore && restoreMode.person._id === person._id)}>\r\n                                 <Button\r\n\r\n                                    type=\"button\"\r\n                                    fullWidth\r\n                                    variant=\"contained\"\r\n                                    color=\"primary\"\r\n                                    onClick = {() => {handleRestoreModeChanged(true, person)}}\r\n                                    className={classes.RestoreButton}\r\n                                 >\r\n                                   Restore This Record\r\n                                </Button>\r\n                            </li>\r\n\r\n                            <li hidden={!(restoreMode.restore && restoreMode.person._id  === person._id)}>\r\n                                 <Button\r\n                                    type=\"button\"\r\n                                    fullWidth\r\n                                    variant=\"contained\"\r\n                                    color=\"primary\"\r\n                                    disabled = {restoring}\r\n                                    onClick = {() => {handleRestoreModeChanged(false, person)}}\r\n                                    className={classes.SaveButton}\r\n                                 >\r\n                                    YES, Restore this!\r\n                                </Button>\r\n                            </li>\r\n\r\n                            <li hidden={!(restoreMode.restore && restoreMode.person._id  === person._id)}>\r\n                                 <Button\r\n                                    type=\"button\"\r\n                                    fullWidth\r\n                                    variant=\"contained\"\r\n                                    color=\"default\"\r\n                                    disabled = {restoring}\r\n                                    onClick = {() => {handleRestoreModeChanged(false, null)}}\r\n                                    className={classes.CancelButton}\r\n                                 >\r\n                                    Cancel\r\n                                </Button>\r\n                            </li>\r\n\r\n                           {/*  ******************************************************************* */}\r\n\r\n                              {/* Edit Functionality ******************************************* */}\r\n\r\n                            <li hidden={person.deleted || deleteMode.delete || (editMode.edit && editMode.person._id === person._id)}>\r\n                                 <Button\r\n                                    type=\"button\"\r\n                                    fullWidth\r\n                                    variant=\"contained\"\r\n                                    color=\"primary\"\r\n                                    onClick = {() => {handleEditModeChanged(true, person)}}\r\n                                    className={classes.EditButton}\r\n                                 >\r\n                                    Edit Booking Info\r\n                                </Button>\r\n                            </li>\r\n\r\n                            <li hidden={!(editMode.edit && editMode.person._id  === person._id)}>\r\n                                 <Button\r\n                                    type=\"button\"\r\n                                    fullWidth\r\n                                    variant=\"contained\"\r\n                                    color=\"primary\"\r\n                                    disabled = {saving}\r\n                                    onClick = {() => {handleEditModeChanged(false, person)}}\r\n                                    className={classes.SaveButton}\r\n                                 >\r\n                                    Save Changes\r\n                                </Button>\r\n                            </li>\r\n\r\n                            <li hidden={!(editMode.edit && editMode.person._id === person._id)}>\r\n                                 <Button\r\n                                    type=\"button\"\r\n                                    fullWidth\r\n                                    variant=\"contained\"\r\n                                    color=\"default\"\r\n                                    disabled = {saving}\r\n                                    onClick = {() => {handleEditModeChanged(false, null)}}\r\n                                    className={classes.CancelButton}\r\n                                 >\r\n                                    Cancel\r\n                                </Button>\r\n                            </li>\r\n                            \r\n                            {/* ****************************************************************************************** */}\r\n\r\n\r\n                            {/* Delete Functionality ******************************************* */}\r\n\r\n                            <li hidden={!(deleteMode.delete && deleteMode.person._id  === person._id)}>\r\n                              <div style={{fontWeight: \"600\",  paddingBottom: \"5px\", paddingLeft: \"5px\", fontSize:\"16px\"}}>\r\n                                Are you sure you want to delete this record?\r\n                              </div>\r\n                            </li>\r\n\r\n                            <li hidden={person.deleted ||  editMode.edit || (deleteMode.delete && deleteMode.person._id === person._id)}>\r\n                                 <Button\r\n                                    type=\"button\"\r\n                                    fullWidth\r\n                                    variant=\"contained\"\r\n                                    color=\"primary\"\r\n                                    onClick = {() => {handleDeleteModeChanged(true, person)}}\r\n                                    className={classes.DeleteButton}\r\n                                 >\r\n                                   Delete This Record\r\n                                </Button>\r\n                            </li>\r\n\r\n                            <li hidden={!(deleteMode.delete && deleteMode.person._id  === person._id)}>\r\n                                 <Button\r\n                                    type=\"button\"\r\n                                    fullWidth\r\n                                    variant=\"contained\"\r\n                                    color=\"primary\"\r\n                                    disabled = {deleting}\r\n                                    onClick = {() => {handleDeleteModeChanged(false, person)}}\r\n                                    className={classes.SaveButton}\r\n                                 >\r\n                                    YES, Delete this!\r\n                                </Button>\r\n                            </li>\r\n\r\n                            <li hidden={!(deleteMode.delete && deleteMode.person._id === person._id)}>\r\n                                 <Button\r\n                                    type=\"button\"\r\n                                    fullWidth\r\n                                    variant=\"contained\"\r\n                                    color=\"default\"\r\n                                    disabled = {deleting}\r\n                                    onClick = {() => {handleDeleteModeChanged(false, null)}}\r\n                                    className={classes.CancelButton}\r\n                                 >\r\n                                    Cancel\r\n                                </Button>\r\n                            </li>\r\n                                 \r\n                            {/* ****************************************************************************************** */}\r\n\r\n                            <li className={classes.li}>\r\n                                <span className={classes.infoTitle}>BOOKED DATE</span> \r\n                            \r\n\r\n                                <span hidden={(editMode.edit && editMode.person._id  === person._id)} className={classes.infoData}>\r\n                                   {FormatDateFromString(person.bookingDate) }\r\n                                  </span>  \r\n                                        <span hidden={!(editMode.edit && editMode.person._id  === person._id)} className={classes.infoData}>\r\n                                          <TextField \r\n                                                      fullWidth\r\n                                                      error={validationError.bookingDateError}\r\n                                                      className={classes.TextBox} \r\n                                                      value={bookingDate}\r\n                                                      onChange = {bookingDateChanged}\r\n                                                      inputProps= {{\r\n                                                          style:{\r\n                                                            padding: 0\r\n                                                          }\r\n                                                        }\r\n                                                      }\r\n                                                      > \r\n                                          </TextField> \r\n                                        </span> \r\n\r\n\r\n                            </li>\r\n\r\n                            <li className={classes.li}>\r\n                                <span className={classes.infoTitle}>BOOKED TIME</span> \r\n                                <span hidden={(editMode.edit && editMode.person._id  === person._id)} className={classes.infoData}>{person.bookingTime}</span>  \r\n                                        <span hidden={!(editMode.edit && editMode.person._id  === person._id)} className={classes.infoData}>\r\n                                          <TextField \r\n                                                      fullWidth\r\n                                                      error={validationError.bookingTimeError}\r\n                                                      className={classes.TextBox} \r\n                                                      value={bookingTime}\r\n                                                      onChange = {bookingTimeChanged}\r\n                                                      inputProps= {{\r\n                                                          style:{\r\n                                                            padding: 0\r\n                                                          }\r\n                                                        }\r\n                                                      }\r\n                                                      > \r\n                                          </TextField> \r\n                                        </span> \r\n\r\n\r\n                            </li>\r\n\r\n                            <li className={classes.li}>\r\n                            <span className={classes.infoTitle}>FULLNAME</span> \r\n                                        <span hidden={(editMode.edit && editMode.person._id  === person._id)} className={classes.infoData}>{person.fullname}</span>  \r\n                                        <span hidden={!(editMode.edit && editMode.person._id  === person._id)} className={classes.infoData}>\r\n                                        <TextField \r\n                                                      fullWidth\r\n                                                      className={classes.TextBox} \r\n                                                      value={fullname}\r\n                                                      onChange = {fullnameChanged}\r\n                                                      inputProps= {{\r\n                                                          style:{\r\n                                                            padding: 0\r\n                                                          }\r\n                                                        }\r\n                                                      }\r\n                                                      > \r\n                                          </TextField> \r\n                                        </span> \r\n                            </li>\r\n                            <li className={classes.li}>\r\n                                <span className={classes.infoTitle}>EMAIL</span> \r\n                                       <span hidden={(editMode.edit && editMode.person._id  === person._id)} className={classes.infoData}>{person.email}</span>  \r\n                                        <span hidden={!(editMode.edit && editMode.person._id  === person._id)} className={classes.infoData}>\r\n                                        <TextField \r\n                                                      fullWidth\r\n                                                      className={classes.TextBox} \r\n                                                      value={email}\r\n                                                      onChange = {emailChanged}\r\n                                                      inputProps= {{\r\n                                                          style:{\r\n                                                            padding: 0\r\n                                                          }\r\n                                                        }\r\n                                                      }\r\n                                                      > \r\n                                          </TextField> \r\n                                        </span>   \r\n                            </li>\r\n                            <li className={classes.li}>\r\n                                <span className={classes.infoTitle}>TEL</span>\r\n                                 <span hidden={(editMode.edit && editMode.person._id  === person._id)} className={classes.infoData}>{person.phone}</span>  \r\n                                        <span hidden={!(editMode.edit && editMode.person._id  === person._id)} className={classes.infoData}>\r\n                                        <TextField \r\n                                                      fullWidth\r\n                                                      className={classes.TextBox} \r\n                                                      value={tel}\r\n                                                      onChange = {telChanged}\r\n                                                      inputProps= {{\r\n                                                          style:{\r\n                                                            padding: 0\r\n                                                          }\r\n                                                        }\r\n                                                      }\r\n                                                      > \r\n                                          </TextField> \r\n                                        </span>  \r\n                            </li>\r\n                            <li className={classes.li}>\r\n                                <span className={classes.infoTitle}>SERVICE</span>\r\n                                 <span hidden={(editMode.edit && editMode.person._id  === person._id)} className={classes.infoData}>{person.service}</span>  \r\n                                        <span hidden={!(editMode.edit && editMode.person._id  === person._id)} className={classes.infoData}>\r\n                                        <TextField \r\n                                                      fullWidth\r\n                                                      className={classes.TextBox} \r\n                                                      value={service}\r\n                                                      onChange = {serviceChanged}\r\n                                                      inputProps= {{\r\n                                                          style:{\r\n                                                            padding: 0\r\n                                                          }\r\n                                                        }\r\n                                                      }\r\n                                                      > \r\n                                          </TextField> \r\n                                        </span>  \r\n                            </li>\r\n                            <li className={classes.li}>\r\n                                <span className={classes.infoTitle}>NOTES</span>\r\n                                 <span hidden={(editMode.edit && editMode.person._id  === person._id)} className={classes.infoData}>{person.notes}</span>  \r\n                                        <span hidden={!(editMode.edit && editMode.person._id  === person._id)} className={classes.infoData}>\r\n                                        <TextField \r\n                                                      fullWidth\r\n                                                      className={classes.TextBox} \r\n                                                      value={notes}\r\n                                                      onChange = {notesChanged}\r\n                                                      inputProps= {{\r\n                                                          style:{\r\n                                                            padding: 0\r\n                                                          }\r\n                                                        }\r\n                                                      }\r\n                                                      > \r\n                                          </TextField> \r\n                                        </span>  \r\n                            </li>\r\n                            <li className={classes.li}>\r\n                                <span className={classes.infoTitle}>STATUS</span> \r\n                                {getStatusLabel(person.status)} \r\n                            </li>\r\n      \r\n\r\n                        </ul>\r\n\r\n                    </AccordionDetails>\r\n                    </Accordion>\r\n                </div>\r\n            </Grid> \r\n          ))}\r\n    </Grid>\r\n    </React.Fragment>\r\n  );\r\n}\r\n","import React, { useEffect } from 'react';\r\nimport Button from '@material-ui/core/Button';\r\nimport CssBaseline from '@material-ui/core/CssBaseline';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport GlobalState from './../GlobalState';\r\nimport Alert from '@material-ui/lab/Alert';\r\nimport PropTypes from 'prop-types';\r\nimport MaskedInput from 'react-text-mask';\r\nimport { FormControl, Grid, Input, InputLabel } from '@material-ui/core';\r\nimport BookService from './services/BookService';\r\nimport PersonsBox from './PersonsBox';\r\nimport { width } from '@material-ui/system';\r\n\r\n\r\nconst isBoolean = (param) => typeof(param) === \"boolean\"\r\n\r\nconst useFocus = (initialFocus = false, id = \"\") => {\r\n    const [focus, setFocus] = React.useState(initialFocus)\r\n    const setFocusWithTrueDefault = (param) => setFocus(isBoolean(param)? param : true)\r\n    return ([\r\n        setFocusWithTrueDefault, {\r\n            autoFocus: focus,\r\n            key: `${id}${focus}`,\r\n            onFocus: () => setFocus(true),\r\n            onBlur: () => setFocus(false),\r\n        },\r\n    ])\r\n}\r\n\r\n\r\nfunction TextMaskCustom(props) {\r\n    const { inputRef, ...other } = props;\r\n  \r\n    return (\r\n      <MaskedInput\r\n        {...other}\r\n        ref={(ref) => {\r\n          inputRef(ref ? ref.inputElement : null);\r\n        }}\r\n        mask={[/\\d/, /\\d/, /\\d/, '-', /\\d/, /\\d/, /\\d/, '-', /\\d/, /\\d/, /\\d/]}\r\n        // placeholderChar={'\\u2000'}\r\n        showMask\r\n      />\r\n    );\r\n  }\r\n  \r\n  TextMaskCustom.propTypes = {\r\n    inputRef: PropTypes.func.isRequired,\r\n  };\r\n\r\n\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n\r\n    root: {\r\n        width: '100%',\r\n        '& > * + *': {\r\n          marginTop: theme.spacing(2),\r\n        },\r\n        marginTop: \"20px\"\r\n      },  \r\n\r\n    paper: {\r\n        marginTop: theme.spacing(8),\r\n        display: 'flex',\r\n        flexDirection: 'column',\r\n        alignItems: 'center',\r\n    },\r\n\r\n    avatar: {\r\n        margin: theme.spacing(1),\r\n        backgroundColor: theme.palette.secondary.main,\r\n    },\r\n\r\n    form: {\r\n        width: '100%', // Fix IE 11 issue.\r\n        marginTop: theme.spacing(1),\r\n    },\r\n\r\n    Find: {\r\n        width: \"80px\"\r\n    },\r\n\r\n    Clear:{\r\n        marginRight: \"20px\"\r\n    },\r\n\r\n    title:{\r\n        marginTop : \"20px\"\r\n    },\r\n\r\n    TextBox:{\r\n        marginTop: \"30px\",\r\n        \"& > *\" :\r\n        {\r\n            textAlign: \"center\"\r\n        },\r\n  \r\n    },\r\n\r\n    TextField:{\r\n\r\n    },\r\n\r\n    NoRecordsFound:{\r\n        marginTop: \"20px\",\r\n        color: \"red\",\r\n        fontWeight: \"600\",\r\n        fontSize: \"14px\",\r\n    },\r\n\r\n    PersonsBox:{\r\n        marginTop : \"20px\",\r\n        marginBottom: \"50px\",\r\n    }\r\n\r\n}));\r\n\r\nexport default function FindByRef() {\r\n  const classes = useStyles();\r\n  const [state, setState] = React.useContext(GlobalState);\r\n  \r\n  const [setFocus, focusProps] = useFocus(true);\r\n\r\n//   useEffect( () =>\r\n//   {\r\n//      findRecords();\r\n//   }, [state.findRecords]);\r\n\r\n useEffect ( () => {\r\n    setState(state => ({...state, foundRecords : []}));\r\n }, [])\r\n\r\n  useEffect( () => {\r\n    BookService.getBookingsByRef(state.ref).then( (res)=>\r\n    {\r\n        if (res.data.length > 0)\r\n        {\r\n            setState(state => ({...state, foundRecords : res.data}));\r\n        }\r\n    });\r\n    }, [state.RefreshPersonInfo]);\r\n\r\n    const handleChange = (event) =>\r\n    {\r\n        setState(state => ({...state, ref : event.target.value}));\r\n        setState(state => ({...state, refError : false})); \r\n    }\r\n\r\n    const clearField = () =>\r\n    {\r\n        setState(state => ({...state, refError : false})); \r\n        setState(state => ({...state, ref : '___-___-___'}));\r\n        setState(state => ({...state, foundRecords : []}));\r\n        setFocus();\r\n    }\r\n\r\n    const findRecords = () =>\r\n    {\r\n        if (!state.ref || state.ref.indexOf('_') >= 0)\r\n        {\r\n            setState(state => ({...state, refError : true}));  \r\n            return;\r\n        }\r\n\r\n        setState(state => ({...state, submiting : true}));\r\n        setState(state => ({...state, foundRecords : []}));\r\n\r\n        BookService.getBookingsByRef(state.ref).then( (res)=>\r\n        {\r\n            setState(state => ({...state, submiting : false}));\r\n            if (res.data.length > 0)\r\n            {\r\n                setState(state => ({...state, foundRecords : res.data}));\r\n            }\r\n            else\r\n            {\r\n                setState(state => ({...state, foundRecords : null}));\r\n            }\r\n            \r\n            console.log(res.data);\r\n\r\n        }).catch( (err) =>\r\n        {\r\n            console.log(err);\r\n            setState(state => ({...state, submiting : false}));\r\n        });\r\n    }\r\n\r\n  return (\r\n    <React.Fragment>\r\n        <CssBaseline />\r\n        <div className={classes.title}>\r\n            <Typography component=\"h6\" variant=\"h6\" align=\"center\">\r\n                Find Booking Appoinments\r\n            </Typography>  \r\n        </div> \r\n\r\n        <Grid container direction=\"column\" spacing={1} justify=\"flex-start\"  alignItems=\"center\">\r\n\r\n        <Grid item xs={12} md={12}>\r\n            <FormControl className={classes.TextBox}>\r\n                <TextField\r\n                    {...focusProps}\r\n                    autoFocus \r\n                    pattern=\"[0-9]*\"\r\n                    error = {state.refError ? true : false} \r\n                    value = {state.ref}\r\n                    className = {classes.TextField}\r\n                    width = \"50px\"\r\n                    onChange={handleChange}\r\n                    label=\"Reference No.\"\r\n                    helperText=\"Enter Your 9-digits Reference No.\"\r\n                    name=\"refNo\"\r\n                    id=\"refNo\"\r\n                    variant=\"outlined\"\r\n                    \r\n                    size=\"medium\"\r\n                    margin=\"normal\"\r\n                    fullWidth = {true}\r\n                    InputProps={{\r\n                        inputComponent: TextMaskCustom,\r\n                        style: { textAlign: 'center', fontSize:\"24px\", width: \"210px\", paddingLeft: \"20px\" }\r\n                    }}\r\n\r\n                    onKeyPress= {event => {\r\n                        if (event.key === 'Enter') {\r\n                            findRecords();\r\n                        }\r\n                      }}\r\n                />         \r\n            </FormControl>\r\n        </Grid>\r\n\r\n        <Grid item xs={12} md={12}>\r\n               \r\n                <Button\r\n                    disabled = {state.submiting}\r\n                    color=\"default\"\r\n                    onClick = {clearField}\r\n                    onTouchTap = {clearField}\r\n                    className={classes.Clear}\r\n                >\r\n                    Clear \r\n                </Button>  \r\n            \r\n                <Button\r\n                    type=\"button\"\r\n                    disabled = {state.submiting}\r\n                    variant=\"contained\"\r\n                    color=\"primary\"\r\n                    onClick = {findRecords}\r\n                    onTouchTap = {findRecords}\r\n                    className={classes.Find}\r\n                >\r\n                    Find \r\n                </Button>  \r\n        </Grid>\r\n\r\n        <Grid item xs={12} md={12}>\r\n\r\n                    \r\n\r\n            {state.foundRecords && state.foundRecords.length > 0 && (\r\n                <React.Fragment>\r\n\r\n                    <div className={classes.PersonsBox}>\r\n                          <PersonsBox/>\r\n                    </div>\r\n                    \r\n\r\n\r\n                </React.Fragment>\r\n            )}   \r\n\r\n            {!state.foundRecords && (\r\n                <React.Fragment>\r\n\r\n                <div className={classes.root}>\r\n                    <Alert severity=\"error\"> <strong>No Records Found !</strong> <br/> Please check you reference number again.</Alert>\r\n                </div> \r\n                   \r\n                </React.Fragment>\r\n            )}\r\n\r\n        </Grid>\r\n        \r\n        \r\n        </Grid>\r\n        \r\n    </React.Fragment>\r\n   \r\n  );\r\n}","import React, { useEffect, useState } from 'react';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport PropTypes from 'prop-types';\r\nimport dateformat from 'dateformat';\r\nimport BookService from '../services/BookService';\r\n\r\nimport CircularProgress from '@material-ui/core/CircularProgress';\r\n\r\nimport GlobalState from '../../GlobalState';\r\n\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n\r\n    Container: {\r\n        width: \"100%\",\r\n        paddingTop: \"70%\",\r\n        position: \"relative\",\r\n        backgroundColor: \"#fff\",\r\n        cursor: \"pointer\"\r\n    },\r\n\r\n    ContainerPast: {\r\n        width: \"100%\",\r\n        paddingTop: \"70%\",\r\n        position: \"relative\",\r\n        backgroundColor: \"#fafafa\",\r\n        cursor: \"pointer\"\r\n    },\r\n    \r\n    DayLabel: {\r\n        position: \"absolute\",\r\n        top: \"5px\",\r\n        right: \"5px\",\r\n        color: \"#555\",\r\n        fontSize: \"1rem\"\r\n    },\r\n\r\n    DayLabelToday: {\r\n        position: \"absolute\",\r\n        top: \"5px\",\r\n        right: \"5px\",\r\n        backgroundColor: \"#1a73e8\",\r\n        color: \"#fff\",\r\n        fontSize: \"1rem\",\r\n        borderRadius: \"50%\",\r\n        padding: \"5px\",\r\n        lineHight: \"35px\",\r\n        minWidth: \"35px\"\r\n    },\r\n\r\n    DayLabelDisabled: {\r\n        position: \"absolute\",\r\n        top: \"5px\",\r\n        right: \"5px\",\r\n        color: \"#ddd\",\r\n        fontSize: \"1rem\"\r\n    },\r\n\r\n    BookingCountLabel: {\r\n        position: \"absolute\",\r\n        top: \"35%\",\r\n        left: \"40%\",\r\n        color: \"#3f51b5\",\r\n        backgroundColor: \"#ebedf7\",\r\n        fontSize: \"16px\",\r\n        fontWeight: \"600\",\r\n        padding: \"10px\",\r\n        borderRadius: \"50%\",\r\n        minWidth: \"40px\",\r\n        lineHight: \"40px\",\r\n        cursor: \"pointer\",\r\n        textAlign: \"center\"\r\n    },\r\n\r\n    BookingCountLabelBusy: {\r\n        position: \"absolute\",\r\n        top: \"35%\",\r\n        left: \"40%\",\r\n        color: \"#b00000\",\r\n        backgroundColor: \"#fce6e6\",\r\n        fontSize: \"16px\",\r\n        fontWeight: \"600\",\r\n        padding: \"10px\",\r\n        borderRadius: \"50%\",\r\n        minWidth: \"40px\",\r\n        cursor: \"pointer\",\r\n        textAlign: \"center\"\r\n    },\r\n\r\n    LoadingProgress: {\r\n        position: \"absolute\",\r\n        top: \"40%\",\r\n        left: \"40%\",\r\n      },\r\n\r\n      BookingCountGauge: {\r\n        position: \"absolute\",\r\n        bottom: \"5%\",\r\n        left: \"8%\",\r\n        width : \"8%\",\r\n        height: \"85%\"\r\n    },\r\n\r\n  }));\r\n\r\nconst MAX_BOOKING_COUNT = 10;  \r\n\r\nconst MonthViewCell = ({key, cellIndex, month, daysInMonth, dayClicked}) => {\r\n    const classes = useStyles();\r\n\r\n    const [state, setState] = React.useContext(GlobalState);\r\n\r\n    const [dateStr, setDateStr] = React.useState('');\r\n\r\n    const [cellDate, setCellDate] = React.useState(new Date());\r\n\r\n    const [bookingsCount, setBookingsCount] = React.useState(-1);\r\n\r\n    const [disableDay, setDisableDay] = React.useState(false);\r\n\r\n    const [isPast, setIsPast] = React.useState(false);\r\n\r\n    useEffect( () => {\r\n\r\n        if (cellIndex <= daysInMonth.length)\r\n        {\r\n            const date = daysInMonth[cellIndex - 1];\r\n            const dateStr = dateformat(date, 'yyyy-mm-dd');\r\n            setDateStr(dateStr);\r\n            setCellDate(date);\r\n            setDisableDay(date.getMonth() !== month - 1);\r\n            const todayStr = dateformat(new Date(), 'yyyy-mm-dd');\r\n            setIsPast(dateStr < todayStr);\r\n        }\r\n        else\r\n        {\r\n            const day = cellIndex - daysInMonth.length;\r\n            const date = new Date((daysInMonth[daysInMonth.length - 1].getTime() + ( day * 86400000)));\r\n            const dateStr = dateformat(date, 'yyyy-mm-dd');\r\n            setDateStr(dateStr);\r\n            setCellDate(date);\r\n            setDisableDay(true);\r\n            const todayStr = dateformat(new Date(), 'yyyy-mm-dd');\r\n            setIsPast(dateStr < todayStr);\r\n        }\r\n\r\n    }, [cellIndex, month, daysInMonth]);\r\n\r\n    useEffect ( () => {\r\n\r\n        const fecthData = async () =>\r\n        {\r\n            if (!dateStr || dateStr.length <= 0)\r\n            {\r\n                return;\r\n            }\r\n        \r\n            if (disableDay)\r\n            {\r\n                setBookingsCount(-2);\r\n                return;\r\n            }\r\n\r\n            setBookingsCount(-1);\r\n\r\n            var res = state.AdminCalendarCache?.find(record => record.method === 'getBookingsCountByDateStr' && record.query === dateStr)?.res;\r\n\r\n            if (!res)\r\n            {\r\n                res = await BookService.getAllBookingsCountByDateStr(dateStr);\r\n                setState(state => ({...state, AdminCalendarCache : [...state.AdminCalendarCache, {method: 'getBookingsCountByDateStr' , query : dateStr, res: res}]}));\r\n            }\r\n        \r\n            if (res.data.count >= 0)\r\n            {\r\n                setBookingsCount(res.data.count);\r\n            }\r\n\r\n        }\r\n\r\n      fecthData();\r\n\r\n    }, [dateStr]);\r\n\r\n    const getDayLabel = (_cellIndex , _month , _daysInMonth) =>\r\n    {\r\n        var date = null;\r\n        var disabled = false;\r\n        var day = -1;\r\n\r\n    \r\n\r\n        if (_cellIndex <= _daysInMonth.length)\r\n        {\r\n            date = _daysInMonth[_cellIndex - 1];\r\n            day = date.getDate();\r\n            if (date.getMonth() !== _month - 1)\r\n            {\r\n                disabled = true;\r\n            }\r\n        }\r\n        else\r\n        {\r\n            const _day = _cellIndex - _daysInMonth.length;\r\n            const date = new Date((_daysInMonth[_daysInMonth.length - 1].getTime() + ( _day * 86400000)));\r\n            day = date.getDate();\r\n            disabled = true;\r\n        }\r\n\r\n        const isToday = dateformat(new Date(),'yyyy-mm-dd') === dateformat(date, 'yyyy-mm-dd');\r\n\r\n        return (\r\n            <span className={(disabled) ? classes.DayLabelDisabled : isToday ? classes.DayLabelToday : classes.DayLabel}>\r\n                 {day > 0 ? `${day}` : ''}\r\n             </span>\r\n        );\r\n    }\r\n\r\n    const getBookingsCountLabel = (_bookingsCount) =>\r\n    {\r\n        if (_bookingsCount === -1)\r\n        {\r\n            return (\r\n                <div className={classes.LoadingProgress}>\r\n                      <CircularProgress disableShrink  />\r\n                </div>\r\n            );  \r\n        }\r\n        else if (_bookingsCount > 0 )\r\n        {\r\n            if (_bookingsCount >= MAX_BOOKING_COUNT / 2)\r\n            {\r\n                return (\r\n                    <div onClick={(event => dayClicked(event,cellDate))} className={classes.BookingCountLabelBusy}>\r\n                        {_bookingsCount < 10 ?  ` ${_bookingsCount}` : `${_bookingsCount}`}\r\n                    </div>\r\n                );\r\n            }\r\n            else\r\n            {\r\n                return (\r\n                    <div onClick={(event => dayClicked(event,cellDate))} className={classes.BookingCountLabel}>\r\n                          {_bookingsCount < 10 ?  ` ${_bookingsCount}` : `${_bookingsCount}`}\r\n                    </div>\r\n                );\r\n            }\r\n        }\r\n    }\r\n\r\n    const getBookingsCountGauge = (_bookingsCount) =>\r\n    {\r\n        if (_bookingsCount > 0)\r\n        {\r\n            let percent = (_bookingsCount / MAX_BOOKING_COUNT) * 100;\r\n            if (percent > 100)\r\n            {\r\n                percent = 100;\r\n            }\r\n\r\n            percent = 100 - percent;\r\n\r\n            return (\r\n\r\n                <div className={classes.BookingCountGauge}>\r\n                  <div style={{padding:\"0\", margin:\"0\", width:\"100%\", height:\"100%\", backgroundColor: \"#3f51b5\"}} >\r\n                        <div  style={{padding:\"0\", margin:\"0\", width:\"100%\", height:`${percent}%`, backgroundColor: \"#fafafa\"}} >\r\n\r\n                        </div>\r\n                  </div>\r\n                </div>\r\n            );\r\n        }\r\n    }\r\n\r\n    return (\r\n        <React.Fragment>\r\n\r\n            <div className={classes.Container} onClick={(event => dayClicked(event,cellDate))}>\r\n\r\n              {getDayLabel(cellIndex, month, daysInMonth)}\r\n\r\n              {getBookingsCountLabel(bookingsCount)}\r\n\r\n              {getBookingsCountGauge(bookingsCount)}\r\n\r\n            </div>\r\n\r\n        </React.Fragment>\r\n\r\n\r\n    );\r\n}\r\n\r\nMonthViewCell.propTypes = {\r\n    key: PropTypes.string.isRequired,\r\n    cellIndex: PropTypes.number.isRequired,\r\n    month: PropTypes.number.isRequired,\r\n    daysInMonth: PropTypes.arrayOf(PropTypes.date),\r\n    dayClicked: PropTypes.func\r\n  };\r\n\r\n \r\n  \r\nexport default MonthViewCell;","import calendar from 'node-calendar';\r\n\r\n\r\nexport default class CalendarUtil {\r\n\r\n    static getMonthRange = (month , year) =>\r\n    {\r\n        return new calendar.Calendar(calendar.SUNDAY).itermonthdates(year, month);\r\n    } \r\n\r\n} ","import React, { useEffect, useState } from 'react';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport PropTypes from 'prop-types';\r\nimport MonthViewCell from './MonthViewCell';\r\nimport CalendarUtil from './calendar-util';\r\n\r\nconst dayLables = ['Sun', 'Mon', 'Tue', 'Wed' , 'Thu', 'Fri', 'Sat'];\r\nconst days = [1,2,3,4,5,6,7]; \r\nconst rows = [1,2,3,4,5,6];\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n\r\n    table: {\r\n        width: \"100%\",\r\n        border: \"1px solid #ddd\",\r\n        borderCollapse: \"collapse\",\r\n    },\r\n\r\n    th: {\r\n        border: \"1px solid #ddd\",\r\n        borderCollapse: \"collapse\",\r\n        verticalAlign: \"middle\",\r\n        fontcolor: \"#555\",\r\n        fontWeight: \"400\",\r\n        fontSize: \"15px\",\r\n        paddingTop: \"5px\",\r\n        paddingBottom: \"5px\",\r\n        width: \"14%\"\r\n    },\r\n\r\n    td: {\r\n        border: \"1px solid #ddd\",\r\n        borderCollapse: \"collapse\",\r\n        verticalAlign: \"middle\",\r\n    }\r\n\r\n  }));\r\n\r\nconst MonthView = ({month, year, dayClicked}) => {\r\n    const classes = useStyles();\r\n\r\n    const daysInMonth = CalendarUtil.getMonthRange(month,year);\r\n\r\n    return (\r\n        <React.Fragment>\r\n\r\n            <table className={classes.table}>\r\n                <thead>\r\n                    <tr>\r\n                        {dayLables.map(label => (\r\n                            <th key={`th-${label}`} className={classes.th}>\r\n                                {label}\r\n                            </th>\r\n                        ))}\r\n                    </tr>\r\n                </thead>\r\n                <tbody>\r\n                    {rows.map(row => (\r\n                        <tr>\r\n                            {days.map(day => (\r\n                                <td className={classes.td}>\r\n                                    <MonthViewCell \r\n                                        key={`${month}${year}${(row-1) * days.length + day}`} \r\n                                        cellIndex={(row-1) * days.length + day} \r\n                                        month={month} \r\n                                        daysInMonth={daysInMonth}\r\n                                        dayClicked = {dayClicked}\r\n                                        />\r\n                                </td>\r\n                            ))}\r\n                        </tr>\r\n                    ))}            \r\n                </tbody>\r\n\r\n            </table>\r\n\r\n      \r\n        </React.Fragment>\r\n\r\n\r\n    );\r\n}\r\n\r\nMonthView.propTypes = {\r\n    month: PropTypes.number.isRequired,\r\n    year: PropTypes.number.isRequired,\r\n    dayClicked: PropTypes.func\r\n  };\r\n\r\n\r\nexport default MonthView;","import React, { useEffect, useState } from 'react';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport PropTypes from 'prop-types';\r\nimport dateformat from 'dateformat';\r\nimport BookService from '../services/BookService';\r\n\r\nimport CircularProgress from '@material-ui/core/CircularProgress';\r\nimport GlobalState from '../../GlobalState';\r\n\r\nimport axios from 'axios'\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n\r\n    Container: {\r\n        width: \"100%\",\r\n        paddingTop: \"40%\",\r\n        position: \"relative\",\r\n        backgroundColor: \"#fff\",\r\n        cursor: \"pointer\"\r\n    },\r\n\r\n    ContainerPast: {\r\n        width: \"100%\",\r\n        paddingTop: \"40%\",\r\n        position: \"relative\",\r\n        backgroundColor: \"#fafafa\",\r\n        cursor: \"pointer\"\r\n    },\r\n    \r\n    DayLabel: {\r\n        position: \"absolute\",\r\n        top: \"5px\",\r\n        right: \"5px\",\r\n        color: \"#555\",\r\n        fontSize: \"1rem\"\r\n    },\r\n\r\n    DayLabelDisabled: {\r\n        position: \"absolute\",\r\n        top: \"5px\",\r\n        right: \"5px\",\r\n        color: \"#ddd\",\r\n        fontSize: \"1rem\"\r\n    },\r\n\r\n    BookingCountLabel: {\r\n        position: \"absolute\",\r\n        top: \"25%\",\r\n        left: \"38%\",\r\n        color: \"#3f51b5\",\r\n        backgroundColor: \"#ebedf7\",\r\n        fontSize: \"14px\",\r\n        fontWeight: \"600\",\r\n        padding: \"5px\",\r\n        borderRadius: \"50%\",\r\n        minWidth: \"30px\",\r\n        cursor : \"pointer\",\r\n        textAlign: \"center\"\r\n    },\r\n\r\n    BookingCountLabelBusy: {\r\n        position: \"absolute\",\r\n        top: \"25%\",\r\n        left: \"38%\",\r\n        color: \"#b00000\",\r\n        backgroundColor: \"#fce6e6\",\r\n        fontSize: \"14px\",\r\n        fontWeight: \"600\",\r\n        padding: \"5px\",\r\n        borderRadius: \"50%\",\r\n        minWidth: \"30px\",\r\n        cursor : \"pointer\",\r\n        textAlign: \"center\"\r\n    },\r\n\r\n    LoadingProgress: {\r\n        position: \"absolute\",\r\n        top: \"40%\",\r\n        left: \"40%\",\r\n      },\r\n\r\n      BookingCountGauge: {\r\n        position: \"absolute\",\r\n        bottom: \"5%\",\r\n        left: \"8%\",\r\n        width : \"85%\",\r\n        height: \"8%\"\r\n    },\r\n\r\n  }));\r\n\r\nconst MAX_BOOKING_COUNT = 1;  \r\n\r\nconst WeekViewCell = ({key, date, time, dayClicked}) => {\r\n    const classes = useStyles();\r\n\r\n    const [state, setState] = React.useContext(GlobalState);\r\n    const [bookingsCount, setBookingsCount] = React.useState(-1);\r\n    const [isPast, setIsPast] = React.useState(false);\r\n\r\n    const [cellDate, setCellDate] = React.useState(new Date());\r\n\r\n    useEffect( () => {\r\n        const todayStr = dateformat(new Date(), 'yyyy-mm-dd');\r\n        setIsPast(date < todayStr);\r\n\r\n        setCellDate(new Date(date));\r\n\r\n    }, [date]);\r\n\r\n    useEffect ( () => {\r\n      \r\n      \r\n      \r\n        if (!date || date.length <= 0 || !time || time.length <= 0)\r\n        {\r\n            return;\r\n        }\r\n        \r\n        // if (isPast)\r\n        // {\r\n        //     setBookingsCount(-2);\r\n        //     return;\r\n        // }\r\n\r\n        setBookingsCount(-1);\r\n\r\n       \r\n\r\n        var res = state.AdminCalendarCache?.find(record => record.method === 'getBookingsCountByDateStrandTime' && record.query === `${date}${time}`)?.res;\r\n        if (res)\r\n        {\r\n            if (res.data.count >= 0)\r\n            {\r\n                setBookingsCount(res.data.count);\r\n            }  \r\n            return;\r\n        }\r\n\r\n        let source = axios.CancelToken.source();\r\n        BookService.getAllBookingsCountByDateStrandTime(date, time, source).then( res => {\r\n            if (res.data.count >= 0)\r\n            {\r\n                setBookingsCount(res.data.count);\r\n                setState(state => ({...state, AdminCalendarCache : [...state.AdminCalendarCache, {method: 'getBookingsCountByDateStrandTime' , query : `${date}${time}`, res: res}]}));\r\n            }  \r\n        }).catch( err => \r\n            {\r\n                //do nothing\r\n            });\r\n     \r\n        return () => {\r\n           if (source)\r\n              source.cancel('Cancelling in cleanup');\r\n        }\r\n     \r\n    }, [date, time]);\r\n\r\n\r\n    const getBookingsCountLabel = (_bookingsCount) =>\r\n    {\r\n        if (_bookingsCount === -1)\r\n        {\r\n            return (\r\n                <div className={classes.LoadingProgress}>\r\n                      <CircularProgress disableShrink  />\r\n                </div>\r\n            );  \r\n        }\r\n        else if (_bookingsCount > 0)\r\n        {\r\n            if (_bookingsCount >= MAX_BOOKING_COUNT)\r\n            {\r\n                return (\r\n                    <div onClick={(event => dayClicked(event,cellDate))} className={classes.BookingCountLabelBusy}>\r\n                          {_bookingsCount < 10 ? ` ${_bookingsCount}` : `${_bookingsCount}` }\r\n                    </div>\r\n                );\r\n            }\r\n            else\r\n            {\r\n                return (\r\n                    <div onClick={(event => dayClicked(event,cellDate))} className={classes.BookingCountLabel}>\r\n                        {_bookingsCount < 10 ? ` ${_bookingsCount}` : `${_bookingsCount}` }\r\n                    </div>\r\n                );\r\n            }\r\n        }\r\n    }\r\n\r\n    const getBookingsCountGauge = (_bookingsCount) =>\r\n    {\r\n        if (_bookingsCount > 0 )\r\n        {\r\n            let percent = (_bookingsCount / MAX_BOOKING_COUNT) * 100;\r\n            if (percent > 100)\r\n            {\r\n                percent = 100;\r\n            }\r\n\r\n            // percent = 100 - percent;\r\n\r\n            return (\r\n\r\n                <div className={classes.BookingCountGauge}>\r\n                  <div style={{padding:\"0\", margin:\"0\", width:\"100%\", height:\"100%\", backgroundColor: \"#f5f5f5\"}} >\r\n                        <div  style={{padding:\"0\", margin:\"0\", height:\"100%\", width:`${percent}%`, backgroundColor: \"#3f51b5\"}} >\r\n\r\n                        </div>\r\n                  </div>\r\n                </div>\r\n            );\r\n        }\r\n    }\r\n\r\n    return (\r\n        <React.Fragment>\r\n\r\n            <div className={isPast ? classes.ContainerPast : classes.Container}  onClick={(event => dayClicked(event,cellDate))} >\r\n\r\n              {getBookingsCountLabel(bookingsCount)}\r\n\r\n              {getBookingsCountGauge(bookingsCount)}\r\n\r\n            </div>\r\n\r\n        </React.Fragment>\r\n\r\n\r\n    );\r\n}\r\n\r\nWeekViewCell.propTypes = {\r\n    key: PropTypes.string.isRequired,\r\n    date: PropTypes.string.isRequired,\r\n    time: PropTypes.string.isRequired,\r\n    dayClicked: PropTypes.func\r\n  };\r\n\r\n \r\n  \r\nexport default WeekViewCell;","import React, { useEffect, useState } from 'react';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport PropTypes from 'prop-types';\r\nimport WeekViewCell from './WeekViewCell';\r\nimport dateformat from 'dateformat';\r\n\r\nconst rows = [\r\n    '09:00 AM',\r\n    '09:15 AM', \r\n    '09:30 AM', \r\n    '09:45 AM',\r\n    '10:00 AM',\r\n    '10:15 AM',\r\n    '10:30 AM',\r\n    '10:45 AM',\r\n    '11:00 AM',\r\n    '11:15 AM',\r\n    '11:30 AM',\r\n    '11:45 AM',\r\n    '12:00 PM',\r\n    '12:15 PM',\r\n    '12:30 PM',\r\n    '12:45 PM',\r\n    '01:00 PM',\r\n    '01:15 PM',\r\n    '01:30 PM',\r\n    '01:45 PM',\r\n    '02:00 PM',\r\n    '02:15 PM',\r\n    '02:30 PM',\r\n    '02:45 PM',\r\n    '03:00 PM',\r\n    '03:15 PM',\r\n    '03:30 PM',\r\n    '03:45 PM',\r\n    '04:00 PM',\r\n    '04:15 PM',\r\n    '04:30 PM',\r\n    '04:45 PM',\r\n    '05:00 PM',\r\n    '05:15 PM',\r\n    '05:30 PM',\r\n    '05:45 PM',\r\n];\r\n\r\n\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n\r\n    table: {\r\n        width: \"100%\",\r\n        border: \"1px solid #ddd\",\r\n        borderCollapse: \"collapse\",\r\n        overflowY: \"auto\"\r\n    },\r\n\r\n    th: {\r\n        border: \"1px solid #ddd\",\r\n        borderCollapse: \"collapse\",\r\n        verticalAlign: \"middle\",\r\n        fontcolor: \"#555\",\r\n        fontWeight: \"400\",\r\n        fontSize: \"15px\",\r\n        paddingTop: \"5px\",\r\n        paddingBottom: \"5px\",\r\n        width: \"12%\", \r\n    },\r\n\r\n    td: {\r\n        border: \"1px solid #ddd\",\r\n        borderCollapse: \"collapse\",\r\n        verticalAlign: \"middle\",\r\n        height : \"50px\",\r\n        width: \"12%\", \r\n    }\r\n\r\n  }));\r\n\r\nconst WeekView = ({dates, dayClicked}) => {\r\n    const classes = useStyles();\r\n\r\n    return (\r\n        <React.Fragment>\r\n\r\n        <div style={{overflowY: \"scroll\" , height: \"60px\"}}>\r\n            <table className={classes.table}>\r\n                <thead>\r\n                    <tr>\r\n                        <th style={{width: \"7%\"}}>\r\n                        \r\n                        </th>\r\n                            {dates.map(date => (\r\n                                <th className={classes.th}>\r\n                                    <div style={{paddingBottom: \"5px\", color: \"#aaa\"}}>\r\n                                         {dateformat(date, 'ddd')}\r\n                                    </div>\r\n                                    <div>\r\n                                        <span style={{color: \"#aaa\"}}>\r\n                                            {dateformat(date, 'mmm ')}\r\n                                        </span> \r\n                                        <span  style={(dateformat(new Date(),'yyyy-mm-dd') === dateformat(date, 'yyyy-mm-dd')) ? { backgroundColor: \"#1a73e8\", color: \"#fff\", borderRadius: \"50%\",  padding: \"5px\",} : {color: \"#333\", fontWeight:\"500\"}}>\r\n                                             {dateformat(date, ' d')}\r\n                                        </span>\r\n                                       \r\n                                    </div>\r\n                                </th>\r\n                        ))}\r\n                    </tr>\r\n                </thead>\r\n             </table>\r\n\r\n        </div>\r\n\r\n            <div style={{overflowY: \"scroll\" , height: \"70vh\"}}>\r\n                <table className={classes.table}>   \r\n                    <tbody>\r\n                        {rows.map(row => (\r\n                            <tr>\r\n                                <td style={{width: \"7%\"}}>\r\n                                    {row}\r\n                                </td>\r\n                                {dates.map(day => (\r\n                                    <td className={classes.td}>\r\n                                        <WeekViewCell \r\n                                                dayClicked = {dayClicked}\r\n                                                key={`${dateformat(day,'yyyy-mm-dd')}-${row.replace(':','-')}`} \r\n                                                date={dateformat(day,'yyyy-mm-dd')} \r\n                                                time={row}/>\r\n                                    </td>\r\n                                ))}\r\n                            </tr>\r\n                        ))}            \r\n                    </tbody>\r\n                </table>\r\n            </div>                    \r\n      \r\n        </React.Fragment>\r\n\r\n\r\n    );\r\n}\r\n\r\nWeekView.propTypes = {\r\n    dates: PropTypes.arrayOf(PropTypes.any).isRequired,\r\n    dayClicked: PropTypes.func\r\n  };\r\n\r\n\r\nexport default WeekView;","import React, { useEffect, useRef, useState } from \"react\";\r\nimport BookService from \"./services/BookService\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport {\r\n  Backdrop,\r\n  Button,\r\n  Checkbox,\r\n  CircularProgress,\r\n  Divider,\r\n  FormControlLabel,\r\n  Grid,\r\n  InputAdornment,\r\n  InputLabel,\r\n  Link,\r\n  makeStyles,\r\n  MenuItem,\r\n  Select,\r\n  Switch,\r\n  TextField,\r\n  Tooltip,\r\n} from \"@material-ui/core\";\r\nimport GlobalState from \"../GlobalState\";\r\nimport { withStyles } from \"@material-ui/core/styles\";\r\n\r\nimport CreditCardIcon from \"@material-ui/icons/CreditCard\";\r\n\r\nimport Dialog from \"@material-ui/core/Dialog\";\r\nimport DialogContent from \"@material-ui/core/DialogContent\";\r\n\r\nimport DialogTitle from \"@material-ui/core/DialogTitle\";\r\nimport Draggable from \"react-draggable\";\r\nimport Paper from \"@material-ui/core/Paper\";\r\n\r\nimport Alert from \"@material-ui/lab/Alert\";\r\n\r\nimport PropTypes from \"prop-types\";\r\nimport LinearProgress from \"@material-ui/core/LinearProgress\";\r\nimport Box from \"@material-ui/core/Box\";\r\n\r\nimport Radio from \"@material-ui/core/Radio\";\r\nimport RadioGroup from \"@material-ui/core/RadioGroup\";\r\nimport FormControl from \"@material-ui/core/FormControl\";\r\nimport FormLabel from \"@material-ui/core/FormLabel\";\r\nimport { corporates } from \"./Corporates\";\r\nimport NumberFormat from \"react-number-format\";\r\n\r\nimport AddIcon from \"@material-ui/icons/Add\";\r\nimport { validate } from \"email-validator\";\r\nimport DateRangeIcon from \"@material-ui/icons/DateRange\";\r\nimport { CalendarColors } from \"../Admin/calendar-admin/colors\";\r\n\r\nvar interval;\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  title: {\r\n    marginTop: theme.spacing(0),\r\n    marginBottom: theme.spacing(1),\r\n  },\r\n\r\n  refreshButton: {\r\n    marginLeft: theme.spacing(2),\r\n  },\r\n\r\n  checkIcon: {\r\n    color: \"green\",\r\n  },\r\n\r\n  closeIcon: {\r\n    color: \"red\",\r\n  },\r\n\r\n  RefLink: {\r\n    cursor: \"pointer\",\r\n  },\r\n\r\n  BookedLabel: {\r\n    backgroundColor: \"#606060\",\r\n    color: \"#fff\",\r\n    paddingRight: \"10px\",\r\n    paddingLeft: \"10px\",\r\n  },\r\n\r\n  PatientAttendedLabel: {\r\n    backgroundColor: \"#0066aa\",\r\n    color: \"#fff\",\r\n    paddingRight: \"15px\",\r\n    paddingLeft: \"10px\",\r\n  },\r\n\r\n  SampleTakenLabel: {\r\n    backgroundColor: \"#0066cc\",\r\n    color: \"#fff\",\r\n    paddingRight: \"40px\",\r\n    paddingLeft: \"10px\",\r\n  },\r\n\r\n  ReportSentLabel: {\r\n    backgroundColor: \"#009900\",\r\n    color: \"#fff\",\r\n    paddingRight: \"90px\",\r\n    paddingLeft: \"10px\",\r\n  },\r\n\r\n  ReportCertSentLabel: {\r\n    backgroundColor: \"#009900\",\r\n    color: \"#fff\",\r\n    paddingRight: \"68px\",\r\n    paddingLeft: \"10px\",\r\n  },\r\n\r\n  archiveButton: {},\r\n\r\n  smartMatchButton: {\r\n    backgroundColor: \"#2f942e\",\r\n    \"&:hover\": {\r\n      background: \"green\",\r\n      color: \"#fff\",\r\n    },\r\n    textDecoration: \"none !important\",\r\n    marginRight: \"10px\",\r\n    // padding: \"10px\"\r\n  },\r\n\r\n  infoTitle: {\r\n    fontWeight: \"400\",\r\n  },\r\n\r\n  infoData: {\r\n    paddingLeft: \"10px\",\r\n    fontWeight: \"800\",\r\n  },\r\n\r\n  matchButton: {\r\n    marginTop: \"30px\",\r\n    marginBottom: \"20px\",\r\n    backgroundColor: \"#2f942e\",\r\n    \"&:hover\": {\r\n      background: \"green\",\r\n      color: \"#fff\",\r\n    },\r\n    textDecoration: \"none !important\",\r\n    padding: \"10px\",\r\n    paddingLeft: \"50px\",\r\n    paddingRight: \"50px\",\r\n  },\r\n\r\n  resendButton: {\r\n    marginTop: \"5px\",\r\n    marginBottom: \"5px\",\r\n    backgroundColor: \"#2f942e\",\r\n    \"&:hover\": {\r\n      background: \"green\",\r\n      color: \"#fff\",\r\n    },\r\n    textDecoration: \"none !important\",\r\n    padding: \"10px\",\r\n    paddingLeft: \"50px\",\r\n    paddingRight: \"50px\",\r\n  },\r\n\r\n  resendFilesButton: {\r\n    marginTop: \"5px\",\r\n    marginBottom: \"5px\",\r\n    backgroundColor: \"#3792ad\",\r\n    \"&:hover\": {\r\n      background: \"#2f798f\",\r\n      color: \"#fff\",\r\n    },\r\n    textDecoration: \"none !important\",\r\n    padding: \"10px\",\r\n    paddingLeft: \"50px\",\r\n    paddingRight: \"50px\",\r\n  },\r\n\r\n  cancelButton: {\r\n    marginBottom: \"10px\",\r\n    textDecoration: \"none !important\",\r\n    padding: \"10px\",\r\n    paddingLeft: \"90px\",\r\n    paddingRight: \"90px\",\r\n  },\r\n\r\n  CalendarIcon: {\r\n    color: theme.palette.primary.main,\r\n  },\r\n\r\n  DateTimeLabel: {\r\n    fontWeight: \"500\",\r\n    color: theme.palette.primary.main,\r\n  },\r\n\r\n  backdrop: {\r\n    zIndex: theme.zIndex.drawer + 5,\r\n    color: \"#fff\",\r\n  },\r\n\r\n  PriceLabelPaid: {\r\n    color: theme.palette.primary.main,\r\n    fontWeight: \"600\",\r\n  },\r\n\r\n  PriceLabelNotPaid: {\r\n    color: theme.palette.secondary.main,\r\n    fontWeight: \"600\",\r\n  },\r\n}));\r\n\r\nconst Packages = [\r\n  { packageName: \"Sexual Health Clinic - Bronze\" },\r\n  { packageName: `Sexual Health Clinic - Silver` },\r\n  { packageName: `Sexual Health Clinic - Gold` },\r\n  { packageName: `Sexual Health Clinic - Platinium` },\r\n  { packageName: `BLOOD SAMPLE AND URINE` },\r\n  { packageName: `BLOOD SAMPLE AND URINE OR SWAB` },\r\n  { packageName: `Indivisual Tests` },\r\n  { packageName: `Combo STD Checks` },\r\n];\r\n\r\nconst IndivisualTests = [\r\n  \"HIV TESTING\",\r\n  \"CHLAMYDIA TESTING\",\r\n  \"SYPHILIS BLOOD TESTING\",\r\n  \"HERPES TESTING\",\r\n  \"GONORRHOEA TESTING\",\r\n  \"HEPATITIS A PROFILE TESTING\",\r\n  \"HEPATITIS B PROFILE TESTING\",\r\n  \"HEPATITIS C ANTIBODIES TESTING\",\r\n  \"HPV TESTING\",\r\n  \"BACTERIAL SWAB TESTING\",\r\n];\r\n\r\nconst comboSTDChecks = [\r\n  \"CHLAMYDIA, GONORRHOEA AND TRICHOMONAS\",\r\n  \"HIV I & II WITH SYPHILIS\",\r\n];\r\n\r\nfunction NumberFormatCustom(props) {\r\n  const { inputRef, onChange, ...other } = props;\r\n\r\n  return (\r\n    <NumberFormat\r\n      {...other}\r\n      getInputRef={inputRef}\r\n      onValueChange={(values) => {\r\n        onChange({\r\n          target: {\r\n            name: props.name,\r\n            value: values.value,\r\n          },\r\n        });\r\n      }}\r\n      thousandSeparator\r\n      isNumericString\r\n      prefix=\"\"\r\n    />\r\n  );\r\n}\r\n\r\nNumberFormatCustom.propTypes = {\r\n  inputRef: PropTypes.func.isRequired,\r\n  name: PropTypes.string.isRequired,\r\n  onChange: PropTypes.func.isRequired,\r\n};\r\n\r\nconst BorderLinearProgress = withStyles((theme) => ({\r\n  root: {\r\n    height: 10,\r\n    borderRadius: 5,\r\n  },\r\n  colorPrimary: {\r\n    backgroundColor: \"#cedbce\", //theme.palette.grey[theme.palette.type === 'light' ? 200 : 700],\r\n  },\r\n  bar: {\r\n    borderRadius: 5,\r\n    backgroundColor: \"#2f942e\",\r\n  },\r\n}))(LinearProgress);\r\nfunction LinearProgressWithLabel(props) {\r\n  return (\r\n    <Box display=\"flex\" alignItems=\"center\">\r\n      <Box width=\"100%\" mr={1}>\r\n        <BorderLinearProgress variant=\"determinate\" {...props} />\r\n      </Box>\r\n      <Box minWidth={35}>\r\n        <Typography\r\n          style={{ fontWeight: \"800\", color: \"#5e855e\" }}\r\n          variant=\"body2\"\r\n          color=\"textSecondary\"\r\n        >{`${Math.round(props.value)}%`}</Typography>\r\n      </Box>\r\n    </Box>\r\n  );\r\n}\r\n\r\nLinearProgressWithLabel.propTypes = {\r\n  /**\r\n   * The value of the progress indicator for the determinate and buffer variants.\r\n   * Value between 0 and 100.\r\n   */\r\n  value: PropTypes.number.isRequired,\r\n};\r\n\r\nfunction PaperComponent(props) {\r\n  return (\r\n    <Draggable\r\n      handle=\"#draggable-dialog-title\"\r\n      cancel={'[class*=\"MuiDialogContent-root\"]'}\r\n    >\r\n      <Paper {...props} />\r\n    </Draggable>\r\n  );\r\n}\r\n\r\nexport default function NewBookingDialog(props) {\r\n  const classes = useStyles();\r\n\r\n  const [state, setState] = React.useContext(GlobalState);\r\n  const [saving, setSaving] = useState(false);\r\n\r\n  const [fullname, setFullname] = React.useState(\"\");\r\n  const [fullnameError, setFullnameError] = React.useState(false);\r\n\r\n  const [phone, setPhone] = React.useState(\"\");\r\n  const [email, setEmail] = React.useState(\"\");\r\n  const [service, setService] = React.useState(\"\");\r\n  const [serviceError, setServiceError] = React.useState(false);\r\n\r\n  const [notes, setNotes] = React.useState(\"\");\r\n\r\n  const [indivisualArray, setIndivisualArray] = React.useState([]);\r\n  const [comboArray, setComboArray] = React.useState([]);\r\n\r\n  const fullnameChanged = (event) => {\r\n    setFullname(event.target.value);\r\n    setFullnameError(false);\r\n  };\r\n\r\n  const phoneChanged = (event) => {\r\n    setPhone(event.target.value);\r\n  };\r\n\r\n  const emailChanged = (event) => {\r\n    setEmail(event.target.value);\r\n  };\r\n\r\n  const serviceChanged = (event) => {\r\n    setService(event.target.value);\r\n    setServiceError(false)\r\n  };\r\n\r\n  const notesChanged = (event) => {\r\n    setNotes(event.target.value);\r\n  };\r\n\r\n  const handleClose = () => {\r\n    if (saving) return;\r\n\r\n    setFullname(\"\");\r\n    setFullnameError(false);\r\n    setPhone(\"\");\r\n    setEmail(\"\");\r\n    setService(\"\");\r\n    setServiceError(false)\r\n    setNotes(\"\");\r\n    setIndivisualArray([]);\r\n    setComboArray([]);\r\n\r\n    props.handleClose();\r\n    setSaving(false);\r\n  };\r\n\r\n  const validateBooking = () => {\r\n    let error = false;\r\n    if (!fullname || fullname.trim().length < 1) {\r\n      setFullnameError(true);\r\n      error = true;\r\n    }\r\n\r\n    if (!service || service.trim().length < 1)\r\n    {\r\n      setServiceError(true)\r\n      error = true\r\n    }\r\n\r\n    if (service === 'Indivisual Tests' && indivisualArray.length === 0)\r\n    {\r\n      setServiceError(true)\r\n      error = true\r\n    }\r\n\r\n    if (service === 'Combo STD Checks' && comboArray.length === 0)\r\n    {\r\n      setServiceError(true)\r\n      error = true\r\n    }\r\n\r\n    return !error;\r\n  };\r\n\r\n  const saveClicked = async () => {\r\n    if (!validateBooking()) {\r\n      return;\r\n    }\r\n\r\n    setSaving(true);\r\n\r\n    let packageName = service;\r\n    if (service === \"Indivisual Tests\") {\r\n      let temp = \"\";\r\n      indivisualArray.forEach((item, index) => {\r\n        temp += item;\r\n        if (index < indivisualArray.length - 1) {\r\n          temp += \" - \";\r\n        }\r\n      });\r\n      packageName = `Indivisual Tests : ( ${temp} )`;\r\n    } else if (service === \"Combo STD Checks\") {\r\n      let temp = \"\";\r\n      comboArray.forEach((item, index) => {\r\n        temp += item;\r\n        if (index < comboArray.length - 1) {\r\n          temp += \" - \";\r\n        }\r\n      });\r\n      packageName = `Combo STD Checks : ( ${temp} )`;\r\n    }\r\n\r\n    try {\r\n      await BookService.addNewBooking({\r\n        bookingDate: props.date,\r\n        bookingTime: props.time,\r\n        fullname: fullname,\r\n        phone: phone,\r\n        email: email,\r\n        packageName: packageName,\r\n        notes: notes,\r\n      });\r\n      setSaving(false);\r\n      setState((state) => ({\r\n        ...state,\r\n        bookingDialogDataChanged: !state.bookingDialogDataChanged\r\n          ? true\r\n          : false,\r\n      }));\r\n      handleClose();\r\n    } catch (err) {\r\n      console.error(err);\r\n      setSaving(false);\r\n    }\r\n  };\r\n\r\n  const IndivisualTestsChanged = (event, item) => {\r\n    const checked = event.target.checked;\r\n\r\n    if (checked) {\r\n      setServiceError(false)\r\n      if (indivisualArray.findIndex((e) => e === item) < 0)\r\n        setIndivisualArray([...indivisualArray, item]);\r\n    } else {\r\n      setIndivisualArray(indivisualArray.filter((e) => e !== item));\r\n    }\r\n\r\n    setServiceError(false)\r\n  };\r\n\r\n  const comboSTDChecksChanged = (event, item) => {\r\n    const checked = event.target.checked;\r\n\r\n    if (checked) {\r\n      setServiceError(false)\r\n      if (comboArray.findIndex((e) => e === item) < 0)\r\n        setComboArray([...comboArray, item]);\r\n    } else {\r\n      setComboArray(comboArray.filter((e) => e !== item));\r\n    }\r\n  };\r\n\r\n  return (\r\n    <React.Fragment>\r\n      {props.date && props.time && (\r\n        <React.Fragment>\r\n          <Dialog\r\n            maxWidth=\"md\"\r\n            open={props.open}\r\n            onClose={handleClose}\r\n            PaperComponent={PaperComponent}\r\n            aria-labelledby=\"form-dialog-title\"\r\n          >\r\n            <DialogTitle id=\"draggable-dialog-title\">\r\n              <Grid\r\n                container\r\n                spacing={2}\r\n                direction=\"row\"\r\n                justify=\"center\"\r\n                alignItems=\"center\"\r\n              >\r\n                <Grid item>\r\n                  <AddIcon style={{ color: \"#f50057\", fontSize: \"3rem\" }} />\r\n                </Grid>\r\n\r\n                <Grid item>\r\n                  <div\r\n                    style={{\r\n                      color: \"#f50057\",\r\n                      paddingBottom: \"10px\",\r\n                      fontWeight: \"800\",\r\n                    }}\r\n                  >\r\n                    {\" \"}\r\n                    ADD New Booking{\" \"}\r\n                  </div>\r\n                </Grid>\r\n              </Grid>\r\n\r\n              <div style={{position:\"absolute\", top: \"5px\", right: \"5px\", backgroundColor:CalendarColors.STD_COLOR, color:\"#fff\", padding: \"0px 5px\", borderRadius:\"10px\", fontSize:\"1rem\"}}>\r\n                    STD\r\n              </div>\r\n\r\n\r\n              <Divider />\r\n            </DialogTitle>\r\n            <DialogContent>\r\n              <div\r\n                style={{\r\n                  height: \"600px\",\r\n                }}\r\n              >\r\n                <Grid\r\n                  container\r\n                  direction=\"row\"\r\n                  justify=\"stretch\"\r\n                  spacing={2}\r\n                  alignItems=\"center\"\r\n                >\r\n                  <Grid item xs={12}>\r\n                    <Grid\r\n                      container\r\n                      direction=\"row\"\r\n                      justify=\"center\"\r\n                      alignItems=\"center\"\r\n                      spacing={1}\r\n                    >\r\n                      <Grid item>\r\n                        <DateRangeIcon className={classes.CalendarIcon} />\r\n                      </Grid>\r\n                      <Grid item>\r\n                        <span className={classes.DateTimeLabel}>\r\n                          {props.date} , {props.time}\r\n                        </span>\r\n                      </Grid>\r\n                    </Grid>\r\n                  </Grid>\r\n\r\n                  <Grid item xs={12}>\r\n                    <TextField\r\n                      fullWidth\r\n                      autoFocus\r\n                      error={fullnameError}\r\n                      label=\"Full Name\"\r\n                      value={fullname}\r\n                      required\r\n                      onChange={fullnameChanged}\r\n                      name=\"fullname\"\r\n                      id=\"fullname-id\"\r\n                      autoComplete=\"none\"\r\n                    />\r\n                  </Grid>\r\n\r\n                  <Grid item xs={12}>\r\n                    <TextField\r\n                      fullWidth\r\n                      label=\"Telephone\"\r\n                      value={phone}\r\n                      onChange={phoneChanged}\r\n                      name=\"phone\"\r\n                      id=\"phone-id\"\r\n                      autoComplete=\"none\"\r\n                    />\r\n                  </Grid>\r\n\r\n                  <Grid item xs={12}>\r\n                    <TextField\r\n                      fullWidth\r\n                      label=\"Email\"\r\n                      value={email}\r\n                      onChange={emailChanged}\r\n                      name=\"email\"\r\n                      id=\"email-id\"\r\n                      autoComplete=\"none\"\r\n                    />\r\n                  </Grid>\r\n\r\n                  <Grid item xs={12} md={12}>\r\n                    <FormControl className={classes.formControl} fullWidth required error={serviceError}>\r\n                      <InputLabel id=\"service-label-id\">Package</InputLabel>\r\n                      <Select\r\n                        fullWidth\r\n                        labelId=\"service-label-id\"\r\n                        id=\"service-id\"\r\n                        value={service}\r\n                        onChange={serviceChanged}\r\n                      >\r\n                        {Packages.map((item) => (\r\n                          <MenuItem value={item.packageName}>\r\n                            {item.packageName}\r\n                          </MenuItem>\r\n                        ))}\r\n                      </Select>\r\n                    </FormControl>\r\n                  </Grid>\r\n\r\n                  {service === \"Indivisual Tests\" && (\r\n                    <Grid item xs={12}>\r\n                      {IndivisualTests.map((item) => (\r\n                        <FormControlLabel\r\n                          control={\r\n                            <Checkbox\r\n                              checked={\r\n                                indivisualArray.findIndex((e) => e === item) >=\r\n                                0\r\n                              }\r\n                              onChange={(event) =>\r\n                                IndivisualTestsChanged(event, item)\r\n                              }\r\n                              name={item}\r\n                            />\r\n                          }\r\n                          label={item}\r\n                        />\r\n                      ))}\r\n                    </Grid>\r\n                  )}\r\n\r\n                  {service === \"Combo STD Checks\" && (\r\n                    <Grid item xs={12}>\r\n                      {comboSTDChecks.map((item) => (\r\n                        <FormControlLabel\r\n                          control={\r\n                            <Checkbox\r\n                              checked={\r\n                                comboArray.findIndex((e) => e === item) >= 0\r\n                              }\r\n                              onChange={(event) =>\r\n                                comboSTDChecksChanged(event, item)\r\n                              }\r\n                              name={item}\r\n                            />\r\n                          }\r\n                          label={item}\r\n                        />\r\n                      ))}\r\n                    </Grid>\r\n                  )}\r\n\r\n                  <Grid item xs={12}>\r\n                    <TextField\r\n                      fullWidth\r\n                      label=\"Notes\"\r\n                      value={notes}\r\n                      onChange={notesChanged}\r\n                      name=\"notes\"\r\n                      id=\"notes-id\"\r\n                      autoComplete=\"none\"\r\n                    />\r\n                  </Grid>\r\n                </Grid>\r\n\r\n                <div\r\n                  style={{\r\n                    position: \"absolute\",\r\n                    bottom: \"20px\",\r\n                    right: \"20px\",\r\n                  }}\r\n                >\r\n                  <Grid\r\n                    container\r\n                    direction=\"row\"\r\n                    justify=\"flex-end\"\r\n                    alignItems=\"center\"\r\n                    spacing={1}\r\n                  >\r\n                    <Grid item>\r\n                      <Button\r\n                        onClick={handleClose}\r\n                        style={{ width: \"100px\" }}\r\n                        disabled={saving}\r\n                      >\r\n                        back\r\n                      </Button>\r\n                    </Grid>\r\n                    <Grid item>\r\n                      <Button\r\n                        onClick={saveClicked}\r\n                        variant=\"contained\"\r\n                        color=\"secondary\"\r\n                        style={{ width: \"100px\" }}\r\n                        disabled={saving}\r\n                      >\r\n                        Save\r\n                      </Button>\r\n                    </Grid>\r\n                  </Grid>\r\n                </div>\r\n              </div>\r\n\r\n              <Backdrop className={classes.backdrop} open={saving}>\r\n                <CircularProgress color=\"inherit\" />\r\n              </Backdrop>\r\n            </DialogContent>\r\n          </Dialog>\r\n        </React.Fragment>\r\n      )}\r\n    </React.Fragment>\r\n  );\r\n}\r\n","import React, { useEffect, useState } from 'react';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport PropTypes from 'prop-types';\r\nimport dateformat from 'dateformat';\r\nimport BookService from '../services/BookService';\r\n\r\nimport CircularProgress from '@material-ui/core/CircularProgress';\r\nimport GlobalState from '../../GlobalState';\r\nimport BookingDialog from '../BookingDialog';\r\nimport NewBookingDialog from '../NewBookingDialog';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n\r\n    Container: {\r\n        width: \"100%\",\r\n        height : \"50px\",\r\n        position: \"relative\",\r\n        backgroundColor: \"#fff\",\r\n        display: \"flex\",\r\n        alignItems : \"flex-start\",\r\n        justifyItems: \"flex-start\",\r\n        paddingLeft : \"10px\"\r\n\r\n    },\r\n\r\n    ContainerPast: {\r\n        width: \"100%\",\r\n        paddingTop: \"50px\",\r\n        position: \"relative\",\r\n        backgroundColor: \"#fafafa\"\r\n    },\r\n    \r\n    DayLabel: {\r\n        position: \"absolute\",\r\n        top: \"5px\",\r\n        right: \"5px\",\r\n        color: \"#555\",\r\n        fontSize: \"1rem\"\r\n    },\r\n\r\n    DayLabelDisabled: {\r\n        position: \"absolute\",\r\n        top: \"5px\",\r\n        right: \"5px\",\r\n        color: \"#ddd\",\r\n        fontSize: \"1rem\"\r\n    },\r\n\r\n    LoadingProgress: {\r\n        position: \"absolute\",\r\n        top: \"10%\",\r\n        left: \"40%\",\r\n      },\r\n\r\n      BookingCountGauge: {\r\n        position: \"absolute\",\r\n        bottom: \"5%\",\r\n        left: \"8%\",\r\n        width : \"85%\",\r\n        height: \"8%\"\r\n    },\r\n\r\n    bookingBoxNew: {\r\n        display: \"flex\",\r\n        marginRight: \"10px\",\r\n        marginTop: \"5px\",\r\n        padding: \"10px\",\r\n        maxWidth: \"150px\",\r\n        overflowX: \"hidden\",\r\n        border: \"1px solid #ddd\",\r\n        color: \"#ccc\",\r\n        fontSize: \"12px\",\r\n        fontWeight: \"500\",\r\n        cursor: \"pointer\",\r\n        backgroundColor: \"#fff\",\r\n    \r\n        boxShadow: \"2px 4px #fafafa\",\r\n        transition: \"all 0.5s ease\",\r\n        borderRadius: \"4px\",\r\n    \r\n        \"&:hover\": {\r\n          background: \"#fff\",\r\n          color: theme.palette.secondary.main,\r\n          borderColor:  theme.palette.secondary.main,\r\n        },\r\n      },\r\n\r\n    bookingBox: {\r\n        display: \"flex\",\r\n        marginRight: \"10px\",\r\n        marginTop: \"5px\",\r\n        padding: \"10px\",\r\n        maxWidth : \"150px\",\r\n        overflowX: \"hidden\",\r\n        border : \"1px solid #eee\",\r\n        fontSize: \"12px\",\r\n        fontWeight : \"500\",\r\n        cursor: \"pointer\",\r\n        backgroundColor: \"#ebedf7\",\r\n        color: \"#3f51b5\",\r\n        boxShadow: \"2px 4px #fafafa\",\r\n\r\n        \"&:hover\": {\r\n            background: \"#3f51b5\",\r\n            color: \"#ebedf7\"\r\n          },\r\n    },\r\n\r\n    bookingBoxSampleTaken: {\r\n        display: \"flex\",\r\n        marginRight: \"10px\",\r\n        marginTop: \"5px\",\r\n        padding: \"10px\",\r\n        maxWidth : \"150px\",\r\n        overflowX: \"hidden\",\r\n        border : \"1px solid #eee\",\r\n        fontSize: \"12px\",\r\n        fontWeight : \"500\",\r\n        cursor: \"pointer\",\r\n        backgroundColor: \"#0066cc\",\r\n        color: \"#eee\",\r\n        boxShadow: \"2px 4px #fafafa\",\r\n\r\n        \"&:hover\": {\r\n            background: \"#0059b3\",\r\n            color: \"#fafafa\"\r\n          },\r\n    },\r\n\r\n    bookingBoxPositive: {\r\n        display: \"flex\",\r\n        marginRight: \"10px\",\r\n        marginTop: \"5px\",\r\n        padding: \"10px\",\r\n        maxWidth : \"150px\",\r\n        overflowX: \"hidden\",\r\n        border : \"1px solid #eee\",\r\n        fontSize: \"12px\",\r\n        fontWeight : \"500\",\r\n        cursor: \"pointer\",\r\n        backgroundColor: \"#d40b0b\",\r\n        color: \"#fff2f2\",\r\n        boxShadow: \"2px 4px #fafafa\",\r\n\r\n        \"&:hover\": {\r\n            background: \"#bf0000\",\r\n            color: \"#fff\"\r\n          },\r\n    },\r\n\r\n    bookingBoxReportSent: {\r\n        display: \"flex\",\r\n        marginRight: \"10px\",\r\n        marginTop: \"5px\",\r\n        padding: \"10px\",\r\n        maxWidth : \"150px\",\r\n        overflowX: \"hidden\",\r\n        border : \"1px solid #eee\",\r\n        fontSize: \"12px\",\r\n        fontWeight : \"500\",\r\n        cursor: \"pointer\",\r\n        backgroundColor: \"#009900\",\r\n        color: \"#eee\",\r\n        boxShadow: \"2px 4px #fafafa\",\r\n\r\n        \"&:hover\": {\r\n            background: \"#006e00\",\r\n            color: \"#fafafa\"\r\n          },\r\n    },\r\n\r\n  \r\n\r\n  }));\r\n\r\n\r\n\r\nconst DayViewCell = ({key, date, time}) => {\r\n    const classes = useStyles();\r\n\r\n    const [state, setState] = React.useContext(GlobalState);\r\n    const [bookings, setBookings] = React.useState(null);\r\n    const [filteredBookings, setFilteredBookings] = React.useState(null);\r\n    const [selectedBooking, setSelectedBooking] = React.useState(null);\r\n\r\n    const [refresh, setRefresh] = React.useState(true); \r\n\r\n    const [isPast, setIsPast] = React.useState(false);\r\n\r\n    const [openDialog, setOpenDialog] = React.useState(false);\r\n\r\n    const [openDialogAddNew, setOpenDialogAddNew] = React.useState(false);\r\n\r\n\r\n\r\n    useEffect( () => {\r\n        const todayStr = dateformat(new Date(), 'yyyy-mm-dd');\r\n        setIsPast(date < todayStr);\r\n\r\n    }, [date]);\r\n\r\n    useEffect( () => \r\n    {\r\n        if (bookings) {\r\n\r\n\r\n            if (state.dayViewCalFilter && state.dayViewCalFilter.trim().length > 0)\r\n            {\r\n                const search = state.dayViewCalFilter.trim().toUpperCase();\r\n                setFilteredBookings( bookings.filter(booking => booking.fullname.toLowerCase().indexOf(search.toLowerCase()) >= 0\r\n                                                          \r\n                    \r\n                    ));\r\n            }\r\n            else\r\n            {\r\n                setFilteredBookings([...bookings]);\r\n            }\r\n        }\r\n\r\n    }, [state.dayViewCalFilter, bookings]);\r\n \r\n\r\n\r\n    useEffect ( () => {\r\n       \r\n        const fetchData = async () =>\r\n        {\r\n            if (!date || date.length <= 0 || !time || time.length <= 0)\r\n            {\r\n                return;\r\n            }\r\n         \r\n            // if (isPast)\r\n            // {\r\n            //     setBookings([]);\r\n            //     return;\r\n            // }\r\n    \r\n            setBookings(null);\r\n    \r\n            var res = state.AdminCalendarCache?.find(record => record.method === 'getBookingsByDateStrandTime' && record.query === `${date}${time}`)?.res;\r\n            if (!res || openDialog || openDialogAddNew)\r\n            {\r\n                res = await BookService.getAllBookingsByDateStrandTime(date, time);\r\n                setState(state => ({...state, AdminCalendarCache : [...state.AdminCalendarCache, {method: 'getBookingsByDateStrandTime' , query : `${date}${time}`, res: res}]}));\r\n            }\r\n          \r\n          \r\n            if (res.data.status === 'OK')\r\n            {\r\n                setBookings(res.data.bookings);\r\n            }   \r\n        }\r\n\r\n        if (openDialog || openDialogAddNew)\r\n        {\r\n            setState(state => ({...state, AdminCalendarCache : state.AdminCalendarCache.filter(record => !(record.method === 'getBookingsByDateStrandTime' && record.query ===  `${date}${time}`))}));\r\n            setState(state => ({...state, AdminCalendarCache : state.AdminCalendarCache.filter(record => !(record.method === 'getBookingsCountByDateStrandTime' && record.query ===  `${date}${time}`))}));\r\n            setState(state => ({...state, AdminCalendarCache : state.AdminCalendarCache.filter(record => !(record.method === 'getBookingsCountByDateStr' && record.query ===  date))}));\r\n        }\r\n\r\n         fetchData();\r\n     \r\n    }, [date, time, state.bookingDialogDataChanged]);\r\n\r\n    const bookingCliked = (event, booking) =>\r\n    {\r\n        setSelectedBooking(booking);\r\n        setOpenDialog(true);\r\n    }\r\n\r\n    \r\n\r\n    const getBookingClass = (status) =>\r\n    {\r\n        switch (status) {\r\n\r\n            case 'patient_attended':\r\n                return classes.bookingBoxSampleTaken;\r\n            default : \r\n                return classes.bookingBox;\r\n        }\r\n    }\r\n\r\n    const addNewBookingClicked = () =>\r\n    {\r\n        setOpenDialogAddNew(true)\r\n    }\r\n\r\n    const getBookingsBox = (_bookings) =>\r\n    {\r\n        if (_bookings === null) \r\n        {\r\n            return (\r\n                <div className={classes.LoadingProgress}>\r\n                      <CircularProgress disableShrink  />\r\n                </div>\r\n            );  \r\n        }\r\n        else if (_bookings.length >= 0)\r\n        {\r\n           return (\r\n            <React.Fragment>\r\n            {_bookings.map((booking) => (\r\n              <div\r\n                style={booking.tr ? { borderTop: \"5px solid #d00fd6\" } : {}}\r\n                className={getBookingClass(booking.status)}\r\n                onClick={(event) => bookingCliked(event, booking)}\r\n              >\r\n                {`${booking.fullname}`.substring(0, 15)}\r\n              </div>\r\n            ))}\r\n  \r\n            <div className={classes.bookingBoxNew} onClick={addNewBookingClicked}> + Add New Booking</div>\r\n          </React.Fragment>\r\n           );\r\n        }\r\n    }\r\n\r\n\r\n    const handleCloseDialog = () =>\r\n    {\r\n        setOpenDialog(false);\r\n    }\r\n\r\n    const handleCloseDialogAddNew = () => {\r\n        setOpenDialogAddNew(false);\r\n      };\r\n\r\n    return (\r\n        <React.Fragment>\r\n\r\n            <div className={classes.Container}>\r\n\r\n              {getBookingsBox(filteredBookings)}\r\n\r\n            </div>\r\n\r\n            <BookingDialog\r\n                booking={selectedBooking}\r\n                open={openDialog}\r\n                onClose={handleCloseDialog}\r\n            />\r\n\r\n        <NewBookingDialog\r\n        date={date}\r\n        time={time}\r\n        open={openDialogAddNew}\r\n        handleClose={handleCloseDialogAddNew}\r\n        />\r\n\r\n        </React.Fragment>\r\n\r\n\r\n    );\r\n}\r\n\r\nDayViewCell.propTypes = {\r\n    key: PropTypes.string.isRequired,\r\n    date: PropTypes.string.isRequired,\r\n    time: PropTypes.string.isRequired,\r\n  };\r\n\r\n \r\n  \r\nexport default DayViewCell;","import React, { useEffect, useState } from 'react';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport PropTypes from 'prop-types';\r\nimport DayViewCell from './DayViewCell';\r\nimport dateformat from 'dateformat';\r\n\r\n\r\n\r\n\r\nconst rows = [\r\n    '09:00 AM',\r\n    '09:15 AM', \r\n    '09:30 AM', \r\n    '09:45 AM',\r\n    '10:00 AM',\r\n    '10:15 AM',\r\n    '10:30 AM',\r\n    '10:45 AM',\r\n    '11:00 AM',\r\n    '11:15 AM',\r\n    '11:30 AM',\r\n    '11:45 AM',\r\n    '12:00 PM',\r\n    '12:15 PM',\r\n    '12:30 PM',\r\n    '12:45 PM',\r\n    '01:00 PM',\r\n    '01:15 PM',\r\n    '01:30 PM',\r\n    '01:45 PM',\r\n    '02:00 PM',\r\n    '02:15 PM',\r\n    '02:30 PM',\r\n    '02:45 PM',\r\n    '03:00 PM',\r\n    '03:15 PM',\r\n    '03:30 PM',\r\n    '03:45 PM',\r\n    '04:00 PM',\r\n    '04:15 PM',\r\n    '04:30 PM',\r\n    '04:45 PM',\r\n    '05:00 PM',\r\n    '05:15 PM',\r\n    '05:30 PM',\r\n    '05:45 PM',\r\n];\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n\r\n    table: {\r\n        width: \"100%\",\r\n        border: \"1px solid #ddd\",\r\n        borderCollapse: \"collapse\",\r\n        overflowY: \"auto\"\r\n    },\r\n\r\n    th: {\r\n        border: \"1px solid #ddd\",\r\n        borderCollapse: \"collapse\",\r\n        verticalAlign: \"middle\",\r\n        fontcolor: \"#555\",\r\n        fontWeight: \"400\",\r\n        fontSize: \"15px\",\r\n        paddingTop: \"5px\",\r\n        paddingBottom: \"5px\",\r\n        width: \"12%\", \r\n    },\r\n\r\n    td: {\r\n        border: \"1px solid #ddd\",\r\n        borderCollapse: \"collapse\",\r\n        verticalAlign: \"middle\",\r\n        height : \"50px\",\r\n        width: \"84%\", \r\n    },\r\n\r\n    titleLabel: {\r\n        paddingBottom: \"17px\",\r\n        paddingTop: \"17px\",\r\n        color: \"#777\",\r\n        fontSize: \"16px\"\r\n    },\r\n\r\n    titleLabelToday: {\r\n        paddingBottom: \"17px\",\r\n        paddingTop: \"17px\",\r\n        color: \"#fff\",\r\n        backgroundColor: \"#1a73e8\",\r\n        fontSize: \"16px\"\r\n    },\r\n\r\n  }));\r\n\r\nconst DayView = ({date}) => {\r\n    const classes = useStyles();\r\n\r\n    return (\r\n        <React.Fragment>\r\n\r\n        <div style={{overflowY: \"scroll\" , height: \"60px\"}}>\r\n            <table className={classes.table}>\r\n                <thead>\r\n                    <tr>\r\n                        <th style={{width: \"7%\"}}>\r\n                        \r\n                        </th>\r\n                        <th style={{width: \"84%\"}}>\r\n                                <div className={(dateformat(new Date(),'yyyy-mm-dd') === dateformat(date, 'yyyy-mm-dd')) ? classes.titleLabelToday : classes.titleLabel }>\r\n                                        {dateformat(date,'dddd')}\r\n                                </div>                                \r\n                        </th>\r\n                    </tr>\r\n                </thead>\r\n             </table>\r\n\r\n        </div>\r\n\r\n            <div style={{overflowY: \"scroll\" , height: \"70vh\"}}>\r\n                <table className={classes.table}>   \r\n                    <tbody>\r\n                        {rows.map(row => (\r\n                            <tr>\r\n                                <td style={{width: \"7%\"}}>\r\n                                    {row}\r\n                                </td>\r\n                               \r\n                                <td className={classes.td}>\r\n                                     <DayViewCell key={`${dateformat(date,'yyyy-mm-dd')}-${row}`} date={dateformat(date,'yyyy-mm-dd')} time={row}/>  \r\n                                </td>\r\n                            \r\n                            </tr>\r\n                        ))}            \r\n                    </tbody>\r\n                </table>\r\n            </div>                    \r\n      \r\n        </React.Fragment>\r\n\r\n\r\n    );\r\n}\r\n\r\nDayView.propTypes = {\r\n    date: PropTypes.any.isRequired\r\n  };\r\n\r\n\r\nexport default DayView;","import React, { useEffect, useState } from 'react';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport MonthView from './MonthView';\r\nimport { Button, Grid, IconButton, InputAdornment, TextField, Tooltip } from '@material-ui/core';\r\nimport ToggleButton from '@material-ui/lab/ToggleButton';\r\nimport ToggleButtonGroup from '@material-ui/lab/ToggleButtonGroup';\r\n\r\nimport NavigateBeforeIcon from '@material-ui/icons/NavigateBefore';\r\nimport NavigateNextIcon from '@material-ui/icons/NavigateNext';\r\nimport WeekView from './WeekView';\r\nimport dateformat from 'dateformat';\r\nimport DayView from './DayView';\r\nimport GlobalState from '../../GlobalState';\r\n\r\nimport CloseIcon from '@material-ui/icons/Close';\r\n\r\n\r\n\r\nconst monthNames = [\"January\", \"February\", \"March\", \"April\", \"May\", \"June\",\r\n  \"July\", \"August\", \"September\", \"October\", \"November\", \"December\"\r\n];\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n\r\n    title: {\r\n        textAlign: \"center\",\r\n        fontSize: \"24px\",\r\n        fontColor: \"#333\"\r\n    },\r\n\r\n  }));\r\n\r\nexport default function CalendarView() {\r\n    const classes = useStyles();\r\n\r\n    const [state, setState] = React.useContext(GlobalState);\r\n\r\n    const [month, setMonth] = React.useState(new Date().getMonth() + 1);\r\n    const [year, setYear] = React.useState(new Date().getFullYear());\r\n\r\n    const [day, setDay] = React.useState(new Date());\r\n\r\n    const [firstDayofWeek, setFirstDayofWeek] = React.useState(new Date());\r\n\r\n    const [weekDates, setWeekDates] = React.useState([]);\r\n\r\n    const [mode, setMode] = React.useState('month');\r\n    const [selectedTab, setSeletedTab] = React.useState('month');\r\n\r\n    const [filter,setFilter] = React.useState('');\r\n\r\n    const filterChanged = (event) =>{\r\n        setFilter(event.target.value);\r\n        setState(state => ({...state, dayViewCalFilter : event.target.value?.trim()?.toUpperCase()}))\r\n      }\r\n\r\n      const removeFilter = () =>\r\n      {\r\n        setFilter('');\r\n        setState(state => ({...state, dayViewCalFilter : ''}));\r\n      }\r\n\r\n\r\n    useEffect( () => {\r\n        const today = new Date();\r\n        const dayofWeek = today.getDay();\r\n        const firstdayofweek = new Date(today.getTime() - ( dayofWeek * 86400000));\r\n        setFirstDayofWeek(firstdayofweek);\r\n        setState(state => ({...state, AdminCalendarCache : []}));\r\n\r\n        return () =>\r\n        {\r\n            setState(state => ({...state, AdminCalendarCache : []}));\r\n            removeFilter();\r\n        }\r\n       \r\n    }, []);\r\n\r\n\r\n    useEffect( () => {\r\n        const dates = [];\r\n        for (var i = 0; i < 7 ; i++)\r\n        {\r\n            dates.push(new Date(firstDayofWeek.getTime() + ( i * 86400000)));\r\n        }\r\n        setWeekDates(dates);\r\n\r\n    }, [firstDayofWeek]);\r\n\r\n    const handlePrevButton = (event) =>\r\n    {\r\n       if (mode === 'month')\r\n       {\r\n            if (month === 1)\r\n            {\r\n                setYear(year - 1);\r\n            } \r\n\r\n            const newMonth = month === 1 ? 12 : month - 1;\r\n            setMonth(newMonth);\r\n\r\n            const newDay = new Date(year, newMonth - 1 , 1, 0 ,0 ,0 ,0);\r\n            setDay(newDay);\r\n\r\n            const dayofWeek = newDay.getDay();\r\n            setFirstDayofWeek(new Date(newDay.getTime() - ( dayofWeek * 86400000)));\r\n\r\n       } \r\n       else if (mode === 'week')\r\n       {\r\n           const newFirstDayofWeek = new Date(firstDayofWeek.getTime() - ( 7 * 86400000));\r\n           setFirstDayofWeek(newFirstDayofWeek);\r\n\r\n           setDay(newFirstDayofWeek);\r\n           setMonth(newFirstDayofWeek.getMonth() + 1);\r\n           setYear(newFirstDayofWeek.getFullYear());\r\n\r\n       }\r\n       else if (mode === 'day')\r\n       {\r\n           const newDay = new Date(day.getTime() - ( 1 * 86400000));\r\n           setDay(newDay);\r\n\r\n           const dayofWeek = newDay.getDay();\r\n           setFirstDayofWeek(new Date(newDay.getTime() - ( dayofWeek * 86400000)));\r\n\r\n           setMonth(newDay.getMonth() + 1);\r\n           setYear(newDay.getFullYear());\r\n       }\r\n    }\r\n\r\n    const handleNextButton = (event) =>\r\n    {\r\n        if (mode === 'month')\r\n        {\r\n            if (month === 12)\r\n            {\r\n                setYear(year + 1);\r\n            } \r\n       \r\n            const newMonth = month === 12 ? 1 : month + 1;\r\n            setMonth(newMonth);\r\n\r\n            const newDay = new Date(year, newMonth - 1 , 1, 0 ,0 ,0 ,0);\r\n            setDay(newDay);\r\n\r\n            const dayofWeek = newDay.getDay();\r\n            setFirstDayofWeek(new Date(newDay.getTime() - ( dayofWeek * 86400000)));\r\n        }\r\n        else if (mode === 'week')\r\n        {\r\n            const newFirstDayofWeek = new Date(firstDayofWeek.getTime() + ( 7 * 86400000));\r\n            setFirstDayofWeek(newFirstDayofWeek);\r\n\r\n            setDay(newFirstDayofWeek);\r\n            setMonth(newFirstDayofWeek.getMonth() + 1);\r\n            setYear(newFirstDayofWeek.getFullYear());\r\n\r\n        }\r\n        else if (mode === 'day')\r\n        {\r\n            const newDay = new Date(day.getTime() + ( 1 * 86400000));\r\n            setDay(newDay);\r\n\r\n            const dayofWeek = newDay.getDay();\r\n            setFirstDayofWeek(new Date(newDay.getTime() - ( dayofWeek * 86400000)));\r\n \r\n            setMonth(newDay.getMonth() + 1);\r\n            setYear(newDay.getFullYear());\r\n        }\r\n    }\r\n\r\n    const goToday = (event) => {\r\n        const newDay = new Date();\r\n        const dayofWeek = newDay.getDay();\r\n        setFirstDayofWeek(new Date(newDay.getTime() - ( dayofWeek * 86400000)));\r\n        setDay(newDay);\r\n        setMonth(newDay.getMonth() + 1);\r\n        setYear(newDay.getFullYear());\r\n    }\r\n\r\n    const dayClicked = (event, date) =>\r\n    {\r\n        const newDay = new Date(date);\r\n        const dayofWeek = newDay.getDay();\r\n        setFirstDayofWeek(new Date(newDay.getTime() - ( dayofWeek * 86400000)));\r\n        setDay(newDay);\r\n        setMonth(newDay.getMonth() + 1);\r\n        setYear(newDay.getFullYear());\r\n        setSeletedTab('day');\r\n        setMode('day');\r\n    }\r\n\r\n    const getContentFromMode = (_mode) => {\r\n        if (_mode === 'month')\r\n        {\r\n            return (\r\n                <MonthView dayClicked={dayClicked} month={month} year={year}/>    \r\n            );\r\n        }    \r\n        else if (_mode === 'week')\r\n        {\r\n            return (\r\n                    <WeekView dayClicked={dayClicked} dates={weekDates}/>\r\n            );\r\n            \r\n        }\r\n        else if (_mode === 'day')\r\n        {\r\n            return (\r\n                <DayView date={day}/>\r\n            );\r\n        }\r\n    }\r\n\r\n    const getCalendarTitleFromMode = (_mode) => {\r\n        if (_mode === 'month')\r\n        {\r\n            return (\r\n                <span className={classes.title}> {`${monthNames[month - 1]} ${year}`} </span>   \r\n            );\r\n        }    \r\n        else if (_mode === 'week')\r\n        {\r\n            const endOfWeek = new Date(firstDayofWeek.getTime() + ( 6 * 86400000));\r\n            let endofWeekStr = '';\r\n            if (endOfWeek.getMonth() === firstDayofWeek.getMonth())\r\n            {\r\n                endofWeekStr = dateformat(endOfWeek,'d');\r\n            }else\r\n            {\r\n                endofWeekStr = dateformat(endOfWeek,'mmm d');\r\n            }\r\n\r\n            return (\r\n                <span className={classes.title}> {`${dateformat(firstDayofWeek,'mmm d')} - ${endofWeekStr}, ${year}`} </span>\r\n            );\r\n            \r\n        }\r\n        else if (_mode === 'day')\r\n        {\r\n            return (\r\n                <span className={classes.title}> {`${dateformat(day,'mmmm d, yyyy')}`} </span>\r\n            );\r\n        }\r\n    }\r\n\r\n\r\n    const handleTabChanged = (event, value) => {\r\n        if (value && value.length)\r\n        {\r\n          setSeletedTab(value);\r\n          setMode(value);\r\n        }\r\n    };\r\n\r\n    const getPrevButtonTitle = (_mode) =>\r\n    {\r\n        return `Previuos ${mode}`;\r\n    }\r\n\r\n    const getNextButtonTitle = (_mode) =>\r\n    {\r\n        return `Next ${mode}`;\r\n    }\r\n\r\n    return (\r\n        <React.Fragment>\r\n\r\n          <Grid\r\n            container\r\n            direction=\"row\"\r\n            justify=\"space-between\"\r\n            alignItems=\"center\"\r\n            style= {{marginBottom: \"10px\", marginTop: \"0px\"}}\r\n            >  \r\n\r\n            <Grid item md={3}>\r\n                <div  style={{display:\"flex\", alignItems: \"flex-start\", justifyContent: \"flex-start\" , paddingLeft: \"10px\"}}>\r\n                    <Tooltip title={getPrevButtonTitle(mode)} placement=\"bottom-start\">\r\n                        <IconButton \r\n                                color=\"default\" \r\n                                aria-label=\"prev\"\r\n                                onClick = {handlePrevButton}\r\n                                >\r\n                            <NavigateBeforeIcon style={{fontSize: '2rem'}}/>\r\n                        </IconButton>\r\n                    </Tooltip>\r\n\r\n                    <Tooltip title={getNextButtonTitle(mode)} placement=\"bottom-end\">\r\n                        <IconButton \r\n                                color=\"default\" \r\n                                aria-label=\"next\"\r\n                                onClick = {handleNextButton}\r\n                                >\r\n                            <NavigateNextIcon style={{fontSize: '2rem'}}/>\r\n                        </IconButton>\r\n                    </Tooltip>\r\n\r\n                    <Button style={{marginTop: \"11px\", marginLeft: \"10px\"}} onClick={goToday} variant=\"outlined\"> Today </Button>\r\n                </div>\r\n\r\n            </Grid>\r\n\r\n            <Grid item md={6}>\r\n\r\n                    <Grid\r\n                        container\r\n                        direction=\"row\"\r\n                        justify=\"center\"\r\n                        alignItems=\"flex-end\"\r\n                        spacing = {3}\r\n                        >\r\n                            <Grid item>\r\n                                    {getCalendarTitleFromMode(mode)}\r\n                            </Grid>\r\n                            {mode === 'day' && (\r\n                                        <Grid item>\r\n                                                <TextField\r\n                                                    variant=\"standard\"\r\n                                                    style={{marginBottom : \"5px\"}}\r\n                                                    value={filter}\r\n                                                    onChange={filterChanged}\r\n                                                    margin=\"normal\"\r\n                                                    size=\"small\"\r\n                                                    id=\"filter\"\r\n                                                    label=\"Filter\"\r\n                                                    name=\"filter\"\r\n                                                    autoComplete=\"off\"\r\n                                                    InputProps={{\r\n                                                        endAdornment : \r\n                                                            <InputAdornment position=\"end\">\r\n                                                                <Tooltip title=\"Clear\">\r\n                                                                            <IconButton\r\n                                                                            aria-label=\"remove filter\"\r\n                                                                            onClick={() => removeFilter()}\r\n                                                                            onMouseDown={() => removeFilter()}\r\n                                                                        >\r\n                                                                            <CloseIcon/>\r\n                                                                        </IconButton>\r\n                                                                </Tooltip>\r\n                                                            \r\n                                                            </InputAdornment>\r\n                                                          \r\n                                                    }}\r\n                                                   \r\n                                                />\r\n                                        </Grid>\r\n                            )}\r\n                           \r\n                    </Grid>\r\n                \r\n            </Grid>\r\n\r\n            <Grid item md={3}>\r\n                <div  style={{display:\"flex\", alignItems: \"flex-end\", justifyContent: \"flex-end\", paddingRight: \"10px\" }}>\r\n                    <ToggleButtonGroup\r\n                        value={selectedTab}\r\n                        exclusive\r\n                        onChange={handleTabChanged}\r\n                        aria-label=\"select view mode\"\r\n                    >\r\n                        <ToggleButton style={selectedTab === 'month' ? {width: \"80px\", color: \"#3f51b5\", backgroundColor: \"#ebedf7\" } : {width: \"80px\"}} value=\"month\" aria-label=\"month view\">\r\n                                month\r\n                        </ToggleButton>\r\n                        <ToggleButton style={selectedTab === 'week' ? {width: \"80px\", color: \"#3f51b5\", backgroundColor: \"#ebedf7\"} : {width: \"80px\"}}  value=\"week\" aria-label=\"week view\">\r\n                                week\r\n                        </ToggleButton>\r\n                        <ToggleButton style={selectedTab === 'day' ? {width: \"80px\", color: \"#3f51b5\", backgroundColor: \"#ebedf7\"} : {width: \"80px\"}} value=\"day\" aria-label=\"day view\">\r\n                                day\r\n                        </ToggleButton>\r\n                    </ToggleButtonGroup>\r\n                </div>\r\n            </Grid>\r\n\r\n           </Grid> \r\n\r\n             {getContentFromMode(mode)}\r\n\r\n        </React.Fragment>\r\n\r\n\r\n    );\r\n\r\n}","import axios from 'axios';\r\nimport { authToken, backendAPI } from '../../GlobalPath';\r\n\r\nexport default axios.create({\r\n  baseURL: backendAPI,\r\n  headers : {\r\n      'Authorization' : authToken,\r\n       'Content-Type': 'application/json',\r\n  }\r\n});","import API from './api';\r\nimport axiosRetry from 'axios-retry';\r\n\r\nexport default class BookService {\r\n\r\n\r\n   static addNewBooking = (payload) =>\r\n   {\r\n      return API.post(`/api/optimalvision/book/addnewbooking`, payload);\r\n   }\r\n\r\n\r\n   static sendRegFormEmail = (bookingId) =>\r\n   {\r\n      return API.post(`/api/optimalvision/book/sendregformemail?id=${bookingId}`);\r\n   }\r\n   static payBooking = (bookingId,price, paymentMethod, corporate) =>\r\n   {\r\n      return API.post(`/api/optimalvision/book/paybooking?id=${bookingId}&paymentmethod=${paymentMethod}&corporate=${corporate}&price=${price}`);\r\n   }\r\n\r\n   static unPayBooking = (bookingId) =>\r\n   {\r\n      return API.post(`/api/optimalvision/book/unpaybooking?id=${bookingId}`);\r\n   }\r\n\r\n   static getShouldRefundsCount = () =>\r\n   {\r\n      return API.get(`/api/optimalvision/book/getshouldrefundscount?`);\r\n   }\r\n\r\n   \r\n\r\n   static refundBooking = (bookingId) =>\r\n   {\r\n      return API.post(`/api/optimalvision/payment/refundpayment`, {bookingId: bookingId});\r\n   }\r\n\r\n   static getBookingsStatsByDateStr = (dateStr) =>\r\n   {\r\n      return API.get(`/api/optimalvision/book/getbookingsstatsbydatestr?date=${dateStr}`);\r\n   }\r\n\r\n   static getBookingsCountByDateStr = (dateStr) =>\r\n   {\r\n      return API.get(`/api/optimalvision/book/getbookingscountbydatestr?date=${dateStr}`);\r\n   }\r\n\r\n   static getAllBookingsCountAll = () =>\r\n   {\r\n      return API.get(`/api/optimalvision/book/getallbookingscountall`);\r\n   }\r\n\r\n   static getBookingsCountByDateStrandTime = (dateStr, time, source) =>\r\n   {\r\n      return API.get(`/api/optimalvision/book/getbookingscountbydatestrandtime?date=${dateStr}&time=${time}`, {cancelToken: source.token});\r\n   }\r\n\r\n   static getBookingsByDateStrandTime = (dateStr, time) =>\r\n   {\r\n      return API.get(`/api/optimalvision/book/getbookingsbydatestrandtime?date=${dateStr}&time=${time}`);\r\n   }\r\n\r\n\r\n   static getAllBookingsCountByDateStr = (dateStr) =>\r\n   {\r\n      return API.get(`/api/optimalvision/book/getallbookingscountbydatestr?date=${dateStr}`);\r\n   }\r\n\r\n   static getAllBookingsCountByDateStrandTime = (dateStr, time, source) =>\r\n   {\r\n      return API.get(`/api/optimalvision/book/getallbookingscountbydatestrandtime?date=${dateStr}&time=${time}`, {cancelToken: source.token});\r\n   }\r\n\r\n   static getAllBookingsByDateStrandTime = (dateStr, time) =>\r\n   {\r\n      return API.get(`/api/optimalvision/book/getallbookingsbydatestrandtime?date=${dateStr}&time=${time}`);\r\n   }\r\n\r\n   static changeBackToBookingMade = (id) =>\r\n   {\r\n      return API.post(`/api/optimalvision/book/changebacktobookingmade?id=${id}`);\r\n   }\r\n\r\n   static changeToPatientAttended = (id) =>\r\n   {\r\n      return API.post(`/api/optimalvision/book/changetopatientattended?id=${id}`);\r\n   }\r\n\r\n   static updateBooking = (payload) =>\r\n   {\r\n      return API.post(`/api/optimalvision/book/updatebookappointment`, payload);\r\n   } \r\n\r\n   static updateBookingTime = (payload) =>\r\n   {\r\n      return API.post(`/api/optimalvision/book/updatebookappointmenttime`, payload);\r\n   } \r\n\r\n   static deleteBooking = (id) =>\r\n   {\r\n      return API.post(`/api/optimalvision/book/deletebookappointment?id=${id}`);\r\n   } \r\n\r\n   static unDeleteBooking = (id) =>\r\n   {\r\n      return API.post(`/api/optimalvision/book/undeletebookappointment?id=${id}`);\r\n   } \r\n   \r\n    static getBookingsByRef = (ref) =>\r\n    {\r\n       return API.get(`/api/optimalvision/book/getbookingsbyref?ref=${ref}`);\r\n    }\r\n\r\n    static getBookingById = (id) =>\r\n    {\r\n       return API.get(`/api/optimalvision/book/getbookingbyid?id=${id}`);\r\n    }\r\n\r\n    static getAllBookings = (limit) =>\r\n    {\r\n      if (!limit) limit = 25 \r\n      return API.get(`/api/optimalvision/book/getallbookings?limit=${limit}`);\r\n    }\r\n\r\n    static getDeletedBookings= (limit) =>\r\n    {\r\n      if (!limit) limit = 25 \r\n       return API.get(`/api/optimalvision/book/getdeletedbookings?limit=${limit}`);\r\n    }\r\n\r\n    static getTodayBookings= () =>\r\n    {\r\n       return API.get(`/api/optimalvision/book/gettodaybookings`);\r\n    }\r\n\r\n    static getOldBookings= (limit) =>\r\n    {\r\n      if (!limit) limit = 25 \r\n       return API.get(`/api/optimalvision/book/getoldbookings?limit=${limit}`);\r\n    }\r\n\r\n    static getFutureBookings= (limit) =>\r\n    {\r\n      if (!limit) limit = 25 \r\n       return API.get(`/api/optimalvision/book/getfuturebookings?limit=${limit}`);\r\n    }\r\n\r\n    static getRecentBookings= () =>\r\n    {\r\n       return API.get(`/api/optimalvision/book/getrecentbookings`);\r\n    }\r\n\r\n    static getRecentBookingsAll= (limit) =>\r\n    {\r\n      if (!limit) limit = 25 \r\n       return API.get(`/api/optimalvision/book/getrecentbookingsall?limit=${limit}`);\r\n    }\r\n}","import API from './api';\r\n\r\nexport default class PDFService {\r\n\r\n\r\n    static downloadGPRegForm = (id) =>\r\n    {\r\n       return API.get(`/api/pdf/downloadgpregform?id=${id}`, {\r\n        responseType: 'arraybuffer',\r\n        id: id,\r\n        headers: {\r\n            Accept: 'application/pdf',\r\n        }\r\n        });\r\n    }\r\n\r\n\r\n\r\n}","export const corporates = [\r\n    'Visa Medical'\r\n]","import React, { useEffect, useRef, useState } from \"react\";\r\nimport BookService from \"./services/BookService\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport {\r\n  Backdrop,\r\n  Button,\r\n  Checkbox,\r\n  CircularProgress,\r\n  Divider,\r\n  FormControlLabel,\r\n  Grid,\r\n  InputAdornment,\r\n  InputLabel,\r\n  Link,\r\n  makeStyles,\r\n  MenuItem,\r\n  Select,\r\n  TextField,\r\n  Tooltip,\r\n} from \"@material-ui/core\";\r\nimport GlobalState from \"../GlobalState\";\r\nimport { withStyles } from \"@material-ui/core/styles\";\r\n\r\nimport CreditCardIcon from \"@material-ui/icons/CreditCard\";\r\n\r\nimport Dialog from \"@material-ui/core/Dialog\";\r\nimport DialogContent from \"@material-ui/core/DialogContent\";\r\n\r\nimport DialogTitle from \"@material-ui/core/DialogTitle\";\r\nimport Draggable from \"react-draggable\";\r\nimport Paper from \"@material-ui/core/Paper\";\r\n\r\nimport Alert from \"@material-ui/lab/Alert\";\r\n\r\nimport PropTypes from \"prop-types\";\r\nimport LinearProgress from \"@material-ui/core/LinearProgress\";\r\nimport Box from \"@material-ui/core/Box\";\r\n\r\nimport Radio from \"@material-ui/core/Radio\";\r\nimport RadioGroup from \"@material-ui/core/RadioGroup\";\r\nimport FormControl from \"@material-ui/core/FormControl\";\r\nimport FormLabel from \"@material-ui/core/FormLabel\";\r\nimport { corporates } from \"./Corporates\";\r\nimport NumberFormat from \"react-number-format\";\r\n\r\n\r\nvar interval;\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  title: {\r\n    marginTop: theme.spacing(0),\r\n    marginBottom: theme.spacing(1),\r\n  },\r\n\r\n  refreshButton: {\r\n    marginLeft: theme.spacing(2),\r\n  },\r\n\r\n  checkIcon: {\r\n    color: \"green\",\r\n  },\r\n\r\n  closeIcon: {\r\n    color: \"red\",\r\n  },\r\n\r\n  RefLink: {\r\n    cursor: \"pointer\",\r\n  },\r\n\r\n  BookedLabel: {\r\n    backgroundColor: \"#606060\",\r\n    color: \"#fff\",\r\n    paddingRight: \"10px\",\r\n    paddingLeft: \"10px\",\r\n  },\r\n\r\n  PatientAttendedLabel: {\r\n    backgroundColor: \"#0066aa\",\r\n    color: \"#fff\",\r\n    paddingRight: \"15px\",\r\n    paddingLeft: \"10px\",\r\n  },\r\n\r\n  SampleTakenLabel: {\r\n    backgroundColor: \"#0066cc\",\r\n    color: \"#fff\",\r\n    paddingRight: \"40px\",\r\n    paddingLeft: \"10px\",\r\n  },\r\n\r\n  ReportSentLabel: {\r\n    backgroundColor: \"#009900\",\r\n    color: \"#fff\",\r\n    paddingRight: \"90px\",\r\n    paddingLeft: \"10px\",\r\n  },\r\n\r\n  ReportCertSentLabel: {\r\n    backgroundColor: \"#009900\",\r\n    color: \"#fff\",\r\n    paddingRight: \"68px\",\r\n    paddingLeft: \"10px\",\r\n  },\r\n\r\n  archiveButton: {},\r\n\r\n  smartMatchButton: {\r\n    backgroundColor: \"#2f942e\",\r\n    \"&:hover\": {\r\n      background: \"green\",\r\n      color: \"#fff\",\r\n    },\r\n    textDecoration: \"none !important\",\r\n    marginRight: \"10px\",\r\n    // padding: \"10px\"\r\n  },\r\n\r\n  infoTitle: {\r\n    fontWeight: \"400\",\r\n  },\r\n\r\n  infoData: {\r\n    paddingLeft: \"10px\",\r\n    fontWeight: \"800\",\r\n  },\r\n\r\n  matchButton: {\r\n    marginTop: \"30px\",\r\n    marginBottom: \"20px\",\r\n    backgroundColor: \"#2f942e\",\r\n    \"&:hover\": {\r\n      background: \"green\",\r\n      color: \"#fff\",\r\n    },\r\n    textDecoration: \"none !important\",\r\n    padding: \"10px\",\r\n    paddingLeft: \"50px\",\r\n    paddingRight: \"50px\",\r\n  },\r\n\r\n  resendButton: {\r\n    marginTop: \"5px\",\r\n    marginBottom: \"5px\",\r\n    backgroundColor: \"#2f942e\",\r\n    \"&:hover\": {\r\n      background: \"green\",\r\n      color: \"#fff\",\r\n    },\r\n    textDecoration: \"none !important\",\r\n    padding: \"10px\",\r\n    paddingLeft: \"50px\",\r\n    paddingRight: \"50px\",\r\n  },\r\n\r\n  resendFilesButton: {\r\n    marginTop: \"5px\",\r\n    marginBottom: \"5px\",\r\n    backgroundColor: \"#3792ad\",\r\n    \"&:hover\": {\r\n      background: \"#2f798f\",\r\n      color: \"#fff\",\r\n    },\r\n    textDecoration: \"none !important\",\r\n    padding: \"10px\",\r\n    paddingLeft: \"50px\",\r\n    paddingRight: \"50px\",\r\n  },\r\n\r\n  cancelButton: {\r\n    marginBottom: \"10px\",\r\n    textDecoration: \"none !important\",\r\n    padding: \"10px\",\r\n    paddingLeft: \"90px\",\r\n    paddingRight: \"90px\",\r\n  },\r\n\r\n  backdrop: {\r\n    zIndex: theme.zIndex.drawer + 5,\r\n    color: \"#fff\",\r\n  },\r\n}));\r\n\r\nfunction NumberFormatCustom(props) {\r\n  const { inputRef, onChange, ...other } = props;\r\n\r\n  return (\r\n    <NumberFormat\r\n      {...other}\r\n      getInputRef={inputRef}\r\n      onValueChange={(values) => {\r\n        onChange({\r\n          target: {\r\n            name: props.name,\r\n            value: values.value,\r\n          },\r\n        });\r\n      }}\r\n      thousandSeparator\r\n      isNumericString\r\n      prefix=\"\"\r\n    />\r\n  );\r\n}\r\n\r\nNumberFormatCustom.propTypes = {\r\n  inputRef: PropTypes.func.isRequired,\r\n  name: PropTypes.string.isRequired,\r\n  onChange: PropTypes.func.isRequired,\r\n};\r\n\r\n\r\nconst BorderLinearProgress = withStyles((theme) => ({\r\n  root: {\r\n    height: 10,\r\n    borderRadius: 5,\r\n  },\r\n  colorPrimary: {\r\n    backgroundColor: \"#cedbce\", //theme.palette.grey[theme.palette.type === 'light' ? 200 : 700],\r\n  },\r\n  bar: {\r\n    borderRadius: 5,\r\n    backgroundColor: \"#2f942e\",\r\n  },\r\n}))(LinearProgress);\r\nfunction LinearProgressWithLabel(props) {\r\n  return (\r\n    <Box display=\"flex\" alignItems=\"center\">\r\n      <Box width=\"100%\" mr={1}>\r\n        <BorderLinearProgress variant=\"determinate\" {...props} />\r\n      </Box>\r\n      <Box minWidth={35}>\r\n        <Typography\r\n          style={{ fontWeight: \"800\", color: \"#5e855e\" }}\r\n          variant=\"body2\"\r\n          color=\"textSecondary\"\r\n        >{`${Math.round(props.value)}%`}</Typography>\r\n      </Box>\r\n    </Box>\r\n  );\r\n}\r\n\r\nLinearProgressWithLabel.propTypes = {\r\n  /**\r\n   * The value of the progress indicator for the determinate and buffer variants.\r\n   * Value between 0 and 100.\r\n   */\r\n  value: PropTypes.number.isRequired,\r\n};\r\n\r\nfunction PaperComponent(props) {\r\n  return (\r\n    <Draggable\r\n      handle=\"#draggable-dialog-title\"\r\n      cancel={'[class*=\"MuiDialogContent-root\"]'}\r\n    >\r\n      <Paper {...props} />\r\n    </Draggable>\r\n  );\r\n}\r\n\r\nexport default function PayDialog(props) {\r\n  const classes = useStyles();\r\n\r\n  const [state, setState] = React.useContext(GlobalState);\r\n  const [paymentMethod, setPaymentMethod] = useState(\"credit card\");\r\n  const [corporate, setCorporate] = useState(corporates[0]);\r\n  const [saving, setSaving] = useState(false);\r\n\r\n  const [price, setPrice] = useState(\"\");\r\n  const [priceError, setPriceError] = useState(false);\r\n\r\n  useEffect( () => {\r\n    if (props.price)\r\n    {\r\n      setPrice(`${props.price}`)\r\n    }else\r\n    {\r\n      setPrice('')\r\n    }\r\n  }, [props.price, props.open])\r\n\r\n\r\n  const priceChanged = (event) =>\r\n  {\r\n    setPrice(event.target.value)\r\n    setPriceError(false)\r\n  }\r\n\r\n  const paymentMethodChanged = (event) => {\r\n    setPaymentMethod(event.target.value);\r\n  };\r\n\r\n  const handleClose = () => {\r\n    if (saving) return;\r\n\r\n    props.handleClose();\r\n    setPaymentMethod(\"credit card\");\r\n    setPrice('')\r\n    setCorporate(corporates[0]);\r\n    setSaving(false);\r\n  };\r\n\r\n  const corporateChanged = (event) => {\r\n    setCorporate(event.target.value);\r\n  };\r\n\r\n  const payClicked = async () => {\r\n\r\n\r\n    if (!price || price.trim().length === 0 || price === '0')\r\n    {\r\n      setPriceError(true)\r\n      return\r\n    }\r\n\r\n    setSaving(true);\r\n\r\n  \r\n\r\n    try {\r\n      await BookService.payBooking(\r\n        props.booking._id,\r\n        price,\r\n        paymentMethod,\r\n        paymentMethod === \"corporate\" ? corporate : \"\"\r\n      );\r\n      setSaving(false);\r\n      setState((state) => ({\r\n        ...state,\r\n        bookingPayChanged: !state.bookingPayChanged ? true : false,\r\n      }));\r\n      handleClose();\r\n    } catch (err) {\r\n      console.error(err);\r\n      setSaving(false);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <React.Fragment>\r\n      {props.booking && (\r\n        <React.Fragment>\r\n          <Dialog\r\n            maxWidth=\"xs\"\r\n            open={props.open}\r\n            onClose={handleClose}\r\n            PaperComponent={PaperComponent}\r\n            aria-labelledby=\"form-dialog-title\"\r\n          >\r\n            <DialogTitle id=\"draggable-dialog-title\">\r\n              <Grid\r\n                container\r\n                spacing={2}\r\n                direction=\"row\"\r\n                justify=\"center\"\r\n                alignItems=\"center\"\r\n              >\r\n                <Grid item>\r\n                  <CreditCardIcon\r\n                    style={{ color: \"#f50057\", fontSize: \"3rem\" }}\r\n                  />\r\n                </Grid>\r\n\r\n                <Grid item>\r\n                  <div\r\n                    style={{\r\n                      color: \"#f50057\",\r\n                      paddingBottom: \"10px\",\r\n                      fontWeight: \"800\",\r\n                    }}\r\n                  >\r\n                    {\" \"}\r\n                    PAY the CHARGE{\" \"}\r\n                  </div>\r\n                </Grid>\r\n              </Grid>\r\n\r\n              <Divider />\r\n            </DialogTitle>\r\n            <DialogContent>\r\n              <div\r\n                style={{\r\n                  height: \"300px\",\r\n                }}\r\n              >\r\n                <Grid\r\n                  container\r\n                  direction=\"column\"\r\n                  justify=\"space-between\"\r\n                  spacing={2}\r\n                  alignItems=\"flex-start\"\r\n                >\r\n                  <Grid item>\r\n                  <TextField\r\n                                autoFocus\r\n                                error={priceError}\r\n                                label=\"TOTAL Charges\"\r\n                                value={price}\r\n                                fullWidth\r\n                                required\r\n                                onChange={priceChanged}\r\n                                name=\"product-price\"\r\n                                id=\"product-price-id\"\r\n                                InputProps={{\r\n                                  inputComponent: NumberFormatCustom,\r\n                                  startAdornment: (\r\n                                    <InputAdornment position=\"start\">\r\n                                      £\r\n                                    </InputAdornment>\r\n                                  ),\r\n                                }}\r\n                              />\r\n\r\n                  </Grid>\r\n\r\n                  <Grid item>\r\n                    <div style={{ fontSize: \"17px\" }}>\r\n                      {\" \"}\r\n                      How do you want to pay?{\" \"}\r\n                    </div>\r\n                  </Grid>\r\n\r\n                  <Grid item>\r\n                    <FormControl component=\"fieldset\">\r\n                      <RadioGroup\r\n                        aria-label=\"paymentMethod\"\r\n                        name=\"paymentMethod\"\r\n                        value={paymentMethod}\r\n                        onChange={paymentMethodChanged}\r\n                      >\r\n                        <FormControlLabel\r\n                          value=\"credit card\"\r\n                          control={<Radio />}\r\n                          label=\"Credit Card\"\r\n                        />\r\n                        <FormControlLabel\r\n                          value=\"cash\"\r\n                          control={<Radio />}\r\n                          label=\"Cash\"\r\n                        />\r\n                        <FormControlLabel\r\n                          value=\"corporate\"\r\n                          control={<Radio />}\r\n                          label=\"Corporate\"\r\n                        />\r\n                      </RadioGroup>\r\n\r\n                      {paymentMethod === \"corporate\" && (\r\n                        <FormControl\r\n                          style={{ marginTop: \"10px\" }}\r\n                          className={classes.formControl}\r\n                        >\r\n                          <Select\r\n                            labelId=\"select-corporate\"\r\n                            id=\"select-corporate-id\"\r\n                            value={corporate}\r\n                            onChange={corporateChanged}\r\n                          >\r\n                            {corporates.map((element) => (\r\n                              <MenuItem\r\n                                value={element}\r\n                              >{`${element}`}</MenuItem>\r\n                            ))}\r\n                          </Select>\r\n                        </FormControl>\r\n                      )}\r\n                    </FormControl>\r\n                  </Grid>\r\n                </Grid>\r\n\r\n                <Grid item></Grid>\r\n\r\n                <div\r\n                  style={{\r\n                    position: \"absolute\",\r\n                    bottom: \"20px\",\r\n                    right: \"20px\",\r\n                  }}\r\n                >\r\n                  <Grid\r\n                    container\r\n                    direction=\"row\"\r\n                    justify=\"flex-end\"\r\n                    alignItems=\"center\"\r\n                    spacing={1}\r\n                  >\r\n                    <Grid item>\r\n                      <Button\r\n                        onClick={handleClose}\r\n                        style={{ width: \"100px\" }}\r\n                        disabled={saving}\r\n                      >\r\n                        back\r\n                      </Button>\r\n                    </Grid>\r\n                    <Grid item>\r\n                      <Button\r\n                        onClick={payClicked}\r\n                        variant=\"contained\"\r\n                        color=\"secondary\"\r\n                        style={{ width: \"100px\" }}\r\n                        disabled={saving}\r\n                      >\r\n                        Pay\r\n                      </Button>\r\n                    </Grid>\r\n                  </Grid>\r\n                </div>\r\n              </div>\r\n\r\n              <Backdrop className={classes.backdrop} open={saving}>\r\n                <CircularProgress color=\"inherit\" />\r\n              </Backdrop>\r\n            </DialogContent>\r\n          </Dialog>\r\n        </React.Fragment>\r\n      )}\r\n    </React.Fragment>\r\n  );\r\n}\r\n","import React, { useEffect, useState } from \"react\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport GlobalState from \"../GlobalState\";\r\nimport Grid from \"@material-ui/core/Grid\";\r\nimport {\r\n  Button,\r\n  Checkbox,\r\n  DialogActions,\r\n  DialogContentText,\r\n  Divider,\r\n  FormControlLabel,\r\n  IconButton,\r\n  TextField,\r\n  Tooltip,\r\n} from \"@material-ui/core\";\r\nimport PDFService from \"./services/PDFService\";\r\n\r\nimport { calculatePrice } from \"./PriceCalculator\";\r\n\r\nimport bookingService from \"./services/BookService\";\r\nimport CheckIcon from \"@material-ui/icons/Check\";\r\nimport CloseIcon from \"@material-ui/icons/Close\";\r\n\r\nimport Dialog from \"@material-ui/core/Dialog\";\r\nimport DialogContent from \"@material-ui/core/DialogContent\";\r\nimport DialogTitle from \"@material-ui/core/DialogTitle\";\r\nimport Draggable from \"react-draggable\";\r\nimport Slide from \"@material-ui/core/Slide\";\r\n\r\nimport Paper from \"@material-ui/core/Paper\";\r\n\r\nimport DeleteIcon from \"@material-ui/icons/Delete\";\r\nimport BookService from \"./services/BookService\";\r\n\r\nimport Backdrop from \"@material-ui/core/Backdrop\";\r\nimport CircularProgress from \"@material-ui/core/CircularProgress\";\r\nimport {\r\n  FormatDateFromString,\r\n  RevertFormatDateFromString,\r\n} from \"./DateFormatter\";\r\nimport PayDialog from \"./PayDialog\";\r\n\r\nimport PrintIcon from \"@material-ui/icons/Print\";\r\nimport UndoIcon from \"@material-ui/icons/Undo\";\r\n\r\nimport SendIcon from \"@material-ui/icons/Send\";\r\n\r\nimport HistoryIcon from \"@material-ui/icons/History\";\r\n\r\nimport FileCopyOutlinedIcon from \"@material-ui/icons/FileCopyOutlined\";\r\nimport { CalendarColors } from \"../Admin/calendar-admin/colors\";\r\nimport InvoiceDialog from \"../InvoiceDialog\";\r\nimport InvoiceService from \"../services/InvoiceService\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  box: {\r\n    backgroundColor: \"#373737\",\r\n    color: \"#fff\",\r\n    padding: \"1px\",\r\n    borderRadius: \"4px\",\r\n    textAlign: \"justify\",\r\n    paddingRight: \"40px\",\r\n  },\r\n\r\n  boxRed: {\r\n    backgroundColor: \"#dc2626\",\r\n    color: \"#fff\",\r\n    padding: \"1px\",\r\n    borderRadius: \"4px\",\r\n    textAlign: \"justify\",\r\n    paddingRight: \"40px\",\r\n  },\r\n\r\n  boxInfo: {\r\n    textAlign: \"justify\",\r\n    backgroundColor: \"#fafafa\",\r\n    color: \"#333\",\r\n    padding: \"1px\",\r\n    borderRadius: \"4px\",\r\n    paddingRight: \"40px\",\r\n    border: \"1px solid #eee\",\r\n  },\r\n\r\n  ul: {\r\n    listStyle: \"none\",\r\n    padding: \"0\",\r\n    margin: \"0\",\r\n  },\r\n\r\n  li: {\r\n    marginBottom: \"15px\",\r\n  },\r\n\r\n  icon: {\r\n    marginRight: \"8px\",\r\n  },\r\n\r\n  root: {\r\n    width: \"100%\",\r\n  },\r\n\r\n  lineThrough: {\r\n    textDecoration: \"line-through\",\r\n  },\r\n\r\n  heading: {\r\n    fontSize: theme.typography.pxToRem(15),\r\n    flexBasis: \"33.33%\",\r\n    flexShrink: 0,\r\n    color: theme.palette.text.secondary,\r\n  },\r\n  secondaryHeading: {\r\n    fontSize: theme.typography.pxToRem(15),\r\n  },\r\n\r\n  infoDetails: {\r\n    textAlign: \"left\",\r\n  },\r\n\r\n  infoTitle: {\r\n    fontWeight: \"800\",\r\n    marginRight: \"10px\",\r\n    color: theme.palette.secondary.main,\r\n    fontSize: \"0.9rem\",\r\n  },\r\n\r\n  infoData: {\r\n    fontWeight: \"500\",\r\n    fontSize: \"1rem\",\r\n  },\r\n\r\n  title: {\r\n    textAlign: \"center\",\r\n    fontWeight: \"600\",\r\n    marginLeft: \"10px\",\r\n    marginBottom: \"5px\",\r\n  },\r\n\r\n  Accordion: {\r\n    backgroundColor: \"#f5f5f5\",\r\n    color: \"#222\",\r\n  },\r\n\r\n  AccordionDeleted: {\r\n    backgroundColor: \"#aaa\",\r\n    color: \"#555\",\r\n  },\r\n\r\n  DownloadForm: {\r\n    marginTop: \"10px\",\r\n    marginBottom: \"10px\",\r\n  },\r\n\r\n  infoDataCharges: {\r\n    fontSize: \"18px\",\r\n    color: \"green\",\r\n    fontWeight: \"600\",\r\n  },\r\n\r\n  infoDataChargesHigher: {\r\n    fontSize: \"18px\",\r\n    color: \"red\",\r\n    fontWeight: \"600\",\r\n  },\r\n  BookedLabel: {\r\n    color: \"#606060\",\r\n    paddingLeft: \"5px\",\r\n    paddingBottom: \"3px\",\r\n    paddingTop: \"3px\",\r\n    fontWeight: \"800\",\r\n    borderLeft: \"5px solid\",\r\n    borderColor: \"#606060\",\r\n    width: \"150px\",\r\n    display: \"inline-block\",\r\n  },\r\n\r\n  PatientAttendedLabel: {\r\n    color: \"#0066aa\",\r\n    paddingLeft: \"5px\",\r\n    paddingBottom: \"3px\",\r\n    paddingTop: \"3px\",\r\n    fontWeight: \"800\",\r\n    borderLeft: \"5px solid\",\r\n    borderColor: \"#0066aa\",\r\n    width: \"150px\",\r\n    display: \"inline-block\",\r\n  },\r\n\r\n  SampleTakenLabel: {\r\n    color: \"#0066cc\",\r\n    paddingRight: \"10px\",\r\n    paddingLeft: \"5px\",\r\n    paddingBottom: \"3px\",\r\n    paddingTop: \"3px\",\r\n    fontWeight: \"800\",\r\n    borderLeft: \"5px solid\",\r\n    borderColor: \"#0066cc\",\r\n  },\r\n\r\n  ReportSentLabel: {\r\n    color: \"#009900\",\r\n    paddingRight: \"10px\",\r\n    paddingLeft: \"5px\",\r\n    paddingBottom: \"3px\",\r\n    paddingTop: \"3px\",\r\n    fontWeight: \"800\",\r\n    borderLeft: \"5px solid\",\r\n    borderColor: \"#009900\",\r\n  },\r\n\r\n  ReportCertSentLabel: {\r\n    color: \"#009900\",\r\n    paddingRight: \"10px\",\r\n    paddingLeft: \"5px\",\r\n    paddingBottom: \"3px\",\r\n    paddingTop: \"3px\",\r\n    fontWeight: \"800\",\r\n    borderLeft: \"5px solid\",\r\n    borderColor: \"#009900\",\r\n  },\r\n\r\n  PositiveLabel: {\r\n    color: \"red\",\r\n    paddingRight: \"10px\",\r\n    paddingLeft: \"5px\",\r\n    paddingBottom: \"3px\",\r\n    paddingTop: \"3px\",\r\n    fontWeight: \"800\",\r\n    borderLeft: \"5px solid\",\r\n    borderColor: \"red\",\r\n  },\r\n\r\n  EditButton: {\r\n    marginBottom: \"20px\",\r\n    backgroundColor: \"#2f942e\",\r\n    \"&:hover\": {\r\n      background: \"green\",\r\n      color: \"#fff\",\r\n    },\r\n    textDecoration: \"none !important\",\r\n    padding: \"10px\",\r\n  },\r\n\r\n  ResendEmailsButton: {\r\n    // marginBottom : \"20px\",\r\n    color: \"#2f942e\",\r\n    borderColor: \"#2f942e\",\r\n    \"&:hover\": {\r\n      background: \"#fafffa\",\r\n      borderColor: \"#2f942e\",\r\n    },\r\n    textDecoration: \"none !important\",\r\n    paddingLeft: \"50px\",\r\n    paddingRight: \"50px\",\r\n  },\r\n\r\n  PayButton: {\r\n    marginLeft: \"70px\",\r\n    width: \"300px\",\r\n  },\r\n\r\n  printInvoiceButton: {\r\n    marginLeft: \"70px\",\r\n    fontSize: \"0.8rem\",\r\n    // width: \"300px\",\r\n  },\r\n\r\n  editInvoiceButton: {\r\n    marginLeft: \"10px\",\r\n    fontSize: \"0.8rem\",\r\n  },\r\n\r\n  PayLabel: {\r\n    marginLeft: \"20px\",\r\n\r\n    color: \"#2f942e\",\r\n    fontWeight: \"500\",\r\n    textAlign: \"center\",\r\n  },\r\n\r\n  RestoreButton: {\r\n    marginBottom: \"20px\",\r\n    backgroundColor: \"#eee\",\r\n    color: \"#333\",\r\n    \"&:hover\": {\r\n      background: \"#f1f1f1\",\r\n      color: \"#111\",\r\n    },\r\n    textDecoration: \"none !important\",\r\n    padding: \"10px\",\r\n  },\r\n\r\n  DeleteButton: {\r\n    marginBottom: \"20px\",\r\n    backgroundColor: \"#b80012\", \r\n    color: \"#fff\",\r\n    \"&:hover\": {\r\n      background: \"#d90015\",\r\n      color: \"#fff\",\r\n    },\r\n\r\n    padding: \"10px\",\r\n  },\r\n\r\n  SaveButton: {\r\n    marginBottom: \"10px\",\r\n    padding: \"10px\",\r\n    color: \"#fff\",\r\n\r\n    backgroundColor:  \"#bd0d50\",\r\n    \"&:hover\": {\r\n      background: \"#d1175e\",\r\n      color: \"#fff\",\r\n    },\r\n  },\r\n\r\n  CancelButton: {\r\n    marginBottom: \"20px\",\r\n    // padding: \"10px\"\r\n  },\r\n\r\n  TextBox: {\r\n    padding: \"0px\",\r\n  },\r\n\r\n  checkIcon: {\r\n    color: \"green\",\r\n  },\r\n\r\n  checkIconSmall: {\r\n    color: \"green\",\r\n    paddingTop: \"5px\",\r\n  },\r\n\r\n  closeIcon: {\r\n    color: \"red\",\r\n  },\r\n\r\n  centeredLabel: {\r\n    display: \"flex\",\r\n    alignItems: \"center\",\r\n  },\r\n\r\n  backdrop: {\r\n    zIndex: theme.zIndex.drawer + 5,\r\n    color: \"#fff\",\r\n  },\r\n\r\n  invoiceNumber: {\r\n    display: \"inline-block\",\r\n    fontWeight: \"500\",\r\n    width: \"72px\",\r\n    fontSize: \"1rem\",\r\n    color: theme.palette.primary.main,\r\n  },\r\n\r\n  dialogTitle: {\r\n    backgroundColor: theme.palette.secondary.main,\r\n    color: \"#fff\",\r\n  },\r\n}));\r\n\r\nconst Transition = React.forwardRef(function Transition(props, ref) {\r\n  return <Slide direction=\"up\" ref={ref} {...props} />;\r\n});\r\n\r\nfunction PaperComponent(props) {\r\n  return (\r\n    <Draggable\r\n      handle=\"#alert-dialog-slide-title\"\r\n      cancel={'[class*=\"MuiDialogContent-root\"]'}\r\n    >\r\n      <Paper {...props} />\r\n    </Draggable>\r\n  );\r\n}\r\n\r\nexport default function BookingDialog(props) {\r\n  const classes = useStyles();\r\n\r\n  const [state, setState] = React.useContext(GlobalState);\r\n\r\n  const [copied, setCopied] = useState(false);\r\n\r\n  const [emailSent, setEmailSent] = React.useState(false);\r\n  const [emailSentInvoice, setEmailSentInvoice] = React.useState(false);\r\n\r\n  const [openResendDialog, setOpenResendDialog] = React.useState(false);\r\n  const [openPayDialog, setOpenPayDialog] = React.useState(false);\r\n  const [openRefundDialog, setOpenRefundDialog] = React.useState(false);\r\n\r\n  const [openInvoiceDialog, setOpenInvoiceDialog] = React.useState(false);\r\n\r\n  const [selectedBooking, setSelectedBooking] = React.useState(null);\r\n\r\n  const [editMode, setEditMode] = React.useState({ edit: false, person: null });\r\n  const [deleteMode, setDeleteMode] = React.useState({\r\n    delete: false,\r\n    person: null,\r\n  });\r\n  const [restoreMode, setRestoreMode] = React.useState({\r\n    restore: false,\r\n    person: null,\r\n  });\r\n\r\n  const [saving, setSaving] = React.useState(false);\r\n  const [deleting, setDeleting] = React.useState(false);\r\n  const [restoring, setRestoring] = React.useState(false);\r\n\r\n  const [validationError, setValidationError] = React.useState({});\r\n\r\n  const [bookingDate, setBookingDate] = React.useState(\"\");\r\n  const [bookingTime, setBookingTime] = React.useState(\"\");\r\n\r\n  const [fullname, setFullname] = React.useState(\"\");\r\n  const [email, setEmail] = React.useState(\"\");\r\n  const [tel, setTel] = React.useState(\"\");\r\n  const [notes, setNotes] = React.useState(\"\");\r\n  const [service, setService] = React.useState(\"\");\r\n\r\n  const [refreshData, setRefreshData] = React.useState(false);\r\n\r\n  const [booking, setBooking] = React.useState(null);\r\n\r\n  const [recordChanged, setRecordChanged] = React.useState(false);\r\n\r\n  const [fieldChanged, setFieldChanged] = React.useState(false);\r\n\r\n  const [openUndoPayDialog, setOpenUndoPayDialog] = React.useState(false);\r\n\r\n  const [openTimeStampDialog, setOpenTimeStampDialog] = React.useState(false);\r\n\r\n  const [invoice, setInvoice] = React.useState(null);\r\n  const [invoiceLoaded, setInvoiceLoaded] = React.useState(false);\r\n\r\n  useEffect(() => {\r\n    if (!props.open) {\r\n      setTimeout(() => {\r\n        setEditMode({ edit: false, person: null });\r\n        setRecordChanged(false);\r\n      }, 500);\r\n    }\r\n  }, [props.open]);\r\n\r\n  const bookingDateChanged = (event) => {\r\n    setBookingDate(event.target.value);\r\n    setValidationError({ ...validationError, bookingDateError: false });\r\n    setFieldChanged(!fieldChanged);\r\n  };\r\n\r\n  const bookingTimeChanged = (event) => {\r\n    setBookingTime(event.target.value);\r\n    setValidationError({ ...validationError, bookingTimeError: false });\r\n    setFieldChanged(!fieldChanged);\r\n  };\r\n\r\n  const fullnameChanged = (event) => {\r\n    setFullname(event.target.value);\r\n    setFieldChanged(!fieldChanged);\r\n  };\r\n\r\n  const emailChanged = (event) => {\r\n    setEmail(event.target.value);\r\n    setFieldChanged(!fieldChanged);\r\n  };\r\n\r\n  const telChanged = (event) => {\r\n    setTel(event.target.value);\r\n    setFieldChanged(!fieldChanged);\r\n  };\r\n\r\n  const serviceChanged = (event) => {\r\n    setService(event.target.value);\r\n    setFieldChanged(!fieldChanged);\r\n  };\r\n\r\n  const notesChanged = (event) => {\r\n    setNotes(event.target.value);\r\n    setFieldChanged(!fieldChanged);\r\n  };\r\n\r\n  const getStatusLabel = (status) => {\r\n    if (status === \"booked\") {\r\n      return <div className={classes.BookedLabel}> Booking Made </div>;\r\n    } else if (status === \"patient_attended\") {\r\n      return (\r\n        <div className={classes.PatientAttendedLabel}> Patient Attended </div>\r\n      );\r\n    } else {\r\n      return \"Unknown\";\r\n    }\r\n  };\r\n\r\n  const handleEditModeChanged = (edit, person) => {\r\n    if (edit) {\r\n      setFullname(person.fullname);\r\n      setBookingDate(FormatDateFromString(person.bookingDate));\r\n      setBookingTime(person.bookingTime.toUpperCase());\r\n      setEmail(person.email);\r\n      setTel(person.phone);\r\n      if (person.notes) {\r\n        setNotes(person.notes);\r\n      }\r\n\r\n      setEditMode({ edit: edit, person: person });\r\n    } else if (!edit && !person) {\r\n      setEditMode({ edit: edit, person: person });\r\n      setRecordChanged(false);\r\n    } else if (!edit && person) {\r\n      const booking = {};\r\n      const bookingId = person._id;\r\n      booking.email = email;\r\n      booking.phone = tel;\r\n      booking.fullname = fullname;\r\n      booking.notes = notes;\r\n      booking.service = service;\r\n      booking.bookingDate = RevertFormatDateFromString(bookingDate);\r\n      booking.bookingTime = bookingTime;\r\n      booking.bookingRef = person.bookingRef;\r\n\r\n      if (validateBooking(booking)) {\r\n        updateBooking({ bookingId: bookingId, person: booking });\r\n      }\r\n    }\r\n  };\r\n\r\n  const validateDate = (str) => {\r\n    var error = false;\r\n    if (!str || str.length !== 10) {\r\n      error = true;\r\n    }\r\n\r\n    if (str.charAt(4) !== \"-\" || str.charAt(7) !== \"-\") {\r\n      error = true;\r\n    }\r\n\r\n    try {\r\n      const result = /^\\d{4}-\\d{2}-\\d{2}$/.test(str);\r\n      if (!result) {\r\n        error = true;\r\n      }\r\n\r\n      const year = parseInt(str.substr(0, 4));\r\n      const month = parseInt(str.substr(5, 2));\r\n      const day = parseInt(str.substr(8, 2));\r\n\r\n      if (year < 1900) {\r\n        error = true;\r\n      }\r\n\r\n      if (month < 1 || month > 12) {\r\n        error = true;\r\n      }\r\n\r\n      if (day > 31) {\r\n        error = true;\r\n      }\r\n    } catch (err) {\r\n      error = true;\r\n    }\r\n\r\n    return !error;\r\n  };\r\n\r\n  const validateTime = (str) => {\r\n    var error = false;\r\n\r\n    const result = /^\\d{2}:\\d{2} AM$|^\\d{2}:\\d{2} PM$/.test(str);\r\n    if (!result) {\r\n      error = true;\r\n    }\r\n\r\n    try {\r\n      const hour = parseInt(str.substr(0, 2));\r\n      const minute = parseInt(str.substr(3, 2));\r\n\r\n      if (hour < 0 || hour > 12) {\r\n        error = true;\r\n      }\r\n\r\n      if (minute < 0 || minute > 59) {\r\n        error = true;\r\n      }\r\n    } catch (err) {\r\n      error = true;\r\n    }\r\n\r\n    return !error;\r\n  };\r\n\r\n  const validateBooking = (booking) => {\r\n    var error = false;\r\n\r\n    if (!validateDate(booking.bookingDate)) {\r\n      error = true;\r\n      setValidationError({ ...validationError, bookingDateError: true });\r\n    }\r\n\r\n    if (!validateTime(booking.bookingTime)) {\r\n      error = true;\r\n      setValidationError({ ...validationError, bookingTimeError: true });\r\n    }\r\n    return !error;\r\n  };\r\n\r\n  const updateBooking = (payload) => {\r\n    setSaving(true);\r\n    bookingService\r\n      .updateBooking(payload)\r\n      .then((res) => {\r\n        setSaving(false);\r\n        setEditMode({ edit: false, person: null });\r\n        setRefreshData(!refreshData);\r\n      })\r\n      .catch((err) => {\r\n        setSaving(false);\r\n        setEditMode({ edit: false, person: null });\r\n        console.log(err);\r\n      });\r\n  };\r\n\r\n  const deleteBooking = (id) => {\r\n    setDeleting(true);\r\n    bookingService\r\n      .deleteBooking(id)\r\n      .then((res) => {\r\n        setDeleting(false);\r\n        setDeleteMode({ delete: false, person: null });\r\n        setRefreshData(!refreshData);\r\n      })\r\n      .catch((err) => {\r\n        setDeleting(false);\r\n        setDeleteMode({ delete: false, person: null });\r\n        console.log(err);\r\n      });\r\n  };\r\n\r\n  const restoreBooking = (id) => {\r\n    setRestoring(true);\r\n    bookingService\r\n      .unDeleteBooking(id)\r\n      .then((res) => {\r\n        setRestoring(false);\r\n        setRestoreMode({ restore: false, person: null });\r\n        setRefreshData(!refreshData);\r\n      })\r\n      .catch((err) => {\r\n        setRestoring(false);\r\n        setRestoreMode({ restore: false, person: null });\r\n        console.log(err);\r\n      });\r\n  };\r\n\r\n  const handleDeleteModeChanged = (del, person) => {\r\n    if (del) {\r\n      setDeleteMode({ delete: del, person: person });\r\n    } else if (!del && !person) {\r\n      setDeleteMode({ delete: del, person: person });\r\n    } else if (!del && person) {\r\n      deleteBooking(person._id);\r\n    }\r\n  };\r\n\r\n  const handleRestoreModeChanged = (restore, person) => {\r\n    if (restore) {\r\n      setRestoreMode({ restore: restore, person: person });\r\n    } else if (!restore && !person) {\r\n      setRestoreMode({ restore: restore, person: person });\r\n    } else if (!restore && person) {\r\n      restoreBooking(person._id);\r\n    }\r\n  };\r\n\r\n  const changeBackToBookingMade = (event, id) => {\r\n    setSaving(true);\r\n    BookService.changeBackToBookingMade(id)\r\n      .then((res) => {\r\n        setSaving(false);\r\n        setRefreshData(!refreshData);\r\n      })\r\n      .catch((err) => {\r\n        console.log(err);\r\n        setSaving(false);\r\n      });\r\n  };\r\n\r\n  const changeToPatientAttended = (event, id) => {\r\n    setSaving(true);\r\n    BookService.changeToPatientAttended(id)\r\n      .then((res) => {\r\n        setSaving(false);\r\n        setRefreshData(!refreshData);\r\n      })\r\n      .catch((err) => {\r\n        console.log(err);\r\n        setSaving(false);\r\n      });\r\n  };\r\n\r\n  const Pay = () => {\r\n    setSelectedBooking(booking);\r\n    setOpenPayDialog(true);\r\n  };\r\n\r\n  const OpenInvoiceDialog = () => {\r\n    setSelectedBooking(booking);\r\n    setInvoice(invoice);\r\n    setOpenInvoiceDialog(true);\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (props.booking) {\r\n      BookService.getBookingById(props.booking._id)\r\n        .then((res) => {\r\n          setBooking(res.data);\r\n        })\r\n        .catch((err) => {\r\n          console.log(err);\r\n        });\r\n\r\n      setState((state) => ({\r\n        ...state,\r\n        bookingDialogDataChanged: !state.bookingDialogDataChanged\r\n          ? true\r\n          : false,\r\n      }));\r\n    }\r\n  }, [refreshData, state.bookingPayChanged]);\r\n\r\n  useEffect(() => {\r\n    if (props.booking) {\r\n      setBooking(props.booking);\r\n    }\r\n  }, [props.booking]);\r\n\r\n  const undoPaymentClicked = async () => {\r\n    setSaving(true);\r\n    try {\r\n      await BookService.unPayBooking(booking._id);\r\n      setSaving(false);\r\n      setOpenUndoPayDialog(false);\r\n      setRefreshData(!refreshData);\r\n    } catch (err) {\r\n      console.error(err);\r\n      setSaving(false);\r\n      setOpenUndoPayDialog(false);\r\n    }\r\n  };\r\n\r\n  const refundPaymentClicked = async () => {\r\n    setSaving(true);\r\n    try {\r\n      await BookService.refundBooking(booking._id);\r\n      setSaving(false);\r\n      updateShouldRefundsCount();\r\n      setOpenRefundDialog(false);\r\n      setRefreshData(!refreshData);\r\n    } catch (err) {\r\n      console.error(err);\r\n      setSaving(false);\r\n      setOpenRefundDialog(false);\r\n    }\r\n  };\r\n\r\n  const updateShouldRefundsCount = async () => {\r\n    try {\r\n      const res = await BookService.getShouldRefundsCount();\r\n      if (res && res.data && res.data.status === \"OK\") {\r\n        setState((state) => ({ ...state, shouldRefunsCount: res.data.count }));\r\n      }\r\n    } catch (ex) {\r\n      console.error(ex);\r\n    }\r\n  };\r\n\r\n  const downloadRegForm = (id) => {\r\n    PDFService.downloadGPRegForm(id)\r\n      .then((res) => {\r\n        const file = new Blob([res.data], { type: \"application/pdf\" });\r\n\r\n        const fileURL = URL.createObjectURL(file);\r\n        window.open(fileURL, \"_blank\");\r\n      })\r\n      .catch((err) => {\r\n        console.log(err);\r\n      });\r\n  };\r\n\r\n  const downloadInvoice = (id) => {\r\n    InvoiceService.downloadInvoice(id)\r\n      .then((res) => {\r\n        const file = new Blob([res.data], { type: \"application/pdf\" });\r\n\r\n        const fileURL = URL.createObjectURL(file);\r\n        window.open(fileURL, \"_blank\");\r\n      })\r\n      .catch((err) => {\r\n        console.log(err);\r\n      });\r\n  };\r\n\r\n  const sendRegForm = (id) => {\r\n    setSaving(true);\r\n    setEmailSent(false);\r\n    BookService.sendRegFormEmail(id)\r\n      .then((res) => {\r\n        setSaving(false);\r\n        if (res.data.status === \"OK\") {\r\n          setEmailSent(true);\r\n        }\r\n      })\r\n      .catch((err) => {\r\n        console.log(err);\r\n        setSaving(false);\r\n      });\r\n  };\r\n\r\n  const sendInvoiceEmail = (id, _email) => {\r\n    setSaving(true);\r\n    setEmailSentInvoice(false);\r\n    InvoiceService.emailInvoice(id, _email)\r\n      .then((res) => {\r\n        setSaving(false);\r\n        if (res.data.status === \"OK\") {\r\n          setEmailSentInvoice(true);\r\n        }\r\n      })\r\n      .catch((err) => {\r\n        console.log(err);\r\n        setSaving(false);\r\n      });\r\n  };\r\n\r\n  const onClose = () => {\r\n    setEmailSent(false);\r\n    setEmailSentInvoice(false);\r\n    setInvoice(null);\r\n    props.onClose();\r\n  };\r\n\r\n  return (\r\n    <React.Fragment>\r\n      {booking && (\r\n        <React.Fragment>\r\n          <Dialog\r\n            maxWidth=\"xs\"\r\n            open={props.open}\r\n            TransitionComponent={Transition}\r\n            keepMounted\r\n            onClose={onClose}\r\n            PaperComponent={PaperComponent}\r\n            aria-labelledby=\"alert-dialog-slide-title\"\r\n            aria-describedby=\"alert-dialog-slide-description\"\r\n          >\r\n            <DialogTitle\r\n              id=\"alert-dialog-slide-title\"\r\n              className={classes.dialogTitle}\r\n            >\r\n              <Grid\r\n                container\r\n                direction=\"row\"\r\n                justify=\"center\"\r\n                spacing={2}\r\n                alignItems=\"center\"\r\n              >\r\n                <Grid item>\r\n                  <div\r\n                    style={\r\n                      booking.deleted\r\n                        ? {\r\n                            paddingBottom: \"5px\",\r\n                            textDecoration: \"line-through\",\r\n                          }\r\n                        : {}\r\n                    }\r\n                  >\r\n                    {`${booking.fullname}`}\r\n                  </div>\r\n                </Grid>\r\n\r\n                {booking.deleted && (\r\n                  <Grid item>\r\n                    <Tooltip title=\"This record has been deleted.\">\r\n                      <DeleteIcon\r\n                        style={{\r\n                          padding: 0,\r\n                          margin: 0,\r\n                          color: \"#fff\",\r\n                          fontSize: 25,\r\n                        }}\r\n                      />\r\n                    </Tooltip>\r\n                  </Grid>\r\n                )}\r\n              </Grid>\r\n            </DialogTitle>\r\n            <DialogContent>\r\n              <div\r\n                style={{\r\n                  // height: \"550px\",\r\n                  paddingTop: \"0px\",\r\n                }}\r\n              >\r\n                <Grid item xs={12} md={12} key={`panel0`}>\r\n                  <div className={classes.infoDetails}>\r\n                    <ul className={classes.ul}>\r\n                      <li className={classes.li} style={{ marginTop: \"20px\" }}>\r\n                        <Grid container spacing={2}>\r\n                          <Grid item xs={12}>\r\n                            <span className={classes.infoTitle}>\r\n                              BOOKED DATE :\r\n                            </span>\r\n\r\n                            <span\r\n                              hidden={\r\n                                editMode.edit &&\r\n                                editMode.person._id === booking._id\r\n                              }\r\n                              className={classes.infoData}\r\n                            >\r\n                              {FormatDateFromString(booking.bookingDate)}\r\n                            </span>\r\n                            <span\r\n                              hidden={\r\n                                !(\r\n                                  editMode.edit &&\r\n                                  editMode.person._id === booking._id\r\n                                )\r\n                              }\r\n                              className={classes.infoData}\r\n                            >\r\n                              <TextField\r\n                                fullWidth\r\n                                error={validationError.bookingDateError}\r\n                                className={classes.TextBox}\r\n                                value={bookingDate}\r\n                                onChange={bookingDateChanged}\r\n                                inputProps={{\r\n                                  style: {\r\n                                    padding: 0,\r\n                                  },\r\n                                }}\r\n                              ></TextField>\r\n                            </span>\r\n                          </Grid>\r\n                          <Grid item xs={12}>\r\n                            <span className={classes.infoTitle}>\r\n                              BOOKED TIME :\r\n                            </span>\r\n                            <span\r\n                              hidden={\r\n                                editMode.edit &&\r\n                                editMode.person._id === booking._id\r\n                              }\r\n                              className={classes.infoData}\r\n                            >\r\n                              {booking.bookingTime}\r\n                            </span>\r\n                            <span\r\n                              hidden={\r\n                                !(\r\n                                  editMode.edit &&\r\n                                  editMode.person._id === booking._id\r\n                                )\r\n                              }\r\n                              className={classes.infoData}\r\n                            >\r\n                              <TextField\r\n                                fullWidth\r\n                                error={validationError.bookingTimeError}\r\n                                className={classes.TextBox}\r\n                                value={bookingTime}\r\n                                onChange={bookingTimeChanged}\r\n                                inputProps={{\r\n                                  style: {\r\n                                    padding: 0,\r\n                                  },\r\n                                }}\r\n                              ></TextField>\r\n                            </span>\r\n                          </Grid>\r\n                        </Grid>\r\n                      </li>\r\n\r\n                      <Divider />\r\n\r\n                      <li className={classes.li} style={{ marginTop: \"20px\" }}>\r\n                        <Grid container spacing={2}>\r\n                          <Grid item xs={12}>\r\n                            <span className={classes.infoTitle}>\r\n                              FULLNAME :{\" \"}\r\n                            </span>\r\n                            <span\r\n                              hidden={\r\n                                editMode.edit &&\r\n                                editMode.person._id === booking._id\r\n                              }\r\n                              className={classes.infoData}\r\n                            >\r\n                              {booking.fullname}\r\n                            </span>\r\n                            <span\r\n                              hidden={\r\n                                !(\r\n                                  editMode.edit &&\r\n                                  editMode.person._id === booking._id\r\n                                )\r\n                              }\r\n                              className={classes.infoData}\r\n                            >\r\n                              <TextField\r\n                                fullWidth\r\n                                className={classes.TextBox}\r\n                                value={fullname}\r\n                                onChange={fullnameChanged}\r\n                                inputProps={{\r\n                                  style: {\r\n                                    padding: 0,\r\n                                  },\r\n                                }}\r\n                              ></TextField>\r\n                            </span>\r\n                          </Grid>\r\n                          <Grid item xs={12}>\r\n                            <span className={classes.infoTitle}>EMAIL : </span>\r\n                            <span\r\n                              hidden={\r\n                                editMode.edit &&\r\n                                editMode.person._id === booking._id\r\n                              }\r\n                              className={classes.infoData}\r\n                            >\r\n                              {booking.email}\r\n                            </span>\r\n                            <span\r\n                              hidden={\r\n                                !(\r\n                                  editMode.edit &&\r\n                                  editMode.person._id === booking._id\r\n                                )\r\n                              }\r\n                              className={classes.infoData}\r\n                            >\r\n                              <TextField\r\n                                fullWidth\r\n                                className={classes.TextBox}\r\n                                value={email}\r\n                                onChange={emailChanged}\r\n                                inputProps={{\r\n                                  style: {\r\n                                    padding: 0,\r\n                                  },\r\n                                }}\r\n                              ></TextField>\r\n                            </span>\r\n                          </Grid>\r\n                          <Grid item xs={12}>\r\n                            <span className={classes.infoTitle}>TEL : </span>\r\n                            <span\r\n                              hidden={\r\n                                editMode.edit &&\r\n                                editMode.person._id === booking._id\r\n                              }\r\n                              className={classes.infoData}\r\n                            >\r\n                              {booking.phone?.toUpperCase()}\r\n                            </span>\r\n                            <span\r\n                              hidden={\r\n                                !(\r\n                                  editMode.edit &&\r\n                                  editMode.person._id === booking._id\r\n                                )\r\n                              }\r\n                              className={classes.infoData}\r\n                            >\r\n                              <TextField\r\n                                fullWidth\r\n                                className={classes.TextBox}\r\n                                value={tel}\r\n                                onChange={telChanged}\r\n                                inputProps={{\r\n                                  style: {\r\n                                    padding: 0,\r\n                                  },\r\n                                }}\r\n                              ></TextField>\r\n                            </span>\r\n                          </Grid>\r\n                        </Grid>\r\n                      </li>\r\n\r\n                      <Divider />\r\n\r\n                      <li className={classes.li} style={{ marginTop: \"20px\" }}>\r\n                        <Grid container spacing={2}>\r\n                          <Grid item xs={12}>\r\n                            <span className={classes.infoTitle}>\r\n                              Consultation :{\" \"}\r\n                            </span>\r\n                            <span\r\n                              hidden={\r\n                                editMode.edit &&\r\n                                editMode.person._id === booking._id\r\n                              }\r\n                              className={classes.infoData}\r\n                            >\r\n                              {booking.faceToFaceConsultation && (\r\n                                <span> Face to Face </span>\r\n                              )}\r\n                              {((booking.faceToFaceConsultation &&\r\n                                booking.telephoneConsultation) ||\r\n                                (!booking.faceToFaceConsultation &&\r\n                                  !booking.telephoneConsultation)) && (\r\n                                <span\r\n                                  style={{\r\n                                    paddingLeft: \"5px\",\r\n                                    paddingRight: \"5px\",\r\n                                  }}\r\n                                >\r\n                                  {\" \"}\r\n                                  -{\" \"}\r\n                                </span>\r\n                              )}\r\n                              {booking.telephoneConsultation && (\r\n                                <span> Telephone </span>\r\n                              )}\r\n                            </span>\r\n                            <span\r\n                              hidden={\r\n                                !(\r\n                                  editMode.edit &&\r\n                                  editMode.person._id === booking._id\r\n                                )\r\n                              }\r\n                              className={classes.infoData}\r\n                            >\r\n                              <TextField\r\n                                fullWidth\r\n                                className={classes.TextBox}\r\n                                value={fullname}\r\n                                onChange={fullnameChanged}\r\n                                inputProps={{\r\n                                  style: {\r\n                                    padding: 0,\r\n                                  },\r\n                                }}\r\n                              ></TextField>\r\n                            </span>\r\n                          </Grid>\r\n                        </Grid>\r\n                      </li>\r\n\r\n                      <Divider />\r\n                      \r\n                      <div style={{marginTop:\"20px\"}}>\r\n\r\n                      </div>\r\n\r\n                      {/* Restore Functionality ******************************************* */}\r\n                      <li\r\n                        hidden={\r\n                          !(\r\n                            restoreMode.restore &&\r\n                            restoreMode.person._id === booking._id\r\n                          )\r\n                        }\r\n                      >\r\n                        <div\r\n                          style={{\r\n                            fontWeight: \"500\",\r\n                            paddingBottom: \"10px\",\r\n                            paddingLeft: \"5px\",\r\n                            fontSize: \"16px\",\r\n                            color: \"#333\",\r\n                          }}\r\n                        >\r\n                          Are you sure you want to restore this record?\r\n                        </div>\r\n                      </li>\r\n\r\n                      <li\r\n                        hidden={\r\n                          !booking.deleted ||\r\n                          (restoreMode.restore &&\r\n                            restoreMode.person._id === booking._id)\r\n                        }\r\n                      >\r\n                        <Button\r\n                          type=\"button\"\r\n                          fullWidth\r\n                          variant=\"contained\"\r\n                          color=\"primary\"\r\n                          onClick={() => {\r\n                            handleRestoreModeChanged(true, booking);\r\n                          }}\r\n                          className={classes.RestoreButton}\r\n                        >\r\n                          Restore This Record\r\n                        </Button>\r\n                      </li>\r\n\r\n                      <li\r\n                        hidden={\r\n                          !(\r\n                            restoreMode.restore &&\r\n                            restoreMode.person._id === booking._id\r\n                          )\r\n                        }\r\n                      >\r\n                        <Button\r\n                          type=\"button\"\r\n                          fullWidth\r\n                          variant=\"contained\"\r\n                          color=\"primary\"\r\n                          disabled={restoring}\r\n                          onClick={() => {\r\n                            handleRestoreModeChanged(false, booking);\r\n                          }}\r\n                          className={classes.SaveButton}\r\n                        >\r\n                          YES, Restore this!\r\n                        </Button>\r\n                      </li>\r\n\r\n                      <li\r\n                        hidden={\r\n                          !(\r\n                            restoreMode.restore &&\r\n                            restoreMode.person._id === booking._id\r\n                          )\r\n                        }\r\n                      >\r\n                        <Button\r\n                          type=\"button\"\r\n                          fullWidth\r\n                          variant=\"contained\"\r\n                          color=\"default\"\r\n                          disabled={restoring}\r\n                          onClick={() => {\r\n                            handleRestoreModeChanged(false, null);\r\n                          }}\r\n                          className={classes.CancelButton}\r\n                        >\r\n                          Cancel\r\n                        </Button>\r\n                      </li>\r\n\r\n                      {/*  ******************************************************************* */}\r\n\r\n                      {/* Delete Functionality ******************************************* */}\r\n\r\n                      <li\r\n                        hidden={\r\n                          !(\r\n                            deleteMode.delete &&\r\n                            deleteMode.person._id === booking._id\r\n                          )\r\n                        }\r\n                      >\r\n                        <div\r\n                          style={{\r\n                            fontWeight: \"600\",\r\n                            paddingBottom: \"10px\",\r\n                            paddingLeft: \"5px\",\r\n                            fontSize: \"16px\",\r\n                          }}\r\n                        >\r\n                          Are you sure you want to archive this record?\r\n                        </div>\r\n                      </li>\r\n\r\n                      <li\r\n                        hidden={\r\n                          props.deleteButtonDisabled ||\r\n                          booking.deleted ||\r\n                          editMode.edit ||\r\n                          (deleteMode.delete &&\r\n                            deleteMode.person._id === booking._id)\r\n                        }\r\n                      >\r\n                        {booking.OTCCharges > 0 && (\r\n                          <Tooltip title={\"Paid Records Cannot be Deleted!\"}>\r\n                            <div>\r\n                              <Button\r\n                                disabled={booking.OTCCharges > 0}\r\n                                type=\"button\"\r\n                                fullWidth\r\n                                variant=\"contained\"\r\n                                color=\"primary\"\r\n                                onClick={() => {\r\n                                  handleDeleteModeChanged(true, booking);\r\n                                }}\r\n                                className={classes.DeleteButton}\r\n                              >\r\n                                Archive This Record\r\n                              </Button>\r\n                            </div>\r\n                          </Tooltip>\r\n                        )}\r\n                        {\r\n                          <Button\r\n                            disabled={booking.OTCCharges > 0}\r\n                            type=\"button\"\r\n                            fullWidth\r\n                            variant=\"contained\"\r\n                            color=\"primary\"\r\n                            onClick={() => {\r\n                              handleDeleteModeChanged(true, booking);\r\n                            }}\r\n                            className={classes.DeleteButton}\r\n                          >\r\n                            Archive This Record\r\n                          </Button>\r\n                        }\r\n                      </li>\r\n\r\n                      <li\r\n                        hidden={\r\n                          !(\r\n                            deleteMode.delete &&\r\n                            deleteMode.person._id === booking._id\r\n                          )\r\n                        }\r\n                      >\r\n                        <Button\r\n                          type=\"button\"\r\n                          fullWidth\r\n                          variant=\"contained\"\r\n                          color=\"primary\"\r\n                          disabled={deleting}\r\n                          onClick={() => {\r\n                            handleDeleteModeChanged(false, booking);\r\n                          }}\r\n                          className={classes.SaveButton}\r\n                        >\r\n                          YES, Archive this!\r\n                        </Button>\r\n                      </li>\r\n\r\n                      <li\r\n                        hidden={\r\n                          !(\r\n                            deleteMode.delete &&\r\n                            deleteMode.person._id === booking._id\r\n                          )\r\n                        }\r\n                      >\r\n                        <Button\r\n                          type=\"button\"\r\n                          fullWidth\r\n                          variant=\"contained\"\r\n                          color=\"default\"\r\n                          disabled={deleting}\r\n                          onClick={() => {\r\n                            handleDeleteModeChanged(false, null);\r\n                          }}\r\n                          className={classes.CancelButton}\r\n                        >\r\n                          Cancel\r\n                        </Button>\r\n                      </li>\r\n\r\n                      {/* ****************************************************************************************** */}\r\n                    </ul>\r\n                  </div>\r\n                </Grid>\r\n              </div>\r\n              <Backdrop\r\n                className={classes.backdrop}\r\n                open={saving || deleting || restoring}\r\n              >\r\n                <CircularProgress color=\"inherit\" />\r\n              </Backdrop>\r\n            </DialogContent>\r\n          </Dialog>\r\n        </React.Fragment>\r\n      )}\r\n    </React.Fragment>\r\n  );\r\n}\r\n","import React, {useEffect, useRef, useState} from 'react';\r\nimport { DataGrid } from '@material-ui/data-grid';\r\nimport BookService from './services/BookService';\r\nimport { Button, Checkbox, CircularProgress, Dialog, DialogContent, DialogTitle, Divider, FormControl, FormControlLabel, Grid, Icon, InputLabel, LinearProgress, Link, makeStyles, MenuItem, Paper, Select, SvgIcon, Switch, TextField, Tooltip } from '@material-ui/core';\r\nimport RefreshIcon from '@material-ui/icons/Refresh';\r\nimport { IconButton } from '@material-ui/core';\r\nimport CheckIcon from '@material-ui/icons/Check';\r\nimport CloseIcon from '@material-ui/icons/Close';\r\nimport GlobalState from '../GlobalState';\r\nimport { getMenuIndex } from '../MenuList';\r\nimport {FormatDateFromString, FormatDateFromStringShortYear} from './DateFormatter';\r\n\r\nimport SearchIcon from '@material-ui/icons/Search';\r\nimport BookingDialog from './BookingDialog';\r\n\r\nimport NewReleasesIcon from '@material-ui/icons/NewReleases';\r\nimport HistoryIcon from '@material-ui/icons/History';\r\nimport TimelineIcon from '@material-ui/icons/Timeline';\r\nimport DescriptionIcon from '@material-ui/icons/Description';\r\nimport AutorenewIcon from '@material-ui/icons/Autorenew';\r\nimport LiveTvIcon from '@material-ui/icons/LiveTv';\r\nimport PlaylistAddCheckIcon from '@material-ui/icons/PlaylistAddCheck';\r\nimport AddCircleOutlineIcon from '@material-ui/icons/AddCircleOutline';\r\nimport DeleteIcon from '@material-ui/icons/Delete';\r\nimport HourglassEmptyIcon from '@material-ui/icons/HourglassEmpty';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { faFileExcel } from \"@fortawesome/free-solid-svg-icons\";\r\nimport Draggable from 'react-draggable';\r\n\r\nimport * as dateformat from 'dateformat';\r\n\r\nimport DateFnsUtils from '@date-io/date-fns';\r\nimport {\r\n  MuiPickersUtilsProvider,\r\n  KeyboardTimePicker,\r\n  KeyboardDatePicker,\r\n} from '@material-ui/pickers';\r\n\r\nimport BusinessIcon from '@material-ui/icons/Business';\r\nimport CreditCardIcon from '@material-ui/icons/CreditCard';\r\nimport LocalAtmIcon from '@material-ui/icons/LocalAtm';\r\n\r\n\r\nimport ReactHTMLTableToExcel from 'react-html-table-to-excel';\r\nimport PriceCalculator from './PriceCalculator';\r\nimport { corporates } from './Corporates';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  title: {\r\n    marginTop: theme.spacing(0),\r\n    marginBottom: theme.spacing(1),\r\n\r\n  },\r\n  \r\n  refreshButton:{\r\n    marginLeft: theme.spacing(2),\r\n  },\r\n\r\n  checkIcon:{\r\n    color: \"green\"\r\n  },\r\n\r\n  closeIcon:{\r\n    color: \"red\"\r\n  },\r\n\r\n  RefLink: {\r\n    cursor: \"pointer\"\r\n  },\r\n\r\n  BookedLabel:{\r\n    backgroundColor: \"#606060\",\r\n    color: \"#fff\",\r\n    width: \"70px\",\r\n    textAlign: \"center\",\r\n  },\r\n\r\n  PatientAttendedLabel:{\r\n    backgroundColor: \"#0066aa\",\r\n    color: \"#fff\",\r\n    width: \"70px\",\r\n    textAlign: \"center\",\r\n  },\r\n\r\n  SampleTakenLabel:{\r\n    backgroundColor: \"#0066cc\",\r\n    color: \"#fff\",\r\n    width: \"70px\",\r\n    textAlign: \"center\",\r\n  },\r\n\r\n  ReportSentLabel:{\r\n    backgroundColor: \"#009900\",\r\n    color: \"#fff\",\r\n    width: \"70px\",\r\n    textAlign: \"center\",\r\n  },\r\n\r\n  ReportCertSentLabel:{\r\n    backgroundColor: \"#009900\",\r\n    color: \"#fff\",\r\n    width: \"70px\",\r\n    textAlign: \"center\",\r\n  },\r\n\r\n  PositiveLabel:{\r\n    backgroundColor: \"red\",\r\n    color: \"#fff\",\r\n    width: \"70px\",\r\n    textAlign: \"center\",\r\n  },\r\n\r\n  HideNowRows: {\r\n    position: \"absolute\",\r\n    top: \"40%\",\r\n    left: \"40%\",\r\n    width: \"600px\",\r\n    height: \"300px\",\r\n    backgroundColor : \"#fafafa\",\r\n    color : \"#111\",\r\n    zIndex: \"1000\",\r\n    display: \"flex\",\r\n    alignItems: \"center\",\r\n    justifyItems: \"center\"\r\n  },\r\n\r\n  ExportToExcelButton:\r\n  {\r\n    // marginBottom : \"20px\",\r\n    color : \"#2f942e\",\r\n    borderColor: \"#2f942e\",\r\n    \"&:hover\": {\r\n      background: \"#fafffa\",\r\n      borderColor: \"#2f942e\",\r\n    },\r\n    textDecoration : \"none !important\", \r\n   \r\n  },\r\n\r\n  ExportToExcelButtonInline:\r\n  {\r\n    // marginBottom : \"20px\",\r\n    color : \"#2f942e\",\r\n    borderColor: \"#2f942e\",\r\n    \"&:hover\": {\r\n      background: \"#fafffa\",\r\n      borderColor: \"#2f942e\",\r\n    },\r\n    textDecoration : \"none !important\", \r\n    cursor: \"pointer\",\r\n    padding: \"10px\"\r\n   \r\n  },\r\n\r\n  table: {\r\n    width: \"100%\",\r\n    border: \"1px solid #ddd\",\r\n    borderCollapse: \"collapse\",\r\n},\r\n\r\nth: {\r\n    border: \"1px solid #ddd\",\r\n    borderCollapse: \"collapse\",\r\n    verticalAlign: \"middle\",\r\n    fontcolor: \"#555\",\r\n    fontWeight: \"400\",\r\n    fontSize: \"15px\",\r\n    paddingTop: \"5px\",\r\n    paddingBottom: \"5px\",\r\n    width: \"14%\",\r\n    paddingLeft: \"5px\",\r\n},\r\n\r\ntd: {\r\n    border: \"1px solid #ddd\",\r\n    borderCollapse: \"collapse\",\r\n    verticalAlign: \"middle\",\r\n    paddingLeft: \"5px\",\r\n},\r\n\r\ntopSelect: {\r\n  margin: theme.spacing(1),\r\n  minWidth: 80,\r\n},\r\n\r\nnotifyIcon:{\r\n  width: \"16px\",\r\n  height: \"16px\",\r\n  borderRadius: \"50%\",\r\n  backgroundColor : \"rgb(220, 0, 78)\",\r\n  marginLeft: \"10px\"\r\n}\r\n\r\n}));\r\n\r\nconst getTableTitle = (str) =>{\r\n\r\n  if (str === 'today')\r\n  {\r\n    return `Today's Bookings`;\r\n  }else if (str === 'old')\r\n  {\r\n    return `Old Bookings`;\r\n  }else if (str === 'future')\r\n  {\r\n    return `Future Bookings`;\r\n  }else if (str === 'recent')\r\n  {\r\n    return `Recent Bookings`;\r\n  }else if (str === 'live')\r\n  {\r\n    return `Live Bookings`;\r\n  }else if (str === 'completed')\r\n  {\r\n    return `Completed Bookings`;\r\n  }else if (str === 'positive')\r\n  {\r\n    return `Positive Results`;\r\n  }else if (str === 'deleted')\r\n  {\r\n    return `Archived Records`;\r\n  }else if (str === 'late')\r\n  {\r\n    return `40 Hours Late`;\r\n  }\r\n  \r\n  else\r\n  {\r\n    return `All Bookings`;\r\n  }\r\n\r\n}\r\n\r\nconst getTableIcon = (str) =>{\r\n\r\n  if (str === 'today')\r\n  {\r\n    return <NewReleasesIcon style={{fontSize:\"2.2rem\"}} />;\r\n  }else if (str === 'old')\r\n  {\r\n    return <HistoryIcon style={{fontSize:\"2.2rem\"}} />;\r\n  }else if (str === 'future')\r\n  {\r\n    return <TimelineIcon style={{fontSize:\"2.2rem\"}} />;\r\n  }else if (str === 'recent')\r\n  {\r\n    return <AutorenewIcon style={{fontSize:\"2.2rem\"}} />;\r\n  }else if (str === 'live')\r\n  {\r\n    return <LiveTvIcon style={{fontSize:\"2.2rem\"}} />;\r\n  }else if (str === 'completed')\r\n  {\r\n    return  <PlaylistAddCheckIcon style={{fontSize:\"2.2rem\"}} />;\r\n  }else if (str === 'positive')\r\n  {\r\n    return <AddCircleOutlineIcon style={{fontSize:\"2.2rem\"}} />\r\n  }else if (str === 'deleted')\r\n  {\r\n    return <DeleteIcon style={{fontSize:\"2.2rem\"}} />;\r\n  }else if (str === 'late')\r\n  {\r\n    return <HourglassEmptyIcon style={{fontSize:\"2.2rem\"}} />;\r\n  }\r\n  \r\n  else\r\n  {\r\n    return <DescriptionIcon style={{fontSize:\"2.2rem\"}} />;\r\n  }\r\n\r\n}\r\n\r\nfunction PaperComponent(props) {\r\n  return (\r\n    <Draggable handle=\"#draggable-dialog-title\" cancel={'[class*=\"MuiDialogContent-root\"]'}>\r\n      <Paper {...props} />\r\n    </Draggable>\r\n  );\r\n}\r\n\r\nexport default function BookingTable(props) {\r\n  \r\n  const classes = useStyles();\r\n\r\n  const [topCount, setTopCount] = React.useState(25)\r\n  const topCountChanged = (event) =>\r\n  {\r\n    setTopCount(event.target.value)\r\n    loadData(event.target.value)\r\n  }\r\n  \r\n\r\n  const [openDialogExcel, setOpenDialogExcel] = useState(false);\r\n  const handleCloseDialogExcel = () =>\r\n  {\r\n    setCorporate(corporates[0]);\r\n    setJustCorporate(false);\r\n    setOpenDialogExcel(false);\r\n  }\r\n\r\n\r\n  const [fromDate, setFromDate] = React.useState(new Date(new Date().getTime() - 7 * 24 * 60 * 60 * 1000 ));\r\n  const handleFromDateChange = (date) => {\r\n    setFromDate(date);\r\n    setFromDateStr(dateformat(date,'yyyy-mm-dd'));\r\n  };\r\n\r\n  const [untilDate, setUntilDate] = React.useState(new Date(new Date().getTime() - 1 * 24 * 60 * 60 * 1000 ));\r\n  const handleUntilDateChange = (date) => {\r\n    setUntilDate(date);\r\n    seUntilDateStr(dateformat(date,'yyyy-mm-dd'));\r\n  };\r\n\r\n  const [fromDateStr, setFromDateStr] = useState(dateformat(new Date(new Date().getTime() - 7 * 24 * 60 * 60 * 1000 ), 'yyyy-mm-dd'));\r\n  const [untilDateStr, seUntilDateStr] = useState(dateformat(new Date(new Date().getTime() - 1 * 24 * 60 * 60 * 1000 ), 'yyyy-mm-dd'));\r\n\r\n  const [justCorporate, setJustCorporate] = useState(false);\r\n\r\n  const[chkDate, setChkDate] = useState(true);\r\n  const[chkForename, setChkForename] = useState(true);\r\n  const[chkSurname, setChkSurname] = useState(true);\r\n  const[chkDOB, setChkDOB] = useState(true);\r\n  const[chkEmail, setChkEmail] = useState(true);\r\n  const[chkTel, setChkTel] = useState(true);\r\n  const[chkCertificate, setChkCertidicate] = useState(true);\r\n  const[chkAntiBodyTest, setChkAntiBodyTest] = useState(true);\r\n  const[chkextRef, setChkExtRef] = useState(true);\r\n  const[chkPrice, setChkPrice] = useState(true);\r\n\r\n  const justCorporateChanged = (event) =>\r\n  {\r\n    setJustCorporate(event.target.checked);\r\n  }\r\n  \r\n\r\n  const chkDateChanged = (event) =>\r\n  {\r\n    setChkDate(event.target.checked);\r\n  }\r\n\r\n  const chkForenameChanged = (event) =>\r\n  {\r\n    setChkForename(event.target.checked);\r\n  }\r\n\r\n  const chkSurnameChanged = (event) =>\r\n  {\r\n    setChkSurname(event.target.checked);\r\n  }\r\n\r\n  const chkDOBChanged = (event) =>\r\n  {\r\n    setChkDOB(event.target.checked);\r\n  }\r\n\r\n  const chkEmailChanged = (event) =>\r\n  {\r\n    setChkEmail(event.target.checked);\r\n  }\r\n\r\n  const chkTelChanged = (event) =>\r\n  {\r\n    setChkTel(event.target.checked);\r\n  }\r\n\r\n  const chkCertificateChanged = (event) =>\r\n  {\r\n    setChkCertidicate(event.target.checked);\r\n  }\r\n\r\n  const chkAntiBodyTestChanged = (event) =>\r\n  {\r\n    setChkAntiBodyTest(event.target.checked);\r\n  }\r\n\r\n  const chkextRefChanged = (event) =>\r\n  {\r\n    setChkExtRef(event.target.checked);\r\n  }\r\n\r\n  const chkPriceChanged = (event) =>\r\n  {\r\n    setChkPrice(event.target.checked);\r\n  }\r\n\r\n\r\n\r\n  var columns = [];\r\n\r\n  if (props.date === 'recent')\r\n  {\r\n    columns = [\r\n      // { field: 'id', headerName: '#', width: 70 },\r\n  \r\n      {field: '_id', headerName:' ', width: 70, renderCell: (params) =>{\r\n          return (\r\n\r\n           <React.Fragment>\r\n\r\n                <Button \r\n                        color=\"primary\"\r\n                        onClick = {event => openDetailsDialog(event, params.value)}\r\n                > \r\n            \r\n            <SearchIcon/> \r\n            \r\n            </Button>\r\n\r\n           </React.Fragment>\r\n\r\n          \r\n  \r\n          ); \r\n      \r\n        }\r\n      },\r\n\r\n\r\n\r\n      { field: 'timeStamp', headerName: 'TimeStamp', width: 200, valueFormatter: (params) => { \r\n        return formatTimeStamp(params.value);\r\n        }\r\n      },\r\n  \r\n      { field: 'bookingDate', headerName: 'B Date', width: 110, valueFormatter: (params) => { \r\n              return FormatDateFromString(params.value);\r\n          }\r\n       },\r\n      { field: 'bookingTimeNormalized', headerName: 'B Time', width: 200 , valueGetter: (params) => {\r\n        return params.getValue('bookingTime');\r\n      }},\r\n      { field: 'fullname', headerName: 'Fullname', width: 250 },\r\n      { field: 'email', headerName: 'Email', width: 200 },\r\n      { field: 'phone', headerName: 'Telephone', width: 150 },\r\n      { field: 'faceToFaceConsultation', headerName: 'Consultation', width: 250 , renderCell: (params) => {\r\n        return (\r\n          <React.Fragment>\r\n              {params.getValue('faceToFaceConsultation') && <span> Face to Face </span>}\r\n              {params.getValue('faceToFaceConsultation') && <span style={{paddingLeft:\"5px\", paddingRight:\"5px\"}}> - </span>}\r\n              {params.getValue('telephoneConsultation') && <span> Telephone </span>}\r\n          </React.Fragment>\r\n        )\r\n      }},\r\n    \r\n    ];\r\n\r\n  }\r\n  else\r\n  {\r\n    columns = [\r\n      // { field: 'id', headerName: '#', width: 70 },\r\n  \r\n      {field: '_id', headerName:' ', width: 70, renderCell: (params) =>{\r\n          return (\r\n\r\n           <React.Fragment>\r\n\r\n                <Button \r\n                        color=\"primary\"\r\n                        onClick = {event => openDetailsDialog(event, params.value)}\r\n                > \r\n            \r\n            <SearchIcon/> \r\n            \r\n            </Button>\r\n\r\n           </React.Fragment>\r\n\r\n          \r\n  \r\n          ); \r\n      \r\n        }\r\n      },\r\n\r\n\r\n\r\n  \r\n      { field: 'bookingDate', headerName: 'B Date', width: 110, valueFormatter: (params) => { \r\n              return FormatDateFromString(params.value);\r\n          }\r\n       },\r\n      { field: 'bookingTimeNormalized', headerName: 'B Time', width: 200 , valueGetter: (params) => {\r\n        return params.getValue('bookingTime');\r\n      }},\r\n      { field: 'fullname', headerName: 'Fullname', width: 250 },\r\n      { field: 'email', headerName: 'Email', width: 200 },\r\n      { field: 'phone', headerName: 'Telephone', width: 150 },\r\n      { field: 'faceToFaceConsultation', headerName: 'Consultation', width: 250 , renderCell: (params) => {\r\n        return (\r\n          <React.Fragment>\r\n              {params.getValue('faceToFaceConsultation') && <span> Face to Face </span>}\r\n              {params.getValue('faceToFaceConsultation') && <span style={{paddingLeft:\"5px\", paddingRight:\"5px\"}}> - </span>}\r\n              {params.getValue('telephoneConsultation') && <span> Telephone </span>}\r\n          </React.Fragment>\r\n        )\r\n      }},\r\n    \r\n    ];\r\n  \r\n\r\n  }\r\n\r\n\r\n\r\n  const [state, setState] = React.useContext(GlobalState);  \r\n\r\n  const [data, setData] = React.useState({bookings: [] , cachedBookings: [], isFetching : true});\r\n\r\n  const [selectedRow, setSelectedRow] = React.useState(null);\r\n\r\n  const [selectedBooking, setSelectedBooking] = React.useState(null);\r\n  const [seeDetailsDialogOpen, setSeeDetailsDialogOpen] = React.useState(false);\r\n\r\n  const [corporate, setCorporate] = useState(corporates[0]);\r\n  const corporateChanged = (event) =>\r\n  {\r\n    setCorporate(event.target.value);\r\n  }\r\n  \r\n\r\n  const [filter,setFilter] = React.useState('');\r\n\r\n\r\n  const lastPromise = useRef();\r\n\r\n  const formatTimeStamp = (timeStamp) =>\r\n  {\r\n    const todayStr = dateformat(new Date(), 'yyyy-mm-dd');\r\n    const timeStampStr = dateformat(timeStamp, 'yyyy-mm-dd');\r\n    if (todayStr === timeStampStr)\r\n    {\r\n      return dateformat(timeStamp, \"'Today', h:MM:ss TT\");\r\n    }\r\n    else\r\n    {\r\n       return dateformat(timeStamp, \"mmm dS, h:MM:ss TT\");\r\n    }\r\n  }\r\n\r\n  const loadData = (top) =>\r\n  {\r\n    var api = BookService.getAllBookings;\r\n    if (props.date === 'today')\r\n    {\r\n      api = BookService.getTodayBookings;\r\n    }else if (props.date === 'old')\r\n    {\r\n      api = BookService.getOldBookings;\r\n    }else if (props.date === 'future')\r\n    {\r\n      api = BookService.getFutureBookings;\r\n    }else if (props.date === 'recent')\r\n    {\r\n      api = BookService.getRecentBookingsAll;\r\n    }\r\n    else if (props.date === 'deleted')\r\n    {\r\n      api = BookService.getDeletedBookings;\r\n    }\r\n     \r\n    setData({bookings: [], cachedBookings: [], isFetching: true});\r\n   \r\n    // console.log(props)\r\n\r\n    const currentPromise = api(top).then( (res) =>{\r\n      // console.log(res)\r\n      for (var i=0; i < res.data.length; i++)\r\n      {\r\n        res.data[i] = {...res.data[i], id : i + 1}\r\n      }  \r\n      setData({bookings: [...res.data], cachedBookings: [...res.data], isFetching: false});\r\n      // return res.data;\r\n    }).catch(err => {\r\n      console.error(err)\r\n    })\r\n\r\n    // lastPromise.current = currentPromise;\r\n\r\n    // currentPromise.then(\r\n    //   result => {\r\n    //     if (currentPromise === lastPromise.current) {\r\n    //       setData({bookings: [...result], cachedBookings: [...result], isFetching: false});\r\n    //       setPage(1);\r\n    //     }\r\n    //   },\r\n    //   e => {\r\n    //     if (currentPromise === lastPromise.current) {\r\n    //         console.error(e);\r\n    //         setData({bookings: data.bookings, cachedBookings: data.cachedBookings, isFetching: false});\r\n    //     }\r\n    //   });\r\n\r\n  }\r\n\r\n  useEffect( () => {\r\n            setTopCount(25)\r\n            loadData(25)\r\n        },\r\n        [props.date]);\r\n\r\n\r\n\r\n\r\n  useEffect( () => {\r\n\r\n        if (filter && filter.trim().length > 0)\r\n        {\r\n          var filteredData = data.cachedBookings.filter( (element) => \r\n\r\n             (element.fullname?.toLowerCase().indexOf(filter.toLowerCase()) >= 0)\r\n              \r\n          );\r\n  \r\n  \r\n          setData({bookings: [...filteredData], cachedBookings: data.cachedBookings, isFetching: false});\r\n        }else\r\n        {\r\n          setData({bookings: [...data.cachedBookings], cachedBookings: data.cachedBookings, isFetching: false});\r\n        }\r\n      },\r\n      [filter]);\r\n\r\n  \r\n      useEffect(() => {\r\n\r\n       loadData(topCount)\r\n    \r\n      }, [state.bookingDialogDataChanged]);    \r\n\r\n\r\n  const handleCloseSeeDetaisDialog = () =>\r\n  {\r\n    setSelectedBooking(null);\r\n    setSeeDetailsDialogOpen(false);\r\n  }    \r\n  \r\n  const openDetailsDialog = (event, id) =>\r\n  {\r\n    const booking = data.bookings.find(element => element._id === id);\r\n    setSelectedBooking(booking);\r\n    setSeeDetailsDialogOpen(true);\r\n\r\n  }\r\n\r\n  const refreshClicked = (event) =>{\r\n    setFilter('');\r\n    loadData(topCount)\r\n  }\r\n\r\n  const filterChanged = (event) =>{\r\n    setFilter(event.target.value);\r\n  }\r\n\r\n  const handleSelectionChanged = (newSelection) =>\r\n  {\r\n    if (newSelection.length > 0){\r\n      setSelectedRow(newSelection.rows[0]);\r\n    }\r\n    \r\n  }\r\n\r\n  const [page, setPage] = React.useState(1);\r\n\r\n  const handleExcelButtonClicked = (event) =>\r\n  {\r\n    setOpenDialogExcel(true);\r\n  }\r\n\r\n  const isTopSelectHidden = (date)=>\r\n  {\r\n    return date === 'live' || date === 'positive' || date === 'late' || date === 'today'\r\n  }\r\n\r\n\r\n  return (\r\n    <React.Fragment>\r\n      {data.isFetching && (\r\n        <div style={{ width: \"100%\", paddingTop: \"3px\" }}>\r\n          <LinearProgress color=\"primary\" />\r\n        </div>\r\n      )}\r\n      <Grid\r\n        container\r\n        direction=\"row\"\r\n        justify=\"space-between\"\r\n        alignItems=\"flex-end\"\r\n      >\r\n        <Grid item md={4}>\r\n          <div style={{ textAlign: \"left\", paddingLeft: \"10px\" }}>\r\n            <Grid\r\n              container\r\n              direction=\"row\"\r\n              justify=\"flex-start\"\r\n              alignItems=\"center\"\r\n            >\r\n              <Grid item>\r\n                <span style={{ paddingRight: \"15px\", color: \"#555\" }}>\r\n                  {\" \"}\r\n                  {getTableIcon(props.date)}{\" \"}\r\n                </span>\r\n              </Grid>\r\n              <Grid item>\r\n                <span\r\n                  style={{\r\n                    fontSize: \"1.4rem\",\r\n                    fontWeight: \"600\",\r\n                    color: \"#444\",\r\n                  }}\r\n                >\r\n                  {\" \"}\r\n                  {getTableTitle(props.date)}{\" \"}\r\n                </span>\r\n              </Grid>\r\n              <Grid item>\r\n                <Tooltip title=\"Refresh\" placement=\"right\">\r\n                  <IconButton\r\n                    color=\"primary\"\r\n                    className={classes.refreshButton}\r\n                    onClick={refreshClicked}\r\n                  >\r\n                    <RefreshIcon />\r\n                  </IconButton>\r\n                </Tooltip>\r\n              </Grid>\r\n            </Grid>\r\n          </div>\r\n        </Grid>\r\n\r\n        <Grid item md={3}>\r\n          {props.date === \"completed\" && state.showCreateExcel && (\r\n            <div style={{ paddingBottom: \"5px\" }}>\r\n              <Button\r\n                className={classes.ExportToExcelButton}\r\n                variant=\"outlined\"\r\n                color=\"default\"\r\n                onClick={handleExcelButtonClicked}\r\n                startIcon={\r\n                  <FontAwesomeIcon\r\n                    style={{ color: \"#009900\" }}\r\n                    icon={faFileExcel}\r\n                  />\r\n                }\r\n              >\r\n                export to excel\r\n              </Button>\r\n            </div>\r\n          )}\r\n        </Grid>\r\n\r\n        {data.isFetching && <div className={classes.HideNowRows}></div>}\r\n\r\n        <Grid item md={3}>\r\n          <TextField\r\n            variant=\"standard\"\r\n            value={filter}\r\n            onChange={filterChanged}\r\n            margin=\"normal\"\r\n            size=\"small\"\r\n            id=\"filter\"\r\n            label=\"Filter\"\r\n            name=\"filter\"\r\n            autoComplete=\"off\"\r\n          />\r\n        </Grid>\r\n\r\n        <Grid item hidden={isTopSelectHidden(props.date)}>\r\n          <FormControl className={classes.topSelect}>\r\n            <InputLabel id=\"top-select-label\">Limit</InputLabel>\r\n            <Select\r\n              labelId=\"top-select-label\"\r\n              id=\"top-simple-select\"\r\n              value={topCount}\r\n              onChange={topCountChanged}\r\n            >\r\n              <MenuItem value={25}>25</MenuItem>\r\n              <MenuItem value={50}>50</MenuItem>\r\n              <MenuItem value={100}>100</MenuItem>\r\n              <MenuItem value={500}>500</MenuItem>\r\n              <MenuItem value={1000}>1000</MenuItem>\r\n              <MenuItem value={10000}>ALL</MenuItem>\r\n            </Select>\r\n          </FormControl>\r\n\r\n          {/* <Button onClick={() => loadData(true)}> Show all records </Button> */}\r\n        </Grid>\r\n      </Grid>\r\n\r\n      <div style={{ height: 700, width: \"100%\" }}>\r\n        <DataGrid\r\n          rows={data.bookings}\r\n          columns={columns}\r\n          autoPageSize\r\n          page={page}\r\n          onPageChange={(params) => {\r\n            setPage(params.page);\r\n          }}\r\n          onSelectionChange={handleSelectionChanged}\r\n        />\r\n      </div>\r\n\r\n\r\n      <BookingDialog\r\n        booking={selectedBooking}\r\n        open={seeDetailsDialogOpen && selectedBooking && selectedBooking.fullname}\r\n        onClose={handleCloseSeeDetaisDialog}\r\n      />\r\n\r\n      {data.bookings && data.bookings.length > 0 && (\r\n        <Dialog\r\n          maxWidth=\"lg\"\r\n          open={openDialogExcel}\r\n          onClose={handleCloseDialogExcel}\r\n          PaperComponent={PaperComponent}\r\n          aria-labelledby=\"form-dialog-title\"\r\n        >\r\n          <DialogTitle id=\"draggable-dialog-title\">\r\n            <Grid\r\n              container\r\n              spacing={2}\r\n              direction=\"row\"\r\n              justify=\"center\"\r\n              alignItems=\"center\"\r\n            >\r\n              <Grid item>\r\n                <FontAwesomeIcon\r\n                  style={{ color: \"#2f942e\", fontSize: \"2rem\" }}\r\n                  icon={faFileExcel}\r\n                />\r\n              </Grid>\r\n\r\n              <Grid item>\r\n                <div\r\n                  style={{\r\n                    color: \"#2f942e\",\r\n                    paddingBottom: \"5px\",\r\n                    fontWeight: \"800\",\r\n                  }}\r\n                >\r\n                  {\" \"}\r\n                  Export to EXCEL{\" \"}\r\n                </div>\r\n              </Grid>\r\n            </Grid>\r\n\r\n            <Divider />\r\n          </DialogTitle>\r\n          <DialogContent>\r\n            <div\r\n              style={{\r\n                minHeight: \"600px\",\r\n                maxHeight: \"600px\",\r\n                minWidth: \"1200px\",\r\n                maxWidth: \"1200px\",\r\n              }}\r\n            >\r\n              <div>\r\n                <Grid row container justify=\"center\" spacing={3}>\r\n                  <Grid item>\r\n                    <FormControlLabel\r\n                      control={\r\n                        <Switch\r\n                          checked={justCorporate}\r\n                          onChange={justCorporateChanged}\r\n                          name=\"justCorporate\"\r\n                        />\r\n                      }\r\n                      label=\"Just Corporate Records\"\r\n                    />\r\n                  </Grid>\r\n\r\n                  {justCorporate && (\r\n                    <Grid item>\r\n                      <FormControl\r\n                        style={{ marginTop: \"0px\" }}\r\n                        className={classes.formControl}\r\n                      >\r\n                        <Select\r\n                          labelId=\"select-corporate\"\r\n                          id=\"select-corporate-id\"\r\n                          value={corporate}\r\n                          onChange={corporateChanged}\r\n                        >\r\n                          {corporates.map((element) => (\r\n                            <MenuItem value={element}>{`${element}`}</MenuItem>\r\n                          ))}\r\n                        </Select>\r\n                      </FormControl>\r\n                    </Grid>\r\n                  )}\r\n                </Grid>\r\n\r\n                <MuiPickersUtilsProvider utils={DateFnsUtils}>\r\n                  <Grid row container justify=\"center\" spacing={3}>\r\n                    <Grid item>\r\n                      <KeyboardDatePicker\r\n                        disableToolbar\r\n                        variant=\"inline\"\r\n                        format=\"dd/MM/yyyy\"\r\n                        margin=\"normal\"\r\n                        id=\"date-picker-from\"\r\n                        label=\"From\"\r\n                        value={fromDate}\r\n                        onChange={handleFromDateChange}\r\n                        KeyboardButtonProps={{\r\n                          \"aria-label\": \"change date\",\r\n                        }}\r\n                      />\r\n                    </Grid>\r\n\r\n                    <Grid item>\r\n                      <KeyboardDatePicker\r\n                        disableToolbar\r\n                        variant=\"inline\"\r\n                        format=\"dd/MM/yyyy\"\r\n                        margin=\"normal\"\r\n                        id=\"date-picker-until\"\r\n                        label=\"Until\"\r\n                        value={untilDate}\r\n                        onChange={handleUntilDateChange}\r\n                        KeyboardButtonProps={{\r\n                          \"aria-label\": \"change date\",\r\n                        }}\r\n                      />\r\n                    </Grid>\r\n\r\n                    <Grid item>\r\n                      <div style={{ paddingTop: \"30px\", marginLeft: \"20px\" }}>\r\n                        <ReactHTMLTableToExcel\r\n                          id=\"test-table-xls-button\"\r\n                          className={classes.ExportToExcelButtonInline}\r\n                          table=\"table-to-xls\"\r\n                          filename={`PCR.Report.${fromDateStr}.${untilDateStr}`}\r\n                          sheet=\"PCR-Report\"\r\n                          buttonText=\"Download as XLS\"\r\n                        />\r\n                      </div>\r\n                    </Grid>\r\n                  </Grid>\r\n                </MuiPickersUtilsProvider>\r\n              </div>\r\n\r\n              <div>\r\n                <Grid container spacing={3}>\r\n                  <Grid item xs>\r\n                    <FormControlLabel\r\n                      control={\r\n                        <Checkbox\r\n                          checked={chkDate}\r\n                          onChange={chkDateChanged}\r\n                          name=\"chkDate\"\r\n                        />\r\n                      }\r\n                      label=\"Date\"\r\n                    />\r\n                  </Grid>\r\n                  <Grid item xs>\r\n                    <FormControlLabel\r\n                      control={\r\n                        <Checkbox\r\n                          checked={chkForename}\r\n                          onChange={chkForenameChanged}\r\n                          name=\"chkForename\"\r\n                        />\r\n                      }\r\n                      label=\"Forename\"\r\n                    />\r\n                  </Grid>\r\n                  <Grid item xs>\r\n                    <FormControlLabel\r\n                      control={\r\n                        <Checkbox\r\n                          checked={chkSurname}\r\n                          onChange={chkSurnameChanged}\r\n                          name=\"chkSurname\"\r\n                        />\r\n                      }\r\n                      label=\"Surname\"\r\n                    />\r\n                  </Grid>\r\n                  <Grid item xs>\r\n                    <FormControlLabel\r\n                      control={\r\n                        <Checkbox\r\n                          checked={chkDOB}\r\n                          onChange={chkDOBChanged}\r\n                          name=\"chkDOB\"\r\n                        />\r\n                      }\r\n                      label=\"D.O.B\"\r\n                    />\r\n                  </Grid>\r\n                  <Grid item xs>\r\n                    <FormControlLabel\r\n                      control={\r\n                        <Checkbox\r\n                          checked={chkEmail}\r\n                          onChange={chkEmailChanged}\r\n                          name=\"chkEmail\"\r\n                        />\r\n                      }\r\n                      label=\"Email\"\r\n                    />\r\n                  </Grid>\r\n                  <Grid item xs>\r\n                    <FormControlLabel\r\n                      control={\r\n                        <Checkbox\r\n                          checked={chkTel}\r\n                          onChange={chkTelChanged}\r\n                          name=\"chkTel\"\r\n                        />\r\n                      }\r\n                      label=\"Tel\"\r\n                    />\r\n                  </Grid>\r\n                  <Grid item xs>\r\n                    <FormControlLabel\r\n                      control={\r\n                        <Checkbox\r\n                          checked={chkCertificate}\r\n                          onChange={chkCertificateChanged}\r\n                          name=\"chkCertificate\"\r\n                        />\r\n                      }\r\n                      label=\"Certificate\"\r\n                    />\r\n                  </Grid>\r\n                  <Grid item xs>\r\n                    <FormControlLabel\r\n                      control={\r\n                        <Checkbox\r\n                          checked={chkAntiBodyTest}\r\n                          onChange={chkAntiBodyTestChanged}\r\n                          name=\"chkAntiBodyTest\"\r\n                        />\r\n                      }\r\n                      label=\"AntiBodyTest\"\r\n                    />\r\n                  </Grid>\r\n                  <Grid item xs>\r\n                    <FormControlLabel\r\n                      control={\r\n                        <Checkbox\r\n                          checked={chkextRef}\r\n                          onChange={chkextRefChanged}\r\n                          name=\"chkextRef\"\r\n                        />\r\n                      }\r\n                      label=\"Lab No.\"\r\n                    />\r\n                  </Grid>\r\n                  <Grid item xs>\r\n                    <FormControlLabel\r\n                      control={\r\n                        <Checkbox\r\n                          checked={chkPrice}\r\n                          onChange={chkPriceChanged}\r\n                          name=\"chkPrice\"\r\n                        />\r\n                      }\r\n                      label=\"Price\"\r\n                    />\r\n                  </Grid>\r\n                </Grid>\r\n              </div>\r\n\r\n              <div style={{ width: \"100%\", paddingTop: \"20px\" }}>\r\n                <table className={classes.table} id=\"table-to-xls\">\r\n                  <tr>\r\n                    {chkDate && <th className={classes.th}>Date</th>}\r\n                    {chkForename && <th className={classes.th}>Forename</th>}\r\n                    {chkSurname && <th className={classes.th}>Surename</th>}\r\n                    {chkDOB && <th className={classes.th}>D.O.B</th>}\r\n                    {chkEmail && <th className={classes.th}>Email</th>}\r\n                    {chkTel && <th className={classes.th}>Tel</th>}\r\n                    {chkCertificate && (\r\n                      <th className={classes.th}>Certificate</th>\r\n                    )}\r\n                    {chkAntiBodyTest && (\r\n                      <th className={classes.th}>AntiBodyTest</th>\r\n                    )}\r\n                    {chkextRef && <th className={classes.th}>Lab No.</th>}\r\n                    {chkPrice && <th className={classes.th}>Price (£) </th>}\r\n                  </tr>\r\n\r\n                  {data.bookings\r\n                    .filter((booking) => {\r\n                      if (!justCorporate) {\r\n                        return (\r\n                          booking.bookingDate >= fromDateStr &&\r\n                          booking.bookingDate <= untilDateStr\r\n                        );\r\n                      } else {\r\n                        return (\r\n                          booking.bookingDate >= fromDateStr &&\r\n                          booking.bookingDate <= untilDateStr &&\r\n                          booking.paid &&\r\n                          booking.paidBy === \"corporate\" &&\r\n                          booking.corporate === corporate\r\n                        );\r\n                      }\r\n                    })\r\n\r\n                    .map((booking) => (\r\n                      <tr>\r\n                        {chkDate && (\r\n                          <td className={classes.td}>\r\n                            {FormatDateFromString(booking.bookingDate)}\r\n                          </td>\r\n                        )}\r\n                        {chkForename && (\r\n                          <td className={classes.td}>\r\n                            {booking.forenameCapital}\r\n                          </td>\r\n                        )}\r\n                        {chkSurname && (\r\n                          <td className={classes.td}>\r\n                            {booking.surnameCapital}\r\n                          </td>\r\n                        )}\r\n                        {chkDOB && (\r\n                          <th className={classes.th}>\r\n                            {/* {FormatDateFromString(booking.birthDate)} */}\r\n                          </th>\r\n                        )}\r\n                        {chkEmail && (\r\n                          <td className={classes.td}>{booking.email}</td>\r\n                        )}\r\n                        {chkTel && (\r\n                          <td className={classes.td}>{booking.phone}</td>\r\n                        )}\r\n                        {chkCertificate && (\r\n                          <td className={classes.td}>\r\n                            {booking.certificate ? \"YES\" : \"NO\"}\r\n                          </td>\r\n                        )}\r\n                        {chkAntiBodyTest && (\r\n                          <td className={classes.td}>\r\n                            {booking.antiBodyTest ? \"YES\" : \"NO\"}\r\n                          </td>\r\n                        )}\r\n                        {chkextRef && (\r\n                          <td className={classes.td}>{booking.extRef}</td>\r\n                        )}\r\n                        {chkPrice && (\r\n                          <td className={classes.td}>\r\n                            {PriceCalculator.calculatePrice(booking)}\r\n                          </td>\r\n                        )}\r\n                      </tr>\r\n                    ))}\r\n                </table>\r\n              </div>\r\n            </div>\r\n          </DialogContent>\r\n        </Dialog>\r\n      )}\r\n    </React.Fragment>\r\n  );\r\n} ","import DashboardIcon from \"@material-ui/icons/Dashboard\";\r\nimport NewReleasesIcon from \"@material-ui/icons/NewReleases\";\r\nimport HistoryIcon from \"@material-ui/icons/History\";\r\nimport TimelineIcon from \"@material-ui/icons/Timeline\";\r\nimport DescriptionIcon from \"@material-ui/icons/Description\";\r\nimport SearchIcon from \"@material-ui/icons/Search\";\r\nimport AutorenewIcon from \"@material-ui/icons/Autorenew\";\r\nimport LiveTvIcon from \"@material-ui/icons/LiveTv\";\r\nimport PlaylistAddCheckIcon from \"@material-ui/icons/PlaylistAddCheck\";\r\nimport WarningIcon from \"@material-ui/icons/Warning\";\r\nimport AddCircleOutlineIcon from \"@material-ui/icons/AddCircleOutline\";\r\nimport DeleteIcon from \"@material-ui/icons/Delete\";\r\nimport HourglassEmptyIcon from \"@material-ui/icons/HourglassEmpty\";\r\nimport DateRangeIcon from \"@material-ui/icons/DateRange\";\r\nimport EventNoteIcon from \"@material-ui/icons/EventNote\";\r\nimport AirplanemodeActiveIcon from \"@material-ui/icons/AirplanemodeActive\";\r\n/// PCR ------------------\r\nimport FindByRef from \"./PCR/FindByRef\";\r\nimport BookingTable from \"./PCR/BookingTable\";\r\nimport DashboardPreview from \"./PCR/DashboardPreview\";\r\nimport UnmatchedRecords from \"./PCR/UnmatchedRecords\";\r\n// import CalendarView from \"./PCR/calendar/CalendarView\";\r\nimport PCRCalendarView from \"./PCR/calendar-admin/CalendarView\";\r\n//-----------------------\r\n\r\n/// Gynae -------------------\r\nimport GynaeBookingTable from \"./Gynae/BookingTable\";\r\nimport GynaeDashboardPreview from \"./Gynae/DashboardPreview\";\r\nimport GynaeFindByRef from \"./Gynae/FindByRef\";\r\nimport GynaeCalendarView from \"./Gynae/calendar-admin/CalendarView\";\r\n//----------------------------\r\n\r\n/// GP -------------------\r\nimport GPBookingTable from \"./GP/BookingTable\";\r\nimport GPDashboardPreview from \"./GP/DashboardPreview\";\r\nimport GPFindByRef from \"./GP/FindByRef\";\r\nimport GPCalendarView from \"./GP/calendar-admin/CalendarView\";\r\n//----------------------------\r\n\r\n/// GP -------------------\r\nimport STDBookingTable from \"./STD/BookingTable\";\r\nimport STDDashboardPreview from \"./STD/DashboardPreview\";\r\nimport STDFindByRef from \"./STD/FindByRef\";\r\nimport STDCalendarView from \"./STD/calendar-admin/CalendarView\";\r\n//----------------------------\r\n\r\n// OV Admin ----------------\r\nimport OVBookingTable from \"./OV/BookingTable\";\r\n\r\n//---------------\r\n\r\nexport const MenuList_OV_Admin = [\r\n  {\r\n    index: 1,\r\n    id: `recentBookings`,\r\n    title: `Recent Bookings`,\r\n    icon: <AutorenewIcon />,\r\n  },\r\n  {\r\n    index: 2,\r\n    id: `todayBookings`,\r\n    title: `Today's Bookings`,\r\n    icon: <NewReleasesIcon />,\r\n  },\r\n  {\r\n    index: 3,\r\n    id: `oldBookings`,\r\n    title: `Old Bookings`,\r\n    icon: <HistoryIcon />,\r\n  },\r\n  {\r\n    index: 4,\r\n    id: `futureBookings`,\r\n    title: `Future Bookings`,\r\n    icon: <TimelineIcon />,\r\n  },\r\n  {\r\n    index: 5,\r\n    id: `allBookings`,\r\n    title: `All Bookings`,\r\n    icon: <DescriptionIcon />,\r\n  },\r\n  {\r\n    index: 6,\r\n    id: `deletedBookings`,\r\n    title: `Archived Records`,\r\n    icon: <DeleteIcon />,\r\n  },\r\n\r\n];\r\n\r\n\r\n\r\nexport const MenuList_Admin = [\r\n  { index: 0, id: `dashboard`, title: `Dashboard`, icon: <DashboardIcon /> },\r\n  {\r\n    index: 1,\r\n    id: `recentBookings`,\r\n    title: `Recent Bookings`,\r\n    icon: <AutorenewIcon />,\r\n  },\r\n  {\r\n    index: 2,\r\n    id: `todayBookings`,\r\n    title: `Today's Bookings`,\r\n    icon: <NewReleasesIcon />,\r\n  },\r\n  {\r\n    index: 3,\r\n    id: `oldBookings`,\r\n    title: `Old Bookings`,\r\n    icon: <HistoryIcon />,\r\n  },\r\n  {\r\n    index: 4,\r\n    id: `futureBookings`,\r\n    title: `Future Bookings`,\r\n    icon: <TimelineIcon />,\r\n  },\r\n  {\r\n    index: 5,\r\n    id: `allBookings`,\r\n    title: `All Bookings`,\r\n    icon: <DescriptionIcon />,\r\n  },\r\n  {\r\n    index: 6,\r\n    id: `deletedBookings`,\r\n    title: `Deleted Records`,\r\n    icon: <DeleteIcon />,\r\n  },\r\n\r\n  {\r\n    index: 7,\r\n    id: `calendarView`,\r\n    title: `Calendar View`,\r\n    icon: <DateRangeIcon />,\r\n  },\r\n\r\n  { index: 8, id: `findByRef`, title: `Find By Ref No`, icon: <SearchIcon /> },\r\n];\r\n\r\nexport const MenuList_Gynae = [\r\n  { index: 0, id: `dashboard`, title: `Dashboard`, icon: <DashboardIcon /> },\r\n  {\r\n    index: 1,\r\n    id: `recentBookings`,\r\n    title: `Recent Bookings`,\r\n    icon: <AutorenewIcon />,\r\n  },\r\n  {\r\n    index: 2,\r\n    id: `todayBookings`,\r\n    title: `Today's Bookings`,\r\n    icon: <NewReleasesIcon />,\r\n  },\r\n  {\r\n    index: 3,\r\n    id: `oldBookings`,\r\n    title: `Old Bookings`,\r\n    icon: <HistoryIcon />,\r\n  },\r\n  {\r\n    index: 4,\r\n    id: `futureBookings`,\r\n    title: `Future Bookings`,\r\n    icon: <TimelineIcon />,\r\n  },\r\n  {\r\n    index: 5,\r\n    id: `allBookings`,\r\n    title: `All Bookings`,\r\n    icon: <DescriptionIcon />,\r\n  },\r\n  {\r\n    index: 6,\r\n    id: `deletedBookings`,\r\n    title: `Deleted Records`,\r\n    icon: <DeleteIcon />,\r\n  },\r\n  {\r\n    index: 7,\r\n    id: `calendarView`,\r\n    title: `Calendar View`,\r\n    icon: <DateRangeIcon />,\r\n  },\r\n  { index: 8, id: `findByRef`, title: `Find By Ref No`, icon: <SearchIcon /> },\r\n];\r\n\r\nexport const MenuList_GP = [\r\n  { index: 0, id: `dashboard`, title: `Dashboard`, icon: <DashboardIcon /> },\r\n  {\r\n    index: 1,\r\n    id: `recentBookings`,\r\n    title: `Recent Bookings`,\r\n    icon: <AutorenewIcon />,\r\n  },\r\n  {\r\n    index: 2,\r\n    id: `todayBookings`,\r\n    title: `Today's Bookings`,\r\n    icon: <NewReleasesIcon />,\r\n  },\r\n  {\r\n    index: 3,\r\n    id: `oldBookings`,\r\n    title: `Old Bookings`,\r\n    icon: <HistoryIcon />,\r\n  },\r\n  {\r\n    index: 4,\r\n    id: `futureBookings`,\r\n    title: `Future Bookings`,\r\n    icon: <TimelineIcon />,\r\n  },\r\n  {\r\n    index: 5,\r\n    id: `allBookings`,\r\n    title: `All Bookings`,\r\n    icon: <DescriptionIcon />,\r\n  },\r\n  {\r\n    index: 6,\r\n    id: `deletedBookings`,\r\n    title: `Deleted Records`,\r\n    icon: <DeleteIcon />,\r\n  },\r\n  {\r\n    index: 7,\r\n    id: `calendarView`,\r\n    title: `Calendar View`,\r\n    icon: <DateRangeIcon />,\r\n  },\r\n  { index: 8, id: `findByRef`, title: `Find By Ref No`, icon: <SearchIcon /> },\r\n];\r\n\r\nexport const MenuList_STD = [\r\n  { index: 0, id: `dashboard`, title: `Dashboard`, icon: <DashboardIcon /> },\r\n  {\r\n    index: 1,\r\n    id: `recentBookings`,\r\n    title: `Recent Bookings`,\r\n    icon: <AutorenewIcon />,\r\n  },\r\n  {\r\n    index: 2,\r\n    id: `todayBookings`,\r\n    title: `Today's Bookings`,\r\n    icon: <NewReleasesIcon />,\r\n  },\r\n  {\r\n    index: 3,\r\n    id: `oldBookings`,\r\n    title: `Old Bookings`,\r\n    icon: <HistoryIcon />,\r\n  },\r\n  {\r\n    index: 4,\r\n    id: `futureBookings`,\r\n    title: `Future Bookings`,\r\n    icon: <TimelineIcon />,\r\n  },\r\n  {\r\n    index: 5,\r\n    id: `allBookings`,\r\n    title: `All Bookings`,\r\n    icon: <DescriptionIcon />,\r\n  },\r\n  {\r\n    index: 6,\r\n    id: `deletedBookings`,\r\n    title: `Deleted Records`,\r\n    icon: <DeleteIcon />,\r\n  },\r\n  {\r\n    index: 7,\r\n    id: `calendarView`,\r\n    title: `Calendar View`,\r\n    icon: <DateRangeIcon />,\r\n  },\r\n  { index: 8, id: `findByRef`, title: `Find By Ref No`, icon: <SearchIcon /> },\r\n];\r\n\r\nexport const MenuList_PCR = [\r\n  { index: 0, id: `dashboard`, title: `Dashboard`, icon: <DashboardIcon /> },\r\n  {\r\n    index: 1,\r\n    id: `recentBookings`,\r\n    title: `Recent Bookings`,\r\n    icon: <AutorenewIcon />,\r\n  },\r\n  {\r\n    index: 2,\r\n    id: `todayBookings`,\r\n    title: `Today's Bookings`,\r\n    icon: <NewReleasesIcon />,\r\n  },\r\n  {\r\n    index: 3,\r\n    id: `liveBookings`,\r\n    title: `Live Bookings`,\r\n    icon: <LiveTvIcon />,\r\n  },\r\n  { index: 4, id: `oldBookings`, title: `Old Bookings`, icon: <HistoryIcon /> },\r\n  {\r\n    index: 5,\r\n    id: `futureBookings`,\r\n    title: `Future Bookings`,\r\n    icon: <TimelineIcon />,\r\n  },\r\n  {\r\n    index: 6,\r\n    id: `allBookings`,\r\n    title: `All Bookings`,\r\n    icon: <DescriptionIcon />,\r\n  },\r\n  {\r\n    index: 7,\r\n    id: `completedBookings`,\r\n    title: `Completed Bookings`,\r\n    icon: <PlaylistAddCheckIcon />,\r\n  },\r\n  {\r\n    index: 8,\r\n    id: `positiveBookings`,\r\n    title: `Positive Results`,\r\n    icon: <AddCircleOutlineIcon />,\r\n  },\r\n  {\r\n    index: 9,\r\n    id: `latebookings`,\r\n    title: `40 Hours Late`,\r\n    icon: <HourglassEmptyIcon />,\r\n  },\r\n  {\r\n    index: 10,\r\n    id: `deletedBookings`,\r\n    title: `Deleted Records`,\r\n    icon: <DeleteIcon />,\r\n  },\r\n  {\r\n    index: 11,\r\n    id: `trBookings`,\r\n    title: `TR Bookings`,\r\n    icon: <AirplanemodeActiveIcon />,\r\n  },\r\n  {\r\n    index: 12,\r\n    id: `unmatchedRecords`,\r\n    title: `Unmatched Records`,\r\n    icon: <WarningIcon />,\r\n  },\r\n  {\r\n    index: 13,\r\n    id: `calendarView`,\r\n    title: `Calendar View`,\r\n    icon: <DateRangeIcon />,\r\n  },\r\n  // {\r\n  //   index: 14,\r\n  //   id: `adminCalendarView`,\r\n  //   title: `Admin Calendar`,\r\n  //   icon: <EventNoteIcon />,\r\n  // },\r\n  { index: 15, id: `findByRef`, title: `Find By Ref No`, icon: <SearchIcon /> },\r\n];\r\n\r\nexport const getMenuContent = (role, index) => {\r\n   if (role === \"ovadmin\") {\r\n    switch (index) {\r\n      case 1:\r\n        return <OVBookingTable date=\"recent\" />;\r\n      case 2:\r\n        return <OVBookingTable date=\"today\" />;\r\n      case 3:\r\n        return <OVBookingTable date=\"old\" />;\r\n      case 4:\r\n        return <OVBookingTable date=\"future\" />;\r\n      case 5:\r\n        return <OVBookingTable date=\"all\" />;\r\n      case 6:\r\n        return <OVBookingTable date=\"deleted\" />;\r\n      default:\r\n        return `Page Not Found!`;\r\n    }\r\n  } else {\r\n    return `Page Not Found!`;\r\n  }\r\n};\r\n\r\nexport const getMenuRole = (role) => {\r\n  switch (role) {\r\n    case \"ovadmin\":\r\n      return MenuList_OV_Admin;\r\n    default:\r\n      return [];\r\n  }\r\n};\r\n\r\nexport const getMenuId = (role, index) => {\r\n  const MenuList = getMenuRole(role);\r\n  for (var i = 0; i < MenuList.length; i++) {\r\n    if (MenuList[i].index === index) {\r\n      return MenuList[i].id;\r\n    }\r\n  }\r\n\r\n  return `Page Not Found!`;\r\n};\r\n\r\nexport const getMenuIndex = (role, id) => {\r\n  const MenuList = getMenuRole(role);\r\n  for (var i = 0; i < MenuList.length; i++) {\r\n    if (MenuList[i].id === id) {\r\n      return MenuList[i].index;\r\n    }\r\n  }\r\n\r\n  return -1;\r\n};\r\n","export const getRole = () => {\r\n    return sessionStorage.getItem('medexadmin-role')\r\n}\r\n\r\nexport const setRole = (role) => {\r\n    return sessionStorage.setItem('medexadmin-role', role)\r\n}\r\n\r\nexport const clearRole = (role) => {\r\n    return sessionStorage.removeItem('medexadmin-role')\r\n}","import React from \"react\";\r\nimport Avatar from \"@material-ui/core/Avatar\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport CssBaseline from \"@material-ui/core/CssBaseline\";\r\nimport TextField from \"@material-ui/core/TextField\";\r\nimport Link from \"@material-ui/core/Link\";\r\nimport Box from \"@material-ui/core/Box\";\r\nimport LockOutlinedIcon from \"@material-ui/icons/LockOutlined\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport Container from \"@material-ui/core/Container\";\r\nimport GlobalState from \"./GlobalState\";\r\nimport Alert from \"@material-ui/lab/Alert\";\r\n\r\nimport logoImage from \"./images/optimal-vision-logo.png\"\r\n\r\nimport {\r\n  Grid,\r\n  AppBar,\r\n  Checkbox,\r\n  FormControl,\r\n  FormControlLabel,\r\n  InputAdornment,\r\n  InputLabel,\r\n  OutlinedInput,\r\n  Paper,\r\n  Backdrop,\r\n  CircularProgress,\r\n} from \"@material-ui/core\";\r\nimport { IconButton, Toolbar } from \"@material-ui/core\";\r\nimport { Visibility, VisibilityOff } from \"@material-ui/icons\";\r\nimport clsx from \"clsx\";\r\nimport Copyright from \"./CopyRight\";\r\n\r\nimport { useHistory } from \"react-router-dom\";\r\nimport UserService from \"./services/UserService\";\r\nimport { getMenuId } from \"./MenuList\";\r\n\r\nimport { useMediaQuery } from 'react-responsive'\r\nimport { borderRadius } from \"@material-ui/system\";\r\nimport { setRole } from \"./Role\";\r\nimport { getGlobalPath } from \"./GlobalPath\";\r\n\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    minHeight: \"100vh\",\r\n  },\r\n  image: {\r\n    backgroundImage: \"url(/images/bg.jpg)\",\r\n    backgroundRepeat: \"no-repeat\",\r\n    backgroundColor:\r\n      theme.palette.type === \"light\"\r\n        ? theme.palette.grey[50]\r\n        : theme.palette.grey[900],\r\n    backgroundSize: \"cover\",\r\n    backgroundPosition: \"center\",\r\n  },\r\n  paper: {\r\n    // margin: theme.spacing(15, 2),\r\n    padding: theme.spacing(4,4),\r\n    display: \"flex\",\r\n    flexDirection: \"column\",\r\n    alignItems: \"center\",\r\n    position: \"relative\"\r\n    // border: `2px solid ${theme.palette.primary.main}`,\r\n    // borderRadius: \"8px\"\r\n  },\r\n  avatar: {\r\n    margin: theme.spacing(1),\r\n    backgroundColor: theme.palette.secondary.main,\r\n  },\r\n  form: {\r\n    width: \"100%\", // Fix IE 11 issue.\r\n    marginTop: theme.spacing(1),\r\n  },\r\n  submit: {\r\n    margin: theme.spacing(3, 0, 2),\r\n    color: \"#f5f5f5\",\r\n  },\r\n\r\n  margin: {\r\n    marginTop: theme.spacing(2),\r\n    marginBottom: theme.spacing(2),\r\n  },\r\n\r\n  alert: {\r\n    width: \"100%\",\r\n    marginTop: theme.spacing(2),\r\n    marginBottom: theme.spacing(2),\r\n  },\r\n\r\n  backdrop: {\r\n    zIndex: theme.zIndex.drawer + 1,\r\n    color: \"#fff\",\r\n  },\r\n\r\n  pageBg:{\r\n    paddingTop: theme.spacing(15),\r\n   \r\n    background: \"linear-gradient(274deg, rgba(255,255,255,1) 0%, rgba(255,255,255,1) 5%, rgba(210,210,210,1) 100%)\",\r\n    height: \"100vh\",\r\n    margin: 0,\r\n    padding:0,\r\n  },\r\n\r\n  appbarCenter: {\r\n    position: \"absolute\",\r\n    // width: \"260px\",\r\n    top: \"-40px\",\r\n    right: \"0\",\r\n    marginLeft: \"-145px\",\r\n    alignItems: \"center\",\r\n    justify: \"center\",\r\n    display: \"flex\",\r\n    backgroundColor: \"#fff\",\r\n    padding: \"5px 20px 15px 20px\",\r\n    borderRadius: \"8px\"\r\n  },\r\n\r\n  logoImage: {\r\n    width: \"30px\",\r\n    height: \"30px\",\r\n    marginLeft: \"0px\",\r\n  },\r\n\r\n  appbarTitle: {\r\n    color: \"#00a1c5\",\r\n    fontSize: \"1.2rem\",\r\n    fontWeight: \"500\",\r\n    marginRight: \"15px\",\r\n  },\r\n\r\n  adminPanelLabel: {\r\n    color: theme.palette.secondary.main, \r\n    fontWeight: \"600\",\r\n    marginBottom:\"20px\"\r\n  }\r\n\r\n\r\n\r\n\r\n}));\r\n\r\nexport default function SignIn() {\r\n  const classes = useStyles();\r\n  const [state, setState] = React.useContext(GlobalState);\r\n  const isMobile = useMediaQuery({ maxWidth: 1224 })\r\n\r\n\r\n  let history = useHistory();\r\n\r\n  const [password, setPassword] = React.useState(\"\");\r\n\r\n  const [username, setUsername] = React.useState(\"\");\r\n\r\n  const [saveChecked, setSaveChecked] = React.useState(false);\r\n\r\n  const [showPassword, setShowPassword] = React.useState(false);\r\n\r\n  const [error, setError] = React.useState(null);\r\n  const [submiting, setSubmiting] = React.useState(false);\r\n\r\n  const signIn = () => {\r\n    setSubmiting(true);\r\n\r\n    UserService.signIn({\r\n      username: username,\r\n      password: password,\r\n    })\r\n      .then((res) => {\r\n        setSubmiting(false);\r\n        if (res.data.status === \"OK\") {\r\n          setError(null);\r\n          const token = res.data.token;\r\n          if (saveChecked) {\r\n            localStorage.setItem(\"ovadmin-auth-token\", token);\r\n          } else {\r\n            sessionStorage.setItem(\"ovadmin-auth-token\", token);\r\n          }\r\n\r\n          setState((state) => ({ ...state, signedIn: true }));\r\n          setRole(res.data.roles[0])\r\n          setState((state) => ({ ...state, currentMenuIndex: 0 }));\r\n          history.push(getGlobalPath(`/${getMenuId(res.data.roles[0], 0)}`));\r\n        } else if (res.data.status === \"FAILED\") {\r\n          setError(res.data.error);\r\n        } else {\r\n          setError(\"Sorry, something went wrong, please try again.\");\r\n        }\r\n      })\r\n      .catch((err) => {\r\n        setSubmiting(false);\r\n        console.error(err);\r\n        setError(\"Sorry, something went wrong, please try again.\");\r\n      });\r\n  };\r\n\r\n  const usernameChanged = (event) => {\r\n    setUsername(event.target.value);\r\n    setError(null);\r\n  };\r\n\r\n  const passwordChanged = (event) => {\r\n    setPassword(event.target.value);\r\n    setError(null);\r\n  };\r\n\r\n  const handleClickShowPassword = () => {\r\n    setShowPassword(!showPassword);\r\n  };\r\n\r\n  const handleMouseDownPassword = (event) => {\r\n    event.preventDefault();\r\n  };\r\n\r\n  const saveCheckedChanged = (event) => {\r\n    setSaveChecked(event.target.checked);\r\n  };\r\n\r\n  return (\r\n    <div className={classes.pageBg}>\r\n      <Container component=\"main\" maxWidth=\"xs\">\r\n        <CssBaseline />\r\n\r\n        <Paper elevation={20}>\r\n          <div className={classes.paper}>\r\n            {/* <div className={classes.appbarCenter}>\r\n              <span className={classes.appbarTitle}>\r\n                Medical Express Clinic\r\n              </span>\r\n\r\n              <img\r\n                className={classes.logoImage}\r\n                src={getGlobalPath(\"/images/logo.png\")}\r\n                alt=\"logo image\"\r\n              />\r\n            </div> */}\r\n\r\n            <img src={logoImage} alt=\"Optimal Vision\" style={{marginBottom:\"20px\"}}/>\r\n\r\n            <Avatar className={classes.avatar}>\r\n              <LockOutlinedIcon />\r\n            </Avatar>\r\n            <Typography\r\n              component=\"h1\"\r\n              variant=\"h6\"\r\n              className={classes.adminPanelLabel}\r\n            >\r\n              Admin Panel\r\n            </Typography>\r\n\r\n            {error && (\r\n              <div className={classes.alert}>\r\n                <Alert severity=\"error\">\r\n                  {\" \"}\r\n                  <div style={{ lineHeight: \"1.5rem\", textAlign: \"justify\" }}>\r\n                    {error}\r\n                  </div>\r\n                </Alert>\r\n              </div>\r\n            )}\r\n\r\n            <TextField\r\n              variant=\"outlined\"\r\n              margin=\"normal\"\r\n              required\r\n              fullWidth\r\n              id=\"username\"\r\n              label=\"Username\"\r\n              name=\"email\"\r\n              autoComplete=\"username\"\r\n              value={username}\r\n              onChange={usernameChanged}\r\n              on\r\n              autoFocus\r\n            />\r\n            <FormControl\r\n              fullWidth\r\n              required\r\n              className={clsx(classes.margin, classes.textField)}\r\n              variant=\"outlined\"\r\n              onKeyPress={(event) => {\r\n                if (event.key === \"Enter\") {\r\n                  signIn();\r\n                }\r\n              }}\r\n            >\r\n              <InputLabel htmlFor=\"outlined-adornment-password\">\r\n                {\" \"}\r\n                Password{\" \"}\r\n              </InputLabel>\r\n              <OutlinedInput\r\n                id=\"outlined-adornment-password\"\r\n                name=\"outlined-adornment-password\"\r\n                type={showPassword ? \"text\" : \"password\"}\r\n                value={password}\r\n                onChange={passwordChanged}\r\n                autoComplete=\"current-password\"\r\n                endAdornment={\r\n                  <InputAdornment position=\"end\">\r\n                    <IconButton\r\n                      tabindex=\"-1\"\r\n                      aria-label=\"toggle password visibility\"\r\n                      onClick={handleClickShowPassword}\r\n                      onMouseDown={handleMouseDownPassword}\r\n                    >\r\n                      {showPassword ? <Visibility /> : <VisibilityOff />}\r\n                    </IconButton>\r\n                  </InputAdornment>\r\n                }\r\n                labelWidth={100}\r\n              />\r\n            </FormControl>\r\n\r\n            <FormControlLabel\r\n              style={{ textAlign: \"left\", width: \"100%\" }}\r\n              control={\r\n                <Checkbox\r\n                  value=\"remember\"\r\n                  color=\"primary\"\r\n                  checked={saveChecked}\r\n                  onChange={saveCheckedChanged}\r\n                />\r\n              }\r\n              label=\"Remember me\"\r\n            />\r\n            <Button\r\n              fullWidth\r\n              variant=\"contained\"\r\n              color=\"primary\"\r\n              onClick={signIn}\r\n              className={classes.submit}\r\n            >\r\n              Sign In\r\n            </Button>\r\n          </div>\r\n        </Paper>\r\n\r\n        <Backdrop className={classes.backdrop} open={submiting}>\r\n          <Grid\r\n            container\r\n            direction=\"column\"\r\n            justify=\"center\"\r\n            alignItems=\"center\"\r\n            spacing={2}\r\n          >\r\n            <Grid item>\r\n              <CircularProgress color=\"inherit\" />\r\n            </Grid>\r\n            <Grid item>\r\n              <span style={{ textAlign: \"center\", color: \"#fff\" }}>\r\n                {\" \"}\r\n                {/* Please wait ...{\" \"} */}\r\n              </span>\r\n            </Grid>\r\n          </Grid>\r\n        </Backdrop>\r\n\r\n        <Box mt={5} style={{ color: \"#eee\" }}>\r\n          {/* <Copyright /> */}\r\n        </Box>\r\n      </Container>\r\n    </div>\r\n  );\r\n}\r\n","import React, { useEffect } from \"react\";\r\nimport clsx from \"clsx\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport { useHistory } from \"react-router-dom\";\r\n\r\nimport {\r\n  Badge,\r\n  Divider,\r\n  Grid,\r\n  IconButton,\r\n  ListItemIcon,\r\n  Tooltip,\r\n} from \"@material-ui/core\";\r\nimport GlobalState from \"./GlobalState\";\r\nimport { List, ListItem } from \"@material-ui/core\";\r\n\r\nimport ListItemText from \"@material-ui/core/ListItemText\";\r\nimport { getMenuRole, getMenuId } from \"./MenuList\";\r\nimport { border, borderBottom } from \"@material-ui/system\";\r\nimport { getGlobalPath } from \"./GlobalPath\";\r\n\r\nimport GyaneBookService from \"./Gynae/services/BookService\"\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  paper: {\r\n    padding: theme.spacing(2),\r\n    display: \"flex\",\r\n    overflow: \"auto\",\r\n    flexDirection: \"column\",\r\n  },\r\n  fixedHeight: {\r\n    height: 240,\r\n  },\r\n\r\n  icon: {\r\n    fontSize: \"1rem\",\r\n    color: \"#777\",\r\n    cursor: \"pointer\",\r\n    paddingTop: \"10px\",\r\n    paddingBottom: \"8px\",\r\n    borderBottom: \"1px solid #eee\",\r\n  },\r\n\r\n  iconSelected: {\r\n    color: \"#fff\",\r\n    backgroundColor:  theme.palette.primary.main,\r\n    transition: \"all 0.1s ease-in-out\"\r\n  },\r\n\r\n  menuText: {\r\n    fontSize: \"1rem\",\r\n    fontWeight: \"500\"\r\n  },\r\n\r\n  Badge:{\r\n    backgroundColor: \"rgb(220, 0, 78)\",\r\n    color: \"#fff\",\r\n    fontWeight: \"600\",\r\n    textAlign:\"center\",\r\n    borderRadius: \"50%\",\r\n    fontSize: \"0.85rem\",\r\n    lineHeight: \"0.85rem\",\r\n    padding:\"7px\",\r\n    marginTop:\"9px\",\r\n    width:\"28px\"\r\n\r\n  }\r\n}));\r\n\r\nexport default function MyMenu() {\r\n  const classes = useStyles();\r\n  const [state, setState] = React.useContext(GlobalState);\r\n\r\n  const [selectedIndex, setSelectedIndex] = React.useState(0);\r\n\r\n  let history = useHistory();\r\n\r\n  const updateShouldRefundsCount = async () =>\r\n  {\r\n    try{\r\n      const res = await GyaneBookService.getShouldRefundsCount()\r\n      if (res && res.data && res.data.status === \"OK\")\r\n      {\r\n        setState(state => ({...state, shouldRefunsCount: res.data.count}))\r\n      }\r\n    }\r\n    catch(ex)\r\n    {\r\n      console.error(ex)\r\n    }\r\n  }\r\n\r\n  useEffect(() => {\r\n    setSelectedIndex(state.currentMenuIndex);\r\n    updateShouldRefundsCount()\r\n  }, [state.currentMenuIndex]);\r\n\r\n  const handleListItemClick = (event, index) => {\r\n    setSelectedIndex(index);\r\n    setState((state) => ({ ...state, currentMenuIndex: index }));\r\n\r\n    history.push(getGlobalPath(`/${getMenuId(state.role,index)}`));\r\n  };\r\n\r\n  return (\r\n    <React.Fragment>\r\n      <List>\r\n        {state.role &&\r\n          getMenuRole(state.role).map(\r\n            (item) =>\r\n              !item.hidden && (\r\n                // <ListItem button selected={selectedIndex === item.index} onClick={(event) => handleListItemClick(event, item.index)}>\r\n                // <ListItemIcon>\r\n                //     {item.icon}\r\n                // </ListItemIcon>\r\n                // <ListItemText primary={`${item.title}`} />\r\n                // </ListItem>\r\n                <React.Fragment key={`${item.id}`}>\r\n                  <div\r\n                    key={`${item.id}`}\r\n                    className={clsx(\r\n                      classes.icon,\r\n                      selectedIndex === item.index && classes.iconSelected\r\n                    )}\r\n                    onClick={(event) => handleListItemClick(event, item.index)}\r\n                  >\r\n                    <Grid\r\n                      container\r\n                      direction=\"row\"\r\n                      justify=\"flex-start\"\r\n                      alignItems=\"flex-start\"\r\n                      spacing={3}\r\n                      style={{paddingLeft:\"15px\"}}\r\n                    >\r\n                      <Grid item>{item.icon}</Grid>\r\n\r\n                      <Grid item style={{textAlign:\"left\"}}>\r\n                        <span\r\n                          className={classes.menuText}\r\n                        >{`${item.title}`}</span>{\" \"}\r\n                      </Grid>\r\n\r\n                      {state.role === \"gynae\" && item.id === \"deletedBookings\" && state.shouldRefunsCount > 0 && (\r\n                        <span className={classes.Badge}> {state.shouldRefunsCount} </span>\r\n                      )}\r\n\r\n                    </Grid>\r\n                  </div>\r\n                </React.Fragment>\r\n              )\r\n          )}\r\n      </List>\r\n    </React.Fragment>\r\n  );\r\n}\r\n","import React, { useEffect } from \"react\";\r\nimport clsx from \"clsx\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport CssBaseline from \"@material-ui/core/CssBaseline\";\r\nimport Drawer from \"@material-ui/core/Drawer\";\r\nimport Box from \"@material-ui/core/Box\";\r\nimport AppBar from \"@material-ui/core/AppBar\";\r\nimport Toolbar from \"@material-ui/core/Toolbar\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport Divider from \"@material-ui/core/Divider\";\r\nimport IconButton from \"@material-ui/core/IconButton\";\r\nimport Container from \"@material-ui/core/Container\";\r\nimport Link from \"@material-ui/core/Link\";\r\nimport MenuIcon from \"@material-ui/icons/Menu\";\r\nimport ChevronLeftIcon from \"@material-ui/icons/ChevronLeft\";\r\n\r\nimport { Avatar, Button, Grid, Tooltip, withStyles } from \"@material-ui/core\";\r\nimport GlobalState from \"./GlobalState\";\r\nimport MyMenu from \"./Menu\";\r\nimport { getMenuContent, getMenuId, getMenuIndex } from \"./MenuList\";\r\n\r\nimport { useLocation, useHistory } from \"react-router-dom\";\r\nimport Copyright from \"./CopyRight\";\r\nimport { useMediaQuery } from \"react-responsive\";\r\nimport PersonOutlineIcon from \"@material-ui/icons/PersonOutline\";\r\nimport AppsIcon from \"@material-ui/icons/Apps\";\r\nimport MenuItem from \"@material-ui/core/MenuItem\";\r\nimport Menu from \"@material-ui/core/Menu\";\r\nimport dateformat from \"dateformat\";\r\nimport { getRole, setRole, clearRole } from \"./Role\";\r\nimport { getGlobalPath, getMenuIdFromGlobalPath } from \"./GlobalPath\";\r\n\r\nimport logoImage from \"./images/optimal-vision-logo.png\"\r\n\r\nconst drawerWidth = 240;\r\n\r\nconst StyledMenu = withStyles((theme) => ({\r\n  paper: {\r\n    marginTop: \"10px\",\r\n    // marginRight: \"5px\",\r\n    width: \"200px\",\r\n    height: \"200px\",\r\n    border: `1px solid #ddd`,\r\n    borderRadius: \"10px\",\r\n    paddingTop: \"10px\",\r\n  },\r\n}))((props) => (\r\n  <Menu\r\n    elevation={4}\r\n    getContentAnchorEl={null}\r\n    anchorOrigin={{\r\n      vertical: \"bottom\",\r\n      horizontal: \"center\",\r\n    }}\r\n    transformOrigin={{\r\n      vertical: \"top\",\r\n      horizontal: \"center\",\r\n    }}\r\n    {...props}\r\n  />\r\n));\r\n\r\nconst StyledMenuApps = withStyles((theme) => ({\r\n  paper: {\r\n    marginTop: \"5px\",\r\n    // marginRight: \"5px\",\r\n    width: \"280px\",\r\n    height: \"280px\",\r\n    border: `1px solid #ddd`,\r\n    borderRadius: \"10px\",\r\n    padding: \"10px\",\r\n  },\r\n}))((props) => (\r\n  <Menu\r\n    elevation={4}\r\n    getContentAnchorEl={null}\r\n    anchorOrigin={{\r\n      vertical: \"bottom\",\r\n      horizontal: \"center\",\r\n    }}\r\n    transformOrigin={{\r\n      vertical: \"top\",\r\n      horizontal: \"center\",\r\n    }}\r\n    {...props}\r\n  />\r\n));\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    display: \"flex\",\r\n  },\r\n  toolbar: {\r\n    paddingRight: 24, // keep right padding when drawer closed\r\n  },\r\n  toolbarIcon: {\r\n    display: \"flex\",\r\n    alignItems: \"center\",\r\n    justifyContent: \"flex-end\",\r\n    padding: \"0 8px\",\r\n    ...theme.mixins.toolbar,\r\n  },\r\n  appBar: {\r\n    zIndex: theme.zIndex.drawer + 1,\r\n    transition: theme.transitions.create([\"width\", \"margin\"], {\r\n      easing: theme.transitions.easing.sharp,\r\n      duration: theme.transitions.duration.leavingScreen,\r\n    }),\r\n  },\r\n  appBarShift: {\r\n    marginLeft: drawerWidth,\r\n    width: `calc(100% - ${drawerWidth}px)`,\r\n    transition: theme.transitions.create([\"width\", \"margin\"], {\r\n      easing: theme.transitions.easing.sharp,\r\n      duration: theme.transitions.duration.enteringScreen,\r\n    }),\r\n  },\r\n  menuButton: {\r\n    // marginRight: 36,\r\n  },\r\n  menuButtonHidden: {\r\n    display: \"none\",\r\n  },\r\n  title: {\r\n    flexGrow: 1,\r\n  },\r\n  drawerPaper: {\r\n    position: \"relative\",\r\n    whiteSpace: \"nowrap\",\r\n    overflowX: \"hidden\",\r\n    width: drawerWidth,\r\n    transition: theme.transitions.create(\"width\", {\r\n      easing: theme.transitions.easing.sharp,\r\n      duration: theme.transitions.duration.enteringScreen,\r\n    }),\r\n\r\n    [theme.breakpoints.down(\"sm\")]: {\r\n      opacity: 0.9,\r\n    },\r\n  },\r\n  drawerPaperClose: {\r\n    overflowX: \"hidden\",\r\n    transition: theme.transitions.create(\"width\", {\r\n      easing: theme.transitions.easing.sharp,\r\n      duration: theme.transitions.duration.leavingScreen,\r\n    }),\r\n    width: theme.spacing(7),\r\n    [theme.breakpoints.up(\"sm\")]: {\r\n      width: theme.spacing(9),\r\n    },\r\n  },\r\n  appBarSpacer: theme.mixins.toolbar,\r\n  content: {\r\n    flexGrow: 1,\r\n    height: \"100vh\",\r\n    overflow: \"auto\",\r\n  },\r\n  container: {\r\n    paddingTop: theme.spacing(2),\r\n    paddingBottom: theme.spacing(2),\r\n  },\r\n  paper: {\r\n    padding: theme.spacing(2),\r\n    display: \"flex\",\r\n    overflow: \"auto\",\r\n    flexDirection: \"column\",\r\n  },\r\n  fixedHeight: {\r\n    height: 240,\r\n  },\r\n\r\n  appbarTitle: {\r\n    color: \"#00a1c5\",\r\n    fontSize: \"1.2rem\",\r\n    fontWeight: \"500\",\r\n    marginRight: \"15px\",\r\n  },\r\n\r\n  appbarCenter: {\r\n    position: \"fixed\",\r\n    width: \"260px\",\r\n    top: \"10px\",\r\n    left: \"50%\",\r\n    marginLeft: \"-130px\",\r\n    alignItems: \"center\",\r\n    justify: \"center\",\r\n    display: \"flex\",\r\n  },\r\n\r\n  logoImage: {\r\n    width: \"204px\",\r\n    height: \"45px\",\r\n    // marginLeft: \"0px\",\r\n  },\r\n\r\n  logoImageMenu: {\r\n    width: \"136px\",\r\n    height: \"30px\",\r\n  },\r\n\r\n\r\n  userAvatar: {\r\n    backgroundColor: \"#fff\",\r\n    borderColor: \"#aaa\",\r\n    border: \"1px solid\",\r\n    color: \"#aaa\",\r\n    cursor: \"pointer\",\r\n  },\r\n\r\n  userAvatarSelected: {\r\n    backgroundColor: \"#fff\",\r\n    borderColor: theme.palette.primary.main,\r\n    border: \"1px solid\",\r\n    color: theme.palette.primary.main,\r\n    cursor: \"pointer\",\r\n  },\r\n\r\n  userAvatarBig: {\r\n    backgroundColor: \"#fff\",\r\n    borderColor: theme.palette.primary.main,\r\n    border: \"1px solid\",\r\n    color: theme.palette.primary.main,\r\n    width: \"60px\",\r\n    height: \"60px\",\r\n  },\r\n\r\n  appBarText: {\r\n    color: \"#888\",\r\n    [theme.breakpoints.down(\"sm\")]: {\r\n      display: \"none\",\r\n    },\r\n  },\r\n\r\n  appBarAppsIcon: {\r\n    // color: \"#888\",\r\n    cursor: \"pointer\",\r\n    fontSize: \"1.8rem\",\r\n  },\r\n\r\n  appBarAppsIconSelected: {\r\n    cursor: \"pointer\",\r\n    fontSize: \"1.8rem\",\r\n    color: theme.palette.primary.main,\r\n  },\r\n\r\n  usernameLabel: {\r\n    fontSize: \"1.2rem\",\r\n    color: theme.palette.primary.main,\r\n    marginTop: \"5px\",\r\n    marginBottom: \"5px\",\r\n  },\r\n\r\n  lastLoginLabel: {\r\n    color: \"#777\",\r\n    paddingTop: \"5px\",\r\n  },\r\n\r\n  appsLogo: {\r\n    width: \"70px\",\r\n    height: \"70px\",\r\n  },\r\n\r\n  appsBox: {\r\n    cursor: \"pointer\",\r\n    transition: \"all 0.1s ease-in-out\",\r\n    padding: \"2px\",\r\n    borderBottom: `5px solid #fff`,\r\n    borderRadius: \"5px\",\r\n    // border: \"2px solid #fff\",\r\n    \"&:hover\": {\r\n      //      border: `2px solid ${theme.palette.primary.main}`,\r\n      //      borderRadius: \"10px\",\r\n      borderBottom: `5px solid ${theme.palette.primary.main}`,\r\n      transition: \"all 0.1s ease-in-out\",\r\n    },\r\n  },\r\n\r\n  appsBoxSelected: {\r\n    cursor: \"pointer\",\r\n    transition: \"all 0.1s ease-in-out\",\r\n    padding: \"2px\",\r\n    borderBottom: `5px solid${theme.palette.primary.light}`,\r\n    borderRadius: \"5px\",\r\n    // border: \"2px solid #fff\",\r\n    \"&:hover\": {\r\n      //      border: `2px solid ${theme.palette.primary.main}`,\r\n      //      borderRadius: \"10px\",\r\n      borderBottom: `5px solid ${theme.palette.primary.light}`,\r\n      transition: \"all 0.1s ease-in-out\",\r\n    },\r\n  },\r\n\r\n  appsAdminLabel: {\r\n    color: \"#0264d4\",\r\n    fontWeight: \"600\",\r\n    fontSize: \"0.95rem\",\r\n    marginTop: \"-10px\",\r\n  },\r\n\r\n  appsPCRLabel: {\r\n    color: \"#4faef7\",\r\n    fontWeight: \"600\",\r\n    fontSize: \"0.95rem\",\r\n    marginTop: \"-10px\",\r\n  },\r\n\r\n  appsGynaeLabel: {\r\n    color: \"#e83caf\",\r\n    fontWeight: \"600\",\r\n    fontSize: \"0.95rem\",\r\n    marginTop: \"-10px\",\r\n  },\r\n\r\n  appsGPLabel: {\r\n    color: \"#f68529\",\r\n    fontWeight: \"600\",\r\n    fontSize: \"0.95rem\",\r\n    marginTop: \"-10px\",\r\n  },\r\n\r\n  appsSTDLabel: {\r\n    color: \"#f68529\",\r\n    fontWeight: \"600\",\r\n    fontSize: \"0.95rem\",\r\n    marginTop: \"-10px\",\r\n  },\r\n\r\n\r\n  \r\n\r\n  appsInToolbar: {\r\n    position: \"fixed\",\r\n    left: \"60px\",\r\n    top: \"-5px\",\r\n    height: \"65px\",\r\n    width: \"200px\",\r\n    overflow: \"hidden\",\r\n  },\r\n}));\r\n\r\nexport default function Dashboard() {\r\n  const classes = useStyles();\r\n  const [state, setState] = React.useContext(GlobalState);\r\n  const isMobile = useMediaQuery({ maxWidth: 768 });\r\n\r\n  const [open, setOpen] = React.useState(isMobile ? false : true);\r\n\r\n  const [currentMenuIndex, setCurrentMenuIndex] = React.useState(0);\r\n\r\n  const [anchorUserAvatar, setAnchorUserAvatar] = React.useState(null);\r\n  const handleUserAvatarClick = (event) => {\r\n    setAnchorUserAvatar(event.currentTarget);\r\n  };\r\n  const handleUserAvatarClose = () => {\r\n    setAnchorUserAvatar(null);\r\n  };\r\n\r\n  const [anchorApps, setAnchorApps] = React.useState(null);\r\n  const handleAppsClick = (event) => {\r\n    setAnchorApps(event.currentTarget);\r\n  };\r\n  const handleAppsClose = () => {\r\n    setAnchorApps(null);\r\n  };\r\n\r\n  const history = useHistory();\r\n\r\n  let location = useLocation();\r\n  React.useEffect(() => {\r\n    if (!state.role) return;\r\n    const index = getMenuIndex(\r\n      state.role,\r\n      getMenuIdFromGlobalPath(location.pathname)\r\n    );\r\n    setState((state) => ({ ...state, currentMenuIndex: index }));\r\n  }, [location]);\r\n\r\n  useEffect(() => {\r\n    window.scrollTo(0, 0);\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    setCurrentMenuIndex(state.currentMenuIndex);\r\n    if (isMobile) {\r\n      setOpen(false);\r\n    }\r\n  }, [state.currentMenuIndex]);\r\n\r\n  const handleDrawerOpen = () => {\r\n    setOpen(!open);\r\n  };\r\n  const handleDrawerClose = () => {\r\n    setOpen(false);\r\n  };\r\n  const fixedHeightPaper = clsx(classes.paper, classes.fixedHeight);\r\n\r\n  const handleLogout = () => {\r\n    localStorage.removeItem(\"ovadmin-auth-token\");\r\n    sessionStorage.removeItem(\"ovadmin-auth-token\");\r\n    clearRole();\r\n\r\n    setState((state) => ({ signedIn: false }));\r\n    history.replace(\"./login\");\r\n  };\r\n\r\n  const appsClicked = (role) => {\r\n    setRole(role);\r\n    setState((state) => ({ ...state, role: role }));\r\n    history.push(getGlobalPath(`/${getMenuId(role, 0)}`));\r\n    handleAppsClose();\r\n  };\r\n\r\n  const getAppsLogo = (role) => {\r\n    switch (role) {\r\n      case \"admin\":\r\n        return (\r\n          <img\r\n            src={getGlobalPath(\"/images/admin.png\")}\r\n            className={classes.appsLogo}\r\n          />\r\n        );\r\n      case \"pcr\":\r\n        return (\r\n          <img\r\n            src={getGlobalPath(\"/images/corona.png\")}\r\n            className={classes.appsLogo}\r\n          />\r\n        );\r\n\r\n      case \"gynae\":\r\n        return (\r\n          <img\r\n            src={getGlobalPath(\"/images/woman.png\")}\r\n            className={classes.appsLogo}\r\n          />\r\n        );\r\n\r\n        case \"gp\":\r\n        return (\r\n          <img\r\n            src={getGlobalPath(\"/images/doctor.png\")}\r\n            className={classes.appsLogo}\r\n          />\r\n        ); \r\n\r\n        case \"std\":\r\n          return (\r\n            <img\r\n              src={getGlobalPath(\"/images/std-icon.png\")}\r\n              className={classes.appsLogo}\r\n            />\r\n          ); \r\n\r\n      default:\r\n        return null;\r\n    }\r\n  };\r\n\r\n  const getAppsLabel = (role) => {\r\n    switch (role) {\r\n      case \"admin\":\r\n        return <div className={classes.appsAdminLabel}> {\"Admin\"} </div>;\r\n      case \"pcr\":\r\n        return <div className={classes.appsPCRLabel}> {\"PCR\"} </div>;\r\n      case \"gynae\":\r\n        return <div className={classes.appsGynaeLabel}> {\"Gynae\"} </div>;\r\n        case \"gp\":\r\n          return <div className={classes.appsGPLabel}> {\"GP\"} </div>;\r\n          case \"std\":\r\n            return <div className={classes.appsSTDLabel}> {\"STD\"} </div>;\r\n  \r\n      default:\r\n        return null;\r\n    }\r\n  };\r\n\r\n  return (\r\n    <React.Fragment>\r\n      {state.userId && state.role && (\r\n        <React.Fragment>\r\n          <div className={classes.root}>\r\n            <CssBaseline />\r\n            <AppBar\r\n              style={{ backgroundColor: \"#fff\", color: \"#555\", height: \"60px\" }}\r\n              position=\"absolute\"\r\n              className={clsx(\r\n                classes.appBar,\r\n                false && open && classes.appBarShift\r\n              )}\r\n            >\r\n              <Toolbar className={classes.toolbar}>\r\n                <IconButton\r\n                  edge=\"start\"\r\n                  color=\"inherit\"\r\n                  aria-label=\"open drawer\"\r\n                  onClick={handleDrawerOpen}\r\n                  className={clsx(classes.menuButton)}\r\n                >\r\n                  <MenuIcon />\r\n                </IconButton>\r\n\r\n                <div className={classes.appsInToolbar}>\r\n                  <Grid container direction=\"row\" alignItems=\"center\">\r\n                    <Grid item>{getAppsLogo(state.role)}</Grid>\r\n                    <Grid item>\r\n                      <div style={{ paddingTop: \"8px\" }}>\r\n                        {getAppsLabel(state.role)}\r\n                      </div>\r\n                    </Grid>\r\n                  </Grid>\r\n                </div>\r\n\r\n                <div className={classes.appbarCenter}>\r\n                  {!isMobile && (\r\n                    <React.Fragment>\r\n                      <img\r\n                        className={classes.logoImage}\r\n                        src={logoImage}\r\n                        alt=\"logo image\"\r\n                      />\r\n                    </React.Fragment> \r\n                   )}\r\n                </div>\r\n\r\n                <div\r\n                  style={{\r\n                    display: \"flex\",\r\n                    justifyContent: \"flex-end\",\r\n                    width: \"100%\",\r\n                    paddingLeft: \"2%\",\r\n                  }}\r\n                >\r\n                  <Grid\r\n                    container\r\n                    spacing={2}\r\n                    direction=\"row-reverse\"\r\n                    justify=\"flex-start\"\r\n                    alignItems=\"center\"\r\n                  >\r\n                    <Grid item>\r\n                      <Avatar\r\n                        className={\r\n                          anchorUserAvatar\r\n                            ? classes.userAvatarSelected\r\n                            : classes.userAvatar\r\n                        }\r\n                        onClick={handleUserAvatarClick}\r\n                      >\r\n                        <IconButton>\r\n                          <PersonOutlineIcon />\r\n                        </IconButton>\r\n                      </Avatar>\r\n                    </Grid>\r\n\r\n                    {state.userId?.roles.find((e) => e === \"admin\") && (\r\n                      <Grid item>\r\n                        <IconButton onClick={handleAppsClick}>\r\n                          <AppsIcon\r\n                            className={\r\n                              anchorApps\r\n                                ? classes.appBarAppsIconSelected\r\n                                : classes.appBarAppsIcon\r\n                            }\r\n                          />\r\n                        </IconButton>\r\n                      </Grid>\r\n                    )}\r\n                  </Grid>\r\n                </div>\r\n              </Toolbar>\r\n            </AppBar>\r\n\r\n            <StyledMenu\r\n              id=\"user-avatar-menu\"\r\n              anchorEl={anchorUserAvatar}\r\n              keepMounted\r\n              open={Boolean(anchorUserAvatar)}\r\n              onClose={handleUserAvatarClose}\r\n            >\r\n              <Grid\r\n                container\r\n                direction=\"column\"\r\n                justify=\"center\"\r\n                alignItems=\"center\"\r\n              >\r\n                <Grid item>\r\n                  <Avatar className={classes.userAvatarBig}>\r\n                    <PersonOutlineIcon style={{ fontSize: \"2.5rem\" }} />\r\n                  </Avatar>\r\n                </Grid>\r\n                <Grid item>\r\n                  <div className={classes.usernameLabel}>\r\n                    {\" \"}\r\n                    {state.userId?.username}{\" \"}\r\n                  </div>\r\n                </Grid>\r\n                {/* <Grid item>\r\n                  <span style={{ color: \"#999\", fontSize: \"0.85rem\" }}>\r\n                    Logged in at :\r\n                  </span>\r\n                </Grid>\r\n                <Grid item>\r\n                  <div className={classes.lastLoginLabel}>\r\n                    {dateformat(state.userId?.lastLoginTimeStamp)}\r\n                  </div>\r\n                </Grid> */}\r\n\r\n                <Grid item>\r\n                  <Button\r\n                    onClick={handleLogout}\r\n                    variant=\"outlined\"\r\n                    color=\"secondary\"\r\n                    style={{\r\n                      marginTop: \"30px\",\r\n                      width: \"150px\",\r\n                      borderRadius: \"30px\",\r\n                    }}\r\n                  >\r\n                    Logout\r\n                  </Button>\r\n                </Grid>\r\n              </Grid>\r\n            </StyledMenu>\r\n\r\n            <StyledMenuApps\r\n              id=\"apps-menu\"\r\n              anchorEl={anchorApps}\r\n              keepMounted\r\n              open={Boolean(anchorApps)}\r\n              onClose={handleAppsClose}\r\n            >\r\n              <Grid container spacing={1}>\r\n                <Grid item>\r\n                  <Grid\r\n                    container\r\n                    direction=\"column\"\r\n                    justify=\"center\"\r\n                    alignItems=\"center\"\r\n                    className={\r\n                      state.role === \"admin\"\r\n                        ? classes.appsBoxSelected\r\n                        : classes.appsBox\r\n                    }\r\n                    onClick={() => appsClicked(\"admin\")}\r\n                  >\r\n                    <Grid item>{getAppsLogo(\"admin\")}</Grid>\r\n                    <Grid item>{getAppsLabel(\"admin\")}</Grid>\r\n                  </Grid>\r\n                </Grid>\r\n\r\n                <Grid item>\r\n                  <Grid\r\n                    container\r\n                    direction=\"column\"\r\n                    justify=\"center\"\r\n                    alignItems=\"center\"\r\n                    className={\r\n                      state.role === \"pcr\"\r\n                        ? classes.appsBoxSelected\r\n                        : classes.appsBox\r\n                    }\r\n                    onClick={() => appsClicked(\"pcr\")}\r\n                  >\r\n                    <Grid item>{getAppsLogo(\"pcr\")}</Grid>\r\n                    <Grid item>{getAppsLabel(\"pcr\")}</Grid>\r\n                  </Grid>\r\n                </Grid>\r\n\r\n                <Grid item>\r\n                  <Grid\r\n                    container\r\n                    direction=\"column\"\r\n                    justify=\"center\"\r\n                    alignItems=\"center\"\r\n                    className={\r\n                      state.role === \"gynae\"\r\n                        ? classes.appsBoxSelected\r\n                        : classes.appsBox\r\n                    }\r\n                    onClick={() => appsClicked(\"gynae\")}\r\n                  >\r\n                    <Grid item>{getAppsLogo(\"gynae\")}</Grid>\r\n                    <Grid item>{getAppsLabel(\"gynae\")}</Grid>\r\n                  </Grid>\r\n                </Grid>\r\n\r\n                <Grid item>\r\n                  <Grid\r\n                    container\r\n                    direction=\"column\"\r\n                    justify=\"center\"\r\n                    alignItems=\"center\"\r\n                    className={\r\n                      state.role === \"gp\"\r\n                        ? classes.appsBoxSelected\r\n                        : classes.appsBox\r\n                    }\r\n                    onClick={() => appsClicked(\"gp\")}\r\n                  >\r\n                    <Grid item>{getAppsLogo(\"gp\")}</Grid>\r\n                    <Grid item>{getAppsLabel(\"gp\")}</Grid>\r\n                  </Grid>\r\n                </Grid>\r\n\r\n                <Grid item>\r\n                  <Grid\r\n                    container\r\n                    direction=\"column\"\r\n                    justify=\"center\"\r\n                    alignItems=\"center\"\r\n                    className={\r\n                      state.role === \"std\"\r\n                        ? classes.appsBoxSelected\r\n                        : classes.appsBox\r\n                    }\r\n                    onClick={() => appsClicked(\"std\")}\r\n                  >\r\n                    <Grid item>{getAppsLogo(\"std\")}</Grid>\r\n                    <Grid item>{getAppsLabel(\"std\")}</Grid>\r\n                  </Grid>\r\n                </Grid>\r\n\r\n              </Grid>\r\n            </StyledMenuApps>\r\n\r\n            <Drawer\r\n              variant={isMobile ? \"temporary\" : \"persistent\"}\r\n              classes={{\r\n                paper: clsx(\r\n                  classes.drawerPaper,\r\n                  !open && classes.drawerPaperClose\r\n                ),\r\n              }}\r\n              open={open}\r\n            >\r\n              <div className={classes.toolbarIcon}>\r\n                <React.Fragment>\r\n                  <img\r\n                    className={classes.logoImageMenu}\r\n                    src={logoImage} \r\n                    alt=\"logo image\"\r\n\r\n                  />\r\n                </React.Fragment>\r\n                <IconButton onClick={handleDrawerClose}>\r\n                  <ChevronLeftIcon />\r\n                </IconButton>\r\n              </div>\r\n              <Divider />\r\n\r\n              <MyMenu />\r\n            </Drawer>\r\n\r\n            <main className={classes.content}>\r\n              <div className={classes.appBarSpacer} />\r\n              <Container\r\n                maxWidth={isMobile ? \"xs\" : \"xl\"}\r\n                className={classes.container}\r\n              >\r\n                {getMenuContent(state.role, currentMenuIndex)}\r\n              </Container>\r\n            </main>\r\n          </div>\r\n        </React.Fragment>\r\n      )}\r\n    </React.Fragment>\r\n  );\r\n}\r\n","import UserService from \"./services/UserService\";\r\n\r\nexport async function getUserIdFromToken(token)\r\n{\r\n    try{\r\n       const res  = await UserService.checkToken({token: token})\r\n       if (res.data.status === 'OK')\r\n        {\r\n            return {username: res.data.userId, forename: res.data.forename, surname: res.data.surname, roles:res.data.roles, lastLoginTimeStamp: res.data.lastLoginTimeStamp}\r\n        }\r\n       else\r\n        {\r\n            return null\r\n        }\r\n    }\r\n    catch(err)\r\n    {\r\n        return null\r\n    }\r\n  \r\n}","import React from 'react';\r\n\r\nimport CssBaseline from '@material-ui/core/CssBaseline';\r\n\r\nimport { makeStyles } from '@material-ui/core/styles';\r\n\r\nimport GlobalState from './GlobalState';\r\n\r\n\r\n\r\n\r\nimport SignIn from './SignIn';\r\nimport Dashboard from './Dashboard';\r\n\r\nimport { useLocation, useHistory} from \"react-router-dom\";\r\nimport { getUserIdFromToken } from './TokenVerifier';\r\nimport UserService from './services/UserService';\r\nimport { getMenuId } from './MenuList';\r\nimport { getRole, setRole } from './Role';\r\nimport { getGlobalPath } from './GlobalPath';\r\n\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n\r\n    appBar: {\r\n        position: 'static',\r\n        backgroundColor: \"#333\",\r\n        color: \"#fff\",\r\n        //alignItems: 'center'\r\n    \r\n      },\r\n\r\n      signOutButton:{\r\n        color: \"#fff\",\r\n        marginRight : \"20px\",\r\n        fontWeight: \"500\"\r\n      },\r\n\r\n      title: {\r\n        flexGrow : 1\r\n      }\r\n\r\n\r\n}));\r\n\r\nexport default function Navigator() {\r\n\r\n    const classes = useStyles();\r\n    const [state, setState] = React.useContext(GlobalState);\r\n\r\n    const [loaded, setLoaded] = React.useState(false)\r\n\r\n    let history = useHistory();\r\n\r\n    const handleSignOut = () =>\r\n    {\r\n      setState(state => ({...state, signedIn: false}));\r\n\r\n    }\r\n\r\n    let location = useLocation();\r\n\r\n    React.useEffect(() => {\r\n\r\n      const checkToken = async () =>\r\n      {\r\n        const authToken = localStorage.getItem('ovadmin-auth-token') || sessionStorage.getItem('ovadmin-auth-token');\r\n        UserService.setToken(authToken)\r\n\r\n         if (!authToken)\r\n        {\r\n          setState(state => ({...state, signedIn: false, signedUp: false, forgotPassword: false}));\r\n          setLoaded(true)\r\n          history.push(getGlobalPath('/login'));\r\n        }\r\n        else\r\n        {\r\n           const userId = await getUserIdFromToken(authToken);\r\n           if (!userId)\r\n           {\r\n              setState(state => ({...state, signedIn: false, signedUp: false, forgotPassword: false}));\r\n              history.push(getGlobalPath('/login'));\r\n           }\r\n           else if (location.pathname === getGlobalPath('/') || location.pathname === getGlobalPath('/#') || location.pathname.startsWith(getGlobalPath('/login')))\r\n           {\r\n            if (!getRole())\r\n            {\r\n             setRole(userId.roles[0])\r\n            }\r\n             setState(state => ({...state, signedIn: true, signedUp: false, forgotPassword: false, userId: userId, role: getRole()}));\r\n            \r\n             history.push(getGlobalPath(`/${getMenuId(getRole(),0)}`));\r\n           }\r\n           else\r\n           {\r\n              if (!getRole())\r\n              {\r\n               setRole(userId.roles[0])\r\n              }\r\n             setState(state => ({...state, signedIn: true, userId: userId, role: getRole()}));\r\n           }\r\n\r\n           setLoaded(true)\r\n        }\r\n      }\r\n\r\n      checkToken();\r\n   \r\n    }, [location.pathname]);\r\n\r\n    const getComponentFromState = () =>\r\n    {\r\n\r\n      if (state.signedIn)\r\n      {\r\n        return <Dashboard/>\r\n      }\r\n      else\r\n      {\r\n          return <SignIn/>    \r\n      }\r\n    }\r\n\r\n    return (\r\n        <React.Fragment>\r\n            <CssBaseline />\r\n\r\n            {\r\n              loaded && (\r\n                getComponentFromState()\r\n              )\r\n            }\r\n        \r\n        </React.Fragment>\r\n    );\r\n}","import React, { Fragment, Suspense, lazy } from \"react\";\r\nimport { MuiThemeProvider, CssBaseline } from \"@material-ui/core\";\r\nimport { BrowserRouter, Route, Switch } from \"react-router-dom\";\r\nimport theme from \"./theme\";\r\nimport GlobalStyles from \"./GlobalStyles\";\r\nimport * as serviceWorker from \"./serviceWorker\";\r\n\r\nimport GlobalState from \"./GlobalState\";\r\nimport Navigator from './Navigator';\r\n\r\n\r\n\r\n\r\n// Configure JSS\r\n\r\n\r\nfunction App() {\r\n  const [state, setState] = React.useState({currentMenuIndex:0});\r\n\r\n  return (\r\n    <GlobalState.Provider value={[state, setState]}>\r\n      <BrowserRouter>\r\n        <MuiThemeProvider theme={theme}>\r\n          <CssBaseline />\r\n          <GlobalStyles />\r\n\r\n       \r\n\r\n              <Navigator/>\r\n\r\n       \r\n\r\n\r\n        </MuiThemeProvider>\r\n      </BrowserRouter>\r\n    </GlobalState.Provider>\r\n  );\r\n}\r\n\r\nserviceWorker.register();\r\n\r\nexport default App;\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport App from \"./App\";\r\n\r\nReactDOM.render(\r\n  <App />,\r\n  document.getElementById(\"root\")\r\n);\r\n","\r\n\r\n\r\nconst FormatDateFromString = (str) =>\r\n{\r\n    return `${str.substr(8,2)}-${str.substr(5,2)}-${str.substr(0,4)}`;\r\n}\r\n\r\nconst FormatDateFromStringWithSlash = (str) =>\r\n{\r\n    return `${str.substr(8,2)}/${str.substr(5,2)}/${str.substr(0,4)}`;\r\n}\r\n\r\nconst RevertFormatDateFromString = (str) =>\r\n{\r\n    return `${str.substr(6,4)}-${str.substr(3,2)}-${str.substr(0,2)}`;\r\n}\r\n\r\n\r\nconst FormatDateFromStringShortYear = (str) =>\r\n{\r\n    return `${str.substr(8,2)}-${str.substr(5,2)}-${str.substr(2,2)}`;\r\n}\r\n\r\n\r\n\r\nmodule.exports = {\r\n    FormatDateFromString : FormatDateFromString,\r\n    FormatDateFromStringShortYear : FormatDateFromStringShortYear,\r\n    RevertFormatDateFromString: RevertFormatDateFromString,\r\n    FormatDateFromStringWithSlash: FormatDateFromStringWithSlash\r\n}","\r\n\r\n\r\nconst FormatDateFromString = (str) =>\r\n{\r\n    return `${str.substr(8,2)}-${str.substr(5,2)}-${str.substr(0,4)}`;\r\n}\r\n\r\nconst FormatDateFromStringWithSlash = (str) =>\r\n{\r\n    return `${str.substr(8,2)}/${str.substr(5,2)}/${str.substr(0,4)}`;\r\n}\r\n\r\nconst RevertFormatDateFromString = (str) =>\r\n{\r\n    return `${str.substr(6,4)}-${str.substr(3,2)}-${str.substr(0,2)}`;\r\n}\r\n\r\n\r\nconst FormatDateFromStringShortYear = (str) =>\r\n{\r\n    return `${str.substr(8,2)}-${str.substr(5,2)}-${str.substr(2,2)}`;\r\n}\r\n\r\n\r\n\r\nmodule.exports = {\r\n    FormatDateFromString : FormatDateFromString,\r\n    FormatDateFromStringShortYear : FormatDateFromStringShortYear,\r\n    RevertFormatDateFromString: RevertFormatDateFromString,\r\n    FormatDateFromStringWithSlash: FormatDateFromStringWithSlash\r\n}","\r\n\r\n\r\nconst FormatDateFromString = (str) =>\r\n{\r\n    return `${str.substr(8,2)}-${str.substr(5,2)}-${str.substr(0,4)}`;\r\n}\r\n\r\nconst FormatDateFromStringWithSlash = (str) =>\r\n{\r\n    return `${str.substr(8,2)}/${str.substr(5,2)}/${str.substr(0,4)}`;\r\n}\r\n\r\nconst RevertFormatDateFromString = (str) =>\r\n{\r\n    return `${str.substr(6,4)}-${str.substr(3,2)}-${str.substr(0,2)}`;\r\n}\r\n\r\n\r\nconst FormatDateFromStringShortYear = (str) =>\r\n{\r\n    return `${str.substr(8,2)}-${str.substr(5,2)}-${str.substr(2,2)}`;\r\n}\r\n\r\n\r\n\r\nmodule.exports = {\r\n    FormatDateFromString : FormatDateFromString,\r\n    FormatDateFromStringShortYear : FormatDateFromStringShortYear,\r\n    RevertFormatDateFromString: RevertFormatDateFromString,\r\n    FormatDateFromStringWithSlash: FormatDateFromStringWithSlash\r\n}"],"sourceRoot":""}