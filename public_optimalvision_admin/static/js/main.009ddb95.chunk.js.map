{"version":3,"sources":["OV/DateFormatter.js","PCR/PriceCalculator.js","Gynae/PriceCalculator.js","GP/PriceCalculator.js","STD/PriceCalculator.js","OV/PriceCalculator.js","PCR/DateFormatter.js","theme.js","GlobalStyles.js","serviceWorker.js","GlobalState.js","images/optimal-vision-logo.png","GlobalPath.js","services/api.js","services/UserService.js","PCR/services/api.js","PCR/services/BookService.js","PCR/services/PDFService.js","PCR/PersonsBox.js","PCR/FindByRef.js","PCR/ResendEmailsDialog.js","PCR/PayDialog.js","PCR/TimeStampDialog.js","Admin/calendar-admin/colors.js","services/InvoiceService.js","InvoiceDialog.js","PCR/BookingDialog.js","PCR/BookingTable.js","PCR/Chart.js","PCR/CurrentVisits.js","PCR/BookingView.js","PCR/ResultsTimeReport.js","PCR/DashboardPreview.js","PCR/UnmatchedRecords.js","PCR/calendar-admin/MonthViewCell.js","PCR/calendar-admin/calendar-util.js","PCR/calendar-admin/MonthView.js","PCR/calendar-admin/WeekViewCell.js","PCR/calendar-admin/WeekView.js","PCR/calendar-admin/DayViewCell.js","PCR/calendar-admin/DayView.js","PCR/calendar-admin/CalendarView.js","Gynae/services/api.js","Gynae/services/BookService.js","Gynae/services/PDFService.js","Gynae/PayDialog.js","Gynae/BookingDialog.js","Gynae/BookingTable.js","Gynae/Chart.js","Gynae/CurrentVisits.js","Gynae/BookingView.js","Gynae/DashboardPreview.js","Gynae/PersonsBox.js","Gynae/FindByRef.js","Gynae/calendar-admin/MonthViewCell.js","Gynae/calendar-admin/calendar-util.js","Gynae/calendar-admin/MonthView.js","Gynae/calendar-admin/WeekViewCell.js","Gynae/calendar-admin/WeekView.js","Gynae/NewBookingDialog.js","Gynae/calendar-admin/DayViewCell.js","Gynae/calendar-admin/DayView.js","Gynae/calendar-admin/CalendarView.js","GP/services/api.js","GP/services/BookService.js","GP/services/PDFService.js","GP/PayDialog.js","GP/BookingDialog.js","GP/BookingTable.js","GP/Chart.js","GP/CurrentVisits.js","GP/BookingView.js","GP/DashboardPreview.js","GP/PersonsBox.js","GP/FindByRef.js","GP/calendar-admin/MonthViewCell.js","GP/calendar-admin/calendar-util.js","GP/calendar-admin/MonthView.js","GP/calendar-admin/WeekViewCell.js","GP/calendar-admin/WeekView.js","GP/NewBookingDialog.js","GP/calendar-admin/DayViewCell.js","GP/calendar-admin/DayView.js","GP/calendar-admin/CalendarView.js","STD/services/api.js","STD/services/BookService.js","STD/services/PDFService.js","STD/PayDialog.js","STD/BookingDialog.js","STD/BookingTable.js","STD/Chart.js","STD/CurrentVisits.js","STD/BookingView.js","STD/DashboardPreview.js","STD/PersonsBox.js","STD/FindByRef.js","STD/calendar-admin/MonthViewCell.js","STD/calendar-admin/calendar-util.js","STD/calendar-admin/MonthView.js","STD/calendar-admin/WeekViewCell.js","STD/calendar-admin/WeekView.js","STD/NewBookingDialog.js","STD/calendar-admin/DayViewCell.js","STD/calendar-admin/DayView.js","STD/calendar-admin/CalendarView.js","OV/services/api.js","OV/services/BookService.js","OV/services/PDFService.js","OV/Corporates.js","OV/PayDialog.js","OV/BookingDialog.js","OV/BookingTable.js","OV/calendar-admin/colors.js","OV/calendar-admin/MonthViewCell.js","OV/calendar-admin/calendar-util.js","OV/calendar-admin/MonthView.js","OV/calendar-admin/WeekViewCell.js","OV/calendar-admin/WeekView.js","OV/NewBookingDialog.js","OV/DateField.js","OV/services/PatientService.js","OV/PatientDialog.js","OV/NewOVBookingDialog.js","OV/DateDialog.js","OV/ChooseClinicDialog.js","OV/EditOVBookingDialog.js","OV/calendar-admin/DayViewCell.js","OV/calendar-admin/DayView.js","OV/calendar-admin/CalendarView.js","OV/PatientsTable.js","MenuList.js","Role.js","SignIn.js","Menu.js","Dashboard.js","TokenVerifier.js","Navigator.js","App.js","index.js","Gynae/DateFormatter.js","GP/DateFormatter.js","STD/DateFormatter.js"],"names":["module","exports","FormatDateFromString","str","substr","FormatDateFromStringShortYear","RevertFormatDateFromString","FormatDateFromStringWithSlash","calculatePrice","person","price","tr","certificate","antiBodyTest","calculateTotalPrice","persons","totalPrice","i","length","darkBlack","borderColor","theme","createMuiTheme","palette","primary","main","light","contrastText","secondary","common","black","warning","dark","tonalOffset","background","default","spacing","breakpoints","values","xl","lg","md","sm","xs","border","borderWidth","overrides","MuiExpansionPanel","root","position","MuiTableCell","paddingLeft","paddingRight","borderBottom","MuiDivider","backgroundColor","height","MuiPrivateNotchedOutline","MuiListItem","divider","MuiDialog","paper","width","maxWidth","marginLeft","marginRight","MuiTooltip","tooltip","fontSize","MuiExpansionPanelDetails","enGB","responsiveFontSizes","withStyles","outline","color","white","paddingTop","paddingBottom","down","up","display","flexWrap","marginTop","marginBottom","withTheme","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","console","log","onUpdate","onSuccess","catch","error","GlobalState","React","createContext","authToken","backendAPI","getGlobalPath","path","axios","create","baseURL","headers","UserService","setToken","token","signIn","payload","API","post","checkToken","BookService","payBooking","bookingId","paymentMethod","corporate","unPayBooking","getTestsTimeReport","axiosRetry","retries","retryDelay","retryCount","get","getBookingsStatsByDateStr","dateStr","getBookingsCountByDateStr","getAllBookingsCountAll","getBookingsCountByDateStrandTime","time","source","cancelToken","getBookingsByDateStrandTime","getAllBookingsCountByDateStr","getAllBookingsCountByDateStrandTime","getAllBookingsByDateStrandTime","changeBackToBookingMade","id","resendEmailsWithBookingId","regenerateFilesWithBookingId","resendEmails","linkId","regenerateFiles","matchRecords","findBestMatches","getLinkDetails","getLinkDetailsWithBookingId","findBookingByRefBirthDate","bookingRef","birthDate","updateBooking","updateBookingTime","deleteBooking","unDeleteBooking","getBookingsByRef","ref","getBookingById","getAllBookings","limit","getAllTRBookings","getLateBookings","getDeletedBookings","getLiveBookings","getCompletedBookings","getPositiveBookings","getTodayBookings","getOldBookings","getFutureBookings","getRecentBookings","getRecentBookingsAll","getUnmatchedRecords","getUnmatchedRecordsArchived","archiveRecord","unArchiveRecord","PDFService","downloadCovidForm1","responseType","Accept","downloadCovidForm2","downloadPdfResult","downloadPdfCert","downloadPdfLabReport","makeStyles","box","padding","borderRadius","textAlign","boxRed","boxInfo","ul","listStyle","margin","li","icon","lineThrough","textDecoration","heading","typography","pxToRem","flexBasis","flexShrink","text","secondaryHeading","infoDetails","infoTitle","fontWeight","infoData","title","Accordion","AccordionDeleted","DownloadForm","infoDataCharges","infoDataChargesHigher","BookedLabel","borderLeft","PatientAttendedLabel","SampleTakenLabel","ReportSentLabel","ReportCertSentLabel","PositiveLabel","EditButton","RestoreButton","DeleteButton","SaveButton","CancelButton","TextBox","checkIcon","closeIcon","centeredLabel","alignItems","flexDirection","avatar","form","Find","Clear","TextField","NoRecordsFound","PersonsBox","refreshButton","RefLink","cursor","archiveButton","smartMatchButton","matchButton","resendButton","resendFilesButton","cancelButton","colorPrimary","bar","LinearProgress","backdrop","zIndex","drawer","itemTitle","itemData","InvoiceService","createInvoice","updateInvoice","invoiceNumber","deleteinvoice","getInvoiceByBookingId","getInvoiceByInvoiceNumber","getCodeDetails","code","getAllCodes","downloadInvoice","emailInvoice","email","ResendEmailsButton","PayButton","PayLabel","checkIconSmall","printInvoiceButton","editInvoiceButton","HideNowRows","top","left","justifyItems","ExportToExcelButton","ExportToExcelButtonInline","table","borderCollapse","th","verticalAlign","fontcolor","td","topSelect","minWidth","createData","amount","undefined","depositContext","flex","bookingBox","minHeight","boxShadow","align","seeMore","Math","PI","ReportLabels","AverageLabel","right","less12Label","less24Label","less36Label","overflow","fixedHeight","downloadPDFButton","Container","ContainerPast","DayLabel","DayLabelToday","lineHight","DayLabelDisabled","BookingCountLabel","BookingCountLabelBusy","LoadingProgress","BookingCountGauge","bottom","CalendarUtil","getMonthRange","month","year","calendar","Calendar","SUNDAY","itermonthdates","overflowY","overflowX","bookingBoxSampleTaken","bookingBoxPositive","bookingBoxReportSent","titleLabel","titleLabelToday","fontColor","changeDepositBooking","deposit","addNewBooking","sendRegFormEmail","getShouldRefundsCount","manualRefundBooking","refundBooking","changeToPatientAttended","downloadGynaeRegForm","PriceLabelPaid","PriceLabelNotPaid","notifyIcon","CalendarIcon","DateTimeLabel","bookingBoxNew","transition","downloadGPRegForm","downloadSTDRegForm","corporates","useStyles","dialogTitle","question","answer","Transition","forwardRef","props","Slide","direction","PaperComponent","handle","cancel","Paper","BookingDialog","classes","useContext","setState","useState","setEmailSent","setEmailSentInvoice","edit","editMode","setEditMode","delete","deleteMode","setDeleteMode","restore","restoreMode","setRestoreMode","saving","deleting","setDeleting","restoring","setRestoring","validationError","setValidationError","bookingDate","setBookingDate","bookingTime","setBookingTime","fullname","setFullname","setEmail","tel","setTel","refreshData","setRefreshData","booking","setBooking","setRecordChanged","fieldChanged","setFieldChanged","setInvoice","useEffect","open","setTimeout","fullnameChanged","event","target","value","handleDeleteModeChanged","del","_id","bookingService","res","err","handleRestoreModeChanged","data","bookingDialogDataChanged","bookingPayChanged","openQDialg","setOpenQDialog","fixQuestion","result","replace","trim","endsWith","Fragment","Dialog","TransitionComponent","keepMounted","onClose","aria-labelledby","aria-describedby","DialogTitle","className","style","questions","Grid","container","justify","item","deleted","Tooltip","DialogContent","hidden","fullWidth","bookingDateError","onChange","inputProps","bookingTimeError","Divider","phone","toUpperCase","faceToFaceConsultation","telephoneConsultation","justifyContent","Button","variant","onClick","type","disabled","deleteButtonDisabled","OTCCharges","Backdrop","CircularProgress","JSON","parse","map","DialogActions","getTableTitle","BookingTable","topCount","setTopCount","openDialogExcel","setOpenDialogExcel","Date","getTime","fromDate","setFromDate","untilDate","setUntilDate","dateformat","fromDateStr","setFromDateStr","untilDateStr","seUntilDateStr","justCorporate","setJustCorporate","chkDate","setChkDate","chkForename","setChkForename","chkSurname","setChkSurname","chkDOB","setChkDOB","chkEmail","setChkEmail","chkTel","setChkTel","chkCertificate","setChkCertidicate","chkAntiBodyTest","setChkAntiBodyTest","chkextRef","setChkExtRef","chkPrice","setChkPrice","columns","date","field","headerName","renderCell","params","IconButton","openDetailsDialog","getValue","valueFormatter","formatTimeStamp","valueGetter","bookings","cachedBookings","isFetching","setData","setSelectedRow","selectedBooking","setSelectedBooking","seeDetailsDialogOpen","setSeeDetailsDialogOpen","setCorporate","filter","setFilter","useRef","timeStamp","todayStr","timeStampStr","loadData","api","filteredData","element","toLowerCase","indexOf","find","page","setPage","placement","showCreateExcel","startIcon","faFileExcel","size","label","name","autoComplete","FormControl","InputLabel","Select","labelId","MenuItem","rows","autoPageSize","onPageChange","onSelectionChange","newSelection","maxHeight","row","FormControlLabel","control","Switch","checked","formControl","utils","DateFnsUtils","disableToolbar","format","KeyboardButtonProps","filename","sheet","buttonText","Checkbox","paid","paidBy","forenameCapital","surnameCapital","extRef","PriceCalculator","CalendarColors","PCRGauge","GynaeGauge","GPGauge","STDGauge","BloodGauge","DayLabelContainer","MonthViewCell","key","cellIndex","daysInMonth","dayClicked","setDateStr","cellDate","setCellDate","bookingsCount","setBookingsCount","disableDay","setDisableDay","setIsPast","getMonth","day","a","AdminCalendarCache","record","method","query","count","fecthData","_bookingsCount","getVCClinicBar","percent","getF2FClinicBar","getLaserClinicBar","getCataractClinicBar","getPostOPClinicBar","_cellIndex","_month","_daysInMonth","getDate","_day","isToday","getDayLabel","clinic","selectedClinics","findIndex","e","disableShrink","dayLables","days","MonthView","WeekViewCell","isPast","CancelToken","getClinicBar","WeekView","dates","BoxDisabled","BoxVC","BoxF2F","BoxLaser","BoxCataract","BoxPostOP","BoxOptometry","BoxGynae","BoxGP","BoxSTD","NewBookingDialog","handleClose","clinicClicked","DateField","loadingBox","dateChanged","todayButton","children","setDay","setMonth","setYear","dayArray","setDayArray","monthArray","setMonthArray","yearArray","setYearArray","updateDate","dd","mm","yyyy","dayStr","monthStr","resetDate","d","parseInt","m","y","months","years","push","getFullYear","today","index","PatientService","registerNewPatient","updatePatient","deletePatient","unDeletePatient","getPatientById","getPatientByPatientId","patiantID","getAllPatients","getDeletedPatients","TabPanel","other","role","a11yProps","appBar","flexGrow","tabs","borderRight","titleCenter","eyeText","PatientDialog","formData","patient","setPatient","setSaving","patientIDError","setPatientIDError","nameError","setNameError","surnameError","setSurnameError","birthDateError","setBirthDateError","patientRepeated","setPatientRepeated","setValue","history","setHistory","backupFormData","setBackUpFormData","openDeleteDialog","setOpenDeleteDialog","handleCloseDeleteDialog","_history","forEach","setSelectedVersion","surname","reverse","saveClicked","validatePatient","stringify","status","patientDialogDataChanged","deleteClicked","patientID","formatDate","dateFormat","selectedVersion","fullScreen","AppBar","Toolbar","edge","aria-label","Typography","saveButtonText","Tabs","orientation","newValue","indicatorColor","textColor","Tab","required","helperText","gender","postCode","address","homeTel","mobileTel","occupation","gpname","kincontact","prevsighttest","multiline","cc","prevmedicalhistory","prevocularhistory","familyhistory","medications","grafth","allergies","placeholder","contactlenswearer","hobbies","vdu","driver","othernotes","dryeyehistory","nightvisionglare","ocularirritation","wateryeyes","speedquestionariedone","cornearight","cornealeft","lidslashesright","lidslashesleft","conjunctivaright","conjunctivaleft","pupilright","pupilleft","acright","acleft","lensright","lensleft","vitreousright","vitreousleft","ombright","ombleft","tbutright","margingTop","discright","discleft","cdright","cdleft","bloodvesselsright","bloodvesselsleft","macularight","maculaleft","peripheryright","peripheryleft","pupillowlightdiamright","pupillowlightdiamleft","pachmetryright","pachmetryleft","keratometryright","keratometryleft","acdepthright","acdepthleft","maculathicnessright","maculathicnessleft","octcommentright","octcommentleft","pentacamcommentright","pentacamcommentleft","distancevaright","distancevaleft","distancevabinocular","intermediatevaright","intermediatevaleft","intermediatevabinocular","nearvaright","nearvaleft","nearvabinocular","refractioncurrentpresdate","spherepresdateright","cylpresdateright","axispresdateright","addpresdateright","vapresdateright","spherepresdateleft","cylpresdateleft","axispresdateleft","addpresdateleft","vapresdateleft","refractionsepctype","contactlensdate","spherepresdaterightlens","cylpresdaterightlens","axispresdaterightlens","addpresdaterightlens","vapresdaterightlens","spherepresdateleftlens","cylpresdateleftlens","axispresdateleftlens","addpresdateleftlens","vapresdateleftlens","refractioncltype","sphereautorefright","cylautorefright","axisautorefright","vaautorefright","sphereautorefleft","cylautorefleft","axisautorefleft","vaautorefleft","spheremanifestright","cylmanifestright","axismanifestright","addmanifestright","vamanifestright","spheremanifestleft","cylmanifestleft","axismanifestleft","addmanifestleft","vamanifestleft","spherecycloright","cylcycloright","axiscycloright","addcycloright","vacycloright","spherecycloleft","cylcycloleft","axiscycloleft","addcycloleft","vacycloleft","spheretargetrefright","cyltargetrefright","axistargetrefright","spheretargetrefleft","cyltargetrefleft","axistargetrefleft","recommendation","DialogContentText","createFilterOptions","NewOVBookingDialog","fullnameError","setFullnameError","patientRecord","setPatientRecord","patientList","setPatientList","setPhone","notes","setNotes","setPatientID","prescriptionLeft","setPrescriptionLeft","prescriptionRight","setPrescriptionRight","setBirthDate","loadPatiens","validateBooking","patientDialogOpen","setPatientDialogOpen","newName","setNewName","newSurname","setNewSurname","getColorFromClinic","Autocomplete","_nameArray","split","inputValue","filterOptions","options","filtered","matchSorter","keys","getOptionLabel","option","selectOnFocus","clearOnBlur","handleHomeEndKeys","renderOption","freeSolo","renderInput","onBlur","autoFocus","timeControl","times","DateDialog","setDate","setTime","dateError","setDateError","handleOK","ChooseBookingDialog","EditOVBookingDialog","openClinicDialog","setOpenClinicDialog","setClinic","openDateDialog","setOpenDateDialog","saveAsClicked","_clinic","bookingBoxVC","bookingBoxF2F","bookingBoxLaser","bookingBoxCataract","bookingBoxPostOP","bookingBoxOptometry","bookingBoxHidden","BookingBorderPCR","BookingBorderGynae","BookingBorderGP","BookingBorderSTD","BookingBorderBlood","DayViewCell","setBookings","filteredBookings","setFilteredBookings","openDialog","setOpenDialog","openDialogAddNew","setOpenDialogAddNew","openDialogOV","setOpenDialogOV","dayViewCalFilter","search","fetchData","_bookings","getBookingClass","addNewBookingClicked","borderTop","clsx","bookingCliked","substring","DayView","Clinics","monthNames","CalendarView","firstDayofWeek","setFirstDayofWeek","weekDates","setWeekDates","mode","setMode","selectedTab","setSeletedTab","removeFilter","dayofWeek","getDay","firstdayofweek","_mode","newDay","newMonth","newFirstDayofWeek","endOfWeek","endofWeekStr","getCalendarTitleFromMode","InputProps","endAdornment","InputAdornment","onMouseDown","ToggleButtonGroup","exclusive","ToggleButton","PatientsTable","setSelectedPatient","setPatientDialogTitle","setPatientDialogSaveButtonText","selectedPatient","patientDialogTitle","patientDialogSaveButtonText","MenuList_OV_Admin","getMenuContent","getMenuRole","getMenuId","MenuList","getMenuIndex","getRole","sessionStorage","getItem","setRole","setItem","image","backgroundImage","backgroundRepeat","grey","backgroundSize","backgroundPosition","submit","alert","pageBg","appbarCenter","logoImage","appbarTitle","adminPanelLabel","SignIn","useMediaQuery","useHistory","password","setPassword","username","setUsername","saveChecked","setSaveChecked","showPassword","setShowPassword","setError","submiting","setSubmiting","localStorage","signedIn","roles","currentMenuIndex","component","CssBaseline","elevation","src","alt","Avatar","Alert","severity","lineHeight","on","textField","onKeyPress","htmlFor","OutlinedInput","tabindex","preventDefault","Visibility","VisibilityOff","labelWidth","Box","mt","iconSelected","menuText","Badge","MyMenu","selectedIndex","setSelectedIndex","updateShouldRefundsCount","GyaneBookService","shouldRefunsCount","List","StyledMenu","getContentAnchorEl","anchorOrigin","vertical","horizontal","transformOrigin","StyledMenuApps","toolbar","toolbarIcon","mixins","transitions","easing","sharp","duration","leavingScreen","appBarShift","enteringScreen","menuButton","menuButtonHidden","drawerPaper","whiteSpace","opacity","drawerPaperClose","appBarSpacer","content","logoImageMenu","userAvatar","userAvatarSelected","userAvatarBig","appBarText","appBarAppsIcon","appBarAppsIconSelected","usernameLabel","lastLoginLabel","appsLogo","appsBox","appsBoxSelected","appsAdminLabel","appsPCRLabel","appsGynaeLabel","appsGPLabel","appsSTDLabel","appsInToolbar","Dashboard","isMobile","setOpen","setCurrentMenuIndex","anchorUserAvatar","setAnchorUserAvatar","anchorApps","setAnchorApps","handleAppsClose","useLocation","globalPath","getMenuIdFromGlobalPath","pathname","scrollTo","appsClicked","getAppsLogo","getAppsLabel","userId","currentTarget","anchorEl","removeItem","Drawer","getUserIdFromToken","forename","lastLoginTimeStamp","signOutButton","Navigator","loaded","setLoaded","signedUp","forgotPassword","startsWith","URL","process","href","origin","addEventListener","fetch","response","contentType","ready","unregister","reload","checkValidServiceWorker","App","Provider","GlobalStyles","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.009ddb95.chunk.js","sourcesContent":["\n\n\nconst FormatDateFromString = (str) =>\n{\n    if (!str)\n    return ''\n    \n    return `${str.substr(8,2)}-${str.substr(5,2)}-${str.substr(0,4)}`;\n}\n\nconst FormatDateFromStringWithSlash = (str) =>\n{\n    return `${str.substr(8,2)}/${str.substr(5,2)}/${str.substr(0,4)}`;\n}\n\nconst RevertFormatDateFromString = (str) =>\n{\n    if (!str)\n    return ''\n\n    return `${str.substr(6,4)}-${str.substr(3,2)}-${str.substr(0,2)}`;\n}\n\n\nconst FormatDateFromStringShortYear = (str) =>\n{\n    if (!str)\n    return ''\n\n    return `${str.substr(8,2)}-${str.substr(5,2)}-${str.substr(2,2)}`;\n}\n\n\n\nmodule.exports = {\n    FormatDateFromString : FormatDateFromString,\n    FormatDateFromStringShortYear : FormatDateFromStringShortYear,\n    RevertFormatDateFromString: RevertFormatDateFromString,\n    FormatDateFromStringWithSlash: FormatDateFromStringWithSlash\n}","\nconst calculatePrice = (person) =>\n{\n\n    var price = 199;\n\n    if (person.tr)\n    {\n        price = 250;\n    }\n    \n    if (person.certificate)\n    {\n        price += 50;\n    }\n\n    if (person.antiBodyTest)\n    {\n        price += (99 + 50);\n    }\n\n    return price;\n\n}\n\nconst calculateTotalPrice = (persons) =>\n{\n    var totalPrice = 0;\n    for (var i = 0 ; i < persons.length ; i++)\n    {\n        totalPrice += calculatePrice(persons[i]);\n    }\n\n    return totalPrice;\n}\n\nmodule.exports = {\n    calculatePrice : calculatePrice,\n    calculateTotalPrice : calculateTotalPrice\n}","\nconst calculatePrice = (person) =>\n{\n\n    var price = 199;\n\n    if (person.tr)\n    {\n        price = 250;\n    }\n    \n    if (person.certificate)\n    {\n        price += 50;\n    }\n\n    if (person.antiBodyTest)\n    {\n        price += (99 + 50);\n    }\n\n    return price;\n\n}\n\nconst calculateTotalPrice = (persons) =>\n{\n    var totalPrice = 0;\n    for (var i = 0 ; i < persons.length ; i++)\n    {\n        totalPrice += calculatePrice(persons[i]);\n    }\n\n    return totalPrice;\n}\n\nmodule.exports = {\n    calculatePrice : calculatePrice,\n    calculateTotalPrice : calculateTotalPrice\n}","\nconst calculatePrice = (person) =>\n{\n\n    var price = 199;\n\n    if (person.tr)\n    {\n        price = 250;\n    }\n    \n    if (person.certificate)\n    {\n        price += 50;\n    }\n\n    if (person.antiBodyTest)\n    {\n        price += (99 + 50);\n    }\n\n    return price;\n\n}\n\nconst calculateTotalPrice = (persons) =>\n{\n    var totalPrice = 0;\n    for (var i = 0 ; i < persons.length ; i++)\n    {\n        totalPrice += calculatePrice(persons[i]);\n    }\n\n    return totalPrice;\n}\n\nmodule.exports = {\n    calculatePrice : calculatePrice,\n    calculateTotalPrice : calculateTotalPrice\n}","\nconst calculatePrice = (person) =>\n{\n\n    var price = 199;\n\n    if (person.tr)\n    {\n        price = 250;\n    }\n    \n    if (person.certificate)\n    {\n        price += 50;\n    }\n\n    if (person.antiBodyTest)\n    {\n        price += (99 + 50);\n    }\n\n    return price;\n\n}\n\nconst calculateTotalPrice = (persons) =>\n{\n    var totalPrice = 0;\n    for (var i = 0 ; i < persons.length ; i++)\n    {\n        totalPrice += calculatePrice(persons[i]);\n    }\n\n    return totalPrice;\n}\n\nmodule.exports = {\n    calculatePrice : calculatePrice,\n    calculateTotalPrice : calculateTotalPrice\n}","\nconst calculatePrice = (person) =>\n{\n\n    var price = 199;\n\n    if (person.tr)\n    {\n        price = 250;\n    }\n    \n    if (person.certificate)\n    {\n        price += 50;\n    }\n\n    if (person.antiBodyTest)\n    {\n        price += (99 + 50);\n    }\n\n    return price;\n\n}\n\nconst calculateTotalPrice = (persons) =>\n{\n    var totalPrice = 0;\n    for (var i = 0 ; i < persons.length ; i++)\n    {\n        totalPrice += calculatePrice(persons[i]);\n    }\n\n    return totalPrice;\n}\n\nmodule.exports = {\n    calculatePrice : calculatePrice,\n    calculateTotalPrice : calculateTotalPrice\n}","\n\n\nconst FormatDateFromString = (str) =>\n{\n    return `${str.substr(8,2)}-${str.substr(5,2)}-${str.substr(0,4)}`;\n}\n\nconst FormatDateFromStringWithSlash = (str) =>\n{\n    return `${str.substr(8,2)}/${str.substr(5,2)}/${str.substr(0,4)}`;\n}\n\nconst RevertFormatDateFromString = (str) =>\n{\n    return `${str.substr(6,4)}-${str.substr(3,2)}-${str.substr(0,2)}`;\n}\n\n\nconst FormatDateFromStringShortYear = (str) =>\n{\n    return `${str.substr(8,2)}-${str.substr(5,2)}-${str.substr(2,2)}`;\n}\n\n\n\nmodule.exports = {\n    FormatDateFromString : FormatDateFromString,\n    FormatDateFromStringShortYear : FormatDateFromStringShortYear,\n    RevertFormatDateFromString: RevertFormatDateFromString,\n    FormatDateFromStringWithSlash: FormatDateFromStringWithSlash\n}","import { createMuiTheme, responsiveFontSizes } from \"@material-ui/core\";\nimport { enGB } from '@material-ui/core/locale';\n\n\nconst black = \"#212121\";\nconst darkBlack = \"rgb(36, 40, 44)\";\nconst background = \"#f9f9f9\";\n\nconst warningLight = \"rgba(253, 200, 69, .3)\";\nconst warningMain = \"rgba(253, 200, 69, .5)\";\nconst warningDark = \"rgba(253, 200, 69, .7)\";\n\n// border\nconst borderWidth = 2;\nconst borderColor = \"rgba(0, 0, 0, 0.13)\";\n\n// breakpoints\nconst xl = 1920;\nconst lg = 1280;\nconst md = 960;\nconst sm = 600;\nconst xs = 0;\n\n// spacing\nconst spacing = 8;\n\nconst theme = createMuiTheme({\n\n  palette: {\n\n    primary: { main: \"#03b5f2\",\n               light: \"#86d5f0\",\n               contrastText:\"#fff\"\n              //  dark: \"#0288D1\",\n              //  light: \"#B3E5FC\"\n\n      },\n    secondary: { main: \"#005eab\", contrastText:\"#fff\" },\n    common: {\n      black,\n      darkBlack\n    },\n    warning: {\n      light: warningLight,\n      main: warningMain,\n      dark: warningDark\n    },\n    // Used to shift a color's luminance by approximately\n    // two indexes within its tonal palette.\n    // E.g., shift from Red 500 to Red 300 or Red 700.\n    tonalOffset: 0.2,\n    background: {\n      default: background\n    },\n    spacing\n  },\n  breakpoints: {\n    // Define custom breakpoint values.\n    // These will apply to Material-UI components that use responsive\n    // breakpoints, such as `Grid` and `Hidden`. You can also use the\n    // theme breakpoint functions `up`, `down`, and `between` to create\n    // media queries for these breakpoints\n    values: {\n      xl,\n      lg,\n      md,\n      sm,\n      xs\n    }\n  },\n  border: {\n    borderColor: borderColor,\n    borderWidth: borderWidth\n  },\n  overrides: {\n    MuiExpansionPanel: {\n      root: {\n        position: \"static\"\n      }\n    },\n    MuiTableCell: {\n      root: {\n        paddingLeft: spacing * 2,\n        paddingRight: spacing * 2,\n        borderBottom: `${borderWidth}px solid ${borderColor}`,\n        [`@media (max-width:  ${sm}px)`]: {\n          paddingLeft: spacing,\n          paddingRight: spacing\n        }\n      }\n    },\n    MuiDivider: {\n      root: {\n        backgroundColor: borderColor,\n        height: borderWidth\n      }\n    },\n    MuiPrivateNotchedOutline: {\n      root: {\n        borderWidth: borderWidth\n      }\n    },\n    MuiListItem: {\n      divider: {\n        borderBottom: `${borderWidth}px solid ${borderColor}`\n      }\n    },\n    MuiDialog: {\n      paper: {\n        width: \"100%\",\n        maxWidth: 430,\n        marginLeft: spacing,\n        marginRight: spacing\n      }\n    },\n    MuiTooltip: {\n      tooltip: {\n        backgroundColor: darkBlack,\n        fontSize: \"0.7rem\"\n      }\n    },\n    MuiExpansionPanelDetails: {\n      root: {\n        [`@media (max-width:  ${sm}px)`]: {\n          paddingLeft: spacing,\n          paddingRight: spacing\n        }\n      }\n    }\n  },\n \n}, enGB);\n\nexport default responsiveFontSizes(theme);\n","import { withStyles } from \"@material-ui/core\";\n\nconst styles = theme => ({\n  \"@global\": {\n    /**\n     * Disable the focus outline, which is default on some browsers like\n     * chrome when focusing elements\n     */\n    \"*:focus\": {\n      outline: 0\n    },\n    \".text-white\": {\n      color: theme.palette.common.white\n    },\n    \".listItemLeftPadding\": {\n      paddingTop: `${theme.spacing(1.75)}px !important`,\n      paddingBottom: `${theme.spacing(1.75)}px !important`,\n      paddingLeft: `${theme.spacing(4)}px !important`,\n      [theme.breakpoints.down(\"sm\")]: {\n        paddingLeft: `${theme.spacing(4)}px !important`\n      },\n      \"@media (max-width:  420px)\": {\n        paddingLeft: `${theme.spacing(1)}px !important`\n      }\n    },\n    \".container\": {\n      width: \"100%\",\n      paddingRight: theme.spacing(4),\n      paddingLeft: theme.spacing(4),\n      marginRight: \"auto\",\n      marginLeft: \"auto\",\n      [theme.breakpoints.up(\"sm\")]: {\n        maxWidth: 540\n      },\n      [theme.breakpoints.up(\"md\")]: {\n        maxWidth: 720\n      },\n      [theme.breakpoints.up(\"lg\")]: {\n        maxWidth: 1170\n      }\n    },\n    \".row\": {\n      display: \"flex\",\n      flexWrap: \"wrap\",\n      marginRight: -theme.spacing(2),\n      marginLeft: -theme.spacing(2)\n    },\n    \".container-fluid\": {\n      width: \"100%\",\n      paddingRight: theme.spacing(2),\n      paddingLeft: theme.spacing(2),\n      marginRight: \"auto\",\n      marginLeft: \"auto\",\n      maxWidth: 1370\n    },\n    \".lg-mg-top\": {\n      marginTop: `${theme.spacing(20)}px !important`,\n      [theme.breakpoints.down(\"md\")]: {\n        marginTop: `${theme.spacing(18)}px !important`\n      },\n      [theme.breakpoints.down(\"sm\")]: {\n        marginTop: `${theme.spacing(16)}px !important`\n      },\n      [theme.breakpoints.down(\"xs\")]: {\n        marginTop: `${theme.spacing(14)}px !important`\n      }\n    },\n    \".lg-mg-bottom\": {\n      marginBottom: `${theme.spacing(20)}px !important`,\n      [theme.breakpoints.down(\"md\")]: {\n        marginBottom: `${theme.spacing(18)}px !important`\n      },\n      [theme.breakpoints.down(\"sm\")]: {\n        marginBottom: `${theme.spacing(16)}px !important`\n      },\n      [theme.breakpoints.down(\"xs\")]: {\n        marginBottom: `${theme.spacing(14)}px !important`\n      }\n    },\n    \".lg-p-top\": {\n      paddingTop: `${theme.spacing(20)}px !important`,\n      [theme.breakpoints.down(\"md\")]: {\n        paddingTop: `${theme.spacing(18)}px !important`\n      },\n      [theme.breakpoints.down(\"sm\")]: {\n        paddingTop: `${theme.spacing(16)}px !important`\n      },\n      [theme.breakpoints.down(\"xs\")]: {\n        paddingTop: `${theme.spacing(14)}px !important`\n      }\n    }\n  }\n});\n\nfunction globalStyles() {\n  return null;\n}\n\nexport default withStyles(styles, { withTheme: true })(globalStyles);\n","/* eslint-disable */\n\n// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === \"localhost\" ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === \"[::1]\" ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener(\"load\", () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            \"This web app is being served cache-first by a service \" +\n              \"worker. To learn more, visit http://bit.ly/CRA-PWA\"\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === \"installed\") {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                \"New content is available and will be used when all \" +\n                  \"tabs for this page are closed. See http://bit.ly/CRA-PWA.\"\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log(\"Content is cached for offline use.\");\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error(\"Error during service worker registration:\", error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get(\"content-type\");\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf(\"javascript\") === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        \"No internet connection found. App is running in offline mode.\"\n      );\n    });\n}\n\nexport function unregister() {\n  if (\"serviceWorker\" in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react'; \nconst GlobalState = React.createContext([{}, () => {}]); \nexport default GlobalState;","export default __webpack_public_path__ + \"static/media/optimal-vision-logo.ba03ccd6.png\";","\n\nexport const authToken = 'Basic QXp1cmXEaWFtb45kOmh1bnRlcjO='\n\nexport const backendAPI = 'https://www.travelpcrtest.com/'\n// export const backendAPI = 'http://localhost:9090/'\n\nexport function getGlobalPath(path){\n    return '/optimalvision/admin' + path\n    // return path\n}\n\nexport function getMenuIdFromGlobalPath(globalPath){\n    try{\n       \n        var split = globalPath.split('/')\n        if (split && split.length > 0)\n        {\n            return split[split.length - 1].length > 0 ?  split[split.length - 1] :  split[split.length - 2]\n        }\n        else\n        {\n            return ''\n        }\n    }\n    catch(err)\n    {\n        return ''\n    }\n}","import axios from 'axios';\nimport { authToken, backendAPI } from '../GlobalPath';\n\nexport default axios.create({\n  baseURL: backendAPI,\n\n  headers : {\n      'Authorization' : authToken\n  }\n});","import API from './api';\n\nexport default class UserService{\n\n    static setToken = (token) =>\n    {\n        this.token = token\n    }\n  \n    static signIn = (payload) =>\n    {\n        return  API.post('/api/optimalvision/user/signin', payload)\n    }\n\n    static checkToken = (payload) =>\n    {\n        return  API.post('/api/optimalvision/user/checktoken', payload)\n    }\n\n}\n","import axios from 'axios';\nimport { authToken, backendAPI } from '../../GlobalPath';\n\nexport default axios.create({\n  baseURL: backendAPI,\n  headers : {\n      'Authorization' : authToken\n  }\n});","import API from './api';\nimport axiosRetry from 'axios-retry';\n\nexport default class BookService {\n\n\n   static payBooking = (bookingId, paymentMethod, corporate) =>\n   {\n      return API.post(`/api/book/paybooking?id=${bookingId}&paymentmethod=${paymentMethod}&corporate=${corporate}`);\n   }\n\n   static unPayBooking = (bookingId) =>\n   {\n      return API.post(`/api/book/unpaybooking?id=${bookingId}`);\n   }\n\n   static getTestsTimeReport = () =>\n   {\n      axiosRetry( API, { retries: 3,  retryDelay: (retryCount) => {\n         return retryCount * 1000;\n       } });\n      return API.get(`/api/book/getteststimereport`);\n   }\n\n   static getBookingsStatsByDateStr = (dateStr) =>\n   {\n      return API.get(`/api/book/getbookingsstatsbydatestr?date=${dateStr}`);\n   }\n\n   static getBookingsCountByDateStr = (dateStr) =>\n   {\n      return API.get(`/api/book/getbookingscountbydatestr?date=${dateStr}`);\n   }\n\n   static getAllBookingsCountAll = () =>\n   {\n      return API.get(`/api/book/getallbookingscountall`);\n   }\n\n   static getBookingsCountByDateStrandTime = (dateStr, time, source) =>\n   {\n      return API.get(`/api/book/getbookingscountbydatestrandtime?date=${dateStr}&time=${time}`, {cancelToken: source.token});\n   }\n\n   static getBookingsByDateStrandTime = (dateStr, time) =>\n   {\n      return API.get(`/api/book/getbookingsbydatestrandtime?date=${dateStr}&time=${time}`);\n   }\n\n\n   static getAllBookingsCountByDateStr = (dateStr) =>\n   {\n      return API.get(`/api/book/getallbookingscountbydatestr?date=${dateStr}`);\n   }\n\n   static getAllBookingsCountByDateStrandTime = (dateStr, time, source) =>\n   {\n      return API.get(`/api/book/getallbookingscountbydatestrandtime?date=${dateStr}&time=${time}`, {cancelToken: source.token});\n   }\n\n   static getAllBookingsByDateStrandTime = (dateStr, time) =>\n   {\n      return API.get(`/api/book/getallbookingsbydatestrandtime?date=${dateStr}&time=${time}`);\n   }\n\n\n\n\n   static changeBackToBookingMade = (id) =>\n   {\n      return API.post(`/api/book/changebacktobookingmade?id=${id}`);\n   }\n\n   static resendEmailsWithBookingId = (bookingId) =>\n   {\n      return API.post(`/api/book/resendemailswithbookingid?id=${bookingId}`);\n   }\n\n   static regenerateFilesWithBookingId  = (bookingId) =>\n   {\n      return API.post(`/api/book/regeneratefileswithbookingid?id=${bookingId}`);\n   }\n\n\n   static resendEmails  = (linkId) =>\n   {\n      return API.post(`/api/book/resendemails?id=${linkId}`);\n   }\n\n   static regenerateFiles  = (linkId) =>\n   {\n      return API.post(`/api/book/regeneratefiles?id=${linkId}`);\n   }\n\n   static matchRecords  = (bookingId, linkId) =>\n   {\n      return API.post(`/api/book/matchrecords?bookingid=${bookingId}&linkid=${linkId}`);\n   }\n\n   static findBestMatches = (id) =>\n   {\n      return API.get(`/api/book/getbestmatchedbookings?id=${id}`);\n   } \n\n   static getLinkDetails = (id) =>\n   {\n      return API.get(`/api/book/getlinkdetails?id=${id}`);\n   } \n\n   static getLinkDetailsWithBookingId = (id) =>\n   {\n      return API.get(`/api/book/getlinkdetailswithbookingid?id=${id}`);\n   } \n\n\n\n   static findBookingByRefBirthDate = (bookingRef, birthDate) =>\n   {\n      return API.get(`/api/book/getbookingsbyrefandbirthdate?ref=${bookingRef}&birthdate=${birthDate}`);\n   }\n\n   static updateBooking = (payload) =>\n   {\n      return API.post(`/api/book/updatebookappointment`, payload);\n   } \n\n   static updateBookingTime = (payload) =>\n   {\n      return API.post(`/api/book/updatebookappointmenttime`, payload);\n   } \n\n   static deleteBooking = (id) =>\n   {\n      return API.post(`/api/book/deletebookappointment?id=${id}`);\n   } \n\n   static unDeleteBooking = (id) =>\n   {\n      return API.post(`/api/book/undeletebookappointment?id=${id}`);\n   } \n   \n   \n    static getBookingsByRef = (ref) =>\n    {\n       return API.get(`/api/book/getbookingsbyref?ref=${ref}`);\n    }\n\n    static getBookingById = (id) =>\n    {\n       return API.get(`/api/book/getbookingbyid?id=${id}`);\n    }\n\n    static getAllBookings = (limit) =>\n    {\n      if (!limit) limit = 25 \n      return API.get(`/api/book/getallbookings?limit=${limit}`);\n    }\n\n    static getAllTRBookings = (limit) =>\n    {\n      if (!limit) limit = 25 \n      return API.get(`/api/book/getalltrbookings?limit=${limit}`);\n    }\n\n    static getLateBookings= () =>\n    {\n       return API.get(`/api/book/getlatebookings`);\n    }\n\n    static getDeletedBookings= (limit) =>\n    {\n      if (!limit) limit = 25 \n       return API.get(`/api/book/getdeletedbookings?limit=${limit}`);\n    }\n\n    static getLiveBookings= () =>\n    {\n       return API.get(`/api/book/getlivebookings`);\n    }\n\n    static getCompletedBookings= (limit) =>\n    {\n      if (!limit) limit = 25 \n       return API.get(`/api/book/getcompletedbookings?limit=${limit}`);\n    }\n\n    static getPositiveBookings= () =>\n    {\n       return API.get(`/api/book/getpositivebookings`);\n    }\n\n\n\n    static getTodayBookings= () =>\n    {\n       return API.get(`/api/book/gettodaybookings`);\n    }\n\n    static getOldBookings= (limit) =>\n    {\n      if (!limit) limit = 25 \n       return API.get(`/api/book/getoldbookings?limit=${limit}`);\n    }\n\n    static getFutureBookings= (limit) =>\n    {\n      if (!limit) limit = 25 \n       return API.get(`/api/book/getfuturebookings?limit=${limit}`);\n    }\n\n    static getRecentBookings= () =>\n    {\n       return API.get(`/api/book/getrecentbookings`);\n    }\n\n    static getRecentBookingsAll= (limit) =>\n    {\n      if (!limit) limit = 25 \n       return API.get(`/api/book/getrecentbookingsall?limit=${limit}`);\n    }\n\n    static getUnmatchedRecords= () =>\n    {\n       return API.get(`/api/book/getunmatchedrecords`);\n    }\n\n    static getUnmatchedRecordsArchived= () =>\n    {\n       return API.get(`/api/book/getunmatchedrecordsarchived`);\n    }\n\n    static archiveRecord = (id) =>\n    {\n       return API.post(`/api/book/archiverecord?id=${id}`);\n    }\n\n    static unArchiveRecord = (id) =>\n    {\n       return API.post(`/api/book/unarchiverecord?id=${id}`);\n    }\n\n\n}","import API from './api';\n\nexport default class PDFService {\n\n    static downloadCovidForm1 = (id) =>\n    {\n       return API.get(`/api/pdf/downloadcovidform1?id=${id}`, {\n        responseType: 'arraybuffer',\n        id: id,\n        headers: {\n            Accept: 'application/pdf',\n        }\n        });\n    }\n\n    static downloadCovidForm2 = (id) =>\n    {\n       return API.get(`/api/pdf/downloadcovidform2?id=${id}`, {\n        responseType: 'arraybuffer',\n        headers: {\n            Accept: 'application/pdf',\n        }\n        });\n    }\n\n    static downloadPdfResult = (id) =>\n    {\n       return API.get(`/api/pdf/downloadpdfresult?id=${id}`, {\n        responseType: 'arraybuffer',\n        headers: {\n            Accept: 'application/pdf',\n        }\n        });\n    }\n\n    static downloadPdfCert = (id) =>\n    {\n       return API.get(`/api/pdf/downloadpdfcert?id=${id}`, {\n        responseType: 'arraybuffer',\n        headers: {\n            Accept: 'application/pdf',\n        }\n        });\n    }\n\n    static downloadPdfLabReport = (id) =>\n    {\n       return API.get(`/api/pdf/downloadpdflabreport?id=${id}`, {\n        responseType: 'arraybuffer',\n        headers: {\n            Accept: 'application/pdf',\n        }\n        });\n    }\n\n\n}","import React from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Typography from '@material-ui/core/Typography';\nimport GlobalState from './../GlobalState';\nimport Grid from '@material-ui/core/Grid';\nimport Accordion from '@material-ui/core/Accordion';\nimport AccordionDetails from '@material-ui/core/AccordionDetails';\nimport AccordionSummary from '@material-ui/core/AccordionSummary';\nimport ExpandMoreIcon from '@material-ui/icons/ExpandMore';\nimport { Button, Checkbox, FormControlLabel, Link, TextField, Tooltip } from '@material-ui/core';\nimport PDFService from './services/PDFService';\n\nimport {calculatePrice} from './PriceCalculator';\n\n\nimport bookingService from './services/BookService';\nimport CheckIcon from '@material-ui/icons/Check';\nimport CloseIcon from '@material-ui/icons/Close';\nimport DeleteIcon from '@material-ui/icons/Delete';\n\nimport {FormatDateFromString, RevertFormatDateFromString} from './DateFormatter';\n\nimport PrintIcon from '@material-ui/icons/Print';\n\n\nconst useStyles = makeStyles((theme) => ({\n  box: {\n    backgroundColor : \"#373737\",\n    color: \"#fff\",\n    padding : \"1px\",\n    borderRadius : \"4px\",\n    textAlign: \"justify\",\n    paddingRight: \"40px\"\n  },\n\n  boxRed: {\n    backgroundColor : \"#dc2626\",\n    color: \"#fff\",\n    padding : \"1px\",\n    borderRadius : \"4px\",\n    textAlign: \"justify\",\n    paddingRight: \"40px\"\n  },\n\n  boxInfo: {\n    textAlign: \"justify\",\n    backgroundColor : \"#fafafa\",\n    color: \"#333\",\n    padding : \"1px\",\n    borderRadius : \"4px\",\n    paddingRight: \"40px\",\n    border: \"1px solid #eee\",\n  },\n\n  ul: {\n     listStyle: \"none\",\n     padding: \"0\",\n     margin: \"0\"\n  },\n\n  li: {\n    marginBottom : \"15px\"\n  },\n\n\n  icon: {\n    marginRight : \"8px\"\n  },\n\n  root: {\n    width: '100%',\n  },\n\n  lineThrough:{\n    textDecoration : \"line-through\",\n  },\n\n\n\n  heading: {\n    fontSize: theme.typography.pxToRem(15),\n    flexBasis: '33.33%',\n    flexShrink: 0,\n    color: theme.palette.text.secondary,\n  },\n  secondaryHeading: {\n    fontSize: theme.typography.pxToRem(15),\n  },\n\n  infoDetails:{\n    textAlign: \"left\",\n  },\n\n  infoTitle:{\n    fontWeight: \"800\",\n    marginRight: \"10px\"\n  },\n\n  infoData:{\n    fontWeight: \"400\",\n  },\n\n  title:\n  {\n    // textAlign : \"center\",\n    // fontWeight : \"500\",\n    // margin: \"10px\",\n    // backgroundColor : \"#eee\",\n    // padding : \"10px\",\n    // borderRadius : \"4px\"\n    textAlign: \"center\",\n    fontWeight : \"600\",\n    marginLeft: \"10px\",\n    marginBottom: \"5px\"\n\n  },\n\n  Accordion:{\n    backgroundColor : \"#f5f5f5\",\n    color: \"#222\"\n  },\n\n  AccordionDeleted:{\n    backgroundColor : \"#aaa\",\n    color: \"#555\"\n  },\n\n  DownloadForm:{\n      marginTop: \"10px\",\n      marginBottom : \"10px\"\n  },\n\n  infoDataCharges:{\n    fontSize : \"18px\",\n    color: \"green\",\n    fontWeight : \"600\"\n  },\n\n  infoDataChargesHigher:{\n    fontSize : \"18px\",\n    color: \"red\",\n    fontWeight : \"600\"\n  },\n  BookedLabel:{\n    color: \"#606060\",\n    paddingRight: \"10px\",\n    paddingLeft: \"5px\",\n    paddingBottom: \"3px\",\n    paddingTop: \"3px\",\n    fontWeight: \"800\",\n    borderLeft: \"5px solid\",\n    borderColor: \"#606060\"\n  },\n\n  PatientAttendedLabel:{\n    color: \"#0066aa\",\n    paddingRight: \"10px\",\n    paddingLeft: \"5px\",\n    paddingBottom: \"3px\",\n    paddingTop: \"3px\",\n    fontWeight: \"800\",\n    borderLeft: \"5px solid\",\n    borderColor: \"#0066aa\"\n  },\n\n  SampleTakenLabel:{\n    color: \"#0066cc\",\n    paddingRight: \"10px\",\n    paddingLeft: \"5px\",\n    paddingBottom: \"3px\",\n    paddingTop: \"3px\",\n    fontWeight: \"800\",\n    borderLeft: \"5px solid\",\n    borderColor: \"#0066cc\"\n  },\n\n  ReportSentLabel:{\n    color: \"#009900\",\n    paddingRight: \"10px\",\n    paddingLeft: \"5px\",\n    paddingBottom: \"3px\",\n    paddingTop: \"3px\",\n    fontWeight: \"800\",\n    borderLeft: \"5px solid\",\n    borderColor: \"#009900\"\n  },\n\n  ReportCertSentLabel:{\n    color: \"#009900\",\n    paddingRight: \"10px\",\n    paddingLeft: \"5px\",\n    paddingBottom: \"3px\",\n    paddingTop: \"3px\",\n    fontWeight: \"800\",\n    borderLeft: \"5px solid\",\n    borderColor: \"#009900\"\n  },\n\n  PositiveLabel:{\n    color: \"red\",\n    paddingRight: \"10px\",\n    paddingLeft: \"5px\",\n    paddingBottom: \"3px\",\n    paddingTop: \"3px\",\n    fontWeight: \"800\",\n    borderLeft: \"5px solid\",\n    borderColor: \"red\"\n  },\n\n\n  EditButton:\n  {\n    marginBottom : \"20px\",\n    backgroundColor : \"#2f942e\",\n    \"&:hover\": {\n      background: \"green\",\n      color: \"#fff\"\n    },\n    textDecoration : \"none !important\",\n    padding: \"10px\"   \n  },\n\n  RestoreButton:\n  {\n    marginBottom : \"20px\",\n    backgroundColor : \"#fafafa\",\n    color: \"#555\",\n    \"&:hover\": {\n      background: \"#f1f1f1\",\n      color: \"#111\"\n    },\n    textDecoration : \"none !important\",\n    padding: \"10px\"   \n  },\n\n\n  DeleteButton:\n  {\n    marginBottom : \"20px\",\n    backgroundColor : \"#d90015\",\n    \"&:hover\": {\n      background: \"#b80012\",\n      color: \"#fff\"\n    },\n\n    padding: \"10px\"\n    \n  },\n\n  SaveButton:\n  {\n    marginBottom : \"10px\",\n    padding: \"10px\",\n\n    backgroundColor : \"#d1175e\",\n    \"&:hover\": {\n      background: \"#bd0d50\",\n      color: \"#fff\"\n    },\n\n  },\n\n  CancelButton:\n  {\n    marginBottom : \"20px\",\n    // padding: \"10px\"\n  },\n\n  TextBox: {\n    \n    padding : \"0px\"\n\n  },\n\n  checkIcon:{\n    color: \"green\",   \n  },\n\n  closeIcon:{\n    color: \"red\"\n  },\n\n  centeredLabel : {\n    display: \"flex\",\n    alignItems: \"center\"\n  }\n\n\n\n\n\n\n}));\n\n\n\n\nexport default function PersonsBox() {\n    const classes = useStyles();\n\n    const [state, setState] = React.useContext(GlobalState);\n\n    const [expanded, setExpanded] = React.useState('panel0');\n\n    const [editMode, setEditMode] = React.useState({edit : false, person : null});\n    const [deleteMode, setDeleteMode] = React.useState({delete : false, person : null});\n    const [restoreMode, setRestoreMode] = React.useState({restore : false, person : null});\n\n    const [saving, setSaving] =  React.useState(false);\n    const [deleting, setDeleting] =  React.useState(false);\n    const [restoring, setRestoring] =  React.useState(false);\n\n    const [validationError, setValidationError] = React.useState({});\n\n\n    const [bookingDate, setBookingDate] = React.useState('');\n    const [bookingTime, setBookingTime] = React.useState('');\n\n    const [gender, setGender] = React.useState('');\n    const [title, setTitle] = React.useState('');\n    const [forename, setForename] = React.useState('');\n    const [surname, setSurnme] = React.useState('');\n    const [email, setEmail] = React.useState('');\n    const [dob, setDOB] = React.useState('');\n    const [tel, setTel] = React.useState('');\n    const [postCode, setPostCode] = React.useState('');\n    const [address, setAddress] = React.useState('');\n    const [notes, setNotes] = React.useState('');\n    const [passport, setPassport] = React.useState('');\n    const [passport2, setPassport2] = React.useState('');\n    const [certificate, setCertificate] = React.useState(false);\n    const [antiBodyTest, setAntiBodyTest] = React.useState(false);\n\n\n    const bookingDateChanged = (event) =>\n    {\n      setBookingDate(event.target.value);\n      setValidationError({...validationError, bookingDateError : false});\n    }\n\n    const bookingTimeChanged = (event) =>\n    {\n      setBookingTime(event.target.value);\n      setValidationError({...validationError, bookingTimeError : false});\n    }\n\n    const genderChanged = (event) =>\n    {\n      setGender(event.target.value);\n    }\n\n    const titleChanged = (event) =>\n    {\n      setTitle(event.target.value);\n    }\n\n    const forenameChanged = (event) =>\n    {\n      setForename(event.target.value);\n    }\n\n    const surnameChanged = (event) =>\n    {\n      setSurnme(event.target.value);\n    }\n\n    const emailChanged = (event) =>\n    {\n      setEmail(event.target.value);\n    }\n\n    const dobChanged = (event) =>\n    {\n      setDOB(event.target.value);\n      setValidationError({...validationError, dobError : false});\n    }\n\n    const telChanged = (event) =>\n    {\n      setTel(event.target.value);\n    }\n\n    const postCodeChanged = (event) =>\n    {\n      setPostCode(event.target.value);\n    }\n\n    const addressChanged = (event) =>\n    {\n      setAddress(event.target.value);\n    }\n\n    const passportChanged = (event) =>\n    {\n      setPassport(event.target.value);\n    }\n\n    const passport2Changed = (event) =>\n    {\n      setPassport2(event.target.value);\n    }\n\n    const certificateChanged = (event) =>\n    {\n      setCertificate(event.target.checked);\n    }\n\n    const antiBodyTestChanged = (event) =>\n    {\n      setAntiBodyTest(event.target.checked);\n    }\n\n\n    const handleChange = (panel) => (event, isExpanded) => {\n      setExpanded(isExpanded ? panel : false);\n    };\n\n    const getStatusLabel = (status) => {\n      if (status === 'booked')\n      {\n        return (\n          <span className={classes.BookedLabel}> Booking Made </span>\n        );\n    \n      }else if (status === 'patient_attended')\n      {\n        return (\n          <span  className={classes.PatientAttendedLabel}> Patient Attended </span>\n        );\n    \n      }else if (status === 'sample_taken')\n      {\n        return (\n          <span  className={classes.SampleTakenLabel}> Sample Taken </span>\n        );\n    \n      }else if (status === 'report_sent')\n      {\n        return (\n          <span  className={classes.ReportSentLabel}> Report Sent </span>\n        );\n    \n      }else if (status === 'report_cert_sent')\n      {\n        return (\n          <span  className={classes.ReportCertSentLabel}> {`Report & Certificate Sent`} </span>\n        );\n      }\n      else if (status === 'positive')\n      {\n        return (\n          <span  className={classes.PositiveLabel}> {`POSITIVE`} </span>\n        );\n    \n      }\n      else{\n        return 'Unknown';\n      }\n    }\n\n   const downloadForm1 = (id) =>\n   {\n       PDFService.downloadCovidForm1(id).then( (res) => \n       {\n          const file = new Blob(\n            [res.data], \n            {type: 'application/pdf'});\n\n          const fileURL = URL.createObjectURL(file);   \n          window.open(fileURL, \"_blank\");\n\n       }).catch( (err) =>\n       {\n           console.log(err);\n       });\n   }\n\n   const downloadForm2 = (id) =>\n   {\n        PDFService.downloadCovidForm2(id).then( (res) => \n        {\n          const file = new Blob(\n            [res.data], \n            {type: 'application/pdf'});\n\n          const fileURL = URL.createObjectURL(file);   \n          window.open(fileURL, \"_blank\");\n\n        setState(state => ({...state, RefreshPersonInfo : !state.RefreshPersonInfo}));\n\n        }).catch( (err) =>\n        {\n            console.log(err);\n        });\n   }\n\n   const downloadLabResults = (id) =>\n   {\n        PDFService.downloadPdfResult(id).then( (res) => \n        {\n          const file = new Blob(\n            [res.data], \n            {type: 'application/pdf'});\n\n          const fileURL = URL.createObjectURL(file);   \n          window.open(fileURL, \"_blank\");\n\n        }).catch( (err) =>\n        {\n            console.log(err);\n        });\n   }\n\n   const downloadCertificate = (id) =>\n   {\n        PDFService.downloadPdfCert(id).then( (res) => \n        {\n          const file = new Blob(\n            [res.data], \n            {type: 'application/pdf'});\n\n          const fileURL = URL.createObjectURL(file);   \n          window.open(fileURL, \"_blank\");\n\n        }).catch( (err) =>\n        {\n            console.log(err);\n        });\n   }\n\n   const handleEditModeChanged = (edit, person) => {\n\n       if (edit)\n       {\n         setForename(person.forenameCapital);\n         setSurnme(person.surnameCapital);\n         setBookingDate(FormatDateFromString(person.bookingDate));\n         setBookingTime(person.bookingTime.toUpperCase());\n         setGender(person.gender.toUpperCase());\n         setTitle(person.title.toUpperCase());\n         setEmail(person.email.toUpperCase());\n         setDOB(FormatDateFromString(person.birthDate));\n         setTel(person.phone.toUpperCase());\n         setPostCode(person.postCode.toUpperCase());\n         setAddress(person.address.toUpperCase());\n         if (person.notes)\n         {\n          setNotes(person.notes.toUpperCase());\n         }\n        \n         if (person.passportNumber)\n         {\n           setPassport(person.passportNumber.toUpperCase());\n         }\n        \n         if (person.passportNumber2)\n         {\n           setPassport2(person.passportNumber2.toUpperCase());\n         }\n        \n         setCertificate(person.certificate);\n         setAntiBodyTest(person.antiBodyTest);\n\n         setEditMode({edit: edit, person: person});\n\n       }\n       else if (!edit && !person)\n       {\n         setEditMode({edit: edit, person: person});\n       }\n       else if (!edit && person)\n       {\n          const booking = {};\n          const bookingId = person._id;\n          booking.certificate = certificate;\n          booking.antiBodyTest = antiBodyTest;\n          booking.gender = gender;\n          booking.title = title;\n          booking.birthDate = RevertFormatDateFromString(dob);\n          booking.email = email;\n          booking.phone = tel;\n          booking.postCode = postCode;\n          booking.address = address;\n          booking.passportNumber = passport;\n          booking.passportNumber2 = passport2;\n          booking.forename = forename;\n          booking.surname = surname;\n          booking.notes = notes;\n          booking.bookingDate = RevertFormatDateFromString(bookingDate);\n          booking.bookingTime = bookingTime;\n          booking.bookingRef = person.bookingRef;\n\n          if  (validateBooking(booking))\n          {\n            updateBooking({bookingId: bookingId, person: booking});\n          }\n       }\n   }\n\n   const validateDate = (str) =>\n   {\n     var error = false;\n     if (!str || str.length !== 10)\n     {\n       error = true;\n     }\n\n     if (str.charAt(4) !== '-'  || str.charAt(7) !== '-')\n     {\n       error = true;\n     }\n\n     try\n     {\n       \n       const result = /^\\d{4}-\\d{2}-\\d{2}$/.test(str);\n       if (!result)\n       {\n          error = true;\n       }\n\n       const year = parseInt(str.substr(0,4));\n       const month = parseInt(str.substr(5,2));\n       const day = parseInt(str.substr(8,2));\n\n       if (year < 1900)\n       {\n          error = true;\n       }\n\n       if (month < 1 || month > 12)\n       {\n         error = true;\n       }        \n\n       if (day > 31)\n       {\n         error = true;\n       }\n\n     }catch(err)\n     {\n       error = true;\n     }\n\n\n\n     return !error;\n   }\n\n   const validateTime =(str) =>\n   {\n     var error = false;\n\n     const result = /^\\d{2}:\\d{2} AM$|^\\d{2}:\\d{2} PM$/.test(str);\n     if (!result)\n     {\n        error = true;\n     }\n\n     try{\n       const hour = parseInt(str.substr(0,2));\n       const minute = parseInt(str.substr(3,2));\n\n       if (hour < 0 || hour > 12)\n       {\n         error = true;\n       }\n\n       if (minute < 0 || minute > 59)\n       {\n         error = true;\n       }\n\n     }catch(err)\n     {\n       error = true;\n     }\n\n     return !error;\n   }\n\n   const validateBooking = (booking) =>\n   {\n      var error = false;\n\n      if (!validateDate(booking.bookingDate))\n      {\n        error = true;\n        setValidationError({...validationError, bookingDateError : true});\n      }\n\n      if (!validateDate(booking.birthDate))\n      {\n        error = true;\n        setValidationError({...validationError, dobError : true});\n      }\n\n      if (!validateTime(booking.bookingTime))\n      {\n        error = true;\n        setValidationError({...validationError, bookingTimeError : true});\n      }\n     \n\n      return !error;\n   }\n\n   const updateBooking = (payload) =>\n   {\n       setSaving(true);\n       bookingService.updateBooking(payload).then( (res) => {\n        setSaving(false);\n        setEditMode({edit: false, person: null});\n        setState(state => ({...state, RefreshPersonInfo : !state.RefreshPersonInfo}));\n\n       }).catch ( (err) => {\n         setSaving(false);\n         setEditMode({edit: false, person: null});\n         console.log(err);\n       });\n   }\n\n   const deleteBooking = (id) =>\n   {\n       setDeleting(true);\n       bookingService.deleteBooking(id).then( (res) => {\n        setDeleting(false);\n        setDeleteMode({delete: false, person: null});\n        setState(state => ({...state, RefreshPersonInfo : !state.RefreshPersonInfo}));\n\n       }).catch ( (err) => {\n          setDeleting(false);\n          setDeleteMode({delete: false, person: null});\n         console.log(err);\n       });\n   }\n\n   const restoreBooking = (id) =>\n   {\n       setRestoring(true);\n       bookingService.unDeleteBooking(id).then( (res) => {\n        setRestoring(false);\n        setRestoreMode({restore: false, person: null});\n        setState(state => ({...state, RefreshPersonInfo : !state.RefreshPersonInfo}));\n\n       }).catch ( (err) => {\n        setRestoring(false);\n        setRestoreMode({restore: false, person: null});\n         console.log(err);\n       });\n   }\n\n   const changeBackToBookingMade = (event, id) =>\n   {\n     setSaving(true);\n     bookingService.changeBackToBookingMade(id).then(res => {\n       setSaving(false);\n       setState(state => ({...state, RefreshPersonInfo : !state.RefreshPersonInfo}));\n     }).catch(err => {\n       console.log(err);\n       setSaving(false);\n     })\n   }\n\n\n\n   const handleDeleteModeChanged = (del, person) => {\n\n    if (del)\n    {\n      setDeleteMode({delete: del, person: person});\n    }\n    else if (!del && !person)\n    {\n      setDeleteMode({delete: del, person: person});\n    }\n    else if (!del && person)\n    {\n        deleteBooking(person._id);\n    }\n  }\n\n  const handleRestoreModeChanged = (restore, person) => {\n\n    if (restore)\n    {\n      setRestoreMode({restore: restore, person: person});\n    }\n    else if (!restore && !person)\n    {\n      setRestoreMode({restore: restore, person: person});\n    }\n    else if (!restore && person)\n    {\n        restoreBooking(person._id);\n    }\n  }\n\n  return (\n    <React.Fragment>\n          \n      <Grid container direction=\"column\" spacing={1} justify=\"flex-start\"  alignItems=\"stretch\">\n          <div className={classes.title}> Following Records Found :</div>\n\n          {state.foundRecords.map((person,index) => (\n   \n                <Grid item xs={12} md={12} key={`panel${index}`}>\n                <div className={classes.root}>\n                    <Accordion className={person.deleted ? classes.AccordionDeleted : classes.Accordion} expanded={expanded === `panel${index}`} onChange={handleChange(`panel${index}`)}>\n                    <AccordionSummary className={person.deleted ? classes.lineThrough : ''}\n                        expandIcon={<ExpandMoreIcon />}\n                        aria-controls=\"panel1bh-content\"\n                        id={`panel${index}bh-header`}\n                    >\n                      {person.deleted && (\n                          <Tooltip  title=\"This record has been deleted.\">\n                            <DeleteIcon  style={{padding: 0, margin: 0,  color: \"#fff\", fontSize: 25 }}/>\n                        </Tooltip>\n                      )}\n\n                        <Typography className={classes.heading}> {`#${index+1}`} </Typography>\n                        <Typography className={classes.secondaryHeading}>\n                        {`${person.forenameCapital} ${person.surnameCapital}`}\n                        </Typography>\n                    </AccordionSummary>\n\n                    <AccordionDetails className={classes.infoDetails}>\n                        \n\n\n                        <ul className={classes.ul}>\n\n                        {/* Restore Functionality ******************************************* */}  \n                        <li hidden={!(restoreMode.restore && restoreMode.person._id  === person._id)}>\n                              <div style={{fontWeight: \"500\", paddingBottom: \"5px\", paddingLeft: \"5px\", fontSize:\"16px\" , color:\"#fff\"}}>\n                                Are you sure you want to restore this record?\n                              </div>\n                            </li>\n\n                            <li hidden={!person.deleted || (restoreMode.restore && restoreMode.person._id === person._id)}>\n                                 <Button\n                                    type=\"button\"\n                                    fullWidth\n                                    variant=\"contained\"\n                                    color=\"primary\"\n                                    onClick = {() => {handleRestoreModeChanged(true, person)}}\n                                    className={classes.RestoreButton}\n                                 >\n                                   Restore This Record\n                                </Button>\n                            </li>\n\n                            <li hidden={!(restoreMode.restore && restoreMode.person._id  === person._id)}>\n                                 <Button\n                                    type=\"button\"\n                                    fullWidth\n                                    variant=\"contained\"\n                                    color=\"primary\"\n                                    disabled = {restoring}\n                                    onClick = {() => {handleRestoreModeChanged(false, person)}}\n                                    className={classes.SaveButton}\n                                 >\n                                    YES, Restore this!\n                                </Button>\n                            </li>\n\n                            <li hidden={!(restoreMode.restore && restoreMode.person._id  === person._id)}>\n                                 <Button\n                                    type=\"button\"\n                                    fullWidth\n                                    variant=\"contained\"\n                                    color=\"default\"\n                                    disabled = {restoring}\n                                    onClick = {() => {handleRestoreModeChanged(false, null)}}\n                                    className={classes.CancelButton}\n                                 >\n                                    Cancel\n                                </Button>\n                            </li>\n\n                           {/*  ******************************************************************* */}\n\n                              {/* Edit Functionality ******************************************* */}\n\n                            <li hidden={person.deleted || deleteMode.delete || (editMode.edit && editMode.person._id === person._id)}>\n                                 <Button\n                                    type=\"button\"\n                                    fullWidth\n                                    variant=\"contained\"\n                                    color=\"primary\"\n                                    onClick = {() => {handleEditModeChanged(true, person)}}\n                                    className={classes.EditButton}\n                                 >\n                                    Edit Booking Info\n                                </Button>\n                            </li>\n\n                            <li hidden={!(editMode.edit && editMode.person._id  === person._id)}>\n                                 <Button\n                                    type=\"button\"\n                                    fullWidth\n                                    variant=\"contained\"\n                                    color=\"primary\"\n                                    disabled = {saving}\n                                    onClick = {() => {handleEditModeChanged(false, person)}}\n                                    className={classes.SaveButton}\n                                 >\n                                    Save Changes\n                                </Button>\n                            </li>\n\n                            <li hidden={!(editMode.edit && editMode.person._id === person._id)}>\n                                 <Button\n                                    type=\"button\"\n                                    fullWidth\n                                    variant=\"contained\"\n                                    color=\"default\"\n                                    disabled = {saving}\n                                    onClick = {() => {handleEditModeChanged(false, null)}}\n                                    className={classes.CancelButton}\n                                 >\n                                    Cancel\n                                </Button>\n                            </li>\n                            \n                            {/* ****************************************************************************************** */}\n\n\n                            {/* Delete Functionality ******************************************* */}\n\n                            <li hidden={!(deleteMode.delete && deleteMode.person._id  === person._id)}>\n                              <div style={{fontWeight: \"600\",  paddingBottom: \"5px\", paddingLeft: \"5px\", fontSize:\"16px\"}}>\n                                Are you sure you want to delete this record?\n                              </div>\n                            </li>\n\n                            <li hidden={person.deleted ||  editMode.edit || (deleteMode.delete && deleteMode.person._id === person._id)}>\n                                 <Button\n                                    type=\"button\"\n                                    fullWidth\n                                    variant=\"contained\"\n                                    color=\"primary\"\n                                    onClick = {() => {handleDeleteModeChanged(true, person)}}\n                                    className={classes.DeleteButton}\n                                 >\n                                   Delete This Record\n                                </Button>\n                            </li>\n\n                            <li hidden={!(deleteMode.delete && deleteMode.person._id  === person._id)}>\n                                 <Button\n                                    type=\"button\"\n                                    fullWidth\n                                    variant=\"contained\"\n                                    color=\"primary\"\n                                    disabled = {deleting}\n                                    onClick = {() => {handleDeleteModeChanged(false, person)}}\n                                    className={classes.SaveButton}\n                                 >\n                                    YES, Delete this!\n                                </Button>\n                            </li>\n\n                            <li hidden={!(deleteMode.delete && deleteMode.person._id === person._id)}>\n                                 <Button\n                                    type=\"button\"\n                                    fullWidth\n                                    variant=\"contained\"\n                                    color=\"default\"\n                                    disabled = {deleting}\n                                    onClick = {() => {handleDeleteModeChanged(false, null)}}\n                                    className={classes.CancelButton}\n                                 >\n                                    Cancel\n                                </Button>\n                            </li>\n                                 \n                            {/* ****************************************************************************************** */}\n\n                            <li className={classes.li}>\n                                <span className={classes.infoTitle}>BOOKED DATE</span> \n                            \n\n                                <span hidden={(editMode.edit && editMode.person._id  === person._id)} className={classes.infoData}>\n                                   {FormatDateFromString(person.bookingDate) }\n                                  </span>  \n                                        <span hidden={!(editMode.edit && editMode.person._id  === person._id)} className={classes.infoData}>\n                                          <TextField \n                                                      fullWidth\n                                                      error={validationError.bookingDateError}\n                                                      className={classes.TextBox} \n                                                      value={bookingDate}\n                                                      onChange = {bookingDateChanged}\n                                                      inputProps= {{\n                                                          style:{\n                                                            padding: 0\n                                                          }\n                                                        }\n                                                      }\n                                                      > \n                                          </TextField> \n                                        </span> \n\n\n                            </li>\n\n                            <li className={classes.li}>\n                                <span className={classes.infoTitle}>BOOKED TIME</span> \n                                <span hidden={(editMode.edit && editMode.person._id  === person._id)} className={classes.infoData}>{person.bookingTime.toUpperCase()}</span>  \n                                        <span hidden={!(editMode.edit && editMode.person._id  === person._id)} className={classes.infoData}>\n                                          <TextField \n                                                      fullWidth\n                                                      error={validationError.bookingTimeError}\n                                                      className={classes.TextBox} \n                                                      value={bookingTime}\n                                                      onChange = {bookingTimeChanged}\n                                                      inputProps= {{\n                                                          style:{\n                                                            padding: 0\n                                                          }\n                                                        }\n                                                      }\n                                                      > \n                                          </TextField> \n                                        </span> \n\n\n                            </li>\n\n                            <li className={classes.li}>\n                            <span className={classes.infoTitle}>GENDER</span> \n                                        <span hidden={(editMode.edit && editMode.person._id  === person._id)} className={classes.infoData}>{person.gender?.toUpperCase()}</span>  \n                                        <span hidden={!(editMode.edit && editMode.person._id  === person._id)} className={classes.infoData}>\n                                          <TextField \n                                                      fullWidth\n                                                      className={classes.TextBox} \n                                                      value={gender}\n                                                      onChange = {genderChanged}\n                                                      inputProps= {{\n                                                          style:{\n                                                            padding: 0\n                                                          }\n                                                        }\n                                                      }\n                                                      > \n                                          </TextField> \n                                        </span> \n                            </li>\n                            <li className={classes.li}>\n                            <span className={classes.infoTitle}>TITLE</span> \n                                       <span hidden={(editMode.edit && editMode.person._id  === person._id)} className={classes.infoData}>{person.title?.toUpperCase()}</span>  \n                                        <span hidden={!(editMode.edit && editMode.person._id  === person._id)} className={classes.infoData}>\n                                          <TextField \n                                                      fullWidth\n                                                      className={classes.TextBox} \n                                                      value={title}\n                                                      onChange = {titleChanged}\n                                                      inputProps= {{\n                                                          style:{\n                                                            padding: 0\n                                                          }\n                                                        }\n                                                      }\n                                                      > \n                                          </TextField> \n                                        </span> \n                             \n                            </li>\n                            <li className={classes.li}>\n                            <span className={classes.infoTitle}>FORENAME</span> \n                                        <span hidden={(editMode.edit && editMode.person._id  === person._id)} className={classes.infoData}>{person.forenameCapital}</span>  \n                                        <span hidden={!(editMode.edit && editMode.person._id  === person._id)} className={classes.infoData}>\n                                        <TextField \n                                                      fullWidth\n                                                      className={classes.TextBox} \n                                                      value={forename}\n                                                      onChange = {forenameChanged}\n                                                      inputProps= {{\n                                                          style:{\n                                                            padding: 0\n                                                          }\n                                                        }\n                                                      }\n                                                      > \n                                          </TextField> \n                                        </span> \n                            </li>\n                            <li className={classes.li}>\n                                <span className={classes.infoTitle}>SURNAME</span>\n                                        <span hidden={(editMode.edit && editMode.person._id  === person._id)} className={classes.infoData}>{person.surnameCapital}</span>  \n                                        <span hidden={!(editMode.edit && editMode.person._id  === person._id)} className={classes.infoData}>\n                                        <TextField \n                                                      fullWidth\n                                                      className={classes.TextBox} \n                                                      value={surname}\n                                                      onChange = {surnameChanged}\n                                                      inputProps= {{\n                                                          style:{\n                                                            padding: 0\n                                                          }\n                                                        }\n                                                      }\n                                                      > \n                                          </TextField> \n                                        </span>   \n                            </li>\n                            <li className={classes.li}>\n                                <span className={classes.infoTitle}>EMAIL</span> \n                                       <span hidden={(editMode.edit && editMode.person._id  === person._id)} className={classes.infoData}>{person.email?.toUpperCase()}</span>  \n                                        <span hidden={!(editMode.edit && editMode.person._id  === person._id)} className={classes.infoData}>\n                                        <TextField \n                                                      fullWidth\n                                                      className={classes.TextBox} \n                                                      value={email}\n                                                      onChange = {emailChanged}\n                                                      inputProps= {{\n                                                          style:{\n                                                            padding: 0\n                                                          }\n                                                        }\n                                                      }\n                                                      > \n                                          </TextField> \n                                        </span>   \n                            </li>\n                            <li className={classes.li}>\n                                <span className={classes.infoTitle}>D.O.B</span>\n                                        <span hidden={(editMode.edit && editMode.person._id  === person._id)} className={classes.infoData}>\n                                            {FormatDateFromString(person.birthDate) }\n                                          </span>  \n                                        <span hidden={!(editMode.edit && editMode.person._id  === person._id)} className={classes.infoData}>\n                                        <TextField \n                                                      fullWidth\n                                                      error={validationError.dobError} \n                                                      className={classes.TextBox} \n                                                      value={dob}\n                                                      onChange = {dobChanged}\n                                                      inputProps= {{\n                                                          style:{\n                                                            padding: 0\n                                                          }\n                                                        }\n                                                      }\n                                                      > \n                                          </TextField> \n                                        </span>   \n                            </li>\n                            <li className={classes.li}>\n                                <span className={classes.infoTitle}>TEL</span>\n                                 <span hidden={(editMode.edit && editMode.person._id  === person._id)} className={classes.infoData}>{person.phone?.toUpperCase()}</span>  \n                                        <span hidden={!(editMode.edit && editMode.person._id  === person._id)} className={classes.infoData}>\n                                        <TextField \n                                                      fullWidth\n                                                      className={classes.TextBox} \n                                                      value={tel}\n                                                      onChange = {telChanged}\n                                                      inputProps= {{\n                                                          style:{\n                                                            padding: 0\n                                                          }\n                                                        }\n                                                      }\n                                                      > \n                                          </TextField> \n                                        </span>  \n                            </li>\n                            <li className={classes.li}>\n                                <span className={classes.infoTitle}>POST CODE</span> \n                                        <span hidden={(editMode.edit && editMode.person._id  === person._id)} className={classes.infoData}>{person.postCode?.toUpperCase()}</span>  \n                                        <span hidden={!(editMode.edit && editMode.person._id  === person._id)} className={classes.infoData}>\n                                        <TextField \n                                                      fullWidth\n                                                      className={classes.TextBox} \n                                                      value={postCode}\n                                                      onChange = {postCodeChanged}\n                                                      inputProps= {{\n                                                          style:{\n                                                            padding: 0\n                                                          }\n                                                        }\n                                                      }\n                                                      > \n                                          </TextField> \n                                        </span>  \n                            </li>\n                            <li className={classes.li}>\n                                <span className={classes.infoTitle}>ADDRESS</span> \n                                        <span hidden={(editMode.edit && editMode.person._id  === person._id)} className={classes.infoData}>{person.address?.toUpperCase()}</span>  \n                                        <span hidden={!(editMode.edit && editMode.person._id  === person._id)} className={classes.infoData}>\n                                        <TextField \n                                                      fullWidth\n                                                      className={classes.TextBox} \n                                                      value={address}\n                                                      onChange = {addressChanged}\n                                                      inputProps= {{\n                                                          style:{\n                                                            padding: 0\n                                                          }\n                                                        }\n                                                      }\n                                                      > \n                                          </TextField> \n                                        </span>  \n                            </li>\n\n                            <li className={classes.li}>\n                                <span className={classes.infoTitle}>PASSPORT NO.</span>\n                                <span hidden={(editMode.edit && editMode.person._id  === person._id)} className={classes.infoData}>{person.passportNumber?.toUpperCase()}</span>  \n                                        <span hidden={!(editMode.edit && editMode.person._id  === person._id)} className={classes.infoData}>\n                                        <TextField \n                                                      fullWidth\n                                                      className={classes.TextBox} \n                                                      value={passport}\n                                                      onChange = {passportChanged}\n                                                      inputProps= {{\n                                                          style:{\n                                                            padding: 0\n                                                          }\n                                                        }\n                                                      }\n                                                      > \n                                          </TextField> \n                                        </span>  \n                            </li>\n\n                            <li className={classes.li}>\n                                <span className={classes.infoTitle}>SECOND PASSPORT NO.</span> \n                                        <span hidden={(editMode.edit && editMode.person._id  === person._id)} className={classes.infoData}>{person.passportNumber2?.toUpperCase()}</span>  \n                                        <span hidden={!(editMode.edit && editMode.person._id  === person._id)} className={classes.infoData}>\n                                        <TextField \n                                                      fullWidth\n                                                      className={classes.TextBox} \n                                                      value={passport2}\n                                                      onChange = {passport2Changed}\n                                                      inputProps= {{\n                                                          style:{\n                                                            padding: 0\n                                                          }\n                                                        }\n                                                      }\n                                                      > \n                                          </TextField> \n                                        </span>   \n                            </li>\n\n                            <li className={classes.li}>\n                                <span className={classes.infoTitle}>REQUEST FOR CERTIFICATE</span> \n                                <span hidden={(editMode.edit && editMode.person._id  === person._id)} className={classes.infoData}>{person.certificate ? ( <CheckIcon className={classes.checkIcon}/> ) :  <CloseIcon className={classes.closeIcon}/> }</span>\n                                <span hidden={!(editMode.edit && editMode.person._id  === person._id)} className={classes.infoData}>\n                                    <FormControlLabel className={classes.formControl} \n                                          control={<Checkbox className={classes.formControl}  color=\"secondary\" name=\"certificate\" checked={certificate} onChange={certificateChanged} />}\n                                          label=''\n                                        />\n                                </span>    \n                            </li>\n                            <li className={classes.li}>\n                                <span className={classes.infoTitle}>REQUEST FOR ANTIBODY TEST</span>\n                                <span hidden={(editMode.edit && editMode.person._id  === person._id)} className={classes.infoData}>{person.antiBodyTest ? <CheckIcon className={classes.checkIcon}/> :  <CloseIcon className={classes.closeIcon}/> }</span>  \n                                <span hidden={!(editMode.edit && editMode.person._id  === person._id)} className={classes.infoData}>\n                                    <FormControlLabel className={classes.formControl} \n                                          control={<Checkbox className={classes.formControl}  color=\"secondary\" name=\"certificate\" checked={antiBodyTest} onChange={antiBodyTestChanged} />}\n                                          label=''\n                                        />\n                                </span>   \n                            </li>\n                            <li className={classes.li}>\n                                <span className={classes.infoTitle}>STATUS</span> \n                                {getStatusLabel(person.status)} \n                                \n                                {person.status === \"sample_taken\" &&\n                                          !(\n                                            editMode.edit && editMode.person._id === person._id\n                                          ) && (\n                                            <Button \n                                                  variant=\"outlined\"\n                                                  color=\"primary\"\n                                                  disabled = {saving}\n                                                  onClick = {event => changeBackToBookingMade(event,person._id)}\n\n                                                    >\n                                              Change Back To Booking Made\n                                            </Button>\n                                          )}\n\n                            </li>\n      \n                            <li className={classes.li}>\n                                <span className={classes.infoTitle}>TOTAL CHARGES</span> <span className={calculatePrice(person) <= 199 ? classes.infoDataCharges : classes.infoDataChargesHigher}>{`£${calculatePrice(person)}`}</span>  \n                            </li>\n\n                            <li  hidden={person.deleted} >\n                                 <Button\n                                    startIcon = {<PrintIcon/>}\n                                    type=\"button\"\n                                    fullWidth\n                                    variant=\"outlined\"\n                                    color=\"primary\"\n                                    onClick = {() => {downloadForm1(person._id)}}\n                                    // onTouchTap = {() => {downloadForm1(person._id)}}\n                                    className={classes.DownloadForm}\n                                 >\n                                    Download Registration Form\n                                </Button>\n                            </li>\n\n                            <li  hidden={person.deleted}>\n                                  <Button\n                                    startIcon = {<PrintIcon/>}\n                                    type=\"button\"\n                                    fullWidth\n                                    variant=\"outlined\"\n                                    color=\"primary\"\n                                    onClick = {() => {downloadForm2(person._id)}}\n                                    // onTouchTap = {() => {downloadForm2(person._id)}}\n                                    className={classes.DownloadForm}\n                                    >\n                                    Download Lab Form\n                                 </Button>\n                            </li>\n\n                            <li hidden={ person.deleted || (person.status !== 'report_sent' && person.status !== 'report_cert_sent') }>\n                                 <Button\n                                    startIcon = {<PrintIcon/>}\n                                    type=\"button\"\n                                    fullWidth\n                                    variant=\"outlined\"\n                                    color=\"primary\"\n                                    onClick = {() => {downloadLabResults(person._id)}}\n                                    // onTouchTap = {() => {downloadForm1(person._id)}}\n                                    className={classes.DownloadForm}\n                                 >\n                                    Download Lab Results\n                                </Button>\n                            </li>\n\n                            <li hidden={person.deleted || person.status !== 'report_cert_sent'}>\n                                 <Button\n                                    startIcon = {<PrintIcon/>}\n                                    type=\"button\"\n                                    fullWidth\n                                    variant=\"outlined\"\n                                    color=\"primary\"\n                                    onClick = {() => {downloadCertificate(person._id)}}\n                                    // onTouchTap = {() => {downloadForm1(person._id)}}\n                                    className={classes.DownloadForm}\n                                 >\n                                    Download Certificate\n                                </Button>\n                            </li>\n\n                        </ul>\n\n                    </AccordionDetails>\n                    </Accordion>\n                </div>\n            </Grid> \n          ))}\n    </Grid>\n    </React.Fragment>\n  );\n}\n","import React, { useEffect } from 'react';\nimport Button from '@material-ui/core/Button';\nimport CssBaseline from '@material-ui/core/CssBaseline';\nimport TextField from '@material-ui/core/TextField';\nimport Typography from '@material-ui/core/Typography';\nimport { makeStyles } from '@material-ui/core/styles';\nimport GlobalState from './../GlobalState';\nimport Alert from '@material-ui/lab/Alert';\nimport PropTypes from 'prop-types';\nimport MaskedInput from 'react-text-mask';\nimport { FormControl, Grid, Input, InputLabel } from '@material-ui/core';\nimport BookService from './services/BookService';\nimport PersonsBox from './PersonsBox';\n\n\nconst isBoolean = (param) => typeof(param) === \"boolean\"\n\nconst useFocus = (initialFocus = false, id = \"\") => {\n    const [focus, setFocus] = React.useState(initialFocus)\n    const setFocusWithTrueDefault = (param) => setFocus(isBoolean(param)? param : true)\n    return ([\n        setFocusWithTrueDefault, {\n            autoFocus: focus,\n            key: `${id}${focus}`,\n            onFocus: () => setFocus(true),\n            onBlur: () => setFocus(false),\n        },\n    ])\n}\n\n\nfunction TextMaskCustom(props) {\n    const { inputRef, ...other } = props;\n  \n    return (\n      <MaskedInput\n        {...other}\n        ref={(ref) => {\n          inputRef(ref ? ref.inputElement : null);\n        }}\n        mask={[/\\d/, /\\d/, /\\d/, '-', /\\d/, /\\d/, /\\d/, '-', /\\d/, /\\d/, /\\d/]}\n        // placeholderChar={'\\u2000'}\n        showMask\n      />\n    );\n  }\n  \n  TextMaskCustom.propTypes = {\n    inputRef: PropTypes.func.isRequired,\n  };\n\n\n\nconst useStyles = makeStyles((theme) => ({\n\n    root: {\n        width: '100%',\n        '& > * + *': {\n          marginTop: theme.spacing(2),\n        },\n        marginTop: \"20px\"\n      },  \n\n    paper: {\n        marginTop: theme.spacing(8),\n        display: 'flex',\n        flexDirection: 'column',\n        alignItems: 'center',\n    },\n\n    avatar: {\n        margin: theme.spacing(1),\n        backgroundColor: theme.palette.secondary.main,\n    },\n\n    form: {\n        width: '100%', // Fix IE 11 issue.\n        marginTop: theme.spacing(1),\n    },\n\n    Find: {\n        width: \"80px\"\n    },\n\n    Clear:{\n        marginRight: \"20px\"\n    },\n\n    title:{\n        marginTop : \"20px\"\n    },\n\n    TextBox:{\n        marginTop: \"30px\",\n        \"& > *\" :\n        {\n            textAlign: \"center\"\n        },\n  \n    },\n\n    TextField:{\n\n    },\n\n    NoRecordsFound:{\n        marginTop: \"20px\",\n        color: \"red\",\n        fontWeight: \"600\",\n        fontSize: \"14px\",\n    },\n\n    PersonsBox:{\n        marginTop : \"20px\",\n        marginBottom: \"50px\"\n    }\n\n}));\n\nexport default function FindByRef() {\n  const classes = useStyles();\n  const [state, setState] = React.useContext(GlobalState);\n  \n  const [setFocus, focusProps] = useFocus(true);\n\n//   useEffect( () =>\n//   {\n//      findRecords();\n//   }, [state.findRecords]);\n\n useEffect ( () => {\n    setState(state => ({...state, foundRecords : []}));\n }, [])\n\n  useEffect( () => {\n    BookService.getBookingsByRef(state.ref).then( (res)=>\n    {\n        if (res.data.length > 0)\n        {\n            setState(state => ({...state, foundRecords : res.data}));\n        }\n    });\n    }, [state.RefreshPersonInfo]);\n\n    const handleChange = (event) =>\n    {\n        setState(state => ({...state, ref : event.target.value}));\n        setState(state => ({...state, refError : false})); \n    }\n\n    const clearField = () =>\n    {\n        setState(state => ({...state, refError : false})); \n        setState(state => ({...state, ref : '___-___-___'}));\n        setState(state => ({...state, foundRecords : []}));\n        setFocus();\n    }\n\n    const findRecords = () =>\n    {\n        if (!state.ref || state.ref.indexOf('_') >= 0)\n        {\n            setState(state => ({...state, refError : true}));  \n            return;\n        }\n\n        setState(state => ({...state, submiting : true}));\n        setState(state => ({...state, foundRecords : []}));\n\n        BookService.getBookingsByRef(state.ref).then( (res)=>\n        {\n            setState(state => ({...state, submiting : false}));\n            if (res.data.length > 0)\n            {\n                setState(state => ({...state, foundRecords : res.data}));\n            }\n            else\n            {\n                setState(state => ({...state, foundRecords : null}));\n            }\n            \n            console.log(res.data);\n\n        }).catch( (err) =>\n        {\n            console.log(err);\n            setState(state => ({...state, submiting : false}));\n        });\n    }\n\n  return (\n    <React.Fragment>\n        <CssBaseline />\n        <div className={classes.title}>\n            <Typography component=\"h6\" variant=\"h6\" align=\"center\">\n                Find Booking Appoinments\n            </Typography>  \n        </div> \n\n        <Grid container direction=\"column\" spacing={1} justify=\"flex-start\"  alignItems=\"center\">\n\n        <Grid item xs={12} md={12}>\n            <FormControl className={classes.TextBox}>\n                <TextField\n                    {...focusProps}\n                    autoFocus \n                    pattern=\"[0-9]*\"\n                    error = {state.refError ? true : false} \n                    value = {state.ref}\n                    className = {classes.TextField}\n                    width = \"50px\"\n                    onChange={handleChange}\n                    label=\"Reference No.\"\n                    helperText=\"Enter Your 9-digits Reference No.\"\n                    name=\"refNo\"\n                    id=\"refNo\"\n                    variant=\"outlined\"\n                    \n                    size=\"medium\"\n                    margin=\"normal\"\n                    fullWidth = {true}\n                    InputProps={{\n                        inputComponent: TextMaskCustom,\n                        style: { textAlign: 'center', fontSize:\"24px\", width: \"210px\", paddingLeft: \"20px\" }\n                    }}\n\n                    onKeyPress= {event => {\n                        if (event.key === 'Enter') {\n                            findRecords();\n                        }\n                      }}\n                />         \n            </FormControl>\n        </Grid>\n\n        <Grid item xs={12} md={12}>\n               \n                <Button\n                    disabled = {state.submiting}\n                    color=\"default\"\n                    onClick = {clearField}\n                    onTouchTap = {clearField}\n                    className={classes.Clear}\n                >\n                    Clear \n                </Button>  \n            \n                <Button\n                    type=\"button\"\n                    disabled = {state.submiting}\n                    variant=\"contained\"\n                    color=\"primary\"\n                    onClick = {findRecords}\n                    onTouchTap = {findRecords}\n                    className={classes.Find}\n                >\n                    Find \n                </Button>  \n        </Grid>\n\n        <Grid item xs={12} md={12}>\n\n                    \n\n            {state.foundRecords && state.foundRecords.length > 0 && (\n                <React.Fragment>\n\n                    <div className={classes.PersonsBox}>\n                          <PersonsBox/>\n                    </div>\n                    \n\n\n                </React.Fragment>\n            )}   \n\n            {!state.foundRecords && (\n                <React.Fragment>\n\n                <div className={classes.root}>\n                    <Alert severity=\"error\"> <strong>No Records Found !</strong> <br/> Please check you reference number again.</Alert>\n                </div> \n                   \n                </React.Fragment>\n            )}\n\n        </Grid>\n        \n        \n        </Grid>\n        \n    </React.Fragment>\n   \n  );\n}","import React, { useEffect, useRef, useState } from \"react\";\nimport BookService from \"./services/BookService\";\nimport Typography from \"@material-ui/core/Typography\";\nimport {\n  Button,\n  Checkbox,\n  Divider,\n  FormControlLabel,\n  Grid,\n  Link,\n  makeStyles,\n  TextField,\n  Tooltip,\n} from \"@material-ui/core\";\nimport GlobalState from \"./../GlobalState\";\nimport { withStyles } from \"@material-ui/core/styles\";\n\nimport SendIcon from \"@material-ui/icons/Send\";\n\nimport Dialog from \"@material-ui/core/Dialog\";\nimport DialogContent from \"@material-ui/core/DialogContent\";\n\nimport DialogTitle from \"@material-ui/core/DialogTitle\";\nimport Draggable from \"react-draggable\";\nimport Paper from \"@material-ui/core/Paper\";\n\nimport Alert from \"@material-ui/lab/Alert\";\n\nimport PropTypes from \"prop-types\";\nimport LinearProgress from \"@material-ui/core/LinearProgress\";\nimport Box from \"@material-ui/core/Box\";\n\nvar interval;\n\nconst useStyles = makeStyles((theme) => ({\n  title: {\n    marginTop: theme.spacing(0),\n    marginBottom: theme.spacing(1),\n  },\n\n  refreshButton: {\n    marginLeft: theme.spacing(2),\n  },\n\n  checkIcon: {\n    color: \"green\",\n  },\n\n  closeIcon: {\n    color: \"red\",\n  },\n\n  RefLink: {\n    cursor: \"pointer\",\n  },\n\n  BookedLabel: {\n    backgroundColor: \"#606060\",\n    color: \"#fff\",\n    paddingRight: \"10px\",\n    paddingLeft: \"10px\",\n  },\n\n  PatientAttendedLabel: {\n    backgroundColor: \"#0066aa\",\n    color: \"#fff\",\n    paddingRight: \"15px\",\n    paddingLeft: \"10px\",\n  },\n\n  SampleTakenLabel: {\n    backgroundColor: \"#0066cc\",\n    color: \"#fff\",\n    paddingRight: \"40px\",\n    paddingLeft: \"10px\",\n  },\n\n  ReportSentLabel: {\n    backgroundColor: \"#009900\",\n    color: \"#fff\",\n    paddingRight: \"90px\",\n    paddingLeft: \"10px\",\n  },\n\n  ReportCertSentLabel: {\n    backgroundColor: \"#009900\",\n    color: \"#fff\",\n    paddingRight: \"68px\",\n    paddingLeft: \"10px\",\n  },\n\n  archiveButton: {},\n\n  smartMatchButton: {\n    backgroundColor: \"#2f942e\",\n    \"&:hover\": {\n      background: \"green\",\n      color: \"#fff\",\n    },\n    textDecoration: \"none !important\",\n    marginRight: \"10px\",\n    // padding: \"10px\"\n  },\n\n  infoTitle: {\n    fontWeight: \"400\",\n  },\n\n  infoData: {\n    paddingLeft: \"10px\",\n    fontWeight: \"800\",\n  },\n\n  matchButton: {\n    marginTop: \"30px\",\n    marginBottom: \"20px\",\n    backgroundColor: \"#2f942e\",\n    \"&:hover\": {\n      background: \"green\",\n      color: \"#fff\",\n    },\n    textDecoration: \"none !important\",\n    padding: \"10px\",\n    paddingLeft: \"50px\",\n    paddingRight: \"50px\",\n  },\n\n  resendButton: {\n    marginTop: \"5px\",\n    marginBottom: \"5px\",\n    backgroundColor: \"#2f942e\",\n    \"&:hover\": {\n      background: \"green\",\n      color: \"#fff\",\n    },\n    textDecoration: \"none !important\",\n    padding: \"10px\",\n    paddingLeft: \"50px\",\n    paddingRight: \"50px\",\n  },\n\n  resendFilesButton: {\n    marginTop: \"5px\",\n    marginBottom: \"5px\",\n    backgroundColor: \"#3792ad\",\n    \"&:hover\": {\n      background: \"#2f798f\",\n      color: \"#fff\",\n    },\n    textDecoration: \"none !important\",\n    padding: \"10px\",\n    paddingLeft: \"50px\",\n    paddingRight: \"50px\",\n  },\n\n  cancelButton: {\n    marginBottom: \"10px\",\n    textDecoration: \"none !important\",\n    padding: \"10px\",\n    paddingLeft: \"90px\",\n    paddingRight: \"90px\",\n  },\n}));\n\nconst BorderLinearProgress = withStyles((theme) => ({\n  root: {\n    height: 10,\n    borderRadius: 5,\n  },\n  colorPrimary: {\n    backgroundColor: \"#cedbce\", //theme.palette.grey[theme.palette.type === 'light' ? 200 : 700],\n  },\n  bar: {\n    borderRadius: 5,\n    backgroundColor: \"#2f942e\",\n  },\n}))(LinearProgress);\nfunction LinearProgressWithLabel(props) {\n  return (\n    <Box display=\"flex\" alignItems=\"center\">\n      <Box width=\"100%\" mr={1}>\n        <BorderLinearProgress variant=\"determinate\" {...props} />\n      </Box>\n      <Box minWidth={35}>\n        <Typography\n          style={{ fontWeight: \"800\", color: \"#5e855e\" }}\n          variant=\"body2\"\n          color=\"textSecondary\"\n        >{`${Math.round(props.value)}%`}</Typography>\n      </Box>\n    </Box>\n  );\n}\n\nLinearProgressWithLabel.propTypes = {\n  /**\n   * The value of the progress indicator for the determinate and buffer variants.\n   * Value between 0 and 100.\n   */\n  value: PropTypes.number.isRequired,\n};\n\nfunction PaperComponent(props) {\n  return (\n    <Draggable\n      handle=\"#draggable-dialog-title\"\n      cancel={'[class*=\"MuiDialogContent-root\"]'}\n    >\n      <Paper {...props} />\n    </Draggable>\n  );\n}\n\nexport default function ResendEmailsDialog(props) {\n  const classes = useStyles();\n\n  const [state, setState] = React.useContext(GlobalState);\n\n  const [sending, setSending] = React.useState(false);\n  const [sent, setSent] = React.useState(false);\n\n  const [sendJustToPCR, setSendJustToPCR] = React.useState(false);\n\n  const [sendingStatus, setSendingStatus] = React.useState(\"\");\n\n  const [sendingProgress, setSendingProgress] = React.useState(10);\n\n  const [error, setError] = React.useState(false);\n\n  const getProgress = (status) => {\n    console.log(`status : ${status}`);\n\n    if (status === \"downloadFailed\") return 10;\n    else if (status === \"downloading\") return 30;\n    else if (status === \"downloadSuccess\") return 70;\n    else if (status === \"sent\") return 100;\n    else return 0;\n  };\n\n  const handleClose = () => {\n    setSending(false);\n    setSent(false);\n    setError(false);\n    clearInterval(interval);\n    props.handleClose();\n  };\n\n  useEffect(() => {\n    setSendingProgress((prevProgress) =>\n      prevProgress >= 100 ? 100 : getProgress(sendingStatus)\n    );\n  }, [sendingStatus]);\n\n  const resendFilesClicked = (event) => {\n    setSending(true);\n    setSendingProgress(0);\n    setSendingStatus(\"downloadFailed\");\n    setSendJustToPCR(true);\n\n    BookService.regenerateFilesWithBookingId(props.booking._id)\n      .then((res) => {\n        interval = setInterval(() => {\n          BookService.getLinkDetailsWithBookingId(props.booking._id).then(\n            (res) => {\n              if (res.data.status === \"OK\") {\n                setSendingStatus(res.data.link.status);\n\n                if (res.data.link.status === \"sent\") {\n                  setSending(false);\n                  setSent(true);\n                  clearInterval(interval);\n                }\n              } else if (res.data.status === \"FAILED\") {\n                setSending(false);\n                setSent(false);\n                clearInterval(interval);\n                setError(true);\n              }\n            }\n          );\n        }, 1000);\n\n        setTimeout(() => {\n          setError(true);\n          clearInterval(interval);\n        }, 60000);\n      })\n      .catch((err) => {\n        console.log(err);\n        setSending(false);\n      });\n  };\n\n  const resendEmailsClicked = (event) => {\n    setSending(true);\n    setSendingProgress(0);\n    setSendingStatus(\"downloadFailed\");\n\n    BookService.resendEmailsWithBookingId(props.booking._id)\n      .then((res) => {\n        interval = setInterval(() => {\n          BookService.getLinkDetailsWithBookingId(props.booking._id).then(\n            (res) => {\n              if (res.data.status === \"OK\") {\n                setSendingStatus(res.data.link.status);\n\n                if (res.data.link.status === \"sent\") {\n                  setSending(false);\n                  setSent(true);\n                  clearInterval(interval);\n                }\n              } else if (res.data.status === \"FAILED\") {\n                setSending(false);\n                setSent(false);\n                clearInterval(interval);\n                setError(true);\n              }\n            }\n          );\n        }, 1000);\n\n        setTimeout(() => {\n          setError(true);\n          clearInterval(interval);\n        }, 60000);\n      })\n      .catch((err) => {\n        console.log(err);\n        setSending(false);\n      });\n  };\n\n  const cancelResendEmailsClicked = (event) => {\n    props.handleClose();\n  };\n\n  return (\n    <React.Fragment>\n      {props.booking && (\n        <React.Fragment>\n          <Dialog\n            maxWidth=\"md\"\n            open={props.open}\n            onClose={handleClose}\n            PaperComponent={PaperComponent}\n            aria-labelledby=\"form-dialog-title\"\n          >\n            <DialogTitle id=\"draggable-dialog-title\">\n              <Grid\n                container\n                spacing={2}\n                direction=\"row\"\n                justify=\"center\"\n                alignItems=\"center\"\n              >\n                <Grid item>\n                  <SendIcon style={{ color: \"#2f942e\", fontSize: \"2rem\" }} />\n                </Grid>\n\n                <Grid item>\n                  <div\n                    style={{\n                      color: \"#2f942e\",\n                      paddingBottom: \"12px\",\n                      fontWeight: \"800\",\n                    }}\n                  >\n                    {\" \"}\n                    RESEND EMAILS{\" \"}\n                  </div>\n                </Grid>\n              </Grid>\n\n              <Divider />\n            </DialogTitle>\n            <DialogContent>\n              <div\n                style={{\n                  height: \"230px\",\n                }}\n              >\n                <Grid\n                  container\n                  direction=\"column\"\n                  justify=\"center\"\n                  spacing={1}\n                  alignItems=\"center\"\n                >\n                  {!sent && !sending && (\n                    <React.Fragment>\n                      <Grid item>\n                        <div\n                          style={{\n                            paddingTop: \"5px\",\n                            fontSize: \"1rem\",\n                            fontWeight: \"500\",\n                            color: \"#555\",\n                          }}\n                        >\n                          Do you want to Resend the LAB Report{\" \"}\n                          {props.booking.certificate ? \" and Certificate\" : \"\"}{\" \"}\n                          Now?\n                        </div>\n                      </Grid>\n\n                      <Grid item>\n                        <Button\n                          disabled={sending || sent}\n                          className={classes.resendButton}\n                          variant=\"contained\"\n                          color=\"primary\"\n                          onClick={resendEmailsClicked}\n                        >\n                          YES ! RESEND THE EMAILS\n                        </Button>\n                      </Grid>\n\n                      <Grid item>\n                        <Button\n                          disabled={sending || sent}\n                          className={classes.cancelButton}\n                          variant=\"contained\"\n                          color=\"default\"\n                          onClick={cancelResendEmailsClicked}\n                        >\n                          NO ! NOT NOW\n                        </Button>\n                      </Grid>\n\n                      <Grid item>\n                        <Button\n                          disabled={sending || sent}\n                          className={classes.resendFilesButton}\n                          variant=\"contained\"\n                          color=\"primary\"\n                          onClick={resendFilesClicked}\n                        >\n                          Just Generate The Files and send to\n                          pcrresults@medicalexpressclinic.co.uk\n                        </Button>\n                      </Grid>\n                    </React.Fragment>\n                  )}\n\n                  {error && !sending && !sent && (\n                    <Grid item>\n                      <Alert\n                        style={{\n                          marginTop: \"10px\",\n                          paddingLeft: \"50px\",\n                          paddingRight: \"50px\",\n                        }}\n                        severity=\"error\"\n                      >\n                        Error! — Something is wrong with this record!\n                      </Alert>\n                    </Grid>\n                  )}\n\n                  {(sending || sent) && (\n                    <Grid item>\n                      <div\n                        style={{\n                          paddingTop: \"50px\",\n                          color: \"#2f942e\",\n                          fontWeight: \"600\",\n                          fontSize: \"1rem\",\n                        }}\n                      >\n                        {sending && !sent && \"Sending ...\"}\n\n                        {sent && !sendJustToPCR && (\n                          <Alert\n                            style={{\n                              marginTop: \"10px\",\n                              paddingLeft: \"50px\",\n                              paddingRight: \"50px\",\n                            }}\n                            severity=\"success\"\n                          >\n                            Success! — The LAB Report{\" \"}\n                            {props.booking.certificate\n                              ? \" and Certificate \"\n                              : \" \"}{\" \"}\n                            Successfully Sent.\n                          </Alert>\n                        )}\n\n                        {sent && sendJustToPCR && (\n                          <Alert\n                            style={{\n                              marginTop: \"10px\",\n                              paddingLeft: \"50px\",\n                              paddingRight: \"50px\",\n                            }}\n                            severity=\"success\"\n                          >\n                            Success! — The LAB Report{\" \"}\n                            {props.booking.certificate\n                              ? \" and Certificate \"\n                              : \" \"}{\" \"}\n                            Successfully Sent Just to\n                            pcrresults@medicalexpressclinic.co.uk .\n                          </Alert>\n                        )}\n                      </div>\n                    </Grid>\n                  )}\n                </Grid>\n\n                {(sending || sent) && (\n                  <React.Fragment>\n                    <div\n                      style={{\n                        marginTop: \"10px\",\n                        width: \"50%\",\n                        marginLeft: \"27%\",\n                      }}\n                    >\n                      <LinearProgressWithLabel\n                        variant=\"determinate\"\n                        color=\"primary\"\n                        value={sendingProgress}\n                      />\n                    </div>\n\n                    <div\n                      style={{\n                        paddingTop: \"30px\",\n                        color: \"#2f942e\",\n                        fontWeight: \"600\",\n                        fontSize: \"1rem\",\n                        marginLeft: \"45%\",\n                      }}\n                    >\n                      {sending && !sent && \"PLEASE WAIT ...\"}\n                    </div>\n                  </React.Fragment>\n                )}\n              </div>\n            </DialogContent>\n          </Dialog>\n        </React.Fragment>\n      )}\n    </React.Fragment>\n  );\n}\n","import React, {useEffect, useRef, useState} from 'react';\nimport BookService from './services/BookService';\nimport Typography from '@material-ui/core/Typography';\nimport { Backdrop, Button, Checkbox, CircularProgress, Divider, FormControlLabel, Grid, InputLabel, Link, makeStyles, MenuItem, Select, TextField, Tooltip } from '@material-ui/core';\nimport GlobalState from './../GlobalState';\nimport { withStyles } from '@material-ui/core/styles';\n\n\nimport CreditCardIcon from '@material-ui/icons/CreditCard';\n\nimport Dialog from '@material-ui/core/Dialog';\nimport DialogContent from '@material-ui/core/DialogContent';\n\nimport DialogTitle from '@material-ui/core/DialogTitle';\nimport Draggable from 'react-draggable';\nimport Paper from '@material-ui/core/Paper';\n\nimport Alert from '@material-ui/lab/Alert';\n\nimport PropTypes from 'prop-types';\nimport LinearProgress from '@material-ui/core/LinearProgress';\nimport Box from '@material-ui/core/Box';\n\nimport Radio from '@material-ui/core/Radio';\nimport RadioGroup from '@material-ui/core/RadioGroup';\nimport FormControl from '@material-ui/core/FormControl';\nimport FormLabel from '@material-ui/core/FormLabel';\nimport { corporates } from './Corporates';\n\nvar interval;\n\nconst useStyles = makeStyles((theme) => ({\n  title: {\n    marginTop: theme.spacing(0),\n    marginBottom: theme.spacing(1),\n\n  },\n  \n  refreshButton:{\n    marginLeft: theme.spacing(2),\n  },\n\n  checkIcon:{\n    color: \"green\"\n  },\n\n  closeIcon:{\n    color: \"red\"\n  },\n\n  RefLink: {\n    cursor: \"pointer\"\n  },\n\n  BookedLabel:{\n    backgroundColor: \"#606060\",\n    color: \"#fff\",\n    paddingRight: \"10px\",\n    paddingLeft: \"10px\"\n  },\n\n  PatientAttendedLabel:{\n    backgroundColor: \"#0066aa\",\n    color: \"#fff\",\n    paddingRight: \"15px\",\n    paddingLeft: \"10px\"\n  },\n\n  SampleTakenLabel:{\n    backgroundColor: \"#0066cc\",\n    color: \"#fff\",\n    paddingRight: \"40px\",\n    paddingLeft: \"10px\"\n  },\n\n  ReportSentLabel:{\n    backgroundColor: \"#009900\",\n    color: \"#fff\",\n    paddingRight: \"90px\",\n    paddingLeft: \"10px\"\n  },\n\n  ReportCertSentLabel:{\n    backgroundColor: \"#009900\",\n    color: \"#fff\",\n    paddingRight: \"68px\",\n    paddingLeft: \"10px\"\n  },\n\n  archiveButton: {\n\n  },\n\n  smartMatchButton: {\n    backgroundColor : \"#2f942e\",\n    \"&:hover\": {\n      background: \"green\",\n      color: \"#fff\"\n    },\n    textDecoration : \"none !important\",\n    marginRight : \"10px\"\n    // padding: \"10px\"  \n  },\n\n  infoTitle:  {\n    fontWeight: \"400\"\n  },\n\n  infoData: {\n    paddingLeft: \"10px\",\n    fontWeight: \"800\"\n  },\n\n  matchButton:\n  {\n    marginTop: \"30px\",\n    marginBottom : \"20px\",\n    backgroundColor : \"#2f942e\",\n    \"&:hover\": {\n      background: \"green\",\n      color: \"#fff\"\n    },\n    textDecoration : \"none !important\",\n    padding: \"10px\",\n    paddingLeft : \"50px\",\n    paddingRight: \"50px\"   \n  },\n\n  resendButton:\n  {\n    marginTop: \"5px\",\n    marginBottom : \"5px\",\n    backgroundColor : \"#2f942e\",\n    \"&:hover\": {\n      background: \"green\",\n      color: \"#fff\"\n    },\n    textDecoration : \"none !important\",\n    padding: \"10px\",\n    paddingLeft : \"50px\",\n    paddingRight: \"50px\"   \n  },\n\n  resendFilesButton:{\n    marginTop: \"5px\",\n    marginBottom : \"5px\",\n    backgroundColor : \"#3792ad\",\n    \"&:hover\": {\n      background: \"#2f798f\",\n      color: \"#fff\"\n    },\n    textDecoration : \"none !important\",\n    padding: \"10px\",\n    paddingLeft : \"50px\",\n    paddingRight: \"50px\"   \n  },\n\n  cancelButton:\n  {\n    marginBottom : \"10px\",\n    textDecoration : \"none !important\",\n    padding: \"10px\",\n    paddingLeft : \"90px\",\n    paddingRight: \"90px\"   \n  },\n  \n  backdrop: {\n    zIndex: theme.zIndex.drawer + 5,\n    color: \"#fff\",\n  },\n  \n}));\n\nconst BorderLinearProgress = withStyles((theme) => ({\n  root: {\n    height: 10,\n    borderRadius: 5,\n  },\n  colorPrimary: {\n    backgroundColor: \"#cedbce\" //theme.palette.grey[theme.palette.type === 'light' ? 200 : 700],\n  },\n  bar: {\n    borderRadius: 5,\n    backgroundColor: '#2f942e',\n  },\n}))(LinearProgress);\nfunction LinearProgressWithLabel(props) {\n  return (\n    <Box display=\"flex\" alignItems=\"center\">\n      <Box width=\"100%\" mr={1}>\n        <BorderLinearProgress variant=\"determinate\" {...props} />\n      </Box>\n      <Box minWidth={35}>\n        <Typography style={{fontWeight:\"800\", color :  \"#5e855e\"  }} variant=\"body2\" color=\"textSecondary\">{`${Math.round(\n          props.value,\n        )}%`}</Typography>\n      </Box>\n    </Box>\n  );\n}\n\nLinearProgressWithLabel.propTypes = {\n  /**\n   * The value of the progress indicator for the determinate and buffer variants.\n   * Value between 0 and 100.\n   */\n  value: PropTypes.number.isRequired,\n};\n\n\nfunction PaperComponent(props) {\n  return (\n    <Draggable handle=\"#draggable-dialog-title\" cancel={'[class*=\"MuiDialogContent-root\"]'}>\n      <Paper {...props} />\n    </Draggable>\n  );\n}\n\n\n\nexport default function PayDialog(props) {\n  \n  const classes = useStyles();\n\n  const [state, setState] = React.useContext(GlobalState);  \n  const [paymentMethod, setPaymentMethod] = useState('credit card');\n  const [corporate, setCorporate] = useState(corporates[0]);\n  const [saving, setSaving] = useState(false);\n\n  const paymentMethodChanged = (event) =>\n  {\n    setPaymentMethod(event.target.value);\n  }\n\n  const handleClose = () =>\n  {\n      if (saving)\n        return;\n\n      props.handleClose();  \n      setPaymentMethod('credit card');\n      setCorporate(corporates[0]);\n      setSaving(false);\n  }\n\n  const corporateChanged = (event) =>\n  {\n    setCorporate(event.target.value);\n  }\n\n  const payClicked = async () =>\n  {\n    setSaving(true);\n\n    try\n    {\n         await BookService.payBooking(props.booking._id,paymentMethod, paymentMethod === 'corporate' ? corporate : '');\n         setSaving(false);\n         setState(state => ({...state, bookingPayChanged : !state.bookingPayChanged ? true : false}));\n         handleClose();\n    }\n    catch(err)\n    {\n        console.error(err);\n        setSaving(false);\n    }\n\n  }\n\n\n  return (\n    <React.Fragment>\n\n        {props.booking && ( \n\n                <React.Fragment>\n<Dialog\nmaxWidth=\"800px\"\nopen={props.open}\nonClose={handleClose}\nPaperComponent={PaperComponent}\naria-labelledby=\"form-dialog-title\"\n>\n<DialogTitle id=\"draggable-dialog-title\">\n  <Grid\n    container\n    spacing={2}\n    direction=\"row\"\n    justify=\"center\"\n    alignItems=\"center\"\n  >\n    <Grid item>\n      <CreditCardIcon\n        style={{ color: \"#f50057\", fontSize: \"3rem\" }}\n      />\n    </Grid>\n\n    <Grid item>\n      <div\n        style={{\n          color: \"#f50057\",\n          paddingBottom: \"10px\",\n          fontWeight: \"800\",\n        }}\n      >\n        {\" \"}\n        PAY the CHARGE{\" \"}\n      </div>\n    </Grid>\n  </Grid>\n\n  <Divider />\n</DialogTitle>\n<DialogContent>\n  <div\n    style={{\n      height: \"270px\",\n    \n    }}\n  >\n        <Grid\n          container\n          direction=\"column\"\n          justify=\"space-between\"\n          spacing = {2}\n          alignItems=\"flex-start\"\n        >\n            <Grid item>\n               <div style={{fontSize: \"17px\"}}> How do you want to pay? </div> \n            </Grid>\n\n            <Grid item>\n      \n            <FormControl component=\"fieldset\">\n                \n                <RadioGroup aria-label=\"paymentMethod\" name=\"paymentMethod\" value={paymentMethod} onChange={paymentMethodChanged}>\n                    <FormControlLabel value=\"credit card\" control={<Radio />} label=\"Credit Card\" />\n                    <FormControlLabel value=\"cash\" control={<Radio />} label=\"Cash\" />\n                    <FormControlLabel value=\"corporate\" control={<Radio />} label=\"Corporate\" />\n                </RadioGroup>\n\n                { paymentMethod === 'corporate' && (\n\n                        <FormControl style={{marginTop: \"10px\"}} className={classes.formControl}>\n                        <Select\n                            labelId=\"select-corporate\"\n                            id=\"select-corporate-id\"\n                            value={corporate}\n                            onChange={corporateChanged}\n                        >\n                        {\n                        corporates.map(element => (\n                                    <MenuItem value={element}>{`${element}`}</MenuItem>\n                        ))\n                        }     \n\n                        </Select>\n                    </FormControl>\n\n                )}\n              \n\n                </FormControl>\n            </Grid>\n\n\n        </Grid>\n\n        <Grid item>\n           \n    </Grid>\n\n    <div style={{position:\"absolute\", bottom:\"20px\", right:\"20px\"}}>\n            <Grid\n                container\n                direction=\"row\"\n                justify=\"flex-end\"\n                alignItems=\"center\"\n                spacing = {1}\n            >\n               \n                <Grid item>\n                    <Button onClick={handleClose}  style= {{width : '100px'}} disabled={saving}>\n                        back\n                    </Button>\n                        \n                </Grid>\n                <Grid item>\n                    <Button \n                        onClick = {payClicked}\n                        variant=\"contained\"\n                        color=\"secondary\"\n                        style= {{width : '100px'}}\n                        disabled={saving}\n                    >\n                        Pay\n                    </Button>\n                </Grid>  \n          </Grid>\n\n    </div>\n\n    \n  </div>\n\n             <Backdrop\n                className={classes.backdrop}\n                open={saving}\n              >\n                <CircularProgress color=\"inherit\" />\n              </Backdrop>\n\n</DialogContent>\n</Dialog>\n\n\n\n\n</React.Fragment>\n\n\n        )}\n  \n    </React.Fragment>\n  );\n}","import React, { useEffect, useRef, useState } from \"react\";\nimport BookService from \"./services/BookService\";\nimport Typography from \"@material-ui/core/Typography\";\nimport {\n  Button,\n  Checkbox,\n  DialogActions,\n  Divider,\n  FormControlLabel,\n  Grid,\n  Link,\n  makeStyles,\n  TextField,\n  Tooltip,\n} from \"@material-ui/core\";\nimport GlobalState from \"./../GlobalState\";\nimport { withStyles } from \"@material-ui/core/styles\";\n\nimport SendIcon from \"@material-ui/icons/Send\";\n\nimport Dialog from \"@material-ui/core/Dialog\";\nimport DialogContent from \"@material-ui/core/DialogContent\";\n\nimport DialogTitle from \"@material-ui/core/DialogTitle\";\nimport Draggable from \"react-draggable\";\nimport Paper from \"@material-ui/core/Paper\";\n\nimport HistoryIcon from \"@material-ui/icons/History\";\nimport dateformat from \"dateformat\";\n\nconst addMinutes = (date, minutes) => {\n  date = new Date(date);\n  return new Date(date.getTime() + minutes * 60 * 1000);\n};\n\nconst useStyles = makeStyles((theme) => ({\n  title: {\n    marginTop: theme.spacing(0),\n    marginBottom: theme.spacing(1),\n  },\n\n  refreshButton: {\n    marginLeft: theme.spacing(2),\n  },\n\n  checkIcon: {\n    color: \"green\",\n  },\n\n  closeIcon: {\n    color: \"red\",\n  },\n\n  RefLink: {\n    cursor: \"pointer\",\n  },\n\n  BookedLabel: {\n    backgroundColor: \"#606060\",\n    color: \"#fff\",\n    paddingRight: \"10px\",\n    paddingLeft: \"10px\",\n  },\n\n  PatientAttendedLabel: {\n    backgroundColor: \"#0066aa\",\n    color: \"#fff\",\n    paddingRight: \"15px\",\n    paddingLeft: \"10px\",\n  },\n\n  SampleTakenLabel: {\n    backgroundColor: \"#0066cc\",\n    color: \"#fff\",\n    paddingRight: \"40px\",\n    paddingLeft: \"10px\",\n  },\n\n  ReportSentLabel: {\n    backgroundColor: \"#009900\",\n    color: \"#fff\",\n    paddingRight: \"90px\",\n    paddingLeft: \"10px\",\n  },\n\n  ReportCertSentLabel: {\n    backgroundColor: \"#009900\",\n    color: \"#fff\",\n    paddingRight: \"68px\",\n    paddingLeft: \"10px\",\n  },\n\n  archiveButton: {},\n\n  smartMatchButton: {\n    backgroundColor: \"#2f942e\",\n    \"&:hover\": {\n      background: \"green\",\n      color: \"#fff\",\n    },\n    textDecoration: \"none !important\",\n    marginRight: \"10px\",\n    // padding: \"10px\"\n  },\n\n  infoTitle: {\n    fontWeight: \"400\",\n  },\n\n  infoData: {\n    paddingLeft: \"10px\",\n    fontWeight: \"800\",\n  },\n\n  matchButton: {\n    marginTop: \"30px\",\n    marginBottom: \"20px\",\n    backgroundColor: \"#2f942e\",\n    \"&:hover\": {\n      background: \"green\",\n      color: \"#fff\",\n    },\n    textDecoration: \"none !important\",\n    padding: \"10px\",\n    paddingLeft: \"50px\",\n    paddingRight: \"50px\",\n  },\n\n  resendButton: {\n    marginTop: \"5px\",\n    marginBottom: \"5px\",\n    backgroundColor: \"#2f942e\",\n    \"&:hover\": {\n      background: \"green\",\n      color: \"#fff\",\n    },\n    textDecoration: \"none !important\",\n    padding: \"10px\",\n    paddingLeft: \"50px\",\n    paddingRight: \"50px\",\n  },\n\n  resendFilesButton: {\n    marginTop: \"5px\",\n    marginBottom: \"5px\",\n    backgroundColor: \"#3792ad\",\n    \"&:hover\": {\n      background: \"#2f798f\",\n      color: \"#fff\",\n    },\n    textDecoration: \"none !important\",\n    padding: \"10px\",\n    paddingLeft: \"50px\",\n    paddingRight: \"50px\",\n  },\n\n  cancelButton: {\n    marginBottom: \"10px\",\n    textDecoration: \"none !important\",\n    padding: \"10px\",\n    paddingLeft: \"90px\",\n    paddingRight: \"90px\",\n  },\n\n  itemTitle: {\n    fontWeight: \"500\",\n    color: \"#555\",\n  },\n\n  itemData: {\n    paddingLeft: \"10px\",\n    fontWeight: \"600\",\n    color: \"#127512\",\n  },\n}));\n\nfunction PaperComponent(props) {\n  return (\n    <Draggable\n      handle=\"#draggable-dialog-title\"\n      cancel={'[class*=\"MuiDialogContent-root\"]'}\n    >\n      <Paper {...props} />\n    </Draggable>\n  );\n}\n\nexport default function TimeStampDialog(props) {\n  const classes = useStyles();\n\n  const [state, setState] = React.useContext(GlobalState);\n\n  const [linkTimeStamp, setLinkTimeStamp] = React.useState(null);\n\n  const handleClose = () => {\n    setLinkTimeStamp(null);\n\n    props.handleClose();\n  };\n\n  useEffect(() => {\n    if (props.booking) {\n      if (props.booking.filename && props.booking.filename.length > 0) {\n        BookService.getLinkDetailsWithBookingId(props.booking._id).then(\n          (res) => {\n            if (res.data.status === \"OK\") {\n              setLinkTimeStamp(res.data.link.timeStamp);\n            }\n          }\n        );\n      }\n    }\n  }, [props.booking]);\n\n  const getDateFromBooking = (booking) => {\n    let date = new Date(booking.bookingDate);\n    date.setHours(booking.bookingTimeNormalized.substr(0, 2));\n    date.setMinutes(booking.bookingTimeNormalized.substr(3, 2));\n    date.setSeconds(0);\n    date.setMilliseconds(0);\n    return date;\n  };\n\n  return (\n    <React.Fragment>\n      {props.booking && (\n        <React.Fragment>\n          <Dialog\n            maxWidth=\"sm\"\n            open={props.open}\n            onClose={handleClose}\n            PaperComponent={PaperComponent}\n            aria-labelledby=\"form-dialog-title\"\n          >\n            <DialogTitle id=\"draggable-dialog-title\">\n              <Grid\n                container\n                spacing={2}\n                direction=\"row\"\n                justify=\"center\"\n                alignItems=\"center\"\n              >\n                <Grid item>\n                  <HistoryIcon style={{ color: \"#f50057\", fontSize: \"2rem\" }} />\n                </Grid>\n\n                <Grid item>\n                  <div\n                    style={{\n                      color: \"#f50057\",\n                      paddingBottom: \"12px\",\n                      fontWeight: \"800\",\n                    }}\n                  >\n                    {\" \"}\n                    Audit Trail{\" \"}\n                  </div>\n                </Grid>\n              </Grid>\n\n              <Divider />\n            </DialogTitle>\n            <DialogContent>\n              <div\n                style={{\n                  height: \"370px\",\n              \n                }}\n              >\n                <Grid\n                  container\n                  direction=\"column\"\n                  justify=\"flex-start\"\n                  spacing={4}\n                  alignItems=\"flex-start\"\n                >\n                  <Grid item>\n                    <span className={classes.itemTitle}>\n                      PATIENT BOOKING TIMESTAMP :{\" \"}\n                    </span>\n                    <span className={classes.itemData}>\n                      {\" \"}\n                      {dateformat(props.booking.timeStamp, \"isoDateTime\")}{\" \"}\n                    </span>\n                  </Grid>\n\n                  <Grid item>\n                    <span className={classes.itemTitle}>\n                      BOOKED DATE AND TIME :{\" \"}\n                    </span>\n                    <span className={classes.itemData}>\n                      {dateformat(\n                        getDateFromBooking(props.booking),\n                        \"isoDateTime\"\n                      )}\n                    </span>\n                  </Grid>\n\n                  <Grid item>\n                    <span className={classes.itemTitle}>\n                      TIMESTAMP ATTENDED :{\" \"}\n                    </span>\n                    {props.booking.samplingTimeStamp ? (\n                      <span className={classes.itemData}>\n                        {\" \"}\n                        {dateformat(\n                          props.booking.samplingTimeStamp,\n                          \"isoDateTime\"\n                        )}{\" \"}\n                      </span>\n                    ) : (\n                      <span className={classes.itemData}> - </span>\n                    )}\n                  </Grid>\n\n                  <Grid item>\n                    <span className={classes.itemTitle}>\n                      TIMESTAMP - SAMPLE TAKEN :{\" \"}\n                    </span>\n                    {props.booking.samplingTimeStamp ? (\n                      <span className={classes.itemData}>\n                        {\" \"}\n                        {dateformat(\n                          addMinutes(props.booking.samplingTimeStamp, 5),\n                          \"isoDateTime\"\n                        )}{\" \"}\n                      </span>\n                    ) : (\n                      <span className={classes.itemData}> - </span>\n                    )}\n                  </Grid>\n\n                  <Grid item>\n                    <span className={classes.itemTitle}>\n                      TIMESTAMP - COLLECTED BY COURIER :{\" \"}\n                    </span>\n                    {props.booking.samplingTimeStamp ? (\n                      <span className={classes.itemData}>\n                        {\" \"}\n                        {dateformat(\n                          addMinutes(props.booking.samplingTimeStamp, 35),\n                          \"isoDateTime\"\n                        )}{\" \"}\n                      </span>\n                    ) : (\n                      <span className={classes.itemData}> - </span>\n                    )}\n                  </Grid>\n\n                  <Grid item>\n                    <span className={classes.itemTitle}>\n                      TIMESTAMP - RESULTS RECEIVED :{\" \"}\n                    </span>\n                    {linkTimeStamp ? (\n                      <span className={classes.itemData}>\n                        {\" \"}\n                        {dateformat(linkTimeStamp, \"isoDateTime\")}{\" \"}\n                      </span>\n                    ) : (\n                      <span className={classes.itemData}> - </span>\n                    )}\n                  </Grid>\n\n                  <Grid item>\n                    <span className={classes.itemTitle}>\n                      TIMESTAMP - SENT TO PATIENT :{\" \"}\n                    </span>\n                    {linkTimeStamp ? (\n                      <span className={classes.itemData}>\n                        {\" \"}\n                        {dateformat(\n                          addMinutes(linkTimeStamp, 5),\n                          \"isoDateTime\"\n                        )}{\" \"}\n                      </span>\n                    ) : (\n                      <span className={classes.itemData}> - </span>\n                    )}\n                  </Grid>\n                </Grid>\n              </div>\n            </DialogContent>\n            <DialogActions>\n              <Button onClick={handleClose} color=\"default\">\n                Back\n              </Button>\n            </DialogActions>\n          </Dialog>\n        </React.Fragment>\n      )}\n    </React.Fragment>\n  );\n}\n","\n\nexport const CalendarColors = {\n    PCR_COLOR : \"#4faef7\",\n    GYNAE_COLOR : \"#e83caf\",\n    GP_COLOR :  \"#ff4f14\",\n    STD_COLOR : \"#d6733a\"\n}\n","import API from './api';\n\nexport default class InvoiceService{\n\n    static createInvoice = (payload) =>\n    {\n        return  API.post('/api/medex/invoice/createinvoice', payload)\n    }\n\n    static updateInvoice = (invoiceNumber, payload) =>\n    {\n        return  API.post(`/api/medex/invoice/updateinvoice?invoiceNumber=${invoiceNumber}`, payload)\n    }\n\n    static deleteinvoice = (invoiceNumber) =>\n    {\n        return  API.post(`/api/medex/invoice/deleteinvoice?invoiceNumber=${invoiceNumber}`)\n    }\n\n    static getInvoiceByBookingId = (bookingId) =>\n    {\n        return  API.get(`/api/medex/invoice/getinvoicebybookingid?bookingId=${bookingId}`)\n    }\n\n    static getInvoiceByInvoiceNumber = (invoiceNumber) =>\n    {\n        return  API.get(`/api/medex/invoice/getinvoicebyinvoicenumber?invoiceNumber=${invoiceNumber}`)\n    }\n\n    static getCodeDetails = (code) =>\n    {\n        return  API.post(`/api/medex/invoice/getcodedetails`, {code: code})\n    }\n\n    static getAllCodes = () =>\n    {\n        return API.get(`/api/medex/invoice/getallcodes`)\n    }\n\n    static downloadInvoice = (id) =>\n    {\n       return API.get(`/api/pdf/downloadinvoice?id=${id}`, {\n        responseType: 'arraybuffer',\n        id: id,\n        headers: {\n            Accept: 'application/pdf',\n        }\n        });\n    }\n\n    static emailInvoice = (id, email) =>\n    {\n       return API.post(`/api/pdf/emailinvoice?id=${id}&email=${email}`);\n    }\n\n}\n","import React, { useEffect, useRef, useState } from \"react\";\nimport InvoiceService from \"./services/InvoiceService\";\nimport Typography from \"@material-ui/core/Typography\";\n\nimport Autocomplete from \"@material-ui/lab/Autocomplete\";\n\nimport {\n  Backdrop,\n  Button,\n  Checkbox,\n  CircularProgress,\n  DialogActions,\n  Divider,\n  FormControlLabel,\n  Grid,\n  IconButton,\n  InputAdornment,\n  InputLabel,\n  Link,\n  makeStyles,\n  MenuItem,\n  Select,\n  TextField,\n  Tooltip,\n} from \"@material-ui/core\";\nimport GlobalState from \"./GlobalState\";\nimport { withStyles } from \"@material-ui/core/styles\";\n\nimport CreditCardIcon from \"@material-ui/icons/CreditCard\";\n\nimport Dialog from \"@material-ui/core/Dialog\";\nimport DialogContent from \"@material-ui/core/DialogContent\";\n\nimport DialogTitle from \"@material-ui/core/DialogTitle\";\nimport Draggable from \"react-draggable\";\nimport Paper from \"@material-ui/core/Paper\";\n\nimport Alert from \"@material-ui/lab/Alert\";\n\nimport PropTypes from \"prop-types\";\nimport LinearProgress from \"@material-ui/core/LinearProgress\";\nimport Box from \"@material-ui/core/Box\";\n\nimport Radio from \"@material-ui/core/Radio\";\nimport RadioGroup from \"@material-ui/core/RadioGroup\";\nimport FormControl from \"@material-ui/core/FormControl\";\nimport NumberFormat from \"react-number-format\";\n\nimport ReceiptIcon from \"@material-ui/icons/Receipt\";\n\nimport DeleteIcon from \"@material-ui/icons/Delete\";\n\nconst useStyles = makeStyles((theme) => ({\n  title: {\n    marginTop: theme.spacing(0),\n    marginBottom: theme.spacing(1),\n  },\n\n  refreshButton: {\n    marginLeft: theme.spacing(2),\n  },\n\n  checkIcon: {\n    color: \"green\",\n  },\n\n  closeIcon: {\n    color: \"red\",\n  },\n\n  RefLink: {\n    cursor: \"pointer\",\n  },\n\n  BookedLabel: {\n    backgroundColor: \"#606060\",\n    color: \"#fff\",\n    paddingRight: \"10px\",\n    paddingLeft: \"10px\",\n  },\n\n  PatientAttendedLabel: {\n    backgroundColor: \"#0066aa\",\n    color: \"#fff\",\n    paddingRight: \"15px\",\n    paddingLeft: \"10px\",\n  },\n\n  SampleTakenLabel: {\n    backgroundColor: \"#0066cc\",\n    color: \"#fff\",\n    paddingRight: \"40px\",\n    paddingLeft: \"10px\",\n  },\n\n  ReportSentLabel: {\n    backgroundColor: \"#009900\",\n    color: \"#fff\",\n    paddingRight: \"90px\",\n    paddingLeft: \"10px\",\n  },\n\n  ReportCertSentLabel: {\n    backgroundColor: \"#009900\",\n    color: \"#fff\",\n    paddingRight: \"68px\",\n    paddingLeft: \"10px\",\n  },\n\n  archiveButton: {},\n\n  smartMatchButton: {\n    backgroundColor: \"#2f942e\",\n    \"&:hover\": {\n      background: \"green\",\n      color: \"#fff\",\n    },\n    textDecoration: \"none !important\",\n    marginRight: \"10px\",\n    // padding: \"10px\"\n  },\n\n  infoTitle: {\n    fontWeight: \"400\",\n  },\n\n  infoData: {\n    paddingLeft: \"10px\",\n    fontWeight: \"800\",\n  },\n\n  matchButton: {\n    marginTop: \"30px\",\n    marginBottom: \"20px\",\n    backgroundColor: \"#2f942e\",\n    \"&:hover\": {\n      background: \"green\",\n      color: \"#fff\",\n    },\n    textDecoration: \"none !important\",\n    padding: \"10px\",\n    paddingLeft: \"50px\",\n    paddingRight: \"50px\",\n  },\n\n  resendButton: {\n    marginTop: \"5px\",\n    marginBottom: \"5px\",\n    backgroundColor: \"#2f942e\",\n    \"&:hover\": {\n      background: \"green\",\n      color: \"#fff\",\n    },\n    textDecoration: \"none !important\",\n    padding: \"10px\",\n    paddingLeft: \"50px\",\n    paddingRight: \"50px\",\n  },\n\n  resendFilesButton: {\n    marginTop: \"5px\",\n    marginBottom: \"5px\",\n    backgroundColor: \"#3792ad\",\n    \"&:hover\": {\n      background: \"#2f798f\",\n      color: \"#fff\",\n    },\n    textDecoration: \"none !important\",\n    padding: \"10px\",\n    paddingLeft: \"50px\",\n    paddingRight: \"50px\",\n  },\n\n  cancelButton: {\n    marginBottom: \"10px\",\n    textDecoration: \"none !important\",\n    padding: \"10px\",\n    paddingLeft: \"90px\",\n    paddingRight: \"90px\",\n  },\n\n  backdrop: {\n    zIndex: theme.zIndex.drawer + 5,\n    color: \"#fff\",\n  },\n}));\n\nfunction NumberFormatCustom(props) {\n  const { inputRef, onChange, ...other } = props;\n\n  return (\n    <NumberFormat\n      {...other}\n      getInputRef={inputRef}\n      onValueChange={(values) => {\n        onChange({\n          target: {\n            name: props.name,\n            value: values.value,\n          },\n        });\n      }}\n      thousandSeparator\n      isNumericString\n      prefix=\"\"\n    />\n  );\n}\n\nNumberFormatCustom.propTypes = {\n  inputRef: PropTypes.func.isRequired,\n  name: PropTypes.string.isRequired,\n  onChange: PropTypes.func.isRequired,\n};\n\nconst BorderLinearProgress = withStyles((theme) => ({\n  root: {\n    height: 10,\n    borderRadius: 5,\n  },\n  colorPrimary: {\n    backgroundColor: \"#cedbce\", //theme.palette.grey[theme.palette.type === 'light' ? 200 : 700],\n  },\n  bar: {\n    borderRadius: 5,\n    backgroundColor: \"#2f942e\",\n  },\n}))(LinearProgress);\nfunction LinearProgressWithLabel(props) {\n  return (\n    <Box display=\"flex\" alignItems=\"center\">\n      <Box width=\"100%\" mr={1}>\n        <BorderLinearProgress variant=\"determinate\" {...props} />\n      </Box>\n      <Box minWidth={35}>\n        <Typography\n          style={{ fontWeight: \"800\", color: \"#5e855e\" }}\n          variant=\"body2\"\n          color=\"textSecondary\"\n        >{`${Math.round(props.value)}%`}</Typography>\n      </Box>\n    </Box>\n  );\n}\n\nLinearProgressWithLabel.propTypes = {\n  /**\n   * The value of the progress indicator for the determinate and buffer variants.\n   * Value between 0 and 100.\n   */\n  value: PropTypes.number.isRequired,\n};\n\nfunction PaperComponent(props) {\n  return (\n    <Draggable\n      handle=\"#draggable-dialog-title\"\n      cancel={'[class*=\"MuiDialogContent-root\"]'}\n    >\n      <Paper {...props} />\n    </Draggable>\n  );\n}\n\nexport default function InvoiceDialog(props) {\n  const classes = useStyles();\n\n  const [state, setState] = React.useContext(GlobalState);\n  const [saving, setSaving] = useState(false);\n\n  const defaultCode = null; //{code:\"\",description:\"\",price:\"0\"}\n\n  const [code, setCode] = useState(defaultCode);\n  const [codeError, setCodeError] = useState(false);\n\n  const [description, setDescription] = useState(\"\");\n  const [descriptionError, setDescriptionError] = useState(false);\n\n  const [notes, setNotes] = useState(\"\");\n  const notesChanged = (event) => {\n    setNotes(event.target.value);\n  };\n\n  const [items, setItems] = React.useState([]);\n\n  const [price, setPrice] = useState(\"\");\n  const [priceError, setPriceError] = useState(false);\n\n  const [title, setTitle] = React.useState(\"INVOICE ISSUANCE\");\n\n  const [allCodes, setAllCodes] = React.useState([]);\n\n  useEffect(() => {\n    if (props.invoice) {\n      setItems(props.invoice.items);\n      setNotes(props.invoice.notes || \"\");\n      setTitle(\"EDIT INVOICE\");\n    } else {\n      setTitle(\"INVOICE ISSUANCE\");\n    }\n\n    fetchAllCodes();\n\n    return () => {\n      setItems([]);\n    };\n  }, [props.invoice]);\n\n  useEffect(() => {\n    if (!props.invoice && props.defaultCodes) {\n      setItems(props.defaultCodes)\n    }\n\n    return () => {\n      setItems([]);\n    };\n  }, [props.defaultCodes]);\n\n\n\n  const fetchAllCodes = async () => {\n    try {\n      const res = await InvoiceService.getAllCodes();\n      setAllCodes(res.data.result);\n    } catch (err) {\n      console.error(err);\n    }\n  };\n\n  const priceChanged = (event) => {\n    setPrice(event.target.value);\n    setPriceError(false);\n  };\n\n  const codeChanged = (event) => {\n    setCode(event.target.value?.toUpperCase());\n    setCodeError(false);\n  };\n\n  const descriptionChanged = (event) => {\n    setDescription(event.target.value);\n    setDescriptionError(false);\n  };\n\n  const handleClose = (refresh) => {\n    if (saving) return;\n\n    setPrice(\"\");\n    setCode(defaultCode);\n    setDescription(\"\");\n    setPriceError(false);\n    setCodeError(false);\n    setDescriptionError(false);\n    setItems([]);\n    setNotes(\"\");\n    setSaving(false);\n\n    props.handleClose(refresh);\n  };\n\n  const codeLeft = () => {\n    fetchCodeDetails();\n  };\n\n  const fetchCodeDetails = async () => {\n    try {\n      setDescription(\"...\");\n      const res = await InvoiceService.getCodeDetails(code);\n      if (res.data.status === \"OK\") {\n        const result = res.data.result;\n        if (result.length === 0) {\n          setCodeError(true);\n          setDescription(\"\");\n          setPrice(\"\");\n        } else if (result.length >= 1) {\n          setDescription(result[0].description);\n          setPrice(result[0].price);\n          setDescriptionError(false);\n          setPriceError(false);\n        }\n      }\n    } catch (err) {\n      console.error(err);\n    }\n  };\n\n  const addItemClicked = () => {\n    if (!validateItem()) {\n      return;\n    }\n\n    setItems([\n      ...items,\n      { code: code.code, description: code.description, price: code.price },\n    ]);\n    setCode(defaultCode);\n  };\n\n  const addItemClicked2 = () => {\n    if (!validateItem2()) {\n      return;\n    }\n\n    setItems([...items, { code: \"\", description: description, price: price }]);\n    setDescription(\"\");\n    setPrice(\"\");\n  };\n\n  const validateItem = () => {\n    let error = false;\n    if (!code) return false;\n\n    if (!code.description || code.description.length === 0) {\n      error = true;\n    }\n    if (!code.price || code.price.length === 0) {\n      error = true;\n    }\n\n    return !error;\n  };\n\n  const validateItem2 = () => {\n    let error = false;\n    if (!description || description.length === 0) {\n      setDescriptionError(true);\n      error = true;\n    }\n    if (!price || price.length === 0) {\n      setPriceError(true);\n      error = true;\n    }\n\n    return !error;\n  };\n\n  const removeItem = (index) => {\n    let temp = [...items];\n    temp.splice(index, 1);\n    setItems(temp);\n  };\n\n  const getGrandTotal = (_items) => {\n    let total = 0;\n    _items.forEach((element) => {\n      total += parseFloat(element.price);\n    });\n\n    return total;\n  };\n\n  const saveClikced = async () => {\n    if (items.length === 0 && !props.invoice) {\n      return;\n    }\n\n    try {\n      setSaving(true);\n      let name = \"\";\n      let postCode = \"\";\n      let address = \"\";\n\n      if (props.booking.formData) {\n        const formData = JSON.parse(props.booking.formData)\n        name = `${formData.title} ${formData.forename} ${formData.surname}`;\n        postCode = formData.postCode;\n        address = formData.address;\n      } else if (props.booking.forename && props.booking.surname) {\n        name = `${props.booking.forename} ${props.booking.surname}`;\n        postCode = props.booking.postCode;\n        address = props.booking.address;\n      } else if (props.booking.fullname) {\n        name = `${props.booking.fullname}`;\n      }\n\n      const invoice = {\n        name: name,\n        date: new Date(),\n        dateAttended: new Date(props.booking.bookingDate),\n        items: items,\n        grandTotal: getGrandTotal(items),\n        bookingId: props.booking._id,\n        postCode: postCode,\n        address: address,\n        notes: notes,\n      };\n      if (!props.invoice) {\n        await InvoiceService.createInvoice(invoice);\n      } else if (items.length > 0) {\n        await InvoiceService.updateInvoice(\n          props.invoice.invoiceNumber,\n          invoice\n        );\n      } else {\n        await InvoiceService.deleteinvoice(props.invoice.invoiceNumber);\n      }\n\n      setSaving(false);\n      handleClose(true);\n    } catch (err) {\n      console.error(err);\n      setSaving(false);\n    }\n  };\n\n  return (\n    <React.Fragment>\n      {props.booking && (\n        <React.Fragment>\n          <Dialog\n            maxWidth=\"md\"\n            open={props.open}\n            onClose={() => handleClose(false)}\n            PaperComponent={PaperComponent}\n            aria-labelledby=\"form-dialog-title\"\n          >\n            <DialogTitle id=\"draggable-dialog-title\">\n              <Grid\n                container\n                spacing={2}\n                direction=\"row\"\n                justify=\"center\"\n                alignItems=\"center\"\n              >\n                <Grid item>\n                  <ReceiptIcon style={{ color: \"#1cb2c9\", fontSize: \"3rem\" }} />\n                </Grid>\n\n                <Grid item>\n                  <div\n                    style={{\n                      color: \"#1cb2c9\",\n                      paddingBottom: \"10px\",\n                      fontWeight: \"800\",\n                    }}\n                  >\n                    {`${title}`}\n                  </div>\n                </Grid>\n              </Grid>\n\n              <Divider />\n            </DialogTitle>\n            <DialogContent>\n              <div\n                style={{\n                  height: \"700px\",\n                  width: \"100%\",\n                }}\n              >\n                <Grid\n                  container\n                  direction=\"column\"\n                  justify=\"flex-start\"\n                  spacing={1}\n                  alignItems=\"flex-start\"\n                >\n                  <Grid item style={{ width: \"100%\" }}>\n                    <Grid container direction=\"row\" spacing={5}>\n                      <Grid item xs={10}>\n                        <Autocomplete\n                          id=\"code-auto-complete\"\n                          value={code}\n                          onChange={(event, newValue) => {\n                            setCode(newValue);\n                          }}\n                          options={allCodes}\n                          getOptionLabel={(option) =>\n                            `.${option.code} -- ${\n                              option.description\n                            } -- ${parseFloat(\n                              option.price\n                            ).toLocaleString(\"en-GB\", {\n                              style: \"currency\",\n                              currency: \"GBP\",\n                            })}`\n                          }\n                          style={{ width: \"750px\" }}\n                          renderInput={(params) => (\n                            <TextField\n                              {...params}\n                              label=\"System Codes\"\n                              helperText=\"Standard codes already defined in the system\"\n                            />\n                          )}\n                        />\n                      </Grid>\n\n                      <Grid item xs={2}>\n                        <Button\n                          onClick={addItemClicked}\n                          variant=\"outlined\"\n                          color=\"primary\"\n                          style={{ marginTop: \"15px\" }}\n                          disabled={saving}\n                        >\n                          + Add\n                        </Button>\n                      </Grid>\n                    </Grid>\n                  </Grid>\n\n                  <Grid item style={{ width: \"100%\", marginTop: \"20px\" }}>\n                    <Grid container direction=\"row\" spacing={5}>\n                      <Grid item xs={8}>\n                        <TextField\n                          error={descriptionError}\n                          value={description}\n                          onChange={descriptionChanged}\n                          fullWidth\n                          label=\"Description (Custom)\"\n                          name=\"desc\"\n                          helperText=\"You can enter any description you want to be placed on the invoice\"\n                          id=\"desc-id\"\n                        />\n                      </Grid>\n\n                      <Grid item xs={2}>\n                        <TextField\n                          error={priceError}\n                          value={price}\n                          onChange={priceChanged}\n                          fullWidth\n                          label=\"Price\"\n                          name=\"price\"\n                          id=\"price-id\"\n                          InputProps={{\n                            inputComponent: NumberFormatCustom,\n                            startAdornment: (\n                              <InputAdornment position=\"start\">\n                                £\n                              </InputAdornment>\n                            ),\n                          }}\n                        />\n                      </Grid>\n\n                      <Grid item xs={2}>\n                        <Button\n                          onClick={addItemClicked2}\n                          variant=\"outlined\"\n                          color=\"primary\"\n                          style={{ marginTop: \"12px\" }}\n                          disabled={saving}\n                        >\n                          + Add\n                        </Button>\n                      </Grid>\n                    </Grid>\n                  </Grid>\n\n                  <div\n                    style={{\n                      backgroundColor: \"#fff\",\n                      color: \"#1cb2c9\",\n                      fontWeight: \"500\",\n                      fontSize: \"0.95rem\",\n                      padding: \"5px 8px\",\n                      marginBottom: \"-15px\",\n                      marginLeft: \"10px\",\n                      zIndex: \"99\",\n                      marginTop: \"30px\",\n                    }}\n                  >\n                    Invoice Items\n                  </div>\n\n                  <div\n                    style={{\n                      width: \"100%\",\n                      height: \"300px\",\n                      overflowY: \"scroll\",\n                      border: \"1px solid #ddd\",\n                      borderRadius: \"4px\",\n                      padding: \"25px\",\n                      position: \"relative\",\n                    }}\n                  >\n                    <Grid item>\n                      <Grid\n                        container\n                        direction=\"column\"\n                        justify=\"flex-start\"\n                        spacing={2}\n                        alignItems=\"flex-start\"\n                      >\n                        <Grid item style={{ width: \"100%\", fontWeight: \"500\" }}>\n                          <Grid container direction=\"row\" spacing={4}>\n                            <Grid item xs={2}>\n                              Code\n                            </Grid>\n                            <Grid item xs={5}>\n                              Description\n                            </Grid>\n                            <Grid item xs={2}>\n                              Price\n                            </Grid>\n                            <Grid item xs={3}></Grid>\n                          </Grid>\n                        </Grid>\n                        {items.map((item, index) => (\n                          <Grid item style={{ width: \"100%\" }}>\n                            <Grid container direction=\"row\" spacing={4}>\n                              <Grid item xs={2}>\n                                {item.code}\n                              </Grid>\n                              <Grid item xs={5}>\n                                {item.description}\n                              </Grid>\n                              <Grid item xs={2}>\n                                {parseFloat(item.price).toLocaleString(\n                                  \"en-GB\",\n                                  { style: \"currency\", currency: \"GBP\" }\n                                )}\n                              </Grid>\n                              <Grid item xs={3}>\n                                <Tooltip title=\"Remove Item\">\n                                  <IconButton\n                                    style={{ marginTop: \"-15px\" }}\n                                    onClick={() => removeItem(index)}\n                                  >\n                                    <DeleteIcon color=\"primary\" />\n                                  </IconButton>\n                                </Tooltip>\n                              </Grid>\n                            </Grid>\n                          </Grid>\n                        ))}\n                      </Grid>\n                    </Grid>\n                  </div>\n\n                  <Grid item style={{ marginTop: \"10px\", width:\"100%\", display:\"flex\", justifyContent:\"flex-end\", paddingRight:\"30px\" }}>\n                    <span style={{ fontWeight: \"500\", color: \"#777\" }}>\n                      Grand Total :{\" \"}\n                    </span>{\" \"}\n                    <span\n                      style={{\n                        fontWeight: \"500\",\n                        color: \"#1cb2c9\",\n                        marginLeft: \"10px\",\n                        fontSize: \"1rem\",\n                      }}\n                    >\n                      {\" \"}\n                      {getGrandTotal(items).toLocaleString(\"en-GB\", {\n                        style: \"currency\",\n                        currency: \"GBP\",\n                      })}{\" \"}\n                    </span>\n                  </Grid>\n\n                  <Grid item style={{ marginTop: \"10px\", width: \"100%\" }}>\n                    <TextField\n                      value={notes}\n                      onChange={notesChanged}\n                      multiline\n                      rows={2}\n                      helperText=\"* notes will be printed on the invoice (optional)\"\n                      label=\"Notes\"\n                      fullWidth\n                      variant=\"outlined\"\n                      placeholder=\"enter any addional notes you want to be printed on the invoice...\"\n                    ></TextField>\n                  </Grid>\n                </Grid>\n              </div>\n\n              <Backdrop className={classes.backdrop} open={saving}>\n                <CircularProgress color=\"inherit\" />\n              </Backdrop>\n            </DialogContent>\n            <DialogActions>\n              <Grid\n                container\n                direction=\"row\"\n                justify=\"flex-end\"\n                alignItems=\"center\"\n                spacing={1}\n              >\n                <Grid item>\n                  <Button\n                    onClick={() => handleClose(false)}\n                    style={{ width: \"100px\" }}\n                    disabled={saving}\n                  >\n                    back\n                  </Button>\n                </Grid>\n                <Grid item>\n                  <Button\n                    onClick={saveClikced}\n                    variant=\"contained\"\n                    color=   {props.invoice ? 'secondary' : 'primary'}\n                    // style={{ width: \"100px\" }}\n                    disabled={saving}\n                  >\n                    {props.invoice ? 'Save Changes' : 'Issue Invoice'}\n                  </Button>\n                </Grid>\n              </Grid>\n            </DialogActions>\n          </Dialog>\n        </React.Fragment>\n      )}\n    </React.Fragment>\n  );\n}\n","import React, { useEffect, useState } from \"react\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport GlobalState from \"./../GlobalState\";\nimport Grid from \"@material-ui/core/Grid\";\nimport {\n  Button,\n  Checkbox,\n  DialogActions,\n  DialogContentText,\n  Divider,\n  FormControlLabel,\n  IconButton,\n  TextField,\n  Tooltip,\n} from \"@material-ui/core\";\nimport PDFService from \"./services/PDFService\";\n\nimport { calculatePrice } from \"./PriceCalculator\";\n\nimport bookingService from \"./services/BookService\";\nimport CheckIcon from \"@material-ui/icons/Check\";\nimport CloseIcon from \"@material-ui/icons/Close\";\n\nimport Dialog from \"@material-ui/core/Dialog\";\nimport DialogContent from \"@material-ui/core/DialogContent\";\nimport DialogTitle from \"@material-ui/core/DialogTitle\";\nimport Draggable from \"react-draggable\";\nimport Slide from \"@material-ui/core/Slide\";\n\nimport Paper from \"@material-ui/core/Paper\";\n\nimport DeleteIcon from \"@material-ui/icons/Delete\";\nimport BookService from \"./services/BookService\";\n\nimport Backdrop from \"@material-ui/core/Backdrop\";\nimport CircularProgress from \"@material-ui/core/CircularProgress\";\nimport {\n  FormatDateFromString,\n  RevertFormatDateFromString,\n} from \"./DateFormatter\";\nimport ResendEmailsDialog from \"./ResendEmailsDialog\";\nimport PayDialog from \"./PayDialog\";\n\nimport PrintIcon from \"@material-ui/icons/Print\";\nimport UndoIcon from \"@material-ui/icons/Undo\";\n\nimport HistoryIcon from \"@material-ui/icons/History\";\n\nimport FileCopyOutlinedIcon from \"@material-ui/icons/FileCopyOutlined\";\nimport TimeStampDialog from \"./TimeStampDialog\";\nimport { CalendarColors } from \"../Admin/calendar-admin/colors\";\nimport InvoiceService from \"../services/InvoiceService\";\n\nimport SendIcon from \"@material-ui/icons/Send\";\nimport InvoiceDialog from \"../InvoiceDialog\";\n\n\n\nconst useStyles = makeStyles((theme) => ({\n  box: {\n    backgroundColor: \"#373737\",\n    color: \"#fff\",\n    padding: \"1px\",\n    borderRadius: \"4px\",\n    textAlign: \"justify\",\n    paddingRight: \"40px\",\n  },\n\n  boxRed: {\n    backgroundColor: \"#dc2626\",\n    color: \"#fff\",\n    padding: \"1px\",\n    borderRadius: \"4px\",\n    textAlign: \"justify\",\n    paddingRight: \"40px\",\n  },\n\n  boxInfo: {\n    textAlign: \"justify\",\n    backgroundColor: \"#fafafa\",\n    color: \"#333\",\n    padding: \"1px\",\n    borderRadius: \"4px\",\n    paddingRight: \"40px\",\n    border: \"1px solid #eee\",\n  },\n\n  ul: {\n    listStyle: \"none\",\n    padding: \"0\",\n    margin: \"0\",\n  },\n\n  li: {\n    marginBottom: \"15px\",\n  },\n\n  icon: {\n    marginRight: \"8px\",\n  },\n\n  root: {\n    width: \"100%\",\n  },\n\n  lineThrough: {\n    textDecoration: \"line-through\",\n  },\n\n  heading: {\n    fontSize: theme.typography.pxToRem(15),\n    flexBasis: \"33.33%\",\n    flexShrink: 0,\n    color: theme.palette.text.secondary,\n  },\n  secondaryHeading: {\n    fontSize: theme.typography.pxToRem(15),\n  },\n\n  infoDetails: {\n    textAlign: \"left\",\n  },\n\n  infoTitle: {\n    fontWeight: \"800\",\n    marginRight: \"10px\",\n  },\n\n  infoData: {\n    fontWeight: \"400\",\n  },\n\n  title: {\n    textAlign: \"center\",\n    fontWeight: \"600\",\n    marginLeft: \"10px\",\n    marginBottom: \"5px\",\n  },\n\n  Accordion: {\n    backgroundColor: \"#f5f5f5\",\n    color: \"#222\",\n  },\n\n  AccordionDeleted: {\n    backgroundColor: \"#aaa\",\n    color: \"#555\",\n  },\n\n  DownloadForm: {\n    marginTop: \"10px\",\n    marginBottom: \"10px\",\n  },\n\n  infoDataCharges: {\n    fontSize: \"18px\",\n    color: \"green\",\n    fontWeight: \"600\",\n  },\n\n  infoDataChargesHigher: {\n    fontSize: \"18px\",\n    color: \"red\",\n    fontWeight: \"600\",\n  },\n  BookedLabel: {\n    color: \"#606060\",\n    paddingRight: \"10px\",\n    paddingLeft: \"5px\",\n    paddingBottom: \"3px\",\n    paddingTop: \"3px\",\n    fontWeight: \"800\",\n    borderLeft: \"5px solid\",\n    borderColor: \"#606060\",\n  },\n\n  PatientAttendedLabel: {\n    color: \"#0066aa\",\n    paddingRight: \"10px\",\n    paddingLeft: \"5px\",\n    paddingBottom: \"3px\",\n    paddingTop: \"3px\",\n    fontWeight: \"800\",\n    borderLeft: \"5px solid\",\n    borderColor: \"#0066aa\",\n  },\n\n  SampleTakenLabel: {\n    color: \"#0066cc\",\n    paddingRight: \"10px\",\n    paddingLeft: \"5px\",\n    paddingBottom: \"3px\",\n    paddingTop: \"3px\",\n    fontWeight: \"800\",\n    borderLeft: \"5px solid\",\n    borderColor: \"#0066cc\",\n  },\n\n  ReportSentLabel: {\n    color: \"#009900\",\n    paddingRight: \"10px\",\n    paddingLeft: \"5px\",\n    paddingBottom: \"3px\",\n    paddingTop: \"3px\",\n    fontWeight: \"800\",\n    borderLeft: \"5px solid\",\n    borderColor: \"#009900\",\n  },\n\n  ReportCertSentLabel: {\n    color: \"#009900\",\n    paddingRight: \"10px\",\n    paddingLeft: \"5px\",\n    paddingBottom: \"3px\",\n    paddingTop: \"3px\",\n    fontWeight: \"800\",\n    borderLeft: \"5px solid\",\n    borderColor: \"#009900\",\n  },\n\n  PositiveLabel: {\n    color: \"red\",\n    paddingRight: \"10px\",\n    paddingLeft: \"5px\",\n    paddingBottom: \"3px\",\n    paddingTop: \"3px\",\n    fontWeight: \"800\",\n    borderLeft: \"5px solid\",\n    borderColor: \"red\",\n  },\n\n  EditButton: {\n    marginBottom: \"20px\",\n    backgroundColor: \"#2f942e\",\n    \"&:hover\": {\n      background: \"green\",\n      color: \"#fff\",\n    },\n    textDecoration: \"none !important\",\n    padding: \"10px\",\n  },\n\n  ResendEmailsButton: {\n    // marginBottom : \"20px\",\n    color: \"#2f942e\",\n    borderColor: \"#2f942e\",\n    \"&:hover\": {\n      background: \"#fafffa\",\n      borderColor: \"#2f942e\",\n    },\n    textDecoration: \"none !important\",\n    paddingLeft: \"50px\",\n    paddingRight: \"50px\",\n  },\n\n  PayButton: {\n    marginLeft: \"70px\",\n    width: \"300px\",\n  },\n\n  PayLabel: {\n    marginLeft: \"20px\",\n\n    color: \"#2f942e\",\n    fontWeight: \"500\",\n    textAlign: \"center\",\n  },\n\n  RestoreButton: {\n    marginBottom: \"20px\",\n    backgroundColor: \"#eee\",\n    color: \"#333\",\n    \"&:hover\": {\n      background: \"#f1f1f1\",\n      color: \"#111\",\n    },\n    textDecoration: \"none !important\",\n    padding: \"10px\",\n  },\n\n  DeleteButton: {\n    marginBottom: \"20px\",\n    backgroundColor: \"#d90015\",\n    \"&:hover\": {\n      background: \"#b80012\",\n      color: \"#fff\",\n    },\n\n    padding: \"10px\",\n  },\n\n  SaveButton: {\n    marginBottom: \"10px\",\n    padding: \"10px\",\n\n    backgroundColor: \"#d1175e\",\n    \"&:hover\": {\n      background: \"#bd0d50\",\n      color: \"#fff\",\n    },\n  },\n\n  CancelButton: {\n    marginBottom: \"20px\",\n    // padding: \"10px\"\n  },\n\n  TextBox: {\n    padding: \"0px\",\n  },\n\n  checkIcon: {\n    color: \"green\",\n    marginBottom:\"-8px\"\n  },\n\n  checkIconSmall: {\n    color: \"green\",\n    paddingTop: \"5px\",\n  },\n\n  closeIcon: {\n    color: \"red\",\n    marginBottom:\"-8px\"\n  },\n\n  centeredLabel: {\n    display: \"flex\",\n    alignItems: \"center\",\n  },\n\n  backdrop: {\n    zIndex: theme.zIndex.drawer + 1,\n    color: \"#fff\",\n  },\n\n  invoiceNumber: {\n    display: \"inline-block\",\n    fontWeight: \"500\",\n    width: \"80px\",\n    fontSize: \"1rem\",\n    color: theme.palette.primary.main,\n  },\n\n  printInvoiceButton: {\n    marginLeft: \"70px\",\n    fontSize: \"0.8rem\",\n    // width: \"300px\",\n  },\n\n  editInvoiceButton: {\n    marginLeft: \"10px\",\n    fontSize: \"0.8rem\",\n  },\n}));\n\nconst Transition = React.forwardRef(function Transition(props, ref) {\n  return <Slide direction=\"up\" ref={ref} {...props} />;\n});\n\nfunction PaperComponent(props) {\n  return (\n    <Draggable\n      handle=\"#alert-dialog-slide-title\"\n      cancel={'[class*=\"MuiDialogContent-root\"]'}\n    >\n      <Paper {...props} />\n    </Draggable>\n  );\n}\n\nexport default function BookingDialog(props) {\n  const classes = useStyles();\n\n  const getDefaultCodes = (_booking) =>\n  {\n    const defaultCodes = []\n    if (!_booking)\n      return\n\n    if (_booking.tr)\n    {\n      defaultCodes.push({code: \"PCRTR\", description: \"PCR TEST TO RELEASE\", price: 250 })\n    }else{\n      defaultCodes.push({code: \"PCR\", description: \"PCR SWAB TEST\", price: 199 })\n      if (_booking.antiBodyTest)\n      {\n        defaultCodes.push({code: \"PCRA\", description: \"PCR ANTIBODY TEST\", price: 99 })\n        defaultCodes.push({code: \"PHLE\", description: \"PHLEBOTOMY\", price: 50 })\n      }\n      if (_booking.certificate)\n      {\n        defaultCodes.push({code: \"PCRCERT\", description: \"PCR FIT TO FLY CERTIFICATE\", price: 50 })\n      }\n    }\n    return defaultCodes\n  }\n\n  const [state, setState] = React.useContext(GlobalState);\n\n  const [copied, setCopied] = useState(false);\n\n  const [openResendDialog, setOpenResendDialog] = React.useState(false);\n  const [openPayDialog, setOpenPayDialog] = React.useState(false);\n  const [selectedBooking, setSelectedBooking] = React.useState(null);\n\n  const [editMode, setEditMode] = React.useState({ edit: false, person: null });\n  const [deleteMode, setDeleteMode] = React.useState({\n    delete: false,\n    person: null,\n  });\n  const [restoreMode, setRestoreMode] = React.useState({\n    restore: false,\n    person: null,\n  });\n\n  const [saving, setSaving] = React.useState(false);\n  const [deleting, setDeleting] = React.useState(false);\n  const [restoring, setRestoring] = React.useState(false);\n\n  const [validationError, setValidationError] = React.useState({});\n\n  const [bookingDate, setBookingDate] = React.useState(\"\");\n  const [bookingTime, setBookingTime] = React.useState(\"\");\n\n  const [gender, setGender] = React.useState(\"\");\n  const [title, setTitle] = React.useState(\"\");\n  const [forename, setForename] = React.useState(\"\");\n  const [surname, setSurnme] = React.useState(\"\");\n  const [email, setEmail] = React.useState(\"\");\n  const [dob, setDOB] = React.useState(\"\");\n  const [tel, setTel] = React.useState(\"\");\n  const [postCode, setPostCode] = React.useState(\"\");\n  const [address, setAddress] = React.useState(\"\");\n  const [notes, setNotes] = React.useState(\"\");\n  const [passport, setPassport] = React.useState(\"\");\n  const [passport2, setPassport2] = React.useState(\"\");\n  const [certificate, setCertificate] = React.useState(false);\n  const [antiBodyTest, setAntiBodyTest] = React.useState(false);\n\n  const [refreshData, setRefreshData] = React.useState(false);\n\n  const [booking, setBooking] = React.useState(null);\n\n  const [recordChanged, setRecordChanged] = React.useState(false);\n\n  const [fieldChanged, setFieldChanged] = React.useState(false);\n\n  const [openUndoPayDialog, setOpenUndoPayDialog] = React.useState(false);\n\n  const [openTimeStampDialog, setOpenTimeStampDialog] = React.useState(false);\n\n  const handleCloseTimeStampDialog = () => {\n    setOpenTimeStampDialog(false);\n    setSelectedBooking(null);\n  };\n\n  const handleCloseUndoPayDialog = () => {\n    setOpenUndoPayDialog(false);\n  };\n\n  const handleCloseResendDialog = () => {\n    setOpenResendDialog(false);\n    setSelectedBooking(null);\n  };\n\n  const handleClosePayDialog = () => {\n    setOpenPayDialog(false);\n    setSelectedBooking(null);\n  };\n\n  useEffect(() => {\n    if (booking) {\n      const isChanged =\n        bookingDate !== FormatDateFromString(booking.bookingDate) ||\n        bookingTime !== booking.bookingTime ||\n        gender !== booking.gender ||\n        forename !== booking.forenameCapital ||\n        surname !== booking.surnameCapital ||\n        title !== booking.title ||\n        email !== booking.email ||\n        dob !== FormatDateFromString(booking.birthDate) ||\n        tel !== booking.phone ||\n        postCode !== booking.postCode ||\n        address !== booking.address ||\n        passport !== booking.passportNumber ||\n        passport2 !== booking.passportNumber2 ||\n        certificate !== booking.certificate ||\n        antiBodyTest !== booking.antiBodyTest;\n\n      setRecordChanged(isChanged);\n    }\n  }, [fieldChanged]);\n\n  useEffect(() => {\n    if (!props.open) {\n      setTimeout(() => {\n        setEditMode({ edit: false, person: null });\n        setRecordChanged(false);\n      }, 500);\n    }\n  }, [props.open]);\n\n  const bookingDateChanged = (event) => {\n    setBookingDate(event.target.value);\n    setValidationError({ ...validationError, bookingDateError: false });\n    setFieldChanged(!fieldChanged);\n  };\n\n  const bookingTimeChanged = (event) => {\n    setBookingTime(event.target.value);\n    setValidationError({ ...validationError, bookingTimeError: false });\n    setFieldChanged(!fieldChanged);\n  };\n\n  const genderChanged = (event) => {\n    setGender(event.target.value);\n    setFieldChanged(!fieldChanged);\n  };\n\n  const titleChanged = (event) => {\n    setTitle(event.target.value);\n    setFieldChanged(!fieldChanged);\n  };\n\n  const forenameChanged = (event) => {\n    setForename(event.target.value);\n    setFieldChanged(!fieldChanged);\n  };\n\n  const surnameChanged = (event) => {\n    setSurnme(event.target.value);\n    setFieldChanged(!fieldChanged);\n  };\n\n  const emailChanged = (event) => {\n    setEmail(event.target.value);\n    setFieldChanged(!fieldChanged);\n  };\n\n  const dobChanged = (event) => {\n    setDOB(event.target.value);\n    setValidationError({ ...validationError, dobError: false });\n    setFieldChanged(!fieldChanged);\n  };\n\n  const telChanged = (event) => {\n    setTel(event.target.value);\n    setFieldChanged(!fieldChanged);\n  };\n\n  const postCodeChanged = (event) => {\n    setPostCode(event.target.value);\n    setFieldChanged(!fieldChanged);\n  };\n\n  const addressChanged = (event) => {\n    setAddress(event.target.value);\n    setFieldChanged(!fieldChanged);\n  };\n\n  const passportChanged = (event) => {\n    setPassport(event.target.value);\n    setFieldChanged(!fieldChanged);\n  };\n\n  const passport2Changed = (event) => {\n    setPassport2(event.target.value);\n    setFieldChanged(!fieldChanged);\n  };\n\n  const certificateChanged = (event) => {\n    setCertificate(event.target.checked);\n    setFieldChanged(!fieldChanged);\n  };\n\n  const antiBodyTestChanged = (event) => {\n    setAntiBodyTest(event.target.checked);\n    setFieldChanged(!fieldChanged);\n  };\n\n  const getStatusLabel = (status) => {\n    if (status === \"booked\") {\n      return <span className={classes.BookedLabel}> Booking Made </span>;\n    } else if (status === \"patient_attended\") {\n      return (\n        <span className={classes.PatientAttendedLabel}> Patient Attended </span>\n      );\n    } else if (status === \"sample_taken\") {\n      return <span className={classes.SampleTakenLabel}> Sample Taken </span>;\n    } else if (status === \"report_sent\") {\n      return <span className={classes.ReportSentLabel}> Report Sent </span>;\n    } else if (status === \"report_cert_sent\") {\n      return (\n        <span className={classes.ReportCertSentLabel}>\n          {\" \"}\n          {`Report & Certificate Sent`}{\" \"}\n        </span>\n      );\n    } else if (status === \"positive\") {\n      return <span className={classes.PositiveLabel}> {`POSITIVE`} </span>;\n    } else {\n      return \"Unknown\";\n    }\n  };\n\n  const downloadForm1 = (id) => {\n    PDFService.downloadCovidForm1(id)\n      .then((res) => {\n        const file = new Blob([res.data], { type: \"application/pdf\" });\n\n        const fileURL = URL.createObjectURL(file);\n        window.open(fileURL, \"_blank\");\n      })\n      .catch((err) => {\n        console.log(err);\n      });\n  };\n\n  const downloadForm2 = (id) => {\n    PDFService.downloadCovidForm2(id)\n      .then((res) => {\n        const file = new Blob([res.data], { type: \"application/pdf\" });\n\n        const fileURL = URL.createObjectURL(file);\n        window.open(fileURL, \"_blank\");\n\n        setRefreshData(!refreshData);\n      })\n      .catch((err) => {\n        console.log(err);\n      });\n  };\n\n  const downloadLabResults = (id) => {\n    PDFService.downloadPdfResult(id)\n      .then((res) => {\n        const file = new Blob([res.data], { type: \"application/pdf\" });\n\n        const fileURL = URL.createObjectURL(file);\n        window.open(fileURL, \"_blank\");\n      })\n      .catch((err) => {\n        console.log(err);\n      });\n  };\n\n  const downloadCertificate = (id) => {\n    PDFService.downloadPdfCert(id)\n      .then((res) => {\n        const file = new Blob([res.data], { type: \"application/pdf\" });\n\n        const fileURL = URL.createObjectURL(file);\n        window.open(fileURL, \"_blank\");\n      })\n      .catch((err) => {\n        console.log(err);\n      });\n  };\n\n  const handleEditModeChanged = (edit, person) => {\n    if (edit) {\n      setForename(person.forenameCapital);\n      setSurnme(person.surnameCapital);\n      setBookingDate(FormatDateFromString(person.bookingDate));\n      setBookingTime(person.bookingTime.toUpperCase());\n      setGender(person.gender.toUpperCase());\n      setTitle(person.title.toUpperCase());\n      setEmail(person.email.toUpperCase());\n      setDOB(FormatDateFromString(person.birthDate));\n      setTel(person.phone.toUpperCase());\n      setPostCode(person.postCode.toUpperCase());\n      setAddress(person.address.toUpperCase());\n      if (person.notes) {\n        setNotes(person.notes.toUpperCase());\n      }else\n      {\n        setNotes('')\n      }\n\n      if (person.passportNumber) {\n        setPassport(person.passportNumber.toUpperCase());\n      }else\n      {\n        setPassport('')\n      }\n\n      if (person.passportNumber2) {\n        setPassport2(person.passportNumber2.toUpperCase());\n      }else\n      {\n        setPassport2('')\n      }\n\n      setCertificate(person.certificate);\n      setAntiBodyTest(person.antiBodyTest);\n\n      setEditMode({ edit: edit, person: person });\n    } else if (!edit && !person) {\n      setEditMode({ edit: edit, person: person });\n      setRecordChanged(false);\n    } else if (!edit && person) {\n      const booking = {};\n      const bookingId = person._id;\n      booking.certificate = certificate;\n      booking.antiBodyTest = antiBodyTest;\n      booking.gender = gender;\n      booking.title = title;\n      booking.birthDate = RevertFormatDateFromString(dob);\n      booking.email = email;\n      booking.phone = tel;\n      booking.postCode = postCode;\n      booking.address = address;\n      booking.passportNumber = passport;\n      booking.passportNumber2 = passport2;\n      booking.forename = forename;\n      booking.surname = surname;\n      booking.notes = notes;\n      booking.bookingDate = RevertFormatDateFromString(bookingDate);\n      booking.bookingTime = bookingTime;\n      booking.bookingRef = person.bookingRef;\n\n      if (validateBooking(booking)) {\n        updateBooking({ bookingId: bookingId, person: booking });\n      }\n    }\n  };\n\n  const validateDate = (str) => {\n    var error = false;\n    if (!str || str.length !== 10) {\n      error = true;\n    }\n\n    if (str.charAt(4) !== \"-\" || str.charAt(7) !== \"-\") {\n      error = true;\n    }\n\n    try {\n      const result = /^\\d{4}-\\d{2}-\\d{2}$/.test(str);\n      if (!result) {\n        error = true;\n      }\n\n      const year = parseInt(str.substr(0, 4));\n      const month = parseInt(str.substr(5, 2));\n      const day = parseInt(str.substr(8, 2));\n\n      if (year < 1900) {\n        error = true;\n      }\n\n      if (month < 1 || month > 12) {\n        error = true;\n      }\n\n      if (day > 31) {\n        error = true;\n      }\n    } catch (err) {\n      error = true;\n    }\n\n    return !error;\n  };\n\n  const validateTime = (str) => {\n    var error = false;\n\n    const result = /^\\d{2}:\\d{2} AM$|^\\d{2}:\\d{2} PM$/.test(str);\n    if (!result) {\n      error = true;\n    }\n\n    try {\n      const hour = parseInt(str.substr(0, 2));\n      const minute = parseInt(str.substr(3, 2));\n\n      if (hour < 0 || hour > 12) {\n        error = true;\n      }\n\n      if (minute < 0 || minute > 59) {\n        error = true;\n      }\n    } catch (err) {\n      error = true;\n    }\n\n    return !error;\n  };\n\n  const validateBooking = (booking) => {\n    var error = false;\n\n    if (!validateDate(booking.bookingDate)) {\n      error = true;\n      setValidationError({ ...validationError, bookingDateError: true });\n    }\n\n    if (!validateDate(booking.birthDate)) {\n      error = true;\n      setValidationError({ ...validationError, dobError: true });\n    }\n\n    if (!validateTime(booking.bookingTime)) {\n      error = true;\n      setValidationError({ ...validationError, bookingTimeError: true });\n    }\n\n    return !error;\n  };\n\n  const updateBooking = (payload) => {\n    setSaving(true);\n    bookingService\n      .updateBooking(payload)\n      .then((res) => {\n        setSaving(false);\n        setEditMode({ edit: false, person: null });\n        setRefreshData(!refreshData);\n      })\n      .catch((err) => {\n        setSaving(false);\n        setEditMode({ edit: false, person: null });\n        console.log(err);\n      });\n  };\n\n  const deleteBooking = (id) => {\n    setDeleting(true);\n    bookingService\n      .deleteBooking(id)\n      .then((res) => {\n        setDeleting(false);\n        setDeleteMode({ delete: false, person: null });\n        setRefreshData(!refreshData);\n      })\n      .catch((err) => {\n        setDeleting(false);\n        setDeleteMode({ delete: false, person: null });\n        console.log(err);\n      });\n  };\n\n  const restoreBooking = (id) => {\n    setRestoring(true);\n    bookingService\n      .unDeleteBooking(id)\n      .then((res) => {\n        setRestoring(false);\n        setRestoreMode({ restore: false, person: null });\n        setRefreshData(!refreshData);\n      })\n      .catch((err) => {\n        setRestoring(false);\n        setRestoreMode({ restore: false, person: null });\n        console.log(err);\n      });\n  };\n\n  const handleDeleteModeChanged = (del, person) => {\n    if (del) {\n      setDeleteMode({ delete: del, person: person });\n    } else if (!del && !person) {\n      setDeleteMode({ delete: del, person: person });\n    } else if (!del && person) {\n      deleteBooking(person._id);\n    }\n  };\n\n  const handleRestoreModeChanged = (restore, person) => {\n    if (restore) {\n      setRestoreMode({ restore: restore, person: person });\n    } else if (!restore && !person) {\n      setRestoreMode({ restore: restore, person: person });\n    } else if (!restore && person) {\n      restoreBooking(person._id);\n    }\n  };\n\n  const changeBackToBookingMade = (event, id) => {\n    setSaving(true);\n    BookService.changeBackToBookingMade(id)\n      .then((res) => {\n        setSaving(false);\n        setRefreshData(!refreshData);\n      })\n      .catch((err) => {\n        console.log(err);\n        setSaving(false);\n      });\n  };\n\n  const resendEmails = (event, id) => {\n    setSelectedBooking(booking);\n    setOpenResendDialog(true);\n  };\n\n  const Pay = (event, id) => {\n    setSelectedBooking(booking);\n    setOpenPayDialog(true);\n  };\n\n  useEffect(() => {\n    if (props.booking) {\n      BookService.getBookingById(props.booking._id)\n        .then((res) => {\n          setBooking(res.data);\n        })\n        .catch((err) => {\n          console.log(err);\n        });\n\n      setState((state) => ({\n        ...state,\n        bookingDialogDataChanged: !state.bookingDialogDataChanged\n          ? true\n          : false,\n      }));\n    }\n  }, [refreshData, state.bookingPayChanged]);\n\n  useEffect(() => {\n    if (props.booking) {\n      setBooking(props.booking);\n    }\n  }, [props.booking]);\n\n  const undoPaymentClicked = async () => {\n    setSaving(true);\n    try {\n      await BookService.unPayBooking(booking._id);\n      setSaving(false);\n      setOpenUndoPayDialog(false);\n      setRefreshData(!refreshData);\n    } catch (err) {\n      console.error(err);\n      setSaving(false);\n      setOpenUndoPayDialog(false);\n    }\n  };\n\n  ///*** Invoice  ******************/\n\n  const [invoice, setInvoice] = React.useState(null);\n  const [invoiceLoaded, setInvoiceLoaded] = React.useState(false);\n  const [openInvoiceDialog, setOpenInvoiceDialog] = React.useState(false);\n  const [emailSentInvoice, setEmailSentInvoice] = React.useState(false);\n\n  const fetchInvoice = async () => {\n    try {\n      setInvoiceLoaded(false);\n      const res = await InvoiceService.getInvoiceByBookingId(props.booking._id);\n      setInvoice(res.data.invoice);\n      setInvoiceLoaded(true);\n    } catch (err) {\n      setInvoiceLoaded(true);\n      console.error(err);\n    }\n  };\n\n  React.useEffect(() => {\n    if (props.booking) {\n      fetchInvoice();\n    }\n  }, [props.booking, props.open]);\n\n  const handleCloseInvoiceDialog = (refresh) => {\n    setOpenInvoiceDialog(false);\n    setSelectedBooking(null);\n    fetchInvoice();\n  };\n\n  const OpenInvoiceDialog = () => {\n    setSelectedBooking(booking);\n    setInvoice(invoice);\n    setOpenInvoiceDialog(true);\n  };\n\n  const downloadInvoice = (id) => {\n    InvoiceService.downloadInvoice(id)\n      .then((res) => {\n        const file = new Blob([res.data], { type: \"application/pdf\" });\n\n        const fileURL = URL.createObjectURL(file);\n        window.open(fileURL, \"_blank\");\n      })\n      .catch((err) => {\n        console.log(err);\n      });\n  };\n\n  const sendInvoiceEmail = (id, _email) => {\n    setSaving(true);\n    setEmailSentInvoice(false);\n    InvoiceService.emailInvoice(id, _email)\n      .then((res) => {\n        setSaving(false);\n        if (res.data.status === \"OK\") {\n          setEmailSentInvoice(true);\n        }\n      })\n      .catch((err) => {\n        console.log(err);\n        setSaving(false);\n      });\n  };\n\n  //***************************** */\n\n  return (\n    <React.Fragment>\n      {booking && (\n        <React.Fragment>\n          <Dialog\n            maxWidth=\"md\"\n            open={props.open}\n            TransitionComponent={Transition}\n            keepMounted\n            onClose={props.onClose}\n            PaperComponent={PaperComponent}\n            aria-labelledby=\"alert-dialog-slide-title\"\n            aria-describedby=\"alert-dialog-slide-description\"\n          >\n            <DialogTitle\n              id=\"alert-dialog-slide-title\"\n              style={\n                booking.tr ? { backgroundColor: \"#7e0082\", color: \"#fff\" } : {}\n              }\n            >\n              <div style={{ position: \"absolute\", top: \"25x\", left: \"25px\" }}>\n                <Tooltip title=\"COPY EDIT LINK TO CLIPBOARD\">\n                  <IconButton\n                    onClick={() => {\n                      navigator.clipboard.writeText(\n                        `https://londonmedicalclinic.co.uk/medicalexpressclinic/user/edit/pcr/${booking._id}`\n                      );\n                      setCopied(true);\n                      setTimeout(() => {\n                        setCopied(false);\n                      }, 1500);\n                    }}\n                    aria-label=\"delete\"\n                    className={classes.margin}\n                    size=\"small\"\n                  >\n                    <FileCopyOutlinedIcon\n                      style={booking.tr ? { color: \"#ddd\" } : {}}\n                      fontSize=\"14px\"\n                    />\n                  </IconButton>\n                </Tooltip>\n\n                <span\n                  hidden={!copied}\n                  style={{ fontSize: \"12px\", transition: \"all 1s ease-in\" }}\n                >\n                  {\" \"}\n                  Copied{\" \"}\n                </span>\n              </div>\n\n              <div\n                style={{\n                  position: \"absolute\",\n                  top: \"25x\",\n                  right: \"60px\",\n                  backgroundColor: CalendarColors.PCR_COLOR,\n                  color: \"#fff\",\n                  padding: \"0px 5px\",\n                  borderRadius: \"10px\",\n                }}\n              >\n                PCR\n              </div>\n\n              {booking.tr && (\n                <div style={{ position: \"absolute\", right: \"15px\" }}>TR</div>\n              )}\n\n              <Grid\n                container\n                direction=\"row\"\n                justify=\"center\"\n                spacing={2}\n                alignItems=\"center\"\n              >\n                <Grid item>\n                  <div\n                    style={\n                      booking.deleted\n                        ? {\n                            paddingBottom: \"5px\",\n                            textDecoration: \"line-through\",\n                          }\n                        : {}\n                    }\n                  >\n                    {`${booking.forenameCapital} ${booking.surnameCapital}`}\n                  </div>\n                </Grid>\n\n                {booking.deleted && (\n                  <Grid item>\n                    <Tooltip title=\"This record has been deleted.\">\n                      <DeleteIcon\n                        style={\n                          booking.tr\n                            ? {\n                                padding: 0,\n                                margin: 0,\n                                color: \"#fff\",\n                                fontSize: 25,\n                              }\n                            : {\n                                padding: 0,\n                                margin: 0,\n                                color: \"#333\",\n                                fontSize: 25,\n                              }\n                        }\n                      />\n                    </Tooltip>\n                  </Grid>\n                )}\n              </Grid>\n            </DialogTitle>\n            <DialogContent>\n              <div\n                style={{\n                  paddingTop: \"20px\",\n                }}\n              >\n                <Grid item xs={12} md={12} key={`panel0`}>\n                  <div className={classes.infoDetails}>\n                    <ul className={classes.ul}>\n                      {/* Restore Functionality ******************************************* */}\n                      <li\n                        hidden={\n                          !(\n                            restoreMode.restore &&\n                            restoreMode.person._id === booking._id\n                          )\n                        }\n                      >\n                        <div\n                          style={{\n                            fontWeight: \"500\",\n                            paddingBottom: \"5px\",\n                            paddingLeft: \"5px\",\n                            fontSize: \"16px\",\n                            color: \"#333\",\n                          }}\n                        >\n                          Are you sure you want to restore this record?\n                        </div>\n                      </li>\n\n                      <li\n                        hidden={\n                          !booking.deleted ||\n                          (restoreMode.restore &&\n                            restoreMode.person._id === booking._id)\n                        }\n                      >\n                        <Button\n                          type=\"button\"\n                          fullWidth\n                          variant=\"contained\"\n                          color=\"primary\"\n                          onClick={() => {\n                            handleRestoreModeChanged(true, booking);\n                          }}\n                          className={classes.RestoreButton}\n                        >\n                          Restore This Record\n                        </Button>\n                      </li>\n\n                      <li\n                        hidden={\n                          !(\n                            restoreMode.restore &&\n                            restoreMode.person._id === booking._id\n                          )\n                        }\n                      >\n                        <Button\n                          type=\"button\"\n                          fullWidth\n                          variant=\"contained\"\n                          color=\"primary\"\n                          disabled={restoring}\n                          onClick={() => {\n                            handleRestoreModeChanged(false, booking);\n                          }}\n                          className={classes.SaveButton}\n                        >\n                          YES, Restore this!\n                        </Button>\n                      </li>\n\n                      <li\n                        hidden={\n                          !(\n                            restoreMode.restore &&\n                            restoreMode.person._id === booking._id\n                          )\n                        }\n                      >\n                        <Button\n                          type=\"button\"\n                          fullWidth\n                          variant=\"contained\"\n                          color=\"default\"\n                          disabled={restoring}\n                          onClick={() => {\n                            handleRestoreModeChanged(false, null);\n                          }}\n                          className={classes.CancelButton}\n                        >\n                          Cancel\n                        </Button>\n                      </li>\n\n                      {/*  ******************************************************************* */}\n\n                      {/* Edit Functionality ******************************************* */}\n\n                      <li\n                        hidden={\n                          booking.deleted ||\n                          deleteMode.delete ||\n                          (editMode.edit && editMode.person._id === booking._id)\n                        }\n                      >\n                        <Button\n                          type=\"button\"\n                          fullWidth\n                          variant=\"contained\"\n                          color=\"primary\"\n                          onClick={() => {\n                            handleEditModeChanged(true, booking);\n                          }}\n                          className={classes.EditButton}\n                        >\n                          Edit Booking Info\n                        </Button>\n                      </li>\n\n                      <li\n                        hidden={\n                          !(\n                            editMode.edit && editMode.person._id === booking._id\n                          )\n                        }\n                      >\n                        <Button\n                          type=\"button\"\n                          fullWidth\n                          variant=\"contained\"\n                          color=\"primary\"\n                          disabled={saving || !recordChanged}\n                          onClick={() => {\n                            handleEditModeChanged(false, booking);\n                          }}\n                          className={classes.SaveButton}\n                        >\n                          Save Changes\n                        </Button>\n                      </li>\n\n                      <li\n                        hidden={\n                          !(\n                            editMode.edit && editMode.person._id === booking._id\n                          )\n                        }\n                      >\n                        <Button\n                          type=\"button\"\n                          fullWidth\n                          variant=\"contained\"\n                          color=\"default\"\n                          disabled={saving}\n                          onClick={() => {\n                            handleEditModeChanged(false, null);\n                          }}\n                          className={classes.CancelButton}\n                        >\n                          Cancel\n                        </Button>\n                      </li>\n\n                      {/* ****************************************************************************************** */}\n\n                      {/* Delete Functionality ******************************************* */}\n\n                      <li\n                        hidden={\n                          !(\n                            deleteMode.delete &&\n                            deleteMode.person._id === booking._id\n                          )\n                        }\n                      >\n                        <div\n                          style={{\n                            fontWeight: \"600\",\n                            paddingBottom: \"5px\",\n                            paddingLeft: \"5px\",\n                            fontSize: \"16px\",\n                          }}\n                        >\n                          Are you sure you want to delete this record?\n                        </div>\n                      </li>\n\n                      <li\n                        hidden={\n                          props.deleteButtonDisabled ||\n                          booking.deleted ||\n                          editMode.edit ||\n                          (deleteMode.delete &&\n                            deleteMode.person._id === booking._id)\n                        }\n                      >\n                        <Button\n                          type=\"button\"\n                          fullWidth\n                          variant=\"contained\"\n                          color=\"primary\"\n                          onClick={() => {\n                            handleDeleteModeChanged(true, booking);\n                          }}\n                          className={classes.DeleteButton}\n                        >\n                          Delete This Record\n                        </Button>\n                      </li>\n\n                      <li\n                        hidden={\n                          !(\n                            deleteMode.delete &&\n                            deleteMode.person._id === booking._id\n                          )\n                        }\n                      >\n                        <Button\n                          type=\"button\"\n                          fullWidth\n                          variant=\"contained\"\n                          color=\"primary\"\n                          disabled={deleting}\n                          onClick={() => {\n                            handleDeleteModeChanged(false, booking);\n                          }}\n                          className={classes.SaveButton}\n                        >\n                          YES, Delete this!\n                        </Button>\n                      </li>\n\n                      <li\n                        hidden={\n                          !(\n                            deleteMode.delete &&\n                            deleteMode.person._id === booking._id\n                          )\n                        }\n                      >\n                        <Button\n                          type=\"button\"\n                          fullWidth\n                          variant=\"contained\"\n                          color=\"default\"\n                          disabled={deleting}\n                          onClick={() => {\n                            handleDeleteModeChanged(false, null);\n                          }}\n                          className={classes.CancelButton}\n                        >\n                          Cancel\n                        </Button>\n                      </li>\n\n                      {/* ****************************************************************************************** */}\n\n                      <li className={classes.li}>\n                        <Grid container spacing={2}>\n                          <Grid item xs={6}>\n                            <span className={classes.infoTitle}>\n                              BOOKED DATE\n                            </span>\n\n                            <span\n                              hidden={\n                                editMode.edit &&\n                                editMode.person._id === booking._id\n                              }\n                              className={classes.infoData}\n                            >\n                              {FormatDateFromString(booking.bookingDate)}\n                            </span>\n                            <span\n                              hidden={\n                                !(\n                                  editMode.edit &&\n                                  editMode.person._id === booking._id\n                                )\n                              }\n                              className={classes.infoData}\n                            >\n                              <TextField\n                                fullWidth\n                                error={validationError.bookingDateError}\n                                className={classes.TextBox}\n                                value={bookingDate}\n                                onChange={bookingDateChanged}\n                                inputProps={{\n                                  style: {\n                                    padding: 0,\n                                  },\n                                }}\n                              ></TextField>\n                            </span>\n                          </Grid>\n\n                          <Grid item xs={6}>\n                            <span className={classes.infoTitle}>\n                              BOOKED TIME\n                            </span>\n                            <span\n                              hidden={\n                                editMode.edit &&\n                                editMode.person._id === booking._id\n                              }\n                              className={classes.infoData}\n                            >\n                              {booking.bookingTime.toUpperCase()}\n                            </span>\n                            <span\n                              hidden={\n                                !(\n                                  editMode.edit &&\n                                  editMode.person._id === booking._id\n                                )\n                              }\n                              className={classes.infoData}\n                            >\n                              <TextField\n                                fullWidth\n                                error={validationError.bookingTimeError}\n                                className={classes.TextBox}\n                                value={bookingTime}\n                                onChange={bookingTimeChanged}\n                                inputProps={{\n                                  style: {\n                                    padding: 0,\n                                  },\n                                }}\n                              ></TextField>\n                            </span>\n                          </Grid>\n                        </Grid>\n                      </li>\n\n                      <li className={classes.li}>\n                        <Grid container spacing={2}>\n                          <Grid item xs={6}>\n                            <span className={classes.infoTitle}>GENDER</span>\n                            <span\n                              hidden={\n                                editMode.edit &&\n                                editMode.person._id === booking._id\n                              }\n                              className={classes.infoData}\n                            >\n                              {booking.gender?.toUpperCase()}\n                            </span>\n                            <span\n                              hidden={\n                                !(\n                                  editMode.edit &&\n                                  editMode.person._id === booking._id\n                                )\n                              }\n                              className={classes.infoData}\n                            >\n                              <TextField\n                                fullWidth\n                                className={classes.TextBox}\n                                value={gender}\n                                onChange={genderChanged}\n                                inputProps={{\n                                  style: {\n                                    padding: 0,\n                                  },\n                                }}\n                              ></TextField>\n                            </span>\n                          </Grid>\n                          <Grid item xs={6}>\n                            <span className={classes.infoTitle}>TITLE</span>\n                            <span\n                              hidden={\n                                editMode.edit &&\n                                editMode.person._id === booking._id\n                              }\n                              className={classes.infoData}\n                            >\n                              {booking.title?.toUpperCase()}\n                            </span>\n                            <span\n                              hidden={\n                                !(\n                                  editMode.edit &&\n                                  editMode.person._id === booking._id\n                                )\n                              }\n                              className={classes.infoData}\n                            >\n                              <TextField\n                                fullWidth\n                                className={classes.TextBox}\n                                value={title}\n                                onChange={titleChanged}\n                                inputProps={{\n                                  style: {\n                                    padding: 0,\n                                  },\n                                }}\n                              ></TextField>\n                            </span>\n                          </Grid>\n                        </Grid>\n                      </li>\n\n                      <li className={classes.li}>\n                        <Grid container spacing={2}>\n                          <Grid item xs={6}>\n                            <span className={classes.infoTitle}>FORENAME</span>\n                            <span\n                              hidden={\n                                editMode.edit &&\n                                editMode.person._id === booking._id\n                              }\n                              className={classes.infoData}\n                            >\n                              {booking.forenameCapital}\n                            </span>\n                            <span\n                              hidden={\n                                !(\n                                  editMode.edit &&\n                                  editMode.person._id === booking._id\n                                )\n                              }\n                              className={classes.infoData}\n                            >\n                              <TextField\n                                fullWidth\n                                className={classes.TextBox}\n                                value={forename}\n                                onChange={forenameChanged}\n                                inputProps={{\n                                  style: {\n                                    padding: 0,\n                                  },\n                                }}\n                              ></TextField>\n                            </span>\n                          </Grid>\n                          <Grid item xs={6}>\n                            <span className={classes.infoTitle}>SURNAME</span>\n                            <span\n                              hidden={\n                                editMode.edit &&\n                                editMode.person._id === booking._id\n                              }\n                              className={classes.infoData}\n                            >\n                              {booking.surnameCapital}\n                            </span>\n                            <span\n                              hidden={\n                                !(\n                                  editMode.edit &&\n                                  editMode.person._id === booking._id\n                                )\n                              }\n                              className={classes.infoData}\n                            >\n                              <TextField\n                                fullWidth\n                                className={classes.TextBox}\n                                value={surname}\n                                onChange={surnameChanged}\n                                inputProps={{\n                                  style: {\n                                    padding: 0,\n                                  },\n                                }}\n                              ></TextField>\n                            </span>\n                          </Grid>\n                        </Grid>\n                      </li>\n\n                      <li className={classes.li}>\n                        <Grid container spacing={2}>\n                          <Grid item xs={6}>\n                            <span className={classes.infoTitle}>EMAIL</span>\n                            <span\n                              hidden={\n                                editMode.edit &&\n                                editMode.person._id === booking._id\n                              }\n                              className={classes.infoData}\n                            >\n                              {booking.email?.toUpperCase()}\n                            </span>\n                            <span\n                              hidden={\n                                !(\n                                  editMode.edit &&\n                                  editMode.person._id === booking._id\n                                )\n                              }\n                              className={classes.infoData}\n                            >\n                              <TextField\n                                fullWidth\n                                className={classes.TextBox}\n                                value={email}\n                                onChange={emailChanged}\n                                inputProps={{\n                                  style: {\n                                    padding: 0,\n                                  },\n                                }}\n                              ></TextField>\n                            </span>\n                          </Grid>\n                          <Grid item xs={6}>\n                            <span className={classes.infoTitle}>D.O.B</span>\n                            <span\n                              hidden={\n                                editMode.edit &&\n                                editMode.person._id === booking._id\n                              }\n                              className={classes.infoData}\n                            >\n                              {FormatDateFromString(booking.birthDate)}\n                            </span>\n                            <span\n                              hidden={\n                                !(\n                                  editMode.edit &&\n                                  editMode.person._id === booking._id\n                                )\n                              }\n                              className={classes.infoData}\n                            >\n                              <TextField\n                                fullWidth\n                                error={validationError.dobError}\n                                className={classes.TextBox}\n                                value={dob}\n                                onChange={dobChanged}\n                                inputProps={{\n                                  style: {\n                                    padding: 0,\n                                  },\n                                }}\n                              ></TextField>\n                            </span>\n                          </Grid>\n                        </Grid>\n                      </li>\n                      <li className={classes.li}></li>\n                      <li className={classes.li}>\n                        <Grid container spacing={2}>\n                          <Grid item xs={6}>\n                            <span className={classes.infoTitle}>TEL</span>\n                            <span\n                              hidden={\n                                editMode.edit &&\n                                editMode.person._id === booking._id\n                              }\n                              className={classes.infoData}\n                            >\n                              {booking.phone?.toUpperCase()}\n                            </span>\n                            <span\n                              hidden={\n                                !(\n                                  editMode.edit &&\n                                  editMode.person._id === booking._id\n                                )\n                              }\n                              className={classes.infoData}\n                            >\n                              <TextField\n                                fullWidth\n                                className={classes.TextBox}\n                                value={tel}\n                                onChange={telChanged}\n                                inputProps={{\n                                  style: {\n                                    padding: 0,\n                                  },\n                                }}\n                              ></TextField>\n                            </span>\n                          </Grid>\n                          <Grid item xs={6}>\n                            <span className={classes.infoTitle}>POST CODE</span>\n                            <span\n                              hidden={\n                                editMode.edit &&\n                                editMode.person._id === booking._id\n                              }\n                              className={classes.infoData}\n                            >\n                              {booking.postCode?.toUpperCase()}\n                            </span>\n                            <span\n                              hidden={\n                                !(\n                                  editMode.edit &&\n                                  editMode.person._id === booking._id\n                                )\n                              }\n                              className={classes.infoData}\n                            >\n                              <TextField\n                                fullWidth\n                                className={classes.TextBox}\n                                value={postCode}\n                                onChange={postCodeChanged}\n                                inputProps={{\n                                  style: {\n                                    padding: 0,\n                                  },\n                                }}\n                              ></TextField>\n                            </span>\n                          </Grid>\n                        </Grid>\n                      </li>\n                      <li className={classes.li}>\n                        <span className={classes.infoTitle}>ADDRESS</span>\n                        <span\n                          hidden={\n                            editMode.edit && editMode.person._id === booking._id\n                          }\n                          className={classes.infoData}\n                        >\n                          {booking.address?.toUpperCase()}\n                        </span>\n                        <span\n                          hidden={\n                            !(\n                              editMode.edit &&\n                              editMode.person._id === booking._id\n                            )\n                          }\n                          className={classes.infoData}\n                        >\n                          <TextField\n                            fullWidth\n                            className={classes.TextBox}\n                            value={address}\n                            onChange={addressChanged}\n                            inputProps={{\n                              style: {\n                                padding: 0,\n                              },\n                            }}\n                          ></TextField>\n                        </span>\n                      </li>\n\n                      {booking.selfIsolate && (\n                        <React.Fragment>\n                          <li className={classes.li}>\n                            <span className={classes.infoTitle}>\n                              Self-Isolate Post Code\n                            </span>{\" \"}\n                            <span className={classes.infoData}>\n                              {booking.postCodeSI}\n                            </span>\n                          </li>\n                          <li className={classes.li}>\n                            <span className={classes.infoTitle}>\n                              Self-Isolate Address\n                            </span>{\" \"}\n                            <span className={classes.infoData}>\n                              {booking.addressSI}\n                            </span>\n                          </li>\n                        </React.Fragment>\n                      )}\n\n                      <li className={classes.li}>\n                        <Grid container spacing={2}>\n                          <Grid item xs={6}>\n                            <span className={classes.infoTitle}>\n                              PASSPORT NO.\n                            </span>\n                            <span\n                              hidden={\n                                editMode.edit &&\n                                editMode.person._id === booking._id\n                              }\n                              className={classes.infoData}\n                            >\n                              {booking.passportNumber?.toUpperCase()}\n                            </span>\n                            <span\n                              hidden={\n                                !(\n                                  editMode.edit &&\n                                  editMode.person._id === booking._id\n                                )\n                              }\n                              className={classes.infoData}\n                            >\n                              <TextField\n                                fullWidth\n                                className={classes.TextBox}\n                                value={passport}\n                                onChange={passportChanged}\n                                inputProps={{\n                                  style: {\n                                    padding: 0,\n                                  },\n                                }}\n                              ></TextField>\n                            </span>\n                          </Grid>\n\n                          {!booking.tr && (\n                            <Grid item xs={6}>\n                              <span className={classes.infoTitle}>\n                                SECOND PASSPORT NO.\n                              </span>\n                              <span\n                                hidden={\n                                  editMode.edit &&\n                                  editMode.person._id === booking._id\n                                }\n                                className={classes.infoData}\n                              >\n                                {booking.passportNumber2?.toUpperCase()}\n                              </span>\n                              <span\n                                hidden={\n                                  !(\n                                    editMode.edit &&\n                                    editMode.person._id === booking._id\n                                  )\n                                }\n                                className={classes.infoData}\n                              >\n                                <TextField\n                                  fullWidth\n                                  className={classes.TextBox}\n                                  value={passport2}\n                                  onChange={passport2Changed}\n                                  inputProps={{\n                                    style: {\n                                      padding: 0,\n                                    },\n                                  }}\n                                ></TextField>\n                              </span>\n                            </Grid>\n                          )}\n                        </Grid>\n                      </li>\n\n                      <li hidden={!booking.tr} className={classes.li}>\n                        <Grid container spacing={2}>\n                          <Grid item xs={6}>\n                            <span className={classes.infoTitle}>\n                              NHS Number\n                            </span>{\" \"}\n                            <span className={classes.infoData}>\n                              {booking.NHSNumber ?? \"-\"}\n                            </span>\n                          </Grid>\n                          <Grid item xs={6}>\n                            <span className={classes.infoTitle}>Ethnicity</span>{\" \"}\n                            <span className={classes.infoData}>\n                              {booking.ethnicity}\n                            </span>\n                          </Grid>\n                        </Grid>\n                      </li>\n\n                      <li hidden={!booking.tr} className={classes.li}>\n                        <Grid container spacing={2}>\n                          <Grid item xs={6}>\n                            <span className={classes.infoTitle}>\n                              Arrival Date\n                            </span>{\" \"}\n                            <span className={classes.infoData}>\n                              {booking.arrivalDate}\n                            </span>\n                          </Grid>\n                          <Grid item xs={6}>\n                            <span className={classes.infoTitle}>\n                              Flight Number\n                            </span>{\" \"}\n                            <span className={classes.infoData}>\n                              {booking.flightNumber}\n                            </span>\n                          </Grid>\n                        </Grid>\n                      </li>\n                      <li hidden={!booking.tr} className={classes.li}>\n                        <Grid container spacing={2}>\n                          <Grid item xs={6}>\n                            <span className={classes.infoTitle}>\n                              Last Departed Date\n                            </span>{\" \"}\n                            <span className={classes.infoData}>\n                              {booking.lastDepartedDate}\n                            </span>\n                          </Grid>\n                          <Grid item xs={6}>\n                            <span className={classes.infoTitle}>\n                              Travelling From\n                            </span>{\" \"}\n                            <span className={classes.infoData}>\n                              {booking.travellingFrom}\n                            </span>\n                          </Grid>\n                        </Grid>\n                      </li>\n\n                      <li hidden={booking.tr} className={classes.li}>\n                        <Grid container spacing={2}>\n                          <Grid item xs={6}>\n                            <span className={classes.infoTitle}>\n                              REQUEST FOR CERTIFICATE\n                            </span>\n                            <span\n                              hidden={\n                                editMode.edit &&\n                                editMode.person._id === booking._id\n                              }\n                              className={classes.infoData}\n                            >\n                              {booking.certificate ? (\n                                <CheckIcon className={classes.checkIcon} />\n                              ) : (\n                                <CloseIcon className={classes.closeIcon} />\n                              )}\n                            </span>\n                            <span\n                              hidden={\n                                !(\n                                  editMode.edit &&\n                                  editMode.person._id === booking._id\n                                )\n                              }\n                              className={classes.infoData}\n                            >\n                              <FormControlLabel\n                                className={classes.formControl}\n                                control={\n                                  <Checkbox\n                                    className={classes.formControl}\n                                    color=\"secondary\"\n                                    name=\"certificate\"\n                                    checked={certificate}\n                                    onChange={certificateChanged}\n                                  />\n                                }\n                                label=\"\"\n                              />\n                            </span>\n                          </Grid>\n                          <Grid item xs={6}>\n                            <span className={classes.infoTitle}>\n                              REQUEST FOR ANTIBODY TEST\n                            </span>\n                            <span\n                              hidden={\n                                editMode.edit &&\n                                editMode.person._id === booking._id\n                              }\n                              className={classes.infoData}\n                            >\n                              {booking.antiBodyTest ? (\n                                <CheckIcon className={classes.checkIcon} />\n                              ) : (\n                                <CloseIcon className={classes.closeIcon} />\n                              )}\n                            </span>\n                            <span\n                              hidden={\n                                !(\n                                  editMode.edit &&\n                                  editMode.person._id === booking._id\n                                )\n                              }\n                              className={classes.infoData}\n                            >\n                              <FormControlLabel\n                                className={classes.formControl}\n                                control={\n                                  <Checkbox\n                                    className={classes.formControl}\n                                    color=\"secondary\"\n                                    name=\"certificate\"\n                                    checked={antiBodyTest}\n                                    onChange={antiBodyTestChanged}\n                                  />\n                                }\n                                label=\"\"\n                              />\n                            </span>\n                          </Grid>\n                        </Grid>\n                      </li>\n                      <li className={classes.li} style={{paddingTop:\"10px\"}}>\n                        <span className={classes.infoTitle}>STATUS</span>{\" \"}\n                        {getStatusLabel(booking.status)}\n                        {booking.status === \"sample_taken\" &&\n                          !(\n                            editMode.edit && editMode.person._id === booking._id\n                          ) && (\n                            <Button\n                              variant=\"outlined\"\n                              color=\"primary\"\n                              disabled={saving}\n                              onClick={(event) =>\n                                changeBackToBookingMade(event, booking._id)\n                              }\n                            >\n                              Change Back To Booking Made\n                            </Button>\n                          )}\n                        {(booking.status === \"report_sent\" ||\n                          booking.status === \"report_cert_sent\" ||\n                          booking.status === \"positive\") &&\n                          !(\n                            editMode.edit && editMode.person._id === booking._id\n                          ) && (\n                            <Button\n                              variant=\"outlined\"\n                              color=\"primary\"\n                              className={classes.ResendEmailsButton}\n                              onClick={(event) =>\n                                resendEmails(event, booking._id)\n                              }\n                            >\n                              Resend emails\n                            </Button>\n                          )}\n                      </li>\n\n                      <li hidden={booking.deleted}>\n                        <Button\n                          startIcon={<PrintIcon />}\n                          type=\"button\"\n                          fullWidth\n                          variant=\"outlined\"\n                          color=\"primary\"\n                          onClick={() => {\n                            downloadForm1(booking._id);\n                          }}\n                          // onTouchTap = {() => {downloadForm1(person._id)}}\n                          className={classes.DownloadForm}\n                        >\n                          Download Registration Form\n                        </Button>\n                      </li>\n\n                      <li hidden={booking.deleted}>\n                        <Button\n                          startIcon={<PrintIcon />}\n                          type=\"button\"\n                          fullWidth\n                          variant=\"outlined\"\n                          color=\"primary\"\n                          onClick={() => {\n                            downloadForm2(booking._id);\n                          }}\n                          // onTouchTap = {() => {downloadForm2(person._id)}}\n                          className={classes.DownloadForm}\n                        >\n                          Download Lab Form\n                        </Button>\n                      </li>\n\n                      <li\n                        hidden={\n                          booking.deleted ||\n                          (booking.status !== \"report_sent\" &&\n                            booking.status !== \"report_cert_sent\" &&\n                            booking.status !== \"positive\")\n                        }\n                      >\n                        <Button\n                          startIcon={<PrintIcon />}\n                          type=\"button\"\n                          fullWidth\n                          variant=\"outlined\"\n                          color=\"primary\"\n                          onClick={() => {\n                            downloadLabResults(booking._id);\n                          }}\n                          // onTouchTap = {() => {downloadForm1(person._id)}}\n                          className={classes.DownloadForm}\n                        >\n                          Download Lab Results\n                        </Button>\n                      </li>\n\n                      <li\n                        hidden={\n                          booking.deleted ||\n                          (booking.status !== \"report_cert_sent\" &&\n                            booking.status !== \"positive\")\n                        }\n                      >\n                        <Button\n                          startIcon={<PrintIcon />}\n                          type=\"button\"\n                          fullWidth\n                          variant=\"outlined\"\n                          color=\"primary\"\n                          onClick={() => {\n                            downloadCertificate(booking._id);\n                          }}\n                          // onTouchTap = {() => {downloadForm1(person._id)}}\n                          className={classes.DownloadForm}\n                        >\n                          Download Certificate\n                        </Button>\n                      </li>\n\n                      <li>\n                        <Button\n                          startIcon={<HistoryIcon />}\n                          type=\"button\"\n                          fullWidth\n                          variant=\"outlined\"\n                          color=\"secondary\"\n                          onClick={() => {\n                            setSelectedBooking(booking);\n                            setOpenTimeStampDialog(true);\n                          }}\n                          // onTouchTap = {() => {downloadForm1(person._id)}}\n                          className={classes.DownloadForm}\n                        >\n                          Show Audit Trail\n                        </Button>\n                      </li>\n\n                      <Divider />\n\n                      <li className={classes.li} style={{ marginTop: \"20px\" }}>\n                        <span className={classes.infoTitle}>INVOICE # : </span>{\" \"}\n                        <span style={{ paddingLeft: \"0px\" }}>\n                          {!invoiceLoaded && (\n                            <span className={classes.invoiceNumber}> ... </span>\n                          )}\n                          {invoiceLoaded && invoice && (\n                            <span className={classes.invoiceNumber}>\n                              {\" \"}\n                              {invoice.invoiceNumber}{\" \"}\n                            </span>\n                          )}\n                          {invoiceLoaded && !invoice && (\n                            <span\n                              className={classes.invoiceNumber}\n                              style={{ color: \"red\", fontSize: \"0.9rem\" }}\n                            >\n                              {\" \"}\n                              N/A{\" \"}\n                            </span>\n                          )}\n                        </span>\n                        {!(\n                          editMode.edit && editMode.person._id === booking._id\n                        ) &&\n                          !booking.deleted && (\n                            <React.Fragment>\n                              {invoiceLoaded && !invoice && (\n                                <Button\n                                  variant=\"outlined\"\n                                  color=\"primary\"\n                                  className={classes.PayButton}\n                                  onClick={() => OpenInvoiceDialog()}\n                                >\n                                  Issue Invoice\n                                </Button>\n                              )}\n\n                              {invoiceLoaded && invoice && (\n                                <React.Fragment>\n                                  <Button\n                                    variant=\"outlined\"\n                                    startIcon={<PrintIcon />}\n                                    color=\"primary\"\n                                    className={classes.printInvoiceButton}\n                                    onClick={() => downloadInvoice(invoice._id)}\n                                  >\n                                    Download Invoice\n                                  </Button>\n\n                                  <Button\n                                    variant=\"outlined\"\n                                    color=\"secondary\"\n                                    className={classes.editInvoiceButton}\n                                    onClick={() => OpenInvoiceDialog()}\n                                  >\n                                    Edit Invoice\n                                  </Button>\n\n                                  <Button\n                                    disabled={\n                                      !booking.email || booking.email.length < 3\n                                    }\n                                    startIcon={<SendIcon />}\n                                    type=\"button\"\n                                    variant=\"outlined\"\n                                    color=\"primary\"\n                                    onClick={() => {\n                                      sendInvoiceEmail(\n                                        invoice._id,\n                                        booking.email\n                                      );\n                                    }}\n                                    style={{\n                                      position: \"relative\",\n                                      marginLeft: \"10px\",\n                                      paddingRight: \"130px\",\n                                      fontSize: \"0.8rem\",\n                                    }}\n                                  >\n                                    Send Invoice By Email\n                                    {emailSentInvoice && (\n                                      <div\n                                        style={{\n                                          position: \"absolute\",\n                                          right: \"10px\",\n                                          top: \"5px\",\n                                          color: \"#05ad19\",\n                                        }}\n                                      >\n                                        Email Sent\n                                      </div>\n                                    )}\n                                  </Button>\n                                </React.Fragment>\n                              )}\n                            </React.Fragment>\n                          )}\n                      </li>\n\n                      <li className={classes.li}>\n                        <span className={classes.infoTitle}>TOTAL CHARGES</span>{\" \"}\n                        <span\n                          className={\n                            calculatePrice(booking) <= 199\n                              ? classes.infoDataCharges\n                              : classes.infoDataChargesHigher\n                          }\n                        >{`£${calculatePrice(booking)}`}</span>\n                        {!(\n                          editMode.edit && editMode.person._id === booking._id\n                        ) &&\n                          !booking.paid &&\n                          !booking.deleted && (\n                            <Button\n                              variant=\"outlined\"\n                              color=\"secondary\"\n                              className={classes.PayButton}\n                              onClick={(event) => Pay(event, booking._id)}\n                            >\n                              Pay\n                            </Button>\n                          )}\n                        {!(\n                          editMode.edit && editMode.person._id === booking._id\n                        ) &&\n                          booking.paid && (\n                            <React.Fragment>\n                              <span className={classes.PayLabel}>\n                                {\" \"}\n                                <CheckIcon\n                                  className={classes.checkIconSmall}\n                                />{\" \"}\n                                Paid by {booking.paidBy}\n                                {booking.paidBy === \"corporate\"\n                                  ? ` \"${booking.corporate}\" `\n                                  : \"\"}\n                              </span>\n\n                              <Tooltip title=\"Undo Payment\">\n                                <IconButton\n                                  onClick={() => setOpenUndoPayDialog(true)}\n                                >\n                                  <UndoIcon style={{ color: \"red\" }} />\n                                </IconButton>\n                              </Tooltip>\n                            </React.Fragment>\n                          )}\n                      </li>\n                    </ul>\n                  </div>\n                </Grid>\n              </div>\n              <Backdrop\n                className={classes.backdrop}\n                open={saving || deleting || restoring}\n              >\n                <CircularProgress color=\"inherit\" />\n              </Backdrop>\n            </DialogContent>\n\n            <ResendEmailsDialog\n              booking={selectedBooking}\n              open={openResendDialog}\n              handleClose={handleCloseResendDialog}\n            />\n            <PayDialog\n              booking={selectedBooking}\n              open={openPayDialog}\n              handleClose={handleClosePayDialog}\n            />\n\n            <InvoiceDialog\n              booking={selectedBooking}\n              invoice={invoice}\n              open={openInvoiceDialog}\n              defaultCodes={getDefaultCodes(props.booking)}\n              handleClose={handleCloseInvoiceDialog}\n            />\n\n            <TimeStampDialog\n              booking={selectedBooking}\n              open={openTimeStampDialog}\n              handleClose={handleCloseTimeStampDialog}\n            />\n          </Dialog>\n\n          <Dialog\n            open={openUndoPayDialog}\n            onClose={handleCloseUndoPayDialog}\n            aria-labelledby=\"alert-dialog-title\"\n            aria-describedby=\"alert-dialog-description\"\n          >\n            <DialogTitle style={{ color: \"#999\" }} id=\"alert-dialog-title\">\n              {\"Undo Payment\"}\n            </DialogTitle>\n            <DialogContent>\n              <DialogContentText\n                style={{ color: \"#333\", fontWeight: \"400\" }}\n                id=\"alert-dialog-description\"\n              >\n                Are you sure you want to undo payment for this booking?\n              </DialogContentText>\n            </DialogContent>\n            <DialogActions>\n              <Button onClick={handleCloseUndoPayDialog} color=\"default\">\n                Back\n              </Button>\n              <Button onClick={undoPaymentClicked} color=\"secondary\" autoFocus>\n                Yes, Undo Payment\n              </Button>\n            </DialogActions>\n          </Dialog>\n        </React.Fragment>\n      )}\n    </React.Fragment>\n  );\n}\n","import React, {useEffect, useRef, useState} from 'react';\nimport { DataGrid } from '@material-ui/data-grid';\nimport BookService from './services/BookService';\nimport { Button, Checkbox, CircularProgress, Dialog, DialogContent, DialogTitle, Divider, FormControl, FormControlLabel, Grid, Icon, InputLabel, LinearProgress, Link, makeStyles, MenuItem, Paper, Select, SvgIcon, Switch, TextField, Tooltip } from '@material-ui/core';\nimport RefreshIcon from '@material-ui/icons/Refresh';\nimport { IconButton } from '@material-ui/core';\nimport CheckIcon from '@material-ui/icons/Check';\nimport CloseIcon from '@material-ui/icons/Close';\nimport GlobalState from './../GlobalState';\nimport { getMenuIndex } from './../MenuList';\nimport {FormatDateFromString, FormatDateFromStringShortYear} from './DateFormatter';\n\nimport SearchIcon from '@material-ui/icons/Search';\nimport BookingDialog from './BookingDialog';\n\nimport NewReleasesIcon from '@material-ui/icons/NewReleases';\nimport HistoryIcon from '@material-ui/icons/History';\nimport TimelineIcon from '@material-ui/icons/Timeline';\nimport DescriptionIcon from '@material-ui/icons/Description';\nimport AutorenewIcon from '@material-ui/icons/Autorenew';\nimport LiveTvIcon from '@material-ui/icons/LiveTv';\nimport PlaylistAddCheckIcon from '@material-ui/icons/PlaylistAddCheck';\nimport AddCircleOutlineIcon from '@material-ui/icons/AddCircleOutline';\nimport DeleteIcon from '@material-ui/icons/Delete';\nimport HourglassEmptyIcon from '@material-ui/icons/HourglassEmpty';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faFileExcel } from \"@fortawesome/free-solid-svg-icons\";\nimport Draggable from 'react-draggable';\n\nimport * as dateformat from 'dateformat';\n\nimport DateFnsUtils from '@date-io/date-fns';\n\nimport MomentUtils from \"@date-io/moment\";\nimport moment from \"moment\";\n\nimport {\n  MuiPickersUtilsProvider,\n  KeyboardTimePicker,\n  KeyboardDatePicker,\n} from '@material-ui/pickers';\n\nimport BusinessIcon from '@material-ui/icons/Business';\nimport CreditCardIcon from '@material-ui/icons/CreditCard';\nimport LocalAtmIcon from '@material-ui/icons/LocalAtm';\n\n\nimport ReactHTMLTableToExcel from 'react-html-table-to-excel';\nimport PriceCalculator from './PriceCalculator';\nimport { corporates } from './Corporates';\n\nconst useStyles = makeStyles((theme) => ({\n  title: {\n    marginTop: theme.spacing(0),\n    marginBottom: theme.spacing(1),\n\n  },\n  \n  refreshButton:{\n    marginLeft: theme.spacing(2),\n  },\n\n  checkIcon:{\n    color: \"green\"\n  },\n\n  closeIcon:{\n    color: \"red\"\n  },\n\n  RefLink: {\n    cursor: \"pointer\"\n  },\n\n  BookedLabel:{\n    backgroundColor: \"#606060\",\n    color: \"#fff\",\n    width: \"70px\",\n    textAlign: \"center\",\n  },\n\n  PatientAttendedLabel:{\n    backgroundColor: \"#0066aa\",\n    color: \"#fff\",\n    width: \"70px\",\n    textAlign: \"center\",\n  },\n\n  SampleTakenLabel:{\n    backgroundColor: \"#0066cc\",\n    color: \"#fff\",\n    width: \"70px\",\n    textAlign: \"center\",\n  },\n\n  ReportSentLabel:{\n    backgroundColor: \"#009900\",\n    color: \"#fff\",\n    width: \"70px\",\n    textAlign: \"center\",\n  },\n\n  ReportCertSentLabel:{\n    backgroundColor: \"#009900\",\n    color: \"#fff\",\n    width: \"70px\",\n    textAlign: \"center\",\n  },\n\n  PositiveLabel:{\n    backgroundColor: \"red\",\n    color: \"#fff\",\n    width: \"70px\",\n    textAlign: \"center\",\n  },\n\n  HideNowRows: {\n    position: \"absolute\",\n    top: \"40%\",\n    left: \"40%\",\n    width: \"600px\",\n    height: \"300px\",\n    backgroundColor : \"#fafafa\",\n    color : \"#111\",\n    zIndex: \"1000\",\n    display: \"flex\",\n    alignItems: \"center\",\n    justifyItems: \"center\"\n  },\n\n  ExportToExcelButton:\n  {\n    // marginBottom : \"20px\",\n    color : \"#2f942e\",\n    borderColor: \"#2f942e\",\n    \"&:hover\": {\n      background: \"#fafffa\",\n      borderColor: \"#2f942e\",\n    },\n    textDecoration : \"none !important\", \n   \n  },\n\n  ExportToExcelButtonInline:\n  {\n    // marginBottom : \"20px\",\n    color : \"#2f942e\",\n    borderColor: \"#2f942e\",\n    \"&:hover\": {\n      background: \"#fafffa\",\n      borderColor: \"#2f942e\",\n    },\n    textDecoration : \"none !important\", \n    cursor: \"pointer\",\n    padding: \"10px\"\n   \n  },\n\n  table: {\n    width: \"100%\",\n    border: \"1px solid #ddd\",\n    borderCollapse: \"collapse\",\n},\n\nth: {\n    border: \"1px solid #ddd\",\n    borderCollapse: \"collapse\",\n    verticalAlign: \"middle\",\n    fontcolor: \"#555\",\n    fontWeight: \"400\",\n    fontSize: \"15px\",\n    paddingTop: \"5px\",\n    paddingBottom: \"5px\",\n    width: \"14%\",\n    paddingLeft: \"5px\",\n},\n\ntd: {\n    border: \"1px solid #ddd\",\n    borderCollapse: \"collapse\",\n    verticalAlign: \"middle\",\n    paddingLeft: \"5px\",\n},\n\ntopSelect: {\n  margin: theme.spacing(1),\n  minWidth: 80,\n}\n\n}));\n\nconst getTableTitle = (str) =>{\n\n  if (str === 'today')\n  {\n    return `Today's Bookings`;\n  }else if (str === 'old')\n  {\n    return `Old Bookings`;\n  }else if (str === 'future')\n  {\n    return `Future Bookings`;\n  }else if (str === 'recent')\n  {\n    return `Recent Bookings`;\n  }else if (str === 'live')\n  {\n    return `Live Bookings`;\n  }else if (str === 'completed')\n  {\n    return `Completed Bookings`;\n  }else if (str === 'positive')\n  {\n    return `Positive Results`;\n  }else if (str === 'deleted')\n  {\n    return `Deleted Records`;\n  }else if (str === 'late')\n  {\n    return `40 Hours Late`;\n  }else if (str === 'tr')\n  {\n    return `Test & Release Bookings`;\n  }\n  \n  else\n  {\n    return `All Bookings`;\n  }\n\n}\n\nconst getTableIcon = (str) =>{\n\n  if (str === 'today')\n  {\n    return <NewReleasesIcon style={{fontSize:\"2.2rem\"}} />;\n  }else if (str === 'old')\n  {\n    return <HistoryIcon style={{fontSize:\"2.2rem\"}} />;\n  }else if (str === 'future')\n  {\n    return <TimelineIcon style={{fontSize:\"2.2rem\"}} />;\n  }else if (str === 'recent')\n  {\n    return <AutorenewIcon style={{fontSize:\"2.2rem\"}} />;\n  }else if (str === 'live')\n  {\n    return <LiveTvIcon style={{fontSize:\"2.2rem\"}} />;\n  }else if (str === 'completed')\n  {\n    return  <PlaylistAddCheckIcon style={{fontSize:\"2.2rem\"}} />;\n  }else if (str === 'positive')\n  {\n    return <AddCircleOutlineIcon style={{fontSize:\"2.2rem\"}} />\n  }else if (str === 'deleted')\n  {\n    return <DeleteIcon style={{fontSize:\"2.2rem\"}} />;\n  }else if (str === 'late')\n  {\n    return <HourglassEmptyIcon style={{fontSize:\"2.2rem\"}} />;\n  }\n  \n  else\n  {\n    return <DescriptionIcon style={{fontSize:\"2.2rem\"}} />;\n  }\n\n}\n\nfunction PaperComponent(props) {\n  return (\n    <Draggable handle=\"#draggable-dialog-title\" cancel={'[class*=\"MuiDialogContent-root\"]'}>\n      <Paper {...props} />\n    </Draggable>\n  );\n}\n\nexport default function BookingTable(props) {\n  \n  const classes = useStyles();\n\n  const [topCount, setTopCount] = React.useState(25)\n  const topCountChanged = (event) =>\n  {\n    setTopCount(event.target.value)\n    loadData(event.target.value)\n  }\n  \n\n  const [openDialogExcel, setOpenDialogExcel] = useState(false);\n  const handleCloseDialogExcel = () =>\n  {\n    setCorporate(corporates[0]);\n    setJustCorporate(false);\n    setOpenDialogExcel(false);\n  }\n\n\n  const [fromDate, setFromDate] = React.useState(new Date(new Date().getTime() - 7 * 24 * 60 * 60 * 1000 ));\n  const handleFromDateChange = (date) => {\n    setFromDate(date);\n    setFromDateStr(dateformat(date,'yyyy-mm-dd'));\n  };\n\n  const [untilDate, setUntilDate] = React.useState(new Date(new Date().getTime() - 1 * 24 * 60 * 60 * 1000 ));\n  const handleUntilDateChange = (date) => {\n    setUntilDate(date);\n    seUntilDateStr(dateformat(date,'yyyy-mm-dd'));\n  };\n\n  const [fromDateStr, setFromDateStr] = useState(dateformat(new Date(new Date().getTime() - 7 * 24 * 60 * 60 * 1000 ), 'yyyy-mm-dd'));\n  const [untilDateStr, seUntilDateStr] = useState(dateformat(new Date(new Date().getTime() - 1 * 24 * 60 * 60 * 1000 ), 'yyyy-mm-dd'));\n\n  const [justCorporate, setJustCorporate] = useState(false);\n\n  const[chkDate, setChkDate] = useState(true);\n  const[chkForename, setChkForename] = useState(true);\n  const[chkSurname, setChkSurname] = useState(true);\n  const[chkDOB, setChkDOB] = useState(true);\n  const[chkEmail, setChkEmail] = useState(true);\n  const[chkTel, setChkTel] = useState(true);\n  const[chkCertificate, setChkCertidicate] = useState(true);\n  const[chkAntiBodyTest, setChkAntiBodyTest] = useState(true);\n  const[chkextRef, setChkExtRef] = useState(true);\n  const[chkPrice, setChkPrice] = useState(true);\n\n  const justCorporateChanged = (event) =>\n  {\n    setJustCorporate(event.target.checked);\n  }\n  \n\n  const chkDateChanged = (event) =>\n  {\n    setChkDate(event.target.checked);\n  }\n\n  const chkForenameChanged = (event) =>\n  {\n    setChkForename(event.target.checked);\n  }\n\n  const chkSurnameChanged = (event) =>\n  {\n    setChkSurname(event.target.checked);\n  }\n\n  const chkDOBChanged = (event) =>\n  {\n    setChkDOB(event.target.checked);\n  }\n\n  const chkEmailChanged = (event) =>\n  {\n    setChkEmail(event.target.checked);\n  }\n\n  const chkTelChanged = (event) =>\n  {\n    setChkTel(event.target.checked);\n  }\n\n  const chkCertificateChanged = (event) =>\n  {\n    setChkCertidicate(event.target.checked);\n  }\n\n  const chkAntiBodyTestChanged = (event) =>\n  {\n    setChkAntiBodyTest(event.target.checked);\n  }\n\n  const chkextRefChanged = (event) =>\n  {\n    setChkExtRef(event.target.checked);\n  }\n\n  const chkPriceChanged = (event) =>\n  {\n    setChkPrice(event.target.checked);\n  }\n\n\n\n  var columns = [];\n\n  if (props.date === 'recent')\n  {\n    columns = [\n      // { field: 'id', headerName: '#', width: 70 },\n  \n      {field: '_id', headerName:' ', width: 70, renderCell: (params) =>{\n          return (\n\n           <React.Fragment>\n\n                {params.getValue('tr') ? \n                \n                  <span style={{ position:\"absolute\", fontSize:\"12px\", fontWeight:\"600\", color:\"#7e0082\"}}>\n                    TR\n                  </span> \n                \n                : \n                \n                ''}\n\n                <Button \n                        color=\"primary\"\n                        onClick = {event => openDetailsDialog(event, params.value)}\n                > \n            \n            <SearchIcon/> \n            \n            </Button>\n\n           </React.Fragment>\n\n          \n  \n          ); \n      \n        }\n      },\n\n      { field: 'timeStamp', headerName: 'TimeStamp', width: 200, valueFormatter: (params) => { \n        return formatTimeStamp(params.value);\n        }\n      },\n  \n      { field: 'bookingDate', headerName: 'B Date', width: 110, valueFormatter: (params) => { \n              return FormatDateFromString(params.value);\n          }\n       },\n      { field: 'bookingTimeNormalized', headerName: 'B Time', width: 105 , valueGetter: (params) => {\n        return params.getValue('bookingTime');\n      }},\n      { field: 'status', headerName: 'Status', width: 100, renderCell: (params) =>{\n          if (params.value === 'booked')\n          {\n            return (\n              <span className={classes.BookedLabel}>  BM </span>\n            );\n        \n          }else if (params.value === 'patient_attended')\n          {\n            return (\n              <span  className={classes.PatientAttendedLabel}> PA </span>\n            );\n  \n          }else if (params.value === 'sample_taken')\n          {\n            return (\n              <span  className={classes.SampleTakenLabel}>  ST </span>\n            );\n  \n          }else if (params.value === 'report_sent')\n          {\n            return (\n              <span  className={classes.ReportSentLabel}>  RS </span>\n            );\n  \n          }else if (params.value === 'report_cert_sent')\n          {\n            return (\n              <span  className={classes.ReportCertSentLabel}>  RCS </span>\n            );\n  \n          }else if (params.value === 'positive')\n          {\n            return (\n              <span  className={classes.PositiveLabel}> POS </span>\n            );\n          }\n          \n          else{\n            return 'Unknown';\n          }\n        }\n      },\n      { field: 'bookingRef', headerName: 'Ref No.', width: 120 , renderCell: (params) =>{\n        return (\n          <Tooltip title=\"Go Find By Ref\" placement=\"right\">\n              <Link className={classes.RefLink}\n              //  onClick={\n              //   () => {\n              //     console.log(params.value);\n  \n              //     setState(state => ({...state, currentMenuIndex: getMenuIndex(`pcr` , `findByRef`)}));\n              //     setState(state => ({...state, ref : params.value}));\n              //     setState(state => ({...state, refError : false})); \n              //     setState(state => ({...state, foundRecords : []}));\n              //     setState(state => ({...state, findRecords : !state.findRecords}));\n              //   }\n              // }\n              \n              >\n                {params.value}\n              </Link>\n          </Tooltip>\n  \n        );\n      }},\n      { field: 'forenameCapital', headerName: 'Forename', width: 150 },\n      { field: 'surnameCapital', headerName: 'Surname', width: 150 },\n      { field: 'birthDate', headerName: 'D.O.B', width: 110, valueFormatter: (params) => { \n        return FormatDateFromString(params.value);\n         }\n      },\n      { field: 'email', headerName: 'Email', width: 200 , valueFormatter : (params) => {\n        return params.value.toUpperCase();\n      }},\n      { field: 'phone', headerName: 'Tel', width: 150 },\n      { field: 'passportNumber', headerName: 'Passport No.', width: 250, \n      //  valueGetter: (params) => {\n      //   const pass2 = params.getValue('passportNumber2');\n      //   if (pass2 && pass2.length > 0 && pass2.trim().length > 0)\n      //   {\n      //     return `${params.getValue('passportNumber')?.toUpperCase()} - ${params.getValue('passportNumber2')?.toUpperCase()}`\n      //   }\n      //   else\n      //   {\n      //     return params.getValue('passportNumber')?.toUpperCase();\n      //   }\n      // }\n    },\n      { field: 'certificate', headerName: 'Certificate', width: 120,  renderCell: (params) => {\n          return params.value ? (\n            <CheckIcon className={classes.checkIcon}/>\n          ) :\n          (\n            <CloseIcon className={classes.closeIcon}/> \n          );\n      } },\n      { field: 'antiBodyTest', headerName: 'Antibody Test', width: 120,  renderCell: (params) => {\n        return params.value ? (\n          <CheckIcon className={classes.checkIcon}/>\n        ) :\n        (\n        <  CloseIcon className={classes.closeIcon}/> \n        );\n    } },\n      { field: 'postCode', headerName: 'Post Code', width: 150, valueFormatter : (params) => {\n        return params.value.toUpperCase();\n      } },\n      { field: 'address', headerName: 'Address', width: 500, valueFormatter : (params) => {\n        return params.value.toUpperCase();\n      } },\n      // { field: 'notes', headerName: 'Notes', width: 500 },\n    \n    ];\n\n  }\n  else\n  {\n    columns = [\n      // { field: 'id', headerName: '#', width: 70 },\n  \n      {field: '_id', headerName:' ', width: 70, renderCell: (params) =>{\n          return (\n            <React.Fragment>\n\n                {params.getValue('tr') ? \n                \n                  <span style={{ position:\"absolute\", fontSize:\"12px\", fontWeight:\"600\", color:\"#7e0082\"}}>\n                    TR\n                  </span> \n                \n                : \n                \n                ''}\n\n                <Button \n                        color=\"primary\"\n                        onClick = {event => openDetailsDialog(event, params.value)}\n                > \n            \n            <SearchIcon/> \n            \n            </Button>\n\n           </React.Fragment>\n  \n          ); \n      \n        }\n      },\n\n      { field: 'paid', headerName: 'Paid', align: 'center' , width: 90, renderCell: (params) => { \n               if (!params.value)\n               {\n                  return ( <CloseIcon className={classes.closeIcon}/> );\n               }\n               else\n               {\n                  if (params.getValue('paidBy') === 'credit card')\n                  {\n                    return ( <CreditCardIcon className={classes.checkIcon}/> );\n                  }\n                  else if (params.getValue('paidBy') === 'cash')\n                  {\n                    return ( <LocalAtmIcon className={classes.checkIcon}/> );\n                  }\n                  else if (params.getValue('paidBy') === 'corporate')\n                  {\n                    return ( <BusinessIcon className={classes.checkIcon}/> );\n                  }\n                  else\n                  {\n                    return '';  \n                  }\n               }\n         }\n        },\n  \n      { field: 'bookingDate', headerName: 'B Date', width: 110, valueFormatter: (params) => { \n              return FormatDateFromString(params.value);\n          }\n       },\n      { field: 'bookingTimeNormalized', headerName: 'B Time', width: 105 , valueGetter: (params) => {\n        return params.getValue('bookingTime');\n      }},\n      { field: 'status', headerName: 'Status', width: 100, renderCell: (params) =>{\n          if (params.value === 'booked')\n          {\n            return (\n              <span className={classes.BookedLabel}>  BM </span>\n            );\n        \n          }else if (params.value === 'patient_attended')\n          {\n            return (\n              <span  className={classes.PatientAttendedLabel}> PA </span>\n            );\n  \n          }else if (params.value === 'sample_taken')\n          {\n            return (\n              <span  className={classes.SampleTakenLabel}>  ST </span>\n            );\n  \n          }else if (params.value === 'report_sent')\n          {\n            return (\n              <span  className={classes.ReportSentLabel}>  RS </span>\n            );\n  \n          }else if (params.value === 'report_cert_sent')\n          {\n            return (\n              <span  className={classes.ReportCertSentLabel}>  RCS </span>\n            );\n  \n          }else if (params.value === 'positive')\n          {\n            return (\n              <span  className={classes.PositiveLabel}> POS </span>\n            );\n          }\n          \n          else{\n            return 'Unknown';\n          }\n        }\n      },\n      { field: 'bookingRef', headerName: 'Ref No.', width: 120 , renderCell: (params) =>{\n        return (\n          <Tooltip title=\"Go Find By Ref\" placement=\"right\">\n              <Link className={classes.RefLink} onClick={\n                () => {\n                  // console.log(params.value);\n  \n                  // setState(state => ({...state, currentMenuIndex: getMenuIndex(`findByRef`)}));\n                  // setState(state => ({...state, ref : params.value}));\n                  // setState(state => ({...state, refError : false})); \n                  // setState(state => ({...state, foundRecords : []}));\n                  // setState(state => ({...state, findRecords : !state.findRecords}));\n                }\n              }>\n                {params.value}\n              </Link>\n          </Tooltip>\n  \n        );\n      }},\n      { field: 'forenameCapital', headerName: 'Forename', width: 150 },\n      { field: 'surnameCapital', headerName: 'Surname', width: 150 },\n      { field: 'birthDate', headerName: 'D.O.B', width: 110, valueFormatter: (params) => { \n        return FormatDateFromString(params.value);\n         }\n      },\n      { field: 'email', headerName: 'Email', width: 200 , valueFormatter : (params) => {\n        return params.value.toUpperCase();\n      }},\n      { field: 'phone', headerName: 'Tel', width: 150 },\n      { field: 'passportNumber', headerName: 'Passport No.', width: 250,  \n      // valueGetter: (params) => {\n      //   const pass2 = params.getValue('passportNumber2');\n      //   if (pass2 && pass2.length > 0 && pass2.trim().length > 0)\n      //   {\n      //     return `${params.getValue('passportNumber')?.toUpperCase()} - ${params.getValue('passportNumber2')?.toUpperCase()}`\n      //   }\n      //   else\n      //   {\n      //     return params.getValue('passportNumber')?.toUpperCase();\n      //   }\n      // }\n    },\n      { field: 'certificate', headerName: 'Certificate', width: 120,  renderCell: (params) => {\n          return params.value ? (\n            <CheckIcon className={classes.checkIcon}/>\n          ) :\n          (\n            <CloseIcon className={classes.closeIcon}/> \n          );\n      } },\n      { field: 'antiBodyTest', headerName: 'Antibody Test', width: 120,  renderCell: (params) => {\n        return params.value ? (\n          <CheckIcon className={classes.checkIcon}/>\n        ) :\n        (\n        <  CloseIcon className={classes.closeIcon}/> \n        );\n    } },\n      { field: 'postCode', headerName: 'Post Code', width: 150, valueFormatter : (params) => {\n        return params.value.toUpperCase();\n      } },\n      { field: 'address', headerName: 'Address', width: 500, valueFormatter : (params) => {\n        return params.value.toUpperCase();\n      } },\n      // { field: 'notes', headerName: 'Notes', width: 500 },\n    \n    ];\n  \n\n  }\n\n\n\n  const [state, setState] = React.useContext(GlobalState);  \n\n  const [data, setData] = React.useState({bookings: [] , cachedBookings: [], isFetching : true});\n\n  const [selectedRow, setSelectedRow] = React.useState(null);\n\n  const [selectedBooking, setSelectedBooking] = React.useState(null);\n  const [seeDetailsDialogOpen, setSeeDetailsDialogOpen] = React.useState(false);\n\n  const dateFormatter = str => {\n    return str;\n  };\n\n  const [corporate, setCorporate] = useState(corporates[0]);\n  const corporateChanged = (event) =>\n  {\n    setCorporate(event.target.value);\n  }\n  \n\n  const [filter,setFilter] = React.useState('');\n\n\n  const lastPromise = useRef();\n\n  const formatTimeStamp = (timeStamp) =>\n  {\n    const todayStr = dateformat(new Date(), 'yyyy-mm-dd');\n    const timeStampStr = dateformat(timeStamp, 'yyyy-mm-dd');\n    if (todayStr === timeStampStr)\n    {\n      return dateformat(timeStamp, \"'Today', h:MM:ss TT\");\n    }\n    else\n    {\n       return dateformat(timeStamp, \"mmm dS, h:MM:ss TT\");\n    }\n  }\n\n  const loadData = (top) =>\n  {\n    var api = BookService.getAllBookings;\n    if (props.date === 'today')\n    {\n      api = BookService.getTodayBookings;\n    }else if (props.date === 'old')\n    {\n      api = BookService.getOldBookings;\n    }else if (props.date === 'future')\n    {\n      api = BookService.getFutureBookings;\n    }else if (props.date === 'recent')\n    {\n      api = BookService.getRecentBookingsAll;\n    }else if (props.date === 'live')\n    {\n      api = BookService.getLiveBookings;\n    }else if (props.date === 'completed')\n    {\n      api = BookService.getCompletedBookings;\n    }\n    else if (props.date === 'positive')\n    {\n      api = BookService.getPositiveBookings;\n    }\n    else if (props.date === 'deleted')\n    {\n      api = BookService.getDeletedBookings;\n    }\n    else if (props.date === 'late')\n    {\n      api = BookService.getLateBookings;\n    }\n    else if (props.date === 'tr')\n    {\n      api = BookService.getAllTRBookings;\n    }\n               \n    setData({bookings: [], cachedBookings: [], isFetching: true});\n   \n    // console.log(props)\n\n    const currentPromise = api(top).then( (res) =>{\n      // console.log(res)\n      for (var i=0; i < res.data.length; i++)\n      {\n        res.data[i] = {...res.data[i], id : i + 1}\n      }  \n      setData({bookings: [...res.data], cachedBookings: [...res.data], isFetching: false});\n      // return res.data;\n    }).catch(err => {\n      console.error(err)\n    })\n\n    // lastPromise.current = currentPromise;\n\n    // currentPromise.then(\n    //   result => {\n    //     if (currentPromise === lastPromise.current) {\n    //       setData({bookings: [...result], cachedBookings: [...result], isFetching: false});\n    //       setPage(1);\n    //     }\n    //   },\n    //   e => {\n    //     if (currentPromise === lastPromise.current) {\n    //         console.error(e);\n    //         setData({bookings: data.bookings, cachedBookings: data.cachedBookings, isFetching: false});\n    //     }\n    //   });\n\n  }\n\n  useEffect( () => {\n            setTopCount(25)\n            loadData(25)\n        },\n        [props.date]);\n\n\n\n\n  useEffect( () => {\n\n        if (filter && filter.trim().length > 0)\n        {\n          var filteredData = data.cachedBookings.filter( (element) => \n\n             (element.forename.toLowerCase().indexOf(filter.toLowerCase()) >= 0) ||\n                   (element.surname.toLowerCase().indexOf(filter.toLowerCase()) >= 0) \n                  || (`${element.forename} ${element.surname}`.toLowerCase().indexOf(filter.toLowerCase()) >= 0)\n          );\n  \n  \n          setData({bookings: [...filteredData], cachedBookings: data.cachedBookings, isFetching: false});\n        }else\n        {\n          setData({bookings: [...data.cachedBookings], cachedBookings: data.cachedBookings, isFetching: false});\n        }\n      },\n      [filter]);\n\n  \n      useEffect(() => {\n\n       loadData(topCount)\n    \n      }, [state.bookingDialogDataChanged]);    \n\n\n  const handleCloseSeeDetaisDialog = () =>\n  {\n    setSelectedBooking(null);\n    setSeeDetailsDialogOpen(false);\n  }    \n  \n  const openDetailsDialog = (event, id) =>\n  {\n    const booking = data.bookings.find(element => element._id === id);\n    setSelectedBooking(booking);\n    setSeeDetailsDialogOpen(true);\n\n  }\n\n  const refreshClicked = (event) =>{\n    setFilter('');\n    loadData(topCount)\n  }\n\n  const filterChanged = (event) =>{\n    setFilter(event.target.value);\n  }\n\n  const handleSelectionChanged = (newSelection) =>\n  {\n    if (newSelection.length > 0){\n      setSelectedRow(newSelection.rows[0]);\n    }\n    \n  }\n\n  const [page, setPage] = React.useState(1);\n\n  const handleExcelButtonClicked = (event) =>\n  {\n    setOpenDialogExcel(true);\n  }\n\n  const isTopSelectHidden = (date)=>\n  {\n    return date === 'live' || date === 'positive' || date === 'late' || date === 'today'\n  }\n\n\n  return (\n    <React.Fragment>\n      {data.isFetching && (\n        <div style={{ width: \"100%\", paddingTop: \"3px\" }}>\n          <LinearProgress color=\"primary\" />\n        </div>\n      )}\n      <Grid\n        container\n        direction=\"row\"\n        justify=\"space-between\"\n        alignItems=\"flex-end\"\n      >\n        <Grid item md={4}>\n          <div style={{ textAlign: \"left\", paddingLeft: \"10px\" }}>\n            <Grid\n              container\n              direction=\"row\"\n              justify=\"flex-start\"\n              alignItems=\"center\"\n            >\n              <Grid item>\n                <span style={{ paddingRight: \"15px\", color: \"#555\" }}>\n                  {\" \"}\n                  {getTableIcon(props.date)}{\" \"}\n                </span>\n              </Grid>\n              <Grid item>\n                <span\n                  style={{\n                    fontSize: \"1.4rem\",\n                    fontWeight: \"600\",\n                    color: \"#444\",\n                  }}\n                >\n                  {\" \"}\n                  {getTableTitle(props.date)}{\" \"}\n                </span>\n              </Grid>\n              <Grid item>\n                <Tooltip title=\"Refresh\" placement=\"right\">\n                  <IconButton\n                    color=\"primary\"\n                    className={classes.refreshButton}\n                    onClick={refreshClicked}\n                  >\n                    <RefreshIcon />\n                  </IconButton>\n                </Tooltip>\n              </Grid>\n            </Grid>\n          </div>\n        </Grid>\n\n        <Grid item md={3}>\n          {props.date === \"completed\" && state.userId.username === 'admin' && (\n            <div style={{ paddingBottom: \"5px\" }}>\n              <Button\n                className={classes.ExportToExcelButton}\n                variant=\"outlined\"\n                color=\"default\"\n                onClick={handleExcelButtonClicked}\n                startIcon={\n                  <FontAwesomeIcon\n                    style={{ color: \"#009900\" }}\n                    icon={faFileExcel}\n                  />\n                }\n              >\n                export to excel\n              </Button>\n            </div>\n          )}\n        </Grid>\n\n        {data.isFetching && <div className={classes.HideNowRows}></div>}\n\n        <Grid item md={3}>\n          <TextField\n            variant=\"standard\"\n            value={filter}\n            onChange={filterChanged}\n            margin=\"normal\"\n            size=\"small\"\n            id=\"filter\"\n            label=\"Filter\"\n            name=\"filter\"\n            autoComplete=\"off\"\n          />\n        </Grid>\n\n        <Grid item hidden={isTopSelectHidden(props.date)}>\n          <FormControl className={classes.topSelect}>\n            <InputLabel id=\"top-select-label\">Limit</InputLabel>\n            <Select\n              labelId=\"top-select-label\"\n              id=\"top-simple-select\"\n              value={topCount}\n              onChange={topCountChanged}\n            >\n              <MenuItem value={25}>25</MenuItem>\n              <MenuItem value={50}>50</MenuItem>\n              <MenuItem value={100}>100</MenuItem>\n              <MenuItem value={500}>500</MenuItem>\n              <MenuItem value={1000}>1000</MenuItem>\n              <MenuItem value={10000}>ALL</MenuItem>\n            </Select>\n          </FormControl>\n\n          {/* <Button onClick={() => loadData(true)}> Show all records </Button> */}\n        </Grid>\n      </Grid>\n\n      <div style={{ height: 700, width: \"100%\" }}>\n        <DataGrid\n          rows={data.bookings}\n          columns={columns}\n          autoPageSize\n          page={page}\n          onPageChange={(params) => {\n            setPage(params.page);\n          }}\n          onSelectionChange={handleSelectionChanged}\n        />\n      </div>\n\n      <BookingDialog\n        booking={selectedBooking}\n        open={seeDetailsDialogOpen}\n        onClose={handleCloseSeeDetaisDialog}\n      />\n\n      {data.bookings && data.bookings.length > 0 && (\n        <Dialog\n          maxWidth=\"lg\"\n          open={openDialogExcel}\n          onClose={handleCloseDialogExcel}\n          PaperComponent={PaperComponent}\n          aria-labelledby=\"form-dialog-title\"\n        >\n          <DialogTitle id=\"draggable-dialog-title\">\n            <Grid\n              container\n              spacing={2}\n              direction=\"row\"\n              justify=\"center\"\n              alignItems=\"center\"\n            >\n              <Grid item>\n                <FontAwesomeIcon\n                  style={{ color: \"#2f942e\", fontSize: \"2rem\" }}\n                  icon={faFileExcel}\n                />\n              </Grid>\n\n              <Grid item>\n                <div\n                  style={{\n                    color: \"#2f942e\",\n                    paddingBottom: \"5px\",\n                    fontWeight: \"800\",\n                  }}\n                >\n                  {\" \"}\n                  Export to EXCEL{\" \"}\n                </div>\n              </Grid>\n            </Grid>\n\n            <Divider />\n          </DialogTitle>\n          <DialogContent>\n            <div\n              style={{\n                minHeight: \"600px\",\n                maxHeight: \"600px\",\n                minWidth: \"1200px\",\n                maxWidth: \"1200px\",\n              }}\n            >\n              <div>\n                <Grid row container justify=\"center\" spacing={3}>\n                  <Grid item>\n                    <FormControlLabel\n                      control={\n                        <Switch\n                          checked={justCorporate}\n                          onChange={justCorporateChanged}\n                          name=\"justCorporate\"\n                        />\n                      }\n                      label=\"Just Corporate Records\"\n                    />\n                  </Grid>\n\n                  {justCorporate && (\n                    <Grid item>\n                      <FormControl\n                        style={{ marginTop: \"0px\" }}\n                        className={classes.formControl}\n                      >\n                        <Select\n                          labelId=\"select-corporate\"\n                          id=\"select-corporate-id\"\n                          value={corporate}\n                          onChange={corporateChanged}\n                        >\n                          {corporates.map((element) => (\n                            <MenuItem value={element}>{`${element}`}</MenuItem>\n                          ))}\n                        </Select>\n                      </FormControl>\n                    </Grid>\n                  )}\n                </Grid>\n\n                <MuiPickersUtilsProvider utils={DateFnsUtils}>\n                  <Grid row container justify=\"center\" spacing={3}>\n                    <Grid item>\n                    <KeyboardDatePicker\n                        autoOk={true}\n                        disableToolbar\n                        variant=\"inline\"\n                        format=\"dd/MM/yyyy\"\n                        margin=\"normal\"\n                        id=\"date-picker-until\"\n                        label=\"Until\"\n                        value={fromDate}\n                        onChange={handleFromDateChange}\n                        KeyboardButtonProps={{\n                          \"aria-label\": \"change date\",\n                        }}\n                      />\n                    </Grid>\n\n                    <Grid item>\n                      <KeyboardDatePicker\n                        autoOk={true}\n                        disableToolbar\n                        variant=\"inline\"\n                        format=\"dd/MM/yyyy\"\n                        margin=\"normal\"\n                        id=\"date-picker-until\"\n                        label=\"Until\"\n                        value={untilDate}\n                        onChange={handleUntilDateChange}\n                        KeyboardButtonProps={{\n                          \"aria-label\": \"change date\",\n                        }}\n                      />\n                    </Grid>\n\n                    <Grid item>\n                      <div style={{ paddingTop: \"30px\", marginLeft: \"20px\" }}>\n                        <ReactHTMLTableToExcel\n                          id=\"test-table-xls-button\"\n                          className={classes.ExportToExcelButtonInline}\n                          table=\"table-to-xls\"\n                          filename={`PCR.Report.${fromDateStr}.${untilDateStr}`}\n                          sheet=\"PCR-Report\"\n                          buttonText=\"Download as XLS\"\n                        />\n                      </div>\n                    </Grid>\n                  </Grid>\n                </MuiPickersUtilsProvider>\n              </div>\n\n              <div>\n                <Grid container spacing={3}>\n                  <Grid item xs>\n                    <FormControlLabel\n                      control={\n                        <Checkbox\n                          checked={chkDate}\n                          onChange={chkDateChanged}\n                          name=\"chkDate\"\n                        />\n                      }\n                      label=\"Date\"\n                    />\n                  </Grid>\n                  <Grid item xs>\n                    <FormControlLabel\n                      control={\n                        <Checkbox\n                          checked={chkForename}\n                          onChange={chkForenameChanged}\n                          name=\"chkForename\"\n                        />\n                      }\n                      label=\"Forename\"\n                    />\n                  </Grid>\n                  <Grid item xs>\n                    <FormControlLabel\n                      control={\n                        <Checkbox\n                          checked={chkSurname}\n                          onChange={chkSurnameChanged}\n                          name=\"chkSurname\"\n                        />\n                      }\n                      label=\"Surname\"\n                    />\n                  </Grid>\n                  <Grid item xs>\n                    <FormControlLabel\n                      control={\n                        <Checkbox\n                          checked={chkDOB}\n                          onChange={chkDOBChanged}\n                          name=\"chkDOB\"\n                        />\n                      }\n                      label=\"D.O.B\"\n                    />\n                  </Grid>\n                  <Grid item xs>\n                    <FormControlLabel\n                      control={\n                        <Checkbox\n                          checked={chkEmail}\n                          onChange={chkEmailChanged}\n                          name=\"chkEmail\"\n                        />\n                      }\n                      label=\"Email\"\n                    />\n                  </Grid>\n                  <Grid item xs>\n                    <FormControlLabel\n                      control={\n                        <Checkbox\n                          checked={chkTel}\n                          onChange={chkTelChanged}\n                          name=\"chkTel\"\n                        />\n                      }\n                      label=\"Tel\"\n                    />\n                  </Grid>\n                  <Grid item xs>\n                    <FormControlLabel\n                      control={\n                        <Checkbox\n                          checked={chkCertificate}\n                          onChange={chkCertificateChanged}\n                          name=\"chkCertificate\"\n                        />\n                      }\n                      label=\"Certificate\"\n                    />\n                  </Grid>\n                  <Grid item xs>\n                    <FormControlLabel\n                      control={\n                        <Checkbox\n                          checked={chkAntiBodyTest}\n                          onChange={chkAntiBodyTestChanged}\n                          name=\"chkAntiBodyTest\"\n                        />\n                      }\n                      label=\"AntiBodyTest\"\n                    />\n                  </Grid>\n                  <Grid item xs>\n                    <FormControlLabel\n                      control={\n                        <Checkbox\n                          checked={chkextRef}\n                          onChange={chkextRefChanged}\n                          name=\"chkextRef\"\n                        />\n                      }\n                      label=\"Lab No.\"\n                    />\n                  </Grid>\n                  <Grid item xs>\n                    <FormControlLabel\n                      control={\n                        <Checkbox\n                          checked={chkPrice}\n                          onChange={chkPriceChanged}\n                          name=\"chkPrice\"\n                        />\n                      }\n                      label=\"Price\"\n                    />\n                  </Grid>\n                </Grid>\n              </div>\n\n              <div style={{ width: \"100%\", paddingTop: \"20px\" }}>\n                <table className={classes.table} id=\"table-to-xls\">\n                  <tr>\n                    {chkDate && <th className={classes.th}>Date</th>}\n                    {chkForename && <th className={classes.th}>Forename</th>}\n                    {chkSurname && <th className={classes.th}>Surename</th>}\n                    {chkDOB && <th className={classes.th}>D.O.B</th>}\n                    {chkEmail && <th className={classes.th}>Email</th>}\n                    {chkTel && <th className={classes.th}>Tel</th>}\n                    {chkCertificate && (\n                      <th className={classes.th}>Certificate</th>\n                    )}\n                    {chkAntiBodyTest && (\n                      <th className={classes.th}>AntiBodyTest</th>\n                    )}\n                    {chkextRef && <th className={classes.th}>Lab No.</th>}\n                    {chkPrice && <th className={classes.th}>Price (£) </th>}\n                  </tr>\n\n                  {data.bookings\n                    .filter((booking) => {\n                      if (!justCorporate) {\n                        return (\n                          booking.bookingDate >= fromDateStr &&\n                          booking.bookingDate <= untilDateStr\n                        );\n                      } else {\n                        return (\n                          booking.bookingDate >= fromDateStr &&\n                          booking.bookingDate <= untilDateStr &&\n                          booking.paid &&\n                          booking.paidBy === \"corporate\" &&\n                          booking.corporate === corporate\n                        );\n                      }\n                    })\n\n                    .map((booking) => (\n                      <tr>\n                        {chkDate && (\n                          <td className={classes.td}>\n                            {FormatDateFromString(booking.bookingDate)}\n                          </td>\n                        )}\n                        {chkForename && (\n                          <td className={classes.td}>\n                            {booking.forenameCapital}\n                          </td>\n                        )}\n                        {chkSurname && (\n                          <td className={classes.td}>\n                            {booking.surnameCapital}\n                          </td>\n                        )}\n                        {chkDOB && (\n                          <th className={classes.th}>\n                            {FormatDateFromString(booking.birthDate)}\n                          </th>\n                        )}\n                        {chkEmail && (\n                          <td className={classes.td}>{booking.email}</td>\n                        )}\n                        {chkTel && (\n                          <td className={classes.td}>{booking.phone}</td>\n                        )}\n                        {chkCertificate && (\n                          <td className={classes.td}>\n                            {booking.certificate ? \"YES\" : \"NO\"}\n                          </td>\n                        )}\n                        {chkAntiBodyTest && (\n                          <td className={classes.td}>\n                            {booking.antiBodyTest ? \"YES\" : \"NO\"}\n                          </td>\n                        )}\n                        {chkextRef && (\n                          <td className={classes.td}>{booking.extRef}</td>\n                        )}\n                        {chkPrice && (\n                          <td className={classes.td}>\n                            {PriceCalculator.calculatePrice(booking)}\n                          </td>\n                        )}\n                      </tr>\n                    ))}\n                </table>\n              </div>\n            </div>\n          </DialogContent>\n        </Dialog>\n      )}\n    </React.Fragment>\n  );\n} ","import React, { useEffect } from 'react';\nimport { useTheme } from '@material-ui/core/styles';\nimport { LineChart, Line, XAxis, YAxis, Label, ResponsiveContainer } from 'recharts';\nimport Title from './Title';\nimport dateformat from 'dateformat';\nimport BookService from './services/BookService';\nimport { LinearProgress } from '@material-ui/core';\n\n// Generate Sales Data\nfunction createData(time, amount) {\n  return { time, amount };\n}\n\n\nconst emptyData = [\n  createData('09:00', 0),\n  createData('10:00', 0),\n  createData('11:00', 0),\n  createData('12:00', 0),\n  createData('13:00', 0),\n  createData('14:00', 0),\n  createData('15:00', 0),\n  createData('16:00', 0),\n  createData('17:00', 0),\n  createData('18:00', undefined),\n\n];\n\nconst getCount = (data, str) =>\n{\n  if (!data)\n    return 0;\n\n  var count = 0;\n  for (var i=0; i < data.length; i++)\n  {\n    if (data[i]._id.substr(0,2) === str)\n    {\n      count += data[i].count;\n    }\n  }\n  return count;\n}\n\nexport default function Chart() {\n  const theme = useTheme();\n\n  const [data, setData] = React.useState(emptyData);\n  const [loading, setLoading] = React.useState(false)\n\n  useEffect(() =>\n  {\n    const fetchData = async () =>\n    {\n      const todayStr = dateformat(new Date(), 'yyyy-mm-dd');\n      var result = [];\n      try\n      {\n          setLoading(true)\n          const res = await BookService.getBookingsStatsByDateStr(todayStr);\n          setLoading(false)\n          const data = res.data.result;\n          result.push(createData('09:00', getCount(data,'09')));\n          result.push(createData('10:00', getCount(data,'10')));\n          result.push(createData('11:00', getCount(data,'11')));\n          result.push(createData('12:00', getCount(data,'12')));\n          result.push(createData('13:00', getCount(data,'13')));\n          result.push(createData('14:00', getCount(data,'14')));\n          result.push(createData('15:00', getCount(data,'15')));\n          result.push(createData('16:00', getCount(data,'16')));\n          result.push(createData('17:00', getCount(data,'17')));\n          result.push(createData('18:00', undefined));\n \n           setData(result);\n      }\n      catch(err){\n        setLoading(false)\n        console.error(err);\n      }\n\n    }\n  \n   fetchData();\n\n  }, [] );\n\n  return (\n    <React.Fragment>\n       {loading && (\n        <div style={{ width: \"100%\", paddingTop: \"3px\" }}>\n          <LinearProgress color=\"primary\" />\n        </div>\n      )}\n      <Title>Today</Title>\n      <ResponsiveContainer>\n        <LineChart\n          data={data}\n          margin={{\n            top: 16,\n            right: 16,\n            bottom: 0,\n            left: 24,\n          }}\n        >\n          <XAxis dataKey=\"time\" stroke={theme.palette.text.secondary} />\n          <YAxis stroke={theme.palette.text.secondary}>\n            <Label\n              angle={270}\n              position=\"left\"\n              style={{ textAnchor: 'middle', fill: theme.palette.text.primary }}\n            >\n              Online Bookings\n            </Label>\n          </YAxis>\n          <Line type=\"monotone\" dataKey=\"amount\" stroke={theme.palette.primary.main} dot={false} />\n        </LineChart>\n      </ResponsiveContainer>\n    </React.Fragment>\n  );\n}","import React, { useEffect } from 'react';\nimport Link from '@material-ui/core/Link';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Typography from '@material-ui/core/Typography';\nimport Title from './Title';\nimport { Grid, LinearProgress, Tooltip } from '@material-ui/core';\nimport * as dateformat from 'dateformat';\nimport BookService from './services/BookService';\nimport BookingDialog from './BookingDialog';\n\n\nconst useStyles = makeStyles({\n  depositContext: {\n    flex: 1,\n  },\n\n  bookingBox: {\n    display: \"flex\",\n    margin: \"5px\",\n    padding: \"5px\",\n    maxWidth : \"90px\",\n    minHeight: \"30px\",\n    border : \"1px solid #eee\",\n    fontSize: \"12px\",\n    fontWeight : \"500\",\n    cursor: \"pointer\",\n    backgroundColor: \"#ebedf7\",\n    color: \"#3f51b5\",\n    boxShadow: \"2px 4px #fafafa\",\n    borderRadius : \"5px\",\n    textAlign: \"center\",\n    alignItems: \"center\",\n    justifyItems: \"center\",\n    align: \"center\",\n\n    \"&:hover\": {\n        background: \"#3f51b5\",\n        color: \"#ebedf7\"\n      },\n}\n\n\n});\n\nconst isWeekend = (date) =>\n{\n    return (date.getDay() === 0 || date.getDay() === 6) /// Weekend\n}\n\nconst getCurrentTimeSlot = (now) =>\n{\n    var min = now.getMinutes();\n    var hour = now.getHours();\n    var pm = (hour >= 12);\n    if (hour > 12)\n    {\n      hour = hour - 12;\n    }\n\n    if (min >= 0 && min < 15)\n    {\n      min = 0;\n    }else if (min >= 15 && min < 30)\n    {\n      min = 15;\n    }else if (min >= 30 && min < 45)\n    {\n      min = 30;\n    }else if (min >= 45)\n    {\n      min = 45;\n    }\n\n    const minStr = min < 10 ? `0${min}` : `${min}`;\n    const hourStr = hour < 10 ? `0${hour}` : `${hour}`;\n    const pmStr = pm ? 'PM' : 'AM';\n\n    const timeStr = `${hourStr}:${minStr} ${pmStr}`;\n\n    if (isWeekend(now))\n    {\n      if (now.getHours() < 10 || now.getHours() >= 14)\n      {\n        return null;\n      }\n      else\n      {\n        return timeStr;\n      }\n    }\n    else\n    {\n      if (now.getHours() < 9 || now.getHours() >= 18)\n      {\n        return null;\n      }\n      else\n      {\n        return timeStr;\n      }\n\n    }\n}\n\nconst getCurrentTimeSlotLabel = (timeStr) =>\n{\n  if (!timeStr)\n  {\n    return 'Closed';\n  }\n\n  var hour = parseInt(timeStr.substr(0,2));\n  var minute = parseInt(timeStr.substr(3,2)); \n  var pm = timeStr.indexOf('PM') > 0;\n  if (minute !== 45)\n  {\n    minute += 15;\n  }\n  else{\n    minute = 0;\n    hour += 1;\n    if (hour >= 12)\n    {\n      pm = true;\n    }\n    if (hour > 12)\n    {\n      hour = hour - 12;\n    }\n  }\n\n  const minStr = minute < 10 ? `0${minute}` : `${minute}`;\n  const hourStr = hour < 10 ? `0${hour}` : `${hour}`;\n  const pmStr = pm ? 'PM' : 'AM';\n\n  const endTimeStr = `${hourStr}:${minStr} ${pmStr}`;\n\n  return `${timeStr} - ${endTimeStr}`;\n\n}\n\nexport default function CurrentVisits() {\n  const classes = useStyles();\n\n  const[current, setCurrent] = React.useState(new Date());\n  const [bookings, setBookings] = React.useState([]);\n\n  const [selectedBooking, setSelectedBooking] = React.useState(null);\n  const [openDialog, setOpenDialog] = React.useState(false);\n\n  const [loading, setLoading] = React.useState(false)\n\n  useEffect(() => \n  {\n    const interval = setInterval(() => {  \n      setCurrent(new Date());\n    }, 30000);\n\n    return () =>\n    {\n      clearInterval(interval);\n    }\n\n  }, []);\n\n  useEffect(() => \n  {\n    const currentTimeSlot = getCurrentTimeSlot(current);\n    if (!currentTimeSlot)\n      return;\n    const todayStr = dateformat(current, 'yyyy-mm-dd');\n    setLoading(true)\n    BookService.getBookingsByDateStrandTime(todayStr,currentTimeSlot).then(res =>\n      {\n        setLoading(false)\n        if (res.data.status === 'OK')\n        {\n            setBookings([...res.data.bookings]);\n        }   \n\n      }).catch(err =>\n        {\n          setLoading(false)\n          console.log(err);\n        });\n\n  }, [current]);\n\n  const getBookingsBox = (_bookings) =>\n  {\n      if (_bookings && _bookings.length > 0)\n      {\n         return (\n\n          <div className={classes.root}>\n            <Grid container justify=\"flex-start\" alignItems=\"flex-start\" spacing={0}>\n\n                  { _bookings.map(booking => (\n\n                    <Grid item>\n\n                        <div className={classes.bookingBox} onClick={event => bookingCliked(event,booking)}>\n\n                            <span style={{textAlign:\"center\"}}> {`${booking.surnameCapital}`.substring(0,10)} </span>\n\n                        </div>\n\n                  </Grid>\n\n                  ))}\n\n              \n            </Grid>\n\n          </div>\n         )\n             \n        }                   \n  }\n\n  const bookingCliked = (event, booking) =>\n  {\n      setSelectedBooking(booking);\n      setOpenDialog(true);\n  }\n\n  const handleCloseDialog = () =>\n  {\n      setOpenDialog(false);\n  }\n\n  return (\n    <React.Fragment>\n\n       {loading && (\n        <div style={{ width: \"100%\", paddingTop: \"3px\" }}>\n          <LinearProgress color=\"primary\" />\n        </div>\n      )}\n\n      <Title>Current Visits</Title>\n      <Typography component=\"p\" variant=\"h6\">\n        {getCurrentTimeSlotLabel(getCurrentTimeSlot(current))}\n      </Typography>\n      <Typography color=\"textSecondary\" className={classes.depositContext}>\n        on {dateformat(current, 'dd mmmm, yyyy') } \n      </Typography>\n     \n        {getBookingsBox(bookings)}\n      \n\n      <BookingDialog\n                booking={selectedBooking}\n                open={openDialog}\n                onClose={handleCloseDialog}\n      />\n\n    </React.Fragment>\n  );\n}","import React, { useEffect } from 'react';\nimport Link from '@material-ui/core/Link';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Table from '@material-ui/core/Table';\nimport TableBody from '@material-ui/core/TableBody';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableHead from '@material-ui/core/TableHead';\nimport TableRow from '@material-ui/core/TableRow';\nimport Title from './Title';\nimport BookService from './services/BookService';\nimport * as dateformat from 'dateformat';\nimport GlobalState from './../GlobalState';\nimport { getMenuIndex } from './../MenuList';\nimport {FormatDateFromString, FormatDateFromStringShortYear} from './DateFormatter';\nimport { LinearProgress } from '@material-ui/core';\n\n\nconst useStyles = makeStyles((theme) => ({\n  seeMore: {\n    marginTop: theme.spacing(3),\n  },\n}));\n\nexport default function BookingView() {\n  const classes = useStyles();\n  const [state, setState] = React.useContext(GlobalState);  \n\n  const [data, setData] = React.useState({bookings: [] , isFetching : false});\n\n  const [refresh, setRefresh] = React.useState(false);\n\n  const [loading, setLoading] = React.useState(false)\n\n  const seeMoreRecords = (event) => {\n    event.preventDefault();\n    setState(state=>({...state, currentMenuIndex:getMenuIndex('pcr',`recentBookings`)}));\n  }\n\n  const loadData = () => \n  {\n    setData({bookings: data.bookings, isFetching: true});\n    setLoading(true)\n    BookService.getRecentBookings().then( (res) =>{\n      setLoading(false)\n        setData({bookings: res.data, isFetching: false});\n\n    }).catch( (err) => {\n      setLoading(false)\n        console.log(err);\n        setData({bookings: data.bookings, isFetching: false});\n    });\n  }\n\n\n  useEffect( () => {\n          loadData();\n        },\n        [refresh]);   \n\n\n   useEffect( () => {\n     loadData();\n     setInterval(() => {\n       setRefresh(refresh => !refresh);\n     }, 30000);\n   }, []) ;    \n\n   const formatTimeStamp = (timeStamp) =>\n   {\n     const todayStr = dateformat(new Date(), 'yyyy-mm-dd');\n     const timeStampStr = dateformat(timeStamp, 'yyyy-mm-dd');\n     if (todayStr === timeStampStr)\n     {\n       return dateformat(timeStamp, \"'Today', h:MM:ss TT\");\n     }\n     else\n     {\n        return dateformat(timeStamp, \"mmm dS, h:MM:ss TT\");\n     }\n   }\n\n  return (\n    <React.Fragment>\n       {loading && (\n        <div style={{ width: \"100%\", paddingTop: \"3px\" }}>\n          <LinearProgress color=\"primary\" />\n        </div>\n      )}\n      <Title>Recent Bookings</Title>\n      <Table size=\"small\">\n        <TableHead>\n          <TableRow>\n            <TableCell>TimeStamp</TableCell>        \n            <TableCell>Name</TableCell>\n            <TableCell>Surname</TableCell>\n            <TableCell>Email</TableCell>\n            <TableCell>D.O.B</TableCell>\n            <TableCell>Booked Date</TableCell>\n            <TableCell>Booked Time</TableCell> \n          </TableRow>\n        </TableHead>\n        <TableBody>\n          {data.bookings.map((row) => (\n            <TableRow key={row._id}>\n              <TableCell>{formatTimeStamp(row.timeStamp)}</TableCell>\n              <TableCell>{row.forename}</TableCell>\n              <TableCell>{row.surname}</TableCell>\n              <TableCell>{row.email}</TableCell>\n              <TableCell>{FormatDateFromString(row.birthDate)}</TableCell>\n              <TableCell>{FormatDateFromString(row.bookingDate)}</TableCell>\n              <TableCell>{row.bookingTime}</TableCell>\n            </TableRow>\n          ))}\n        </TableBody>\n      </Table>\n      <div className={classes.seeMore}>\n        <Link color=\"primary\" href=\"#\" onClick={seeMoreRecords}>\n          See more records\n        </Link>\n      </div>\n    </React.Fragment>\n  );\n}","import React, { useEffect } from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Typography from '@material-ui/core/Typography';\nimport Title from './Title';\nimport { Dialog, DialogContent, DialogTitle, Grid, LinearProgress, Link, Table, TableBody, TableCell, TableHead, TableRow, Tooltip } from '@material-ui/core';\nimport BookService from './services/BookService';\n\nimport {\n    PieChart, Pie, Sector, Cell,\n  } from 'recharts';\n\n  const COLORS = ['#00b33e', '#0070e0', '#bb00c4'];\n\n  const RADIAN = Math.PI / 180;\n\n  const renderCustomizedLabel = ({\n    cx, cy, midAngle, innerRadius, outerRadius, value, index,\n  }) => {\n     const radius = innerRadius + (outerRadius - innerRadius) * 0.5;\n    const x = cx + radius * Math.cos(-midAngle * RADIAN);\n    const y = cy + radius * Math.sin(-midAngle * RADIAN);\n  \n    return (\n      <text x={x} y={y} fontSize=\"14px\" fontWeight=\"500\" fill=\"white\" textAnchor={x > cx ? 'start' : 'end'} dominantBaseline=\"central\">\n                {`${value} `}\n      </text>\n    );\n  };\n\n\nconst useStyles = makeStyles({\n  depositContext: {\n    flex: 1,\n  },\n\n  ReportLabels: {\n      position: \"absolute\",\n      top : \"80px\",\n      left: \"0px\"\n  },\n\n  AverageLabel: {\n    position: \"absolute\",\n    top : \"190px\",\n    right: \"30px\",\n    fontSize : \"12px\",\n    color : \"#0070e0\",\n    fontWeight: \"600\",\n  },\n\n  less12Label: {\n      fontSize : \"12px\",\n      color : \"#00b33e\",\n      fontWeight: \"600\",\n      paddingLeft : \"5px\",\n      borderLeft: \"5px solid #00b33e\",\n      marginBottom : \"10px\",\n  },\n\n  less24Label: {\n    fontSize : \"12px\",\n    color : \"#0070e0\",\n    fontWeight: \"600\",\n    paddingLeft : \"5px\",\n    borderLeft: \"5px solid #0070e0\",\n    marginBottom : \"10px\",\n    },\n\nless36Label: {\n    fontSize : \"12px\",\n    color : \"#bb00c4\",\n    fontWeight: \"600\",\n    paddingLeft : \"5px\",\n    borderLeft: \"5px solid #bb00c4\",\n    marginBottom : \"10px\",\n    },\n\n    seeMore :{\n        position: \"absolute\",\n        top : \"191px\",\n        left : \"2px\"\n    }\n\n});\n\n\nexport default function ResultsTimeReport() {\n  const classes = useStyles();\n\n  const[current, setCurrent] = React.useState(new Date());\n  const [report, setReport] = React.useState({});\n  const [open, setOpen] = React.useState(false);\n\n  const [data, setData] = React.useState(null);\n\n  const [loading, setLoading] = React.useState(false)\n\n  const handleClose = () =>\n  {\n      setOpen(false);\n  }\n\n  useEffect(() => \n  {\n    const interval = setInterval(() => {  \n      setCurrent(new Date());\n    }, 30000);\n\n    return () =>\n    {\n      clearInterval(interval);\n    }\n\n  }, []);\n\n  useEffect( () => \n  {\n    \n    setLoading(true)\n    BookService.getTestsTimeReport().then(res =>\n      {\n        const result = [];  \n        setLoading(false)\n        if (res.data.status === 'OK')\n        {\n            setReport(res.data.result);\n            // console.log(res.data.result);\n            result.push({name: 'lessThan12', value : res.data.result.lessThan12 });\n            result.push({name: 'lessThan24', value : res.data.result.lessThan24 });\n            result.push({name: 'lessThan36', value : res.data.result.lessThan36 });\n         \n           // result.push({name: 'lessThan48', value : res.data.result.lessThan48 });\n            setData(result);\n        }   \n\n      }).catch(err =>\n        {\n          setLoading(false)\n          console.error(err);\n        });\n\n\n    } , [] );\n\n    const getReportLabels = () =>\n    {\n           return (\n\n                <div className={classes.ReportLabels}>\n                    <div className={classes.less12Label}> {`12 Hours`} </div>\n                    <div className={classes.less24Label}> {`24 Hours`} </div>\n                    <div className={classes.less36Label}> {`36 Hours`} </div>\n                </div>\n    \n            );\n    }\n\n    const getAverageLabel = () =>\n    {\n           return (\n\n                <div className={classes.AverageLabel}>\n                   avg = <span style={{fontSize:\"14px\"}}> {`${report.avg}`} </span> hours\n                </div>\n    \n            );\n    }\n\n    const seeMoreClicked = (event) => {\n        event.preventDefault();\n        setOpen(true);\n      }\n\n  return (\n    <React.Fragment>\n    \n    <div style={{position: \"relative\"}}>\n    {loading && (\n        <div style={{ width: \"100%\", paddingTop: \"3px\" }}>\n          <LinearProgress color=\"primary\" />\n        </div>\n      )}\n\n      <Title>PCR RESULTS SUMMARY</Title>\n\n      {data && (\n                <>\n\n                <PieChart width={250} height={150}>\n                    <Pie\n                        data={data}\n                        cx={170}\n                        cy={70}\n                        labelLine={false}\n                        label={renderCustomizedLabel}\n                        outerRadius={65}\n                        fill=\"#8884d8\"\n                        dataKey=\"value\"\n                        >\n                        {\n                            data.map((entry, index) => <Cell key={`cell-${index}`} fill={COLORS[index % COLORS.length]} />)\n                        }\n                    </Pie>\n                </PieChart>\n                \n\n                {getReportLabels()}\n                {getAverageLabel()}\n\n                <div className={classes.seeMore}>\n                            <Link color=\"primary\" href=\"#\" onClick={seeMoreClicked}>\n                                  See Details\n                            </Link>\n                  </div>\n\n\n                  <Dialog style={{padding: \"50px\"}} onClose={handleClose} aria-labelledby=\"simple-dialog-title\" open={open}>  \n                      <DialogTitle style={{textAlign: \"center\"}} id=\"simple-dialog-title\">PCR Results Time Report</DialogTitle>\n                            <DialogContent>\n                            <Table>\n                            <TableHead>\n                            <TableRow>\n                                <TableCell>Recieved in Less Than</TableCell>        \n                                <TableCell>Count</TableCell>\n                                <TableCell>Percent</TableCell>\n                            </TableRow>\n                            </TableHead>\n                            <TableBody>\n                                <TableRow key=\"row1\">\n                                    <TableCell>12 Hours</TableCell>\n                                    <TableCell>{report.lessThan12}</TableCell>\n                                    <TableCell>{report.lessThan12Percent} %</TableCell>\n                                </TableRow>\n                                <TableRow key=\"row2\">\n                                    <TableCell>24 Hours</TableCell>\n                                    <TableCell>{report.lessThan24}</TableCell>\n                                    <TableCell>{report.lessThan24Percent} %</TableCell>\n                                </TableRow>\n                                <TableRow key=\"row3\">\n                                    <TableCell>36 Hours</TableCell>\n                                    <TableCell>{report.lessThan36}</TableCell>\n                                    <TableCell>{report.lessThan36Percent} %</TableCell>\n                                </TableRow>\n                                <TableRow key=\"row4\">\n                                    <TableCell>48 Hours</TableCell>\n                                    <TableCell>{report.lessThan48}</TableCell>\n                                    <TableCell>{report.lessThan48Percent} %</TableCell>\n                                </TableRow>\n                                <TableRow key=\"row4\">\n                                    <TableCell style={{fontWeight:\"800\"}}>Total Results Received : </TableCell>\n                                    <TableCell style={{fontWeight:\"600\"}}>{report.lessThan48 + report.lessThan36 + report.lessThan24 + report.lessThan12}</TableCell>\n                                    <TableCell></TableCell>\n                                </TableRow>\n\n\n\n                            \n                            </TableBody>\n                        </Table>\n                            </DialogContent>\n                </Dialog>\n    \n\n\n\n                </>\n      )}\n     \n     </div>\n\n\n\n    </React.Fragment>\n  );\n}","import React from 'react';\nimport clsx from 'clsx';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Grid from '@material-ui/core/Grid';\nimport Paper from '@material-ui/core/Paper';\nimport Chart from './Chart';\nimport CurrentVisits from './CurrentVisits';\n\n\n\nimport { Tooltip } from '@material-ui/core';\nimport GlobalState from './../GlobalState';\nimport BookingView from './BookingView';\nimport ResultsTimeReport from './ResultsTimeReport';\n\nconst useStyles = makeStyles((theme) => ({\n \n  paper: {\n    padding: theme.spacing(2),\n    display: 'flex',\n    overflow: 'auto',\n    flexDirection: 'column',\n  },\n  fixedHeight: {\n    height: 240,\n  },\n}));\n\nexport default function DashboardPreview() {\n  const classes = useStyles();\n  const [state, setState] = React.useContext(GlobalState);\n\n  const fixedHeightPaper = clsx(classes.paper, classes.fixedHeight);\n\n  return (\n        <React.Fragment>\n\n<           Grid container spacing={3}>\n                    {/* Chart */}\n                    <Grid item xs={12} md={4} lg={6}>\n                    <Paper className={fixedHeightPaper}>\n                        <Chart />\n                    </Paper>\n                    </Grid>\n                    {/* Tests Summary */}\n                    <Grid item xs={12} md={4} lg={3}>\n                     <Paper className={fixedHeightPaper}>\n                        <ResultsTimeReport />\n                    </Paper>\n                    </Grid>\n                    {/* Current Visits */}\n                    <Grid item xs={12} md={4} lg={3}>\n                    <Paper className={fixedHeightPaper}>\n                        <CurrentVisits />\n                    </Paper>\n                    </Grid>\n                    {/* Recent Bookings */}\n                    <Grid item xs={12}>\n                    <Paper className={classes.paper}>\n                        <BookingView/>\n                    </Paper>\n                    </Grid>\n          </Grid>\n        </React.Fragment>\n  );\n}","import React, {useEffect, useRef, useState} from 'react';\nimport { DataGrid, ROW_CLICK } from '@material-ui/data-grid';\nimport BookService from './services/BookService';\nimport Typography from '@material-ui/core/Typography';\nimport { Button, Checkbox, Divider, FormControlLabel, Grid, Link, makeStyles, TextField, Tooltip } from '@material-ui/core';\nimport RefreshIcon from '@material-ui/icons/Refresh';\nimport { IconButton } from '@material-ui/core';\nimport LoaderSpinner from 'react-loader-spinner';\nimport GlobalState from './../GlobalState';\nimport { withStyles } from '@material-ui/core/styles';\n\nimport ToggleButton from '@material-ui/lab/ToggleButton';\nimport ToggleButtonGroup from '@material-ui/lab/ToggleButtonGroup';\nimport WbIncandescentIcon from '@material-ui/icons/WbIncandescent';\n\nimport Dialog from '@material-ui/core/Dialog';\nimport DialogActions from '@material-ui/core/DialogActions';\nimport DialogContent from '@material-ui/core/DialogContent';\nimport DialogContentText from '@material-ui/core/DialogContentText';\nimport DialogTitle from '@material-ui/core/DialogTitle';\nimport Draggable from 'react-draggable';\nimport Paper from '@material-ui/core/Paper';\n\nimport Table from '@material-ui/core/Table';\nimport TableBody from '@material-ui/core/TableBody';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableHead from '@material-ui/core/TableHead';\nimport TableRow from '@material-ui/core/TableRow';\nimport dateformat from 'dateformat';\nimport ReportProblemIcon from '@material-ui/icons/ReportProblem';\nimport BookingDialog from './BookingDialog';\nimport Alert from '@material-ui/lab/Alert';\n\nimport PropTypes from 'prop-types';\nimport LinearProgress from '@material-ui/core/LinearProgress';\nimport Box from '@material-ui/core/Box';\n\nimport WarningIcon from '@material-ui/icons/Warning';\n\nimport {FormatDateFromString, RevertFormatDateFromString} from './DateFormatter';\nimport PDFService from './services/PDFService';\n\nvar interval;\n\nconst useStyles = makeStyles((theme) => ({\n  title: {\n    marginTop: theme.spacing(0),\n    marginBottom: theme.spacing(1),\n\n  },\n  \n  refreshButton:{\n    marginLeft: theme.spacing(2),\n  },\n\n  checkIcon:{\n    color: \"green\"\n  },\n\n  closeIcon:{\n    color: \"red\"\n  },\n\n  RefLink: {\n    cursor: \"pointer\"\n  },\n\n  BookedLabel:{\n    backgroundColor: \"#606060\",\n    color: \"#fff\",\n    paddingRight: \"10px\",\n    paddingLeft: \"10px\"\n  },\n\n  PatientAttendedLabel:{\n    backgroundColor: \"#0066aa\",\n    color: \"#fff\",\n    paddingRight: \"15px\",\n    paddingLeft: \"10px\"\n  },\n\n  SampleTakenLabel:{\n    backgroundColor: \"#0066cc\",\n    color: \"#fff\",\n    paddingRight: \"40px\",\n    paddingLeft: \"10px\"\n  },\n\n  ReportSentLabel:{\n    backgroundColor: \"#009900\",\n    color: \"#fff\",\n    paddingRight: \"90px\",\n    paddingLeft: \"10px\"\n  },\n\n  ReportCertSentLabel:{\n    backgroundColor: \"#009900\",\n    color: \"#fff\",\n    paddingRight: \"68px\",\n    paddingLeft: \"10px\"\n  },\n\n  archiveButton: {\n\n  },\n\n  smartMatchButton: {\n    backgroundColor : \"#2f942e\",\n    \"&:hover\": {\n      background: \"green\",\n      color: \"#fff\"\n    },\n    textDecoration : \"none !important\",\n    marginRight : \"10px\"\n    // padding: \"10px\"  \n  },\n\n  infoTitle:  {\n    fontWeight: \"400\"\n  },\n\n  infoData: {\n    paddingLeft: \"10px\",\n    fontWeight: \"800\"\n  },\n\n  matchButton:\n  {\n    marginTop: \"30px\",\n    marginBottom : \"20px\",\n    backgroundColor : \"#2f942e\",\n    \"&:hover\": {\n      background: \"green\",\n      color: \"#fff\"\n    },\n    textDecoration : \"none !important\",\n    padding: \"10px\",\n    paddingLeft : \"50px\",\n    paddingRight: \"50px\"   \n  },\n\n  resendButton:\n  {\n    marginTop: \"5px\",\n    marginBottom : \"5px\",\n    backgroundColor : \"#2f942e\",\n    \"&:hover\": {\n      background: \"green\",\n      color: \"#fff\"\n    },\n    textDecoration : \"none !important\",\n    padding: \"10px\",\n    paddingLeft : \"50px\",\n    paddingRight: \"50px\"   \n  },\n\n  resendFilesButton:{\n    marginTop: \"5px\",\n    marginBottom : \"5px\",\n    backgroundColor : \"#3792ad\",\n    \"&:hover\": {\n      background: \"#2f798f\",\n      color: \"#fff\"\n    },\n    textDecoration : \"none !important\",\n    padding: \"10px\",\n    paddingLeft : \"50px\",\n    paddingRight: \"50px\"   \n  },\n\n  cancelButton:\n  {\n    marginBottom : \"10px\",\n    textDecoration : \"none !important\",\n    padding: \"10px\",\n    paddingLeft : \"90px\",\n    paddingRight: \"90px\"   \n  },\n\n  downloadPDFButton:\n  {\n    marginLeft: \"50px\"\n  }\n  \n  \n}));\n\nconst BorderLinearProgress = withStyles((theme) => ({\n  root: {\n    height: 10,\n    borderRadius: 5,\n  },\n  colorPrimary: {\n    backgroundColor: \"#cedbce\" //theme.palette.grey[theme.palette.type === 'light' ? 200 : 700],\n  },\n  bar: {\n    borderRadius: 5,\n    backgroundColor: '#2f942e',\n  },\n}))(LinearProgress);\nfunction LinearProgressWithLabel(props) {\n  return (\n    <Box display=\"flex\" alignItems=\"center\">\n      <Box width=\"100%\" mr={1}>\n        <BorderLinearProgress variant=\"determinate\" {...props} />\n      </Box>\n      <Box minWidth={35}>\n        <Typography style={{fontWeight:\"800\", color :  \"#5e855e\"  }} variant=\"body2\" color=\"textSecondary\">{`${Math.round(\n          props.value,\n        )}%`}</Typography>\n      </Box>\n    </Box>\n  );\n}\n\nLinearProgressWithLabel.propTypes = {\n  /**\n   * The value of the progress indicator for the determinate and buffer variants.\n   * Value between 0 and 100.\n   */\n  value: PropTypes.number.isRequired,\n};\n\n\nfunction PaperComponent(props) {\n  return (\n    <Draggable handle=\"#draggable-dialog-title\" cancel={'[class*=\"MuiDialogContent-root\"]'}>\n      <Paper {...props} />\n    </Draggable>\n  );\n}\n\nexport default function UnmatchedRecords() {\n  \n  const classes = useStyles();\n\n  const columns = [\n    { field: 'id', headerName: '#', width: 50 },\n\n    { field: 'testDate', headerName: 'Test Date', width: 120, valueFormatter : (params) =>\n      {\n        return FormatDateFromString(params.value);\n      }\n     },\n    { field: 'forename', headerName: 'Forename', width: 200 },\n    { field: 'surname', headerName: 'Surname', width: 200 },\n    { field: 'birthDate', headerName: 'D.O.B', width: 120 , valueFormatter : (params) =>\n    {\n      return FormatDateFromString(params.value);\n    }},\n    { field: '_id' , headerName:'Action', width: 500 , renderCell: (params) => {\n        if (selectedTab === 'unresolved')\n        {\n            return (\n              <React.Fragment>\n\n              <Button\n                    disabled = {params.value === disableId}\n                    type=\"button\"\n                    variant=\"contained\"\n                    color=\"primary\"\n                    startIcon={<WbIncandescentIcon />}\n                    onClick = { event => smartMatchClicked(event,params.value)}\n                    className={classes.smartMatchButton}\n                    >\n                    smart match\n              </Button>\n\n              <Button\n                    disabled = {params.value === disableId}\n                    type=\"button\"\n                    variant=\"contained\"\n                    color=\"primary\"\n                    onClick = { event => archiveRecord(event,params.value)}\n                    className={classes.archiveButton}\n                  >\n                    archive\n              </Button>\n\n\n              <Button\n                    disabled = {params.value === disableId}\n                    type=\"button\"                   \n                    color=\"primary\"\n                    onClick = { event => downloadLabReport(params.value)}\n                    className={classes.downloadPDFButton}\n                  >\n                    view pdf\n              </Button>\n\n\n              </React.Fragment>\n\n            );\n        }else\n        {\n            return (\n\n              <React.Fragment>\n\n                  <Button\n                        disabled = {params.value === disableId}\n                        type=\"button\"\n                        variant=\"contained\"\n                        color=\"primary\"\n                        startIcon={<WbIncandescentIcon />}\n                        onClick = { event => smartMatchClicked(event,params.value)}\n                        className={classes.smartMatchButton}\n                        >\n                        smart match\n                  </Button>\n\n                    <Button\n                    disabled = {params.value === disableId}\n                    type=\"button\"\n                    variant=\"contained\"\n                    color=\"primary\"\n                    onClick = { event => unArchiveRecord(event,params.value)}\n                    className={classes.archiveButton}\n                  >\n                    Undo\n                  </Button>\n\n                  <Button\n                    disabled = {params.value === disableId}\n                    type=\"button\"                   \n                    color=\"primary\"\n                    onClick = { event => downloadLabReport(params.value)}\n                    className={classes.downloadPDFButton}\n                  >\n                    view pdf\n                  </Button>\n\n              </React.Fragment>\n            );\n        }\n        \n    } },\n   \n  ];\n\n  const [state, setState] = React.useContext(GlobalState);  \n\n  const [data, setData] = React.useState({bookings: [] , cachedBookings: [], isFetching : false});\n\n  const [selectedRow, setSelectedRow] = React.useState(null);\n\n  const [filter,setFilter] = React.useState('');\n\n  const [refresh, setRefresh] = React.useState(false);\n\n  const [disableId, setDisableId] = React.useState(null);\n\n  const [selectedTab, setSeletedTab] = React.useState('unresolved');\n\n  const [openDialog, setOpenDialog] = React.useState(false);\n\n  const [seeDetailsDialogOpen, setSeeDetailsDialogOpen] = React.useState(false);\n\n  const [smartLinkId, setSmartLinkId] = React.useState(null);\n\n  const [smartLinkDetails, setSmartLinkDetails] = React.useState(null);\n\n  const [likelyBookings, setLikelyBookings] = React.useState(null);\n\n  const [selectedBooking, setSelectedBooking] = React.useState(null);\n\n  const [seeDetailsBooking, setSeeDetailsBooking] = React.useState(null);\n\n  const [matching, setMatching] = React.useState(false);\n\n  const [matched, setMatched] = React.useState(false);\n\n  const [sending, setSending] = React.useState(false);\n  const [sent, setSent] = React.useState(false);\n\n  const [sendJustToPCR, setSendJustToPCR] = React.useState(false);\n\n  const [sendingStatus, setSendingStatus] = React.useState('');\n\n  const [sendingProgress, setSendingProgress] = React.useState(10);\n\n  const [loading, setLoading] = React.useState(false)\n\n\n  const handleTabChanged = (event, value) => {\n      if (value && value.length)\n      {\n        setSeletedTab(value);\n      }\n   \n  };\n\n  const handleCloseDialog = () =>\n  {\n    setOpenDialog(false);\n    setTimeout(() => {\n      setSmartLinkId(null);\n      setSmartLinkDetails(null);\n      setLikelyBookings(null);\n      setSelectedBooking(null);\n      setMatched(false);\n      setMatching(false);\n      setSendingStatus(null);\n      setSending(false);\n      setSent(false);\n      clearInterval(interval);\n      setSendJustToPCR(false);\n    }, 100);\n  }\n\n  const handleCloseSeeDetaisDialog = () =>\n  {\n    setSeeDetailsDialogOpen(false);\n    setTimeout(() => {\n      setSeeDetailsBooking(null);\n    }, 500);\n  }\n\n  const seeDetailsClicked = (event, row) =>\n  {\n    setSeeDetailsBooking(row);\n    setSeeDetailsDialogOpen(true);\n  }\n\n  const smartMatchClicked = (event, id) =>\n  {\n    setSmartLinkId(id);\n    setOpenDialog(true);\n    findBestMatches(id);\n  }\n\n  useEffect(() => {\n    if (smartLinkId)\n    {\n      findBestMatches(smartLinkId);\n      // console.log('refrshing....');\n\n    }\n\n\n  }, [state.bookingDialogDataChanged]);\n\n  const findBestMatches = (id) =>\n  {\n    BookService.getLinkDetails(id).then( res => {\n      setSmartLinkDetails(res.data);\n      console.log(res.data);\n    }).catch( err =>\n      {\n        console.log(err);\n      });\n\n    BookService.findBestMatches(id).then( res => {\n      setLikelyBookings(res.data.matchedBookings);\n    }).catch( err => {\n      console.log(err);\n      setLikelyBookings([]);\n    })\n  }\n\n  const archiveRecord = (event, id) =>\n  {\n      if (disableId)\n      {\n        return;\n      }\n        setDisableId(id);\n        \n        BookService.archiveRecord(id).then(\n            (res) => {\n                setDisableId(null);\n                setRefresh(!refresh);\n            }\n        ).catch( (err) => {\n            setDisableId(null);\n        })\n  }\n\n  const unArchiveRecord = (event, id) =>\n  {\n      if (disableId)\n      {\n        return;\n      }\n        setDisableId(id);\n        \n        BookService.unArchiveRecord(id).then(\n            (res) => {\n                setDisableId(null);\n                setRefresh(!refresh);\n            }\n        ).catch( (err) => {\n            setDisableId(null);\n        })\n  }\n\n\n  const lastPromise = useRef();\n\n  useEffect( () => {\n\n            var api = BookService.getUnmatchedRecords;\n            if (selectedTab === 'archived')\n            {\n                api = BookService.getUnmatchedRecordsArchived;\n            }\n            \n            setLoading(true)\n            \n            setData({bookings: [], cachedBookings: [], isFetching: true});\n            const currentPromise = api().then( (res) =>{\n              \n              for (var i=0; i < res.data.length; i++)\n              {\n                res.data[i] = {...res.data[i], id : i + 1}\n              }  \n              \n              return res.data;\n            })\n\n            lastPromise.current = currentPromise;\n\n            currentPromise.then(\n              result => {\n                if (currentPromise === lastPromise.current) {\n                  setLoading(false)\n                  setData({bookings: result, cachedBookings: [...result], isFetching: false});\n                }\n              },\n              e => {\n                if (currentPromise === lastPromise.current) {\n                    setLoading(false)\n                    console.log(e);\n                    setData({bookings: data.bookings, cachedBookings: data.cachedBookings, isFetching: false});\n                }\n              });\n        },\n        [refresh, selectedTab]);\n\n\n\n  useEffect( () => {\n\n        if (filter && filter.trim().length > 0)\n        {\n          var filteredData = data.cachedBookings.filter( (element) => {\n\n            return (element.forename.toLowerCase().indexOf(filter.toLowerCase()) >= 0) ||\n                   (element.surname.toLowerCase().indexOf(filter.toLowerCase()) >= 0) \n            ;\n  \n          });\n  \n  \n          setData({bookings: filteredData, cachedBookings: data.cachedBookings, isFetching: false});\n        }else\n        {\n          setData({bookings: [...data.cachedBookings], cachedBookings: data.cachedBookings, isFetching: false});\n        }\n      },\n      [filter]);\n\n\n\n\n\n\n  const refreshClicked = (event) =>{\n    setFilter('');\n    setRefresh(!refresh);\n\n  }\n\n  const filterChanged = (event) =>{\n    setFilter(event.target.value);\n  }\n\n  const handleSelectionChanged = (newSelection) =>\n  {\n    if (newSelection.length > 0){\n      setSelectedRow(newSelection.rows[0]);\n    }\n  }\n\n  const handleCheckChanged = (event, row) =>\n  {\n    if (event.target.checked)\n    {\n      setSelectedBooking(row);\n    }\n    else\n    {\n      setSelectedBooking(null);\n    }\n  }\n\n  const matchRecords = (event) => {\n\n    setMatching(true);\n\n    BookService.getBookingById(selectedBooking._id).then(res => {\n      setSelectedBooking(res.data);\n    });\n\n    BookService.matchRecords(selectedBooking._id, smartLinkId).then (res => {\n\n      if (res.data.status === 'OK'){\n        setMatching(false);\n        setMatched(true);\n      }\n\n    }).catch(err =>\n      {\n        console.log(err);\n      });\n  }\n\n  const getProgress = (status) =>\n  {\n    console.log(`status : ${status}`);\n\n    if (status === 'downloadFailed')\n      return 10 ;\n    else if (status === 'downloading') \n      return 30 ;  \n    else if (status === 'downloadSuccess') \n      return 70 ;\n    else if (status === 'sent')\n      return 100;   \n    else\n      return 0;\n\n  }\n\n  useEffect( () => {\n\n    setSendingProgress((prevProgress) => (prevProgress >= 100 ? 100 : getProgress(sendingStatus)));\n\n  }, [sendingStatus]);\n\n  const resendFilesClicked = (event) =>\n  {\n    setSending(true);\n    setSendingProgress(0);\n    setSendingStatus('downloadFailed');\n    setSendJustToPCR(true);\n\n\n    BookService.regenerateFiles(smartLinkId).then( res => {\n\n      interval = setInterval(() => {\n             \n       // setProgress(sendingCounter);\n\n       // setProgress(getProgress(sendingStatus));\n\n       BookService.getLinkDetails(smartLinkId).then( res => {\n \n         setSendingStatus(res.data.status);\n \n         if (res.data.status === 'sent')\n         {\n           setSending(false);\n           setSent(true);\n           setRefresh(!refresh);\n           clearInterval(interval);\n         }\n       });\n \n     }, 1000);\n\n   }).catch(err => {\n     console.log(err);\n     setSending(false);\n   });\n\n\n  }\n \n  const resendEmailsClicked = (event) => {\n    setSending(true);\n    setSendingProgress(0);\n    setSendingStatus('downloadFailed');\n \n\n    BookService.resendEmails(smartLinkId).then( res => {\n\n       interval = setInterval(() => {\n        \n       \n\n        // setProgress(sendingCounter);\n\n        // setProgress(getProgress(sendingStatus));\n\n        BookService.getLinkDetails(smartLinkId).then( res => {\n  \n          setSendingStatus(res.data.status);\n  \n          if (res.data.status === 'sent')\n          {\n            setSending(false);\n            setSent(true);\n            setRefresh(!refresh);\n            clearInterval(interval);\n          }\n        });\n  \n      }, 1000);\n\n    }).catch(err => {\n      console.log(err);\n      setSending(false);\n    });\n\n  \n\n  }\n\n  const cancelResendEmailsClicked = (event) => {\n    setMatched(false);\n  }\n\n  const downloadLabReport = (id) =>\n  {\n       PDFService.downloadPdfLabReport(id).then( (res) => \n       {       \n         const file = new Blob(\n           [res.data], \n           {type: 'application/pdf'});\n\n         const fileURL = URL.createObjectURL(file);   \n         window.open(fileURL, \"_blank\");\n\n       \n\n       }).catch( (err) =>\n       {\n           console.log(err);\n       });\n  }\n\n\n  return (\n    <React.Fragment>\n\n      {loading && (\n        <div style={{ width: \"100%\", paddingTop: \"3px\" }}>\n          <LinearProgress color=\"primary\" />\n        </div>\n      )}\n\n      <Grid\n        container\n        direction=\"row\"\n        justify=\"space-between\"\n        alignItems=\"flex-end\"\n      >\n        <Grid item md={5}>\n            <div style={{textAlign:\"left\", paddingLeft:\"10px\"}}>\n                <Grid container direction=\"row\" justify=\"flex-start\" alignItems=\"center\">\n                        <Grid item>\n                                <span style={{paddingRight: \"15px\", color: \"#555\"}}> <WarningIcon style={{fontSize:\"2.2rem\"}}/> </span>\n                        </Grid>\n                        <Grid item>\n                              <span style={{fontSize: '1.4rem', fontWeight:\"600\", color: \"#444\"}}> Unmatched Records </span>\n                        </Grid>\n                        <Grid item>\n                            <Tooltip title=\"Refresh\" placement=\"right\">\n                                <IconButton\n                                  color=\"primary\"\n                                  className={classes.refreshButton}\n                                  onClick={refreshClicked}\n                                >\n                                  <RefreshIcon />\n                                </IconButton>\n                            </Tooltip>\n                        </Grid>\n                  </Grid>\n                </div>\n        </Grid>\n\n        <Grid item md={3}>\n          <ToggleButtonGroup\n            value={selectedTab}\n            style={{ marginBottom: \"10px\" }}\n            exclusive\n            onChange={handleTabChanged}\n            aria-label=\"text alignment\"\n          >\n            <ToggleButton value=\"unresolved\" aria-label=\"left aligned\">\n              UnResolved\n            </ToggleButton>\n            <ToggleButton value=\"archived\" aria-label=\"centered\">\n              Archived\n            </ToggleButton>\n          </ToggleButtonGroup>\n        </Grid>\n\n        <Grid item md={3}>\n          <TextField\n            variant=\"standard\"\n            value={filter}\n            onChange={filterChanged}\n            margin=\"normal\"\n            size=\"small\"\n            id=\"filter\"\n            label=\"Filter\"\n            name=\"filter\"\n            autoComplete=\"off\"\n          />\n        </Grid>\n      </Grid>\n\n      <div style={{ height: 700, width: \"100%\" }}>\n        <DataGrid\n          rows={data.bookings}\n          columns={columns}\n          autoPageSize\n          onSelectionChange={handleSelectionChanged}\n        />\n      </div>\n\n      <Dialog\n        maxWidth=\"lg\"\n        open={openDialog}\n        onClose={handleCloseDialog}\n        PaperComponent={PaperComponent}\n        aria-labelledby=\"form-dialog-title\"\n      >\n        <DialogTitle id=\"draggable-dialog-title\">\n          <Grid\n            container\n            spacing={2}\n            direction=\"row\"\n            justify=\"center\"\n            alignItems=\"center\"\n          >\n            <Grid item>\n              <WbIncandescentIcon\n                style={{ color: \"#2f942e\", fontSize: \"2rem\" }}\n              />\n            </Grid>\n\n            <Grid item>\n              <div\n                style={{\n                  color: \"#2f942e\",\n                  paddingBottom: \"12px\",\n                  fontWeight: \"800\",\n                }}\n              >\n                {\" \"}\n                SMART MATCH{\" \"}\n              </div>\n            </Grid>\n          </Grid>\n\n          <Divider />\n        </DialogTitle>\n        <DialogContent>\n          <div\n            style={{\n              height: \"600px\",\n              // width: \"1200px\",\n            }}\n          >\n            {(!likelyBookings || !smartLinkDetails) && (\n              <React.Fragment>\n                <Grid\n                  container\n                  direction=\"column\"\n                  justify=\"center\"\n                  alignItems=\"center\"\n                  spacing={2}\n                >\n                  <Grid item>\n                    <LoaderSpinner\n                      style={{ marginTop: \"170px\" }}\n                      type=\"Grid\"\n                      color=\"#2f942e\"\n                      height={100}\n                      width={100}\n                      timeout={0} //3 secs\n                    />\n                  </Grid>\n                  <Grid item>\n                    <div\n                      style={{\n                        color: \"#2f942e\",\n                        paddingBottom: \"12px\",\n                        fontWeight: \"800\",\n                      }}\n                    >\n                      {\" \"}\n                      SEARCHING ...{\" \"}\n                    </div>\n                  </Grid>\n                </Grid>\n              </React.Fragment>\n            )}\n\n            {likelyBookings && likelyBookings.length === 0 && (\n              <React.Fragment>\n                <Grid\n                  container\n                  direction=\"column\"\n                  justify=\"center\"\n                  alignItems=\"center\"\n                  spacing={2}\n                >\n                  <Grid item>\n                    <div\n                      style={{\n                        color: \"#2f942e\",\n                        paddingBottom: \"12px\",\n                        fontWeight: \"800\",\n                        marginTop: \"230px\",\n                      }}\n                    >\n                      {\" \"}\n                      SORRY, NO RECORDS FOUND !{\" \"}\n                    </div>\n                  </Grid>\n                </Grid>\n              </React.Fragment>\n            )}\n\n            {likelyBookings && smartLinkDetails && likelyBookings.length > 0 && (\n              <React.Fragment>\n                <Grid\n                  container\n                  direction=\"column\"\n                  justify=\"flex-start\"\n                  alignItems=\"stretch\"\n                  spacing={2}\n                >\n                  <Grid item>\n                    <div\n                      style={{\n                        fontSize: \"1.1rem\",\n                        fontWeight: \"600\",\n                        color: \"#2f942e\",\n                        marginBottom: \"15px\",\n                      }}\n                    >\n                      {\" \"}\n                      LAB RECORD :\n                    </div>\n\n                    <Grid\n                      style={{ paddingLeft: \"20px\", paddingBottom: \"20px\" }}\n                      container\n                      direction=\"row\"\n                      justify=\"flex-start\"\n                      alignItems=\"flex-start\"\n                      spacing={4}\n                    >\n                      <Grid item>\n                        <span className={classes.infoTitle}>Forename:</span>\n                        <span className={classes.infoData}>\n                          {smartLinkDetails.forename}\n                        </span>\n                      </Grid>\n\n                      <Grid item>\n                        <span className={classes.infoTitle}>Surname:</span>\n                        <span className={classes.infoData}>\n                          {smartLinkDetails.surname}\n                        </span>\n                      </Grid>\n\n                      <Grid item>\n                        <span className={classes.infoTitle}>D.O.B:</span>\n                        <span className={classes.infoData}>\n                          {FormatDateFromString(smartLinkDetails.birthDate)}\n                        </span>\n                      </Grid>\n\n                      <Grid item>\n                        <span className={classes.infoTitle}>Test Date:</span>\n                        <span className={classes.infoData}>\n                          {FormatDateFromString(smartLinkDetails.testDate)}\n                        </span>\n                      </Grid>\n                    </Grid>\n\n                    <Divider />\n                  </Grid>\n\n                  <Grid item>\n                    <div\n                      style={{\n                        fontSize: \"1.1rem\",\n                        fontWeight: \"600\",\n                        color: \"#2f942e\",\n                        marginBottom: \"15px\",\n                      }}\n                    >\n                      {\" \"}\n                      BEST MATCHES :\n                    </div>\n                  </Grid>\n\n                  <Grid item>\n                    <Table size=\"small\">\n                      <TableHead>\n                        <TableRow>\n                          <TableCell>Select</TableCell>\n                          <TableCell>Match</TableCell>\n                          <TableCell>Forename</TableCell>\n                          <TableCell>Surname</TableCell>\n                          <TableCell>D.O.B</TableCell>\n                          <TableCell>Email</TableCell>\n                          <TableCell>Test Date</TableCell>\n                          <TableCell></TableCell>\n                        </TableRow>\n                      </TableHead>\n                      <TableBody>\n                        {likelyBookings.map((row) => (\n                          <TableRow key={row._id}>\n                            <TableCell>\n                              <Tooltip\n                                title={\n                                  row.birthDate !== smartLinkDetails.birthDate\n                                    ? '\"D.O.B\" DOES NOT MATCH THE LAB REPORT ! PLEASE MAKE SURE \"D.O.B\" OF THE SELECTED BOOKING IS CORRECT !'\n                                    : \"\"\n                                }\n                              >\n                                <FormControlLabel\n                                  control={\n                                    <Checkbox\n                                      checked={\n                                        selectedBooking &&\n                                        selectedBooking._id === row._id\n                                      }\n                                      disabled={\n                                        matched || matching\n                                      }\n                                      onChange={(event) =>\n                                        handleCheckChanged(event, row)\n                                      }\n                                      name=\"checkedA\"\n                                    />\n                                  }\n                                  label=\"\"\n                                />\n                              </Tooltip>\n                            </TableCell>\n                            <TableCell\n                              style={{\n                                fontWeight: \"800\",\n                                color: \"#2f942e\",\n                                fontSize: \"1.1rem\",\n                              }}\n                            >{`${row.likelihood} %`}</TableCell>\n                            <TableCell\n                              style={\n                                row.forenameCapital ===\n                                smartLinkDetails.forename\n                                  ? { fontWeight: \"800\", color: \"#2f942e\" }\n                                  : { fontWeight: \"800\", color: \"#ff871f\" }\n                              }\n                            >\n                              {row.forenameCapital}\n                            </TableCell>\n                            <TableCell\n                              style={\n                                row.surnameCapital === smartLinkDetails.surname\n                                  ? { fontWeight: \"800\", color: \"#2f942e\" }\n                                  : { fontWeight: \"800\", color: \"#ff871f\" }\n                              }\n                            >\n                              {row.surnameCapital}\n                            </TableCell>\n                            <TableCell\n                              style={\n                                row.birthDate === smartLinkDetails.birthDate\n                                  ? { fontWeight: \"800\", color: \"#2f942e\" }\n                                  : { fontWeight: \"800\", color: \"red\" }\n                              }\n                            >\n                              <Grid\n                                container\n                                direction=\"column\"\n                                justify=\"center\"\n                                alignItems=\"center\"\n                                spacing={1}\n                              >\n                                <Grid item>\n                                  {row.birthDate !==\n                                    smartLinkDetails.birthDate && (\n                                    <span style={{ textAlign: \"center\" }}>\n                                      <ReportProblemIcon />\n                                    </span>\n                                  )}\n                                </Grid>\n                                {FormatDateFromString(row.birthDate)}\n                                <Grid item></Grid>\n                              </Grid>\n                            </TableCell>\n                            <TableCell>{row.email?.toUpperCase()}</TableCell>\n                            <TableCell\n                              style={\n                                dateformat(\n                                  row.samplingTimeStamp,\n                                  \"yyyy-mm-dd\"\n                                ) === smartLinkDetails.testDate\n                                  ? { fontWeight: \"800\", color: \"#2f942e\" }\n                                  : { fontWeight: \"800\", color: \"red\" }\n                              }\n                            >\n                              {FormatDateFromString(dateformat(row.samplingTimeStamp, \"yyyy-mm-dd\"))}\n                            </TableCell>\n                            <TableCell>\n                              <Button\n                                color=\"primary\"\n                                disabled = {sending}\n                                onClick={(event) =>\n                                  seeDetailsClicked(event, row)\n                                }\n                              >\n                                See Details\n                              </Button>\n                            </TableCell>\n                          </TableRow>\n                        ))}\n                      </TableBody>\n                    </Table>\n                  </Grid>\n                </Grid>\n\n                <Grid\n                  container\n                  direction=\"column\"\n                  justify=\"center\"\n                  spacing = {1}\n                  alignItems=\"center\"\n                >\n\n                {!matched && (\n                  <React.Fragment>\n                        <Grid item>\n                          <Button\n                            disabled = {!selectedBooking || matching}\n                            className={classes.matchButton}\n                            variant=\"contained\"\n                            color=\"primary\"\n                            onClick = {matchRecords}\n                          >\n                            GO Match THE Records\n                          </Button>\n                        </Grid>\n\n                        {!selectedBooking && (\n                            <Grid item>\n                              <Alert severity=\"warning\">No Record is Selected ! — Please select a record you think it is a match.</Alert>\n                          </Grid>\n                        )}\n\n                  </React.Fragment>\n                )}\n\n                {matched && !sent && !sending && (\n                  <React.Fragment>\n\n                    <Grid item>\n            \n                         <Alert style={{marginTop:\"10px\", paddingLeft:\"50px\", paddingRight:\"50px\"}} severity=\"success\"> Success — The Records are Matched Now !</Alert>\n                    \n                    </Grid>\n\n                    <Grid item>\n\n                      <div style={{paddingTop:\"5px\", fontSize:\"1rem\", fontWeight: \"500\", color: \"#555\"}}>\n                         Do you want to Resend the LAB Report {selectedBooking.certificate ? ' and Certificate' : ''}  Now?\n                      </div>\n\n                    </Grid>\n\n                    <Grid item>\n                          <Button\n                            disabled = {sending || sent}\n                            className={classes.resendButton}\n                            variant=\"contained\"\n                            color=\"primary\"\n                            onClick = {resendEmailsClicked}\n                          >\n                            YES ! RESEND THE EMAILS\n                          </Button>\n                    </Grid>\n\n                    <Grid item>\n                          <Button\n                            disabled = {sending || sent}\n                            className={classes.cancelButton}\n                            variant=\"contained\"\n                            color=\"default\"\n                            onClick = {cancelResendEmailsClicked}\n                          >\n                            NO ! NOT NOW\n                          </Button>\n                    </Grid>\n\n                    \n                    <Grid item>\n                          <Button\n                            disabled = {sending || sent}\n                            className={classes.resendFilesButton}\n                            variant=\"contained\"\n                            color=\"primary\"\n                            onClick = {resendFilesClicked}\n                          >\n                            Just Generate The Files and send to pcrresults@medicalexpressclinic.co.uk\n                          </Button>\n                    </Grid>\n\n                    <Grid item>\n            \n                         <Alert style={{marginTop:\"10px\",  paddingLeft:\"50px\", paddingRight:\"50px\"}} severity=\"warning\">\n                            Caution! — The LAB Report and Certificate will be Sent According to the Record you have Selected !\n                          </Alert>\n       \n                   </Grid>\n\n\n\n                  </React.Fragment>\n                )}\n\n                        {matched && (sending || sent) && ( \n                          <Grid item>\n\n                            <div style={{paddingTop: \"50px\", color: \"#2f942e\" , fontWeight:\"600\", fontSize: \"1rem\"}}>\n                                 {sending && !sent && (\n                                   'Sending ...'\n                                 )}\n\n                                 {sent && !sendJustToPCR && (\n                                     <Alert style={{marginTop:\"10px\", paddingLeft:\"50px\", paddingRight:\"50px\"}} severity=\"success\">\n                                          Success! — The LAB Report {selectedBooking.certificate? ' and Certificate ': ' ' }  Successfully Sent.\n                                     </Alert>\n                                 )}\n\n                                {sent && sendJustToPCR && (\n                                     <Alert style={{marginTop:\"10px\", paddingLeft:\"50px\", paddingRight:\"50px\"}} severity=\"success\">\n                                          Success! — The LAB Report {selectedBooking.certificate? ' and Certificate ': ' ' }  Successfully Sent Just to pcrresults@medicalexpressclinic.co.uk .\n                                     </Alert>\n                                 )}\n\n\n\n                                 \n                            </div>\n                            \n                          </Grid>\n                          \n                        )}\n\n                </Grid>\n              </React.Fragment>\n            )}\n\n\n              {matched && (sending || sent) && (\n                  <React.Fragment>\n\n                      <div style={{marginTop:\"10px\", width:\"50%\", marginLeft: \"27%\"}}>\n                        \n                           <LinearProgressWithLabel variant=\"determinate\" color=\"primary\"  value={sendingProgress} />     \n\n                      </div>\n\n                      <div style={{paddingTop: \"30px\", color: \"#2f942e\" , fontWeight:\"600\", fontSize: \"1rem\",  marginLeft: \"45%\"}}>\n                            {sending && !sent && (\n                                   'PLEASE WAIT ...'\n                                 )}     \n                                  \n                    </div>\n\n                  </React.Fragment>\n                )}\n\n\n          </div>\n\n          <BookingDialog\n            booking={seeDetailsBooking}\n            open={seeDetailsDialogOpen}\n            onClose={handleCloseSeeDetaisDialog}\n            deleteButtonDisabled={true}\n          />\n        </DialogContent>\n      </Dialog>\n    </React.Fragment>\n  );\n}","import React, { useEffect, useState } from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport PropTypes from 'prop-types';\nimport dateformat from 'dateformat';\nimport BookService from '../services/BookService';\n\nimport CircularProgress from '@material-ui/core/CircularProgress';\n\nimport GlobalState from '../../GlobalState';\n\n\nconst useStyles = makeStyles((theme) => ({\n\n    Container: {\n        width: \"100%\",\n        paddingTop: \"70%\",\n        position: \"relative\",\n        backgroundColor: \"#fff\"\n    },\n\n    ContainerPast: {\n        width: \"100%\",\n        paddingTop: \"70%\",\n        position: \"relative\",\n        backgroundColor: \"#fafafa\"\n    },\n    \n    DayLabel: {\n        position: \"absolute\",\n        top: \"5px\",\n        right: \"5px\",\n        color: \"#555\",\n        fontSize: \"1rem\"\n    },\n\n    DayLabelToday: {\n        position: \"absolute\",\n        top: \"5px\",\n        right: \"5px\",\n        backgroundColor: \"#1a73e8\",\n        color: \"#fff\",\n        fontSize: \"1rem\",\n        borderRadius: \"50%\",\n        padding: \"5px\",\n        lineHight: \"35px\",\n        minWidth: \"35px\"\n    },\n\n    DayLabelDisabled: {\n        position: \"absolute\",\n        top: \"5px\",\n        right: \"5px\",\n        color: \"#ddd\",\n        fontSize: \"1rem\"\n    },\n\n    BookingCountLabel: {\n        position: \"absolute\",\n        top: \"35%\",\n        left: \"40%\",\n        color: \"#3f51b5\",\n        backgroundColor: \"#ebedf7\",\n        fontSize: \"16px\",\n        fontWeight: \"600\",\n        padding: \"10px\",\n        borderRadius: \"50%\",\n        minWidth: \"40px\",\n        lineHight: \"40px\",\n        cursor: \"pointer\",\n        textAlign: \"center\"\n    },\n\n    BookingCountLabelBusy: {\n        position: \"absolute\",\n        top: \"35%\",\n        left: \"40%\",\n        color: \"#b00000\",\n        backgroundColor: \"#fce6e6\",\n        fontSize: \"16px\",\n        fontWeight: \"600\",\n        padding: \"10px\",\n        borderRadius: \"50%\",\n        minWidth: \"40px\",\n        cursor: \"pointer\"\n    },\n\n    LoadingProgress: {\n        position: \"absolute\",\n        top: \"40%\",\n        left: \"40%\",\n      },\n\n      BookingCountGauge: {\n        position: \"absolute\",\n        bottom: \"5%\",\n        left: \"8%\",\n        width : \"8%\",\n        height: \"85%\"\n    },\n\n  }));\n\nconst MAX_BOOKING_COUNT = 100;  \n\nconst MonthViewCell = ({key, cellIndex, month, daysInMonth, dayClicked}) => {\n    const classes = useStyles();\n\n    const [state, setState] = React.useContext(GlobalState);\n\n    const [dateStr, setDateStr] = React.useState('');\n\n    const [cellDate, setCellDate] = React.useState(new Date());\n\n    const [bookingsCount, setBookingsCount] = React.useState(-1);\n\n    const [disableDay, setDisableDay] = React.useState(false);\n\n    const [isPast, setIsPast] = React.useState(false);\n\n    useEffect( () => {\n\n        if (cellIndex <= daysInMonth.length)\n        {\n            const date = daysInMonth[cellIndex - 1];\n            const dateStr = dateformat(date, 'yyyy-mm-dd');\n            setDateStr(dateStr);\n            setCellDate(date);\n            setDisableDay(date.getMonth() !== month - 1);\n            const todayStr = dateformat(new Date(), 'yyyy-mm-dd');\n            setIsPast(dateStr < todayStr);\n        }\n        else\n        {\n            const day = cellIndex - daysInMonth.length;\n            const date = new Date((daysInMonth[daysInMonth.length - 1].getTime() + ( day * 86400000)));\n            const dateStr = dateformat(date, 'yyyy-mm-dd');\n            setDateStr(dateStr);\n            setCellDate(date);\n            setDisableDay(true);\n            const todayStr = dateformat(new Date(), 'yyyy-mm-dd');\n            setIsPast(dateStr < todayStr);\n        }\n\n    }, [cellIndex, month, daysInMonth]);\n\n    useEffect ( () => {\n\n        const fecthData = async () =>\n        {\n            if (!dateStr || dateStr.length <= 0)\n            {\n                return;\n            }\n        \n            if (disableDay)\n            {\n                setBookingsCount(-2);\n                return;\n            }\n\n            setBookingsCount(-1);\n\n            var res = state.AdminCalendarCache?.find(record => record.method === 'getBookingsCountByDateStr' && record.query === dateStr)?.res;\n\n            if (!res)\n            {\n                res = await BookService.getAllBookingsCountByDateStr(dateStr);\n                setState(state => ({...state, AdminCalendarCache : [...state.AdminCalendarCache, {method: 'getBookingsCountByDateStr' , query : dateStr, res: res}]}));\n            }\n        \n            if (res.data.count >= 0)\n            {\n                setBookingsCount(res.data.count);\n            }\n\n        }\n\n      fecthData();\n\n    }, [dateStr]);\n\n    const getDayLabel = (_cellIndex , _month , _daysInMonth) =>\n    {\n        var date = null;\n        var disabled = false;\n        var day = -1;\n\n    \n\n        if (_cellIndex <= _daysInMonth.length)\n        {\n            date = _daysInMonth[_cellIndex - 1];\n            day = date.getDate();\n            if (date.getMonth() !== _month - 1)\n            {\n                disabled = true;\n            }\n        }\n        else\n        {\n            const _day = _cellIndex - _daysInMonth.length;\n            const date = new Date((_daysInMonth[_daysInMonth.length - 1].getTime() + ( _day * 86400000)));\n            day = date.getDate();\n            disabled = true;\n        }\n\n        const isToday = dateformat(new Date(),'yyyy-mm-dd') === dateformat(date, 'yyyy-mm-dd');\n\n        return (\n            <span className={(disabled) ? classes.DayLabelDisabled : isToday ? classes.DayLabelToday : classes.DayLabel}>\n                 {day > 0 ? `${day}` : ''}\n             </span>\n        );\n    }\n\n    const getBookingsCountLabel = (_bookingsCount) =>\n    {\n        if (_bookingsCount === -1)\n        {\n            return (\n                <div className={classes.LoadingProgress}>\n                      <CircularProgress disableShrink  />\n                </div>\n            );  \n        }\n        else if (_bookingsCount > 0 )\n        {\n            if (_bookingsCount >= MAX_BOOKING_COUNT / 2)\n            {\n                return (\n                    <div onClick={(event => dayClicked(event,cellDate))} className={classes.BookingCountLabelBusy}>\n                        {_bookingsCount}\n                    </div>\n                );\n            }\n            else\n            {\n                return (\n                    <div onClick={(event => dayClicked(event,cellDate))} className={classes.BookingCountLabel}>\n                          {_bookingsCount < 10 ?  ` ${_bookingsCount}` : `${_bookingsCount}`}\n                    </div>\n                );\n            }\n        }\n    }\n\n    const getBookingsCountGauge = (_bookingsCount) =>\n    {\n        if (_bookingsCount > 0)\n        {\n            let percent = (_bookingsCount / MAX_BOOKING_COUNT) * 100;\n            if (percent > 100)\n            {\n                percent = 100;\n            }\n\n            percent = 100 - percent;\n\n            return (\n\n                <div className={classes.BookingCountGauge}>\n                  <div style={{padding:\"0\", margin:\"0\", width:\"100%\", height:\"100%\", backgroundColor: \"#3f51b5\"}} >\n                        <div  style={{padding:\"0\", margin:\"0\", width:\"100%\", height:`${percent}%`, backgroundColor: \"#fafafa\"}} >\n\n                        </div>\n                  </div>\n                </div>\n            );\n        }\n    }\n\n    return (\n        <React.Fragment>\n\n            <div className={classes.Container}>\n\n              {getDayLabel(cellIndex, month, daysInMonth)}\n\n              {getBookingsCountLabel(bookingsCount)}\n\n              {getBookingsCountGauge(bookingsCount)}\n\n            </div>\n\n        </React.Fragment>\n\n\n    );\n}\n\nMonthViewCell.propTypes = {\n    key: PropTypes.string.isRequired,\n    cellIndex: PropTypes.number.isRequired,\n    month: PropTypes.number.isRequired,\n    daysInMonth: PropTypes.arrayOf(PropTypes.date),\n    dayClicked: PropTypes.func\n  };\n\n \n  \nexport default MonthViewCell;","import calendar from 'node-calendar';\n\n\nexport default class CalendarUtil {\n\n    static getMonthRange = (month , year) =>\n    {\n        return new calendar.Calendar(calendar.SUNDAY).itermonthdates(year, month);\n    } \n\n} ","import React, { useEffect, useState } from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport PropTypes from 'prop-types';\nimport MonthViewCell from './MonthViewCell';\nimport CalendarUtil from './calendar-util';\n\nconst dayLables = ['Sun', 'Mon', 'Tue', 'Wed' , 'Thu', 'Fri', 'Sat'];\nconst days = [1,2,3,4,5,6,7]; \nconst rows = [1,2,3,4,5,6];\n\nconst useStyles = makeStyles((theme) => ({\n\n    table: {\n        width: \"100%\",\n        border: \"1px solid #ddd\",\n        borderCollapse: \"collapse\",\n    },\n\n    th: {\n        border: \"1px solid #ddd\",\n        borderCollapse: \"collapse\",\n        verticalAlign: \"middle\",\n        fontcolor: \"#555\",\n        fontWeight: \"400\",\n        fontSize: \"15px\",\n        paddingTop: \"5px\",\n        paddingBottom: \"5px\",\n        width: \"14%\"\n    },\n\n    td: {\n        border: \"1px solid #ddd\",\n        borderCollapse: \"collapse\",\n        verticalAlign: \"middle\",\n    }\n\n  }));\n\nconst MonthView = ({month, year, dayClicked}) => {\n    const classes = useStyles();\n\n    const daysInMonth = CalendarUtil.getMonthRange(month,year);\n\n    return (\n        <React.Fragment>\n\n            <table className={classes.table}>\n                <thead>\n                    <tr>\n                        {dayLables.map(label => (\n                            <th key={`th-${label}`} className={classes.th}>\n                                {label}\n                            </th>\n                        ))}\n                    </tr>\n                </thead>\n                <tbody>\n                    {rows.map(row => (\n                        <tr>\n                            {days.map(day => (\n                                <td className={classes.td}>\n                                    <MonthViewCell \n                                        key={`${month}${year}${(row-1) * days.length + day}`} \n                                        cellIndex={(row-1) * days.length + day} \n                                        month={month} \n                                        daysInMonth={daysInMonth}\n                                        dayClicked = {dayClicked}\n                                        />\n                                </td>\n                            ))}\n                        </tr>\n                    ))}            \n                </tbody>\n\n            </table>\n\n      \n        </React.Fragment>\n\n\n    );\n}\n\nMonthView.propTypes = {\n    month: PropTypes.number.isRequired,\n    year: PropTypes.number.isRequired,\n    dayClicked: PropTypes.func\n  };\n\n\nexport default MonthView;","import React, { useEffect, useState } from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport PropTypes from 'prop-types';\nimport dateformat from 'dateformat';\nimport BookService from '../services/BookService';\n\nimport CircularProgress from '@material-ui/core/CircularProgress';\nimport GlobalState from '../../GlobalState';\n\nimport axios from 'axios'\n\nconst useStyles = makeStyles((theme) => ({\n\n    Container: {\n        width: \"100%\",\n        paddingTop: \"40%\",\n        position: \"relative\",\n        backgroundColor: \"#fff\"\n    },\n\n    ContainerPast: {\n        width: \"100%\",\n        paddingTop: \"40%\",\n        position: \"relative\",\n        backgroundColor: \"#fafafa\"\n    },\n    \n    DayLabel: {\n        position: \"absolute\",\n        top: \"5px\",\n        right: \"5px\",\n        color: \"#555\",\n        fontSize: \"1rem\"\n    },\n\n    DayLabelDisabled: {\n        position: \"absolute\",\n        top: \"5px\",\n        right: \"5px\",\n        color: \"#ddd\",\n        fontSize: \"1rem\"\n    },\n\n    BookingCountLabel: {\n        position: \"absolute\",\n        top: \"25%\",\n        left: \"38%\",\n        color: \"#3f51b5\",\n        backgroundColor: \"#ebedf7\",\n        fontSize: \"14px\",\n        fontWeight: \"600\",\n        padding: \"5px\",\n        borderRadius: \"50%\",\n        minWidth: \"30px\",\n        cursor : \"pointer\",\n    },\n\n    BookingCountLabelBusy: {\n        position: \"absolute\",\n        top: \"25%\",\n        left: \"38%\",\n        color: \"#b00000\",\n        backgroundColor: \"#fce6e6\",\n        fontSize: \"14px\",\n        fontWeight: \"600\",\n        padding: \"5px\",\n        borderRadius: \"50%\",\n        minWidth: \"30px\",\n        cursor : \"pointer\",\n    },\n\n    LoadingProgress: {\n        position: \"absolute\",\n        top: \"40%\",\n        left: \"40%\",\n      },\n\n      BookingCountGauge: {\n        position: \"absolute\",\n        bottom: \"5%\",\n        left: \"8%\",\n        width : \"85%\",\n        height: \"8%\"\n    },\n\n  }));\n\nconst MAX_BOOKING_COUNT = 5;  \n\nconst WeekViewCell = ({key, date, time, dayClicked}) => {\n    const classes = useStyles();\n\n    const [state, setState] = React.useContext(GlobalState);\n    const [bookingsCount, setBookingsCount] = React.useState(-1);\n    const [isPast, setIsPast] = React.useState(false);\n\n    const [cellDate, setCellDate] = React.useState(new Date());\n\n    useEffect( () => {\n        const todayStr = dateformat(new Date(), 'yyyy-mm-dd');\n        setIsPast(date < todayStr);\n\n        setCellDate(new Date(date));\n\n    }, [date]);\n\n    useEffect ( () => {\n      \n      \n      \n        if (!date || date.length <= 0 || !time || time.length <= 0)\n        {\n            return;\n        }\n        \n        // if (isPast)\n        // {\n        //     setBookingsCount(-2);\n        //     return;\n        // }\n\n        setBookingsCount(-1);\n\n       \n\n        var res = state.AdminCalendarCache?.find(record => record.method === 'getBookingsCountByDateStrandTime' && record.query === `${date}${time}`)?.res;\n        if (res)\n        {\n            if (res.data.count >= 0)\n            {\n                setBookingsCount(res.data.count);\n            }  \n            return;\n        }\n\n        let source = axios.CancelToken.source();\n        BookService.getAllBookingsCountByDateStrandTime(date, time, source).then( res => {\n            if (res.data.count >= 0)\n            {\n                setBookingsCount(res.data.count);\n                setState(state => ({...state, AdminCalendarCache : [...state.AdminCalendarCache, {method: 'getBookingsCountByDateStrandTime' , query : `${date}${time}`, res: res}]}));\n            }  \n        }).catch( err => \n            {\n                //do nothing\n            });\n     \n        return () => {\n           if (source)\n              source.cancel('Cancelling in cleanup');\n        }\n     \n    }, [date, time]);\n\n\n    const getBookingsCountLabel = (_bookingsCount) =>\n    {\n        if (_bookingsCount === -1)\n        {\n            return (\n                <div className={classes.LoadingProgress}>\n                      <CircularProgress disableShrink  />\n                </div>\n            );  \n        }\n        else if (_bookingsCount > 0)\n        {\n            if (_bookingsCount >= MAX_BOOKING_COUNT)\n            {\n                return (\n                    <div onClick={(event => dayClicked(event,cellDate))} className={classes.BookingCountLabelBusy}>\n                        {_bookingsCount}\n                    </div>\n                );\n            }\n            else\n            {\n                return (\n                    <div onClick={(event => dayClicked(event,cellDate))} className={classes.BookingCountLabel}>\n                        {_bookingsCount}\n                    </div>\n                );\n            }\n        }\n    }\n\n    const getBookingsCountGauge = (_bookingsCount) =>\n    {\n        if (_bookingsCount > 0 )\n        {\n            let percent = (_bookingsCount / MAX_BOOKING_COUNT) * 100;\n            if (percent > 100)\n            {\n                percent = 100;\n            }\n\n            // percent = 100 - percent;\n\n            return (\n\n                <div className={classes.BookingCountGauge}>\n                  <div style={{padding:\"0\", margin:\"0\", width:\"100%\", height:\"100%\", backgroundColor: \"#f5f5f5\"}} >\n                        <div  style={{padding:\"0\", margin:\"0\", height:\"100%\", width:`${percent}%`, backgroundColor: \"#3f51b5\"}} >\n\n                        </div>\n                  </div>\n                </div>\n            );\n        }\n    }\n\n    return (\n        <React.Fragment>\n\n            <div className={isPast ? classes.ContainerPast : classes.Container}>\n\n              {getBookingsCountLabel(bookingsCount)}\n\n              {getBookingsCountGauge(bookingsCount)}\n\n            </div>\n\n        </React.Fragment>\n\n\n    );\n}\n\nWeekViewCell.propTypes = {\n    key: PropTypes.string.isRequired,\n    date: PropTypes.string.isRequired,\n    time: PropTypes.string.isRequired,\n    dayClicked: PropTypes.func\n  };\n\n \n  \nexport default WeekViewCell;","import React, { useEffect, useState } from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport PropTypes from 'prop-types';\nimport WeekViewCell from './WeekViewCell';\nimport dateformat from 'dateformat';\n\nconst rows = [\n    '09:00 AM',\n    '09:15 AM', \n    '09:30 AM', \n    '09:45 AM',\n    '10:00 AM',\n    '10:15 AM',\n    '10:30 AM',\n    '10:45 AM',\n    '11:00 AM',\n    '11:15 AM',\n    '11:30 AM',\n    '11:45 AM',\n    '12:00 PM',\n    '12:15 PM',\n    '12:30 PM',\n    '12:45 PM',\n    '01:00 PM',\n    '01:15 PM',\n    '01:30 PM',\n    '01:45 PM',\n    '02:00 PM',\n    '02:15 PM',\n    '02:30 PM',\n    '02:45 PM',\n    '03:00 PM',\n    '03:15 PM',\n    '03:30 PM',\n    '03:45 PM',\n    '04:00 PM',\n    '04:15 PM',\n    '04:30 PM',\n    '04:45 PM',\n    '05:00 PM',\n    '05:15 PM',\n    '05:30 PM',\n    '05:45 PM',\n];\n\nconst useStyles = makeStyles((theme) => ({\n\n    table: {\n        width: \"100%\",\n        border: \"1px solid #ddd\",\n        borderCollapse: \"collapse\",\n        overflowY: \"auto\"\n    },\n\n    th: {\n        border: \"1px solid #ddd\",\n        borderCollapse: \"collapse\",\n        verticalAlign: \"middle\",\n        fontcolor: \"#555\",\n        fontWeight: \"400\",\n        fontSize: \"15px\",\n        paddingTop: \"5px\",\n        paddingBottom: \"5px\",\n        width: \"12%\", \n    },\n\n    td: {\n        border: \"1px solid #ddd\",\n        borderCollapse: \"collapse\",\n        verticalAlign: \"middle\",\n        height : \"50px\",\n        width: \"12%\", \n    }\n\n  }));\n\nconst WeekView = ({dates, dayClicked}) => {\n    const classes = useStyles();\n\n    return (\n        <React.Fragment>\n\n        <div style={{overflowY: \"scroll\" , height: \"60px\"}}>\n            <table className={classes.table}>\n                <thead>\n                    <tr>\n                        <th style={{width: \"7%\"}}>\n                        \n                        </th>\n                            {dates.map(date => (\n                                <th className={classes.th}>\n                                    <div style={{paddingBottom: \"5px\", color: \"#aaa\"}}>\n                                         {dateformat(date, 'ddd')}\n                                    </div>\n                                    <div>\n                                        <span style={{color: \"#aaa\"}}>\n                                            {dateformat(date, 'mmm ')}\n                                        </span> \n                                        <span  style={(dateformat(new Date(),'yyyy-mm-dd') === dateformat(date, 'yyyy-mm-dd')) ? { backgroundColor: \"#1a73e8\", color: \"#fff\", borderRadius: \"50%\",  padding: \"5px\",} : {color: \"#333\", fontWeight:\"500\"}}>\n                                             {dateformat(date, ' d')}\n                                        </span>\n                                       \n                                    </div>\n                                </th>\n                        ))}\n                    </tr>\n                </thead>\n             </table>\n\n        </div>\n\n            <div style={{overflowY: \"scroll\" , height: \"70vh\"}}>\n                <table className={classes.table}>   \n                    <tbody>\n                        {rows.map(row => (\n                            <tr>\n                                <td style={{width: \"7%\"}}>\n                                    {row}\n                                </td>\n                                {dates.map(day => (\n                                    <td className={classes.td}>\n                                        <WeekViewCell \n                                                dayClicked = {dayClicked}\n                                                key={`${dateformat(day,'yyyy-mm-dd')}-${row.replace(':','-')}`} \n                                                date={dateformat(day,'yyyy-mm-dd')} \n                                                time={row}/>\n                                    </td>\n                                ))}\n                            </tr>\n                        ))}            \n                    </tbody>\n                </table>\n            </div>                    \n      \n        </React.Fragment>\n\n\n    );\n}\n\nWeekView.propTypes = {\n    dates: PropTypes.arrayOf(PropTypes.any).isRequired,\n    dayClicked: PropTypes.func\n  };\n\n\nexport default WeekView;","import React, { useEffect, useState } from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport PropTypes from 'prop-types';\nimport dateformat from 'dateformat';\nimport BookService from '../services/BookService';\n\nimport CircularProgress from '@material-ui/core/CircularProgress';\nimport GlobalState from '../../GlobalState';\nimport BookingDialog from '../BookingDialog';\n\nconst useStyles = makeStyles((theme) => ({\n\n    Container: {\n        width: \"100%\",\n        height : \"50px\",\n        position: \"relative\",\n        backgroundColor: \"#fff\",\n        display: \"flex\",\n        alignItems : \"flex-start\",\n        justifyItems: \"flex-start\",\n        paddingLeft : \"10px\"\n\n    },\n\n    ContainerPast: {\n        width: \"100%\",\n        paddingTop: \"50px\",\n        position: \"relative\",\n        backgroundColor: \"#fafafa\"\n    },\n    \n    DayLabel: {\n        position: \"absolute\",\n        top: \"5px\",\n        right: \"5px\",\n        color: \"#555\",\n        fontSize: \"1rem\"\n    },\n\n    DayLabelDisabled: {\n        position: \"absolute\",\n        top: \"5px\",\n        right: \"5px\",\n        color: \"#ddd\",\n        fontSize: \"1rem\"\n    },\n\n    LoadingProgress: {\n        position: \"absolute\",\n        top: \"10%\",\n        left: \"40%\",\n      },\n\n      BookingCountGauge: {\n        position: \"absolute\",\n        bottom: \"5%\",\n        left: \"8%\",\n        width : \"85%\",\n        height: \"8%\"\n    },\n\n    bookingBox: {\n        display: \"flex\",\n        marginRight: \"10px\",\n        marginTop: \"5px\",\n        padding: \"10px\",\n        maxWidth : \"150px\",\n        overflowX: \"hidden\",\n        border : \"1px solid #eee\",\n        fontSize: \"12px\",\n        fontWeight : \"500\",\n        cursor: \"pointer\",\n        backgroundColor: \"#ebedf7\",\n        color: \"#3f51b5\",\n        boxShadow: \"2px 4px #fafafa\",\n\n        \"&:hover\": {\n            background: \"#3f51b5\",\n            color: \"#ebedf7\"\n          },\n    },\n\n    bookingBoxSampleTaken: {\n        display: \"flex\",\n        marginRight: \"10px\",\n        marginTop: \"5px\",\n        padding: \"10px\",\n        maxWidth : \"150px\",\n        overflowX: \"hidden\",\n        border : \"1px solid #eee\",\n        fontSize: \"12px\",\n        fontWeight : \"500\",\n        cursor: \"pointer\",\n        backgroundColor: \"#0066cc\",\n        color: \"#eee\",\n        boxShadow: \"2px 4px #fafafa\",\n\n        \"&:hover\": {\n            background: \"#0059b3\",\n            color: \"#fafafa\"\n          },\n    },\n\n    bookingBoxPositive: {\n        display: \"flex\",\n        marginRight: \"10px\",\n        marginTop: \"5px\",\n        padding: \"10px\",\n        maxWidth : \"150px\",\n        overflowX: \"hidden\",\n        border : \"1px solid #eee\",\n        fontSize: \"12px\",\n        fontWeight : \"500\",\n        cursor: \"pointer\",\n        backgroundColor: \"#d40b0b\",\n        color: \"#fff2f2\",\n        boxShadow: \"2px 4px #fafafa\",\n\n        \"&:hover\": {\n            background: \"#bf0000\",\n            color: \"#fff\"\n          },\n    },\n\n    bookingBoxReportSent: {\n        display: \"flex\",\n        marginRight: \"10px\",\n        marginTop: \"5px\",\n        padding: \"10px\",\n        maxWidth : \"150px\",\n        overflowX: \"hidden\",\n        border : \"1px solid #eee\",\n        fontSize: \"12px\",\n        fontWeight : \"500\",\n        cursor: \"pointer\",\n        backgroundColor: \"#009900\",\n        color: \"#eee\",\n        boxShadow: \"2px 4px #fafafa\",\n\n        \"&:hover\": {\n            background: \"#006e00\",\n            color: \"#fafafa\"\n          },\n    },\n\n  \n\n  }));\n\n\n\nconst DayViewCell = ({key, date, time}) => {\n    const classes = useStyles();\n\n    const [state, setState] = React.useContext(GlobalState);\n    const [bookings, setBookings] = React.useState(null);\n    const [filteredBookings, setFilteredBookings] = React.useState(null);\n    const [selectedBooking, setSelectedBooking] = React.useState(null);\n\n    const [refresh, setRefresh] = React.useState(true); \n\n    const [isPast, setIsPast] = React.useState(false);\n\n    const [openDialog, setOpenDialog] = React.useState(false);\n\n\n    useEffect( () => {\n        const todayStr = dateformat(new Date(), 'yyyy-mm-dd');\n        setIsPast(date < todayStr);\n\n    }, [date]);\n\n    useEffect( () => \n    {\n        if (bookings) {\n\n\n            if (state.dayViewCalFilter && state.dayViewCalFilter.trim().length > 0)\n            {\n                const search = state.dayViewCalFilter.trim().toUpperCase();\n                setFilteredBookings( bookings.filter(booking => booking.forenameCapital.indexOf(search) >= 0\n                                                            ||  booking.surnameCapital.indexOf(search) >= 0\n                                                            ||  `${booking.forenameCapital} ${booking.surnameCapital}`.indexOf(search) >= 0\n                    \n                    ));\n            }\n            else\n            {\n                setFilteredBookings([...bookings]);\n            }\n        }\n\n    }, [state.dayViewCalFilter, bookings]);\n \n\n\n    useEffect ( () => {\n       \n        const fetchData = async () =>\n        {\n            if (!date || date.length <= 0 || !time || time.length <= 0)\n            {\n                return;\n            }\n         \n            // if (isPast)\n            // {\n            //     setBookings([]);\n            //     return;\n            // }\n    \n            setBookings(null);\n    \n            var res = state.AdminCalendarCache?.find(record => record.method === 'getBookingsByDateStrandTime' && record.query === `${date}${time}`)?.res;\n            if (!res || openDialog)\n            {\n                res = await BookService.getAllBookingsByDateStrandTime(date, time);\n                setState(state => ({...state, AdminCalendarCache : [...state.AdminCalendarCache, {method: 'getBookingsByDateStrandTime' , query : `${date}${time}`, res: res}]}));\n            }\n          \n          \n            if (res.data.status === 'OK')\n            {\n                setBookings(res.data.bookings);\n            }   \n        }\n\n        if (openDialog)\n        {\n            setState(state => ({...state, AdminCalendarCache : state.AdminCalendarCache.filter(record => !(record.method === 'getBookingsByDateStrandTime' && record.query ===  `${date}${time}`))}));\n            setState(state => ({...state, AdminCalendarCache : state.AdminCalendarCache.filter(record => !(record.method === 'getBookingsCountByDateStrandTime' && record.query ===  `${date}${time}`))}));\n            setState(state => ({...state, AdminCalendarCache : state.AdminCalendarCache.filter(record => !(record.method === 'getBookingsCountByDateStr' && record.query ===  date))}));\n        }\n\n         fetchData();\n     \n    }, [date, time, state.bookingDialogDataChanged]);\n\n    const bookingCliked = (event, booking) =>\n    {\n        setSelectedBooking(booking);\n        setOpenDialog(true);\n    }\n\n    \n\n    const getBookingClass = (status) =>\n    {\n        switch (status) {\n\n            case 'sample_taken':\n                return classes.bookingBoxSampleTaken;\n            case 'positive':\n                return classes.bookingBoxPositive;\n            case 'report_sent':\n            case 'report_cert_sent':\n                return classes.bookingBoxReportSent;     \n\n            default : \n                return classes.bookingBox;\n        }\n    }\n\n    const getBookingsBox = (_bookings) =>\n    {\n        if (_bookings === null) \n        {\n            return (\n                <div className={classes.LoadingProgress}>\n                      <CircularProgress disableShrink  />\n                </div>\n            );  \n        }\n        else if (_bookings.length > 0)\n        {\n           return (\n                _bookings.map(booking => (\n\n                    <div style={booking.tr ? {borderTop: \"5px solid #d00fd6\"} : {} } className={getBookingClass(booking.status)} onClick={event => bookingCliked(event,booking)}>\n\n                        {`${booking.forenameCapital}-${booking.surnameCapital}`.substring(0,15)}\n\n                    </div>\n\n                ))\n\n           );\n        }\n    }\n\n\n    const handleCloseDialog = () =>\n    {\n        setOpenDialog(false);\n    }\n\n    return (\n        <React.Fragment>\n\n            <div className={classes.Container}>\n\n              {getBookingsBox(filteredBookings)}\n\n            </div>\n\n            <BookingDialog\n                booking={selectedBooking}\n                open={openDialog}\n                onClose={handleCloseDialog}\n            />\n\n        </React.Fragment>\n\n\n    );\n}\n\nDayViewCell.propTypes = {\n    key: PropTypes.string.isRequired,\n    date: PropTypes.string.isRequired,\n    time: PropTypes.string.isRequired,\n  };\n\n \n  \nexport default DayViewCell;","import React, { useEffect, useState } from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport PropTypes from 'prop-types';\nimport DayViewCell from './DayViewCell';\nimport dateformat from 'dateformat';\n\nconst rows = [\n    '09:00 AM',\n    '09:15 AM', \n    '09:30 AM', \n    '09:45 AM',\n    '10:00 AM',\n    '10:15 AM',\n    '10:30 AM',\n    '10:45 AM',\n    '11:00 AM',\n    '11:15 AM',\n    '11:30 AM',\n    '11:45 AM',\n    '12:00 PM',\n    '12:15 PM',\n    '12:30 PM',\n    '12:45 PM',\n    '01:00 PM',\n    '01:15 PM',\n    '01:30 PM',\n    '01:45 PM',\n    '02:00 PM',\n    '02:15 PM',\n    '02:30 PM',\n    '02:45 PM',\n    '03:00 PM',\n    '03:15 PM',\n    '03:30 PM',\n    '03:45 PM',\n    '04:00 PM',\n    '04:15 PM',\n    '04:30 PM',\n    '04:45 PM',\n    '05:00 PM',\n    '05:15 PM',\n    '05:30 PM',\n    '05:45 PM',\n];\n\nconst useStyles = makeStyles((theme) => ({\n\n    table: {\n        width: \"100%\",\n        border: \"1px solid #ddd\",\n        borderCollapse: \"collapse\",\n        overflowY: \"auto\"\n    },\n\n    th: {\n        border: \"1px solid #ddd\",\n        borderCollapse: \"collapse\",\n        verticalAlign: \"middle\",\n        fontcolor: \"#555\",\n        fontWeight: \"400\",\n        fontSize: \"15px\",\n        paddingTop: \"5px\",\n        paddingBottom: \"5px\",\n        width: \"12%\", \n    },\n\n    td: {\n        border: \"1px solid #ddd\",\n        borderCollapse: \"collapse\",\n        verticalAlign: \"middle\",\n        height : \"50px\",\n        width: \"84%\", \n    },\n\n    titleLabel: {\n        paddingBottom: \"17px\",\n        paddingTop: \"17px\",\n        color: \"#777\",\n        fontSize: \"16px\"\n    },\n\n    titleLabelToday: {\n        paddingBottom: \"17px\",\n        paddingTop: \"17px\",\n        color: \"#fff\",\n        backgroundColor: \"#1a73e8\",\n        fontSize: \"16px\"\n    },\n\n  }));\n\nconst DayView = ({date}) => {\n    const classes = useStyles();\n\n    return (\n        <React.Fragment>\n\n        <div style={{overflowY: \"scroll\" , height: \"60px\"}}>\n            <table className={classes.table}>\n                <thead>\n                    <tr>\n                        <th style={{width: \"7%\"}}>\n                        \n                        </th>\n                        <th style={{width: \"84%\"}}>\n                                <div className={(dateformat(new Date(),'yyyy-mm-dd') === dateformat(date, 'yyyy-mm-dd')) ? classes.titleLabelToday : classes.titleLabel }>\n                                        {dateformat(date,'dddd')}\n                                </div>                                \n                        </th>\n                    </tr>\n                </thead>\n             </table>\n\n        </div>\n\n            <div style={{overflowY: \"scroll\" , height: \"70vh\"}}>\n                <table className={classes.table}>   \n                    <tbody>\n                        {rows.map(row => (\n                            <tr>\n                                <td style={{width: \"7%\"}}>\n                                    {row}\n                                </td>\n                               \n                                <td className={classes.td}>\n                                     <DayViewCell key={`${dateformat(date,'yyyy-mm-dd')}-${row}`} date={dateformat(date,'yyyy-mm-dd')} time={row}/>  \n                                </td>\n                            \n                            </tr>\n                        ))}            \n                    </tbody>\n                </table>\n            </div>                    \n      \n        </React.Fragment>\n\n\n    );\n}\n\nDayView.propTypes = {\n    date: PropTypes.any.isRequired\n  };\n\n\nexport default DayView;","import React, { useEffect, useState } from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport MonthView from './MonthView';\nimport { Button, Grid, IconButton, InputAdornment, TextField, Tooltip } from '@material-ui/core';\nimport ToggleButton from '@material-ui/lab/ToggleButton';\nimport ToggleButtonGroup from '@material-ui/lab/ToggleButtonGroup';\n\nimport NavigateBeforeIcon from '@material-ui/icons/NavigateBefore';\nimport NavigateNextIcon from '@material-ui/icons/NavigateNext';\nimport WeekView from './WeekView';\nimport dateformat from 'dateformat';\nimport DayView from './DayView';\nimport GlobalState from '../../GlobalState';\n\nimport CloseIcon from '@material-ui/icons/Close';\n\n\n\nconst monthNames = [\"January\", \"February\", \"March\", \"April\", \"May\", \"June\",\n  \"July\", \"August\", \"September\", \"October\", \"November\", \"December\"\n];\n\nconst useStyles = makeStyles((theme) => ({\n\n    title: {\n        textAlign: \"center\",\n        fontSize: \"24px\",\n        fontColor: \"#333\"\n    },\n\n  }));\n\nexport default function CalendarView() {\n    const classes = useStyles();\n\n    const [state, setState] = React.useContext(GlobalState);\n\n    const [month, setMonth] = React.useState(new Date().getMonth() + 1);\n    const [year, setYear] = React.useState(new Date().getFullYear());\n\n    const [day, setDay] = React.useState(new Date());\n\n    const [firstDayofWeek, setFirstDayofWeek] = React.useState(new Date());\n\n    const [weekDates, setWeekDates] = React.useState([]);\n\n    const [mode, setMode] = React.useState('month');\n    const [selectedTab, setSeletedTab] = React.useState('month');\n\n    const [filter,setFilter] = React.useState('');\n\n    const filterChanged = (event) =>{\n        setFilter(event.target.value);\n        setState(state => ({...state, dayViewCalFilter : event.target.value?.trim()?.toUpperCase()}))\n      }\n\n      const removeFilter = () =>\n      {\n        setFilter('');\n        setState(state => ({...state, dayViewCalFilter : ''}));\n      }\n\n\n    useEffect( () => {\n        const today = new Date();\n        const dayofWeek = today.getDay();\n        const firstdayofweek = new Date(today.getTime() - ( dayofWeek * 86400000));\n        setFirstDayofWeek(firstdayofweek);\n        setState(state => ({...state, AdminCalendarCache : []}));\n\n        return () =>\n        {\n            setState(state => ({...state, AdminCalendarCache : []}));\n            removeFilter();\n        }\n       \n    }, []);\n\n\n    useEffect( () => {\n        const dates = [];\n        for (var i = 0; i < 7 ; i++)\n        {\n            dates.push(new Date(firstDayofWeek.getTime() + ( i * 86400000)));\n        }\n        setWeekDates(dates);\n\n    }, [firstDayofWeek]);\n\n    const handlePrevButton = (event) =>\n    {\n       if (mode === 'month')\n       {\n            if (month === 1)\n            {\n                setYear(year - 1);\n            } \n\n            const newMonth = month === 1 ? 12 : month - 1;\n            setMonth(newMonth);\n\n            const newDay = new Date(year, newMonth - 1 , 1, 0 ,0 ,0 ,0);\n            setDay(newDay);\n\n            const dayofWeek = newDay.getDay();\n            setFirstDayofWeek(new Date(newDay.getTime() - ( dayofWeek * 86400000)));\n\n       } \n       else if (mode === 'week')\n       {\n           const newFirstDayofWeek = new Date(firstDayofWeek.getTime() - ( 7 * 86400000));\n           setFirstDayofWeek(newFirstDayofWeek);\n\n           setDay(newFirstDayofWeek);\n           setMonth(newFirstDayofWeek.getMonth() + 1);\n           setYear(newFirstDayofWeek.getFullYear());\n\n       }\n       else if (mode === 'day')\n       {\n           const newDay = new Date(day.getTime() - ( 1 * 86400000));\n           setDay(newDay);\n\n           const dayofWeek = newDay.getDay();\n           setFirstDayofWeek(new Date(newDay.getTime() - ( dayofWeek * 86400000)));\n\n           setMonth(newDay.getMonth() + 1);\n           setYear(newDay.getFullYear());\n       }\n    }\n\n    const handleNextButton = (event) =>\n    {\n        if (mode === 'month')\n        {\n            if (month === 12)\n            {\n                setYear(year + 1);\n            } \n       \n            const newMonth = month === 12 ? 1 : month + 1;\n            setMonth(newMonth);\n\n            const newDay = new Date(year, newMonth - 1 , 1, 0 ,0 ,0 ,0);\n            setDay(newDay);\n\n            const dayofWeek = newDay.getDay();\n            setFirstDayofWeek(new Date(newDay.getTime() - ( dayofWeek * 86400000)));\n        }\n        else if (mode === 'week')\n        {\n            const newFirstDayofWeek = new Date(firstDayofWeek.getTime() + ( 7 * 86400000));\n            setFirstDayofWeek(newFirstDayofWeek);\n\n            setDay(newFirstDayofWeek);\n            setMonth(newFirstDayofWeek.getMonth() + 1);\n            setYear(newFirstDayofWeek.getFullYear());\n\n        }\n        else if (mode === 'day')\n        {\n            const newDay = new Date(day.getTime() + ( 1 * 86400000));\n            setDay(newDay);\n\n            const dayofWeek = newDay.getDay();\n            setFirstDayofWeek(new Date(newDay.getTime() - ( dayofWeek * 86400000)));\n \n            setMonth(newDay.getMonth() + 1);\n            setYear(newDay.getFullYear());\n        }\n    }\n\n    const goToday = (event) => {\n        const newDay = new Date();\n        const dayofWeek = newDay.getDay();\n        setFirstDayofWeek(new Date(newDay.getTime() - ( dayofWeek * 86400000)));\n        setDay(newDay);\n        setMonth(newDay.getMonth() + 1);\n        setYear(newDay.getFullYear());\n    }\n\n    const dayClicked = (event, date) =>\n    {\n        const newDay = new Date(date);\n        const dayofWeek = newDay.getDay();\n        setFirstDayofWeek(new Date(newDay.getTime() - ( dayofWeek * 86400000)));\n        setDay(newDay);\n        setMonth(newDay.getMonth() + 1);\n        setYear(newDay.getFullYear());\n        setSeletedTab('day');\n        setMode('day');\n    }\n\n    const getContentFromMode = (_mode) => {\n        if (_mode === 'month')\n        {\n            return (\n                <MonthView dayClicked={dayClicked} month={month} year={year}/>    \n            );\n        }    \n        else if (_mode === 'week')\n        {\n            return (\n                    <WeekView dayClicked={dayClicked} dates={weekDates}/>\n            );\n            \n        }\n        else if (_mode === 'day')\n        {\n            return (\n                <DayView date={day}/>\n            );\n        }\n    }\n\n    const getCalendarTitleFromMode = (_mode) => {\n        if (_mode === 'month')\n        {\n            return (\n                <span className={classes.title}> {`${monthNames[month - 1]} ${year}`} </span>   \n            );\n        }    \n        else if (_mode === 'week')\n        {\n            const endOfWeek = new Date(firstDayofWeek.getTime() + ( 6 * 86400000));\n            let endofWeekStr = '';\n            if (endOfWeek.getMonth() === firstDayofWeek.getMonth())\n            {\n                endofWeekStr = dateformat(endOfWeek,'d');\n            }else\n            {\n                endofWeekStr = dateformat(endOfWeek,'mmm d');\n            }\n\n            return (\n                <span className={classes.title}> {`${dateformat(firstDayofWeek,'mmm d')} - ${endofWeekStr}, ${year}`} </span>\n            );\n            \n        }\n        else if (_mode === 'day')\n        {\n            return (\n                <span className={classes.title}> {`${dateformat(day,'mmmm d, yyyy')}`} </span>\n            );\n        }\n    }\n\n\n    const handleTabChanged = (event, value) => {\n        if (value && value.length)\n        {\n          setSeletedTab(value);\n          setMode(value);\n        }\n    };\n\n    const getPrevButtonTitle = (_mode) =>\n    {\n        return `Previuos ${mode}`;\n    }\n\n    const getNextButtonTitle = (_mode) =>\n    {\n        return `Next ${mode}`;\n    }\n\n    return (\n        <React.Fragment>\n\n          <Grid\n            container\n            direction=\"row\"\n            justify=\"space-between\"\n            alignItems=\"center\"\n            style= {{marginBottom: \"10px\", marginTop: \"0px\"}}\n            >  \n\n            <Grid item md={3}>\n                <div  style={{display:\"flex\", alignItems: \"flex-start\", justifyContent: \"flex-start\" , paddingLeft: \"10px\"}}>\n                    <Tooltip title={getPrevButtonTitle(mode)} placement=\"bottom-start\">\n                        <IconButton \n                                color=\"default\" \n                                aria-label=\"prev\"\n                                onClick = {handlePrevButton}\n                                >\n                            <NavigateBeforeIcon style={{fontSize: '2rem'}}/>\n                        </IconButton>\n                    </Tooltip>\n\n                    <Tooltip title={getNextButtonTitle(mode)} placement=\"bottom-end\">\n                        <IconButton \n                                color=\"default\" \n                                aria-label=\"next\"\n                                onClick = {handleNextButton}\n                                >\n                            <NavigateNextIcon style={{fontSize: '2rem'}}/>\n                        </IconButton>\n                    </Tooltip>\n\n                    <Button style={{marginTop: \"11px\", marginLeft: \"10px\"}} onClick={goToday} variant=\"outlined\"> Today </Button>\n                </div>\n\n            </Grid>\n\n            <Grid item md={6}>\n\n                    <Grid\n                        container\n                        direction=\"row\"\n                        justify=\"center\"\n                        alignItems=\"flex-end\"\n                        spacing = {3}\n                        >\n                            <Grid item>\n                                    {getCalendarTitleFromMode(mode)}\n                            </Grid>\n                            {mode === 'day' && (\n                                        <Grid item>\n                                                <TextField\n                                                    variant=\"standard\"\n                                                    style={{marginBottom : \"5px\"}}\n                                                    value={filter}\n                                                    onChange={filterChanged}\n                                                    margin=\"normal\"\n                                                    size=\"small\"\n                                                    id=\"filter\"\n                                                    label=\"Filter\"\n                                                    name=\"filter\"\n                                                    autoComplete=\"off\"\n                                                    InputProps={{\n                                                        endAdornment : \n                                                            <InputAdornment position=\"end\">\n                                                                <Tooltip title=\"Clear\">\n                                                                            <IconButton\n                                                                            aria-label=\"remove filter\"\n                                                                            onClick={() => removeFilter()}\n                                                                            onMouseDown={() => removeFilter()}\n                                                                        >\n                                                                            <CloseIcon/>\n                                                                        </IconButton>\n                                                                </Tooltip>\n                                                            \n                                                            </InputAdornment>\n                                                          \n                                                    }}\n                                                   \n                                                />\n                                        </Grid>\n                            )}\n                           \n                    </Grid>\n                \n            </Grid>\n\n            <Grid item md={3}>\n                <div  style={{display:\"flex\", alignItems: \"flex-end\", justifyContent: \"flex-end\", paddingRight: \"10px\" }}>\n                    <ToggleButtonGroup\n                        value={selectedTab}\n                        exclusive\n                        onChange={handleTabChanged}\n                        aria-label=\"select view mode\"\n                    >\n                        <ToggleButton style={selectedTab === 'month' ? {width: \"80px\", color: \"#3f51b5\", backgroundColor: \"#ebedf7\" } : {width: \"80px\"}} value=\"month\" aria-label=\"month view\">\n                                month\n                        </ToggleButton>\n                        <ToggleButton style={selectedTab === 'week' ? {width: \"80px\", color: \"#3f51b5\", backgroundColor: \"#ebedf7\"} : {width: \"80px\"}}  value=\"week\" aria-label=\"week view\">\n                                week\n                        </ToggleButton>\n                        <ToggleButton style={selectedTab === 'day' ? {width: \"80px\", color: \"#3f51b5\", backgroundColor: \"#ebedf7\"} : {width: \"80px\"}} value=\"day\" aria-label=\"day view\">\n                                day\n                        </ToggleButton>\n                    </ToggleButtonGroup>\n                </div>\n            </Grid>\n\n           </Grid> \n\n             {getContentFromMode(mode)}\n\n        </React.Fragment>\n\n\n    );\n\n}","import axios from 'axios';\nimport { authToken, backendAPI } from '../../GlobalPath';\n\nexport default axios.create({\n  baseURL: backendAPI,\n  headers : {\n      'Authorization' : authToken,\n       'Content-Type': 'application/json',\n  }\n});","import API from './api';\nimport axiosRetry from 'axios-retry';\n\nexport default class BookService {\n\n   static changeDepositBooking = (bookingId, deposit) => {\n      return API.post(`/api/gynae/book/changedepositbooking?id=${bookingId}&deposit=${deposit}`);\n   }\n\n   static addNewBooking = (payload) =>\n   {\n      return API.post(`/api/gynae/book/addnewbooking`, payload);\n   }\n\n   static sendRegFormEmail = (bookingId) =>\n   {\n      return API.post(`/api/gynae/book/sendregformemail?id=${bookingId}`);\n   }\n\n   static payBooking = (bookingId,price, paymentMethod, corporate) =>\n   {\n      return API.post(`/api/gynae/book/paybooking?id=${bookingId}&paymentmethod=${paymentMethod}&corporate=${corporate}&price=${price}`);\n   }\n\n   static unPayBooking = (bookingId) =>\n   {\n      return API.post(`/api/gynae/book/unpaybooking?id=${bookingId}`);\n   }\n\n   static getShouldRefundsCount = () =>\n   {\n      return API.get(`/api/gynae/book/getshouldrefundscount?`);\n   }\n\n   static manualRefundBooking = (bookingId) =>\n   {\n      return API.post(`/api/gynae/payment/manualrefundpayment`, {bookingId: bookingId});\n   }\n\n   static refundBooking = (bookingId) =>\n   {\n      return API.post(`/api/gynae/payment/refundpayment`, {bookingId: bookingId});\n   }\n\n   static getBookingsStatsByDateStr = (dateStr) =>\n   {\n      return API.get(`/api/gynae/book/getbookingsstatsbydatestr?date=${dateStr}`);\n   }\n\n   static getBookingsCountByDateStr = (dateStr) =>\n   {\n      return API.get(`/api/gynae/book/getbookingscountbydatestr?date=${dateStr}`);\n   }\n\n   static getAllBookingsCountAll = () =>\n   {\n      return API.get(`/api/gynae/book/getallbookingscountall`);\n   }\n\n   static getBookingsCountByDateStrandTime = (dateStr, time, source) =>\n   {\n      return API.get(`/api/gynae/book/getbookingscountbydatestrandtime?date=${dateStr}&time=${time}`, {cancelToken: source.token});\n   }\n\n   static getBookingsByDateStrandTime = (dateStr, time) =>\n   {\n      return API.get(`/api/gynae/book/getbookingsbydatestrandtime?date=${dateStr}&time=${time}`);\n   }\n\n\n   static getAllBookingsCountByDateStr = (dateStr) =>\n   {\n      return API.get(`/api/gynae/book/getallbookingscountbydatestr?date=${dateStr}`);\n   }\n\n   static getAllBookingsCountByDateStrandTime = (dateStr, time, source) =>\n   {\n      return API.get(`/api/gynae/book/getallbookingscountbydatestrandtime?date=${dateStr}&time=${time}`, {cancelToken: source.token});\n   }\n\n   static getAllBookingsByDateStrandTime = (dateStr, time) =>\n   {\n      return API.get(`/api/gynae/book/getallbookingsbydatestrandtime?date=${dateStr}&time=${time}`);\n   }\n\n   static changeBackToBookingMade = (id) =>\n   {\n      return API.post(`/api/gynae/book/changebacktobookingmade?id=${id}`);\n   }\n\n   static changeToPatientAttended = (id) =>\n   {\n      return API.post(`/api/gynae/book/changetopatientattended?id=${id}`);\n   }\n\n   static updateBooking = (payload) =>\n   {\n      return API.post(`/api/gynae/book/updatebookappointment`, payload);\n   } \n\n   static updateBookingTime = (payload) =>\n   {\n      return API.post(`/api/gynae/book/updatebookappointmenttime`, payload);\n   } \n\n   static deleteBooking = (id) =>\n   {\n      return API.post(`/api/gynae/book/deletebookappointment?id=${id}`);\n   } \n\n   static unDeleteBooking = (id) =>\n   {\n      return API.post(`/api/gynae/book/undeletebookappointment?id=${id}`);\n   } \n   \n    static getBookingsByRef = (ref) =>\n    {\n       return API.get(`/api/gynae/book/getbookingsbyref?ref=${ref}`);\n    }\n\n    static getBookingById = (id) =>\n    {\n       return API.get(`/api/gynae/book/getbookingbyid?id=${id}`);\n    }\n\n    static getAllBookings = (limit) =>\n    {\n      if (!limit) limit = 25 \n      return API.get(`/api/gynae/book/getallbookings?limit=${limit}`);\n    }\n\n    static getDeletedBookings= (limit) =>\n    {\n      if (!limit) limit = 25 \n       return API.get(`/api/gynae/book/getdeletedbookings?limit=${limit}`);\n    }\n\n    static getTodayBookings= () =>\n    {\n       return API.get(`/api/gynae/book/gettodaybookings`);\n    }\n\n    static getOldBookings= (limit) =>\n    {\n      if (!limit) limit = 25 \n       return API.get(`/api/gynae/book/getoldbookings?limit=${limit}`);\n    }\n\n    static getFutureBookings= (limit) =>\n    {\n      if (!limit) limit = 25 \n       return API.get(`/api/gynae/book/getfuturebookings?limit=${limit}`);\n    }\n\n    static getRecentBookings= () =>\n    {\n       return API.get(`/api/gynae/book/getrecentbookings`);\n    }\n\n    static getRecentBookingsAll= (limit) =>\n    {\n      if (!limit) limit = 25 \n       return API.get(`/api/gynae/book/getrecentbookingsall?limit=${limit}`);\n    }\n}","import API from './api';\n\nexport default class PDFService {\n\n\n    static downloadGynaeRegForm = (id) =>\n    {\n       return API.get(`/api/pdf/downloadgynaeregform?id=${id}`, {\n        responseType: 'arraybuffer',\n        id: id,\n        headers: {\n            Accept: 'application/pdf',\n        }\n        });\n    }\n\n\n    static downloadCovidForm1 = (id) =>\n    {\n       return API.get(`/api/pdf/downloadcovidform1?id=${id}`, {\n        responseType: 'arraybuffer',\n        id: id,\n        headers: {\n            Accept: 'application/pdf',\n        }\n        });\n    }\n\n    static downloadCovidForm2 = (id) =>\n    {\n       return API.get(`/api/pdf/downloadcovidform2?id=${id}`, {\n        responseType: 'arraybuffer',\n        headers: {\n            Accept: 'application/pdf',\n        }\n        });\n    }\n\n    static downloadPdfResult = (id) =>\n    {\n       return API.get(`/api/pdf/downloadpdfresult?id=${id}`, {\n        responseType: 'arraybuffer',\n        headers: {\n            Accept: 'application/pdf',\n        }\n        });\n    }\n\n    static downloadPdfCert = (id) =>\n    {\n       return API.get(`/api/pdf/downloadpdfcert?id=${id}`, {\n        responseType: 'arraybuffer',\n        headers: {\n            Accept: 'application/pdf',\n        }\n        });\n    }\n\n    static downloadPdfLabReport = (id) =>\n    {\n       return API.get(`/api/pdf/downloadpdflabreport?id=${id}`, {\n        responseType: 'arraybuffer',\n        headers: {\n            Accept: 'application/pdf',\n        }\n        });\n    }\n\n\n}","import React, { useEffect, useRef, useState } from \"react\";\nimport BookService from \"./services/BookService\";\nimport Typography from \"@material-ui/core/Typography\";\nimport {\n  Backdrop,\n  Button,\n  Checkbox,\n  CircularProgress,\n  Divider,\n  FormControlLabel,\n  Grid,\n  InputAdornment,\n  InputLabel,\n  Link,\n  makeStyles,\n  MenuItem,\n  Select,\n  TextField,\n  Tooltip,\n} from \"@material-ui/core\";\nimport GlobalState from \"./../GlobalState\";\nimport { withStyles } from \"@material-ui/core/styles\";\n\nimport CreditCardIcon from \"@material-ui/icons/CreditCard\";\n\nimport Dialog from \"@material-ui/core/Dialog\";\nimport DialogContent from \"@material-ui/core/DialogContent\";\n\nimport DialogTitle from \"@material-ui/core/DialogTitle\";\nimport Draggable from \"react-draggable\";\nimport Paper from \"@material-ui/core/Paper\";\n\nimport Alert from \"@material-ui/lab/Alert\";\n\nimport PropTypes from \"prop-types\";\nimport LinearProgress from \"@material-ui/core/LinearProgress\";\nimport Box from \"@material-ui/core/Box\";\n\nimport Radio from \"@material-ui/core/Radio\";\nimport RadioGroup from \"@material-ui/core/RadioGroup\";\nimport FormControl from \"@material-ui/core/FormControl\";\nimport FormLabel from \"@material-ui/core/FormLabel\";\nimport { corporates } from \"./Corporates\";\nimport NumberFormat from \"react-number-format\";\n\n\nvar interval;\n\nconst useStyles = makeStyles((theme) => ({\n  title: {\n    marginTop: theme.spacing(0),\n    marginBottom: theme.spacing(1),\n  },\n\n  refreshButton: {\n    marginLeft: theme.spacing(2),\n  },\n\n  checkIcon: {\n    color: \"green\",\n  },\n\n  closeIcon: {\n    color: \"red\",\n  },\n\n  RefLink: {\n    cursor: \"pointer\",\n  },\n\n  BookedLabel: {\n    backgroundColor: \"#606060\",\n    color: \"#fff\",\n    paddingRight: \"10px\",\n    paddingLeft: \"10px\",\n  },\n\n  PatientAttendedLabel: {\n    backgroundColor: \"#0066aa\",\n    color: \"#fff\",\n    paddingRight: \"15px\",\n    paddingLeft: \"10px\",\n  },\n\n  SampleTakenLabel: {\n    backgroundColor: \"#0066cc\",\n    color: \"#fff\",\n    paddingRight: \"40px\",\n    paddingLeft: \"10px\",\n  },\n\n  ReportSentLabel: {\n    backgroundColor: \"#009900\",\n    color: \"#fff\",\n    paddingRight: \"90px\",\n    paddingLeft: \"10px\",\n  },\n\n  ReportCertSentLabel: {\n    backgroundColor: \"#009900\",\n    color: \"#fff\",\n    paddingRight: \"68px\",\n    paddingLeft: \"10px\",\n  },\n\n  archiveButton: {},\n\n  smartMatchButton: {\n    backgroundColor: \"#2f942e\",\n    \"&:hover\": {\n      background: \"green\",\n      color: \"#fff\",\n    },\n    textDecoration: \"none !important\",\n    marginRight: \"10px\",\n    // padding: \"10px\"\n  },\n\n  infoTitle: {\n    fontWeight: \"400\",\n  },\n\n  infoData: {\n    paddingLeft: \"10px\",\n    fontWeight: \"800\",\n  },\n\n  matchButton: {\n    marginTop: \"30px\",\n    marginBottom: \"20px\",\n    backgroundColor: \"#2f942e\",\n    \"&:hover\": {\n      background: \"green\",\n      color: \"#fff\",\n    },\n    textDecoration: \"none !important\",\n    padding: \"10px\",\n    paddingLeft: \"50px\",\n    paddingRight: \"50px\",\n  },\n\n  resendButton: {\n    marginTop: \"5px\",\n    marginBottom: \"5px\",\n    backgroundColor: \"#2f942e\",\n    \"&:hover\": {\n      background: \"green\",\n      color: \"#fff\",\n    },\n    textDecoration: \"none !important\",\n    padding: \"10px\",\n    paddingLeft: \"50px\",\n    paddingRight: \"50px\",\n  },\n\n  resendFilesButton: {\n    marginTop: \"5px\",\n    marginBottom: \"5px\",\n    backgroundColor: \"#3792ad\",\n    \"&:hover\": {\n      background: \"#2f798f\",\n      color: \"#fff\",\n    },\n    textDecoration: \"none !important\",\n    padding: \"10px\",\n    paddingLeft: \"50px\",\n    paddingRight: \"50px\",\n  },\n\n  cancelButton: {\n    marginBottom: \"10px\",\n    textDecoration: \"none !important\",\n    padding: \"10px\",\n    paddingLeft: \"90px\",\n    paddingRight: \"90px\",\n  },\n\n  backdrop: {\n    zIndex: theme.zIndex.drawer + 5,\n    color: \"#fff\",\n  },\n}));\n\nfunction NumberFormatCustom(props) {\n  const { inputRef, onChange, ...other } = props;\n\n  return (\n    <NumberFormat\n      {...other}\n      getInputRef={inputRef}\n      onValueChange={(values) => {\n        onChange({\n          target: {\n            name: props.name,\n            value: values.value,\n          },\n        });\n      }}\n      thousandSeparator\n      isNumericString\n      prefix=\"\"\n    />\n  );\n}\n\nNumberFormatCustom.propTypes = {\n  inputRef: PropTypes.func.isRequired,\n  name: PropTypes.string.isRequired,\n  onChange: PropTypes.func.isRequired,\n};\n\n\nconst BorderLinearProgress = withStyles((theme) => ({\n  root: {\n    height: 10,\n    borderRadius: 5,\n  },\n  colorPrimary: {\n    backgroundColor: \"#cedbce\", //theme.palette.grey[theme.palette.type === 'light' ? 200 : 700],\n  },\n  bar: {\n    borderRadius: 5,\n    backgroundColor: \"#2f942e\",\n  },\n}))(LinearProgress);\nfunction LinearProgressWithLabel(props) {\n  return (\n    <Box display=\"flex\" alignItems=\"center\">\n      <Box width=\"100%\" mr={1}>\n        <BorderLinearProgress variant=\"determinate\" {...props} />\n      </Box>\n      <Box minWidth={35}>\n        <Typography\n          style={{ fontWeight: \"800\", color: \"#5e855e\" }}\n          variant=\"body2\"\n          color=\"textSecondary\"\n        >{`${Math.round(props.value)}%`}</Typography>\n      </Box>\n    </Box>\n  );\n}\n\nLinearProgressWithLabel.propTypes = {\n  /**\n   * The value of the progress indicator for the determinate and buffer variants.\n   * Value between 0 and 100.\n   */\n  value: PropTypes.number.isRequired,\n};\n\nfunction PaperComponent(props) {\n  return (\n    <Draggable\n      handle=\"#draggable-dialog-title\"\n      cancel={'[class*=\"MuiDialogContent-root\"]'}\n    >\n      <Paper {...props} />\n    </Draggable>\n  );\n}\n\nexport default function PayDialog(props) {\n  const classes = useStyles();\n\n  const [state, setState] = React.useContext(GlobalState);\n  const [paymentMethod, setPaymentMethod] = useState(\"credit card\");\n  const [corporate, setCorporate] = useState(corporates[0]);\n  const [saving, setSaving] = useState(false);\n\n  const [price, setPrice] = useState(\"\");\n  const [priceError, setPriceError] = useState(false);\n\n  useEffect( () => {\n    if (props.price)\n    {\n      setPrice(`${props.price}`)\n    }else\n    {\n      setPrice('')\n    }\n  }, [props.price, props.open])\n\n  const priceChanged = (event) =>\n  {\n    setPrice(event.target.value)\n    setPriceError(false)\n  }\n\n  const paymentMethodChanged = (event) => {\n    setPaymentMethod(event.target.value);\n  };\n\n  const handleClose = () => {\n    if (saving) return;\n\n    props.handleClose();\n    setPaymentMethod(\"credit card\");\n    setPrice('')\n    setCorporate(corporates[0]);\n    setSaving(false);\n  };\n\n  const corporateChanged = (event) => {\n    setCorporate(event.target.value);\n  };\n\n  const payClicked = async () => {\n\n\n    if (!price || price.trim().length === 0 || price === '0')\n    {\n      setPriceError(true)\n      return\n    }\n\n    setSaving(true);\n\n  \n\n    try {\n      await BookService.payBooking(\n        props.booking._id,\n        price,\n        paymentMethod,\n        paymentMethod === \"corporate\" ? corporate : \"\"\n      );\n      setSaving(false);\n      setState((state) => ({\n        ...state,\n        bookingPayChanged: !state.bookingPayChanged ? true : false,\n      }));\n      handleClose();\n    } catch (err) {\n      console.error(err);\n      setSaving(false);\n    }\n  };\n\n  return (\n    <React.Fragment>\n      {props.booking && (\n        <React.Fragment>\n          <Dialog\n            maxWidth=\"xs\"\n            open={props.open}\n            onClose={handleClose}\n            PaperComponent={PaperComponent}\n            aria-labelledby=\"form-dialog-title\"\n          >\n            <DialogTitle id=\"draggable-dialog-title\">\n              <Grid\n                container\n                spacing={2}\n                direction=\"row\"\n                justify=\"center\"\n                alignItems=\"center\"\n              >\n                <Grid item>\n                  <CreditCardIcon\n                    style={{ color: \"#f50057\", fontSize: \"3rem\" }}\n                  />\n                </Grid>\n\n                <Grid item>\n                  <div\n                    style={{\n                      color: \"#f50057\",\n                      paddingBottom: \"10px\",\n                      fontWeight: \"800\",\n                    }}\n                  >\n                    {\" \"}\n                    PAY the CHARGE{\" \"}\n                  </div>\n                </Grid>\n              </Grid>\n\n              <Divider />\n            </DialogTitle>\n            <DialogContent>\n              <div\n                style={{\n                  height: \"300px\",\n                }}\n              >\n                <Grid\n                  container\n                  direction=\"column\"\n                  justify=\"space-between\"\n                  spacing={2}\n                  alignItems=\"flex-start\"\n                >\n                  <Grid item>\n                  <TextField\n                                autoFocus\n                                error={priceError}\n                                label=\"OTC Charges\"\n                                value={price}\n                                fullWidth\n                                required\n                                onChange={priceChanged}\n                                name=\"product-price\"\n                                id=\"product-price-id\"\n                                InputProps={{\n                                  inputComponent: NumberFormatCustom,\n                                  startAdornment: (\n                                    <InputAdornment position=\"start\">\n                                      £\n                                    </InputAdornment>\n                                  ),\n                                }}\n                              />\n\n                  </Grid>\n\n                  <Grid item>\n                    <div style={{ fontSize: \"17px\" }}>\n                      {\" \"}\n                      How do you want to pay?{\" \"}\n                    </div>\n                  </Grid>\n\n                  <Grid item>\n                    <FormControl component=\"fieldset\">\n                      <RadioGroup\n                        aria-label=\"paymentMethod\"\n                        name=\"paymentMethod\"\n                        value={paymentMethod}\n                        onChange={paymentMethodChanged}\n                      >\n                        <FormControlLabel\n                          value=\"credit card\"\n                          control={<Radio />}\n                          label=\"Credit Card\"\n                        />\n                        <FormControlLabel\n                          value=\"cash\"\n                          control={<Radio />}\n                          label=\"Cash\"\n                        />\n                        <FormControlLabel\n                          value=\"corporate\"\n                          control={<Radio />}\n                          label=\"Corporate\"\n                        />\n                      </RadioGroup>\n\n                      {paymentMethod === \"corporate\" && (\n                        <FormControl\n                          style={{ marginTop: \"10px\" }}\n                          className={classes.formControl}\n                        >\n                          <Select\n                            labelId=\"select-corporate\"\n                            id=\"select-corporate-id\"\n                            value={corporate}\n                            onChange={corporateChanged}\n                          >\n                            {corporates.map((element) => (\n                              <MenuItem\n                                value={element}\n                              >{`${element}`}</MenuItem>\n                            ))}\n                          </Select>\n                        </FormControl>\n                      )}\n                    </FormControl>\n                  </Grid>\n                </Grid>\n\n                <Grid item></Grid>\n\n                <div\n                  style={{\n                    position: \"absolute\",\n                    bottom: \"20px\",\n                    right: \"20px\",\n                  }}\n                >\n                  <Grid\n                    container\n                    direction=\"row\"\n                    justify=\"flex-end\"\n                    alignItems=\"center\"\n                    spacing={1}\n                  >\n                    <Grid item>\n                      <Button\n                        onClick={handleClose}\n                        style={{ width: \"100px\" }}\n                        disabled={saving}\n                      >\n                        back\n                      </Button>\n                    </Grid>\n                    <Grid item>\n                      <Button\n                        onClick={payClicked}\n                        variant=\"contained\"\n                        color=\"secondary\"\n                        style={{ width: \"100px\" }}\n                        disabled={saving}\n                      >\n                        Pay\n                      </Button>\n                    </Grid>\n                  </Grid>\n                </div>\n              </div>\n\n              <Backdrop className={classes.backdrop} open={saving}>\n                <CircularProgress color=\"inherit\" />\n              </Backdrop>\n            </DialogContent>\n          </Dialog>\n        </React.Fragment>\n      )}\n    </React.Fragment>\n  );\n}\n","import React, { useEffect, useState } from \"react\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport GlobalState from \"./../GlobalState\";\nimport Grid from \"@material-ui/core/Grid\";\nimport {\n  Button,\n  Checkbox,\n  DialogActions,\n  DialogContentText,\n  Divider,\n  FormControlLabel,\n  IconButton,\n  Switch,\n  TextField,\n  Tooltip,\n} from \"@material-ui/core\";\nimport PDFService from \"./services/PDFService\";\n\nimport { calculatePrice } from \"./PriceCalculator\";\n\nimport bookingService from \"./services/BookService\";\nimport CheckIcon from \"@material-ui/icons/Check\";\nimport CloseIcon from \"@material-ui/icons/Close\";\n\nimport Dialog from \"@material-ui/core/Dialog\";\nimport DialogContent from \"@material-ui/core/DialogContent\";\nimport DialogTitle from \"@material-ui/core/DialogTitle\";\nimport Draggable from \"react-draggable\";\nimport Slide from \"@material-ui/core/Slide\";\n\nimport Paper from \"@material-ui/core/Paper\";\n\nimport DeleteIcon from \"@material-ui/icons/Delete\";\nimport BookService from \"./services/BookService\";\n\nimport Backdrop from \"@material-ui/core/Backdrop\";\nimport CircularProgress from \"@material-ui/core/CircularProgress\";\nimport {\n  FormatDateFromString,\n  RevertFormatDateFromString,\n} from \"./DateFormatter\";\nimport PayDialog from \"./PayDialog\";\n\nimport PrintIcon from \"@material-ui/icons/Print\";\nimport UndoIcon from \"@material-ui/icons/Undo\";\n\nimport SendIcon from \"@material-ui/icons/Send\";\n\nimport HistoryIcon from \"@material-ui/icons/History\";\n\nimport FileCopyOutlinedIcon from \"@material-ui/icons/FileCopyOutlined\";\nimport { CalendarColors } from \"../Admin/calendar-admin/colors\";\nimport InvoiceService from \"../services/InvoiceService\";\nimport InvoiceDialog from \"../InvoiceDialog\";\n\nconst useStyles = makeStyles((theme) => ({\n  box: {\n    backgroundColor: \"#373737\",\n    color: \"#fff\",\n    padding: \"1px\",\n    borderRadius: \"4px\",\n    textAlign: \"justify\",\n    paddingRight: \"40px\",\n  },\n\n  boxRed: {\n    backgroundColor: \"#dc2626\",\n    color: \"#fff\",\n    padding: \"1px\",\n    borderRadius: \"4px\",\n    textAlign: \"justify\",\n    paddingRight: \"40px\",\n  },\n\n  boxInfo: {\n    textAlign: \"justify\",\n    backgroundColor: \"#fafafa\",\n    color: \"#333\",\n    padding: \"1px\",\n    borderRadius: \"4px\",\n    paddingRight: \"40px\",\n    border: \"1px solid #eee\",\n  },\n\n  ul: {\n    listStyle: \"none\",\n    padding: \"0\",\n    margin: \"0\",\n  },\n\n  li: {\n    marginBottom: \"15px\",\n  },\n\n  icon: {\n    marginRight: \"8px\",\n  },\n\n  root: {\n    width: \"100%\",\n  },\n\n  lineThrough: {\n    textDecoration: \"line-through\",\n  },\n\n  heading: {\n    fontSize: theme.typography.pxToRem(15),\n    flexBasis: \"33.33%\",\n    flexShrink: 0,\n    color: theme.palette.text.secondary,\n  },\n  secondaryHeading: {\n    fontSize: theme.typography.pxToRem(15),\n  },\n\n  infoDetails: {\n    textAlign: \"left\",\n  },\n\n  infoTitle: {\n    fontWeight: \"800\",\n    marginRight: \"10px\",\n  },\n\n  infoData: {\n    fontWeight: \"400\",\n  },\n\n  title: {\n    textAlign: \"center\",\n    fontWeight: \"600\",\n    marginLeft: \"10px\",\n    marginBottom: \"5px\",\n  },\n\n  Accordion: {\n    backgroundColor: \"#f5f5f5\",\n    color: \"#222\",\n  },\n\n  AccordionDeleted: {\n    backgroundColor: \"#aaa\",\n    color: \"#555\",\n  },\n\n  DownloadForm: {\n    marginTop: \"10px\",\n    marginBottom: \"10px\",\n  },\n\n  infoDataCharges: {\n    fontSize: \"18px\",\n    color: \"green\",\n    fontWeight: \"600\",\n  },\n\n  infoDataChargesHigher: {\n    fontSize: \"18px\",\n    color: \"red\",\n    fontWeight: \"600\",\n  },\n  BookedLabel: {\n    color: \"#606060\",\n    paddingLeft: \"5px\",\n    paddingBottom: \"3px\",\n    paddingTop: \"3px\",\n    fontWeight: \"800\",\n    borderLeft: \"5px solid\",\n    borderColor: \"#606060\",\n    width: \"150px\",\n    display: \"inline-block\",\n  },\n\n  PatientAttendedLabel: {\n    color: \"#0066aa\",\n    paddingLeft: \"5px\",\n    paddingBottom: \"3px\",\n    paddingTop: \"3px\",\n    fontWeight: \"800\",\n    borderLeft: \"5px solid\",\n    borderColor: \"#0066aa\",\n    width: \"150px\",\n    display: \"inline-block\",\n  },\n\n  SampleTakenLabel: {\n    color: \"#0066cc\",\n    paddingRight: \"10px\",\n    paddingLeft: \"5px\",\n    paddingBottom: \"3px\",\n    paddingTop: \"3px\",\n    fontWeight: \"800\",\n    borderLeft: \"5px solid\",\n    borderColor: \"#0066cc\",\n  },\n\n  ReportSentLabel: {\n    color: \"#009900\",\n    paddingRight: \"10px\",\n    paddingLeft: \"5px\",\n    paddingBottom: \"3px\",\n    paddingTop: \"3px\",\n    fontWeight: \"800\",\n    borderLeft: \"5px solid\",\n    borderColor: \"#009900\",\n  },\n\n  ReportCertSentLabel: {\n    color: \"#009900\",\n    paddingRight: \"10px\",\n    paddingLeft: \"5px\",\n    paddingBottom: \"3px\",\n    paddingTop: \"3px\",\n    fontWeight: \"800\",\n    borderLeft: \"5px solid\",\n    borderColor: \"#009900\",\n  },\n\n  PositiveLabel: {\n    color: \"red\",\n    paddingRight: \"10px\",\n    paddingLeft: \"5px\",\n    paddingBottom: \"3px\",\n    paddingTop: \"3px\",\n    fontWeight: \"800\",\n    borderLeft: \"5px solid\",\n    borderColor: \"red\",\n  },\n\n  EditButton: {\n    marginBottom: \"20px\",\n    backgroundColor: \"#2f942e\",\n    \"&:hover\": {\n      background: \"green\",\n      color: \"#fff\",\n    },\n    textDecoration: \"none !important\",\n    padding: \"10px\",\n  },\n\n  ResendEmailsButton: {\n    // marginBottom : \"20px\",\n    color: \"#2f942e\",\n    borderColor: \"#2f942e\",\n    \"&:hover\": {\n      background: \"#fafffa\",\n      borderColor: \"#2f942e\",\n    },\n    textDecoration: \"none !important\",\n    paddingLeft: \"50px\",\n    paddingRight: \"50px\",\n  },\n\n  PayButton: {\n    marginLeft: \"70px\",\n    width: \"300px\",\n  },\n\n  PayLabel: {\n    marginLeft: \"20px\",\n\n    color: \"#2f942e\",\n    fontWeight: \"500\",\n    textAlign: \"center\",\n  },\n\n  RestoreButton: {\n    marginBottom: \"20px\",\n    backgroundColor: \"#eee\",\n    color: \"#333\",\n    \"&:hover\": {\n      background: \"#f1f1f1\",\n      color: \"#111\",\n    },\n    textDecoration: \"none !important\",\n    padding: \"10px\",\n  },\n\n  DeleteButton: {\n    marginBottom: \"20px\",\n    backgroundColor: \"#d90015\",\n    \"&:hover\": {\n      background: \"#b80012\",\n      color: \"#fff\",\n    },\n\n    padding: \"10px\",\n  },\n\n  SaveButton: {\n    marginBottom: \"10px\",\n    padding: \"10px\",\n\n    backgroundColor: \"#d1175e\",\n    \"&:hover\": {\n      background: \"#bd0d50\",\n      color: \"#fff\",\n    },\n  },\n\n  CancelButton: {\n    marginBottom: \"20px\",\n    // padding: \"10px\"\n  },\n\n  TextBox: {\n    padding: \"0px\",\n  },\n\n  checkIcon: {\n    color: \"green\",\n  },\n\n  checkIconSmall: {\n    color: \"green\",\n    paddingTop: \"5px\",\n  },\n\n  closeIcon: {\n    color: \"red\",\n  },\n\n  centeredLabel: {\n    display: \"flex\",\n    alignItems: \"center\",\n  },\n\n  backdrop: {\n    zIndex: theme.zIndex.drawer + 5,\n    color: \"#fff\",\n  },\n\n  PriceLabelPaid: {\n    color: theme.palette.primary.main,\n    fontWeight: \"600\",\n  },\n\n  PriceLabelNotPaid: {\n    color: theme.palette.secondary.main,\n    fontWeight: \"600\",\n  },\n\n  invoiceNumber: {\n    display: \"inline-block\",\n    fontWeight: \"500\",\n    width: \"72px\",\n    fontSize: \"1rem\",\n    color: theme.palette.primary.main,\n  },\n\n  printInvoiceButton: {\n    marginLeft: \"70px\",\n    fontSize: \"0.8rem\",\n    // width: \"300px\",\n  },\n\n  editInvoiceButton: {\n    marginLeft: \"10px\",\n    fontSize: \"0.8rem\",\n  },\n}));\n\nconst Transition = React.forwardRef(function Transition(props, ref) {\n  return <Slide direction=\"up\" ref={ref} {...props} />;\n});\n\nfunction PaperComponent(props) {\n  return (\n    <Draggable\n      handle=\"#alert-dialog-slide-title\"\n      cancel={'[class*=\"MuiDialogContent-root\"]'}\n    >\n      <Paper {...props} />\n    </Draggable>\n  );\n}\n\nexport default function BookingDialog(props) {\n  const classes = useStyles();\n\n  const [state, setState] = React.useContext(GlobalState);\n\n  const [copied, setCopied] = useState(false);\n\n  const [emailSent, setEmailSent] = React.useState(false);\n\n  const [openResendDialog, setOpenResendDialog] = React.useState(false);\n  const [openPayDialog, setOpenPayDialog] = React.useState(false);\n  const [openRefundDialog, setOpenRefundDialog] = React.useState(false);\n\n  const [selectedBooking, setSelectedBooking] = React.useState(null);\n\n  const [editMode, setEditMode] = React.useState({ edit: false, person: null });\n  const [deleteMode, setDeleteMode] = React.useState({\n    delete: false,\n    person: null,\n  });\n  const [restoreMode, setRestoreMode] = React.useState({\n    restore: false,\n    person: null,\n  });\n\n  const [saving, setSaving] = React.useState(false);\n  const [deleting, setDeleting] = React.useState(false);\n  const [restoring, setRestoring] = React.useState(false);\n\n  const [validationError, setValidationError] = React.useState({});\n\n  const [bookingDate, setBookingDate] = React.useState(\"\");\n  const [bookingTime, setBookingTime] = React.useState(\"\");\n\n  const [fullname, setFullname] = React.useState(\"\");\n  const [email, setEmail] = React.useState(\"\");\n  const [tel, setTel] = React.useState(\"\");\n  const [notes, setNotes] = React.useState(\"\");\n  const [service, setService] = React.useState(\"\");\n\n  const [refreshData, setRefreshData] = React.useState(false);\n\n  const [booking, setBooking] = React.useState(null);\n\n  const [recordChanged, setRecordChanged] = React.useState(false);\n\n  const [fieldChanged, setFieldChanged] = React.useState(false);\n\n  const [openUndoPayDialog, setOpenUndoPayDialog] = React.useState(false);\n\n  const [openTimeStampDialog, setOpenTimeStampDialog] = React.useState(false);\n\n  const handleCloseUndoPayDialog = () => {\n    setOpenUndoPayDialog(false);\n    setSelectedBooking(null);\n  };\n\n  const handleClosePayDialog = () => {\n    setOpenPayDialog(false);\n    setSelectedBooking(null);\n  };\n\n  const handleCloseRefundDialog = () => {\n    setOpenRefundDialog(false);\n    setSelectedBooking(null);\n  };\n\n  useEffect(() => {\n    if (booking) {\n      const isChanged =\n        bookingDate !== FormatDateFromString(booking.bookingDate) ||\n        bookingTime !== booking.bookingTime ||\n        fullname !== booking.fullname ||\n        email !== booking.email ||\n        tel !== booking.phone ||\n        service !== booking.service ||\n        notes !== booking.notes;\n\n      setRecordChanged(isChanged);\n    }\n  }, [fieldChanged]);\n\n  useEffect(() => {\n    if (!props.open) {\n      setTimeout(() => {\n        setEditMode({ edit: false, person: null });\n        setRecordChanged(false);\n      }, 500);\n    }\n  }, [props.open]);\n\n  const bookingDateChanged = (event) => {\n    setBookingDate(event.target.value);\n    setValidationError({ ...validationError, bookingDateError: false });\n    setFieldChanged(!fieldChanged);\n  };\n\n  const bookingTimeChanged = (event) => {\n    setBookingTime(event.target.value);\n    setValidationError({ ...validationError, bookingTimeError: false });\n    setFieldChanged(!fieldChanged);\n  };\n\n  const fullnameChanged = (event) => {\n    setFullname(event.target.value);\n    setFieldChanged(!fieldChanged);\n  };\n\n  const emailChanged = (event) => {\n    setEmail(event.target.value);\n    setFieldChanged(!fieldChanged);\n  };\n\n  const telChanged = (event) => {\n    setTel(event.target.value);\n    setFieldChanged(!fieldChanged);\n  };\n\n  const serviceChanged = (event) => {\n    setService(event.target.value);\n    setFieldChanged(!fieldChanged);\n  };\n\n  const notesChanged = (event) => {\n    setNotes(event.target.value);\n    setFieldChanged(!fieldChanged);\n  };\n\n  const getStatusLabel = (status) => {\n    if (status === \"booked\") {\n      return <div className={classes.BookedLabel}> Booking Made </div>;\n    } else if (status === \"patient_attended\") {\n      return (\n        <div className={classes.PatientAttendedLabel}> Patient Attended </div>\n      );\n    } else {\n      return \"Unknown\";\n    }\n  };\n\n  const handleEditModeChanged = (edit, person) => {\n    if (edit) {\n      setFullname(person.fullname);\n      setBookingDate(FormatDateFromString(person.bookingDate));\n      setBookingTime(person.bookingTime.toUpperCase());\n      setEmail(person.email);\n      setTel(person.phone);\n      setService(person.service);\n      if (person.notes) {\n        setNotes(person.notes);\n      }\n\n      setEditMode({ edit: edit, person: person });\n    } else if (!edit && !person) {\n      setEditMode({ edit: edit, person: person });\n      setRecordChanged(false);\n    } else if (!edit && person) {\n      const booking = {};\n      const bookingId = person._id;\n      booking.email = email;\n      booking.phone = tel;\n      booking.fullname = fullname;\n      booking.notes = notes;\n      booking.service = service;\n      booking.bookingDate = RevertFormatDateFromString(bookingDate);\n      booking.bookingTime = bookingTime;\n      booking.bookingRef = person.bookingRef;\n\n      if (validateBooking(booking)) {\n        updateBooking({ bookingId: bookingId, person: booking });\n      }\n    }\n  };\n\n  const validateDate = (str) => {\n    var error = false;\n    if (!str || str.length !== 10) {\n      error = true;\n    }\n\n    if (str.charAt(4) !== \"-\" || str.charAt(7) !== \"-\") {\n      error = true;\n    }\n\n    try {\n      const result = /^\\d{4}-\\d{2}-\\d{2}$/.test(str);\n      if (!result) {\n        error = true;\n      }\n\n      const year = parseInt(str.substr(0, 4));\n      const month = parseInt(str.substr(5, 2));\n      const day = parseInt(str.substr(8, 2));\n\n      if (year < 1900) {\n        error = true;\n      }\n\n      if (month < 1 || month > 12) {\n        error = true;\n      }\n\n      if (day > 31) {\n        error = true;\n      }\n    } catch (err) {\n      error = true;\n    }\n\n    return !error;\n  };\n\n  const validateTime = (str) => {\n    var error = false;\n\n    const result = /^\\d{2}:\\d{2} AM$|^\\d{2}:\\d{2} PM$/.test(str);\n    if (!result) {\n      error = true;\n    }\n\n    try {\n      const hour = parseInt(str.substr(0, 2));\n      const minute = parseInt(str.substr(3, 2));\n\n      if (hour < 0 || hour > 12) {\n        error = true;\n      }\n\n      if (minute < 0 || minute > 59) {\n        error = true;\n      }\n    } catch (err) {\n      error = true;\n    }\n\n    return !error;\n  };\n\n  const validateBooking = (booking) => {\n    var error = false;\n\n    if (!validateDate(booking.bookingDate)) {\n      error = true;\n      setValidationError({ ...validationError, bookingDateError: true });\n    }\n\n    if (!validateTime(booking.bookingTime)) {\n      error = true;\n      setValidationError({ ...validationError, bookingTimeError: true });\n    }\n    return !error;\n  };\n\n  const updateBooking = (payload) => {\n    setSaving(true);\n    bookingService\n      .updateBooking(payload)\n      .then((res) => {\n        setSaving(false);\n        setEditMode({ edit: false, person: null });\n        setRefreshData(!refreshData);\n      })\n      .catch((err) => {\n        setSaving(false);\n        setEditMode({ edit: false, person: null });\n        console.log(err);\n      });\n  };\n\n  const deleteBooking = (id) => {\n    setDeleting(true);\n    bookingService\n      .deleteBooking(id)\n      .then((res) => {\n        setDeleting(false);\n        setDeleteMode({ delete: false, person: null });\n        setRefreshData(!refreshData);\n      })\n      .catch((err) => {\n        setDeleting(false);\n        setDeleteMode({ delete: false, person: null });\n        console.log(err);\n      });\n  };\n\n  const restoreBooking = (id) => {\n    setRestoring(true);\n    bookingService\n      .unDeleteBooking(id)\n      .then((res) => {\n        setRestoring(false);\n        setRestoreMode({ restore: false, person: null });\n        setRefreshData(!refreshData);\n      })\n      .catch((err) => {\n        setRestoring(false);\n        setRestoreMode({ restore: false, person: null });\n        console.log(err);\n      });\n  };\n\n  const handleDeleteModeChanged = (del, person) => {\n    if (del) {\n      setDeleteMode({ delete: del, person: person });\n    } else if (!del && !person) {\n      setDeleteMode({ delete: del, person: person });\n    } else if (!del && person) {\n      deleteBooking(person._id);\n    }\n  };\n\n  const handleRestoreModeChanged = (restore, person) => {\n    if (restore) {\n      setRestoreMode({ restore: restore, person: person });\n    } else if (!restore && !person) {\n      setRestoreMode({ restore: restore, person: person });\n    } else if (!restore && person) {\n      restoreBooking(person._id);\n    }\n  };\n\n  const changeBackToBookingMade = (event, id) => {\n    setSaving(true);\n    BookService.changeBackToBookingMade(id)\n      .then((res) => {\n        setSaving(false);\n        setRefreshData(!refreshData);\n      })\n      .catch((err) => {\n        console.log(err);\n        setSaving(false);\n      });\n  };\n\n  const changeToPatientAttended = (event, id) => {\n    setSaving(true);\n    BookService.changeToPatientAttended(id)\n      .then((res) => {\n        setSaving(false);\n        setRefreshData(!refreshData);\n      })\n      .catch((err) => {\n        console.log(err);\n        setSaving(false);\n      });\n  };\n\n  const Pay = (event, id) => {\n    setSelectedBooking(booking);\n    setOpenPayDialog(true);\n  };\n\n  useEffect(() => {\n    if (props.booking) {\n      BookService.getBookingById(props.booking._id)\n        .then((res) => {\n          setBooking(res.data);\n        })\n        .catch((err) => {\n          console.log(err);\n        });\n\n      setState((state) => ({\n        ...state,\n        bookingDialogDataChanged: !state.bookingDialogDataChanged\n          ? true\n          : false,\n      }));\n    }\n  }, [refreshData, state.bookingPayChanged]);\n\n  useEffect(() => {\n    if (props.booking) {\n      setBooking(props.booking);\n    }\n  }, [props.booking]);\n\n  const undoPaymentClicked = async () => {\n    setSaving(true);\n    try {\n      await BookService.unPayBooking(booking._id);\n      setSaving(false);\n      setOpenUndoPayDialog(false);\n      setRefreshData(!refreshData);\n    } catch (err) {\n      console.error(err);\n      setSaving(false);\n      setOpenUndoPayDialog(false);\n    }\n  };\n\n  const refundPaymentClicked = async () => {\n    setSaving(true);\n    try {\n      await BookService.refundBooking(booking._id);\n      setSaving(false);\n      updateShouldRefundsCount();\n      setOpenRefundDialog(false);\n      setRefreshData(!refreshData);\n    } catch (err) {\n      console.error(err);\n      setSaving(false);\n      setOpenRefundDialog(false);\n    }\n  };\n\n  const updateShouldRefundsCount = async () => {\n    try {\n      const res = await BookService.getShouldRefundsCount();\n      if (res && res.data && res.data.status === \"OK\") {\n        setState((state) => ({ ...state, shouldRefunsCount: res.data.count }));\n      }\n    } catch (ex) {\n      console.error(ex);\n    }\n  };\n\n  const downloadRegForm = (id) => {\n    PDFService.downloadGynaeRegForm(id)\n      .then((res) => {\n        const file = new Blob([res.data], { type: \"application/pdf\" });\n\n        const fileURL = URL.createObjectURL(file);\n        window.open(fileURL, \"_blank\");\n      })\n      .catch((err) => {\n        console.log(err);\n      });\n  };\n\n  const sendRegForm = (id) => {\n    setSaving(true);\n    setEmailSent(false);\n    BookService.sendRegFormEmail(id)\n      .then((res) => {\n        setSaving(false);\n        if (res.data.status === \"OK\") {\n          setEmailSent(true);\n        }\n      })\n      .catch((err) => {\n        console.log(err);\n        setSaving(false);\n      });\n  };\n\n  const manualRefund = async () => {\n    setSaving(true);\n    try {\n      await BookService.manualRefundBooking(booking._id);\n      setSaving(false);\n      updateShouldRefundsCount();\n      setRefreshData(!refreshData);\n    } catch (err) {\n      console.error(err);\n      setSaving(false);\n      setOpenRefundDialog(false);\n    }\n  };\n\n  const depositChanged = async (event) => {\n    const checked = event.target.checked;\n    const deposit = checked ? 100 : 0;\n    setSaving(true);\n    try {\n      await BookService.changeDepositBooking(booking._id, deposit);\n      setSaving(false);\n      setRefreshData(!refreshData);\n    } catch (err) {\n      console.error(err);\n      setSaving(false);\n    }\n  };\n\n  const onClose = () => {\n    setEmailSent(false);\n    setEmailSentInvoice(false);\n    setInvoice(null);\n    props.onClose();\n  };\n\n  ///*** Invoice  ******************/\n\n  const [invoice, setInvoice] = React.useState(null);\n  const [invoiceLoaded, setInvoiceLoaded] = React.useState(false);\n  const [openInvoiceDialog, setOpenInvoiceDialog] = React.useState(false);\n  const [emailSentInvoice, setEmailSentInvoice] = React.useState(false);\n\n  const fetchInvoice = async () => {\n    try {\n      setInvoiceLoaded(false);\n      const res = await InvoiceService.getInvoiceByBookingId(props.booking._id);\n      setInvoice(res.data.invoice);\n      setInvoiceLoaded(true);\n    } catch (err) {\n      setInvoiceLoaded(true);\n      console.error(err);\n    }\n  };\n\n  React.useEffect(() => {\n    if (props.booking) {\n      fetchInvoice();\n    }\n  }, [props.booking, props.open]);\n\n  const handleCloseInvoiceDialog = (refresh) => {\n    setOpenInvoiceDialog(false);\n    setSelectedBooking(null);\n    fetchInvoice();\n  };\n\n  const OpenInvoiceDialog = () => {\n    setSelectedBooking(booking);\n    setInvoice(invoice);\n    setOpenInvoiceDialog(true);\n  };\n\n  const downloadInvoice = (id) => {\n    InvoiceService.downloadInvoice(id)\n      .then((res) => {\n        const file = new Blob([res.data], { type: \"application/pdf\" });\n\n        const fileURL = URL.createObjectURL(file);\n        window.open(fileURL, \"_blank\");\n      })\n      .catch((err) => {\n        console.log(err);\n      });\n  };\n\n  const sendInvoiceEmail = (id, _email) => {\n    setSaving(true);\n    setEmailSentInvoice(false);\n    InvoiceService.emailInvoice(id, _email)\n      .then((res) => {\n        setSaving(false);\n        if (res.data.status === \"OK\") {\n          setEmailSentInvoice(true);\n        }\n      })\n      .catch((err) => {\n        console.log(err);\n        setSaving(false);\n      });\n  };\n\n  //***************************** */\n\n  return (\n    <React.Fragment>\n      {booking && (\n        <React.Fragment>\n          <Dialog\n            maxWidth=\"md\"\n            open={props.open}\n            TransitionComponent={Transition}\n            keepMounted\n            onClose={onClose}\n            PaperComponent={PaperComponent}\n            aria-labelledby=\"alert-dialog-slide-title\"\n            aria-describedby=\"alert-dialog-slide-description\"\n          >\n            <DialogTitle\n              id=\"alert-dialog-slide-title\"\n              style={\n                booking.tr ? { backgroundColor: \"#7e0082\", color: \"#fff\" } : {}\n              }\n            >\n              <div style={{ position: \"absolute\", top: \"25x\", left: \"25px\" }}>\n                <Tooltip title=\"COPY EDIT LINK TO CLIPBOARD\">\n                  <IconButton\n                    onClick={() => {\n                      navigator.clipboard.writeText(\n                        `https://londonmedicalclinic.co.uk/medicalexpressclinic/user/edit/gynae/${booking._id}`\n                      );\n                      setCopied(true);\n                      setTimeout(() => {\n                        setCopied(false);\n                      }, 1500);\n                    }}\n                    aria-label=\"delete\"\n                    className={classes.margin}\n                    size=\"small\"\n                  >\n                    <FileCopyOutlinedIcon\n                      style={booking.tr ? { color: \"#ddd\" } : {}}\n                      fontSize=\"14px\"\n                    />\n                  </IconButton>\n                </Tooltip>\n\n                <span\n                  hidden={!copied}\n                  style={{ fontSize: \"12px\", transition: \"all 1s ease-in\" }}\n                >\n                  {\" \"}\n                  Copied{\" \"}\n                </span>\n              </div>\n\n              <div\n                style={{\n                  position: \"absolute\",\n                  top: \"25x\",\n                  right: \"60px\",\n                  backgroundColor: CalendarColors.GYNAE_COLOR,\n                  color: \"#fff\",\n                  padding: \"0px 5px\",\n                  borderRadius: \"10px\",\n                }}\n              >\n                GYNAE\n              </div>\n\n              <Grid\n                container\n                direction=\"row\"\n                justify=\"center\"\n                spacing={2}\n                alignItems=\"center\"\n              >\n                <Grid item>\n                  <div\n                    style={\n                      booking.deleted\n                        ? {\n                            paddingBottom: \"5px\",\n                            textDecoration: \"line-through\",\n                          }\n                        : {}\n                    }\n                  >\n                    {`${booking.fullname}`}\n                  </div>\n                </Grid>\n\n                {booking.deleted && (\n                  <Grid item>\n                    <Tooltip title=\"This record has been deleted.\">\n                      <DeleteIcon\n                        style={\n                          booking.tr\n                            ? {\n                                padding: 0,\n                                margin: 0,\n                                color: \"#fff\",\n                                fontSize: 25,\n                              }\n                            : {\n                                padding: 0,\n                                margin: 0,\n                                color: \"#333\",\n                                fontSize: 25,\n                              }\n                        }\n                      />\n                    </Tooltip>\n                  </Grid>\n                )}\n              </Grid>\n            </DialogTitle>\n            <DialogContent>\n              <div\n                style={{\n                  // height: \"550px\",\n                  paddingTop: \"0px\",\n                }}\n              >\n                <Grid item xs={12} md={12} key={`panel0`}>\n                  <div className={classes.infoDetails}>\n                    <ul className={classes.ul}>\n                      {/* Restore Functionality ******************************************* */}\n                      <li\n                        hidden={\n                          !(\n                            restoreMode.restore &&\n                            restoreMode.person._id === booking._id\n                          )\n                        }\n                      >\n                        <div\n                          style={{\n                            fontWeight: \"500\",\n                            paddingBottom: \"5px\",\n                            paddingLeft: \"5px\",\n                            fontSize: \"16px\",\n                            color: \"#333\",\n                          }}\n                        >\n                          Are you sure you want to restore this record?\n                        </div>\n                      </li>\n\n                      <li\n                        hidden={\n                          !booking.deleted ||\n                          (restoreMode.restore &&\n                            restoreMode.person._id === booking._id)\n                        }\n                      >\n                        <Button\n                          type=\"button\"\n                          fullWidth\n                          variant=\"contained\"\n                          color=\"primary\"\n                          onClick={() => {\n                            handleRestoreModeChanged(true, booking);\n                          }}\n                          className={classes.RestoreButton}\n                        >\n                          Restore This Record\n                        </Button>\n                      </li>\n\n                      <li\n                        hidden={\n                          !(\n                            restoreMode.restore &&\n                            restoreMode.person._id === booking._id\n                          )\n                        }\n                      >\n                        <Button\n                          type=\"button\"\n                          fullWidth\n                          variant=\"contained\"\n                          color=\"primary\"\n                          disabled={restoring}\n                          onClick={() => {\n                            handleRestoreModeChanged(false, booking);\n                          }}\n                          className={classes.SaveButton}\n                        >\n                          YES, Restore this!\n                        </Button>\n                      </li>\n\n                      <li\n                        hidden={\n                          !(\n                            restoreMode.restore &&\n                            restoreMode.person._id === booking._id\n                          )\n                        }\n                      >\n                        <Button\n                          type=\"button\"\n                          fullWidth\n                          variant=\"contained\"\n                          color=\"default\"\n                          disabled={restoring}\n                          onClick={() => {\n                            handleRestoreModeChanged(false, null);\n                          }}\n                          className={classes.CancelButton}\n                        >\n                          Cancel\n                        </Button>\n                      </li>\n\n                      {/*  ******************************************************************* */}\n\n                      {/* Edit Functionality ******************************************* */}\n\n                      <li\n                        hidden={\n                          booking.deleted ||\n                          deleteMode.delete ||\n                          (editMode.edit && editMode.person._id === booking._id)\n                        }\n                      >\n                        <Button\n                          type=\"button\"\n                          fullWidth\n                          variant=\"contained\"\n                          color=\"primary\"\n                          onClick={() => {\n                            handleEditModeChanged(true, booking);\n                          }}\n                          className={classes.EditButton}\n                        >\n                          Edit Booking Info\n                        </Button>\n                      </li>\n\n                      <li\n                        hidden={\n                          !(\n                            editMode.edit && editMode.person._id === booking._id\n                          )\n                        }\n                      >\n                        <Button\n                          type=\"button\"\n                          fullWidth\n                          variant=\"contained\"\n                          color=\"primary\"\n                          disabled={saving || !recordChanged}\n                          onClick={() => {\n                            handleEditModeChanged(false, booking);\n                          }}\n                          className={classes.SaveButton}\n                        >\n                          Save Changes\n                        </Button>\n                      </li>\n\n                      <li\n                        hidden={\n                          !(\n                            editMode.edit && editMode.person._id === booking._id\n                          )\n                        }\n                      >\n                        <Button\n                          type=\"button\"\n                          fullWidth\n                          variant=\"contained\"\n                          color=\"default\"\n                          disabled={saving}\n                          onClick={() => {\n                            handleEditModeChanged(false, null);\n                          }}\n                          className={classes.CancelButton}\n                        >\n                          Cancel\n                        </Button>\n                      </li>\n\n                      {/* ****************************************************************************************** */}\n\n                      {/* Delete Functionality ******************************************* */}\n\n                      <li\n                        hidden={\n                          !(\n                            deleteMode.delete &&\n                            deleteMode.person._id === booking._id\n                          )\n                        }\n                      >\n                        <div\n                          style={{\n                            fontWeight: \"600\",\n                            paddingBottom: \"5px\",\n                            paddingLeft: \"5px\",\n                            fontSize: \"16px\",\n                          }}\n                        >\n                          Are you sure you want to delete this record?\n                        </div>\n                      </li>\n\n                      <li\n                        hidden={\n                          props.deleteButtonDisabled ||\n                          booking.deleted ||\n                          editMode.edit ||\n                          (deleteMode.delete &&\n                            deleteMode.person._id === booking._id)\n                        }\n                      >\n                        {booking.OTCCharges > 0 && (\n                          <Tooltip title={\"Paid Records Cannot be Deleted!\"}>\n                            <div>\n                              <Button\n                                disabled={booking.OTCCharges > 0}\n                                type=\"button\"\n                                fullWidth\n                                variant=\"contained\"\n                                color=\"primary\"\n                                onClick={() => {\n                                  handleDeleteModeChanged(true, booking);\n                                }}\n                                className={classes.DeleteButton}\n                              >\n                                Delete This Record\n                              </Button>\n                            </div>\n                          </Tooltip>\n                        )}\n                        {booking.OTCCharges === 0 && (\n                          <Button\n                            disabled={booking.OTCCharges > 0}\n                            type=\"button\"\n                            fullWidth\n                            variant=\"contained\"\n                            color=\"primary\"\n                            onClick={() => {\n                              handleDeleteModeChanged(true, booking);\n                            }}\n                            className={classes.DeleteButton}\n                          >\n                            Delete This Record\n                          </Button>\n                        )}\n                      </li>\n\n                      <li\n                        hidden={\n                          !(\n                            deleteMode.delete &&\n                            deleteMode.person._id === booking._id\n                          )\n                        }\n                      >\n                        <Button\n                          type=\"button\"\n                          fullWidth\n                          variant=\"contained\"\n                          color=\"primary\"\n                          disabled={deleting}\n                          onClick={() => {\n                            handleDeleteModeChanged(false, booking);\n                          }}\n                          className={classes.SaveButton}\n                        >\n                          YES, Delete this!\n                        </Button>\n                      </li>\n\n                      <li\n                        hidden={\n                          !(\n                            deleteMode.delete &&\n                            deleteMode.person._id === booking._id\n                          )\n                        }\n                      >\n                        <Button\n                          type=\"button\"\n                          fullWidth\n                          variant=\"contained\"\n                          color=\"default\"\n                          disabled={deleting}\n                          onClick={() => {\n                            handleDeleteModeChanged(false, null);\n                          }}\n                          className={classes.CancelButton}\n                        >\n                          Cancel\n                        </Button>\n                      </li>\n\n                      {/* ****************************************************************************************** */}\n\n                      <li className={classes.li}>\n                        <Grid container spacing={2}>\n                          <Grid item xs={6}>\n                            <span className={classes.infoTitle}>\n                              BOOKED DATE\n                            </span>\n\n                            <span\n                              hidden={\n                                editMode.edit &&\n                                editMode.person._id === booking._id\n                              }\n                              className={classes.infoData}\n                            >\n                              {FormatDateFromString(booking.bookingDate)}\n                            </span>\n                            <span\n                              hidden={\n                                !(\n                                  editMode.edit &&\n                                  editMode.person._id === booking._id\n                                )\n                              }\n                              className={classes.infoData}\n                            >\n                              <TextField\n                                fullWidth\n                                error={validationError.bookingDateError}\n                                className={classes.TextBox}\n                                value={bookingDate}\n                                onChange={bookingDateChanged}\n                                inputProps={{\n                                  style: {\n                                    padding: 0,\n                                  },\n                                }}\n                              ></TextField>\n                            </span>\n                          </Grid>\n                          <Grid item xs={6}>\n                            <span className={classes.infoTitle}>\n                              BOOKED TIME\n                            </span>\n                            <span\n                              hidden={\n                                editMode.edit &&\n                                editMode.person._id === booking._id\n                              }\n                              className={classes.infoData}\n                            >\n                              {booking.bookingTime.toUpperCase()}\n                            </span>\n                            <span\n                              hidden={\n                                !(\n                                  editMode.edit &&\n                                  editMode.person._id === booking._id\n                                )\n                              }\n                              className={classes.infoData}\n                            >\n                              <TextField\n                                fullWidth\n                                error={validationError.bookingTimeError}\n                                className={classes.TextBox}\n                                value={bookingTime}\n                                onChange={bookingTimeChanged}\n                                inputProps={{\n                                  style: {\n                                    padding: 0,\n                                  },\n                                }}\n                              ></TextField>\n                            </span>\n                          </Grid>\n                        </Grid>\n                      </li>\n\n                      <li className={classes.li}>\n                        <Grid container spacing={2}>\n                          <Grid item xs={6}>\n                            <span className={classes.infoTitle}>FULLNAME</span>\n                            <span\n                              hidden={\n                                editMode.edit &&\n                                editMode.person._id === booking._id\n                              }\n                              className={classes.infoData}\n                            >\n                              {booking.fullname}\n                            </span>\n                            <span\n                              hidden={\n                                !(\n                                  editMode.edit &&\n                                  editMode.person._id === booking._id\n                                )\n                              }\n                              className={classes.infoData}\n                            >\n                              <TextField\n                                fullWidth\n                                className={classes.TextBox}\n                                value={fullname}\n                                onChange={fullnameChanged}\n                                inputProps={{\n                                  style: {\n                                    padding: 0,\n                                  },\n                                }}\n                              ></TextField>\n                            </span>\n                          </Grid>\n                          <Grid item xs={6}>\n                            <span className={classes.infoTitle}>EMAIL</span>\n                            <span\n                              hidden={\n                                editMode.edit &&\n                                editMode.person._id === booking._id\n                              }\n                              className={classes.infoData}\n                            >\n                              {booking.email}\n                            </span>\n                            <span\n                              hidden={\n                                !(\n                                  editMode.edit &&\n                                  editMode.person._id === booking._id\n                                )\n                              }\n                              className={classes.infoData}\n                            >\n                              <TextField\n                                fullWidth\n                                className={classes.TextBox}\n                                value={email}\n                                onChange={emailChanged}\n                                inputProps={{\n                                  style: {\n                                    padding: 0,\n                                  },\n                                }}\n                              ></TextField>\n                            </span>\n                          </Grid>\n                        </Grid>\n                      </li>\n                      <li className={classes.li} style={{ paddingTop: \"10px\" }}>\n                        <span className={classes.infoTitle}>SERVICE</span>\n                        <span\n                          hidden={\n                            editMode.edit && editMode.person._id === booking._id\n                          }\n                          className={classes.infoData}\n                        >\n                          {booking.service}\n                        </span>\n                        <span\n                          hidden={\n                            !(\n                              editMode.edit &&\n                              editMode.person._id === booking._id\n                            )\n                          }\n                          className={classes.infoData}\n                        >\n                          <TextField\n                            fullWidth\n                            className={classes.TextBox}\n                            value={service}\n                            onChange={serviceChanged}\n                            inputProps={{\n                              style: {\n                                padding: 0,\n                              },\n                            }}\n                          ></TextField>\n                        </span>\n                      </li>\n\n                      <li className={classes.li} style={{ paddingTop: \"10px\" }}>\n                        <Grid container spacing={2}>\n                          <Grid item xs={6}>\n                            <span className={classes.infoTitle}>TEL</span>\n                            <span\n                              hidden={\n                                editMode.edit &&\n                                editMode.person._id === booking._id\n                              }\n                              className={classes.infoData}\n                            >\n                              {booking.phone?.toUpperCase()}\n                            </span>\n                            <span\n                              hidden={\n                                !(\n                                  editMode.edit &&\n                                  editMode.person._id === booking._id\n                                )\n                              }\n                              className={classes.infoData}\n                            >\n                              <TextField\n                                fullWidth\n                                className={classes.TextBox}\n                                value={tel}\n                                onChange={telChanged}\n                                inputProps={{\n                                  style: {\n                                    padding: 0,\n                                  },\n                                }}\n                              ></TextField>\n                            </span>\n                          </Grid>\n                          <Grid item xs={6}>\n                            <span className={classes.infoTitle}>NOTES</span>\n                            <span\n                              hidden={\n                                editMode.edit &&\n                                editMode.person._id === booking._id\n                              }\n                              className={classes.infoData}\n                            >\n                              {booking.notes}\n                            </span>\n                            <span\n                              hidden={\n                                !(\n                                  editMode.edit &&\n                                  editMode.person._id === booking._id\n                                )\n                              }\n                              className={classes.infoData}\n                            >\n                              <TextField\n                                fullWidth\n                                className={classes.TextBox}\n                                value={notes}\n                                onChange={notesChanged}\n                                inputProps={{\n                                  style: {\n                                    padding: 0,\n                                  },\n                                }}\n                              ></TextField>\n                            </span>\n                          </Grid>\n                        </Grid>\n                      </li>\n\n                      <li className={classes.li} style={{ paddingTop: \"20px\" }}>\n                        <span className={classes.infoTitle}>STATUS</span>{\" \"}\n                        {getStatusLabel(booking.status)}\n                        {booking.status === \"patient_attended\" &&\n                          !(\n                            editMode.edit && editMode.person._id === booking._id\n                          ) &&\n                          !booking.deleted && (\n                            <Button\n                              variant=\"outlined\"\n                              color=\"primary\"\n                              disabled={saving}\n                              style={{ width: \"300px\" }}\n                              onClick={(event) =>\n                                changeBackToBookingMade(event, booking._id)\n                              }\n                            >\n                              Change Back To Booking Made\n                            </Button>\n                          )}\n                        {booking.status === \"booked\" &&\n                          !(\n                            editMode.edit && editMode.person._id === booking._id\n                          ) &&\n                          !booking.deleted && (\n                            <Button\n                              variant=\"outlined\"\n                              color=\"default\"\n                              disabled={saving}\n                              style={{ width: \"300px\" }}\n                              onClick={(event) =>\n                                changeToPatientAttended(event, booking._id)\n                              }\n                            >\n                              Change To Patient Attended\n                            </Button>\n                          )}\n                      </li>\n\n                      <li hidden={booking.deleted || editMode.edit}>\n                        <Button\n                          disabled={!booking.formData}\n                          startIcon={<PrintIcon />}\n                          type=\"button\"\n                          fullWidth\n                          variant=\"outlined\"\n                          color=\"primary\"\n                          onClick={() => {\n                            downloadRegForm(booking._id);\n                          }}\n                          className={classes.DownloadForm}\n                        >\n                          Download Registration Form\n                        </Button>\n                      </li>\n\n                      <li\n                        hidden={\n                          booking.deleted || editMode.edit || booking.formData\n                        }\n                      >\n                        <Button\n                          disabled={!booking.email || booking.email.length < 3}\n                          startIcon={<SendIcon />}\n                          type=\"button\"\n                          fullWidth\n                          variant=\"outlined\"\n                          color=\"primary\"\n                          onClick={() => {\n                            sendRegForm(booking._id);\n                          }}\n                          className={classes.DownloadForm}\n                          style={{ position: \"relative\" }}\n                        >\n                          Send Registration Form Email\n                          {emailSent && (\n                            <div\n                              style={{\n                                position: \"absolute\",\n                                right: \"10px\",\n                                top: \"5px\",\n                                color: \"#05ad19\",\n                              }}\n                            >\n                              Email Sent\n                            </div>\n                          )}\n                        </Button>\n                      </li>\n\n                      <Divider />\n\n                      <li className={classes.li} style={{ marginTop: \"20px\" }}>\n                        <span className={classes.infoTitle}>INVOICE # : </span>{\" \"}\n                        <span style={{ paddingLeft: \"0px\" }}>\n                          {!invoiceLoaded && (\n                            <span className={classes.invoiceNumber}> ... </span>\n                          )}\n                          {invoiceLoaded && invoice && (\n                            <span className={classes.invoiceNumber}>\n                              {\" \"}\n                              {invoice.invoiceNumber}{\" \"}\n                            </span>\n                          )}\n                          {invoiceLoaded && !invoice && (\n                            <span\n                              className={classes.invoiceNumber}\n                              style={{ color: \"red\", fontSize: \"0.9rem\" }}\n                            >\n                              {\" \"}\n                              N/A{\" \"}\n                            </span>\n                          )}\n                        </span>\n                        {!(\n                          editMode.edit && editMode.person._id === booking._id\n                        ) &&\n                          !booking.deleted && (\n                            <React.Fragment>\n                              {invoiceLoaded && !invoice && (\n                                <Button\n                                  variant=\"outlined\"\n                                  color=\"primary\"\n                                  className={classes.PayButton}\n                                  onClick={() => OpenInvoiceDialog()}\n                                >\n                                  Issue Invoice\n                                </Button>\n                              )}\n\n                              {invoiceLoaded && invoice && (\n                                <React.Fragment>\n                                  <Button\n                                    variant=\"outlined\"\n                                    startIcon={<PrintIcon />}\n                                    color=\"primary\"\n                                    className={classes.printInvoiceButton}\n                                    onClick={() => downloadInvoice(invoice._id)}\n                                  >\n                                    Download Invoice\n                                  </Button>\n\n                                  <Button\n                                    variant=\"outlined\"\n                                    color=\"secondary\"\n                                    className={classes.editInvoiceButton}\n                                    onClick={() => OpenInvoiceDialog()}\n                                  >\n                                    Edit Invoice\n                                  </Button>\n\n                                  <Button\n                                    disabled={\n                                      !booking.email || booking.email.length < 3\n                                    }\n                                    startIcon={<SendIcon />}\n                                    type=\"button\"\n                                    variant=\"outlined\"\n                                    color=\"primary\"\n                                    onClick={() => {\n                                      sendInvoiceEmail(\n                                        invoice._id,\n                                        booking.email\n                                      );\n                                    }}\n                                    style={{\n                                      position: \"relative\",\n                                      marginLeft: \"10px\",\n                                      paddingRight: \"130px\",\n                                      fontSize: \"0.8rem\",\n                                    }}\n                                  >\n                                    Send Invoice By Email\n                                    {emailSentInvoice && (\n                                      <div\n                                        style={{\n                                          position: \"absolute\",\n                                          right: \"10px\",\n                                          top: \"5px\",\n                                          color: \"#05ad19\",\n                                        }}\n                                      >\n                                        Email Sent\n                                      </div>\n                                    )}\n                                  </Button>\n                                </React.Fragment>\n                              )}\n                            </React.Fragment>\n                          )}\n                      </li>\n\n                      <li className={classes.li}>\n                        <div\n                          style={{\n                            borderTop: \"1px solid #ddd\",\n                            paddingTop: \"20px\",\n                          }}\n                        >\n                          <span className={classes.infoTitle}>\n                            {booking.paymentInfo ? \"ONLINE\" : \"PHONE\"} DEPOSIT\n                          </span>{\" \"}\n                          <span\n                            className={\n                              !booking.deposit || booking.deposit === 0\n                                ? classes.infoDataChargesHigher\n                                : classes.infoDataCharges\n                            }\n                          >{`£${booking.deposit.toLocaleString(\n                            \"en-GB\"\n                          )}`}</span>\n                          {!(\n                            editMode.edit && editMode.person._id === booking._id\n                          ) &&\n                            !booking.paid &&\n                            booking.deleted &&\n                            booking.deposit > 0 &&\n                            booking.paymentInfo && (\n                              <Button\n                                variant=\"outlined\"\n                                color=\"secondary\"\n                                className={classes.PayButton}\n                                onClick={(event) => setOpenRefundDialog(true)}\n                              >\n                                Refund Deposit\n                              </Button>\n                            )}\n                          {!(\n                            editMode.edit && editMode.person._id === booking._id\n                          ) &&\n                            !booking.paid &&\n                            booking.deleted &&\n                            booking.deposit > 0 &&\n                            !booking.paymentInfo && (\n                              <Button\n                                variant=\"outlined\"\n                                color=\"primary\"\n                                className={classes.PayButton}\n                                onClick={(event) => manualRefund()}\n                              >\n                                <span style={{ textTransform: \"capitalize\" }}>\n                                  I made the refund manually\n                                </span>\n                              </Button>\n                            )}\n                          {!(\n                            editMode.edit && editMode.person._id === booking._id\n                          ) &&\n                            // !booking.paid &&\n                            !booking.deleted &&\n                            // booking.deposit > 0 &&\n                            !booking.paymentInfo && (\n                              <FormControlLabel\n                                style={{ marginLeft: \"90px\" }}\n                                control={\n                                  <Switch\n                                    color=\"primary\"\n                                    checked={booking.deposit > 0}\n                                    onChange={depositChanged}\n                                    name=\"deposit\"\n                                  />\n                                }\n                                label={\n                                  booking.deposit > 0 ? (\n                                    <span className={classes.PriceLabelPaid}>\n                                      £100 Deposit Paid\n                                    </span>\n                                  ) : (\n                                    <span className={classes.PriceLabelNotPaid}>\n                                      £100 Deposit Not Paid\n                                    </span>\n                                  )\n                                }\n                              />\n                            )}\n                          {!(\n                            editMode.edit && editMode.person._id === booking._id\n                          ) &&\n                            booking.refund && (\n                              <React.Fragment>\n                                <span className={classes.PayLabel}>\n                                  {\" \"}\n                                  <CheckIcon\n                                    className={classes.checkIconSmall}\n                                  />{\" \"}\n                                  Refund Done\n                                  {booking.paidBy === \"corporate\"\n                                    ? ` \"${booking.corporate}\" `\n                                    : \"\"}\n                                </span>\n                              </React.Fragment>\n                            )}\n                        </div>\n                      </li>\n\n                      <li className={classes.li}>\n                        <span className={classes.infoTitle}>OTC CHARGES</span>{\" \"}\n                        <span\n                          style={{ paddingLeft: \"15px\" }}\n                          className={\n                            !booking.OTCCharges || booking.OTCCharges === 0\n                              ? classes.infoDataChargesHigher\n                              : classes.infoDataCharges\n                          }\n                        >{`£${booking.OTCCharges.toLocaleString(\n                          \"en-GB\"\n                        )}`}</span>\n                        {!(\n                          editMode.edit && editMode.person._id === booking._id\n                        ) &&\n                          !booking.paid &&\n                          !booking.deleted && (\n                            <Button\n                              variant=\"outlined\"\n                              color=\"secondary\"\n                              className={classes.PayButton}\n                              onClick={(event) => Pay(event, booking._id)}\n                            >\n                              Pay\n                            </Button>\n                          )}\n                        {!(\n                          editMode.edit && editMode.person._id === booking._id\n                        ) &&\n                          booking.paid && (\n                            <React.Fragment>\n                              <span className={classes.PayLabel}>\n                                {\" \"}\n                                <CheckIcon\n                                  className={classes.checkIconSmall}\n                                />{\" \"}\n                                Paid by {booking.paidBy}\n                                {booking.paidBy === \"corporate\"\n                                  ? ` \"${booking.corporate}\" `\n                                  : \"\"}\n                              </span>\n\n                              <Tooltip title=\"Undo Payment\">\n                                <IconButton\n                                  onClick={() => setOpenUndoPayDialog(true)}\n                                >\n                                  <UndoIcon style={{ color: \"red\" }} />\n                                </IconButton>\n                              </Tooltip>\n                            </React.Fragment>\n                          )}\n                      </li>\n\n                      <li className={classes.li}>\n                        <div\n                          style={{\n                            borderTop: \"1px solid #ddd\",\n                            paddingTop: \"10px\",\n                          }}\n                        >\n                          <span className={classes.infoTitle}>\n                            TOTAL CHARGES\n                          </span>{\" \"}\n                          <span\n                            className={\n                              !booking.OTCCharges || booking.OTCCharges === 0\n                                ? classes.infoDataChargesHigher\n                                : classes.infoDataCharges\n                            }\n                          >{`£${(\n                            booking.deposit + booking.OTCCharges\n                          ).toLocaleString(\"en-GB\")}`}</span>\n                        </div>\n                      </li>\n                    </ul>\n                  </div>\n                </Grid>\n              </div>\n              <Backdrop\n                className={classes.backdrop}\n                open={saving || deleting || restoring}\n              >\n                <CircularProgress color=\"inherit\" />\n              </Backdrop>\n            </DialogContent>\n\n            <PayDialog\n              booking={selectedBooking}\n              open={openPayDialog}\n              price={invoice ? invoice.grandTotal - booking.deposit : null}\n              handleClose={handleClosePayDialog}\n            />\n\n            <InvoiceDialog\n              booking={selectedBooking}\n              invoice={invoice}\n              open={openInvoiceDialog}\n              handleClose={handleCloseInvoiceDialog}\n            />\n          </Dialog>\n\n          <Dialog\n            open={openUndoPayDialog}\n            onClose={handleCloseUndoPayDialog}\n            aria-labelledby=\"alert-dialog-title\"\n            aria-describedby=\"alert-dialog-description\"\n          >\n            <DialogTitle style={{ color: \"#999\" }} id=\"alert-dialog-title\">\n              {\"Undo Payment\"}\n            </DialogTitle>\n            <DialogContent>\n              <DialogContentText\n                style={{ color: \"#333\", fontWeight: \"400\" }}\n                id=\"alert-dialog-description\"\n              >\n                Are you sure you want to undo payment for this booking?\n              </DialogContentText>\n            </DialogContent>\n            <DialogActions>\n              <Button onClick={handleCloseUndoPayDialog} color=\"default\">\n                Back\n              </Button>\n              <Button onClick={undoPaymentClicked} color=\"secondary\" autoFocus>\n                Yes, Undo Payment\n              </Button>\n            </DialogActions>\n          </Dialog>\n\n          <Dialog\n            open={openRefundDialog}\n            onClose={handleCloseRefundDialog}\n            aria-labelledby=\"alert-dialog-title\"\n            aria-describedby=\"alert-dialog-description\"\n          >\n            <DialogTitle style={{ color: \"#999\" }} id=\"alert-dialog-title\">\n              {\"Refund Deposit\"}\n            </DialogTitle>\n            <DialogContent>\n              <DialogContentText\n                style={{ color: \"#333\", fontWeight: \"400\" }}\n                id=\"alert-dialog-description\"\n              >\n                Are you sure you want to refund deposit payment for this\n                booking?\n              </DialogContentText>\n            </DialogContent>\n            <DialogActions>\n              <Button onClick={handleCloseRefundDialog} color=\"default\">\n                Back\n              </Button>\n              <Button\n                onClick={refundPaymentClicked}\n                color=\"secondary\"\n                autoFocus\n              >\n                Yes, Refund Payment\n              </Button>\n            </DialogActions>\n          </Dialog>\n        </React.Fragment>\n      )}\n    </React.Fragment>\n  );\n}\n","import React, {useEffect, useRef, useState} from 'react';\nimport { DataGrid } from '@material-ui/data-grid';\nimport BookService from './services/BookService';\nimport { Button, Checkbox, CircularProgress, Dialog, DialogContent, DialogTitle, Divider, FormControl, FormControlLabel, Grid, Icon, InputLabel, LinearProgress, Link, makeStyles, MenuItem, Paper, Select, SvgIcon, Switch, TextField, Tooltip } from '@material-ui/core';\nimport RefreshIcon from '@material-ui/icons/Refresh';\nimport { IconButton } from '@material-ui/core';\nimport CheckIcon from '@material-ui/icons/Check';\nimport CloseIcon from '@material-ui/icons/Close';\nimport GlobalState from './../GlobalState';\nimport { getMenuIndex } from './../MenuList';\nimport {FormatDateFromString, FormatDateFromStringShortYear} from './DateFormatter';\n\nimport SearchIcon from '@material-ui/icons/Search';\nimport BookingDialog from './BookingDialog';\n\nimport NewReleasesIcon from '@material-ui/icons/NewReleases';\nimport HistoryIcon from '@material-ui/icons/History';\nimport TimelineIcon from '@material-ui/icons/Timeline';\nimport DescriptionIcon from '@material-ui/icons/Description';\nimport AutorenewIcon from '@material-ui/icons/Autorenew';\nimport LiveTvIcon from '@material-ui/icons/LiveTv';\nimport PlaylistAddCheckIcon from '@material-ui/icons/PlaylistAddCheck';\nimport AddCircleOutlineIcon from '@material-ui/icons/AddCircleOutline';\nimport DeleteIcon from '@material-ui/icons/Delete';\nimport HourglassEmptyIcon from '@material-ui/icons/HourglassEmpty';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faFileExcel } from \"@fortawesome/free-solid-svg-icons\";\nimport Draggable from 'react-draggable';\n\nimport * as dateformat from 'dateformat';\n\nimport DateFnsUtils from '@date-io/date-fns';\nimport {\n  MuiPickersUtilsProvider,\n  KeyboardTimePicker,\n  KeyboardDatePicker,\n} from '@material-ui/pickers';\n\nimport BusinessIcon from '@material-ui/icons/Business';\nimport CreditCardIcon from '@material-ui/icons/CreditCard';\nimport LocalAtmIcon from '@material-ui/icons/LocalAtm';\n\n\nimport ReactHTMLTableToExcel from 'react-html-table-to-excel';\nimport PriceCalculator from './PriceCalculator';\nimport { corporates } from './Corporates';\n\nconst useStyles = makeStyles((theme) => ({\n  title: {\n    marginTop: theme.spacing(0),\n    marginBottom: theme.spacing(1),\n\n  },\n  \n  refreshButton:{\n    marginLeft: theme.spacing(2),\n  },\n\n  checkIcon:{\n    color: \"green\"\n  },\n\n  closeIcon:{\n    color: \"red\"\n  },\n\n  RefLink: {\n    cursor: \"pointer\"\n  },\n\n  BookedLabel:{\n    backgroundColor: \"#606060\",\n    color: \"#fff\",\n    width: \"70px\",\n    textAlign: \"center\",\n  },\n\n  PatientAttendedLabel:{\n    backgroundColor: \"#0066aa\",\n    color: \"#fff\",\n    width: \"70px\",\n    textAlign: \"center\",\n  },\n\n  SampleTakenLabel:{\n    backgroundColor: \"#0066cc\",\n    color: \"#fff\",\n    width: \"70px\",\n    textAlign: \"center\",\n  },\n\n  ReportSentLabel:{\n    backgroundColor: \"#009900\",\n    color: \"#fff\",\n    width: \"70px\",\n    textAlign: \"center\",\n  },\n\n  ReportCertSentLabel:{\n    backgroundColor: \"#009900\",\n    color: \"#fff\",\n    width: \"70px\",\n    textAlign: \"center\",\n  },\n\n  PositiveLabel:{\n    backgroundColor: \"red\",\n    color: \"#fff\",\n    width: \"70px\",\n    textAlign: \"center\",\n  },\n\n  HideNowRows: {\n    position: \"absolute\",\n    top: \"40%\",\n    left: \"40%\",\n    width: \"600px\",\n    height: \"300px\",\n    backgroundColor : \"#fafafa\",\n    color : \"#111\",\n    zIndex: \"1000\",\n    display: \"flex\",\n    alignItems: \"center\",\n    justifyItems: \"center\"\n  },\n\n  ExportToExcelButton:\n  {\n    // marginBottom : \"20px\",\n    color : \"#2f942e\",\n    borderColor: \"#2f942e\",\n    \"&:hover\": {\n      background: \"#fafffa\",\n      borderColor: \"#2f942e\",\n    },\n    textDecoration : \"none !important\", \n   \n  },\n\n  ExportToExcelButtonInline:\n  {\n    // marginBottom : \"20px\",\n    color : \"#2f942e\",\n    borderColor: \"#2f942e\",\n    \"&:hover\": {\n      background: \"#fafffa\",\n      borderColor: \"#2f942e\",\n    },\n    textDecoration : \"none !important\", \n    cursor: \"pointer\",\n    padding: \"10px\"\n   \n  },\n\n  table: {\n    width: \"100%\",\n    border: \"1px solid #ddd\",\n    borderCollapse: \"collapse\",\n},\n\nth: {\n    border: \"1px solid #ddd\",\n    borderCollapse: \"collapse\",\n    verticalAlign: \"middle\",\n    fontcolor: \"#555\",\n    fontWeight: \"400\",\n    fontSize: \"15px\",\n    paddingTop: \"5px\",\n    paddingBottom: \"5px\",\n    width: \"14%\",\n    paddingLeft: \"5px\",\n},\n\ntd: {\n    border: \"1px solid #ddd\",\n    borderCollapse: \"collapse\",\n    verticalAlign: \"middle\",\n    paddingLeft: \"5px\",\n},\n\ntopSelect: {\n  margin: theme.spacing(1),\n  minWidth: 80,\n},\n\nnotifyIcon:{\n  width: \"16px\",\n  height: \"16px\",\n  borderRadius: \"50%\",\n  backgroundColor : \"rgb(220, 0, 78)\",\n  marginLeft: \"10px\"\n}\n\n}));\n\nconst getTableTitle = (str) =>{\n\n  if (str === 'today')\n  {\n    return `Today's Bookings`;\n  }else if (str === 'old')\n  {\n    return `Old Bookings`;\n  }else if (str === 'future')\n  {\n    return `Future Bookings`;\n  }else if (str === 'recent')\n  {\n    return `Recent Bookings`;\n  }else if (str === 'live')\n  {\n    return `Live Bookings`;\n  }else if (str === 'completed')\n  {\n    return `Completed Bookings`;\n  }else if (str === 'positive')\n  {\n    return `Positive Results`;\n  }else if (str === 'deleted')\n  {\n    return `Deleted Records`;\n  }else if (str === 'late')\n  {\n    return `40 Hours Late`;\n  }\n  \n  else\n  {\n    return `All Bookings`;\n  }\n\n}\n\nconst getTableIcon = (str) =>{\n\n  if (str === 'today')\n  {\n    return <NewReleasesIcon style={{fontSize:\"2.2rem\"}} />;\n  }else if (str === 'old')\n  {\n    return <HistoryIcon style={{fontSize:\"2.2rem\"}} />;\n  }else if (str === 'future')\n  {\n    return <TimelineIcon style={{fontSize:\"2.2rem\"}} />;\n  }else if (str === 'recent')\n  {\n    return <AutorenewIcon style={{fontSize:\"2.2rem\"}} />;\n  }else if (str === 'live')\n  {\n    return <LiveTvIcon style={{fontSize:\"2.2rem\"}} />;\n  }else if (str === 'completed')\n  {\n    return  <PlaylistAddCheckIcon style={{fontSize:\"2.2rem\"}} />;\n  }else if (str === 'positive')\n  {\n    return <AddCircleOutlineIcon style={{fontSize:\"2.2rem\"}} />\n  }else if (str === 'deleted')\n  {\n    return <DeleteIcon style={{fontSize:\"2.2rem\"}} />;\n  }else if (str === 'late')\n  {\n    return <HourglassEmptyIcon style={{fontSize:\"2.2rem\"}} />;\n  }\n  \n  else\n  {\n    return <DescriptionIcon style={{fontSize:\"2.2rem\"}} />;\n  }\n\n}\n\nfunction PaperComponent(props) {\n  return (\n    <Draggable handle=\"#draggable-dialog-title\" cancel={'[class*=\"MuiDialogContent-root\"]'}>\n      <Paper {...props} />\n    </Draggable>\n  );\n}\n\nexport default function BookingTable(props) {\n  \n  const classes = useStyles();\n\n  const [topCount, setTopCount] = React.useState(25)\n  const topCountChanged = (event) =>\n  {\n    setTopCount(event.target.value)\n    loadData(event.target.value)\n  }\n  \n\n  const [openDialogExcel, setOpenDialogExcel] = useState(false);\n  const handleCloseDialogExcel = () =>\n  {\n    setCorporate(corporates[0]);\n    setJustCorporate(false);\n    setOpenDialogExcel(false);\n  }\n\n\n  const [fromDate, setFromDate] = React.useState(new Date(new Date().getTime() - 7 * 24 * 60 * 60 * 1000 ));\n  const handleFromDateChange = (date) => {\n    setFromDate(date);\n    setFromDateStr(dateformat(date,'yyyy-mm-dd'));\n  };\n\n  const [untilDate, setUntilDate] = React.useState(new Date(new Date().getTime() - 1 * 24 * 60 * 60 * 1000 ));\n  const handleUntilDateChange = (date) => {\n    setUntilDate(date);\n    seUntilDateStr(dateformat(date,'yyyy-mm-dd'));\n  };\n\n  const [fromDateStr, setFromDateStr] = useState(dateformat(new Date(new Date().getTime() - 7 * 24 * 60 * 60 * 1000 ), 'yyyy-mm-dd'));\n  const [untilDateStr, seUntilDateStr] = useState(dateformat(new Date(new Date().getTime() - 1 * 24 * 60 * 60 * 1000 ), 'yyyy-mm-dd'));\n\n  const [justCorporate, setJustCorporate] = useState(false);\n\n  const[chkDate, setChkDate] = useState(true);\n  const[chkForename, setChkForename] = useState(true);\n  const[chkSurname, setChkSurname] = useState(true);\n  const[chkDOB, setChkDOB] = useState(true);\n  const[chkEmail, setChkEmail] = useState(true);\n  const[chkTel, setChkTel] = useState(true);\n  const[chkCertificate, setChkCertidicate] = useState(true);\n  const[chkAntiBodyTest, setChkAntiBodyTest] = useState(true);\n  const[chkextRef, setChkExtRef] = useState(true);\n  const[chkPrice, setChkPrice] = useState(true);\n\n  const justCorporateChanged = (event) =>\n  {\n    setJustCorporate(event.target.checked);\n  }\n  \n\n  const chkDateChanged = (event) =>\n  {\n    setChkDate(event.target.checked);\n  }\n\n  const chkForenameChanged = (event) =>\n  {\n    setChkForename(event.target.checked);\n  }\n\n  const chkSurnameChanged = (event) =>\n  {\n    setChkSurname(event.target.checked);\n  }\n\n  const chkDOBChanged = (event) =>\n  {\n    setChkDOB(event.target.checked);\n  }\n\n  const chkEmailChanged = (event) =>\n  {\n    setChkEmail(event.target.checked);\n  }\n\n  const chkTelChanged = (event) =>\n  {\n    setChkTel(event.target.checked);\n  }\n\n  const chkCertificateChanged = (event) =>\n  {\n    setChkCertidicate(event.target.checked);\n  }\n\n  const chkAntiBodyTestChanged = (event) =>\n  {\n    setChkAntiBodyTest(event.target.checked);\n  }\n\n  const chkextRefChanged = (event) =>\n  {\n    setChkExtRef(event.target.checked);\n  }\n\n  const chkPriceChanged = (event) =>\n  {\n    setChkPrice(event.target.checked);\n  }\n\n\n\n  var columns = [];\n\n  if (props.date === 'recent')\n  {\n    columns = [\n      // { field: 'id', headerName: '#', width: 70 },\n  \n      {field: '_id', headerName:' ', width: 70, renderCell: (params) =>{\n          return (\n\n           <React.Fragment>\n\n                <Button \n                        color=\"primary\"\n                        onClick = {event => openDetailsDialog(event, params.value)}\n                > \n            \n            <SearchIcon/> \n            \n            </Button>\n\n           </React.Fragment>\n\n          \n  \n          ); \n      \n        }\n      },\n\n      { field: 'paid', headerName: 'Paid', align: 'center' , width: 90, renderCell: (params) => { \n        if (!params.value)\n        {\n           return ( \n              <React.Fragment>                    \n                    <CloseIcon className={classes.closeIcon}/>                        \n              </React.Fragment>\n           );\n        }\n        else\n        {\n           if (params.getValue('paidBy') === 'credit card')\n           {\n             return ( <CreditCardIcon className={classes.checkIcon}/> );\n           }\n           else if (params.getValue('paidBy') === 'cash')\n           {\n             return ( <LocalAtmIcon className={classes.checkIcon}/> );\n           }\n           else if (params.getValue('paidBy') === 'corporate')\n           {\n             return ( <BusinessIcon className={classes.checkIcon}/> );\n           }\n           else\n           {\n             return '';  \n           }\n        }\n  }\n },\n\n\n      { field: 'timeStamp', headerName: 'TimeStamp', width: 200, valueFormatter: (params) => { \n        return formatTimeStamp(params.value);\n        }\n      },\n  \n      { field: 'bookingDate', headerName: 'B Date', width: 110, valueFormatter: (params) => { \n              return FormatDateFromString(params.value);\n          }\n       },\n      { field: 'bookingTimeNormalized', headerName: 'B Time', width: 105 , valueGetter: (params) => {\n        return params.getValue('bookingTime');\n      }},\n      { field: 'status', headerName: 'Status', width: 100, renderCell: (params) =>{\n          if (params.value === 'booked')\n          {\n            return (\n              <span className={classes.BookedLabel}>  BM </span>\n            );\n        \n          }else if (params.value === 'patient_attended')\n          {\n            return (\n              <span  className={classes.PatientAttendedLabel}> PA </span>\n            );\n          }\n          else{\n            return 'Unknown';\n          }\n        }\n      },\n      { field: 'bookingRef', headerName: 'Ref No.', width: 120 , renderCell: (params) =>{\n        return (\n          <Tooltip title=\"Go Find By Ref\" placement=\"right\">\n              <Link className={classes.RefLink}\n              //  onClick={\n              //   () => {\n              //     console.log(params.value);\n  \n              //     setState(state => ({...state, currentMenuIndex: getMenuIndex(`pcr` , `findByRef`)}));\n              //     setState(state => ({...state, ref : params.value}));\n              //     setState(state => ({...state, refError : false})); \n              //     setState(state => ({...state, foundRecords : []}));\n              //     setState(state => ({...state, findRecords : !state.findRecords}));\n              //   }\n              // }\n              \n              >\n                {params.value}\n              </Link>\n          </Tooltip>\n  \n        );\n      }},\n      { field: 'fullname', headerName: 'Fullname', width: 250 },\n      { field: 'email', headerName: 'Email', width: 200 },\n      { field: 'phone', headerName: 'Tel', width: 150 },\n      { field: 'service', headerName: 'Service', width: 250 },\n      { field: 'notes', headerName: 'Notes', width: 500 },\n    \n    ];\n\n  }\n  else\n  {\n    columns = [\n      // { field: 'id', headerName: '#', width: 70 },\n  \n      {field: '_id', headerName:' ', width: 70, renderCell: (params) =>{\n          return (\n            <React.Fragment>\n\n                <Button \n                        color=\"primary\"\n                        onClick = {event => openDetailsDialog(event, params.value)}\n                > \n            \n            <SearchIcon/> \n            \n            </Button>\n\n           </React.Fragment>\n  \n          ); \n      \n        }\n      },\n\n      { field: 'paid', headerName: 'Paid', align: 'center' , width: 90, renderCell: (params) => { \n               if (!params.value)\n               {\n                  return ( \n                    <React.Fragment>\n                                <CloseIcon className={classes.closeIcon}/> \n                                {parseInt(params.getValue('deposit')) > 0 && props.date === 'deleted' && (\n                                      <span className={classes.notifyIcon}>&nbsp;</span>\n                                )}\n\n                               \n                    </React.Fragment>\n                     \n                        \n                  \n                  \n                  );\n               }\n               else\n               {\n                  if (params.getValue('paidBy') === 'credit card')\n                  {\n                    return ( <CreditCardIcon className={classes.checkIcon}/> );\n                  }\n                  else if (params.getValue('paidBy') === 'cash')\n                  {\n                    return ( <LocalAtmIcon className={classes.checkIcon}/> );\n                  }\n                  else if (params.getValue('paidBy') === 'corporate')\n                  {\n                    return ( <BusinessIcon className={classes.checkIcon}/> );\n                  }\n                  else\n                  {\n                    return '';  \n                  }\n               }\n         }\n        },\n        { field: 'bookingDate', headerName: 'B Date', width: 110, valueFormatter: (params) => { \n          return FormatDateFromString(params.value);\n      }\n   },\n  { field: 'bookingTimeNormalized', headerName: 'B Time', width: 105 , valueGetter: (params) => {\n    return params.getValue('bookingTime');\n  }},\n  { field: 'status', headerName: 'Status', width: 100, renderCell: (params) =>{\n      if (params.value === 'booked')\n      {\n        return (\n          <span className={classes.BookedLabel}>  BM </span>\n        );\n    \n      }else if (params.value === 'patient_attended')\n      {\n        return (\n          <span  className={classes.PatientAttendedLabel}> PA </span>\n        );\n      }\n      else{\n        return 'Unknown';\n      }\n    }\n  },\n  { field: 'bookingRef', headerName: 'Ref No.', width: 120 , renderCell: (params) =>{\n    return (\n      <Tooltip title=\"Go Find By Ref\" placement=\"right\">\n          <Link className={classes.RefLink}\n          //  onClick={\n          //   () => {\n          //     console.log(params.value);\n\n          //     setState(state => ({...state, currentMenuIndex: getMenuIndex(`pcr` , `findByRef`)}));\n          //     setState(state => ({...state, ref : params.value}));\n          //     setState(state => ({...state, refError : false})); \n          //     setState(state => ({...state, foundRecords : []}));\n          //     setState(state => ({...state, findRecords : !state.findRecords}));\n          //   }\n          // }\n          \n          >\n            {params.value}\n          </Link>\n      </Tooltip>\n\n    );\n  }},\n  { field: 'fullname', headerName: 'Fullname', width: 250 },\n  { field: 'email', headerName: 'Email', width: 200 },\n  { field: 'phone', headerName: 'Tel', width: 150 },\n  { field: 'service', headerName: 'Service', width: 250 },\n  { field: 'notes', headerName: 'Notes', width: 500 },\n\n    \n    ];\n  \n\n  }\n\n\n\n  const [state, setState] = React.useContext(GlobalState);  \n\n  const [data, setData] = React.useState({bookings: [] , cachedBookings: [], isFetching : true});\n\n  const [selectedRow, setSelectedRow] = React.useState(null);\n\n  const [selectedBooking, setSelectedBooking] = React.useState(null);\n  const [seeDetailsDialogOpen, setSeeDetailsDialogOpen] = React.useState(false);\n\n  const [corporate, setCorporate] = useState(corporates[0]);\n  const corporateChanged = (event) =>\n  {\n    setCorporate(event.target.value);\n  }\n  \n\n  const [filter,setFilter] = React.useState('');\n\n\n  const lastPromise = useRef();\n\n  const formatTimeStamp = (timeStamp) =>\n  {\n    const todayStr = dateformat(new Date(), 'yyyy-mm-dd');\n    const timeStampStr = dateformat(timeStamp, 'yyyy-mm-dd');\n    if (todayStr === timeStampStr)\n    {\n      return dateformat(timeStamp, \"'Today', h:MM:ss TT\");\n    }\n    else\n    {\n       return dateformat(timeStamp, \"mmm dS, h:MM:ss TT\");\n    }\n  }\n\n  const loadData = (top) =>\n  {\n    var api = BookService.getAllBookings;\n    if (props.date === 'today')\n    {\n      api = BookService.getTodayBookings;\n    }else if (props.date === 'old')\n    {\n      api = BookService.getOldBookings;\n    }else if (props.date === 'future')\n    {\n      api = BookService.getFutureBookings;\n    }else if (props.date === 'recent')\n    {\n      api = BookService.getRecentBookingsAll;\n    }\n    else if (props.date === 'deleted')\n    {\n      api = BookService.getDeletedBookings;\n    }\n     \n    setData({bookings: [], cachedBookings: [], isFetching: true});\n   \n    // console.log(props)\n\n    const currentPromise = api(top).then( (res) =>{\n      // console.log(res)\n      for (var i=0; i < res.data.length; i++)\n      {\n        res.data[i] = {...res.data[i], id : i + 1}\n      }  \n      setData({bookings: [...res.data], cachedBookings: [...res.data], isFetching: false});\n      // return res.data;\n    }).catch(err => {\n      console.error(err)\n    })\n\n    // lastPromise.current = currentPromise;\n\n    // currentPromise.then(\n    //   result => {\n    //     if (currentPromise === lastPromise.current) {\n    //       setData({bookings: [...result], cachedBookings: [...result], isFetching: false});\n    //       setPage(1);\n    //     }\n    //   },\n    //   e => {\n    //     if (currentPromise === lastPromise.current) {\n    //         console.error(e);\n    //         setData({bookings: data.bookings, cachedBookings: data.cachedBookings, isFetching: false});\n    //     }\n    //   });\n\n  }\n\n  useEffect( () => {\n            setTopCount(25)\n            loadData(25)\n        },\n        [props.date]);\n\n\n\n\n  useEffect( () => {\n\n        if (filter && filter.trim().length > 0)\n        {\n          var filteredData = data.cachedBookings.filter( (element) => \n\n             (element.fullname.toLowerCase().indexOf(filter.toLowerCase()) >= 0)\n             || (element.service.toLowerCase().indexOf(filter.toLowerCase()) >= 0)\n               \n              \n          );\n  \n  \n          setData({bookings: [...filteredData], cachedBookings: data.cachedBookings, isFetching: false});\n        }else\n        {\n          setData({bookings: [...data.cachedBookings], cachedBookings: data.cachedBookings, isFetching: false});\n        }\n      },\n      [filter]);\n\n  \n      useEffect(() => {\n\n       loadData(topCount)\n    \n      }, [state.bookingDialogDataChanged]);    \n\n\n  const handleCloseSeeDetaisDialog = () =>\n  {\n    setSelectedBooking(null);\n    setSeeDetailsDialogOpen(false);\n  }    \n  \n  const openDetailsDialog = (event, id) =>\n  {\n    const booking = data.bookings.find(element => element._id === id);\n    setSelectedBooking(booking);\n    setSeeDetailsDialogOpen(true);\n\n  }\n\n  const refreshClicked = (event) =>{\n    setFilter('');\n    loadData(topCount)\n  }\n\n  const filterChanged = (event) =>{\n    setFilter(event.target.value);\n  }\n\n  const handleSelectionChanged = (newSelection) =>\n  {\n    if (newSelection.length > 0){\n      setSelectedRow(newSelection.rows[0]);\n    }\n    \n  }\n\n  const [page, setPage] = React.useState(1);\n\n  const handleExcelButtonClicked = (event) =>\n  {\n    setOpenDialogExcel(true);\n  }\n\n  const isTopSelectHidden = (date)=>\n  {\n    return date === 'live' || date === 'positive' || date === 'late' || date === 'today'\n  }\n\n\n  return (\n    <React.Fragment>\n      {data.isFetching && (\n        <div style={{ width: \"100%\", paddingTop: \"3px\" }}>\n          <LinearProgress color=\"primary\" />\n        </div>\n      )}\n      <Grid\n        container\n        direction=\"row\"\n        justify=\"space-between\"\n        alignItems=\"flex-end\"\n      >\n        <Grid item md={4}>\n          <div style={{ textAlign: \"left\", paddingLeft: \"10px\" }}>\n            <Grid\n              container\n              direction=\"row\"\n              justify=\"flex-start\"\n              alignItems=\"center\"\n            >\n              <Grid item>\n                <span style={{ paddingRight: \"15px\", color: \"#555\" }}>\n                  {\" \"}\n                  {getTableIcon(props.date)}{\" \"}\n                </span>\n              </Grid>\n              <Grid item>\n                <span\n                  style={{\n                    fontSize: \"1.4rem\",\n                    fontWeight: \"600\",\n                    color: \"#444\",\n                  }}\n                >\n                  {\" \"}\n                  {getTableTitle(props.date)}{\" \"}\n                </span>\n              </Grid>\n              <Grid item>\n                <Tooltip title=\"Refresh\" placement=\"right\">\n                  <IconButton\n                    color=\"primary\"\n                    className={classes.refreshButton}\n                    onClick={refreshClicked}\n                  >\n                    <RefreshIcon />\n                  </IconButton>\n                </Tooltip>\n              </Grid>\n            </Grid>\n          </div>\n        </Grid>\n\n        <Grid item md={3}>\n          {props.date === \"completed\" && state.showCreateExcel && (\n            <div style={{ paddingBottom: \"5px\" }}>\n              <Button\n                className={classes.ExportToExcelButton}\n                variant=\"outlined\"\n                color=\"default\"\n                onClick={handleExcelButtonClicked}\n                startIcon={\n                  <FontAwesomeIcon\n                    style={{ color: \"#009900\" }}\n                    icon={faFileExcel}\n                  />\n                }\n              >\n                export to excel\n              </Button>\n            </div>\n          )}\n        </Grid>\n\n        {data.isFetching && <div className={classes.HideNowRows}></div>}\n\n        <Grid item md={3}>\n          <TextField\n            variant=\"standard\"\n            value={filter}\n            onChange={filterChanged}\n            margin=\"normal\"\n            size=\"small\"\n            id=\"filter\"\n            label=\"Filter\"\n            name=\"filter\"\n            autoComplete=\"off\"\n          />\n        </Grid>\n\n        <Grid item hidden={isTopSelectHidden(props.date)}>\n          <FormControl className={classes.topSelect}>\n            <InputLabel id=\"top-select-label\">Limit</InputLabel>\n            <Select\n              labelId=\"top-select-label\"\n              id=\"top-simple-select\"\n              value={topCount}\n              onChange={topCountChanged}\n            >\n              <MenuItem value={25}>25</MenuItem>\n              <MenuItem value={50}>50</MenuItem>\n              <MenuItem value={100}>100</MenuItem>\n              <MenuItem value={500}>500</MenuItem>\n              <MenuItem value={1000}>1000</MenuItem>\n              <MenuItem value={10000}>ALL</MenuItem>\n            </Select>\n          </FormControl>\n\n          {/* <Button onClick={() => loadData(true)}> Show all records </Button> */}\n        </Grid>\n      </Grid>\n\n      <div style={{ height: 700, width: \"100%\" }}>\n        <DataGrid\n          rows={data.bookings}\n          columns={columns}\n          autoPageSize\n          page={page}\n          onPageChange={(params) => {\n            setPage(params.page);\n          }}\n          onSelectionChange={handleSelectionChanged}\n        />\n      </div>\n\n      <BookingDialog\n        booking={selectedBooking}\n        open={seeDetailsDialogOpen}\n        onClose={handleCloseSeeDetaisDialog}\n      />\n\n      {data.bookings && data.bookings.length > 0 && (\n        <Dialog\n          maxWidth=\"lg\"\n          open={openDialogExcel}\n          onClose={handleCloseDialogExcel}\n          PaperComponent={PaperComponent}\n          aria-labelledby=\"form-dialog-title\"\n        >\n          <DialogTitle id=\"draggable-dialog-title\">\n            <Grid\n              container\n              spacing={2}\n              direction=\"row\"\n              justify=\"center\"\n              alignItems=\"center\"\n            >\n              <Grid item>\n                <FontAwesomeIcon\n                  style={{ color: \"#2f942e\", fontSize: \"2rem\" }}\n                  icon={faFileExcel}\n                />\n              </Grid>\n\n              <Grid item>\n                <div\n                  style={{\n                    color: \"#2f942e\",\n                    paddingBottom: \"5px\",\n                    fontWeight: \"800\",\n                  }}\n                >\n                  {\" \"}\n                  Export to EXCEL{\" \"}\n                </div>\n              </Grid>\n            </Grid>\n\n            <Divider />\n          </DialogTitle>\n          <DialogContent>\n            <div\n              style={{\n                minHeight: \"600px\",\n                maxHeight: \"600px\",\n                minWidth: \"1200px\",\n                maxWidth: \"1200px\",\n              }}\n            >\n              <div>\n                <Grid row container justify=\"center\" spacing={3}>\n                  <Grid item>\n                    <FormControlLabel\n                      control={\n                        <Switch\n                          checked={justCorporate}\n                          onChange={justCorporateChanged}\n                          name=\"justCorporate\"\n                        />\n                      }\n                      label=\"Just Corporate Records\"\n                    />\n                  </Grid>\n\n                  {justCorporate && (\n                    <Grid item>\n                      <FormControl\n                        style={{ marginTop: \"0px\" }}\n                        className={classes.formControl}\n                      >\n                        <Select\n                          labelId=\"select-corporate\"\n                          id=\"select-corporate-id\"\n                          value={corporate}\n                          onChange={corporateChanged}\n                        >\n                          {corporates.map((element) => (\n                            <MenuItem value={element}>{`${element}`}</MenuItem>\n                          ))}\n                        </Select>\n                      </FormControl>\n                    </Grid>\n                  )}\n                </Grid>\n\n                <MuiPickersUtilsProvider utils={DateFnsUtils}>\n                  <Grid row container justify=\"center\" spacing={3}>\n                    <Grid item>\n                      <KeyboardDatePicker\n                        disableToolbar\n                        variant=\"inline\"\n                        format=\"dd/MM/yyyy\"\n                        margin=\"normal\"\n                        id=\"date-picker-from\"\n                        label=\"From\"\n                        value={fromDate}\n                        onChange={handleFromDateChange}\n                        KeyboardButtonProps={{\n                          \"aria-label\": \"change date\",\n                        }}\n                      />\n                    </Grid>\n\n                    <Grid item>\n                      <KeyboardDatePicker\n                        disableToolbar\n                        variant=\"inline\"\n                        format=\"dd/MM/yyyy\"\n                        margin=\"normal\"\n                        id=\"date-picker-until\"\n                        label=\"Until\"\n                        value={untilDate}\n                        onChange={handleUntilDateChange}\n                        KeyboardButtonProps={{\n                          \"aria-label\": \"change date\",\n                        }}\n                      />\n                    </Grid>\n\n                    <Grid item>\n                      <div style={{ paddingTop: \"30px\", marginLeft: \"20px\" }}>\n                        <ReactHTMLTableToExcel\n                          id=\"test-table-xls-button\"\n                          className={classes.ExportToExcelButtonInline}\n                          table=\"table-to-xls\"\n                          filename={`PCR.Report.${fromDateStr}.${untilDateStr}`}\n                          sheet=\"PCR-Report\"\n                          buttonText=\"Download as XLS\"\n                        />\n                      </div>\n                    </Grid>\n                  </Grid>\n                </MuiPickersUtilsProvider>\n              </div>\n\n              <div>\n                <Grid container spacing={3}>\n                  <Grid item xs>\n                    <FormControlLabel\n                      control={\n                        <Checkbox\n                          checked={chkDate}\n                          onChange={chkDateChanged}\n                          name=\"chkDate\"\n                        />\n                      }\n                      label=\"Date\"\n                    />\n                  </Grid>\n                  <Grid item xs>\n                    <FormControlLabel\n                      control={\n                        <Checkbox\n                          checked={chkForename}\n                          onChange={chkForenameChanged}\n                          name=\"chkForename\"\n                        />\n                      }\n                      label=\"Forename\"\n                    />\n                  </Grid>\n                  <Grid item xs>\n                    <FormControlLabel\n                      control={\n                        <Checkbox\n                          checked={chkSurname}\n                          onChange={chkSurnameChanged}\n                          name=\"chkSurname\"\n                        />\n                      }\n                      label=\"Surname\"\n                    />\n                  </Grid>\n                  <Grid item xs>\n                    <FormControlLabel\n                      control={\n                        <Checkbox\n                          checked={chkDOB}\n                          onChange={chkDOBChanged}\n                          name=\"chkDOB\"\n                        />\n                      }\n                      label=\"D.O.B\"\n                    />\n                  </Grid>\n                  <Grid item xs>\n                    <FormControlLabel\n                      control={\n                        <Checkbox\n                          checked={chkEmail}\n                          onChange={chkEmailChanged}\n                          name=\"chkEmail\"\n                        />\n                      }\n                      label=\"Email\"\n                    />\n                  </Grid>\n                  <Grid item xs>\n                    <FormControlLabel\n                      control={\n                        <Checkbox\n                          checked={chkTel}\n                          onChange={chkTelChanged}\n                          name=\"chkTel\"\n                        />\n                      }\n                      label=\"Tel\"\n                    />\n                  </Grid>\n                  <Grid item xs>\n                    <FormControlLabel\n                      control={\n                        <Checkbox\n                          checked={chkCertificate}\n                          onChange={chkCertificateChanged}\n                          name=\"chkCertificate\"\n                        />\n                      }\n                      label=\"Certificate\"\n                    />\n                  </Grid>\n                  <Grid item xs>\n                    <FormControlLabel\n                      control={\n                        <Checkbox\n                          checked={chkAntiBodyTest}\n                          onChange={chkAntiBodyTestChanged}\n                          name=\"chkAntiBodyTest\"\n                        />\n                      }\n                      label=\"AntiBodyTest\"\n                    />\n                  </Grid>\n                  <Grid item xs>\n                    <FormControlLabel\n                      control={\n                        <Checkbox\n                          checked={chkextRef}\n                          onChange={chkextRefChanged}\n                          name=\"chkextRef\"\n                        />\n                      }\n                      label=\"Lab No.\"\n                    />\n                  </Grid>\n                  <Grid item xs>\n                    <FormControlLabel\n                      control={\n                        <Checkbox\n                          checked={chkPrice}\n                          onChange={chkPriceChanged}\n                          name=\"chkPrice\"\n                        />\n                      }\n                      label=\"Price\"\n                    />\n                  </Grid>\n                </Grid>\n              </div>\n\n              <div style={{ width: \"100%\", paddingTop: \"20px\" }}>\n                <table className={classes.table} id=\"table-to-xls\">\n                  <tr>\n                    {chkDate && <th className={classes.th}>Date</th>}\n                    {chkForename && <th className={classes.th}>Forename</th>}\n                    {chkSurname && <th className={classes.th}>Surename</th>}\n                    {chkDOB && <th className={classes.th}>D.O.B</th>}\n                    {chkEmail && <th className={classes.th}>Email</th>}\n                    {chkTel && <th className={classes.th}>Tel</th>}\n                    {chkCertificate && (\n                      <th className={classes.th}>Certificate</th>\n                    )}\n                    {chkAntiBodyTest && (\n                      <th className={classes.th}>AntiBodyTest</th>\n                    )}\n                    {chkextRef && <th className={classes.th}>Lab No.</th>}\n                    {chkPrice && <th className={classes.th}>Price (£) </th>}\n                  </tr>\n\n                  {data.bookings\n                    .filter((booking) => {\n                      if (!justCorporate) {\n                        return (\n                          booking.bookingDate >= fromDateStr &&\n                          booking.bookingDate <= untilDateStr\n                        );\n                      } else {\n                        return (\n                          booking.bookingDate >= fromDateStr &&\n                          booking.bookingDate <= untilDateStr &&\n                          booking.paid &&\n                          booking.paidBy === \"corporate\" &&\n                          booking.corporate === corporate\n                        );\n                      }\n                    })\n\n                    .map((booking) => (\n                      <tr>\n                        {chkDate && (\n                          <td className={classes.td}>\n                            {FormatDateFromString(booking.bookingDate)}\n                          </td>\n                        )}\n                        {chkForename && (\n                          <td className={classes.td}>\n                            {booking.forenameCapital}\n                          </td>\n                        )}\n                        {chkSurname && (\n                          <td className={classes.td}>\n                            {booking.surnameCapital}\n                          </td>\n                        )}\n                        {chkDOB && (\n                          <th className={classes.th}>\n                            {/* {FormatDateFromString(booking.birthDate)} */}\n                          </th>\n                        )}\n                        {chkEmail && (\n                          <td className={classes.td}>{booking.email}</td>\n                        )}\n                        {chkTel && (\n                          <td className={classes.td}>{booking.phone}</td>\n                        )}\n                        {chkCertificate && (\n                          <td className={classes.td}>\n                            {booking.certificate ? \"YES\" : \"NO\"}\n                          </td>\n                        )}\n                        {chkAntiBodyTest && (\n                          <td className={classes.td}>\n                            {booking.antiBodyTest ? \"YES\" : \"NO\"}\n                          </td>\n                        )}\n                        {chkextRef && (\n                          <td className={classes.td}>{booking.extRef}</td>\n                        )}\n                        {chkPrice && (\n                          <td className={classes.td}>\n                            {PriceCalculator.calculatePrice(booking)}\n                          </td>\n                        )}\n                      </tr>\n                    ))}\n                </table>\n              </div>\n            </div>\n          </DialogContent>\n        </Dialog>\n      )}\n    </React.Fragment>\n  );\n} ","import React, { useEffect } from 'react';\nimport { useTheme } from '@material-ui/core/styles';\nimport { LineChart, Line, XAxis, YAxis, Label, ResponsiveContainer } from 'recharts';\nimport Title from './Title';\nimport dateformat from 'dateformat';\nimport BookService from './services/BookService';\nimport { LinearProgress } from '@material-ui/core';\n\n// Generate Sales Data\nfunction createData(time, amount) {\n  return { time, amount };\n}\n\n\nconst emptyData = [\n  createData('09:00', 0),\n  createData('10:00', 0),\n  createData('11:00', 0),\n  createData('12:00', 0),\n  createData('13:00', 0),\n  createData('14:00', 0),\n  createData('15:00', 0),\n  createData('16:00', 0),\n  createData('17:00', 0),\n  createData('18:00', undefined),\n\n];\n\nconst getCount = (data, str) =>\n{\n  if (!data)\n    return 0;\n\n  var count = 0;\n  for (var i=0; i < data.length; i++)\n  {\n    if (data[i]._id.substr(0,2) === str)\n    {\n      count += data[i].count;\n    }\n  }\n  return count;\n}\n\nexport default function Chart() {\n  const theme = useTheme();\n\n  const [data, setData] = React.useState(emptyData);\n  const [loading, setLoading] = React.useState(false)\n\n  useEffect(() =>\n  {\n    const fetchData = async () =>\n    {\n      const todayStr = dateformat(new Date(), 'yyyy-mm-dd');\n      var result = [];\n      try\n      {\n          setLoading(true)\n          const res = await BookService.getBookingsStatsByDateStr(todayStr);\n          setLoading(false)\n          const data = res.data.result;\n          result.push(createData('09:00', getCount(data,'09')));\n          result.push(createData('10:00', getCount(data,'10')));\n          result.push(createData('11:00', getCount(data,'11')));\n          result.push(createData('12:00', getCount(data,'12')));\n          result.push(createData('13:00', getCount(data,'13')));\n          result.push(createData('14:00', getCount(data,'14')));\n          result.push(createData('15:00', getCount(data,'15')));\n          result.push(createData('16:00', getCount(data,'16')));\n          result.push(createData('17:00', getCount(data,'17')));\n          result.push(createData('18:00', undefined));\n \n           setData(result);\n      }\n      catch(err){\n        setLoading(false)\n        console.error(err);\n      }\n\n    }\n  \n   fetchData();\n\n  }, [] );\n\n  return (\n    <React.Fragment>\n       {loading && (\n        <div style={{ width: \"100%\", paddingTop: \"3px\" }}>\n          <LinearProgress color=\"primary\" />\n        </div>\n      )}\n      <Title>Today</Title>\n      <ResponsiveContainer>\n        <LineChart\n          data={data}\n          margin={{\n            top: 16,\n            right: 16,\n            bottom: 0,\n            left: 24,\n          }}\n        >\n          <XAxis dataKey=\"time\" stroke={theme.palette.text.secondary} />\n          <YAxis stroke={theme.palette.text.secondary}>\n            <Label\n              angle={270}\n              position=\"left\"\n              style={{ textAnchor: 'middle', fill: theme.palette.text.primary }}\n            >\n              Online Bookings\n            </Label>\n          </YAxis>\n          <Line type=\"monotone\" dataKey=\"amount\" stroke={theme.palette.primary.main} dot={false} />\n        </LineChart>\n      </ResponsiveContainer>\n    </React.Fragment>\n  );\n}","import React, { useEffect } from \"react\";\nimport Link from \"@material-ui/core/Link\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport Typography from \"@material-ui/core/Typography\";\nimport Title from \"./Title\";\nimport { Grid, LinearProgress, Tooltip } from \"@material-ui/core\";\nimport * as dateformat from \"dateformat\";\nimport BookService from \"./services/BookService\";\nimport BookingDialog from \"./BookingDialog\";\n\nconst useStyles = makeStyles({\n  depositContext: {\n    flex: 1,\n  },\n\n  bookingBox: {\n    display: \"flex\",\n    margin: \"5px\",\n    padding: \"5px\",\n    maxWidth: \"90px\",\n    minHeight: \"30px\",\n    border: \"1px solid #eee\",\n    fontSize: \"12px\",\n    fontWeight: \"500\",\n    cursor: \"pointer\",\n    backgroundColor: \"#ebedf7\",\n    color: \"#3f51b5\",\n    boxShadow: \"2px 4px #fafafa\",\n    borderRadius: \"5px\",\n    textAlign: \"center\",\n    alignItems: \"center\",\n    justifyItems: \"center\",\n    align: \"center\",\n\n    \"&:hover\": {\n      background: \"#3f51b5\",\n      color: \"#ebedf7\",\n    },\n  },\n});\n\nconst isWeekend = (date) => {\n  return (\n    date.getDay() === 1 ||\n    date.getDay() === 2 ||\n    date.getDay() === 3 ||\n    date.getDay() === 6 ||\n    date.getDay() === 0\n  );\n};\n\nconst isThursday = (date) => {\n  return date.getDay() === 4; /// Thursday\n};\n\nconst isFriday = (date) => {\n  return date.getDay() === 5; /// Friday\n};\n\nconst getCurrentTimeSlot = (now) => {\n  if (isWeekend(now)) {\n    return null;\n  }\n\n  var min = now.getMinutes();\n  var hour = now.getHours();\n\n  if (isThursday(now) && hour < 13) {\n    return null;\n  }\n\n  if (isFriday(now) && hour >= 13) {\n    return null;\n  }\n\n  if (hour < 10 || hour >= 18) return null;\n\n  const slotMinStr = min < 30 ? \"00\" : \"30\";\n  const pmStr = hour >= 12 ? \"PM\" : \"AM\";\n\n  if (hour > 12) hour = hour - 12;\n\n  const slotHourStr = `0${hour}`;\n\n  return `${slotHourStr}:${slotMinStr} ${pmStr}`;\n};\n\nconst getCurrentTimeSlotLabel = (timeStr) => {\n  if (!timeStr) {\n    return \"Closed\";\n  }\n\n  let endTimeStr = \"\";\n  switch (timeStr) {\n    case \"10:00 AM\":\n      endTimeStr = \"10:30 AM\";\n      break;\n    case \"10:30 AM\":\n      endTimeStr = \"11:00 AM\";\n      break;\n    case \"11:00 AM\":\n      endTimeStr = \"11:30 AM\";\n      break;\n    case \"11:30 AM\":\n      endTimeStr = \"12:00 PM\";\n      break;\n    case \"12:00 PM\":\n      endTimeStr = \"12:30 PM\";\n      break;\n    case \"12:30 PM\":\n      endTimeStr = \"01:00 PM\";\n      break;\n    case \"01:00 PM\":\n      endTimeStr = \"01:30 PM\";\n      break;\n    case \"01:30 PM\":\n      endTimeStr = \"02:00 PM\";\n      break;\n    case \"02:00 PM\":\n      endTimeStr = \"02:30 PM\";\n      break;\n    case \"02:30 PM\":\n      endTimeStr = \"03:00 PM\";\n      break;\n    case \"03:00 PM\":\n      endTimeStr = \"03:30 PM\";\n      break;\n    case \"03:30 PM\":\n      endTimeStr = \"04:00 PM\";\n      break;\n    case \"04:00 PM\":\n      endTimeStr = \"04:30 PM\";\n      break;\n    case \"04:30 PM\":\n      endTimeStr = \"05:00 PM\";\n      break;\n    case \"05:00 PM\":\n      endTimeStr = \"05:30 PM\";\n      break;\n    case \"05:30 PM\":\n      endTimeStr = \"06:00 PM\";\n      break;\n\n    default:\n      endTimeStr = \"\";\n      break;\n  }\n\n  return `${timeStr} - ${endTimeStr}`;\n};\n\nexport default function CurrentVisits() {\n  const classes = useStyles();\n\n  const [current, setCurrent] = React.useState(new Date());\n  const [bookings, setBookings] = React.useState([]);\n\n  const [selectedBooking, setSelectedBooking] = React.useState(null);\n  const [openDialog, setOpenDialog] = React.useState(false);\n\n  const [loading, setLoading] = React.useState(false);\n\n  useEffect(() => {\n    const interval = setInterval(() => {\n      setCurrent(new Date());\n    }, 30000);\n\n    return () => {\n      clearInterval(interval);\n    };\n  }, []);\n\n  useEffect(() => {\n    const currentTimeSlot = getCurrentTimeSlot(current);\n    if (!currentTimeSlot) return;\n    const todayStr = dateformat(current, \"yyyy-mm-dd\");\n    setLoading(true);\n    BookService.getBookingsByDateStrandTime(todayStr, currentTimeSlot)\n      .then((res) => {\n        setLoading(false);\n        if (res.data.status === \"OK\") {\n          setBookings([...res.data.bookings]);\n        }\n      })\n      .catch((err) => {\n        setLoading(false);\n        console.log(err);\n      });\n  }, [current]);\n\n  const getBookingsBox = (_bookings) => {\n    if (_bookings && _bookings.length > 0) {\n      return (\n        <div className={classes.root}>\n          <Grid\n            container\n            justify=\"flex-start\"\n            alignItems=\"flex-start\"\n            spacing={0}\n          >\n            {_bookings.map((booking) => (\n              <Grid item>\n                <div\n                  className={classes.bookingBox}\n                  onClick={(event) => bookingCliked(event, booking)}\n                >\n                  <span style={{ textAlign: \"center\" }}>\n                    {\" \"}\n                    {`${booking.surnameCapital}`.substring(0, 10)}{\" \"}\n                  </span>\n                </div>\n              </Grid>\n            ))}\n          </Grid>\n        </div>\n      );\n    }\n  };\n\n  const bookingCliked = (event, booking) => {\n    setSelectedBooking(booking);\n    setOpenDialog(true);\n  };\n\n  const handleCloseDialog = () => {\n    setOpenDialog(false);\n  };\n\n  return (\n    <React.Fragment>\n      {loading && (\n        <div style={{ width: \"100%\", paddingTop: \"3px\" }}>\n          <LinearProgress color=\"primary\" />\n        </div>\n      )}\n\n      <Title>Current Visits</Title>\n      <Typography component=\"p\" variant=\"h6\">\n        {getCurrentTimeSlotLabel(getCurrentTimeSlot(current))}\n      </Typography>\n      <Typography color=\"textSecondary\" className={classes.depositContext}>\n        on {dateformat(current, \"dd mmmm, yyyy\")}\n      </Typography>\n\n      {getBookingsBox(bookings)}\n\n      <BookingDialog\n        booking={selectedBooking}\n        open={openDialog}\n        onClose={handleCloseDialog}\n      />\n    </React.Fragment>\n  );\n}\n","import React, { useEffect } from 'react';\nimport Link from '@material-ui/core/Link';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Table from '@material-ui/core/Table';\nimport TableBody from '@material-ui/core/TableBody';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableHead from '@material-ui/core/TableHead';\nimport TableRow from '@material-ui/core/TableRow';\nimport Title from './Title';\nimport BookService from './services/BookService';\nimport * as dateformat from 'dateformat';\nimport GlobalState from './../GlobalState';\nimport { getMenuIndex } from './../MenuList';\nimport {FormatDateFromString, FormatDateFromStringShortYear} from './DateFormatter';\nimport { LinearProgress } from '@material-ui/core';\n\n\nconst useStyles = makeStyles((theme) => ({\n  seeMore: {\n    marginTop: theme.spacing(3),\n  },\n}));\n\nexport default function BookingView() {\n  const classes = useStyles();\n  const [state, setState] = React.useContext(GlobalState);  \n\n  const [data, setData] = React.useState({bookings: [] , isFetching : false});\n\n  const [refresh, setRefresh] = React.useState(false);\n\n  const [loading, setLoading] = React.useState(false)\n\n  const seeMoreRecords = (event) => {\n    event.preventDefault();\n    setState(state=>({...state, currentMenuIndex:getMenuIndex('gynae',`recentBookings`)}));\n  }\n\n  const loadData = () => \n  {\n    setData({bookings: data.bookings, isFetching: true});\n    setLoading(true)\n    BookService.getRecentBookings().then( (res) =>{\n      setLoading(false)\n        setData({bookings: res.data, isFetching: false});\n\n    }).catch( (err) => {\n      setLoading(false)\n        console.log(err);\n        setData({bookings: data.bookings, isFetching: false});\n    });\n  }\n\n\n  useEffect( () => {\n          loadData();\n        },\n        [refresh]);   \n\n\n   useEffect( () => {\n     loadData();\n     const interval = setInterval(() => {\n       setRefresh(refresh => !refresh);\n     }, 30000);\n\n     return () =>\n     {\n       clearInterval(interval)\n     }\n     \n   }, []) ;    \n\n   const formatTimeStamp = (timeStamp) =>\n   {\n     const todayStr = dateformat(new Date(), 'yyyy-mm-dd');\n     const timeStampStr = dateformat(timeStamp, 'yyyy-mm-dd');\n     if (todayStr === timeStampStr)\n     {\n       return dateformat(timeStamp, \"'Today', h:MM:ss TT\");\n     }\n     else\n     {\n        return dateformat(timeStamp, \"mmm dS, h:MM:ss TT\");\n     }\n   }\n\n  return (\n    <React.Fragment>\n       {loading && (\n        <div style={{ width: \"100%\", paddingTop: \"3px\" }}>\n          <LinearProgress color=\"primary\" />\n        </div>\n      )}\n      <Title>Recent Bookings</Title>\n      <Table size=\"small\">\n        <TableHead>\n          <TableRow>\n            <TableCell>TimeStamp</TableCell>        \n            <TableCell>Fullname</TableCell>\n            <TableCell>Email</TableCell>\n            <TableCell>Tel</TableCell>\n            <TableCell>Service</TableCell>\n            <TableCell>Booked Date</TableCell>\n            <TableCell>Booked Time</TableCell> \n          </TableRow>\n        </TableHead>\n        <TableBody>\n          {data.bookings.map((row) => (\n            <TableRow key={row._id}>\n              <TableCell>{formatTimeStamp(row.timeStamp)}</TableCell>\n              <TableCell>{row.fullname}</TableCell>\n              <TableCell>{row.email}</TableCell>\n              <TableCell>{row.phone}</TableCell>\n              <TableCell>{row.service}</TableCell>\n              <TableCell>{FormatDateFromString(row.bookingDate)}</TableCell>\n              <TableCell>{row.bookingTime}</TableCell>\n            </TableRow>\n          ))}\n        </TableBody>\n      </Table>\n      <div className={classes.seeMore}>\n        <Link color=\"primary\" href=\"#\" onClick={seeMoreRecords}>\n          See more records\n        </Link>\n      </div>\n    </React.Fragment>\n  );\n}","import React from 'react';\nimport clsx from 'clsx';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Grid from '@material-ui/core/Grid';\nimport Paper from '@material-ui/core/Paper';\nimport Chart from './Chart';\nimport CurrentVisits from './CurrentVisits';\n\n\n\nimport { Tooltip } from '@material-ui/core';\nimport GlobalState from './../GlobalState';\nimport BookingView from './BookingView';\n\nconst useStyles = makeStyles((theme) => ({\n \n  paper: {\n    padding: theme.spacing(2),\n    display: 'flex',\n    overflow: 'auto',\n    flexDirection: 'column',\n  },\n  fixedHeight: {\n    height: 240,\n  },\n}));\n\nexport default function DashboardPreview() {\n  const classes = useStyles();\n  const [state, setState] = React.useContext(GlobalState);\n\n  const fixedHeightPaper = clsx(classes.paper, classes.fixedHeight);\n\n  return (\n        <React.Fragment>\n\n<           Grid container spacing={3}>\n                    {/* Chart */}\n                    <Grid item xs={12} md={4} lg={6}>\n                    <Paper className={fixedHeightPaper}>\n                        <Chart />\n                    </Paper>\n                    </Grid>\n                    {/* Current Visits */}\n                    <Grid item xs={12} md={4} lg={6}>\n                    <Paper className={fixedHeightPaper}>\n                        <CurrentVisits />\n                    </Paper>\n                    </Grid>\n                    {/* Recent Bookings */}\n                    <Grid item xs={12}>\n                    <Paper className={classes.paper}>\n                        <BookingView/>\n                    </Paper>\n                    </Grid>\n          </Grid>\n        </React.Fragment>\n  );\n}","import React from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Typography from '@material-ui/core/Typography';\nimport GlobalState from './../GlobalState';\nimport Grid from '@material-ui/core/Grid';\nimport Accordion from '@material-ui/core/Accordion';\nimport AccordionDetails from '@material-ui/core/AccordionDetails';\nimport AccordionSummary from '@material-ui/core/AccordionSummary';\nimport ExpandMoreIcon from '@material-ui/icons/ExpandMore';\nimport { Button, Checkbox, FormControlLabel, Link, TextField, Tooltip } from '@material-ui/core';\nimport PDFService from './services/PDFService';\n\nimport {calculatePrice} from './PriceCalculator';\n\n\nimport bookingService from './services/BookService';\nimport CheckIcon from '@material-ui/icons/Check';\nimport CloseIcon from '@material-ui/icons/Close';\nimport DeleteIcon from '@material-ui/icons/Delete';\n\nimport {FormatDateFromString, RevertFormatDateFromString} from './DateFormatter';\n\nimport PrintIcon from '@material-ui/icons/Print';\n\n\nconst useStyles = makeStyles((theme) => ({\n  box: {\n    backgroundColor : \"#373737\",\n    color: \"#fff\",\n    padding : \"1px\",\n    borderRadius : \"4px\",\n    textAlign: \"justify\",\n    paddingRight: \"40px\"\n  },\n\n  boxRed: {\n    backgroundColor : \"#dc2626\",\n    color: \"#fff\",\n    padding : \"1px\",\n    borderRadius : \"4px\",\n    textAlign: \"justify\",\n    paddingRight: \"40px\"\n  },\n\n  boxInfo: {\n    textAlign: \"justify\",\n    backgroundColor : \"#fafafa\",\n    color: \"#333\",\n    padding : \"1px\",\n    borderRadius : \"4px\",\n    paddingRight: \"40px\",\n    border: \"1px solid #eee\",\n  },\n\n  ul: {\n     listStyle: \"none\",\n     padding: \"0\",\n     margin: \"0\"\n  },\n\n  li: {\n    marginBottom : \"15px\"\n  },\n\n\n  icon: {\n    marginRight : \"8px\"\n  },\n\n  root: {\n    width: '100%',\n  },\n\n  lineThrough:{\n    textDecoration : \"line-through\",\n  },\n\n\n\n  heading: {\n    fontSize: theme.typography.pxToRem(15),\n    flexBasis: '33.33%',\n    flexShrink: 0,\n    color: theme.palette.text.secondary,\n  },\n  secondaryHeading: {\n    fontSize: theme.typography.pxToRem(15),\n  },\n\n  infoDetails:{\n    textAlign: \"left\",\n  },\n\n  infoTitle:{\n    fontWeight: \"800\",\n    marginRight: \"10px\"\n  },\n\n  infoData:{\n    fontWeight: \"400\",\n  },\n\n  title:\n  {\n    // textAlign : \"center\",\n    // fontWeight : \"500\",\n    // margin: \"10px\",\n    // backgroundColor : \"#eee\",\n    // padding : \"10px\",\n    // borderRadius : \"4px\"\n    textAlign: \"center\",\n    fontWeight : \"600\",\n    marginLeft: \"10px\",\n    marginBottom: \"5px\"\n\n  },\n\n  Accordion:{\n    backgroundColor : \"#f5f5f5\",\n    color: \"#222\"\n  },\n\n  AccordionDeleted:{\n    backgroundColor : \"#aaa\",\n    color: \"#555\"\n  },\n\n  DownloadForm:{\n      marginTop: \"10px\",\n      marginBottom : \"10px\"\n  },\n\n  infoDataCharges:{\n    fontSize : \"18px\",\n    color: \"green\",\n    fontWeight : \"600\"\n  },\n\n  infoDataChargesHigher:{\n    fontSize : \"18px\",\n    color: \"red\",\n    fontWeight : \"600\"\n  },\n  BookedLabel:{\n    color: \"#606060\",\n    paddingRight: \"10px\",\n    paddingLeft: \"5px\",\n    paddingBottom: \"3px\",\n    paddingTop: \"3px\",\n    fontWeight: \"800\",\n    borderLeft: \"5px solid\",\n    borderColor: \"#606060\"\n  },\n\n  PatientAttendedLabel:{\n    color: \"#0066aa\",\n    paddingRight: \"10px\",\n    paddingLeft: \"5px\",\n    paddingBottom: \"3px\",\n    paddingTop: \"3px\",\n    fontWeight: \"800\",\n    borderLeft: \"5px solid\",\n    borderColor: \"#0066aa\"\n  },\n\n  SampleTakenLabel:{\n    color: \"#0066cc\",\n    paddingRight: \"10px\",\n    paddingLeft: \"5px\",\n    paddingBottom: \"3px\",\n    paddingTop: \"3px\",\n    fontWeight: \"800\",\n    borderLeft: \"5px solid\",\n    borderColor: \"#0066cc\"\n  },\n\n  ReportSentLabel:{\n    color: \"#009900\",\n    paddingRight: \"10px\",\n    paddingLeft: \"5px\",\n    paddingBottom: \"3px\",\n    paddingTop: \"3px\",\n    fontWeight: \"800\",\n    borderLeft: \"5px solid\",\n    borderColor: \"#009900\"\n  },\n\n  ReportCertSentLabel:{\n    color: \"#009900\",\n    paddingRight: \"10px\",\n    paddingLeft: \"5px\",\n    paddingBottom: \"3px\",\n    paddingTop: \"3px\",\n    fontWeight: \"800\",\n    borderLeft: \"5px solid\",\n    borderColor: \"#009900\"\n  },\n\n  PositiveLabel:{\n    color: \"red\",\n    paddingRight: \"10px\",\n    paddingLeft: \"5px\",\n    paddingBottom: \"3px\",\n    paddingTop: \"3px\",\n    fontWeight: \"800\",\n    borderLeft: \"5px solid\",\n    borderColor: \"red\"\n  },\n\n\n  EditButton:\n  {\n    marginBottom : \"20px\",\n    backgroundColor : \"#2f942e\",\n    \"&:hover\": {\n      background: \"green\",\n      color: \"#fff\"\n    },\n    textDecoration : \"none !important\",\n    padding: \"10px\",\n    width: \"400px\"   \n  },\n\n  RestoreButton:\n  {\n    marginBottom : \"20px\",\n    backgroundColor : \"#fafafa\",\n    color: \"#555\",\n    \"&:hover\": {\n      background: \"#f1f1f1\",\n      color: \"#111\"\n    },\n    textDecoration : \"none !important\",\n    padding: \"10px\" ,\n    width: \"400px\"    \n  },\n\n\n  DeleteButton:\n  {\n    marginBottom : \"20px\",\n    backgroundColor : \"#d90015\",\n    \"&:hover\": {\n      background: \"#b80012\",\n      color: \"#fff\"\n    },\n\n    padding: \"10px\",\n    width: \"400px\"   \n    \n  },\n\n  SaveButton:\n  {\n    marginBottom : \"10px\",\n    padding: \"10px\",\n\n    backgroundColor : \"#d1175e\",\n    \"&:hover\": {\n      background: \"#bd0d50\",\n      color: \"#fff\",\n      \n    },\n    width: \"400px\"   \n\n  },\n\n  CancelButton:\n  {\n    marginBottom : \"20px\",\n    // padding: \"10px\"\n  },\n\n  TextBox: {\n    \n    padding : \"0px\"\n\n  },\n\n  checkIcon:{\n    color: \"green\",   \n  },\n\n  closeIcon:{\n    color: \"red\"\n  },\n\n  centeredLabel : {\n    display: \"flex\",\n    alignItems: \"center\"\n  }\n\n\n\n\n\n\n}));\n\n\n\n\nexport default function PersonsBox() {\n    const classes = useStyles();\n\n    const [state, setState] = React.useContext(GlobalState);\n\n    const [expanded, setExpanded] = React.useState('panel0');\n\n    const [editMode, setEditMode] = React.useState({edit : false, person : null});\n    const [deleteMode, setDeleteMode] = React.useState({delete : false, person : null});\n    const [restoreMode, setRestoreMode] = React.useState({restore : false, person : null});\n\n    const [saving, setSaving] =  React.useState(false);\n    const [deleting, setDeleting] =  React.useState(false);\n    const [restoring, setRestoring] =  React.useState(false);\n\n    const [validationError, setValidationError] = React.useState({});\n\n\n    const [bookingDate, setBookingDate] = React.useState('');\n    const [bookingTime, setBookingTime] = React.useState('');\n\n    const [fullname, setFullname] = React.useState('');\n    const [email, setEmail] = React.useState('');\n    const [tel, setTel] = React.useState('');\n    const [service, setService] = React.useState('');\n    const [notes, setNotes] = React.useState('');\n\n\n    const bookingDateChanged = (event) =>\n    {\n      setBookingDate(event.target.value);\n      setValidationError({...validationError, bookingDateError : false});\n    }\n\n    const bookingTimeChanged = (event) =>\n    {\n      setBookingTime(event.target.value);\n      setValidationError({...validationError, bookingTimeError : false});\n    }\n\n    const fullnameChanged = (event) =>\n    {\n      setFullname(event.target.value);\n    }\n\n    const emailChanged = (event) =>\n    {\n      setEmail(event.target.value);\n    }\n\n    const telChanged = (event) =>\n    {\n      setTel(event.target.value);\n    }\n\n    const serviceChanged = (event) =>\n    {\n      setService(event.target.value);\n    }\n\n    const notesChanged = (event) =>\n    {\n      setNotes(event.target.value);\n    }\n\n\n    const handleChange = (panel) => (event, isExpanded) => {\n      setExpanded(isExpanded ? panel : false);\n    };\n\n    const getStatusLabel = (status) => {\n      if (status === 'booked')\n      {\n        return (\n          <span className={classes.BookedLabel}> Booking Made </span>\n        );\n    \n      }else if (status === 'patient_attended')\n      {\n        return (\n          <span  className={classes.PatientAttendedLabel}> Patient Attended </span>\n        );\n    \n      }\n      else{\n        return 'Unknown';\n      }\n    }\n\n\n   const handleEditModeChanged = (edit, person) => {\n\n       if (edit)\n       {\n         setFullname(person.fullname);\n         setBookingDate(FormatDateFromString(person.bookingDate));\n         setBookingTime(person.bookingTime);\n         setEmail(person.email);\n         setTel(person.phone);\n         setService(person.service)\n         if (person.notes)\n         {\n          setNotes(person.notes);\n         }\n        \n         setEditMode({edit: edit, person: person});\n\n       }\n       else if (!edit && !person)\n       {\n         setEditMode({edit: edit, person: person});\n       }\n       else if (!edit && person)\n       {\n          const booking = {};\n          const bookingId = person._id;\n          booking.email = email;\n          booking.phone = tel;\n          booking.fullname = fullname;\n          booking.notes = notes;\n          booking.service = service;\n          booking.bookingDate = RevertFormatDateFromString(bookingDate);\n          booking.bookingTime = bookingTime;\n          booking.bookingRef = person.bookingRef;\n\n          if  (validateBooking(booking))\n          {\n            updateBooking({bookingId: bookingId, person: booking});\n          }\n       }\n   }\n\n   const validateDate = (str) =>\n   {\n     var error = false;\n     if (!str || str.length !== 10)\n     {\n       error = true;\n     }\n\n     if (str.charAt(4) !== '-'  || str.charAt(7) !== '-')\n     {\n       error = true;\n     }\n\n     try\n     {\n       \n       const result = /^\\d{4}-\\d{2}-\\d{2}$/.test(str);\n       if (!result)\n       {\n          error = true;\n       }\n\n       const year = parseInt(str.substr(0,4));\n       const month = parseInt(str.substr(5,2));\n       const day = parseInt(str.substr(8,2));\n\n       if (year < 1900)\n       {\n          error = true;\n       }\n\n       if (month < 1 || month > 12)\n       {\n         error = true;\n       }        \n\n       if (day > 31)\n       {\n         error = true;\n       }\n\n     }catch(err)\n     {\n       error = true;\n     }\n\n\n\n     return !error;\n   }\n\n   const validateTime =(str) =>\n   {\n     var error = false;\n\n     const result = /^\\d{2}:\\d{2} AM$|^\\d{2}:\\d{2} PM$/.test(str);\n     if (!result)\n     {\n        error = true;\n     }\n\n     try{\n       const hour = parseInt(str.substr(0,2));\n       const minute = parseInt(str.substr(3,2));\n\n       if (hour < 0 || hour > 12)\n       {\n         error = true;\n       }\n\n       if (minute < 0 || minute > 59)\n       {\n         error = true;\n       }\n\n     }catch(err)\n     {\n       error = true;\n     }\n\n     return !error;\n   }\n\n   const validateBooking = (booking) =>\n   {\n      var error = false;\n\n      if (!validateDate(booking.bookingDate))\n      {\n        error = true;\n        setValidationError({...validationError, bookingDateError : true});\n      }\n\n      if (!validateTime(booking.bookingTime))\n      {\n        error = true;\n        setValidationError({...validationError, bookingTimeError : true});\n      }\n     \n\n      return !error;\n   }\n\n   const updateBooking = (payload) =>\n   {\n       setSaving(true);\n       bookingService.updateBooking(payload).then( (res) => {\n        setSaving(false);\n        setEditMode({edit: false, person: null});\n        setState(state => ({...state, RefreshPersonInfo : !state.RefreshPersonInfo}));\n\n       }).catch ( (err) => {\n         setSaving(false);\n         setEditMode({edit: false, person: null});\n         console.log(err);\n       });\n   }\n\n   const deleteBooking = (id) =>\n   {\n       setDeleting(true);\n       bookingService.deleteBooking(id).then( (res) => {\n        setDeleting(false);\n        setDeleteMode({delete: false, person: null});\n        setState(state => ({...state, RefreshPersonInfo : !state.RefreshPersonInfo}));\n\n       }).catch ( (err) => {\n          setDeleting(false);\n          setDeleteMode({delete: false, person: null});\n         console.log(err);\n       });\n   }\n\n   const restoreBooking = (id) =>\n   {\n       setRestoring(true);\n       bookingService.unDeleteBooking(id).then( (res) => {\n        setRestoring(false);\n        setRestoreMode({restore: false, person: null});\n        setState(state => ({...state, RefreshPersonInfo : !state.RefreshPersonInfo}));\n\n       }).catch ( (err) => {\n        setRestoring(false);\n        setRestoreMode({restore: false, person: null});\n         console.log(err);\n       });\n   }\n\n   const changeBackToBookingMade = (event, id) =>\n   {\n     setSaving(true);\n     bookingService.changeBackToBookingMade(id).then(res => {\n       setSaving(false);\n       setState(state => ({...state, RefreshPersonInfo : !state.RefreshPersonInfo}));\n     }).catch(err => {\n       console.log(err);\n       setSaving(false);\n     })\n   }\n\n\n\n   const handleDeleteModeChanged = (del, person) => {\n\n    if (del)\n    {\n      setDeleteMode({delete: del, person: person});\n    }\n    else if (!del && !person)\n    {\n      setDeleteMode({delete: del, person: person});\n    }\n    else if (!del && person)\n    {\n        deleteBooking(person._id);\n    }\n  }\n\n  const handleRestoreModeChanged = (restore, person) => {\n\n    if (restore)\n    {\n      setRestoreMode({restore: restore, person: person});\n    }\n    else if (!restore && !person)\n    {\n      setRestoreMode({restore: restore, person: person});\n    }\n    else if (!restore && person)\n    {\n        restoreBooking(person._id);\n    }\n  }\n\n  return (\n    <React.Fragment>\n          \n      <Grid container direction=\"column\" spacing={1} justify=\"flex-start\" alignItems=\"center\">\n          <div className={classes.title}> Following Records Found :</div>\n\n          {state.foundRecords.map((person,index) => (\n   \n                <Grid item xs={12} md={12} key={`panel${index}`}>\n                <div className={classes.root}>\n                    <Accordion className={person.deleted ? classes.AccordionDeleted : classes.Accordion} expanded={expanded === `panel${index}`} onChange={handleChange(`panel${index}`)}>\n                    <AccordionSummary className={person.deleted ? classes.lineThrough : ''}\n                        expandIcon={<ExpandMoreIcon />}\n                        aria-controls=\"panel1bh-content\"\n                        id={`panel${index}bh-header`}\n                    >\n                      {person.deleted && (\n                          <Tooltip  title=\"This record has been deleted.\">\n                            <DeleteIcon  style={{padding: 0, margin: 0,  color: \"#fff\", fontSize: 25 }}/>\n                        </Tooltip>\n                      )}\n\n                        <Typography className={classes.heading}> {`#${index+1}`} </Typography>\n                        <Typography className={classes.secondaryHeading}>\n                        {`${person.fullname}`}\n                        </Typography>\n                    </AccordionSummary>\n\n                    <AccordionDetails className={classes.infoDetails}>\n                        \n\n\n                        <ul className={classes.ul}>\n\n                        {/* Restore Functionality ******************************************* */}  \n                        <li hidden={!(restoreMode.restore && restoreMode.person._id  === person._id)}>\n                              <div style={{fontWeight: \"500\", paddingBottom: \"5px\", paddingLeft: \"5px\", fontSize:\"16px\" , color:\"#fff\"}}>\n                                Are you sure you want to restore this record?\n                              </div>\n                            </li>\n\n                            <li hidden={!person.deleted || (restoreMode.restore && restoreMode.person._id === person._id)}>\n                                 <Button\n\n                                    type=\"button\"\n                                    fullWidth\n                                    variant=\"contained\"\n                                    color=\"primary\"\n                                    onClick = {() => {handleRestoreModeChanged(true, person)}}\n                                    className={classes.RestoreButton}\n                                 >\n                                   Restore This Record\n                                </Button>\n                            </li>\n\n                            <li hidden={!(restoreMode.restore && restoreMode.person._id  === person._id)}>\n                                 <Button\n                                    type=\"button\"\n                                    fullWidth\n                                    variant=\"contained\"\n                                    color=\"primary\"\n                                    disabled = {restoring}\n                                    onClick = {() => {handleRestoreModeChanged(false, person)}}\n                                    className={classes.SaveButton}\n                                 >\n                                    YES, Restore this!\n                                </Button>\n                            </li>\n\n                            <li hidden={!(restoreMode.restore && restoreMode.person._id  === person._id)}>\n                                 <Button\n                                    type=\"button\"\n                                    fullWidth\n                                    variant=\"contained\"\n                                    color=\"default\"\n                                    disabled = {restoring}\n                                    onClick = {() => {handleRestoreModeChanged(false, null)}}\n                                    className={classes.CancelButton}\n                                 >\n                                    Cancel\n                                </Button>\n                            </li>\n\n                           {/*  ******************************************************************* */}\n\n                              {/* Edit Functionality ******************************************* */}\n\n                            <li hidden={person.deleted || deleteMode.delete || (editMode.edit && editMode.person._id === person._id)}>\n                                 <Button\n                                    type=\"button\"\n                                    fullWidth\n                                    variant=\"contained\"\n                                    color=\"primary\"\n                                    onClick = {() => {handleEditModeChanged(true, person)}}\n                                    className={classes.EditButton}\n                                 >\n                                    Edit Booking Info\n                                </Button>\n                            </li>\n\n                            <li hidden={!(editMode.edit && editMode.person._id  === person._id)}>\n                                 <Button\n                                    type=\"button\"\n                                    fullWidth\n                                    variant=\"contained\"\n                                    color=\"primary\"\n                                    disabled = {saving}\n                                    onClick = {() => {handleEditModeChanged(false, person)}}\n                                    className={classes.SaveButton}\n                                 >\n                                    Save Changes\n                                </Button>\n                            </li>\n\n                            <li hidden={!(editMode.edit && editMode.person._id === person._id)}>\n                                 <Button\n                                    type=\"button\"\n                                    fullWidth\n                                    variant=\"contained\"\n                                    color=\"default\"\n                                    disabled = {saving}\n                                    onClick = {() => {handleEditModeChanged(false, null)}}\n                                    className={classes.CancelButton}\n                                 >\n                                    Cancel\n                                </Button>\n                            </li>\n                            \n                            {/* ****************************************************************************************** */}\n\n\n                            {/* Delete Functionality ******************************************* */}\n\n                            <li hidden={!(deleteMode.delete && deleteMode.person._id  === person._id)}>\n                              <div style={{fontWeight: \"600\",  paddingBottom: \"5px\", paddingLeft: \"5px\", fontSize:\"16px\"}}>\n                                Are you sure you want to delete this record?\n                              </div>\n                            </li>\n\n                            <li hidden={person.deleted ||  editMode.edit || (deleteMode.delete && deleteMode.person._id === person._id)}>\n                                 <Button\n                                    type=\"button\"\n                                    fullWidth\n                                    variant=\"contained\"\n                                    color=\"primary\"\n                                    onClick = {() => {handleDeleteModeChanged(true, person)}}\n                                    className={classes.DeleteButton}\n                                 >\n                                   Delete This Record\n                                </Button>\n                            </li>\n\n                            <li hidden={!(deleteMode.delete && deleteMode.person._id  === person._id)}>\n                                 <Button\n                                    type=\"button\"\n                                    fullWidth\n                                    variant=\"contained\"\n                                    color=\"primary\"\n                                    disabled = {deleting}\n                                    onClick = {() => {handleDeleteModeChanged(false, person)}}\n                                    className={classes.SaveButton}\n                                 >\n                                    YES, Delete this!\n                                </Button>\n                            </li>\n\n                            <li hidden={!(deleteMode.delete && deleteMode.person._id === person._id)}>\n                                 <Button\n                                    type=\"button\"\n                                    fullWidth\n                                    variant=\"contained\"\n                                    color=\"default\"\n                                    disabled = {deleting}\n                                    onClick = {() => {handleDeleteModeChanged(false, null)}}\n                                    className={classes.CancelButton}\n                                 >\n                                    Cancel\n                                </Button>\n                            </li>\n                                 \n                            {/* ****************************************************************************************** */}\n\n                            <li className={classes.li}>\n                                <span className={classes.infoTitle}>BOOKED DATE</span> \n                            \n\n                                <span hidden={(editMode.edit && editMode.person._id  === person._id)} className={classes.infoData}>\n                                   {FormatDateFromString(person.bookingDate) }\n                                  </span>  \n                                        <span hidden={!(editMode.edit && editMode.person._id  === person._id)} className={classes.infoData}>\n                                          <TextField \n                                                      fullWidth\n                                                      error={validationError.bookingDateError}\n                                                      className={classes.TextBox} \n                                                      value={bookingDate}\n                                                      onChange = {bookingDateChanged}\n                                                      inputProps= {{\n                                                          style:{\n                                                            padding: 0\n                                                          }\n                                                        }\n                                                      }\n                                                      > \n                                          </TextField> \n                                        </span> \n\n\n                            </li>\n\n                            <li className={classes.li}>\n                                <span className={classes.infoTitle}>BOOKED TIME</span> \n                                <span hidden={(editMode.edit && editMode.person._id  === person._id)} className={classes.infoData}>{person.bookingTime}</span>  \n                                        <span hidden={!(editMode.edit && editMode.person._id  === person._id)} className={classes.infoData}>\n                                          <TextField \n                                                      fullWidth\n                                                      error={validationError.bookingTimeError}\n                                                      className={classes.TextBox} \n                                                      value={bookingTime}\n                                                      onChange = {bookingTimeChanged}\n                                                      inputProps= {{\n                                                          style:{\n                                                            padding: 0\n                                                          }\n                                                        }\n                                                      }\n                                                      > \n                                          </TextField> \n                                        </span> \n\n\n                            </li>\n\n                            <li className={classes.li}>\n                            <span className={classes.infoTitle}>FULLNAME</span> \n                                        <span hidden={(editMode.edit && editMode.person._id  === person._id)} className={classes.infoData}>{person.fullname}</span>  \n                                        <span hidden={!(editMode.edit && editMode.person._id  === person._id)} className={classes.infoData}>\n                                        <TextField \n                                                      fullWidth\n                                                      className={classes.TextBox} \n                                                      value={fullname}\n                                                      onChange = {fullnameChanged}\n                                                      inputProps= {{\n                                                          style:{\n                                                            padding: 0\n                                                          }\n                                                        }\n                                                      }\n                                                      > \n                                          </TextField> \n                                        </span> \n                            </li>\n                            <li className={classes.li}>\n                                <span className={classes.infoTitle}>EMAIL</span> \n                                       <span hidden={(editMode.edit && editMode.person._id  === person._id)} className={classes.infoData}>{person.email}</span>  \n                                        <span hidden={!(editMode.edit && editMode.person._id  === person._id)} className={classes.infoData}>\n                                        <TextField \n                                                      fullWidth\n                                                      className={classes.TextBox} \n                                                      value={email}\n                                                      onChange = {emailChanged}\n                                                      inputProps= {{\n                                                          style:{\n                                                            padding: 0\n                                                          }\n                                                        }\n                                                      }\n                                                      > \n                                          </TextField> \n                                        </span>   \n                            </li>\n                            <li className={classes.li}>\n                                <span className={classes.infoTitle}>TEL</span>\n                                 <span hidden={(editMode.edit && editMode.person._id  === person._id)} className={classes.infoData}>{person.phone}</span>  \n                                        <span hidden={!(editMode.edit && editMode.person._id  === person._id)} className={classes.infoData}>\n                                        <TextField \n                                                      fullWidth\n                                                      className={classes.TextBox} \n                                                      value={tel}\n                                                      onChange = {telChanged}\n                                                      inputProps= {{\n                                                          style:{\n                                                            padding: 0\n                                                          }\n                                                        }\n                                                      }\n                                                      > \n                                          </TextField> \n                                        </span>  \n                            </li>\n                            <li className={classes.li}>\n                                <span className={classes.infoTitle}>SERVICE</span>\n                                 <span hidden={(editMode.edit && editMode.person._id  === person._id)} className={classes.infoData}>{person.service}</span>  \n                                        <span hidden={!(editMode.edit && editMode.person._id  === person._id)} className={classes.infoData}>\n                                        <TextField \n                                                      fullWidth\n                                                      className={classes.TextBox} \n                                                      value={service}\n                                                      onChange = {serviceChanged}\n                                                      inputProps= {{\n                                                          style:{\n                                                            padding: 0\n                                                          }\n                                                        }\n                                                      }\n                                                      > \n                                          </TextField> \n                                        </span>  \n                            </li>\n                            <li className={classes.li}>\n                                <span className={classes.infoTitle}>NOTES</span>\n                                 <span hidden={(editMode.edit && editMode.person._id  === person._id)} className={classes.infoData}>{person.notes}</span>  \n                                        <span hidden={!(editMode.edit && editMode.person._id  === person._id)} className={classes.infoData}>\n                                        <TextField \n                                                      fullWidth\n                                                      className={classes.TextBox} \n                                                      value={notes}\n                                                      onChange = {notesChanged}\n                                                      inputProps= {{\n                                                          style:{\n                                                            padding: 0\n                                                          }\n                                                        }\n                                                      }\n                                                      > \n                                          </TextField> \n                                        </span>  \n                            </li>\n                            <li className={classes.li}>\n                                <span className={classes.infoTitle}>STATUS</span> \n                                {getStatusLabel(person.status)} \n                            </li>\n      \n\n                        </ul>\n\n                    </AccordionDetails>\n                    </Accordion>\n                </div>\n            </Grid> \n          ))}\n    </Grid>\n    </React.Fragment>\n  );\n}\n","import React, { useEffect } from 'react';\nimport Button from '@material-ui/core/Button';\nimport CssBaseline from '@material-ui/core/CssBaseline';\nimport TextField from '@material-ui/core/TextField';\nimport Typography from '@material-ui/core/Typography';\nimport { makeStyles } from '@material-ui/core/styles';\nimport GlobalState from './../GlobalState';\nimport Alert from '@material-ui/lab/Alert';\nimport PropTypes from 'prop-types';\nimport MaskedInput from 'react-text-mask';\nimport { FormControl, Grid, Input, InputLabel } from '@material-ui/core';\nimport BookService from './services/BookService';\nimport PersonsBox from './PersonsBox';\nimport { width } from '@material-ui/system';\n\n\nconst isBoolean = (param) => typeof(param) === \"boolean\"\n\nconst useFocus = (initialFocus = false, id = \"\") => {\n    const [focus, setFocus] = React.useState(initialFocus)\n    const setFocusWithTrueDefault = (param) => setFocus(isBoolean(param)? param : true)\n    return ([\n        setFocusWithTrueDefault, {\n            autoFocus: focus,\n            key: `${id}${focus}`,\n            onFocus: () => setFocus(true),\n            onBlur: () => setFocus(false),\n        },\n    ])\n}\n\n\nfunction TextMaskCustom(props) {\n    const { inputRef, ...other } = props;\n  \n    return (\n      <MaskedInput\n        {...other}\n        ref={(ref) => {\n          inputRef(ref ? ref.inputElement : null);\n        }}\n        mask={[/\\d/, /\\d/, /\\d/, '-', /\\d/, /\\d/, /\\d/, '-', /\\d/, /\\d/, /\\d/]}\n        // placeholderChar={'\\u2000'}\n        showMask\n      />\n    );\n  }\n  \n  TextMaskCustom.propTypes = {\n    inputRef: PropTypes.func.isRequired,\n  };\n\n\n\nconst useStyles = makeStyles((theme) => ({\n\n    root: {\n        width: '100%',\n        '& > * + *': {\n          marginTop: theme.spacing(2),\n        },\n        marginTop: \"20px\"\n      },  \n\n    paper: {\n        marginTop: theme.spacing(8),\n        display: 'flex',\n        flexDirection: 'column',\n        alignItems: 'center',\n    },\n\n    avatar: {\n        margin: theme.spacing(1),\n        backgroundColor: theme.palette.secondary.main,\n    },\n\n    form: {\n        width: '100%', // Fix IE 11 issue.\n        marginTop: theme.spacing(1),\n    },\n\n    Find: {\n        width: \"80px\"\n    },\n\n    Clear:{\n        marginRight: \"20px\"\n    },\n\n    title:{\n        marginTop : \"20px\"\n    },\n\n    TextBox:{\n        marginTop: \"30px\",\n        \"& > *\" :\n        {\n            textAlign: \"center\"\n        },\n  \n    },\n\n    TextField:{\n\n    },\n\n    NoRecordsFound:{\n        marginTop: \"20px\",\n        color: \"red\",\n        fontWeight: \"600\",\n        fontSize: \"14px\",\n    },\n\n    PersonsBox:{\n        marginTop : \"20px\",\n        marginBottom: \"50px\",\n    }\n\n}));\n\nexport default function FindByRef() {\n  const classes = useStyles();\n  const [state, setState] = React.useContext(GlobalState);\n  \n  const [setFocus, focusProps] = useFocus(true);\n\n//   useEffect( () =>\n//   {\n//      findRecords();\n//   }, [state.findRecords]);\n\n useEffect ( () => {\n    setState(state => ({...state, foundRecords : []}));\n }, [])\n\n  useEffect( () => {\n    BookService.getBookingsByRef(state.ref).then( (res)=>\n    {\n        if (res.data.length > 0)\n        {\n            setState(state => ({...state, foundRecords : res.data}));\n        }\n    });\n    }, [state.RefreshPersonInfo]);\n\n    const handleChange = (event) =>\n    {\n        setState(state => ({...state, ref : event.target.value}));\n        setState(state => ({...state, refError : false})); \n    }\n\n    const clearField = () =>\n    {\n        setState(state => ({...state, refError : false})); \n        setState(state => ({...state, ref : '___-___-___'}));\n        setState(state => ({...state, foundRecords : []}));\n        setFocus();\n    }\n\n    const findRecords = () =>\n    {\n        if (!state.ref || state.ref.indexOf('_') >= 0)\n        {\n            setState(state => ({...state, refError : true}));  \n            return;\n        }\n\n        setState(state => ({...state, submiting : true}));\n        setState(state => ({...state, foundRecords : []}));\n\n        BookService.getBookingsByRef(state.ref).then( (res)=>\n        {\n            setState(state => ({...state, submiting : false}));\n            if (res.data.length > 0)\n            {\n                setState(state => ({...state, foundRecords : res.data}));\n            }\n            else\n            {\n                setState(state => ({...state, foundRecords : null}));\n            }\n            \n            console.log(res.data);\n\n        }).catch( (err) =>\n        {\n            console.log(err);\n            setState(state => ({...state, submiting : false}));\n        });\n    }\n\n  return (\n    <React.Fragment>\n        <CssBaseline />\n        <div className={classes.title}>\n            <Typography component=\"h6\" variant=\"h6\" align=\"center\">\n                Find Booking Appoinments\n            </Typography>  \n        </div> \n\n        <Grid container direction=\"column\" spacing={1} justify=\"flex-start\"  alignItems=\"center\">\n\n        <Grid item xs={12} md={12}>\n            <FormControl className={classes.TextBox}>\n                <TextField\n                    {...focusProps}\n                    autoFocus \n                    pattern=\"[0-9]*\"\n                    error = {state.refError ? true : false} \n                    value = {state.ref}\n                    className = {classes.TextField}\n                    width = \"50px\"\n                    onChange={handleChange}\n                    label=\"Reference No.\"\n                    helperText=\"Enter Your 9-digits Reference No.\"\n                    name=\"refNo\"\n                    id=\"refNo\"\n                    variant=\"outlined\"\n                    \n                    size=\"medium\"\n                    margin=\"normal\"\n                    fullWidth = {true}\n                    InputProps={{\n                        inputComponent: TextMaskCustom,\n                        style: { textAlign: 'center', fontSize:\"24px\", width: \"210px\", paddingLeft: \"20px\" }\n                    }}\n\n                    onKeyPress= {event => {\n                        if (event.key === 'Enter') {\n                            findRecords();\n                        }\n                      }}\n                />         \n            </FormControl>\n        </Grid>\n\n        <Grid item xs={12} md={12}>\n               \n                <Button\n                    disabled = {state.submiting}\n                    color=\"default\"\n                    onClick = {clearField}\n                    onTouchTap = {clearField}\n                    className={classes.Clear}\n                >\n                    Clear \n                </Button>  \n            \n                <Button\n                    type=\"button\"\n                    disabled = {state.submiting}\n                    variant=\"contained\"\n                    color=\"primary\"\n                    onClick = {findRecords}\n                    onTouchTap = {findRecords}\n                    className={classes.Find}\n                >\n                    Find \n                </Button>  \n        </Grid>\n\n        <Grid item xs={12} md={12}>\n\n                    \n\n            {state.foundRecords && state.foundRecords.length > 0 && (\n                <React.Fragment>\n\n                    <div className={classes.PersonsBox}>\n                          <PersonsBox/>\n                    </div>\n                    \n\n\n                </React.Fragment>\n            )}   \n\n            {!state.foundRecords && (\n                <React.Fragment>\n\n                <div className={classes.root}>\n                    <Alert severity=\"error\"> <strong>No Records Found !</strong> <br/> Please check you reference number again.</Alert>\n                </div> \n                   \n                </React.Fragment>\n            )}\n\n        </Grid>\n        \n        \n        </Grid>\n        \n    </React.Fragment>\n   \n  );\n}","import React, { useEffect, useState } from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport PropTypes from 'prop-types';\nimport dateformat from 'dateformat';\nimport BookService from '../services/BookService';\n\nimport CircularProgress from '@material-ui/core/CircularProgress';\n\nimport GlobalState from '../../GlobalState';\n\n\nconst useStyles = makeStyles((theme) => ({\n\n    Container: {\n        width: \"100%\",\n        paddingTop: \"70%\",\n        position: \"relative\",\n        backgroundColor: \"#fff\",\n        cursor: \"pointer\"\n    },\n\n    ContainerPast: {\n        width: \"100%\",\n        paddingTop: \"70%\",\n        position: \"relative\",\n        backgroundColor: \"#fafafa\"\n    },\n    \n    DayLabel: {\n        position: \"absolute\",\n        top: \"5px\",\n        right: \"5px\",\n        color: \"#555\",\n        fontSize: \"1rem\"\n    },\n\n    DayLabelToday: {\n        position: \"absolute\",\n        top: \"5px\",\n        right: \"5px\",\n        backgroundColor: \"#1a73e8\",\n        color: \"#fff\",\n        fontSize: \"1rem\",\n        borderRadius: \"50%\",\n        padding: \"5px\",\n        lineHight: \"35px\",\n        minWidth: \"35px\"\n    },\n\n    DayLabelDisabled: {\n        position: \"absolute\",\n        top: \"5px\",\n        right: \"5px\",\n        color: \"#ddd\",\n        fontSize: \"1rem\"\n    },\n\n    BookingCountLabel: {\n        position: \"absolute\",\n        top: \"35%\",\n        left: \"40%\",\n        color: \"#3f51b5\",\n        backgroundColor: \"#ebedf7\",\n        fontSize: \"16px\",\n        fontWeight: \"600\",\n        padding: \"10px\",\n        borderRadius: \"50%\",\n        minWidth: \"40px\",\n        lineHight: \"40px\",\n        cursor: \"pointer\",\n        textAlign: \"center\"\n    },\n\n    BookingCountLabelBusy: {\n        position: \"absolute\",\n        top: \"35%\",\n        left: \"40%\",\n        color: \"#b00000\",\n        backgroundColor: \"#fce6e6\",\n        fontSize: \"16px\",\n        fontWeight: \"600\",\n        padding: \"10px\",\n        borderRadius: \"50%\",\n        minWidth: \"40px\",\n        cursor: \"pointer\",\n        textAlign: \"center\"\n    },\n\n    LoadingProgress: {\n        position: \"absolute\",\n        top: \"40%\",\n        left: \"40%\",\n      },\n\n      BookingCountGauge: {\n        position: \"absolute\",\n        bottom: \"5%\",\n        left: \"8%\",\n        width : \"8%\",\n        height: \"85%\"\n    },\n\n  }));\n\nconst MAX_BOOKING_COUNT = 10;  \n\nconst MonthViewCell = ({key, cellIndex, month, daysInMonth, dayClicked}) => {\n    const classes = useStyles();\n\n    const [state, setState] = React.useContext(GlobalState);\n\n    const [dateStr, setDateStr] = React.useState('');\n\n    const [cellDate, setCellDate] = React.useState(new Date());\n\n    const [bookingsCount, setBookingsCount] = React.useState(-1);\n\n    const [disableDay, setDisableDay] = React.useState(false);\n\n    const [isPast, setIsPast] = React.useState(false);\n\n    useEffect( () => {\n\n        if (cellIndex <= daysInMonth.length)\n        {\n            const date = daysInMonth[cellIndex - 1];\n            const dateStr = dateformat(date, 'yyyy-mm-dd');\n            setDateStr(dateStr);\n            setCellDate(date);\n            setDisableDay(date.getMonth() !== month - 1);\n            const todayStr = dateformat(new Date(), 'yyyy-mm-dd');\n            setIsPast(dateStr < todayStr);\n        }\n        else\n        {\n            const day = cellIndex - daysInMonth.length;\n            const date = new Date((daysInMonth[daysInMonth.length - 1].getTime() + ( day * 86400000)));\n            const dateStr = dateformat(date, 'yyyy-mm-dd');\n            setDateStr(dateStr);\n            setCellDate(date);\n            setDisableDay(true);\n            const todayStr = dateformat(new Date(), 'yyyy-mm-dd');\n            setIsPast(dateStr < todayStr);\n        }\n\n    }, [cellIndex, month, daysInMonth]);\n\n    useEffect ( () => {\n\n        const fecthData = async () =>\n        {\n            if (!dateStr || dateStr.length <= 0)\n            {\n                return;\n            }\n        \n            if (disableDay)\n            {\n                setBookingsCount(-2);\n                return;\n            }\n\n            setBookingsCount(-1);\n\n            var res = state.AdminCalendarCache?.find(record => record.method === 'getBookingsCountByDateStr' && record.query === dateStr)?.res;\n\n            if (!res)\n            {\n                res = await BookService.getAllBookingsCountByDateStr(dateStr);\n                setState(state => ({...state, AdminCalendarCache : [...state.AdminCalendarCache, {method: 'getBookingsCountByDateStr' , query : dateStr, res: res}]}));\n            }\n        \n            if (res.data.count >= 0)\n            {\n                setBookingsCount(res.data.count);\n            }\n\n        }\n\n      fecthData();\n\n    }, [dateStr]);\n\n    const getDayLabel = (_cellIndex , _month , _daysInMonth) =>\n    {\n        var date = null;\n        var disabled = false;\n        var day = -1;\n\n    \n\n        if (_cellIndex <= _daysInMonth.length)\n        {\n            date = _daysInMonth[_cellIndex - 1];\n            day = date.getDate();\n            if (date.getMonth() !== _month - 1)\n            {\n                disabled = true;\n            }\n        }\n        else\n        {\n            const _day = _cellIndex - _daysInMonth.length;\n            const date = new Date((_daysInMonth[_daysInMonth.length - 1].getTime() + ( _day * 86400000)));\n            day = date.getDate();\n            disabled = true;\n        }\n\n        const isToday = dateformat(new Date(),'yyyy-mm-dd') === dateformat(date, 'yyyy-mm-dd');\n\n        return (\n            <span className={(disabled) ? classes.DayLabelDisabled : isToday ? classes.DayLabelToday : classes.DayLabel}>\n                 {day > 0 ? `${day}` : ''}\n             </span>\n        );\n    }\n\n    const getBookingsCountLabel = (_bookingsCount) =>\n    {\n        if (_bookingsCount === -1)\n        {\n            return (\n                <div className={classes.LoadingProgress}>\n                      <CircularProgress disableShrink  />\n                </div>\n            );  \n        }\n        else if (_bookingsCount > 0 )\n        {\n            if (_bookingsCount >= MAX_BOOKING_COUNT / 2)\n            {\n                return (\n                    <div onClick={(event => dayClicked(event,cellDate))} className={classes.BookingCountLabelBusy}>\n                        {_bookingsCount < 10 ?  ` ${_bookingsCount}` : `${_bookingsCount}`}\n                    </div>\n                );\n            }\n            else\n            {\n                return (\n                    <div onClick={(event => dayClicked(event,cellDate))} className={classes.BookingCountLabel}>\n                          {_bookingsCount < 10 ?  ` ${_bookingsCount}` : `${_bookingsCount}`}\n                    </div>\n                );\n            }\n        }\n    }\n\n    const getBookingsCountGauge = (_bookingsCount) =>\n    {\n        if (_bookingsCount > 0)\n        {\n            let percent = (_bookingsCount / MAX_BOOKING_COUNT) * 100;\n            if (percent > 100)\n            {\n                percent = 100;\n            }\n\n            percent = 100 - percent;\n\n            return (\n\n                <div className={classes.BookingCountGauge}>\n                  <div style={{padding:\"0\", margin:\"0\", width:\"100%\", height:\"100%\", backgroundColor: \"#3f51b5\"}} >\n                        <div  style={{padding:\"0\", margin:\"0\", width:\"100%\", height:`${percent}%`, backgroundColor: \"#fafafa\"}} >\n\n                        </div>\n                  </div>\n                </div>\n            );\n        }\n    }\n\n    return (\n        <React.Fragment>\n\n            <div className={classes.Container} onClick={(event => dayClicked(event,cellDate))}>\n\n              {getDayLabel(cellIndex, month, daysInMonth)}\n\n              {getBookingsCountLabel(bookingsCount)}\n\n              {getBookingsCountGauge(bookingsCount)}\n\n            </div>\n\n        </React.Fragment>\n\n\n    );\n}\n\nMonthViewCell.propTypes = {\n    key: PropTypes.string.isRequired,\n    cellIndex: PropTypes.number.isRequired,\n    month: PropTypes.number.isRequired,\n    daysInMonth: PropTypes.arrayOf(PropTypes.date),\n    dayClicked: PropTypes.func\n  };\n\n \n  \nexport default MonthViewCell;","import calendar from 'node-calendar';\n\n\nexport default class CalendarUtil {\n\n    static getMonthRange = (month , year) =>\n    {\n        return new calendar.Calendar(calendar.SUNDAY).itermonthdates(year, month);\n    } \n\n} ","import React, { useEffect, useState } from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport PropTypes from 'prop-types';\nimport MonthViewCell from './MonthViewCell';\nimport CalendarUtil from './calendar-util';\n\nconst dayLables = ['Sun', 'Mon', 'Tue', 'Wed' , 'Thu', 'Fri', 'Sat'];\nconst days = [1,2,3,4,5,6,7]; \nconst rows = [1,2,3,4,5,6];\n\nconst useStyles = makeStyles((theme) => ({\n\n    table: {\n        width: \"100%\",\n        border: \"1px solid #ddd\",\n        borderCollapse: \"collapse\",\n    },\n\n    th: {\n        border: \"1px solid #ddd\",\n        borderCollapse: \"collapse\",\n        verticalAlign: \"middle\",\n        fontcolor: \"#555\",\n        fontWeight: \"400\",\n        fontSize: \"15px\",\n        paddingTop: \"5px\",\n        paddingBottom: \"5px\",\n        width: \"14%\"\n    },\n\n    td: {\n        border: \"1px solid #ddd\",\n        borderCollapse: \"collapse\",\n        verticalAlign: \"middle\",\n    }\n\n  }));\n\nconst MonthView = ({month, year, dayClicked}) => {\n    const classes = useStyles();\n\n    const daysInMonth = CalendarUtil.getMonthRange(month,year);\n\n    return (\n        <React.Fragment>\n\n            <table className={classes.table}>\n                <thead>\n                    <tr>\n                        {dayLables.map(label => (\n                            <th key={`th-${label}`} className={classes.th}>\n                                {label}\n                            </th>\n                        ))}\n                    </tr>\n                </thead>\n                <tbody>\n                    {rows.map(row => (\n                        <tr>\n                            {days.map(day => (\n                                <td className={classes.td}>\n                                    <MonthViewCell \n                                        key={`${month}${year}${(row-1) * days.length + day}`} \n                                        cellIndex={(row-1) * days.length + day} \n                                        month={month} \n                                        daysInMonth={daysInMonth}\n                                        dayClicked = {dayClicked}\n                                        />\n                                </td>\n                            ))}\n                        </tr>\n                    ))}            \n                </tbody>\n\n            </table>\n\n      \n        </React.Fragment>\n\n\n    );\n}\n\nMonthView.propTypes = {\n    month: PropTypes.number.isRequired,\n    year: PropTypes.number.isRequired,\n    dayClicked: PropTypes.func\n  };\n\n\nexport default MonthView;","import React, { useEffect, useState } from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport PropTypes from 'prop-types';\nimport dateformat from 'dateformat';\nimport BookService from '../services/BookService';\n\nimport CircularProgress from '@material-ui/core/CircularProgress';\nimport GlobalState from '../../GlobalState';\n\nimport axios from 'axios'\n\nconst useStyles = makeStyles((theme) => ({\n\n    Container: {\n        width: \"100%\",\n        paddingTop: \"40%\",\n        position: \"relative\",\n        backgroundColor: \"#fff\",\n        cursor: \"pointer\"\n    },\n\n    ContainerPast: {\n        width: \"100%\",\n        paddingTop: \"40%\",\n        position: \"relative\",\n        backgroundColor: \"#fafafa\",\n        cursor: \"pointer\"\n    },\n    \n    DayLabel: {\n        position: \"absolute\",\n        top: \"5px\",\n        right: \"5px\",\n        color: \"#555\",\n        fontSize: \"1rem\"\n    },\n\n    DayLabelDisabled: {\n        position: \"absolute\",\n        top: \"5px\",\n        right: \"5px\",\n        color: \"#ddd\",\n        fontSize: \"1rem\"\n    },\n\n    BookingCountLabel: {\n        position: \"absolute\",\n        top: \"25%\",\n        left: \"38%\",\n        color: \"#3f51b5\",\n        backgroundColor: \"#ebedf7\",\n        fontSize: \"14px\",\n        fontWeight: \"600\",\n        padding: \"5px\",\n        borderRadius: \"50%\",\n        minWidth: \"30px\",\n        cursor : \"pointer\",\n        textAlign: \"center\"\n    },\n\n    BookingCountLabelBusy: {\n        position: \"absolute\",\n        top: \"25%\",\n        left: \"38%\",\n        color: \"#b00000\",\n        backgroundColor: \"#fce6e6\",\n        fontSize: \"14px\",\n        fontWeight: \"600\",\n        padding: \"5px\",\n        borderRadius: \"50%\",\n        minWidth: \"30px\",\n        cursor : \"pointer\",\n        textAlign: \"center\"\n    },\n\n    LoadingProgress: {\n        position: \"absolute\",\n        top: \"40%\",\n        left: \"40%\",\n      },\n\n      BookingCountGauge: {\n        position: \"absolute\",\n        bottom: \"5%\",\n        left: \"8%\",\n        width : \"85%\",\n        height: \"8%\"\n    },\n\n  }));\n\nconst MAX_BOOKING_COUNT = 1;  \n\nconst WeekViewCell = ({key, date, time, dayClicked}) => {\n    const classes = useStyles();\n\n    const [state, setState] = React.useContext(GlobalState);\n    const [bookingsCount, setBookingsCount] = React.useState(-1);\n    const [isPast, setIsPast] = React.useState(false);\n\n    const [cellDate, setCellDate] = React.useState(new Date());\n\n    useEffect( () => {\n        const todayStr = dateformat(new Date(), 'yyyy-mm-dd');\n        setIsPast(date < todayStr);\n\n        setCellDate(new Date(date));\n\n    }, [date]);\n\n    useEffect ( () => {\n      \n      \n      \n        if (!date || date.length <= 0 || !time || time.length <= 0)\n        {\n            return;\n        }\n        \n        // if (isPast)\n        // {\n        //     setBookingsCount(-2);\n        //     return;\n        // }\n\n        setBookingsCount(-1);\n\n       \n\n        var res = state.AdminCalendarCache?.find(record => record.method === 'getBookingsCountByDateStrandTime' && record.query === `${date}${time}`)?.res;\n        if (res)\n        {\n            if (res.data.count >= 0)\n            {\n                setBookingsCount(res.data.count);\n            }  \n            return;\n        }\n\n        let source = axios.CancelToken.source();\n        BookService.getAllBookingsCountByDateStrandTime(date, time, source).then( res => {\n            if (res.data.count >= 0)\n            {\n                setBookingsCount(res.data.count);\n                setState(state => ({...state, AdminCalendarCache : [...state.AdminCalendarCache, {method: 'getBookingsCountByDateStrandTime' , query : `${date}${time}`, res: res}]}));\n            }  \n        }).catch( err => \n            {\n                //do nothing\n            });\n     \n        return () => {\n           if (source)\n              source.cancel('Cancelling in cleanup');\n        }\n     \n    }, [date, time]);\n\n\n    const getBookingsCountLabel = (_bookingsCount) =>\n    {\n        if (_bookingsCount === -1)\n        {\n            return (\n                <div className={classes.LoadingProgress}>\n                      <CircularProgress disableShrink  />\n                </div>\n            );  \n        }\n        else if (_bookingsCount > 0)\n        {\n            if (_bookingsCount >= MAX_BOOKING_COUNT)\n            {\n                return (\n                    <div onClick={(event => dayClicked(event,cellDate))} className={classes.BookingCountLabelBusy}>\n                          {_bookingsCount < 10 ? ` ${_bookingsCount}` : `${_bookingsCount}` }\n                    </div>\n                );\n            }\n            else\n            {\n                return (\n                    <div onClick={(event => dayClicked(event,cellDate))} className={classes.BookingCountLabel}>\n                        {_bookingsCount < 10 ? ` ${_bookingsCount}` : `${_bookingsCount}` }\n                    </div>\n                );\n            }\n        }\n    }\n\n    const getBookingsCountGauge = (_bookingsCount) =>\n    {\n        if (_bookingsCount > 0 )\n        {\n            let percent = (_bookingsCount / MAX_BOOKING_COUNT) * 100;\n            if (percent > 100)\n            {\n                percent = 100;\n            }\n\n            // percent = 100 - percent;\n\n            return (\n\n                <div className={classes.BookingCountGauge}>\n                  <div style={{padding:\"0\", margin:\"0\", width:\"100%\", height:\"100%\", backgroundColor: \"#f5f5f5\"}} >\n                        <div  style={{padding:\"0\", margin:\"0\", height:\"100%\", width:`${percent}%`, backgroundColor: \"#3f51b5\"}} >\n\n                        </div>\n                  </div>\n                </div>\n            );\n        }\n    }\n\n    return (\n        <React.Fragment>\n\n            <div className={isPast ? classes.ContainerPast : classes.Container} onClick={(event => dayClicked(event,cellDate))}>\n\n              {getBookingsCountLabel(bookingsCount)}\n\n              {getBookingsCountGauge(bookingsCount)}\n\n            </div>\n\n        </React.Fragment>\n\n\n    );\n}\n\nWeekViewCell.propTypes = {\n    key: PropTypes.string.isRequired,\n    date: PropTypes.string.isRequired,\n    time: PropTypes.string.isRequired,\n    dayClicked: PropTypes.func\n  };\n\n \n  \nexport default WeekViewCell;","import React, { useEffect, useState } from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport PropTypes from 'prop-types';\nimport WeekViewCell from './WeekViewCell';\nimport dateformat from 'dateformat';\n\nconst rows = [\n    '10:00 AM',\n    '10:30 AM', \n    '11:00 AM', \n    '11:30 AM', \n    '12:00 PM',\n    '12:30 PM',\n    '01:00 PM',\n    '01:30 PM',\n    '02:00 PM',\n    '02:30 PM',\n    '03:00 PM',\n    '03:30 PM',\n    '04:00 PM',\n    '04:30 PM',\n    '05:00 PM',\n    '05:30 PM',\n];\n\n\n\nconst useStyles = makeStyles((theme) => ({\n\n    table: {\n        width: \"100%\",\n        border: \"1px solid #ddd\",\n        borderCollapse: \"collapse\",\n        overflowY: \"auto\"\n    },\n\n    th: {\n        border: \"1px solid #ddd\",\n        borderCollapse: \"collapse\",\n        verticalAlign: \"middle\",\n        fontcolor: \"#555\",\n        fontWeight: \"400\",\n        fontSize: \"15px\",\n        paddingTop: \"5px\",\n        paddingBottom: \"5px\",\n        width: \"12%\", \n    },\n\n    td: {\n        border: \"1px solid #ddd\",\n        borderCollapse: \"collapse\",\n        verticalAlign: \"middle\",\n        height : \"50px\",\n        width: \"12%\", \n    }\n\n  }));\n\nconst WeekView = ({dates, dayClicked}) => {\n    const classes = useStyles();\n\n    return (\n        <React.Fragment>\n\n        <div style={{overflowY: \"scroll\" , height: \"60px\"}}>\n            <table className={classes.table}>\n                <thead>\n                    <tr>\n                        <th style={{width: \"7%\"}}>\n                        \n                        </th>\n                            {dates.map(date => (\n                                <th className={classes.th}>\n                                    <div style={{paddingBottom: \"5px\", color: \"#aaa\"}}>\n                                         {dateformat(date, 'ddd')}\n                                    </div>\n                                    <div>\n                                        <span style={{color: \"#aaa\"}}>\n                                            {dateformat(date, 'mmm ')}\n                                        </span> \n                                        <span  style={(dateformat(new Date(),'yyyy-mm-dd') === dateformat(date, 'yyyy-mm-dd')) ? { backgroundColor: \"#1a73e8\", color: \"#fff\", borderRadius: \"50%\",  padding: \"5px\",} : {color: \"#333\", fontWeight:\"500\"}}>\n                                             {dateformat(date, ' d')}\n                                        </span>\n                                       \n                                    </div>\n                                </th>\n                        ))}\n                    </tr>\n                </thead>\n             </table>\n\n        </div>\n\n            <div style={{overflowY: \"scroll\" , height: \"70vh\"}}>\n                <table className={classes.table}>   \n                    <tbody>\n                        {rows.map(row => (\n                            <tr>\n                                <td style={{width: \"7%\"}}>\n                                    {row}\n                                </td>\n                                {dates.map(day => (\n                                    <td className={classes.td}>\n                                        <WeekViewCell \n                                                dayClicked = {dayClicked}\n                                                key={`${dateformat(day,'yyyy-mm-dd')}-${row.replace(':','-')}`} \n                                                date={dateformat(day,'yyyy-mm-dd')} \n                                                time={row}/>\n                                    </td>\n                                ))}\n                            </tr>\n                        ))}            \n                    </tbody>\n                </table>\n            </div>                    \n      \n        </React.Fragment>\n\n\n    );\n}\n\nWeekView.propTypes = {\n    dates: PropTypes.arrayOf(PropTypes.any).isRequired,\n    dayClicked: PropTypes.func\n  };\n\n\nexport default WeekView;","import React, { useEffect, useRef, useState } from \"react\";\nimport BookService from \"./services/BookService\";\nimport Typography from \"@material-ui/core/Typography\";\nimport {\n  Backdrop,\n  Button,\n  Checkbox,\n  CircularProgress,\n  Divider,\n  FormControlLabel,\n  Grid,\n  InputAdornment,\n  InputLabel,\n  Link,\n  makeStyles,\n  MenuItem,\n  Select,\n  Switch,\n  TextField,\n  Tooltip,\n} from \"@material-ui/core\";\nimport GlobalState from \"../GlobalState\";\nimport { withStyles } from \"@material-ui/core/styles\";\n\nimport CreditCardIcon from \"@material-ui/icons/CreditCard\";\n\nimport Dialog from \"@material-ui/core/Dialog\";\nimport DialogContent from \"@material-ui/core/DialogContent\";\n\nimport DialogTitle from \"@material-ui/core/DialogTitle\";\nimport Draggable from \"react-draggable\";\nimport Paper from \"@material-ui/core/Paper\";\n\nimport Alert from \"@material-ui/lab/Alert\";\n\nimport PropTypes from \"prop-types\";\nimport LinearProgress from \"@material-ui/core/LinearProgress\";\nimport Box from \"@material-ui/core/Box\";\n\nimport Radio from \"@material-ui/core/Radio\";\nimport RadioGroup from \"@material-ui/core/RadioGroup\";\nimport FormControl from \"@material-ui/core/FormControl\";\nimport FormLabel from \"@material-ui/core/FormLabel\";\nimport { corporates } from \"./Corporates\";\nimport NumberFormat from \"react-number-format\";\n\nimport AddIcon from \"@material-ui/icons/Add\";\nimport { validate } from \"email-validator\";\nimport DateRangeIcon from \"@material-ui/icons/DateRange\";\nimport { CalendarColors } from \"../Admin/calendar-admin/colors\";\n\nvar interval;\n\nconst useStyles = makeStyles((theme) => ({\n  title: {\n    marginTop: theme.spacing(0),\n    marginBottom: theme.spacing(1),\n  },\n\n  refreshButton: {\n    marginLeft: theme.spacing(2),\n  },\n\n  checkIcon: {\n    color: \"green\",\n  },\n\n  closeIcon: {\n    color: \"red\",\n  },\n\n  RefLink: {\n    cursor: \"pointer\",\n  },\n\n  BookedLabel: {\n    backgroundColor: \"#606060\",\n    color: \"#fff\",\n    paddingRight: \"10px\",\n    paddingLeft: \"10px\",\n  },\n\n  PatientAttendedLabel: {\n    backgroundColor: \"#0066aa\",\n    color: \"#fff\",\n    paddingRight: \"15px\",\n    paddingLeft: \"10px\",\n  },\n\n  SampleTakenLabel: {\n    backgroundColor: \"#0066cc\",\n    color: \"#fff\",\n    paddingRight: \"40px\",\n    paddingLeft: \"10px\",\n  },\n\n  ReportSentLabel: {\n    backgroundColor: \"#009900\",\n    color: \"#fff\",\n    paddingRight: \"90px\",\n    paddingLeft: \"10px\",\n  },\n\n  ReportCertSentLabel: {\n    backgroundColor: \"#009900\",\n    color: \"#fff\",\n    paddingRight: \"68px\",\n    paddingLeft: \"10px\",\n  },\n\n  archiveButton: {},\n\n  smartMatchButton: {\n    backgroundColor: \"#2f942e\",\n    \"&:hover\": {\n      background: \"green\",\n      color: \"#fff\",\n    },\n    textDecoration: \"none !important\",\n    marginRight: \"10px\",\n    // padding: \"10px\"\n  },\n\n  infoTitle: {\n    fontWeight: \"400\",\n  },\n\n  infoData: {\n    paddingLeft: \"10px\",\n    fontWeight: \"800\",\n  },\n\n  matchButton: {\n    marginTop: \"30px\",\n    marginBottom: \"20px\",\n    backgroundColor: \"#2f942e\",\n    \"&:hover\": {\n      background: \"green\",\n      color: \"#fff\",\n    },\n    textDecoration: \"none !important\",\n    padding: \"10px\",\n    paddingLeft: \"50px\",\n    paddingRight: \"50px\",\n  },\n\n  resendButton: {\n    marginTop: \"5px\",\n    marginBottom: \"5px\",\n    backgroundColor: \"#2f942e\",\n    \"&:hover\": {\n      background: \"green\",\n      color: \"#fff\",\n    },\n    textDecoration: \"none !important\",\n    padding: \"10px\",\n    paddingLeft: \"50px\",\n    paddingRight: \"50px\",\n  },\n\n  resendFilesButton: {\n    marginTop: \"5px\",\n    marginBottom: \"5px\",\n    backgroundColor: \"#3792ad\",\n    \"&:hover\": {\n      background: \"#2f798f\",\n      color: \"#fff\",\n    },\n    textDecoration: \"none !important\",\n    padding: \"10px\",\n    paddingLeft: \"50px\",\n    paddingRight: \"50px\",\n  },\n\n  cancelButton: {\n    marginBottom: \"10px\",\n    textDecoration: \"none !important\",\n    padding: \"10px\",\n    paddingLeft: \"90px\",\n    paddingRight: \"90px\",\n  },\n\n  CalendarIcon: {\n    color: theme.palette.primary.main,\n  },\n\n  DateTimeLabel: {\n    fontWeight: \"500\",\n    color: theme.palette.primary.main,\n  },\n\n  backdrop: {\n    zIndex: theme.zIndex.drawer + 5,\n    color: \"#fff\",\n  },\n\n  PriceLabelPaid:{\n    color: theme.palette.primary.main,\n    fontWeight: \"600\"\n  },\n\n  PriceLabelNotPaid:{\n    color: theme.palette.secondary.main,\n    fontWeight: \"600\"\n  },\n\n\n}));\n\nconst Packages = [\n  { packageName: \"Consultation with Consultant Gynaecologist\" },\n  { packageName: `Coil Fitting/Coil Removal` },\n  { packageName: `Well Woman Check` },\n  { packageName: `Sexual Health Screening` },\n  { packageName: `Pre-pregnancy/Fertility check` },\n  { packageName: `Gynaecological Ultrasound` },\n  { packageName: `HPV Vaccination` },\n  { packageName: `Cervical / Pap Smear` },\n  { packageName: `HPV Treatment / Wart Cryo-Therapy` },\n];\n\nfunction NumberFormatCustom(props) {\n  const { inputRef, onChange, ...other } = props;\n\n  return (\n    <NumberFormat\n      {...other}\n      getInputRef={inputRef}\n      onValueChange={(values) => {\n        onChange({\n          target: {\n            name: props.name,\n            value: values.value,\n          },\n        });\n      }}\n      thousandSeparator\n      isNumericString\n      prefix=\"\"\n    />\n  );\n}\n\nNumberFormatCustom.propTypes = {\n  inputRef: PropTypes.func.isRequired,\n  name: PropTypes.string.isRequired,\n  onChange: PropTypes.func.isRequired,\n};\n\nconst BorderLinearProgress = withStyles((theme) => ({\n  root: {\n    height: 10,\n    borderRadius: 5,\n  },\n  colorPrimary: {\n    backgroundColor: \"#cedbce\", //theme.palette.grey[theme.palette.type === 'light' ? 200 : 700],\n  },\n  bar: {\n    borderRadius: 5,\n    backgroundColor: \"#2f942e\",\n  },\n}))(LinearProgress);\nfunction LinearProgressWithLabel(props) {\n  return (\n    <Box display=\"flex\" alignItems=\"center\">\n      <Box width=\"100%\" mr={1}>\n        <BorderLinearProgress variant=\"determinate\" {...props} />\n      </Box>\n      <Box minWidth={35}>\n        <Typography\n          style={{ fontWeight: \"800\", color: \"#5e855e\" }}\n          variant=\"body2\"\n          color=\"textSecondary\"\n        >{`${Math.round(props.value)}%`}</Typography>\n      </Box>\n    </Box>\n  );\n}\n\nLinearProgressWithLabel.propTypes = {\n  /**\n   * The value of the progress indicator for the determinate and buffer variants.\n   * Value between 0 and 100.\n   */\n  value: PropTypes.number.isRequired,\n};\n\nfunction PaperComponent(props) {\n  return (\n    <Draggable\n      handle=\"#draggable-dialog-title\"\n      cancel={'[class*=\"MuiDialogContent-root\"]'}\n    >\n      <Paper {...props} />\n    </Draggable>\n  );\n}\n\nexport default function NewBookingDialog(props) {\n  const classes = useStyles();\n\n  const [state, setState] = React.useContext(GlobalState);\n  const [saving, setSaving] = useState(false);\n\n  const [fullname, setFullname] = React.useState(\"\");\n  const [fullnameError, setFullnameError] = React.useState(false);\n\n  const [phone, setPhone] = React.useState(\"\");\n  const [email, setEmail] = React.useState(\"\");\n  const [service, setService] = React.useState(\"\");\n  const [notes, setNotes] = React.useState(\"\");\n\n  const [deposit, setDeposit] = React.useState(false);\n\n  const depositChanged = (event) => {\n    setDeposit(event.target.checked);\n  };\n\n  const fullnameChanged = (event) => {\n    setFullname(event.target.value);\n    setFullnameError(false);\n  };\n\n  const phoneChanged = (event) => {\n    setPhone(event.target.value);\n  };\n\n  const emailChanged = (event) => {\n    setEmail(event.target.value);\n  };\n\n  const serviceChanged = (event) => {\n    setService(event.target.value);\n  };\n\n  const notesChanged = (event) => {\n    setNotes(event.target.value);\n  };\n\n  const handleClose = () => {\n    if (saving) return;\n\n    setFullname(\"\");\n    setFullnameError(false);\n    setPhone(\"\");\n    setEmail(\"\");\n    setService(\"\");\n    setNotes(\"\");\n    setDeposit(false);\n\n    props.handleClose();\n    setSaving(false);\n  };\n\n  const validateBooking = () => {\n    let error = false;\n    if (!fullname || fullname.trim().length < 1) {\n      setFullnameError(true);\n      error = true;\n    }\n    return !error;\n  };\n\n  const saveClicked = async () => {\n    if (!validateBooking()) {\n      return;\n    }\n\n    setSaving(true);\n\n    try {\n      await BookService.addNewBooking({\n        bookingDate: props.date,\n        bookingTime: props.time,\n        fullname: fullname,\n        phone: phone,\n        email: email,\n        service: service,\n        notes: notes,\n        deposit: deposit ? 100 : 0,\n      });\n      setSaving(false);\n      setState((state) => ({\n        ...state,\n        bookingDialogDataChanged: !state.bookingDialogDataChanged\n          ? true\n          : false,\n      }));\n      handleClose();\n    } catch (err) {\n      console.error(err);\n      setSaving(false);\n    }\n  };\n\n  return (\n    <React.Fragment>\n      {props.date && props.time && (\n        <React.Fragment>\n          <Dialog\n            maxWidth=\"xs\"\n            open={props.open}\n            onClose={handleClose}\n            PaperComponent={PaperComponent}\n            aria-labelledby=\"form-dialog-title\"\n          >\n            <DialogTitle id=\"draggable-dialog-title\" style={{position:\"relative\"}}>\n              <Grid\n                container\n                spacing={2}\n                direction=\"row\"\n                justify=\"center\"\n                alignItems=\"center\"\n              >\n                <Grid item>\n                  <AddIcon style={{ color: \"#f50057\", fontSize: \"3rem\" }} />\n                </Grid>\n\n                <Grid item>\n                  <div\n                    style={{\n                      color: \"#f50057\",\n                      paddingBottom: \"10px\",\n                      fontWeight: \"800\",\n                    }}\n                  >\n                    {\" \"}\n                    ADD New Booking{\" \"}\n                  </div>\n                </Grid>\n              </Grid>\n\n              <div style={{position:\"absolute\", top: \"5px\", right: \"5px\", backgroundColor:CalendarColors.GYNAE_COLOR, color:\"#fff\", padding: \"0px 5px\", borderRadius:\"10px\", fontSize:\"1rem\"}}>\n                    GYNAE\n              </div>\n\n              <Divider />\n            </DialogTitle>\n            <DialogContent>\n              <div\n                style={{\n                  height: \"480px\",\n                }}\n              >\n                <Grid\n                  container\n                  direction=\"row\"\n                  justify=\"stretch\"\n                  spacing={2}\n                  alignItems=\"center\"\n                >\n                  <Grid item xs={12}>\n                    <Grid\n                      container\n                      direction=\"row\"\n                      justify=\"center\"\n                      alignItems=\"center\"\n                      spacing={1}\n                    >\n                      <Grid item>\n                        <DateRangeIcon className={classes.CalendarIcon} />\n                      </Grid>\n                      <Grid item>\n                        <span className={classes.DateTimeLabel}>\n                          {props.date} , {props.time}\n                        </span>\n                      </Grid>\n                    </Grid>\n                  </Grid>\n\n                  <Grid item xs={12}>\n                    <TextField\n                      fullWidth\n                      autoFocus\n                      error={fullnameError}\n                      label=\"Full Name\"\n                      value={fullname}\n                      required\n                      onChange={fullnameChanged}\n                      name=\"fullname\"\n                      id=\"fullname-id\"\n                      autoComplete=\"none\"\n                    />\n                  </Grid>\n\n                  <Grid item xs={12}>\n                    <TextField\n                      fullWidth\n                      label=\"Telephone\"\n                      value={phone}\n                      onChange={phoneChanged}\n                      name=\"phone\"\n                      id=\"phone-id\"\n                      autoComplete=\"none\"\n                    />\n                  </Grid>\n\n                  <Grid item xs={12}>\n                    <TextField\n                      fullWidth\n                      label=\"Email\"\n                      value={email}\n                      onChange={emailChanged}\n                      name=\"email\"\n                      id=\"email-id\"\n                      autoComplete=\"none\"\n                    />\n                  </Grid>\n\n                  <Grid item xs={12} md={12}>\n                    <FormControl className={classes.formControl} fullWidth>\n                      <InputLabel id=\"service-label-id\">Service</InputLabel>\n                      <Select\n                        fullWidth\n                        labelId=\"service-label-id\"\n                        id=\"service-id\"\n                        value={service}\n                        onChange={serviceChanged}\n                      >\n                        {Packages.map((item) => (\n                          <MenuItem value={item.packageName}>\n                            {item.packageName}\n                          </MenuItem>\n                        ))}\n                      </Select>\n                    </FormControl>\n                  </Grid>\n\n                  <Grid item xs={12}>\n                    <TextField\n                      fullWidth\n                      label=\"Notes\"\n                      value={notes}\n                      onChange={notesChanged}\n                      name=\"notes\"\n                      id=\"notes-id\"\n                      autoComplete=\"none\"\n                    />\n                  </Grid>\n\n                  <Grid otem xs={12} style={{marginTop:\"15px\"}}>\n                    <FormControlLabel\n                      control={\n                        <Switch\n                          color=\"primary\"\n                          checked={deposit}\n                          onChange={depositChanged}\n                          name=\"deposit\"\n                        />\n                      }\n                      label={deposit ? <span className={classes.PriceLabelPaid}>£100 Deposit Paid</span> : <span className={classes.PriceLabelNotPaid}>£100 Deposit Not Paid</span>}\n                    />\n                  </Grid>\n                </Grid>\n\n                <div\n                  style={{\n                    position: \"absolute\",\n                    bottom: \"20px\",\n                    right: \"20px\",\n                  }}\n                >\n                  <Grid\n                    container\n                    direction=\"row\"\n                    justify=\"flex-end\"\n                    alignItems=\"center\"\n                    spacing={1}\n                  >\n                    <Grid item>\n                      <Button\n                        onClick={handleClose}\n                        style={{ width: \"100px\" }}\n                        disabled={saving}\n                      >\n                        back\n                      </Button>\n                    </Grid>\n                    <Grid item>\n                      <Button\n                        onClick={saveClicked}\n                        variant=\"contained\"\n                        color=\"secondary\"\n                        style={{ width: \"100px\" }}\n                        disabled={saving}\n                      >\n                        Save\n                      </Button>\n                    </Grid>\n                  </Grid>\n                </div>\n              </div>\n\n              <Backdrop className={classes.backdrop} open={saving}>\n                <CircularProgress color=\"inherit\" />\n              </Backdrop>\n            </DialogContent>\n          </Dialog>\n        </React.Fragment>\n      )}\n    </React.Fragment>\n  );\n}\n","import React, { useEffect, useState } from \"react\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport PropTypes from \"prop-types\";\nimport dateformat from \"dateformat\";\nimport BookService from \"../services/BookService\";\n\nimport CircularProgress from \"@material-ui/core/CircularProgress\";\nimport GlobalState from \"../../GlobalState\";\nimport BookingDialog from \"../BookingDialog\";\nimport NewBookingDialog from \"../NewBookingDialog\";\n\nconst useStyles = makeStyles((theme) => ({\n  Container: {\n    width: \"100%\",\n    height: \"50px\",\n    position: \"relative\",\n    backgroundColor: \"#fff\",\n    display: \"flex\",\n    alignItems: \"flex-start\",\n    justifyItems: \"flex-start\",\n    paddingLeft: \"10px\",\n  },\n\n  ContainerPast: {\n    width: \"100%\",\n    paddingTop: \"50px\",\n    position: \"relative\",\n    backgroundColor: \"#fafafa\",\n  },\n\n  DayLabel: {\n    position: \"absolute\",\n    top: \"5px\",\n    right: \"5px\",\n    color: \"#555\",\n    fontSize: \"1rem\",\n  },\n\n  DayLabelDisabled: {\n    position: \"absolute\",\n    top: \"5px\",\n    right: \"5px\",\n    color: \"#ddd\",\n    fontSize: \"1rem\",\n  },\n\n  LoadingProgress: {\n    position: \"absolute\",\n    top: \"10%\",\n    left: \"40%\",\n  },\n\n  BookingCountGauge: {\n    position: \"absolute\",\n    bottom: \"5%\",\n    left: \"8%\",\n    width: \"85%\",\n    height: \"8%\",\n  },\n\n  bookingBox: {\n    display: \"flex\",\n    marginRight: \"10px\",\n    marginTop: \"5px\",\n    padding: \"10px\",\n    maxWidth: \"150px\",\n    overflowX: \"hidden\",\n    border: \"1px solid #eee\",\n    fontSize: \"12px\",\n    fontWeight: \"500\",\n    cursor: \"pointer\",\n    backgroundColor: \"#ebedf7\",\n    color: \"#3f51b5\",\n    boxShadow: \"2px 4px #fafafa\",\n\n    \"&:hover\": {\n      background: \"#3f51b5\",\n      color: \"#ebedf7\",\n    },\n  },\n\n  bookingBoxNew: {\n    display: \"flex\",\n    marginRight: \"10px\",\n    marginTop: \"5px\",\n    padding: \"10px\",\n    maxWidth: \"150px\",\n    overflowX: \"hidden\",\n    border: \"1px solid #ddd\",\n    color: \"#ccc\",\n    fontSize: \"12px\",\n    fontWeight: \"500\",\n    cursor: \"pointer\",\n    backgroundColor: \"#fff\",\n\n    boxShadow: \"2px 4px #fafafa\",\n    transition: \"all 0.5s ease\",\n    borderRadius: \"4px\",\n\n    \"&:hover\": {\n      background: \"#fff\",\n      color: theme.palette.secondary.main,\n      borderColor:  theme.palette.secondary.main,\n    },\n  },\n\n  bookingBoxSampleTaken: {\n    display: \"flex\",\n    marginRight: \"10px\",\n    marginTop: \"5px\",\n    padding: \"10px\",\n    maxWidth: \"150px\",\n    overflowX: \"hidden\",\n    border: \"1px solid #eee\",\n    fontSize: \"12px\",\n    fontWeight: \"500\",\n    cursor: \"pointer\",\n    backgroundColor: \"#0066cc\",\n    color: \"#eee\",\n    boxShadow: \"2px 4px #fafafa\",\n\n    \"&:hover\": {\n      background: \"#0059b3\",\n      color: \"#fafafa\",\n    },\n  },\n\n  bookingBoxPositive: {\n    display: \"flex\",\n    marginRight: \"10px\",\n    marginTop: \"5px\",\n    padding: \"10px\",\n    maxWidth: \"150px\",\n    overflowX: \"hidden\",\n    border: \"1px solid #eee\",\n    fontSize: \"12px\",\n    fontWeight: \"500\",\n    cursor: \"pointer\",\n    backgroundColor: \"#d40b0b\",\n    color: \"#fff2f2\",\n    boxShadow: \"2px 4px #fafafa\",\n\n    \"&:hover\": {\n      background: \"#bf0000\",\n      color: \"#fff\",\n    },\n  },\n\n  bookingBoxReportSent: {\n    display: \"flex\",\n    marginRight: \"10px\",\n    marginTop: \"5px\",\n    padding: \"10px\",\n    maxWidth: \"150px\",\n    overflowX: \"hidden\",\n    border: \"1px solid #eee\",\n    fontSize: \"12px\",\n    fontWeight: \"500\",\n    cursor: \"pointer\",\n    backgroundColor: \"#009900\",\n    color: \"#eee\",\n    boxShadow: \"2px 4px #fafafa\",\n\n    \"&:hover\": {\n      background: \"#006e00\",\n      color: \"#fafafa\",\n    },\n  },\n}));\n\nconst DayViewCell = ({ key, date, time }) => {\n  const classes = useStyles();\n\n  const [state, setState] = React.useContext(GlobalState);\n  const [bookings, setBookings] = React.useState(null);\n  const [filteredBookings, setFilteredBookings] = React.useState(null);\n  const [selectedBooking, setSelectedBooking] = React.useState(null);\n\n  const [refresh, setRefresh] = React.useState(true);\n\n  const [isPast, setIsPast] = React.useState(false);\n\n  const [openDialog, setOpenDialog] = React.useState(false);\n  const [openDialogAddNew, setOpenDialogAddNew] = React.useState(false);\n\n\n  useEffect(() => {\n    const todayStr = dateformat(new Date(), \"yyyy-mm-dd\");\n    setIsPast(date < todayStr);\n  }, [date]);\n\n  useEffect(() => {\n    if (bookings) {\n      if (state.dayViewCalFilter && state.dayViewCalFilter.trim().length > 0) {\n        const search = state.dayViewCalFilter.trim().toUpperCase();\n        setFilteredBookings(\n          bookings.filter(\n            (booking) =>\n              booking.fullname.toLowerCase().indexOf(search.toLowerCase()) >= 0\n          )\n        );\n      } else {\n        setFilteredBookings([...bookings]);\n      }\n    }\n  }, [state.dayViewCalFilter, bookings]);\n\n  useEffect(() => {\n    const fetchData = async () => {\n      if (!date || date.length <= 0 || !time || time.length <= 0) {\n        return;\n      }\n\n      // if (isPast)\n      // {\n      //     setBookings([]);\n      //     return;\n      // }\n\n      setBookings(null);\n\n      var res = state.AdminCalendarCache?.find(\n        (record) =>\n          record.method === \"getBookingsByDateStrandTime\" &&\n          record.query === `${date}${time}`\n      )?.res;\n      if (!res || openDialog || openDialogAddNew) {\n        res = await BookService.getAllBookingsByDateStrandTime(date, time);\n        setState((state) => ({\n          ...state,\n          AdminCalendarCache: [\n            ...state.AdminCalendarCache,\n            {\n              method: \"getBookingsByDateStrandTime\",\n              query: `${date}${time}`,\n              res: res,\n            },\n          ],\n        }));\n      }\n\n      if (res.data.status === \"OK\") {\n        setBookings(res.data.bookings);\n      }\n    };\n\n    if (openDialog || openDialogAddNew) {\n      setState((state) => ({\n        ...state,\n        AdminCalendarCache: state.AdminCalendarCache.filter(\n          (record) =>\n            !(\n              record.method === \"getBookingsByDateStrandTime\" &&\n              record.query === `${date}${time}`\n            )\n        ),\n      }));\n      setState((state) => ({\n        ...state,\n        AdminCalendarCache: state.AdminCalendarCache.filter(\n          (record) =>\n            !(\n              record.method === \"getBookingsCountByDateStrandTime\" &&\n              record.query === `${date}${time}`\n            )\n        ),\n      }));\n      setState((state) => ({\n        ...state,\n        AdminCalendarCache: state.AdminCalendarCache.filter(\n          (record) =>\n            !(\n              record.method === \"getBookingsCountByDateStr\" &&\n              record.query === date\n            )\n        ),\n      }));\n    }\n\n    fetchData();\n  }, [date, time, state.bookingDialogDataChanged]);\n\n  const bookingCliked = (event, booking) => {\n    setSelectedBooking(booking);\n    setOpenDialog(true);\n  };\n\n  const getBookingClass = (status) => {\n    switch (status) {\n      case \"patient_attended\":\n        return classes.bookingBoxSampleTaken;\n      default:\n        return classes.bookingBox;\n    }\n  };\n\n  const addNewBookingClicked = () =>\n  {\n      setOpenDialogAddNew(true)\n  }\n\n  const getBookingsBox = (_bookings) => {\n    if (_bookings === null) {\n      return (\n        <div className={classes.LoadingProgress}>\n          <CircularProgress disableShrink />\n        </div>\n      );\n    } else if (_bookings.length >= 0) {\n      return (\n        <React.Fragment>\n          {_bookings.map((booking) => (\n            <div\n              style={booking.tr ? { borderTop: \"5px solid #d00fd6\" } : {}}\n              className={getBookingClass(booking.status)}\n              onClick={(event) => bookingCliked(event, booking)}\n            >\n              {`${booking.fullname}`.substring(0, 15)}\n            </div>\n          ))}\n\n          <div className={classes.bookingBoxNew} onClick={addNewBookingClicked}> + Add New Booking</div>\n        </React.Fragment>\n      );\n    }\n  };\n\n  const handleCloseDialog = () => {\n    setOpenDialog(false);\n  };\n\n  const handleCloseDialogAddNew = () => {\n    setOpenDialogAddNew(false);\n  };\n\n  return (\n    <React.Fragment>\n      <div className={classes.Container}>\n        {getBookingsBox(filteredBookings)}\n      </div>\n\n      <BookingDialog\n        booking={selectedBooking}\n        open={openDialog}\n        onClose={handleCloseDialog}\n      />\n\n      <NewBookingDialog\n        date={date}\n        time={time}\n        open={openDialogAddNew}\n        handleClose={handleCloseDialogAddNew}\n        />\n    </React.Fragment>\n  );\n};\n\nDayViewCell.propTypes = {\n  key: PropTypes.string.isRequired,\n  date: PropTypes.string.isRequired,\n  time: PropTypes.string.isRequired,\n};\n\nexport default DayViewCell;\n","import React, { useEffect, useState } from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport PropTypes from 'prop-types';\nimport DayViewCell from './DayViewCell';\nimport dateformat from 'dateformat';\n\n\n\n\nconst rows = [\n    '10:00 AM',\n    '10:30 AM', \n    '11:00 AM', \n    '11:30 AM', \n    '12:00 PM',\n    '12:30 PM',\n    '01:00 PM',\n    '01:30 PM',\n    '02:00 PM',\n    '02:30 PM',\n    '03:00 PM',\n    '03:30 PM',\n    '04:00 PM',\n    '04:30 PM',\n    '05:00 PM',\n    '05:30 PM',\n];\n\nconst useStyles = makeStyles((theme) => ({\n\n    table: {\n        width: \"100%\",\n        border: \"1px solid #ddd\",\n        borderCollapse: \"collapse\",\n        overflowY: \"auto\"\n    },\n\n    th: {\n        border: \"1px solid #ddd\",\n        borderCollapse: \"collapse\",\n        verticalAlign: \"middle\",\n        fontcolor: \"#555\",\n        fontWeight: \"400\",\n        fontSize: \"15px\",\n        paddingTop: \"5px\",\n        paddingBottom: \"5px\",\n        width: \"12%\", \n    },\n\n    td: {\n        border: \"1px solid #ddd\",\n        borderCollapse: \"collapse\",\n        verticalAlign: \"middle\",\n        height : \"50px\",\n        width: \"84%\", \n    },\n\n    titleLabel: {\n        paddingBottom: \"17px\",\n        paddingTop: \"17px\",\n        color: \"#777\",\n        fontSize: \"16px\"\n    },\n\n    titleLabelToday: {\n        paddingBottom: \"17px\",\n        paddingTop: \"17px\",\n        color: \"#fff\",\n        backgroundColor: \"#1a73e8\",\n        fontSize: \"16px\"\n    },\n\n  }));\n\nconst DayView = ({date}) => {\n    const classes = useStyles();\n\n    return (\n        <React.Fragment>\n\n        <div style={{overflowY: \"scroll\" , height: \"60px\"}}>\n            <table className={classes.table}>\n                <thead>\n                    <tr>\n                        <th style={{width: \"7%\"}}>\n                        \n                        </th>\n                        <th style={{width: \"84%\"}}>\n                                <div className={(dateformat(new Date(),'yyyy-mm-dd') === dateformat(date, 'yyyy-mm-dd')) ? classes.titleLabelToday : classes.titleLabel }>\n                                        {dateformat(date,'dddd')}\n                                </div>                                \n                        </th>\n                    </tr>\n                </thead>\n             </table>\n\n        </div>\n\n            <div style={{overflowY: \"scroll\" , height: \"70vh\"}}>\n                <table className={classes.table}>   \n                    <tbody>\n                        {rows.map(row => (\n                            <tr>\n                                <td style={{width: \"7%\"}}>\n                                    {row}\n                                </td>\n                               \n                                <td className={classes.td}>\n                                     <DayViewCell key={`${dateformat(date,'yyyy-mm-dd')}-${row}`} date={dateformat(date,'yyyy-mm-dd')} time={row}/>  \n                                </td>\n                            \n                            </tr>\n                        ))}            \n                    </tbody>\n                </table>\n            </div>                    \n      \n        </React.Fragment>\n\n\n    );\n}\n\nDayView.propTypes = {\n    date: PropTypes.any.isRequired\n  };\n\n\nexport default DayView;","import React, { useEffect, useState } from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport MonthView from './MonthView';\nimport { Button, Grid, IconButton, InputAdornment, TextField, Tooltip } from '@material-ui/core';\nimport ToggleButton from '@material-ui/lab/ToggleButton';\nimport ToggleButtonGroup from '@material-ui/lab/ToggleButtonGroup';\n\nimport NavigateBeforeIcon from '@material-ui/icons/NavigateBefore';\nimport NavigateNextIcon from '@material-ui/icons/NavigateNext';\nimport WeekView from './WeekView';\nimport dateformat from 'dateformat';\nimport DayView from './DayView';\nimport GlobalState from '../../GlobalState';\n\nimport CloseIcon from '@material-ui/icons/Close';\n\n\n\nconst monthNames = [\"January\", \"February\", \"March\", \"April\", \"May\", \"June\",\n  \"July\", \"August\", \"September\", \"October\", \"November\", \"December\"\n];\n\nconst useStyles = makeStyles((theme) => ({\n\n    title: {\n        textAlign: \"center\",\n        fontSize: \"24px\",\n        fontColor: \"#333\"\n    },\n\n  }));\n\nexport default function CalendarView() {\n    const classes = useStyles();\n\n    const [state, setState] = React.useContext(GlobalState);\n\n    const [month, setMonth] = React.useState(new Date().getMonth() + 1);\n    const [year, setYear] = React.useState(new Date().getFullYear());\n\n    const [day, setDay] = React.useState(new Date());\n\n    const [firstDayofWeek, setFirstDayofWeek] = React.useState(new Date());\n\n    const [weekDates, setWeekDates] = React.useState([]);\n\n    const [mode, setMode] = React.useState('month');\n    const [selectedTab, setSeletedTab] = React.useState('month');\n\n    const [filter,setFilter] = React.useState('');\n\n    const filterChanged = (event) =>{\n        setFilter(event.target.value);\n        setState(state => ({...state, dayViewCalFilter : event.target.value?.trim()?.toUpperCase()}))\n      }\n\n      const removeFilter = () =>\n      {\n        setFilter('');\n        setState(state => ({...state, dayViewCalFilter : ''}));\n      }\n\n\n    useEffect( () => {\n        const today = new Date();\n        const dayofWeek = today.getDay();\n        const firstdayofweek = new Date(today.getTime() - ( dayofWeek * 86400000));\n        setFirstDayofWeek(firstdayofweek);\n        setState(state => ({...state, AdminCalendarCache : []}));\n\n        return () =>\n        {\n            setState(state => ({...state, AdminCalendarCache : []}));\n            removeFilter();\n        }\n       \n    }, []);\n\n\n    useEffect( () => {\n        const dates = [];\n        for (var i = 0; i < 7 ; i++)\n        {\n            dates.push(new Date(firstDayofWeek.getTime() + ( i * 86400000)));\n        }\n        setWeekDates(dates);\n\n    }, [firstDayofWeek]);\n\n    const handlePrevButton = (event) =>\n    {\n       if (mode === 'month')\n       {\n            if (month === 1)\n            {\n                setYear(year - 1);\n            } \n\n            const newMonth = month === 1 ? 12 : month - 1;\n            setMonth(newMonth);\n\n            const newDay = new Date(year, newMonth - 1 , 1, 0 ,0 ,0 ,0);\n            setDay(newDay);\n\n            const dayofWeek = newDay.getDay();\n            setFirstDayofWeek(new Date(newDay.getTime() - ( dayofWeek * 86400000)));\n\n       } \n       else if (mode === 'week')\n       {\n           const newFirstDayofWeek = new Date(firstDayofWeek.getTime() - ( 7 * 86400000));\n           setFirstDayofWeek(newFirstDayofWeek);\n\n           setDay(newFirstDayofWeek);\n           setMonth(newFirstDayofWeek.getMonth() + 1);\n           setYear(newFirstDayofWeek.getFullYear());\n\n       }\n       else if (mode === 'day')\n       {\n           const newDay = new Date(day.getTime() - ( 1 * 86400000));\n           setDay(newDay);\n\n           const dayofWeek = newDay.getDay();\n           setFirstDayofWeek(new Date(newDay.getTime() - ( dayofWeek * 86400000)));\n\n           setMonth(newDay.getMonth() + 1);\n           setYear(newDay.getFullYear());\n       }\n    }\n\n    const handleNextButton = (event) =>\n    {\n        if (mode === 'month')\n        {\n            if (month === 12)\n            {\n                setYear(year + 1);\n            } \n       \n            const newMonth = month === 12 ? 1 : month + 1;\n            setMonth(newMonth);\n\n            const newDay = new Date(year, newMonth - 1 , 1, 0 ,0 ,0 ,0);\n            setDay(newDay);\n\n            const dayofWeek = newDay.getDay();\n            setFirstDayofWeek(new Date(newDay.getTime() - ( dayofWeek * 86400000)));\n        }\n        else if (mode === 'week')\n        {\n            const newFirstDayofWeek = new Date(firstDayofWeek.getTime() + ( 7 * 86400000));\n            setFirstDayofWeek(newFirstDayofWeek);\n\n            setDay(newFirstDayofWeek);\n            setMonth(newFirstDayofWeek.getMonth() + 1);\n            setYear(newFirstDayofWeek.getFullYear());\n\n        }\n        else if (mode === 'day')\n        {\n            const newDay = new Date(day.getTime() + ( 1 * 86400000));\n            setDay(newDay);\n\n            const dayofWeek = newDay.getDay();\n            setFirstDayofWeek(new Date(newDay.getTime() - ( dayofWeek * 86400000)));\n \n            setMonth(newDay.getMonth() + 1);\n            setYear(newDay.getFullYear());\n        }\n    }\n\n    const goToday = (event) => {\n        const newDay = new Date();\n        const dayofWeek = newDay.getDay();\n        setFirstDayofWeek(new Date(newDay.getTime() - ( dayofWeek * 86400000)));\n        setDay(newDay);\n        setMonth(newDay.getMonth() + 1);\n        setYear(newDay.getFullYear());\n    }\n\n    const dayClicked = (event, date) =>\n    {\n        const newDay = new Date(date);\n        const dayofWeek = newDay.getDay();\n        setFirstDayofWeek(new Date(newDay.getTime() - ( dayofWeek * 86400000)));\n        setDay(newDay);\n        setMonth(newDay.getMonth() + 1);\n        setYear(newDay.getFullYear());\n        setSeletedTab('day');\n        setMode('day');\n    }\n\n    const getContentFromMode = (_mode) => {\n        if (_mode === 'month')\n        {\n            return (\n                <MonthView dayClicked={dayClicked} month={month} year={year}/>    \n            );\n        }    \n        else if (_mode === 'week')\n        {\n            return (\n                    <WeekView dayClicked={dayClicked} dates={weekDates}/>\n            );\n            \n        }\n        else if (_mode === 'day')\n        {\n            return (\n                <DayView date={day}/>\n            );\n        }\n    }\n\n    const getCalendarTitleFromMode = (_mode) => {\n        if (_mode === 'month')\n        {\n            return (\n                <span className={classes.title}> {`${monthNames[month - 1]} ${year}`} </span>   \n            );\n        }    \n        else if (_mode === 'week')\n        {\n            const endOfWeek = new Date(firstDayofWeek.getTime() + ( 6 * 86400000));\n            let endofWeekStr = '';\n            if (endOfWeek.getMonth() === firstDayofWeek.getMonth())\n            {\n                endofWeekStr = dateformat(endOfWeek,'d');\n            }else\n            {\n                endofWeekStr = dateformat(endOfWeek,'mmm d');\n            }\n\n            return (\n                <span className={classes.title}> {`${dateformat(firstDayofWeek,'mmm d')} - ${endofWeekStr}, ${year}`} </span>\n            );\n            \n        }\n        else if (_mode === 'day')\n        {\n            return (\n                <span className={classes.title}> {`${dateformat(day,'mmmm d, yyyy')}`} </span>\n            );\n        }\n    }\n\n\n    const handleTabChanged = (event, value) => {\n        if (value && value.length)\n        {\n          setSeletedTab(value);\n          setMode(value);\n        }\n    };\n\n    const getPrevButtonTitle = (_mode) =>\n    {\n        return `Previuos ${mode}`;\n    }\n\n    const getNextButtonTitle = (_mode) =>\n    {\n        return `Next ${mode}`;\n    }\n\n    return (\n        <React.Fragment>\n\n          <Grid\n            container\n            direction=\"row\"\n            justify=\"space-between\"\n            alignItems=\"center\"\n            style= {{marginBottom: \"10px\", marginTop: \"0px\"}}\n            >  \n\n            <Grid item md={3}>\n                <div  style={{display:\"flex\", alignItems: \"flex-start\", justifyContent: \"flex-start\" , paddingLeft: \"10px\"}}>\n                    <Tooltip title={getPrevButtonTitle(mode)} placement=\"bottom-start\">\n                        <IconButton \n                                color=\"default\" \n                                aria-label=\"prev\"\n                                onClick = {handlePrevButton}\n                                >\n                            <NavigateBeforeIcon style={{fontSize: '2rem'}}/>\n                        </IconButton>\n                    </Tooltip>\n\n                    <Tooltip title={getNextButtonTitle(mode)} placement=\"bottom-end\">\n                        <IconButton \n                                color=\"default\" \n                                aria-label=\"next\"\n                                onClick = {handleNextButton}\n                                >\n                            <NavigateNextIcon style={{fontSize: '2rem'}}/>\n                        </IconButton>\n                    </Tooltip>\n\n                    <Button style={{marginTop: \"11px\", marginLeft: \"10px\"}} onClick={goToday} variant=\"outlined\"> Today </Button>\n                </div>\n\n            </Grid>\n\n            <Grid item md={6}>\n\n                    <Grid\n                        container\n                        direction=\"row\"\n                        justify=\"center\"\n                        alignItems=\"flex-end\"\n                        spacing = {3}\n                        >\n                            <Grid item>\n                                    {getCalendarTitleFromMode(mode)}\n                            </Grid>\n                            {mode === 'day' && (\n                                        <Grid item>\n                                                <TextField\n                                                    variant=\"standard\"\n                                                    style={{marginBottom : \"5px\"}}\n                                                    value={filter}\n                                                    onChange={filterChanged}\n                                                    margin=\"normal\"\n                                                    size=\"small\"\n                                                    id=\"filter\"\n                                                    label=\"Filter\"\n                                                    name=\"filter\"\n                                                    autoComplete=\"off\"\n                                                    InputProps={{\n                                                        endAdornment : \n                                                            <InputAdornment position=\"end\">\n                                                                <Tooltip title=\"Clear\">\n                                                                            <IconButton\n                                                                            aria-label=\"remove filter\"\n                                                                            onClick={() => removeFilter()}\n                                                                            onMouseDown={() => removeFilter()}\n                                                                        >\n                                                                            <CloseIcon/>\n                                                                        </IconButton>\n                                                                </Tooltip>\n                                                            \n                                                            </InputAdornment>\n                                                          \n                                                    }}\n                                                   \n                                                />\n                                        </Grid>\n                            )}\n                           \n                    </Grid>\n                \n            </Grid>\n\n            <Grid item md={3}>\n                <div  style={{display:\"flex\", alignItems: \"flex-end\", justifyContent: \"flex-end\", paddingRight: \"10px\" }}>\n                    <ToggleButtonGroup\n                        value={selectedTab}\n                        exclusive\n                        onChange={handleTabChanged}\n                        aria-label=\"select view mode\"\n                    >\n                        <ToggleButton style={selectedTab === 'month' ? {width: \"80px\", color: \"#3f51b5\", backgroundColor: \"#ebedf7\" } : {width: \"80px\"}} value=\"month\" aria-label=\"month view\">\n                                month\n                        </ToggleButton>\n                        <ToggleButton style={selectedTab === 'week' ? {width: \"80px\", color: \"#3f51b5\", backgroundColor: \"#ebedf7\"} : {width: \"80px\"}}  value=\"week\" aria-label=\"week view\">\n                                week\n                        </ToggleButton>\n                        <ToggleButton style={selectedTab === 'day' ? {width: \"80px\", color: \"#3f51b5\", backgroundColor: \"#ebedf7\"} : {width: \"80px\"}} value=\"day\" aria-label=\"day view\">\n                                day\n                        </ToggleButton>\n                    </ToggleButtonGroup>\n                </div>\n            </Grid>\n\n           </Grid> \n\n             {getContentFromMode(mode)}\n\n        </React.Fragment>\n\n\n    );\n\n}","import axios from 'axios';\nimport { authToken, backendAPI } from '../../GlobalPath';\n\nexport default axios.create({\n  baseURL: backendAPI,\n  headers : {\n      'Authorization' : authToken,\n       'Content-Type': 'application/json',\n  }\n});","import API from './api';\nimport axiosRetry from 'axios-retry';\n\nexport default class BookService {\n\n\n   static addNewBooking = (payload) =>\n   {\n      return API.post(`/api/gp/book/addnewbooking`, payload);\n   }\n\n\n   static sendRegFormEmail = (bookingId) =>\n   {\n      return API.post(`/api/gp/book/sendregformemail?id=${bookingId}`);\n   }\n   static payBooking = (bookingId,price, paymentMethod, corporate) =>\n   {\n      return API.post(`/api/gp/book/paybooking?id=${bookingId}&paymentmethod=${paymentMethod}&corporate=${corporate}&price=${price}`);\n   }\n\n   static unPayBooking = (bookingId) =>\n   {\n      return API.post(`/api/gp/book/unpaybooking?id=${bookingId}`);\n   }\n\n   static getShouldRefundsCount = () =>\n   {\n      return API.get(`/api/gp/book/getshouldrefundscount?`);\n   }\n\n   \n\n   static refundBooking = (bookingId) =>\n   {\n      return API.post(`/api/gp/payment/refundpayment`, {bookingId: bookingId});\n   }\n\n   static getBookingsStatsByDateStr = (dateStr) =>\n   {\n      return API.get(`/api/gp/book/getbookingsstatsbydatestr?date=${dateStr}`);\n   }\n\n   static getBookingsCountByDateStr = (dateStr) =>\n   {\n      return API.get(`/api/gp/book/getbookingscountbydatestr?date=${dateStr}`);\n   }\n\n   static getAllBookingsCountAll = () =>\n   {\n      return API.get(`/api/gp/book/getallbookingscountall`);\n   }\n\n   static getBookingsCountByDateStrandTime = (dateStr, time, source) =>\n   {\n      return API.get(`/api/gp/book/getbookingscountbydatestrandtime?date=${dateStr}&time=${time}`, {cancelToken: source.token});\n   }\n\n   static getBookingsByDateStrandTime = (dateStr, time) =>\n   {\n      return API.get(`/api/gp/book/getbookingsbydatestrandtime?date=${dateStr}&time=${time}`);\n   }\n\n\n   static getAllBookingsCountByDateStr = (dateStr) =>\n   {\n      return API.get(`/api/gp/book/getallbookingscountbydatestr?date=${dateStr}`);\n   }\n\n   static getAllBookingsCountByDateStrandTime = (dateStr, time, source) =>\n   {\n      return API.get(`/api/gp/book/getallbookingscountbydatestrandtime?date=${dateStr}&time=${time}`, {cancelToken: source.token});\n   }\n\n   static getAllBookingsByDateStrandTime = (dateStr, time) =>\n   {\n      return API.get(`/api/gp/book/getallbookingsbydatestrandtime?date=${dateStr}&time=${time}`);\n   }\n\n   static changeBackToBookingMade = (id) =>\n   {\n      return API.post(`/api/gp/book/changebacktobookingmade?id=${id}`);\n   }\n\n   static changeToPatientAttended = (id) =>\n   {\n      return API.post(`/api/gp/book/changetopatientattended?id=${id}`);\n   }\n\n   static updateBooking = (payload) =>\n   {\n      return API.post(`/api/gp/book/updatebookappointment`, payload);\n   } \n\n   static updateBookingTime = (payload) =>\n   {\n      return API.post(`/api/gp/book/updatebookappointmenttime`, payload);\n   } \n\n   static deleteBooking = (id) =>\n   {\n      return API.post(`/api/gp/book/deletebookappointment?id=${id}`);\n   } \n\n   static unDeleteBooking = (id) =>\n   {\n      return API.post(`/api/gp/book/undeletebookappointment?id=${id}`);\n   } \n   \n    static getBookingsByRef = (ref) =>\n    {\n       return API.get(`/api/gp/book/getbookingsbyref?ref=${ref}`);\n    }\n\n    static getBookingById = (id) =>\n    {\n       return API.get(`/api/gp/book/getbookingbyid?id=${id}`);\n    }\n\n    static getAllBookings = (limit) =>\n    {\n      if (!limit) limit = 25 \n      return API.get(`/api/gp/book/getallbookings?limit=${limit}`);\n    }\n\n    static getDeletedBookings= (limit) =>\n    {\n      if (!limit) limit = 25 \n       return API.get(`/api/gp/book/getdeletedbookings?limit=${limit}`);\n    }\n\n    static getTodayBookings= () =>\n    {\n       return API.get(`/api/gp/book/gettodaybookings`);\n    }\n\n    static getOldBookings= (limit) =>\n    {\n      if (!limit) limit = 25 \n       return API.get(`/api/gp/book/getoldbookings?limit=${limit}`);\n    }\n\n    static getFutureBookings= (limit) =>\n    {\n      if (!limit) limit = 25 \n       return API.get(`/api/gp/book/getfuturebookings?limit=${limit}`);\n    }\n\n    static getRecentBookings= () =>\n    {\n       return API.get(`/api/gp/book/getrecentbookings`);\n    }\n\n    static getRecentBookingsAll= (limit) =>\n    {\n      if (!limit) limit = 25 \n       return API.get(`/api/gp/book/getrecentbookingsall?limit=${limit}`);\n    }\n}","import API from './api';\n\nexport default class PDFService {\n\n\n    static downloadGPRegForm = (id) =>\n    {\n       return API.get(`/api/pdf/downloadgpregform?id=${id}`, {\n        responseType: 'arraybuffer',\n        id: id,\n        headers: {\n            Accept: 'application/pdf',\n        }\n        });\n    }\n\n\n\n}","import React, { useEffect, useRef, useState } from \"react\";\nimport BookService from \"./services/BookService\";\nimport Typography from \"@material-ui/core/Typography\";\nimport {\n  Backdrop,\n  Button,\n  Checkbox,\n  CircularProgress,\n  Divider,\n  FormControlLabel,\n  Grid,\n  InputAdornment,\n  InputLabel,\n  Link,\n  makeStyles,\n  MenuItem,\n  Select,\n  TextField,\n  Tooltip,\n} from \"@material-ui/core\";\nimport GlobalState from \"./../GlobalState\";\nimport { withStyles } from \"@material-ui/core/styles\";\n\nimport CreditCardIcon from \"@material-ui/icons/CreditCard\";\n\nimport Dialog from \"@material-ui/core/Dialog\";\nimport DialogContent from \"@material-ui/core/DialogContent\";\n\nimport DialogTitle from \"@material-ui/core/DialogTitle\";\nimport Draggable from \"react-draggable\";\nimport Paper from \"@material-ui/core/Paper\";\n\nimport Alert from \"@material-ui/lab/Alert\";\n\nimport PropTypes from \"prop-types\";\nimport LinearProgress from \"@material-ui/core/LinearProgress\";\nimport Box from \"@material-ui/core/Box\";\n\nimport Radio from \"@material-ui/core/Radio\";\nimport RadioGroup from \"@material-ui/core/RadioGroup\";\nimport FormControl from \"@material-ui/core/FormControl\";\nimport FormLabel from \"@material-ui/core/FormLabel\";\nimport { corporates } from \"./Corporates\";\nimport NumberFormat from \"react-number-format\";\n\n\nvar interval;\n\nconst useStyles = makeStyles((theme) => ({\n  title: {\n    marginTop: theme.spacing(0),\n    marginBottom: theme.spacing(1),\n  },\n\n  refreshButton: {\n    marginLeft: theme.spacing(2),\n  },\n\n  checkIcon: {\n    color: \"green\",\n  },\n\n  closeIcon: {\n    color: \"red\",\n  },\n\n  RefLink: {\n    cursor: \"pointer\",\n  },\n\n  BookedLabel: {\n    backgroundColor: \"#606060\",\n    color: \"#fff\",\n    paddingRight: \"10px\",\n    paddingLeft: \"10px\",\n  },\n\n  PatientAttendedLabel: {\n    backgroundColor: \"#0066aa\",\n    color: \"#fff\",\n    paddingRight: \"15px\",\n    paddingLeft: \"10px\",\n  },\n\n  SampleTakenLabel: {\n    backgroundColor: \"#0066cc\",\n    color: \"#fff\",\n    paddingRight: \"40px\",\n    paddingLeft: \"10px\",\n  },\n\n  ReportSentLabel: {\n    backgroundColor: \"#009900\",\n    color: \"#fff\",\n    paddingRight: \"90px\",\n    paddingLeft: \"10px\",\n  },\n\n  ReportCertSentLabel: {\n    backgroundColor: \"#009900\",\n    color: \"#fff\",\n    paddingRight: \"68px\",\n    paddingLeft: \"10px\",\n  },\n\n  archiveButton: {},\n\n  smartMatchButton: {\n    backgroundColor: \"#2f942e\",\n    \"&:hover\": {\n      background: \"green\",\n      color: \"#fff\",\n    },\n    textDecoration: \"none !important\",\n    marginRight: \"10px\",\n    // padding: \"10px\"\n  },\n\n  infoTitle: {\n    fontWeight: \"400\",\n  },\n\n  infoData: {\n    paddingLeft: \"10px\",\n    fontWeight: \"800\",\n  },\n\n  matchButton: {\n    marginTop: \"30px\",\n    marginBottom: \"20px\",\n    backgroundColor: \"#2f942e\",\n    \"&:hover\": {\n      background: \"green\",\n      color: \"#fff\",\n    },\n    textDecoration: \"none !important\",\n    padding: \"10px\",\n    paddingLeft: \"50px\",\n    paddingRight: \"50px\",\n  },\n\n  resendButton: {\n    marginTop: \"5px\",\n    marginBottom: \"5px\",\n    backgroundColor: \"#2f942e\",\n    \"&:hover\": {\n      background: \"green\",\n      color: \"#fff\",\n    },\n    textDecoration: \"none !important\",\n    padding: \"10px\",\n    paddingLeft: \"50px\",\n    paddingRight: \"50px\",\n  },\n\n  resendFilesButton: {\n    marginTop: \"5px\",\n    marginBottom: \"5px\",\n    backgroundColor: \"#3792ad\",\n    \"&:hover\": {\n      background: \"#2f798f\",\n      color: \"#fff\",\n    },\n    textDecoration: \"none !important\",\n    padding: \"10px\",\n    paddingLeft: \"50px\",\n    paddingRight: \"50px\",\n  },\n\n  cancelButton: {\n    marginBottom: \"10px\",\n    textDecoration: \"none !important\",\n    padding: \"10px\",\n    paddingLeft: \"90px\",\n    paddingRight: \"90px\",\n  },\n\n  backdrop: {\n    zIndex: theme.zIndex.drawer + 5,\n    color: \"#fff\",\n  },\n}));\n\nfunction NumberFormatCustom(props) {\n  const { inputRef, onChange, ...other } = props;\n\n  return (\n    <NumberFormat\n      {...other}\n      getInputRef={inputRef}\n      onValueChange={(values) => {\n        onChange({\n          target: {\n            name: props.name,\n            value: values.value,\n          },\n        });\n      }}\n      thousandSeparator\n      isNumericString\n      prefix=\"\"\n    />\n  );\n}\n\nNumberFormatCustom.propTypes = {\n  inputRef: PropTypes.func.isRequired,\n  name: PropTypes.string.isRequired,\n  onChange: PropTypes.func.isRequired,\n};\n\n\nconst BorderLinearProgress = withStyles((theme) => ({\n  root: {\n    height: 10,\n    borderRadius: 5,\n  },\n  colorPrimary: {\n    backgroundColor: \"#cedbce\", //theme.palette.grey[theme.palette.type === 'light' ? 200 : 700],\n  },\n  bar: {\n    borderRadius: 5,\n    backgroundColor: \"#2f942e\",\n  },\n}))(LinearProgress);\nfunction LinearProgressWithLabel(props) {\n  return (\n    <Box display=\"flex\" alignItems=\"center\">\n      <Box width=\"100%\" mr={1}>\n        <BorderLinearProgress variant=\"determinate\" {...props} />\n      </Box>\n      <Box minWidth={35}>\n        <Typography\n          style={{ fontWeight: \"800\", color: \"#5e855e\" }}\n          variant=\"body2\"\n          color=\"textSecondary\"\n        >{`${Math.round(props.value)}%`}</Typography>\n      </Box>\n    </Box>\n  );\n}\n\nLinearProgressWithLabel.propTypes = {\n  /**\n   * The value of the progress indicator for the determinate and buffer variants.\n   * Value between 0 and 100.\n   */\n  value: PropTypes.number.isRequired,\n};\n\nfunction PaperComponent(props) {\n  return (\n    <Draggable\n      handle=\"#draggable-dialog-title\"\n      cancel={'[class*=\"MuiDialogContent-root\"]'}\n    >\n      <Paper {...props} />\n    </Draggable>\n  );\n}\n\nexport default function PayDialog(props) {\n  const classes = useStyles();\n\n  const [state, setState] = React.useContext(GlobalState);\n  const [paymentMethod, setPaymentMethod] = useState(\"credit card\");\n  const [corporate, setCorporate] = useState(corporates[0]);\n  const [saving, setSaving] = useState(false);\n\n  const [price, setPrice] = useState(\"\");\n  const [priceError, setPriceError] = useState(false);\n\n  useEffect( () => {\n    if (props.price)\n    {\n      setPrice(`${props.price}`)\n    }else\n    {\n      setPrice('')\n    }\n  }, [props.price, props.open])\n\n\n  const priceChanged = (event) =>\n  {\n    setPrice(event.target.value)\n    setPriceError(false)\n  }\n\n  const paymentMethodChanged = (event) => {\n    setPaymentMethod(event.target.value);\n  };\n\n  const handleClose = () => {\n    if (saving) return;\n\n    props.handleClose();\n    setPaymentMethod(\"credit card\");\n    setPrice('')\n    setCorporate(corporates[0]);\n    setSaving(false);\n  };\n\n  const corporateChanged = (event) => {\n    setCorporate(event.target.value);\n  };\n\n  const payClicked = async () => {\n\n\n    if (!price || price.trim().length === 0 || price === '0')\n    {\n      setPriceError(true)\n      return\n    }\n\n    setSaving(true);\n\n  \n\n    try {\n      await BookService.payBooking(\n        props.booking._id,\n        price,\n        paymentMethod,\n        paymentMethod === \"corporate\" ? corporate : \"\"\n      );\n      setSaving(false);\n      setState((state) => ({\n        ...state,\n        bookingPayChanged: !state.bookingPayChanged ? true : false,\n      }));\n      handleClose();\n    } catch (err) {\n      console.error(err);\n      setSaving(false);\n    }\n  };\n\n  return (\n    <React.Fragment>\n      {props.booking && (\n        <React.Fragment>\n          <Dialog\n            maxWidth=\"xs\"\n            open={props.open}\n            onClose={handleClose}\n            PaperComponent={PaperComponent}\n            aria-labelledby=\"form-dialog-title\"\n          >\n            <DialogTitle id=\"draggable-dialog-title\">\n              <Grid\n                container\n                spacing={2}\n                direction=\"row\"\n                justify=\"center\"\n                alignItems=\"center\"\n              >\n                <Grid item>\n                  <CreditCardIcon\n                    style={{ color: \"#f50057\", fontSize: \"3rem\" }}\n                  />\n                </Grid>\n\n                <Grid item>\n                  <div\n                    style={{\n                      color: \"#f50057\",\n                      paddingBottom: \"10px\",\n                      fontWeight: \"800\",\n                    }}\n                  >\n                    {\" \"}\n                    PAY the CHARGE{\" \"}\n                  </div>\n                </Grid>\n              </Grid>\n\n              <Divider />\n            </DialogTitle>\n            <DialogContent>\n              <div\n                style={{\n                  height: \"300px\",\n                }}\n              >\n                <Grid\n                  container\n                  direction=\"column\"\n                  justify=\"space-between\"\n                  spacing={2}\n                  alignItems=\"flex-start\"\n                >\n                  <Grid item>\n                  <TextField\n                                autoFocus\n                                error={priceError}\n                                label=\"TOTAL Charges\"\n                                value={price}\n                                fullWidth\n                                required\n                                onChange={priceChanged}\n                                name=\"product-price\"\n                                id=\"product-price-id\"\n                                InputProps={{\n                                  inputComponent: NumberFormatCustom,\n                                  startAdornment: (\n                                    <InputAdornment position=\"start\">\n                                      £\n                                    </InputAdornment>\n                                  ),\n                                }}\n                              />\n\n                  </Grid>\n\n                  <Grid item>\n                    <div style={{ fontSize: \"17px\" }}>\n                      {\" \"}\n                      How do you want to pay?{\" \"}\n                    </div>\n                  </Grid>\n\n                  <Grid item>\n                    <FormControl component=\"fieldset\">\n                      <RadioGroup\n                        aria-label=\"paymentMethod\"\n                        name=\"paymentMethod\"\n                        value={paymentMethod}\n                        onChange={paymentMethodChanged}\n                      >\n                        <FormControlLabel\n                          value=\"credit card\"\n                          control={<Radio />}\n                          label=\"Credit Card\"\n                        />\n                        <FormControlLabel\n                          value=\"cash\"\n                          control={<Radio />}\n                          label=\"Cash\"\n                        />\n                        <FormControlLabel\n                          value=\"corporate\"\n                          control={<Radio />}\n                          label=\"Corporate\"\n                        />\n                      </RadioGroup>\n\n                      {paymentMethod === \"corporate\" && (\n                        <FormControl\n                          style={{ marginTop: \"10px\" }}\n                          className={classes.formControl}\n                        >\n                          <Select\n                            labelId=\"select-corporate\"\n                            id=\"select-corporate-id\"\n                            value={corporate}\n                            onChange={corporateChanged}\n                          >\n                            {corporates.map((element) => (\n                              <MenuItem\n                                value={element}\n                              >{`${element}`}</MenuItem>\n                            ))}\n                          </Select>\n                        </FormControl>\n                      )}\n                    </FormControl>\n                  </Grid>\n                </Grid>\n\n                <Grid item></Grid>\n\n                <div\n                  style={{\n                    position: \"absolute\",\n                    bottom: \"20px\",\n                    right: \"20px\",\n                  }}\n                >\n                  <Grid\n                    container\n                    direction=\"row\"\n                    justify=\"flex-end\"\n                    alignItems=\"center\"\n                    spacing={1}\n                  >\n                    <Grid item>\n                      <Button\n                        onClick={handleClose}\n                        style={{ width: \"100px\" }}\n                        disabled={saving}\n                      >\n                        back\n                      </Button>\n                    </Grid>\n                    <Grid item>\n                      <Button\n                        onClick={payClicked}\n                        variant=\"contained\"\n                        color=\"secondary\"\n                        style={{ width: \"100px\" }}\n                        disabled={saving}\n                      >\n                        Pay\n                      </Button>\n                    </Grid>\n                  </Grid>\n                </div>\n              </div>\n\n              <Backdrop className={classes.backdrop} open={saving}>\n                <CircularProgress color=\"inherit\" />\n              </Backdrop>\n            </DialogContent>\n          </Dialog>\n        </React.Fragment>\n      )}\n    </React.Fragment>\n  );\n}\n","import React, { useEffect, useState } from \"react\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport GlobalState from \"./../GlobalState\";\nimport Grid from \"@material-ui/core/Grid\";\nimport {\n  Button,\n  Checkbox,\n  DialogActions,\n  DialogContentText,\n  Divider,\n  FormControlLabel,\n  IconButton,\n  TextField,\n  Tooltip,\n} from \"@material-ui/core\";\nimport PDFService from \"./services/PDFService\";\n\nimport { calculatePrice } from \"./PriceCalculator\";\n\nimport bookingService from \"./services/BookService\";\nimport CheckIcon from \"@material-ui/icons/Check\";\nimport CloseIcon from \"@material-ui/icons/Close\";\n\nimport Dialog from \"@material-ui/core/Dialog\";\nimport DialogContent from \"@material-ui/core/DialogContent\";\nimport DialogTitle from \"@material-ui/core/DialogTitle\";\nimport Draggable from \"react-draggable\";\nimport Slide from \"@material-ui/core/Slide\";\n\nimport Paper from \"@material-ui/core/Paper\";\n\nimport DeleteIcon from \"@material-ui/icons/Delete\";\nimport BookService from \"./services/BookService\";\n\nimport Backdrop from \"@material-ui/core/Backdrop\";\nimport CircularProgress from \"@material-ui/core/CircularProgress\";\nimport {\n  FormatDateFromString,\n  RevertFormatDateFromString,\n} from \"./DateFormatter\";\nimport PayDialog from \"./PayDialog\";\n\nimport PrintIcon from \"@material-ui/icons/Print\";\nimport UndoIcon from \"@material-ui/icons/Undo\";\n\nimport SendIcon from \"@material-ui/icons/Send\";\n\nimport HistoryIcon from \"@material-ui/icons/History\";\n\nimport FileCopyOutlinedIcon from \"@material-ui/icons/FileCopyOutlined\";\nimport { CalendarColors } from \"../Admin/calendar-admin/colors\";\nimport InvoiceDialog from \"../InvoiceDialog\";\nimport InvoiceService from \"../services/InvoiceService\";\n\nconst useStyles = makeStyles((theme) => ({\n  box: {\n    backgroundColor: \"#373737\",\n    color: \"#fff\",\n    padding: \"1px\",\n    borderRadius: \"4px\",\n    textAlign: \"justify\",\n    paddingRight: \"40px\",\n  },\n\n  boxRed: {\n    backgroundColor: \"#dc2626\",\n    color: \"#fff\",\n    padding: \"1px\",\n    borderRadius: \"4px\",\n    textAlign: \"justify\",\n    paddingRight: \"40px\",\n  },\n\n  boxInfo: {\n    textAlign: \"justify\",\n    backgroundColor: \"#fafafa\",\n    color: \"#333\",\n    padding: \"1px\",\n    borderRadius: \"4px\",\n    paddingRight: \"40px\",\n    border: \"1px solid #eee\",\n  },\n\n  ul: {\n    listStyle: \"none\",\n    padding: \"0\",\n    margin: \"0\",\n  },\n\n  li: {\n    marginBottom: \"15px\",\n  },\n\n  icon: {\n    marginRight: \"8px\",\n  },\n\n  root: {\n    width: \"100%\",\n  },\n\n  lineThrough: {\n    textDecoration: \"line-through\",\n  },\n\n  heading: {\n    fontSize: theme.typography.pxToRem(15),\n    flexBasis: \"33.33%\",\n    flexShrink: 0,\n    color: theme.palette.text.secondary,\n  },\n  secondaryHeading: {\n    fontSize: theme.typography.pxToRem(15),\n  },\n\n  infoDetails: {\n    textAlign: \"left\",\n  },\n\n  infoTitle: {\n    fontWeight: \"800\",\n    marginRight: \"10px\",\n  },\n\n  infoData: {\n    fontWeight: \"400\",\n  },\n\n  title: {\n    textAlign: \"center\",\n    fontWeight: \"600\",\n    marginLeft: \"10px\",\n    marginBottom: \"5px\",\n  },\n\n  Accordion: {\n    backgroundColor: \"#f5f5f5\",\n    color: \"#222\",\n  },\n\n  AccordionDeleted: {\n    backgroundColor: \"#aaa\",\n    color: \"#555\",\n  },\n\n  DownloadForm: {\n    marginTop: \"10px\",\n    marginBottom: \"10px\",\n  },\n\n  infoDataCharges: {\n    fontSize: \"18px\",\n    color: \"green\",\n    fontWeight: \"600\",\n  },\n\n  infoDataChargesHigher: {\n    fontSize: \"18px\",\n    color: \"red\",\n    fontWeight: \"600\",\n  },\n  BookedLabel: {\n    color: \"#606060\",\n    paddingLeft: \"5px\",\n    paddingBottom: \"3px\",\n    paddingTop: \"3px\",\n    fontWeight: \"800\",\n    borderLeft: \"5px solid\",\n    borderColor: \"#606060\",\n    width: \"150px\",\n    display: \"inline-block\",\n  },\n\n  PatientAttendedLabel: {\n    color: \"#0066aa\",\n    paddingLeft: \"5px\",\n    paddingBottom: \"3px\",\n    paddingTop: \"3px\",\n    fontWeight: \"800\",\n    borderLeft: \"5px solid\",\n    borderColor: \"#0066aa\",\n    width: \"150px\",\n    display: \"inline-block\",\n  },\n\n  SampleTakenLabel: {\n    color: \"#0066cc\",\n    paddingRight: \"10px\",\n    paddingLeft: \"5px\",\n    paddingBottom: \"3px\",\n    paddingTop: \"3px\",\n    fontWeight: \"800\",\n    borderLeft: \"5px solid\",\n    borderColor: \"#0066cc\",\n  },\n\n  ReportSentLabel: {\n    color: \"#009900\",\n    paddingRight: \"10px\",\n    paddingLeft: \"5px\",\n    paddingBottom: \"3px\",\n    paddingTop: \"3px\",\n    fontWeight: \"800\",\n    borderLeft: \"5px solid\",\n    borderColor: \"#009900\",\n  },\n\n  ReportCertSentLabel: {\n    color: \"#009900\",\n    paddingRight: \"10px\",\n    paddingLeft: \"5px\",\n    paddingBottom: \"3px\",\n    paddingTop: \"3px\",\n    fontWeight: \"800\",\n    borderLeft: \"5px solid\",\n    borderColor: \"#009900\",\n  },\n\n  PositiveLabel: {\n    color: \"red\",\n    paddingRight: \"10px\",\n    paddingLeft: \"5px\",\n    paddingBottom: \"3px\",\n    paddingTop: \"3px\",\n    fontWeight: \"800\",\n    borderLeft: \"5px solid\",\n    borderColor: \"red\",\n  },\n\n  EditButton: {\n    marginBottom: \"20px\",\n    backgroundColor: \"#2f942e\",\n    \"&:hover\": {\n      background: \"green\",\n      color: \"#fff\",\n    },\n    textDecoration: \"none !important\",\n    padding: \"10px\",\n  },\n\n  ResendEmailsButton: {\n    // marginBottom : \"20px\",\n    color: \"#2f942e\",\n    borderColor: \"#2f942e\",\n    \"&:hover\": {\n      background: \"#fafffa\",\n      borderColor: \"#2f942e\",\n    },\n    textDecoration: \"none !important\",\n    paddingLeft: \"50px\",\n    paddingRight: \"50px\",\n  },\n\n  PayButton: {\n    marginLeft: \"70px\",\n    width: \"300px\",\n  },\n\n  printInvoiceButton: {\n    marginLeft: \"70px\",\n    fontSize: \"0.8rem\",\n    // width: \"300px\",\n  },\n\n  editInvoiceButton: {\n    marginLeft: \"10px\",\n    fontSize: \"0.8rem\",\n  },\n\n  PayLabel: {\n    marginLeft: \"20px\",\n\n    color: \"#2f942e\",\n    fontWeight: \"500\",\n    textAlign: \"center\",\n  },\n\n  RestoreButton: {\n    marginBottom: \"20px\",\n    backgroundColor: \"#eee\",\n    color: \"#333\",\n    \"&:hover\": {\n      background: \"#f1f1f1\",\n      color: \"#111\",\n    },\n    textDecoration: \"none !important\",\n    padding: \"10px\",\n  },\n\n  DeleteButton: {\n    marginBottom: \"20px\",\n    backgroundColor: \"#d90015\",\n    \"&:hover\": {\n      background: \"#b80012\",\n      color: \"#fff\",\n    },\n\n    padding: \"10px\",\n  },\n\n  SaveButton: {\n    marginBottom: \"10px\",\n    padding: \"10px\",\n\n    backgroundColor: \"#d1175e\",\n    \"&:hover\": {\n      background: \"#bd0d50\",\n      color: \"#fff\",\n    },\n  },\n\n  CancelButton: {\n    marginBottom: \"20px\",\n    // padding: \"10px\"\n  },\n\n  TextBox: {\n    padding: \"0px\",\n  },\n\n  checkIcon: {\n    color: \"green\",\n  },\n\n  checkIconSmall: {\n    color: \"green\",\n    paddingTop: \"5px\",\n  },\n\n  closeIcon: {\n    color: \"red\",\n  },\n\n  centeredLabel: {\n    display: \"flex\",\n    alignItems: \"center\",\n  },\n\n  backdrop: {\n    zIndex: theme.zIndex.drawer + 5,\n    color: \"#fff\",\n  },\n\n  invoiceNumber: {\n    display: \"inline-block\",\n    fontWeight: \"500\",\n    width: \"72px\",\n    fontSize: \"1rem\",\n    color: theme.palette.primary.main,\n  },\n}));\n\nconst Transition = React.forwardRef(function Transition(props, ref) {\n  return <Slide direction=\"up\" ref={ref} {...props} />;\n});\n\nfunction PaperComponent(props) {\n  return (\n    <Draggable\n      handle=\"#alert-dialog-slide-title\"\n      cancel={'[class*=\"MuiDialogContent-root\"]'}\n    >\n      <Paper {...props} />\n    </Draggable>\n  );\n}\n\nexport default function BookingDialog(props) {\n  const classes = useStyles();\n\n  const [state, setState] = React.useContext(GlobalState);\n\n  const [copied, setCopied] = useState(false);\n\n  const [emailSent, setEmailSent] = React.useState(false);\n  const [emailSentInvoice, setEmailSentInvoice] = React.useState(false);\n\n  const [openResendDialog, setOpenResendDialog] = React.useState(false);\n  const [openPayDialog, setOpenPayDialog] = React.useState(false);\n  const [openRefundDialog, setOpenRefundDialog] = React.useState(false);\n\n  const [openInvoiceDialog, setOpenInvoiceDialog] = React.useState(false);\n\n  const [selectedBooking, setSelectedBooking] = React.useState(null);\n\n  const [editMode, setEditMode] = React.useState({ edit: false, person: null });\n  const [deleteMode, setDeleteMode] = React.useState({\n    delete: false,\n    person: null,\n  });\n  const [restoreMode, setRestoreMode] = React.useState({\n    restore: false,\n    person: null,\n  });\n\n  const [saving, setSaving] = React.useState(false);\n  const [deleting, setDeleting] = React.useState(false);\n  const [restoring, setRestoring] = React.useState(false);\n\n  const [validationError, setValidationError] = React.useState({});\n\n  const [bookingDate, setBookingDate] = React.useState(\"\");\n  const [bookingTime, setBookingTime] = React.useState(\"\");\n\n  const [fullname, setFullname] = React.useState(\"\");\n  const [email, setEmail] = React.useState(\"\");\n  const [tel, setTel] = React.useState(\"\");\n  const [notes, setNotes] = React.useState(\"\");\n  const [service, setService] = React.useState(\"\");\n\n  const [refreshData, setRefreshData] = React.useState(false);\n\n  const [booking, setBooking] = React.useState(null);\n\n  const [recordChanged, setRecordChanged] = React.useState(false);\n\n  const [fieldChanged, setFieldChanged] = React.useState(false);\n\n  const [openUndoPayDialog, setOpenUndoPayDialog] = React.useState(false);\n\n  const [openTimeStampDialog, setOpenTimeStampDialog] = React.useState(false);\n\n  const [invoice, setInvoice] = React.useState(null);\n  const [invoiceLoaded, setInvoiceLoaded] = React.useState(false);\n\n  const fetchInvoice = async () => {\n    try {\n      setInvoiceLoaded(false);\n      const res = await InvoiceService.getInvoiceByBookingId(props.booking._id);\n      setInvoice(res.data.invoice);\n      setInvoiceLoaded(true);\n    } catch (err) {\n      setInvoiceLoaded(true);\n      console.error(err);\n    }\n  };\n\n  React.useEffect(() => {\n    if (props.booking) {\n      fetchInvoice();\n    }\n  }, [props.booking, props.open]);\n\n  const handleCloseTimeStampDialog = () => {\n    setOpenTimeStampDialog(false);\n    setSelectedBooking(null);\n  };\n\n  const handleCloseUndoPayDialog = () => {\n    setOpenUndoPayDialog(false);\n    setSelectedBooking(null);\n  };\n\n  const handleCloseResendDialog = () => {\n    setOpenResendDialog(false);\n    setSelectedBooking(null);\n  };\n\n  const handleClosePayDialog = () => {\n    setOpenPayDialog(false);\n    setSelectedBooking(null);\n  };\n\n  const handleCloseRefundDialog = () => {\n    setOpenRefundDialog(false);\n    setSelectedBooking(null);\n  };\n\n  const handleCloseInvoiceDialog = (refresh) => {\n    setOpenInvoiceDialog(false);\n    setSelectedBooking(null);\n    fetchInvoice();\n  };\n\n  useEffect(() => {\n    if (booking) {\n      const isChanged =\n        bookingDate !== FormatDateFromString(booking.bookingDate) ||\n        bookingTime !== booking.bookingTime ||\n        fullname !== booking.fullname ||\n        email !== booking.email ||\n        tel !== booking.phone ||\n        notes !== booking.notes;\n\n      setRecordChanged(isChanged);\n    }\n  }, [fieldChanged]);\n\n  useEffect(() => {\n    if (!props.open) {\n      setTimeout(() => {\n        setEditMode({ edit: false, person: null });\n        setRecordChanged(false);\n      }, 500);\n    }\n  }, [props.open]);\n\n  const bookingDateChanged = (event) => {\n    setBookingDate(event.target.value);\n    setValidationError({ ...validationError, bookingDateError: false });\n    setFieldChanged(!fieldChanged);\n  };\n\n  const bookingTimeChanged = (event) => {\n    setBookingTime(event.target.value);\n    setValidationError({ ...validationError, bookingTimeError: false });\n    setFieldChanged(!fieldChanged);\n  };\n\n  const fullnameChanged = (event) => {\n    setFullname(event.target.value);\n    setFieldChanged(!fieldChanged);\n  };\n\n  const emailChanged = (event) => {\n    setEmail(event.target.value);\n    setFieldChanged(!fieldChanged);\n  };\n\n  const telChanged = (event) => {\n    setTel(event.target.value);\n    setFieldChanged(!fieldChanged);\n  };\n\n  const serviceChanged = (event) => {\n    setService(event.target.value);\n    setFieldChanged(!fieldChanged);\n  };\n\n  const notesChanged = (event) => {\n    setNotes(event.target.value);\n    setFieldChanged(!fieldChanged);\n  };\n\n  const getStatusLabel = (status) => {\n    if (status === \"booked\") {\n      return <div className={classes.BookedLabel}> Booking Made </div>;\n    } else if (status === \"patient_attended\") {\n      return (\n        <div className={classes.PatientAttendedLabel}> Patient Attended </div>\n      );\n    } else {\n      return \"Unknown\";\n    }\n  };\n\n  const handleEditModeChanged = (edit, person) => {\n    if (edit) {\n      setFullname(person.fullname);\n      setBookingDate(FormatDateFromString(person.bookingDate));\n      setBookingTime(person.bookingTime.toUpperCase());\n      setEmail(person.email);\n      setTel(person.phone);\n      if (person.notes) {\n        setNotes(person.notes);\n      }\n\n      setEditMode({ edit: edit, person: person });\n    } else if (!edit && !person) {\n      setEditMode({ edit: edit, person: person });\n      setRecordChanged(false);\n    } else if (!edit && person) {\n      const booking = {};\n      const bookingId = person._id;\n      booking.email = email;\n      booking.phone = tel;\n      booking.fullname = fullname;\n      booking.notes = notes;\n      booking.service = service;\n      booking.bookingDate = RevertFormatDateFromString(bookingDate);\n      booking.bookingTime = bookingTime;\n      booking.bookingRef = person.bookingRef;\n\n      if (validateBooking(booking)) {\n        updateBooking({ bookingId: bookingId, person: booking });\n      }\n    }\n  };\n\n  const validateDate = (str) => {\n    var error = false;\n    if (!str || str.length !== 10) {\n      error = true;\n    }\n\n    if (str.charAt(4) !== \"-\" || str.charAt(7) !== \"-\") {\n      error = true;\n    }\n\n    try {\n      const result = /^\\d{4}-\\d{2}-\\d{2}$/.test(str);\n      if (!result) {\n        error = true;\n      }\n\n      const year = parseInt(str.substr(0, 4));\n      const month = parseInt(str.substr(5, 2));\n      const day = parseInt(str.substr(8, 2));\n\n      if (year < 1900) {\n        error = true;\n      }\n\n      if (month < 1 || month > 12) {\n        error = true;\n      }\n\n      if (day > 31) {\n        error = true;\n      }\n    } catch (err) {\n      error = true;\n    }\n\n    return !error;\n  };\n\n  const validateTime = (str) => {\n    var error = false;\n\n    const result = /^\\d{2}:\\d{2} AM$|^\\d{2}:\\d{2} PM$/.test(str);\n    if (!result) {\n      error = true;\n    }\n\n    try {\n      const hour = parseInt(str.substr(0, 2));\n      const minute = parseInt(str.substr(3, 2));\n\n      if (hour < 0 || hour > 12) {\n        error = true;\n      }\n\n      if (minute < 0 || minute > 59) {\n        error = true;\n      }\n    } catch (err) {\n      error = true;\n    }\n\n    return !error;\n  };\n\n  const validateBooking = (booking) => {\n    var error = false;\n\n    if (!validateDate(booking.bookingDate)) {\n      error = true;\n      setValidationError({ ...validationError, bookingDateError: true });\n    }\n\n    if (!validateTime(booking.bookingTime)) {\n      error = true;\n      setValidationError({ ...validationError, bookingTimeError: true });\n    }\n    return !error;\n  };\n\n  const updateBooking = (payload) => {\n    setSaving(true);\n    bookingService\n      .updateBooking(payload)\n      .then((res) => {\n        setSaving(false);\n        setEditMode({ edit: false, person: null });\n        setRefreshData(!refreshData);\n      })\n      .catch((err) => {\n        setSaving(false);\n        setEditMode({ edit: false, person: null });\n        console.log(err);\n      });\n  };\n\n  const deleteBooking = (id) => {\n    setDeleting(true);\n    bookingService\n      .deleteBooking(id)\n      .then((res) => {\n        setDeleting(false);\n        setDeleteMode({ delete: false, person: null });\n        setRefreshData(!refreshData);\n      })\n      .catch((err) => {\n        setDeleting(false);\n        setDeleteMode({ delete: false, person: null });\n        console.log(err);\n      });\n  };\n\n  const restoreBooking = (id) => {\n    setRestoring(true);\n    bookingService\n      .unDeleteBooking(id)\n      .then((res) => {\n        setRestoring(false);\n        setRestoreMode({ restore: false, person: null });\n        setRefreshData(!refreshData);\n      })\n      .catch((err) => {\n        setRestoring(false);\n        setRestoreMode({ restore: false, person: null });\n        console.log(err);\n      });\n  };\n\n  const handleDeleteModeChanged = (del, person) => {\n    if (del) {\n      setDeleteMode({ delete: del, person: person });\n    } else if (!del && !person) {\n      setDeleteMode({ delete: del, person: person });\n    } else if (!del && person) {\n      deleteBooking(person._id);\n    }\n  };\n\n  const handleRestoreModeChanged = (restore, person) => {\n    if (restore) {\n      setRestoreMode({ restore: restore, person: person });\n    } else if (!restore && !person) {\n      setRestoreMode({ restore: restore, person: person });\n    } else if (!restore && person) {\n      restoreBooking(person._id);\n    }\n  };\n\n  const changeBackToBookingMade = (event, id) => {\n    setSaving(true);\n    BookService.changeBackToBookingMade(id)\n      .then((res) => {\n        setSaving(false);\n        setRefreshData(!refreshData);\n      })\n      .catch((err) => {\n        console.log(err);\n        setSaving(false);\n      });\n  };\n\n  const changeToPatientAttended = (event, id) => {\n    setSaving(true);\n    BookService.changeToPatientAttended(id)\n      .then((res) => {\n        setSaving(false);\n        setRefreshData(!refreshData);\n      })\n      .catch((err) => {\n        console.log(err);\n        setSaving(false);\n      });\n  };\n\n  const Pay = () => {\n    setSelectedBooking(booking);\n    setOpenPayDialog(true);\n  };\n\n  const OpenInvoiceDialog = () => {\n    setSelectedBooking(booking);\n    setInvoice(invoice);\n    setOpenInvoiceDialog(true);\n  };\n\n  useEffect(() => {\n    if (props.booking) {\n      BookService.getBookingById(props.booking._id)\n        .then((res) => {\n          setBooking(res.data);\n        })\n        .catch((err) => {\n          console.log(err);\n        });\n\n      setState((state) => ({\n        ...state,\n        bookingDialogDataChanged: !state.bookingDialogDataChanged\n          ? true\n          : false,\n      }));\n    }\n  }, [refreshData, state.bookingPayChanged]);\n\n  useEffect(() => {\n    if (props.booking) {\n      setBooking(props.booking);\n    }\n  }, [props.booking]);\n\n  const undoPaymentClicked = async () => {\n    setSaving(true);\n    try {\n      await BookService.unPayBooking(booking._id);\n      setSaving(false);\n      setOpenUndoPayDialog(false);\n      setRefreshData(!refreshData);\n    } catch (err) {\n      console.error(err);\n      setSaving(false);\n      setOpenUndoPayDialog(false);\n    }\n  };\n\n  const refundPaymentClicked = async () => {\n    setSaving(true);\n    try {\n      await BookService.refundBooking(booking._id);\n      setSaving(false);\n      updateShouldRefundsCount();\n      setOpenRefundDialog(false);\n      setRefreshData(!refreshData);\n    } catch (err) {\n      console.error(err);\n      setSaving(false);\n      setOpenRefundDialog(false);\n    }\n  };\n\n  const updateShouldRefundsCount = async () => {\n    try {\n      const res = await BookService.getShouldRefundsCount();\n      if (res && res.data && res.data.status === \"OK\") {\n        setState((state) => ({ ...state, shouldRefunsCount: res.data.count }));\n      }\n    } catch (ex) {\n      console.error(ex);\n    }\n  };\n\n  const downloadRegForm = (id) => {\n    PDFService.downloadGPRegForm(id)\n      .then((res) => {\n        const file = new Blob([res.data], { type: \"application/pdf\" });\n\n        const fileURL = URL.createObjectURL(file);\n        window.open(fileURL, \"_blank\");\n      })\n      .catch((err) => {\n        console.log(err);\n      });\n  };\n\n  const downloadInvoice = (id) => {\n    InvoiceService.downloadInvoice(id)\n      .then((res) => {\n        const file = new Blob([res.data], { type: \"application/pdf\" });\n\n        const fileURL = URL.createObjectURL(file);\n        window.open(fileURL, \"_blank\");\n      })\n      .catch((err) => {\n        console.log(err);\n      });\n  };\n\n  const sendRegForm = (id) => {\n    setSaving(true);\n    setEmailSent(false);\n    BookService.sendRegFormEmail(id)\n      .then((res) => {\n        setSaving(false);\n        if (res.data.status === \"OK\") {\n          setEmailSent(true);\n        }\n      })\n      .catch((err) => {\n        console.log(err);\n        setSaving(false);\n      });\n  };\n\n  const sendInvoiceEmail = (id, _email) => {\n    setSaving(true);\n    setEmailSentInvoice(false);\n    InvoiceService.emailInvoice(id, _email)\n      .then((res) => {\n        setSaving(false);\n        if (res.data.status === \"OK\") {\n          setEmailSentInvoice(true);\n        }\n      })\n      .catch((err) => {\n        console.log(err);\n        setSaving(false);\n      });\n  };\n\n  const onClose = () => {\n    setEmailSent(false);\n    setEmailSentInvoice(false);\n    setInvoice(null);\n    props.onClose();\n  };\n\n  return (\n    <React.Fragment>\n      {booking && (\n        <React.Fragment>\n          <Dialog\n            maxWidth=\"md\"\n            open={props.open}\n            TransitionComponent={Transition}\n            keepMounted\n            onClose={onClose}\n            PaperComponent={PaperComponent}\n            aria-labelledby=\"alert-dialog-slide-title\"\n            aria-describedby=\"alert-dialog-slide-description\"\n          >\n            <DialogTitle\n              id=\"alert-dialog-slide-title\"\n              style={\n                booking.tr ? { backgroundColor: \"#7e0082\", color: \"#fff\" } : {}\n              }\n            >\n              <div style={{ position: \"absolute\", top: \"25x\", left: \"25px\" }}>\n                <Tooltip title=\"COPY EDIT LINK TO CLIPBOARD\">\n                  <IconButton\n                    onClick={() => {\n                      navigator.clipboard.writeText(\n                        `https://londonmedicalclinic.co.uk/medicalexpressclinic/user/edit/gynae/${booking._id}`\n                      );\n                      setCopied(true);\n                      setTimeout(() => {\n                        setCopied(false);\n                      }, 1500);\n                    }}\n                    aria-label=\"delete\"\n                    className={classes.margin}\n                    size=\"small\"\n                  >\n                    <FileCopyOutlinedIcon\n                      style={booking.tr ? { color: \"#ddd\" } : {}}\n                      fontSize=\"14px\"\n                    />\n                  </IconButton>\n                </Tooltip>\n\n                <span\n                  hidden={!copied}\n                  style={{ fontSize: \"12px\", transition: \"all 1s ease-in\" }}\n                >\n                  {\" \"}\n                  Copied{\" \"}\n                </span>\n              </div>\n\n              <div\n                style={{\n                  position: \"absolute\",\n                  top: \"25x\",\n                  right: \"60px\",\n                  backgroundColor: CalendarColors.GP_COLOR,\n                  color: \"#fff\",\n                  padding: \"0px 5px\",\n                  borderRadius: \"10px\",\n                }}\n              >\n                GP\n              </div>\n\n              {/* {booking.tr && (\n                <div style={{position:\"absolute\",  right: \"15px\"}}>\n                     TR\n                </div>\n\n              )} */}\n\n              <Grid\n                container\n                direction=\"row\"\n                justify=\"center\"\n                spacing={2}\n                alignItems=\"center\"\n              >\n                <Grid item>\n                  <div\n                    style={\n                      booking.deleted\n                        ? {\n                            paddingBottom: \"5px\",\n                            textDecoration: \"line-through\",\n                          }\n                        : {}\n                    }\n                  >\n                    {`${booking.fullname}`}\n                  </div>\n                </Grid>\n\n                {booking.deleted && (\n                  <Grid item>\n                    <Tooltip title=\"This record has been deleted.\">\n                      <DeleteIcon\n                        style={\n                          booking.tr\n                            ? {\n                                padding: 0,\n                                margin: 0,\n                                color: \"#fff\",\n                                fontSize: 25,\n                              }\n                            : {\n                                padding: 0,\n                                margin: 0,\n                                color: \"#333\",\n                                fontSize: 25,\n                              }\n                        }\n                      />\n                    </Tooltip>\n                  </Grid>\n                )}\n              </Grid>\n            </DialogTitle>\n            <DialogContent>\n              <div\n                style={{\n                  // height: \"550px\",\n                  paddingTop: \"0px\",\n                }}\n              >\n                <Grid item xs={12} md={12} key={`panel0`}>\n                  <div className={classes.infoDetails}>\n                    <ul className={classes.ul}>\n                      {/* Restore Functionality ******************************************* */}\n                      <li\n                        hidden={\n                          !(\n                            restoreMode.restore &&\n                            restoreMode.person._id === booking._id\n                          )\n                        }\n                      >\n                        <div\n                          style={{\n                            fontWeight: \"500\",\n                            paddingBottom: \"5px\",\n                            paddingLeft: \"5px\",\n                            fontSize: \"16px\",\n                            color: \"#333\",\n                          }}\n                        >\n                          Are you sure you want to restore this record?\n                        </div>\n                      </li>\n\n                      <li\n                        hidden={\n                          !booking.deleted ||\n                          (restoreMode.restore &&\n                            restoreMode.person._id === booking._id)\n                        }\n                      >\n                        <Button\n                          type=\"button\"\n                          fullWidth\n                          variant=\"contained\"\n                          color=\"primary\"\n                          onClick={() => {\n                            handleRestoreModeChanged(true, booking);\n                          }}\n                          className={classes.RestoreButton}\n                        >\n                          Restore This Record\n                        </Button>\n                      </li>\n\n                      <li\n                        hidden={\n                          !(\n                            restoreMode.restore &&\n                            restoreMode.person._id === booking._id\n                          )\n                        }\n                      >\n                        <Button\n                          type=\"button\"\n                          fullWidth\n                          variant=\"contained\"\n                          color=\"primary\"\n                          disabled={restoring}\n                          onClick={() => {\n                            handleRestoreModeChanged(false, booking);\n                          }}\n                          className={classes.SaveButton}\n                        >\n                          YES, Restore this!\n                        </Button>\n                      </li>\n\n                      <li\n                        hidden={\n                          !(\n                            restoreMode.restore &&\n                            restoreMode.person._id === booking._id\n                          )\n                        }\n                      >\n                        <Button\n                          type=\"button\"\n                          fullWidth\n                          variant=\"contained\"\n                          color=\"default\"\n                          disabled={restoring}\n                          onClick={() => {\n                            handleRestoreModeChanged(false, null);\n                          }}\n                          className={classes.CancelButton}\n                        >\n                          Cancel\n                        </Button>\n                      </li>\n\n                      {/*  ******************************************************************* */}\n\n                      {/* Edit Functionality ******************************************* */}\n\n                      <li\n                        hidden={\n                          booking.deleted ||\n                          deleteMode.delete ||\n                          (editMode.edit && editMode.person._id === booking._id)\n                        }\n                      >\n                        <Button\n                          type=\"button\"\n                          fullWidth\n                          variant=\"contained\"\n                          color=\"primary\"\n                          onClick={() => {\n                            handleEditModeChanged(true, booking);\n                          }}\n                          className={classes.EditButton}\n                        >\n                          Edit Booking Info\n                        </Button>\n                      </li>\n\n                      <li\n                        hidden={\n                          !(\n                            editMode.edit && editMode.person._id === booking._id\n                          )\n                        }\n                      >\n                        <Button\n                          type=\"button\"\n                          fullWidth\n                          variant=\"contained\"\n                          color=\"primary\"\n                          disabled={saving || !recordChanged}\n                          onClick={() => {\n                            handleEditModeChanged(false, booking);\n                          }}\n                          className={classes.SaveButton}\n                        >\n                          Save Changes\n                        </Button>\n                      </li>\n\n                      <li\n                        hidden={\n                          !(\n                            editMode.edit && editMode.person._id === booking._id\n                          )\n                        }\n                      >\n                        <Button\n                          type=\"button\"\n                          fullWidth\n                          variant=\"contained\"\n                          color=\"default\"\n                          disabled={saving}\n                          onClick={() => {\n                            handleEditModeChanged(false, null);\n                          }}\n                          className={classes.CancelButton}\n                        >\n                          Cancel\n                        </Button>\n                      </li>\n\n                      {/* ****************************************************************************************** */}\n\n                      {/* Delete Functionality ******************************************* */}\n\n                      <li\n                        hidden={\n                          !(\n                            deleteMode.delete &&\n                            deleteMode.person._id === booking._id\n                          )\n                        }\n                      >\n                        <div\n                          style={{\n                            fontWeight: \"600\",\n                            paddingBottom: \"5px\",\n                            paddingLeft: \"5px\",\n                            fontSize: \"16px\",\n                          }}\n                        >\n                          Are you sure you want to delete this record?\n                        </div>\n                      </li>\n\n                      <li\n                        hidden={\n                          props.deleteButtonDisabled ||\n                          booking.deleted ||\n                          editMode.edit ||\n                          (deleteMode.delete &&\n                            deleteMode.person._id === booking._id)\n                        }\n                      >\n                        {booking.OTCCharges > 0 && (\n                          <Tooltip title={\"Paid Records Cannot be Deleted!\"}>\n                            <div>\n                              <Button\n                                disabled={booking.OTCCharges > 0}\n                                type=\"button\"\n                                fullWidth\n                                variant=\"contained\"\n                                color=\"primary\"\n                                onClick={() => {\n                                  handleDeleteModeChanged(true, booking);\n                                }}\n                                className={classes.DeleteButton}\n                              >\n                                Delete This Record\n                              </Button>\n                            </div>\n                          </Tooltip>\n                        )}\n                        {booking.OTCCharges === 0 && (\n                          <Button\n                            disabled={booking.OTCCharges > 0}\n                            type=\"button\"\n                            fullWidth\n                            variant=\"contained\"\n                            color=\"primary\"\n                            onClick={() => {\n                              handleDeleteModeChanged(true, booking);\n                            }}\n                            className={classes.DeleteButton}\n                          >\n                            Delete This Record\n                          </Button>\n                        )}\n                      </li>\n\n                      <li\n                        hidden={\n                          !(\n                            deleteMode.delete &&\n                            deleteMode.person._id === booking._id\n                          )\n                        }\n                      >\n                        <Button\n                          type=\"button\"\n                          fullWidth\n                          variant=\"contained\"\n                          color=\"primary\"\n                          disabled={deleting}\n                          onClick={() => {\n                            handleDeleteModeChanged(false, booking);\n                          }}\n                          className={classes.SaveButton}\n                        >\n                          YES, Delete this!\n                        </Button>\n                      </li>\n\n                      <li\n                        hidden={\n                          !(\n                            deleteMode.delete &&\n                            deleteMode.person._id === booking._id\n                          )\n                        }\n                      >\n                        <Button\n                          type=\"button\"\n                          fullWidth\n                          variant=\"contained\"\n                          color=\"default\"\n                          disabled={deleting}\n                          onClick={() => {\n                            handleDeleteModeChanged(false, null);\n                          }}\n                          className={classes.CancelButton}\n                        >\n                          Cancel\n                        </Button>\n                      </li>\n\n                      {/* ****************************************************************************************** */}\n\n                      <li className={classes.li}>\n                        <Grid container spacing={2}>\n                          <Grid item xs={6}>\n                            <span className={classes.infoTitle}>\n                              BOOKED DATE\n                            </span>\n\n                            <span\n                              hidden={\n                                editMode.edit &&\n                                editMode.person._id === booking._id\n                              }\n                              className={classes.infoData}\n                            >\n                              {FormatDateFromString(booking.bookingDate)}\n                            </span>\n                            <span\n                              hidden={\n                                !(\n                                  editMode.edit &&\n                                  editMode.person._id === booking._id\n                                )\n                              }\n                              className={classes.infoData}\n                            >\n                              <TextField\n                                fullWidth\n                                error={validationError.bookingDateError}\n                                className={classes.TextBox}\n                                value={bookingDate}\n                                onChange={bookingDateChanged}\n                                inputProps={{\n                                  style: {\n                                    padding: 0,\n                                  },\n                                }}\n                              ></TextField>\n                            </span>\n                          </Grid>\n                          <Grid item xs={6}>\n                            <span className={classes.infoTitle}>\n                              BOOKED TIME\n                            </span>\n                            <span\n                              hidden={\n                                editMode.edit &&\n                                editMode.person._id === booking._id\n                              }\n                              className={classes.infoData}\n                            >\n                              {booking.bookingTime.toUpperCase()}\n                            </span>\n                            <span\n                              hidden={\n                                !(\n                                  editMode.edit &&\n                                  editMode.person._id === booking._id\n                                )\n                              }\n                              className={classes.infoData}\n                            >\n                              <TextField\n                                fullWidth\n                                error={validationError.bookingTimeError}\n                                className={classes.TextBox}\n                                value={bookingTime}\n                                onChange={bookingTimeChanged}\n                                inputProps={{\n                                  style: {\n                                    padding: 0,\n                                  },\n                                }}\n                              ></TextField>\n                            </span>\n                          </Grid>\n                        </Grid>\n                      </li>\n\n                      <li className={classes.li}>\n                        <Grid container spacing={2}>\n                          <Grid item xs={6}>\n                            <span className={classes.infoTitle}>FULLNAME</span>\n                            <span\n                              hidden={\n                                editMode.edit &&\n                                editMode.person._id === booking._id\n                              }\n                              className={classes.infoData}\n                            >\n                              {booking.fullname}\n                            </span>\n                            <span\n                              hidden={\n                                !(\n                                  editMode.edit &&\n                                  editMode.person._id === booking._id\n                                )\n                              }\n                              className={classes.infoData}\n                            >\n                              <TextField\n                                fullWidth\n                                className={classes.TextBox}\n                                value={fullname}\n                                onChange={fullnameChanged}\n                                inputProps={{\n                                  style: {\n                                    padding: 0,\n                                  },\n                                }}\n                              ></TextField>\n                            </span>\n                          </Grid>\n                          <Grid item xs={6}>\n                            <span className={classes.infoTitle}>EMAIL</span>\n                            <span\n                              hidden={\n                                editMode.edit &&\n                                editMode.person._id === booking._id\n                              }\n                              className={classes.infoData}\n                            >\n                              {booking.email}\n                            </span>\n                            <span\n                              hidden={\n                                !(\n                                  editMode.edit &&\n                                  editMode.person._id === booking._id\n                                )\n                              }\n                              className={classes.infoData}\n                            >\n                              <TextField\n                                fullWidth\n                                className={classes.TextBox}\n                                value={email}\n                                onChange={emailChanged}\n                                inputProps={{\n                                  style: {\n                                    padding: 0,\n                                  },\n                                }}\n                              ></TextField>\n                            </span>\n                          </Grid>\n                        </Grid>\n                      </li>\n                      <li className={classes.li}>\n                        <Grid container spacing={2}>\n                          <Grid item xs={6}>\n                            <span className={classes.infoTitle}>TEL</span>\n                            <span\n                              hidden={\n                                editMode.edit &&\n                                editMode.person._id === booking._id\n                              }\n                              className={classes.infoData}\n                            >\n                              {booking.phone?.toUpperCase()}\n                            </span>\n                            <span\n                              hidden={\n                                !(\n                                  editMode.edit &&\n                                  editMode.person._id === booking._id\n                                )\n                              }\n                              className={classes.infoData}\n                            >\n                              <TextField\n                                fullWidth\n                                className={classes.TextBox}\n                                value={tel}\n                                onChange={telChanged}\n                                inputProps={{\n                                  style: {\n                                    padding: 0,\n                                  },\n                                }}\n                              ></TextField>\n                            </span>\n                          </Grid>\n                          <Grid item xs={6}>\n                            <span className={classes.infoTitle}>NOTES</span>\n                            <span\n                              hidden={\n                                editMode.edit &&\n                                editMode.person._id === booking._id\n                              }\n                              className={classes.infoData}\n                            >\n                              {booking.notes}\n                            </span>\n                            <span\n                              hidden={\n                                !(\n                                  editMode.edit &&\n                                  editMode.person._id === booking._id\n                                )\n                              }\n                              className={classes.infoData}\n                            >\n                              <TextField\n                                fullWidth\n                                className={classes.TextBox}\n                                value={notes}\n                                onChange={notesChanged}\n                                inputProps={{\n                                  style: {\n                                    padding: 0,\n                                  },\n                                }}\n                              ></TextField>\n                            </span>\n                          </Grid>\n                        </Grid>\n                      </li>\n\n                      <li className={classes.li} style={{ paddingTop: \"20px\" }}>\n                        <span className={classes.infoTitle}>STATUS</span>{\" \"}\n                        {getStatusLabel(booking.status)}\n                        {booking.status === \"patient_attended\" &&\n                          !(\n                            editMode.edit && editMode.person._id === booking._id\n                          ) &&\n                          !booking.deleted && (\n                            <Button\n                              variant=\"outlined\"\n                              color=\"primary\"\n                              disabled={saving}\n                              style={{ width: \"300px\" }}\n                              onClick={(event) =>\n                                changeBackToBookingMade(event, booking._id)\n                              }\n                            >\n                              Change Back To Booking Made\n                            </Button>\n                          )}\n                        {booking.status === \"booked\" &&\n                          !(\n                            editMode.edit && editMode.person._id === booking._id\n                          ) &&\n                          !booking.deleted && (\n                            <Button\n                              variant=\"outlined\"\n                              color=\"default\"\n                              disabled={saving}\n                              style={{ width: \"300px\" }}\n                              onClick={(event) =>\n                                changeToPatientAttended(event, booking._id)\n                              }\n                            >\n                              Change To Patient Attended\n                            </Button>\n                          )}\n                      </li>\n\n                      <li hidden={booking.deleted || editMode.edit}>\n                        <Button\n                          disabled={!booking.formData}\n                          startIcon={<PrintIcon />}\n                          type=\"button\"\n                          fullWidth\n                          variant=\"outlined\"\n                          color=\"primary\"\n                          onClick={() => {\n                            downloadRegForm(booking._id);\n                          }}\n                          className={classes.DownloadForm}\n                        >\n                          Download Registration Form\n                        </Button>\n                      </li>\n\n                      <li\n                        hidden={\n                          booking.deleted || editMode.edit || booking.formData\n                        }\n                      >\n                        <Button\n                          disabled={!booking.email || booking.email.length < 3}\n                          startIcon={<SendIcon />}\n                          type=\"button\"\n                          fullWidth\n                          variant=\"outlined\"\n                          color=\"primary\"\n                          onClick={() => {\n                            sendRegForm(booking._id);\n                          }}\n                          className={classes.DownloadForm}\n                          style={{ position: \"relative\" }}\n                        >\n                          Send Registration Form Email\n                          {emailSent && (\n                            <div\n                              style={{\n                                position: \"absolute\",\n                                right: \"10px\",\n                                top: \"5px\",\n                                color: \"#05ad19\",\n                              }}\n                            >\n                              Email Sent\n                            </div>\n                          )}\n                        </Button>\n                      </li>\n\n                      <Divider />\n\n                      <li className={classes.li} style={{ marginTop: \"20px\" }}>\n                        <span className={classes.infoTitle}>INVOICE # : </span>{\" \"}\n                        <span style={{ paddingLeft: \"0px\" }}>\n                          {!invoiceLoaded && (\n                            <span className={classes.invoiceNumber}> ... </span>\n                          )}\n                          {invoiceLoaded && invoice && (\n                            <span className={classes.invoiceNumber}>\n                              {\" \"}\n                              {invoice.invoiceNumber}{\" \"}\n                            </span>\n                          )}\n                          {invoiceLoaded && !invoice && (\n                            <span\n                              className={classes.invoiceNumber}\n                              style={{ color: \"red\", fontSize: \"0.9rem\" }}\n                            >\n                              {\" \"}\n                              N/A{\" \"}\n                            </span>\n                          )}\n                        </span>\n                        {!(\n                          editMode.edit && editMode.person._id === booking._id\n                        ) &&\n                          !booking.deleted && (\n                            <React.Fragment>\n                              {invoiceLoaded && !invoice && (\n                                <Button\n                                  variant=\"outlined\"\n                                  color=\"primary\"\n                                  className={classes.PayButton}\n                                  onClick={() => OpenInvoiceDialog()}\n                                >\n                                  Issue Invoice\n                                </Button>\n                              )}\n\n                              {invoiceLoaded && invoice && (\n                                <React.Fragment>\n                                  <Button\n                                    variant=\"outlined\"\n                                    startIcon={<PrintIcon />}\n                                    color=\"primary\"\n                                    className={classes.printInvoiceButton}\n                                    onClick={() => downloadInvoice(invoice._id)}\n                                  >\n                                    Download Invoice\n                                  </Button>\n\n                                  <Button\n                                    variant=\"outlined\"\n                                    color=\"secondary\"\n                                    className={classes.editInvoiceButton}\n                                    onClick={() => OpenInvoiceDialog()}\n                                  >\n                                    Edit Invoice\n                                  </Button>\n\n                                  <Button\n                                    disabled={\n                                      !booking.email || booking.email.length < 3\n                                    }\n                                    startIcon={<SendIcon />}\n                                    type=\"button\"\n                                    variant=\"outlined\"\n                                    color=\"primary\"\n                                    onClick={() => {\n                                      sendInvoiceEmail(\n                                        invoice._id,\n                                        booking.email\n                                      );\n                                    }}\n                                    style={{\n                                      position: \"relative\",\n                                      marginLeft: \"10px\",\n                                      paddingRight: \"130px\",\n                                      fontSize: \"0.8rem\",\n                                    }}\n                                  >\n                                    Send Invoice By Email\n                                    {emailSentInvoice && (\n                                      <div\n                                        style={{\n                                          position: \"absolute\",\n                                          right: \"10px\",\n                                          top: \"5px\",\n                                          color: \"#05ad19\",\n                                        }}\n                                      >\n                                        Email Sent\n                                      </div>\n                                    )}\n                                  </Button>\n                                </React.Fragment>\n                              )}\n                            </React.Fragment>\n                          )}\n                      </li>\n\n                      <li className={classes.li} style={{ marginTop: \"20px\" }}>\n                        <span className={classes.infoTitle}>TOTAL CHARGES</span>{\" \"}\n                        <span\n                          style={{ paddingLeft: \"15px\" }}\n                          className={\n                            !booking.OTCCharges || booking.OTCCharges === 0\n                              ? classes.infoDataChargesHigher\n                              : classes.infoDataCharges\n                          }\n                        >{`£${booking.OTCCharges.toLocaleString(\n                          \"en-GB\"\n                        )}`}</span>\n                        {!(\n                          editMode.edit && editMode.person._id === booking._id\n                        ) &&\n                          !booking.paid &&\n                          !booking.deleted && (\n                            <Button\n                              variant=\"outlined\"\n                              color=\"secondary\"\n                              className={classes.PayButton}\n                              onClick={(event) => Pay()}\n                            >\n                              Pay\n                            </Button>\n                          )}\n                        {!(\n                          editMode.edit && editMode.person._id === booking._id\n                        ) &&\n                          booking.paid && (\n                            <React.Fragment>\n                              <span className={classes.PayLabel}>\n                                {\" \"}\n                                <CheckIcon\n                                  className={classes.checkIconSmall}\n                                />{\" \"}\n                                Paid by {booking.paidBy}\n                                {booking.paidBy === \"corporate\"\n                                  ? ` \"${booking.corporate}\" `\n                                  : \"\"}\n                              </span>\n\n                              <Tooltip title=\"Undo Payment\">\n                                <IconButton\n                                  onClick={() => setOpenUndoPayDialog(true)}\n                                >\n                                  <UndoIcon style={{ color: \"red\" }} />\n                                </IconButton>\n                              </Tooltip>\n                            </React.Fragment>\n                          )}\n                      </li>\n\n                      {/* <li className={classes.li}>\n                        <div\n                          style={{\n                            borderTop: \"1px solid #ddd\",\n                            paddingTop: \"10px\",\n                          }}\n                        >\n                          <span className={classes.infoTitle}>\n                            TOTAL CHARGES\n                          </span>{\" \"}\n                          <span\n                            className={\n                              !booking.OTCCharges || booking.OTCCharges === 0\n                                ? classes.infoDataChargesHigher\n                                : classes.infoDataCharges\n                            }\n                          >{`£${(\n                            booking.deposit + booking.OTCCharges\n                          ).toLocaleString(\"en-GB\")}`}</span>\n                        </div>\n                      </li> */}\n                    </ul>\n                  </div>\n                </Grid>\n              </div>\n              <Backdrop\n                className={classes.backdrop}\n                open={saving || deleting || restoring}\n              >\n                <CircularProgress color=\"inherit\" />\n              </Backdrop>\n            </DialogContent>\n\n            <PayDialog\n              booking={selectedBooking}\n              open={openPayDialog}\n              price={invoice ? invoice.grandTotal : null}\n              handleClose={handleClosePayDialog}\n            />\n\n            <InvoiceDialog\n              booking={selectedBooking}\n              invoice={invoice}\n              open={openInvoiceDialog}\n              handleClose={handleCloseInvoiceDialog}\n            />\n          </Dialog>\n\n          <Dialog\n            open={openUndoPayDialog}\n            onClose={handleCloseUndoPayDialog}\n            aria-labelledby=\"alert-dialog-title\"\n            aria-describedby=\"alert-dialog-description\"\n          >\n            <DialogTitle style={{ color: \"#999\" }} id=\"alert-dialog-title\">\n              {\"Undo Payment\"}\n            </DialogTitle>\n            <DialogContent>\n              <DialogContentText\n                style={{ color: \"#333\", fontWeight: \"400\" }}\n                id=\"alert-dialog-description\"\n              >\n                Are you sure you want to undo payment for this booking?\n              </DialogContentText>\n            </DialogContent>\n            <DialogActions>\n              <Button onClick={handleCloseUndoPayDialog} color=\"default\">\n                Back\n              </Button>\n              <Button onClick={undoPaymentClicked} color=\"secondary\" autoFocus>\n                Yes, Undo Payment\n              </Button>\n            </DialogActions>\n          </Dialog>\n\n          <Dialog\n            open={openRefundDialog}\n            onClose={handleCloseRefundDialog}\n            aria-labelledby=\"alert-dialog-title\"\n            aria-describedby=\"alert-dialog-description\"\n          >\n            <DialogTitle style={{ color: \"#999\" }} id=\"alert-dialog-title\">\n              {\"Refund Deposit\"}\n            </DialogTitle>\n            <DialogContent>\n              <DialogContentText\n                style={{ color: \"#333\", fontWeight: \"400\" }}\n                id=\"alert-dialog-description\"\n              >\n                Are you sure you want to refund deposit payment for this\n                booking?\n              </DialogContentText>\n            </DialogContent>\n            <DialogActions>\n              <Button onClick={handleCloseRefundDialog} color=\"default\">\n                Back\n              </Button>\n              <Button\n                onClick={refundPaymentClicked}\n                color=\"secondary\"\n                autoFocus\n              >\n                Yes, Refund Payment\n              </Button>\n            </DialogActions>\n          </Dialog>\n        </React.Fragment>\n      )}\n    </React.Fragment>\n  );\n}\n","import React, {useEffect, useRef, useState} from 'react';\nimport { DataGrid } from '@material-ui/data-grid';\nimport BookService from './services/BookService';\nimport { Button, Checkbox, CircularProgress, Dialog, DialogContent, DialogTitle, Divider, FormControl, FormControlLabel, Grid, Icon, InputLabel, LinearProgress, Link, makeStyles, MenuItem, Paper, Select, SvgIcon, Switch, TextField, Tooltip } from '@material-ui/core';\nimport RefreshIcon from '@material-ui/icons/Refresh';\nimport { IconButton } from '@material-ui/core';\nimport CheckIcon from '@material-ui/icons/Check';\nimport CloseIcon from '@material-ui/icons/Close';\nimport GlobalState from './../GlobalState';\nimport { getMenuIndex } from './../MenuList';\nimport {FormatDateFromString, FormatDateFromStringShortYear} from './DateFormatter';\n\nimport SearchIcon from '@material-ui/icons/Search';\nimport BookingDialog from './BookingDialog';\n\nimport NewReleasesIcon from '@material-ui/icons/NewReleases';\nimport HistoryIcon from '@material-ui/icons/History';\nimport TimelineIcon from '@material-ui/icons/Timeline';\nimport DescriptionIcon from '@material-ui/icons/Description';\nimport AutorenewIcon from '@material-ui/icons/Autorenew';\nimport LiveTvIcon from '@material-ui/icons/LiveTv';\nimport PlaylistAddCheckIcon from '@material-ui/icons/PlaylistAddCheck';\nimport AddCircleOutlineIcon from '@material-ui/icons/AddCircleOutline';\nimport DeleteIcon from '@material-ui/icons/Delete';\nimport HourglassEmptyIcon from '@material-ui/icons/HourglassEmpty';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faFileExcel } from \"@fortawesome/free-solid-svg-icons\";\nimport Draggable from 'react-draggable';\n\nimport * as dateformat from 'dateformat';\n\nimport DateFnsUtils from '@date-io/date-fns';\nimport {\n  MuiPickersUtilsProvider,\n  KeyboardTimePicker,\n  KeyboardDatePicker,\n} from '@material-ui/pickers';\n\nimport BusinessIcon from '@material-ui/icons/Business';\nimport CreditCardIcon from '@material-ui/icons/CreditCard';\nimport LocalAtmIcon from '@material-ui/icons/LocalAtm';\n\n\nimport ReactHTMLTableToExcel from 'react-html-table-to-excel';\nimport PriceCalculator from './PriceCalculator';\nimport { corporates } from './Corporates';\n\nconst useStyles = makeStyles((theme) => ({\n  title: {\n    marginTop: theme.spacing(0),\n    marginBottom: theme.spacing(1),\n\n  },\n  \n  refreshButton:{\n    marginLeft: theme.spacing(2),\n  },\n\n  checkIcon:{\n    color: \"green\"\n  },\n\n  closeIcon:{\n    color: \"red\"\n  },\n\n  RefLink: {\n    cursor: \"pointer\"\n  },\n\n  BookedLabel:{\n    backgroundColor: \"#606060\",\n    color: \"#fff\",\n    width: \"70px\",\n    textAlign: \"center\",\n  },\n\n  PatientAttendedLabel:{\n    backgroundColor: \"#0066aa\",\n    color: \"#fff\",\n    width: \"70px\",\n    textAlign: \"center\",\n  },\n\n  SampleTakenLabel:{\n    backgroundColor: \"#0066cc\",\n    color: \"#fff\",\n    width: \"70px\",\n    textAlign: \"center\",\n  },\n\n  ReportSentLabel:{\n    backgroundColor: \"#009900\",\n    color: \"#fff\",\n    width: \"70px\",\n    textAlign: \"center\",\n  },\n\n  ReportCertSentLabel:{\n    backgroundColor: \"#009900\",\n    color: \"#fff\",\n    width: \"70px\",\n    textAlign: \"center\",\n  },\n\n  PositiveLabel:{\n    backgroundColor: \"red\",\n    color: \"#fff\",\n    width: \"70px\",\n    textAlign: \"center\",\n  },\n\n  HideNowRows: {\n    position: \"absolute\",\n    top: \"40%\",\n    left: \"40%\",\n    width: \"600px\",\n    height: \"300px\",\n    backgroundColor : \"#fafafa\",\n    color : \"#111\",\n    zIndex: \"1000\",\n    display: \"flex\",\n    alignItems: \"center\",\n    justifyItems: \"center\"\n  },\n\n  ExportToExcelButton:\n  {\n    // marginBottom : \"20px\",\n    color : \"#2f942e\",\n    borderColor: \"#2f942e\",\n    \"&:hover\": {\n      background: \"#fafffa\",\n      borderColor: \"#2f942e\",\n    },\n    textDecoration : \"none !important\", \n   \n  },\n\n  ExportToExcelButtonInline:\n  {\n    // marginBottom : \"20px\",\n    color : \"#2f942e\",\n    borderColor: \"#2f942e\",\n    \"&:hover\": {\n      background: \"#fafffa\",\n      borderColor: \"#2f942e\",\n    },\n    textDecoration : \"none !important\", \n    cursor: \"pointer\",\n    padding: \"10px\"\n   \n  },\n\n  table: {\n    width: \"100%\",\n    border: \"1px solid #ddd\",\n    borderCollapse: \"collapse\",\n},\n\nth: {\n    border: \"1px solid #ddd\",\n    borderCollapse: \"collapse\",\n    verticalAlign: \"middle\",\n    fontcolor: \"#555\",\n    fontWeight: \"400\",\n    fontSize: \"15px\",\n    paddingTop: \"5px\",\n    paddingBottom: \"5px\",\n    width: \"14%\",\n    paddingLeft: \"5px\",\n},\n\ntd: {\n    border: \"1px solid #ddd\",\n    borderCollapse: \"collapse\",\n    verticalAlign: \"middle\",\n    paddingLeft: \"5px\",\n},\n\ntopSelect: {\n  margin: theme.spacing(1),\n  minWidth: 80,\n},\n\nnotifyIcon:{\n  width: \"16px\",\n  height: \"16px\",\n  borderRadius: \"50%\",\n  backgroundColor : \"rgb(220, 0, 78)\",\n  marginLeft: \"10px\"\n}\n\n}));\n\nconst getTableTitle = (str) =>{\n\n  if (str === 'today')\n  {\n    return `Today's Bookings`;\n  }else if (str === 'old')\n  {\n    return `Old Bookings`;\n  }else if (str === 'future')\n  {\n    return `Future Bookings`;\n  }else if (str === 'recent')\n  {\n    return `Recent Bookings`;\n  }else if (str === 'live')\n  {\n    return `Live Bookings`;\n  }else if (str === 'completed')\n  {\n    return `Completed Bookings`;\n  }else if (str === 'positive')\n  {\n    return `Positive Results`;\n  }else if (str === 'deleted')\n  {\n    return `Deleted Records`;\n  }else if (str === 'late')\n  {\n    return `40 Hours Late`;\n  }\n  \n  else\n  {\n    return `All Bookings`;\n  }\n\n}\n\nconst getTableIcon = (str) =>{\n\n  if (str === 'today')\n  {\n    return <NewReleasesIcon style={{fontSize:\"2.2rem\"}} />;\n  }else if (str === 'old')\n  {\n    return <HistoryIcon style={{fontSize:\"2.2rem\"}} />;\n  }else if (str === 'future')\n  {\n    return <TimelineIcon style={{fontSize:\"2.2rem\"}} />;\n  }else if (str === 'recent')\n  {\n    return <AutorenewIcon style={{fontSize:\"2.2rem\"}} />;\n  }else if (str === 'live')\n  {\n    return <LiveTvIcon style={{fontSize:\"2.2rem\"}} />;\n  }else if (str === 'completed')\n  {\n    return  <PlaylistAddCheckIcon style={{fontSize:\"2.2rem\"}} />;\n  }else if (str === 'positive')\n  {\n    return <AddCircleOutlineIcon style={{fontSize:\"2.2rem\"}} />\n  }else if (str === 'deleted')\n  {\n    return <DeleteIcon style={{fontSize:\"2.2rem\"}} />;\n  }else if (str === 'late')\n  {\n    return <HourglassEmptyIcon style={{fontSize:\"2.2rem\"}} />;\n  }\n  \n  else\n  {\n    return <DescriptionIcon style={{fontSize:\"2.2rem\"}} />;\n  }\n\n}\n\nfunction PaperComponent(props) {\n  return (\n    <Draggable handle=\"#draggable-dialog-title\" cancel={'[class*=\"MuiDialogContent-root\"]'}>\n      <Paper {...props} />\n    </Draggable>\n  );\n}\n\nexport default function BookingTable(props) {\n  \n  const classes = useStyles();\n\n  const [topCount, setTopCount] = React.useState(25)\n  const topCountChanged = (event) =>\n  {\n    setTopCount(event.target.value)\n    loadData(event.target.value)\n  }\n  \n\n  const [openDialogExcel, setOpenDialogExcel] = useState(false);\n  const handleCloseDialogExcel = () =>\n  {\n    setCorporate(corporates[0]);\n    setJustCorporate(false);\n    setOpenDialogExcel(false);\n  }\n\n\n  const [fromDate, setFromDate] = React.useState(new Date(new Date().getTime() - 7 * 24 * 60 * 60 * 1000 ));\n  const handleFromDateChange = (date) => {\n    setFromDate(date);\n    setFromDateStr(dateformat(date,'yyyy-mm-dd'));\n  };\n\n  const [untilDate, setUntilDate] = React.useState(new Date(new Date().getTime() - 1 * 24 * 60 * 60 * 1000 ));\n  const handleUntilDateChange = (date) => {\n    setUntilDate(date);\n    seUntilDateStr(dateformat(date,'yyyy-mm-dd'));\n  };\n\n  const [fromDateStr, setFromDateStr] = useState(dateformat(new Date(new Date().getTime() - 7 * 24 * 60 * 60 * 1000 ), 'yyyy-mm-dd'));\n  const [untilDateStr, seUntilDateStr] = useState(dateformat(new Date(new Date().getTime() - 1 * 24 * 60 * 60 * 1000 ), 'yyyy-mm-dd'));\n\n  const [justCorporate, setJustCorporate] = useState(false);\n\n  const[chkDate, setChkDate] = useState(true);\n  const[chkForename, setChkForename] = useState(true);\n  const[chkSurname, setChkSurname] = useState(true);\n  const[chkDOB, setChkDOB] = useState(true);\n  const[chkEmail, setChkEmail] = useState(true);\n  const[chkTel, setChkTel] = useState(true);\n  const[chkCertificate, setChkCertidicate] = useState(true);\n  const[chkAntiBodyTest, setChkAntiBodyTest] = useState(true);\n  const[chkextRef, setChkExtRef] = useState(true);\n  const[chkPrice, setChkPrice] = useState(true);\n\n  const justCorporateChanged = (event) =>\n  {\n    setJustCorporate(event.target.checked);\n  }\n  \n\n  const chkDateChanged = (event) =>\n  {\n    setChkDate(event.target.checked);\n  }\n\n  const chkForenameChanged = (event) =>\n  {\n    setChkForename(event.target.checked);\n  }\n\n  const chkSurnameChanged = (event) =>\n  {\n    setChkSurname(event.target.checked);\n  }\n\n  const chkDOBChanged = (event) =>\n  {\n    setChkDOB(event.target.checked);\n  }\n\n  const chkEmailChanged = (event) =>\n  {\n    setChkEmail(event.target.checked);\n  }\n\n  const chkTelChanged = (event) =>\n  {\n    setChkTel(event.target.checked);\n  }\n\n  const chkCertificateChanged = (event) =>\n  {\n    setChkCertidicate(event.target.checked);\n  }\n\n  const chkAntiBodyTestChanged = (event) =>\n  {\n    setChkAntiBodyTest(event.target.checked);\n  }\n\n  const chkextRefChanged = (event) =>\n  {\n    setChkExtRef(event.target.checked);\n  }\n\n  const chkPriceChanged = (event) =>\n  {\n    setChkPrice(event.target.checked);\n  }\n\n\n\n  var columns = [];\n\n  if (props.date === 'recent')\n  {\n    columns = [\n      // { field: 'id', headerName: '#', width: 70 },\n  \n      {field: '_id', headerName:' ', width: 70, renderCell: (params) =>{\n          return (\n\n           <React.Fragment>\n\n                <Button \n                        color=\"primary\"\n                        onClick = {event => openDetailsDialog(event, params.value)}\n                > \n            \n            <SearchIcon/> \n            \n            </Button>\n\n           </React.Fragment>\n\n          \n  \n          ); \n      \n        }\n      },\n\n      { field: 'paid', headerName: 'Paid', align: 'center' , width: 90, renderCell: (params) => { \n        if (!params.value)\n        {\n           return ( \n              <React.Fragment>                    \n                    <CloseIcon className={classes.closeIcon}/>                        \n              </React.Fragment>\n           );\n        }\n        else\n        {\n           if (params.getValue('paidBy') === 'credit card')\n           {\n             return ( <CreditCardIcon className={classes.checkIcon}/> );\n           }\n           else if (params.getValue('paidBy') === 'cash')\n           {\n             return ( <LocalAtmIcon className={classes.checkIcon}/> );\n           }\n           else if (params.getValue('paidBy') === 'corporate')\n           {\n             return ( <BusinessIcon className={classes.checkIcon}/> );\n           }\n           else\n           {\n             return '';  \n           }\n        }\n  }\n },\n\n\n      { field: 'timeStamp', headerName: 'TimeStamp', width: 200, valueFormatter: (params) => { \n        return formatTimeStamp(params.value);\n        }\n      },\n  \n      { field: 'bookingDate', headerName: 'B Date', width: 110, valueFormatter: (params) => { \n              return FormatDateFromString(params.value);\n          }\n       },\n      { field: 'bookingTimeNormalized', headerName: 'B Time', width: 105 , valueGetter: (params) => {\n        return params.getValue('bookingTime');\n      }},\n      { field: 'status', headerName: 'Status', width: 100, renderCell: (params) =>{\n          if (params.value === 'booked')\n          {\n            return (\n              <span className={classes.BookedLabel}>  BM </span>\n            );\n        \n          }else if (params.value === 'patient_attended')\n          {\n            return (\n              <span  className={classes.PatientAttendedLabel}> PA </span>\n            );\n          }\n          else{\n            return 'Unknown';\n          }\n        }\n      },\n      { field: 'bookingRef', headerName: 'Ref No.', width: 120 , renderCell: (params) =>{\n        return (\n          <Tooltip title=\"Go Find By Ref\" placement=\"right\">\n              <Link className={classes.RefLink}\n              //  onClick={\n              //   () => {\n              //     console.log(params.value);\n  \n              //     setState(state => ({...state, currentMenuIndex: getMenuIndex(`pcr` , `findByRef`)}));\n              //     setState(state => ({...state, ref : params.value}));\n              //     setState(state => ({...state, refError : false})); \n              //     setState(state => ({...state, foundRecords : []}));\n              //     setState(state => ({...state, findRecords : !state.findRecords}));\n              //   }\n              // }\n              \n              >\n                {params.value}\n              </Link>\n          </Tooltip>\n  \n        );\n      }},\n      { field: 'fullname', headerName: 'Fullname', width: 250 },\n      { field: 'email', headerName: 'Email', width: 200 },\n      { field: 'phone', headerName: 'Tel', width: 150 },\n      { field: 'notes', headerName: 'Notes', width: 500 },\n    \n    ];\n\n  }\n  else\n  {\n    columns = [\n      // { field: 'id', headerName: '#', width: 70 },\n  \n      {field: '_id', headerName:' ', width: 70, renderCell: (params) =>{\n          return (\n            <React.Fragment>\n\n                <Button \n                        color=\"primary\"\n                        onClick = {event => openDetailsDialog(event, params.value)}\n                > \n            \n            <SearchIcon/> \n            \n            </Button>\n\n           </React.Fragment>\n  \n          ); \n      \n        }\n      },\n\n      { field: 'paid', headerName: 'Paid', align: 'center' , width: 90, renderCell: (params) => { \n               if (!params.value)\n               {\n                  return ( \n                    <React.Fragment>\n                                <CloseIcon className={classes.closeIcon}/> \n                                {parseInt(params.getValue('deposit')) > 0 && props.date === 'deleted' && (\n                                      <span className={classes.notifyIcon}>&nbsp;</span>\n                                )}\n\n                               \n                    </React.Fragment>\n                     \n                        \n                  \n                  \n                  );\n               }\n               else\n               {\n                  if (params.getValue('paidBy') === 'credit card')\n                  {\n                    return ( <CreditCardIcon className={classes.checkIcon}/> );\n                  }\n                  else if (params.getValue('paidBy') === 'cash')\n                  {\n                    return ( <LocalAtmIcon className={classes.checkIcon}/> );\n                  }\n                  else if (params.getValue('paidBy') === 'corporate')\n                  {\n                    return ( <BusinessIcon className={classes.checkIcon}/> );\n                  }\n                  else\n                  {\n                    return '';  \n                  }\n               }\n         }\n        },\n        { field: 'bookingDate', headerName: 'B Date', width: 110, valueFormatter: (params) => { \n          return FormatDateFromString(params.value);\n      }\n   },\n  { field: 'bookingTimeNormalized', headerName: 'B Time', width: 105 , valueGetter: (params) => {\n    return params.getValue('bookingTime');\n  }},\n  { field: 'status', headerName: 'Status', width: 100, renderCell: (params) =>{\n      if (params.value === 'booked')\n      {\n        return (\n          <span className={classes.BookedLabel}>  BM </span>\n        );\n    \n      }else if (params.value === 'patient_attended')\n      {\n        return (\n          <span  className={classes.PatientAttendedLabel}> PA </span>\n        );\n      }\n      else{\n        return 'Unknown';\n      }\n    }\n  },\n  { field: 'bookingRef', headerName: 'Ref No.', width: 120 , renderCell: (params) =>{\n    return (\n      <Tooltip title=\"Go Find By Ref\" placement=\"right\">\n          <Link className={classes.RefLink}\n          //  onClick={\n          //   () => {\n          //     console.log(params.value);\n\n          //     setState(state => ({...state, currentMenuIndex: getMenuIndex(`pcr` , `findByRef`)}));\n          //     setState(state => ({...state, ref : params.value}));\n          //     setState(state => ({...state, refError : false})); \n          //     setState(state => ({...state, foundRecords : []}));\n          //     setState(state => ({...state, findRecords : !state.findRecords}));\n          //   }\n          // }\n          \n          >\n            {params.value}\n          </Link>\n      </Tooltip>\n\n    );\n  }},\n  { field: 'fullname', headerName: 'Fullname', width: 250 },\n  { field: 'email', headerName: 'Email', width: 200 },\n  { field: 'phone', headerName: 'Tel', width: 150 },\n  { field: 'notes', headerName: 'Notes', width: 500 },\n\n    \n    ];\n  \n\n  }\n\n\n\n  const [state, setState] = React.useContext(GlobalState);  \n\n  const [data, setData] = React.useState({bookings: [] , cachedBookings: [], isFetching : true});\n\n  const [selectedRow, setSelectedRow] = React.useState(null);\n\n  const [selectedBooking, setSelectedBooking] = React.useState(null);\n  const [seeDetailsDialogOpen, setSeeDetailsDialogOpen] = React.useState(false);\n\n  const [corporate, setCorporate] = useState(corporates[0]);\n  const corporateChanged = (event) =>\n  {\n    setCorporate(event.target.value);\n  }\n  \n\n  const [filter,setFilter] = React.useState('');\n\n\n  const lastPromise = useRef();\n\n  const formatTimeStamp = (timeStamp) =>\n  {\n    const todayStr = dateformat(new Date(), 'yyyy-mm-dd');\n    const timeStampStr = dateformat(timeStamp, 'yyyy-mm-dd');\n    if (todayStr === timeStampStr)\n    {\n      return dateformat(timeStamp, \"'Today', h:MM:ss TT\");\n    }\n    else\n    {\n       return dateformat(timeStamp, \"mmm dS, h:MM:ss TT\");\n    }\n  }\n\n  const loadData = (top) =>\n  {\n    var api = BookService.getAllBookings;\n    if (props.date === 'today')\n    {\n      api = BookService.getTodayBookings;\n    }else if (props.date === 'old')\n    {\n      api = BookService.getOldBookings;\n    }else if (props.date === 'future')\n    {\n      api = BookService.getFutureBookings;\n    }else if (props.date === 'recent')\n    {\n      api = BookService.getRecentBookingsAll;\n    }\n    else if (props.date === 'deleted')\n    {\n      api = BookService.getDeletedBookings;\n    }\n     \n    setData({bookings: [], cachedBookings: [], isFetching: true});\n   \n    // console.log(props)\n\n    const currentPromise = api(top).then( (res) =>{\n      // console.log(res)\n      for (var i=0; i < res.data.length; i++)\n      {\n        res.data[i] = {...res.data[i], id : i + 1}\n      }  \n      setData({bookings: [...res.data], cachedBookings: [...res.data], isFetching: false});\n      // return res.data;\n    }).catch(err => {\n      console.error(err)\n    })\n\n    // lastPromise.current = currentPromise;\n\n    // currentPromise.then(\n    //   result => {\n    //     if (currentPromise === lastPromise.current) {\n    //       setData({bookings: [...result], cachedBookings: [...result], isFetching: false});\n    //       setPage(1);\n    //     }\n    //   },\n    //   e => {\n    //     if (currentPromise === lastPromise.current) {\n    //         console.error(e);\n    //         setData({bookings: data.bookings, cachedBookings: data.cachedBookings, isFetching: false});\n    //     }\n    //   });\n\n  }\n\n  useEffect( () => {\n            setTopCount(25)\n            loadData(25)\n        },\n        [props.date]);\n\n\n\n\n  useEffect( () => {\n\n        if (filter && filter.trim().length > 0)\n        {\n          var filteredData = data.cachedBookings.filter( (element) => \n\n             (element.fullname.toLowerCase().indexOf(filter.toLowerCase()) >= 0)\n             || (element.service.toLowerCase().indexOf(filter.toLowerCase()) >= 0)\n               \n              \n          );\n  \n  \n          setData({bookings: [...filteredData], cachedBookings: data.cachedBookings, isFetching: false});\n        }else\n        {\n          setData({bookings: [...data.cachedBookings], cachedBookings: data.cachedBookings, isFetching: false});\n        }\n      },\n      [filter]);\n\n  \n      useEffect(() => {\n\n       loadData(topCount)\n    \n      }, [state.bookingDialogDataChanged]);    \n\n\n  const handleCloseSeeDetaisDialog = () =>\n  {\n    setSelectedBooking(null);\n    setSeeDetailsDialogOpen(false);\n  }    \n  \n  const openDetailsDialog = (event, id) =>\n  {\n    const booking = data.bookings.find(element => element._id === id);\n    setSelectedBooking(booking);\n    setSeeDetailsDialogOpen(true);\n\n  }\n\n  const refreshClicked = (event) =>{\n    setFilter('');\n    loadData(topCount)\n  }\n\n  const filterChanged = (event) =>{\n    setFilter(event.target.value);\n  }\n\n  const handleSelectionChanged = (newSelection) =>\n  {\n    if (newSelection.length > 0){\n      setSelectedRow(newSelection.rows[0]);\n    }\n    \n  }\n\n  const [page, setPage] = React.useState(1);\n\n  const handleExcelButtonClicked = (event) =>\n  {\n    setOpenDialogExcel(true);\n  }\n\n  const isTopSelectHidden = (date)=>\n  {\n    return date === 'live' || date === 'positive' || date === 'late' || date === 'today'\n  }\n\n\n  return (\n    <React.Fragment>\n      {data.isFetching && (\n        <div style={{ width: \"100%\", paddingTop: \"3px\" }}>\n          <LinearProgress color=\"primary\" />\n        </div>\n      )}\n      <Grid\n        container\n        direction=\"row\"\n        justify=\"space-between\"\n        alignItems=\"flex-end\"\n      >\n        <Grid item md={4}>\n          <div style={{ textAlign: \"left\", paddingLeft: \"10px\" }}>\n            <Grid\n              container\n              direction=\"row\"\n              justify=\"flex-start\"\n              alignItems=\"center\"\n            >\n              <Grid item>\n                <span style={{ paddingRight: \"15px\", color: \"#555\" }}>\n                  {\" \"}\n                  {getTableIcon(props.date)}{\" \"}\n                </span>\n              </Grid>\n              <Grid item>\n                <span\n                  style={{\n                    fontSize: \"1.4rem\",\n                    fontWeight: \"600\",\n                    color: \"#444\",\n                  }}\n                >\n                  {\" \"}\n                  {getTableTitle(props.date)}{\" \"}\n                </span>\n              </Grid>\n              <Grid item>\n                <Tooltip title=\"Refresh\" placement=\"right\">\n                  <IconButton\n                    color=\"primary\"\n                    className={classes.refreshButton}\n                    onClick={refreshClicked}\n                  >\n                    <RefreshIcon />\n                  </IconButton>\n                </Tooltip>\n              </Grid>\n            </Grid>\n          </div>\n        </Grid>\n\n        <Grid item md={3}>\n          {props.date === \"completed\" && state.showCreateExcel && (\n            <div style={{ paddingBottom: \"5px\" }}>\n              <Button\n                className={classes.ExportToExcelButton}\n                variant=\"outlined\"\n                color=\"default\"\n                onClick={handleExcelButtonClicked}\n                startIcon={\n                  <FontAwesomeIcon\n                    style={{ color: \"#009900\" }}\n                    icon={faFileExcel}\n                  />\n                }\n              >\n                export to excel\n              </Button>\n            </div>\n          )}\n        </Grid>\n\n        {data.isFetching && <div className={classes.HideNowRows}></div>}\n\n        <Grid item md={3}>\n          <TextField\n            variant=\"standard\"\n            value={filter}\n            onChange={filterChanged}\n            margin=\"normal\"\n            size=\"small\"\n            id=\"filter\"\n            label=\"Filter\"\n            name=\"filter\"\n            autoComplete=\"off\"\n          />\n        </Grid>\n\n        <Grid item hidden={isTopSelectHidden(props.date)}>\n          <FormControl className={classes.topSelect}>\n            <InputLabel id=\"top-select-label\">Limit</InputLabel>\n            <Select\n              labelId=\"top-select-label\"\n              id=\"top-simple-select\"\n              value={topCount}\n              onChange={topCountChanged}\n            >\n              <MenuItem value={25}>25</MenuItem>\n              <MenuItem value={50}>50</MenuItem>\n              <MenuItem value={100}>100</MenuItem>\n              <MenuItem value={500}>500</MenuItem>\n              <MenuItem value={1000}>1000</MenuItem>\n              <MenuItem value={10000}>ALL</MenuItem>\n            </Select>\n          </FormControl>\n\n          {/* <Button onClick={() => loadData(true)}> Show all records </Button> */}\n        </Grid>\n      </Grid>\n\n      <div style={{ height: 700, width: \"100%\" }}>\n        <DataGrid\n          rows={data.bookings}\n          columns={columns}\n          autoPageSize\n          page={page}\n          onPageChange={(params) => {\n            setPage(params.page);\n          }}\n          onSelectionChange={handleSelectionChanged}\n        />\n      </div>\n\n      <BookingDialog\n        booking={selectedBooking}\n        open={seeDetailsDialogOpen}\n        onClose={handleCloseSeeDetaisDialog}\n      />\n\n      {data.bookings && data.bookings.length > 0 && (\n        <Dialog\n          maxWidth=\"lg\"\n          open={openDialogExcel}\n          onClose={handleCloseDialogExcel}\n          PaperComponent={PaperComponent}\n          aria-labelledby=\"form-dialog-title\"\n        >\n          <DialogTitle id=\"draggable-dialog-title\">\n            <Grid\n              container\n              spacing={2}\n              direction=\"row\"\n              justify=\"center\"\n              alignItems=\"center\"\n            >\n              <Grid item>\n                <FontAwesomeIcon\n                  style={{ color: \"#2f942e\", fontSize: \"2rem\" }}\n                  icon={faFileExcel}\n                />\n              </Grid>\n\n              <Grid item>\n                <div\n                  style={{\n                    color: \"#2f942e\",\n                    paddingBottom: \"5px\",\n                    fontWeight: \"800\",\n                  }}\n                >\n                  {\" \"}\n                  Export to EXCEL{\" \"}\n                </div>\n              </Grid>\n            </Grid>\n\n            <Divider />\n          </DialogTitle>\n          <DialogContent>\n            <div\n              style={{\n                minHeight: \"600px\",\n                maxHeight: \"600px\",\n                minWidth: \"1200px\",\n                maxWidth: \"1200px\",\n              }}\n            >\n              <div>\n                <Grid row container justify=\"center\" spacing={3}>\n                  <Grid item>\n                    <FormControlLabel\n                      control={\n                        <Switch\n                          checked={justCorporate}\n                          onChange={justCorporateChanged}\n                          name=\"justCorporate\"\n                        />\n                      }\n                      label=\"Just Corporate Records\"\n                    />\n                  </Grid>\n\n                  {justCorporate && (\n                    <Grid item>\n                      <FormControl\n                        style={{ marginTop: \"0px\" }}\n                        className={classes.formControl}\n                      >\n                        <Select\n                          labelId=\"select-corporate\"\n                          id=\"select-corporate-id\"\n                          value={corporate}\n                          onChange={corporateChanged}\n                        >\n                          {corporates.map((element) => (\n                            <MenuItem value={element}>{`${element}`}</MenuItem>\n                          ))}\n                        </Select>\n                      </FormControl>\n                    </Grid>\n                  )}\n                </Grid>\n\n                <MuiPickersUtilsProvider utils={DateFnsUtils}>\n                  <Grid row container justify=\"center\" spacing={3}>\n                    <Grid item>\n                      <KeyboardDatePicker\n                        disableToolbar\n                        variant=\"inline\"\n                        format=\"dd/MM/yyyy\"\n                        margin=\"normal\"\n                        id=\"date-picker-from\"\n                        label=\"From\"\n                        value={fromDate}\n                        onChange={handleFromDateChange}\n                        KeyboardButtonProps={{\n                          \"aria-label\": \"change date\",\n                        }}\n                      />\n                    </Grid>\n\n                    <Grid item>\n                      <KeyboardDatePicker\n                        disableToolbar\n                        variant=\"inline\"\n                        format=\"dd/MM/yyyy\"\n                        margin=\"normal\"\n                        id=\"date-picker-until\"\n                        label=\"Until\"\n                        value={untilDate}\n                        onChange={handleUntilDateChange}\n                        KeyboardButtonProps={{\n                          \"aria-label\": \"change date\",\n                        }}\n                      />\n                    </Grid>\n\n                    <Grid item>\n                      <div style={{ paddingTop: \"30px\", marginLeft: \"20px\" }}>\n                        <ReactHTMLTableToExcel\n                          id=\"test-table-xls-button\"\n                          className={classes.ExportToExcelButtonInline}\n                          table=\"table-to-xls\"\n                          filename={`PCR.Report.${fromDateStr}.${untilDateStr}`}\n                          sheet=\"PCR-Report\"\n                          buttonText=\"Download as XLS\"\n                        />\n                      </div>\n                    </Grid>\n                  </Grid>\n                </MuiPickersUtilsProvider>\n              </div>\n\n              <div>\n                <Grid container spacing={3}>\n                  <Grid item xs>\n                    <FormControlLabel\n                      control={\n                        <Checkbox\n                          checked={chkDate}\n                          onChange={chkDateChanged}\n                          name=\"chkDate\"\n                        />\n                      }\n                      label=\"Date\"\n                    />\n                  </Grid>\n                  <Grid item xs>\n                    <FormControlLabel\n                      control={\n                        <Checkbox\n                          checked={chkForename}\n                          onChange={chkForenameChanged}\n                          name=\"chkForename\"\n                        />\n                      }\n                      label=\"Forename\"\n                    />\n                  </Grid>\n                  <Grid item xs>\n                    <FormControlLabel\n                      control={\n                        <Checkbox\n                          checked={chkSurname}\n                          onChange={chkSurnameChanged}\n                          name=\"chkSurname\"\n                        />\n                      }\n                      label=\"Surname\"\n                    />\n                  </Grid>\n                  <Grid item xs>\n                    <FormControlLabel\n                      control={\n                        <Checkbox\n                          checked={chkDOB}\n                          onChange={chkDOBChanged}\n                          name=\"chkDOB\"\n                        />\n                      }\n                      label=\"D.O.B\"\n                    />\n                  </Grid>\n                  <Grid item xs>\n                    <FormControlLabel\n                      control={\n                        <Checkbox\n                          checked={chkEmail}\n                          onChange={chkEmailChanged}\n                          name=\"chkEmail\"\n                        />\n                      }\n                      label=\"Email\"\n                    />\n                  </Grid>\n                  <Grid item xs>\n                    <FormControlLabel\n                      control={\n                        <Checkbox\n                          checked={chkTel}\n                          onChange={chkTelChanged}\n                          name=\"chkTel\"\n                        />\n                      }\n                      label=\"Tel\"\n                    />\n                  </Grid>\n                  <Grid item xs>\n                    <FormControlLabel\n                      control={\n                        <Checkbox\n                          checked={chkCertificate}\n                          onChange={chkCertificateChanged}\n                          name=\"chkCertificate\"\n                        />\n                      }\n                      label=\"Certificate\"\n                    />\n                  </Grid>\n                  <Grid item xs>\n                    <FormControlLabel\n                      control={\n                        <Checkbox\n                          checked={chkAntiBodyTest}\n                          onChange={chkAntiBodyTestChanged}\n                          name=\"chkAntiBodyTest\"\n                        />\n                      }\n                      label=\"AntiBodyTest\"\n                    />\n                  </Grid>\n                  <Grid item xs>\n                    <FormControlLabel\n                      control={\n                        <Checkbox\n                          checked={chkextRef}\n                          onChange={chkextRefChanged}\n                          name=\"chkextRef\"\n                        />\n                      }\n                      label=\"Lab No.\"\n                    />\n                  </Grid>\n                  <Grid item xs>\n                    <FormControlLabel\n                      control={\n                        <Checkbox\n                          checked={chkPrice}\n                          onChange={chkPriceChanged}\n                          name=\"chkPrice\"\n                        />\n                      }\n                      label=\"Price\"\n                    />\n                  </Grid>\n                </Grid>\n              </div>\n\n              <div style={{ width: \"100%\", paddingTop: \"20px\" }}>\n                <table className={classes.table} id=\"table-to-xls\">\n                  <tr>\n                    {chkDate && <th className={classes.th}>Date</th>}\n                    {chkForename && <th className={classes.th}>Forename</th>}\n                    {chkSurname && <th className={classes.th}>Surename</th>}\n                    {chkDOB && <th className={classes.th}>D.O.B</th>}\n                    {chkEmail && <th className={classes.th}>Email</th>}\n                    {chkTel && <th className={classes.th}>Tel</th>}\n                    {chkCertificate && (\n                      <th className={classes.th}>Certificate</th>\n                    )}\n                    {chkAntiBodyTest && (\n                      <th className={classes.th}>AntiBodyTest</th>\n                    )}\n                    {chkextRef && <th className={classes.th}>Lab No.</th>}\n                    {chkPrice && <th className={classes.th}>Price (£) </th>}\n                  </tr>\n\n                  {data.bookings\n                    .filter((booking) => {\n                      if (!justCorporate) {\n                        return (\n                          booking.bookingDate >= fromDateStr &&\n                          booking.bookingDate <= untilDateStr\n                        );\n                      } else {\n                        return (\n                          booking.bookingDate >= fromDateStr &&\n                          booking.bookingDate <= untilDateStr &&\n                          booking.paid &&\n                          booking.paidBy === \"corporate\" &&\n                          booking.corporate === corporate\n                        );\n                      }\n                    })\n\n                    .map((booking) => (\n                      <tr>\n                        {chkDate && (\n                          <td className={classes.td}>\n                            {FormatDateFromString(booking.bookingDate)}\n                          </td>\n                        )}\n                        {chkForename && (\n                          <td className={classes.td}>\n                            {booking.forenameCapital}\n                          </td>\n                        )}\n                        {chkSurname && (\n                          <td className={classes.td}>\n                            {booking.surnameCapital}\n                          </td>\n                        )}\n                        {chkDOB && (\n                          <th className={classes.th}>\n                            {/* {FormatDateFromString(booking.birthDate)} */}\n                          </th>\n                        )}\n                        {chkEmail && (\n                          <td className={classes.td}>{booking.email}</td>\n                        )}\n                        {chkTel && (\n                          <td className={classes.td}>{booking.phone}</td>\n                        )}\n                        {chkCertificate && (\n                          <td className={classes.td}>\n                            {booking.certificate ? \"YES\" : \"NO\"}\n                          </td>\n                        )}\n                        {chkAntiBodyTest && (\n                          <td className={classes.td}>\n                            {booking.antiBodyTest ? \"YES\" : \"NO\"}\n                          </td>\n                        )}\n                        {chkextRef && (\n                          <td className={classes.td}>{booking.extRef}</td>\n                        )}\n                        {chkPrice && (\n                          <td className={classes.td}>\n                            {PriceCalculator.calculatePrice(booking)}\n                          </td>\n                        )}\n                      </tr>\n                    ))}\n                </table>\n              </div>\n            </div>\n          </DialogContent>\n        </Dialog>\n      )}\n    </React.Fragment>\n  );\n} ","import React, { useEffect } from 'react';\nimport { useTheme } from '@material-ui/core/styles';\nimport { LineChart, Line, XAxis, YAxis, Label, ResponsiveContainer } from 'recharts';\nimport Title from './Title';\nimport dateformat from 'dateformat';\nimport BookService from './services/BookService';\nimport { LinearProgress } from '@material-ui/core';\n\n// Generate Sales Data\nfunction createData(time, amount) {\n  return { time, amount };\n}\n\n\nconst emptyData = [\n  createData('09:00', 0),\n  createData('10:00', 0),\n  createData('11:00', 0),\n  createData('12:00', 0),\n  createData('13:00', 0),\n  createData('14:00', 0),\n  createData('15:00', 0),\n  createData('16:00', 0),\n  createData('17:00', 0),\n  createData('18:00', undefined),\n\n];\n\nconst getCount = (data, str) =>\n{\n  if (!data)\n    return 0;\n\n  var count = 0;\n  for (var i=0; i < data.length; i++)\n  {\n    if (data[i]._id.substr(0,2) === str)\n    {\n      count += data[i].count;\n    }\n  }\n  return count;\n}\n\nexport default function Chart() {\n  const theme = useTheme();\n\n  const [data, setData] = React.useState(emptyData);\n  const [loading, setLoading] = React.useState(false)\n\n  useEffect(() =>\n  {\n    const fetchData = async () =>\n    {\n      const todayStr = dateformat(new Date(), 'yyyy-mm-dd');\n      var result = [];\n      try\n      {\n          setLoading(true)\n          const res = await BookService.getBookingsStatsByDateStr(todayStr);\n          setLoading(false)\n          const data = res.data.result;\n          result.push(createData('09:00', getCount(data,'09')));\n          result.push(createData('10:00', getCount(data,'10')));\n          result.push(createData('11:00', getCount(data,'11')));\n          result.push(createData('12:00', getCount(data,'12')));\n          result.push(createData('13:00', getCount(data,'13')));\n          result.push(createData('14:00', getCount(data,'14')));\n          result.push(createData('15:00', getCount(data,'15')));\n          result.push(createData('16:00', getCount(data,'16')));\n          result.push(createData('17:00', getCount(data,'17')));\n          result.push(createData('18:00', undefined));\n \n           setData(result);\n      }\n      catch(err){\n        setLoading(false)\n        console.error(err);\n      }\n\n    }\n  \n   fetchData();\n\n  }, [] );\n\n  return (\n    <React.Fragment>\n       {loading && (\n        <div style={{ width: \"100%\", paddingTop: \"3px\" }}>\n          <LinearProgress color=\"primary\" />\n        </div>\n      )}\n      <Title>Today</Title>\n      <ResponsiveContainer>\n        <LineChart\n          data={data}\n          margin={{\n            top: 16,\n            right: 16,\n            bottom: 0,\n            left: 24,\n          }}\n        >\n          <XAxis dataKey=\"time\" stroke={theme.palette.text.secondary} />\n          <YAxis stroke={theme.palette.text.secondary}>\n            <Label\n              angle={270}\n              position=\"left\"\n              style={{ textAnchor: 'middle', fill: theme.palette.text.primary }}\n            >\n              Online Bookings\n            </Label>\n          </YAxis>\n          <Line type=\"monotone\" dataKey=\"amount\" stroke={theme.palette.primary.main} dot={false} />\n        </LineChart>\n      </ResponsiveContainer>\n    </React.Fragment>\n  );\n}","import React, { useEffect } from \"react\";\nimport Link from \"@material-ui/core/Link\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport Typography from \"@material-ui/core/Typography\";\nimport Title from \"./Title\";\nimport { Grid, LinearProgress, Tooltip } from \"@material-ui/core\";\nimport * as dateformat from \"dateformat\";\nimport BookService from \"./services/BookService\";\nimport BookingDialog from \"./BookingDialog\";\n\nconst useStyles = makeStyles({\n  depositContext: {\n    flex: 1,\n  },\n\n  bookingBox: {\n    display: \"flex\",\n    margin: \"5px\",\n    padding: \"5px\",\n    maxWidth: \"90px\",\n    minHeight: \"30px\",\n    border: \"1px solid #eee\",\n    fontSize: \"12px\",\n    fontWeight: \"500\",\n    cursor: \"pointer\",\n    backgroundColor: \"#ebedf7\",\n    color: \"#3f51b5\",\n    boxShadow: \"2px 4px #fafafa\",\n    borderRadius: \"5px\",\n    textAlign: \"center\",\n    alignItems: \"center\",\n    justifyItems: \"center\",\n    align: \"center\",\n\n    \"&:hover\": {\n      background: \"#3f51b5\",\n      color: \"#ebedf7\",\n    },\n  },\n});\n\nconst isWeekend = (date) => {\n  return (\n    date.getDay() === 1 ||\n    date.getDay() === 2 ||\n    date.getDay() === 3 ||\n    date.getDay() === 6 ||\n    date.getDay() === 0\n  );\n};\n\nconst isThursday = (date) => {\n  return date.getDay() === 4; /// Thursday\n};\n\nconst isFriday = (date) => {\n  return date.getDay() === 5; /// Friday\n};\n\nconst getCurrentTimeSlot = (now) => {\n \n\n  var min = now.getMinutes();\n  var hour = now.getHours();\n\n  if (isWeekend(now) && (hour >= 14 || hour < 10)) {\n    return null;\n  }\n\n  if (hour >= 18 || hour < 10) {\n    return null;\n  }\n\n  const slotMinStr = min < 30 ? \"00\" : \"30\";\n  const pmStr = hour >= 12 ? \"PM\" : \"AM\";\n\n  if (hour > 12) hour = hour - 12;\n\n  const slotHourStr = `0${hour}`;\n\n  return `${slotHourStr}:${slotMinStr} ${pmStr}`;\n};\n\nconst getCurrentTimeSlotLabel = (timeStr) => {\n  if (!timeStr) {\n    return \"Closed\";\n  }\n\n  let endTimeStr = \"\";\n  switch (timeStr) {\n    case \"10:00 AM\":\n      endTimeStr = \"10:30 AM\";\n      break;\n    case \"10:30 AM\":\n      endTimeStr = \"11:00 AM\";\n      break;\n    case \"11:00 AM\":\n      endTimeStr = \"11:30 AM\";\n      break;\n    case \"11:30 AM\":\n      endTimeStr = \"12:00 PM\";\n      break;\n    case \"12:00 PM\":\n      endTimeStr = \"12:30 PM\";\n      break;\n    case \"12:30 PM\":\n      endTimeStr = \"01:00 PM\";\n      break;\n    case \"01:00 PM\":\n      endTimeStr = \"01:30 PM\";\n      break;\n    case \"01:30 PM\":\n      endTimeStr = \"02:00 PM\";\n      break;\n    case \"02:00 PM\":\n      endTimeStr = \"02:30 PM\";\n      break;\n    case \"02:30 PM\":\n      endTimeStr = \"03:00 PM\";\n      break;\n    case \"03:00 PM\":\n      endTimeStr = \"03:30 PM\";\n      break;\n    case \"03:30 PM\":\n      endTimeStr = \"04:00 PM\";\n      break;\n    case \"04:00 PM\":\n      endTimeStr = \"04:30 PM\";\n      break;\n    case \"04:30 PM\":\n      endTimeStr = \"05:00 PM\";\n      break;\n    case \"05:00 PM\":\n      endTimeStr = \"05:30 PM\";\n      break;\n    case \"05:30 PM\":\n      endTimeStr = \"06:00 PM\";\n      break;\n\n    default:\n      endTimeStr = \"\";\n      break;\n  }\n\n  return `${timeStr} - ${endTimeStr}`;\n};\n\nexport default function CurrentVisits() {\n  const classes = useStyles();\n\n  const [current, setCurrent] = React.useState(new Date());\n  const [bookings, setBookings] = React.useState([]);\n\n  const [selectedBooking, setSelectedBooking] = React.useState(null);\n  const [openDialog, setOpenDialog] = React.useState(false);\n\n  const [loading, setLoading] = React.useState(false);\n\n  useEffect(() => {\n    const interval = setInterval(() => {\n      setCurrent(new Date());\n    }, 30000);\n\n    return () => {\n      clearInterval(interval);\n    };\n  }, []);\n\n  useEffect(() => {\n    const currentTimeSlot = getCurrentTimeSlot(current);\n    if (!currentTimeSlot) return;\n    const todayStr = dateformat(current, \"yyyy-mm-dd\");\n    setLoading(true);\n    BookService.getBookingsByDateStrandTime(todayStr, currentTimeSlot)\n      .then((res) => {\n        setLoading(false);\n        if (res.data.status === \"OK\") {\n          setBookings([...res.data.bookings]);\n        }\n      })\n      .catch((err) => {\n        setLoading(false);\n        console.log(err);\n      });\n  }, [current]);\n\n  const getBookingsBox = (_bookings) => {\n    if (_bookings && _bookings.length > 0) {\n      return (\n        <div className={classes.root}>\n          <Grid\n            container\n            justify=\"flex-start\"\n            alignItems=\"flex-start\"\n            spacing={0}\n          >\n            {_bookings.map((booking) => (\n              <Grid item>\n                <div\n                  className={classes.bookingBox}\n                  onClick={(event) => bookingCliked(event, booking)}\n                >\n                  <span style={{ textAlign: \"center\" }}>\n                    {\" \"}\n                    {`${booking.surnameCapital}`.substring(0, 10)}{\" \"}\n                  </span>\n                </div>\n              </Grid>\n            ))}\n          </Grid>\n        </div>\n      );\n    }\n  };\n\n  const bookingCliked = (event, booking) => {\n    setSelectedBooking(booking);\n    setOpenDialog(true);\n  };\n\n  const handleCloseDialog = () => {\n    setOpenDialog(false);\n  };\n\n  return (\n    <React.Fragment>\n      {loading && (\n        <div style={{ width: \"100%\", paddingTop: \"3px\" }}>\n          <LinearProgress color=\"primary\" />\n        </div>\n      )}\n\n      <Title>Current Visits</Title>\n      <Typography component=\"p\" variant=\"h6\">\n        {getCurrentTimeSlotLabel(getCurrentTimeSlot(current))}\n      </Typography>\n      <Typography color=\"textSecondary\" className={classes.depositContext}>\n        on {dateformat(current, \"dd mmmm, yyyy\")}\n      </Typography>\n\n      {getBookingsBox(bookings)}\n\n      <BookingDialog\n        booking={selectedBooking}\n        open={openDialog}\n        onClose={handleCloseDialog}\n      />\n    </React.Fragment>\n  );\n}\n","import React, { useEffect } from 'react';\nimport Link from '@material-ui/core/Link';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Table from '@material-ui/core/Table';\nimport TableBody from '@material-ui/core/TableBody';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableHead from '@material-ui/core/TableHead';\nimport TableRow from '@material-ui/core/TableRow';\nimport Title from './Title';\nimport BookService from './services/BookService';\nimport * as dateformat from 'dateformat';\nimport GlobalState from './../GlobalState';\nimport { getMenuIndex } from './../MenuList';\nimport {FormatDateFromString, FormatDateFromStringShortYear} from './DateFormatter';\nimport { LinearProgress } from '@material-ui/core';\n\n\nconst useStyles = makeStyles((theme) => ({\n  seeMore: {\n    marginTop: theme.spacing(3),\n  },\n}));\n\nexport default function BookingView() {\n  const classes = useStyles();\n  const [state, setState] = React.useContext(GlobalState);  \n\n  const [data, setData] = React.useState({bookings: [] , isFetching : false});\n\n  const [refresh, setRefresh] = React.useState(false);\n\n  const [loading, setLoading] = React.useState(false)\n\n  const seeMoreRecords = (event) => {\n    event.preventDefault();\n    setState(state=>({...state, currentMenuIndex:getMenuIndex('gynae',`recentBookings`)}));\n  }\n\n  const loadData = () => \n  {\n    setData({bookings: data.bookings, isFetching: true});\n    setLoading(true)\n    BookService.getRecentBookings().then( (res) =>{\n      setLoading(false)\n        setData({bookings: res.data, isFetching: false});\n\n    }).catch( (err) => {\n      setLoading(false)\n        console.log(err);\n        setData({bookings: data.bookings, isFetching: false});\n    });\n  }\n\n\n  useEffect( () => {\n          loadData();\n        },\n        [refresh]);   \n\n\n   useEffect( () => {\n     loadData();\n     const interval = setInterval(() => {\n       setRefresh(refresh => !refresh);\n     }, 30000);\n\n     return () =>\n     {\n       clearInterval(interval)\n     }\n     \n   }, []) ;    \n\n   const formatTimeStamp = (timeStamp) =>\n   {\n     const todayStr = dateformat(new Date(), 'yyyy-mm-dd');\n     const timeStampStr = dateformat(timeStamp, 'yyyy-mm-dd');\n     if (todayStr === timeStampStr)\n     {\n       return dateformat(timeStamp, \"'Today', h:MM:ss TT\");\n     }\n     else\n     {\n        return dateformat(timeStamp, \"mmm dS, h:MM:ss TT\");\n     }\n   }\n\n  return (\n    <React.Fragment>\n       {loading && (\n        <div style={{ width: \"100%\", paddingTop: \"3px\" }}>\n          <LinearProgress color=\"primary\" />\n        </div>\n      )}\n      <Title>Recent Bookings</Title>\n      <Table size=\"small\">\n        <TableHead>\n          <TableRow>\n            <TableCell>TimeStamp</TableCell>        \n            <TableCell>Fullname</TableCell>\n            <TableCell>Email</TableCell>\n            <TableCell>Tel</TableCell>\n            <TableCell>Booked Date</TableCell>\n            <TableCell>Booked Time</TableCell> \n          </TableRow>\n        </TableHead>\n        <TableBody>\n          {data.bookings.map((row) => (\n            <TableRow key={row._id}>\n              <TableCell>{formatTimeStamp(row.timeStamp)}</TableCell>\n              <TableCell>{row.fullname}</TableCell>\n              <TableCell>{row.email}</TableCell>\n              <TableCell>{row.phone}</TableCell>\n              <TableCell>{FormatDateFromString(row.bookingDate)}</TableCell>\n              <TableCell>{row.bookingTime}</TableCell>\n            </TableRow>\n          ))}\n        </TableBody>\n      </Table>\n      <div className={classes.seeMore}>\n        <Link color=\"primary\" href=\"#\" onClick={seeMoreRecords}>\n          See more records\n        </Link>\n      </div>\n    </React.Fragment>\n  );\n}","import React from 'react';\nimport clsx from 'clsx';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Grid from '@material-ui/core/Grid';\nimport Paper from '@material-ui/core/Paper';\nimport Chart from './Chart';\nimport CurrentVisits from './CurrentVisits';\n\n\n\nimport { Tooltip } from '@material-ui/core';\nimport GlobalState from './../GlobalState';\nimport BookingView from './BookingView';\n\nconst useStyles = makeStyles((theme) => ({\n \n  paper: {\n    padding: theme.spacing(2),\n    display: 'flex',\n    overflow: 'auto',\n    flexDirection: 'column',\n  },\n  fixedHeight: {\n    height: 240,\n  },\n}));\n\nexport default function DashboardPreview() {\n  const classes = useStyles();\n  const [state, setState] = React.useContext(GlobalState);\n\n  const fixedHeightPaper = clsx(classes.paper, classes.fixedHeight);\n\n  return (\n        <React.Fragment>\n\n<           Grid container spacing={3}>\n                    {/* Chart */}\n                    <Grid item xs={12} md={4} lg={6}>\n                    <Paper className={fixedHeightPaper}>\n                        <Chart />\n                    </Paper>\n                    </Grid>\n                    {/* Current Visits */}\n                    <Grid item xs={12} md={4} lg={6}>\n                    <Paper className={fixedHeightPaper}>\n                        <CurrentVisits />\n                    </Paper>\n                    </Grid>\n                    {/* Recent Bookings */}\n                    <Grid item xs={12}>\n                    <Paper className={classes.paper}>\n                        <BookingView/>\n                    </Paper>\n                    </Grid>\n          </Grid>\n        </React.Fragment>\n  );\n}","import React from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Typography from '@material-ui/core/Typography';\nimport GlobalState from './../GlobalState';\nimport Grid from '@material-ui/core/Grid';\nimport Accordion from '@material-ui/core/Accordion';\nimport AccordionDetails from '@material-ui/core/AccordionDetails';\nimport AccordionSummary from '@material-ui/core/AccordionSummary';\nimport ExpandMoreIcon from '@material-ui/icons/ExpandMore';\nimport { Button, Checkbox, FormControlLabel, Link, TextField, Tooltip } from '@material-ui/core';\nimport PDFService from './services/PDFService';\n\nimport {calculatePrice} from './PriceCalculator';\n\n\nimport bookingService from './services/BookService';\nimport CheckIcon from '@material-ui/icons/Check';\nimport CloseIcon from '@material-ui/icons/Close';\nimport DeleteIcon from '@material-ui/icons/Delete';\n\nimport {FormatDateFromString, RevertFormatDateFromString} from './DateFormatter';\n\nimport PrintIcon from '@material-ui/icons/Print';\n\n\nconst useStyles = makeStyles((theme) => ({\n  box: {\n    backgroundColor : \"#373737\",\n    color: \"#fff\",\n    padding : \"1px\",\n    borderRadius : \"4px\",\n    textAlign: \"justify\",\n    paddingRight: \"40px\"\n  },\n\n  boxRed: {\n    backgroundColor : \"#dc2626\",\n    color: \"#fff\",\n    padding : \"1px\",\n    borderRadius : \"4px\",\n    textAlign: \"justify\",\n    paddingRight: \"40px\"\n  },\n\n  boxInfo: {\n    textAlign: \"justify\",\n    backgroundColor : \"#fafafa\",\n    color: \"#333\",\n    padding : \"1px\",\n    borderRadius : \"4px\",\n    paddingRight: \"40px\",\n    border: \"1px solid #eee\",\n  },\n\n  ul: {\n     listStyle: \"none\",\n     padding: \"0\",\n     margin: \"0\"\n  },\n\n  li: {\n    marginBottom : \"15px\"\n  },\n\n\n  icon: {\n    marginRight : \"8px\"\n  },\n\n  root: {\n    width: '100%',\n  },\n\n  lineThrough:{\n    textDecoration : \"line-through\",\n  },\n\n\n\n  heading: {\n    fontSize: theme.typography.pxToRem(15),\n    flexBasis: '33.33%',\n    flexShrink: 0,\n    color: theme.palette.text.secondary,\n  },\n  secondaryHeading: {\n    fontSize: theme.typography.pxToRem(15),\n  },\n\n  infoDetails:{\n    textAlign: \"left\",\n  },\n\n  infoTitle:{\n    fontWeight: \"800\",\n    marginRight: \"10px\"\n  },\n\n  infoData:{\n    fontWeight: \"400\",\n  },\n\n  title:\n  {\n    // textAlign : \"center\",\n    // fontWeight : \"500\",\n    // margin: \"10px\",\n    // backgroundColor : \"#eee\",\n    // padding : \"10px\",\n    // borderRadius : \"4px\"\n    textAlign: \"center\",\n    fontWeight : \"600\",\n    marginLeft: \"10px\",\n    marginBottom: \"5px\"\n\n  },\n\n  Accordion:{\n    backgroundColor : \"#f5f5f5\",\n    color: \"#222\"\n  },\n\n  AccordionDeleted:{\n    backgroundColor : \"#aaa\",\n    color: \"#555\"\n  },\n\n  DownloadForm:{\n      marginTop: \"10px\",\n      marginBottom : \"10px\"\n  },\n\n  infoDataCharges:{\n    fontSize : \"18px\",\n    color: \"green\",\n    fontWeight : \"600\"\n  },\n\n  infoDataChargesHigher:{\n    fontSize : \"18px\",\n    color: \"red\",\n    fontWeight : \"600\"\n  },\n  BookedLabel:{\n    color: \"#606060\",\n    paddingRight: \"10px\",\n    paddingLeft: \"5px\",\n    paddingBottom: \"3px\",\n    paddingTop: \"3px\",\n    fontWeight: \"800\",\n    borderLeft: \"5px solid\",\n    borderColor: \"#606060\"\n  },\n\n  PatientAttendedLabel:{\n    color: \"#0066aa\",\n    paddingRight: \"10px\",\n    paddingLeft: \"5px\",\n    paddingBottom: \"3px\",\n    paddingTop: \"3px\",\n    fontWeight: \"800\",\n    borderLeft: \"5px solid\",\n    borderColor: \"#0066aa\"\n  },\n\n  SampleTakenLabel:{\n    color: \"#0066cc\",\n    paddingRight: \"10px\",\n    paddingLeft: \"5px\",\n    paddingBottom: \"3px\",\n    paddingTop: \"3px\",\n    fontWeight: \"800\",\n    borderLeft: \"5px solid\",\n    borderColor: \"#0066cc\"\n  },\n\n  ReportSentLabel:{\n    color: \"#009900\",\n    paddingRight: \"10px\",\n    paddingLeft: \"5px\",\n    paddingBottom: \"3px\",\n    paddingTop: \"3px\",\n    fontWeight: \"800\",\n    borderLeft: \"5px solid\",\n    borderColor: \"#009900\"\n  },\n\n  ReportCertSentLabel:{\n    color: \"#009900\",\n    paddingRight: \"10px\",\n    paddingLeft: \"5px\",\n    paddingBottom: \"3px\",\n    paddingTop: \"3px\",\n    fontWeight: \"800\",\n    borderLeft: \"5px solid\",\n    borderColor: \"#009900\"\n  },\n\n  PositiveLabel:{\n    color: \"red\",\n    paddingRight: \"10px\",\n    paddingLeft: \"5px\",\n    paddingBottom: \"3px\",\n    paddingTop: \"3px\",\n    fontWeight: \"800\",\n    borderLeft: \"5px solid\",\n    borderColor: \"red\"\n  },\n\n\n  EditButton:\n  {\n    marginBottom : \"20px\",\n    backgroundColor : \"#2f942e\",\n    \"&:hover\": {\n      background: \"green\",\n      color: \"#fff\"\n    },\n    textDecoration : \"none !important\",\n    padding: \"10px\",\n    width: \"400px\"   \n  },\n\n  RestoreButton:\n  {\n    marginBottom : \"20px\",\n    backgroundColor : \"#fafafa\",\n    color: \"#555\",\n    \"&:hover\": {\n      background: \"#f1f1f1\",\n      color: \"#111\"\n    },\n    textDecoration : \"none !important\",\n    padding: \"10px\" ,\n    width: \"400px\"    \n  },\n\n\n  DeleteButton:\n  {\n    marginBottom : \"20px\",\n    backgroundColor : \"#d90015\",\n    \"&:hover\": {\n      background: \"#b80012\",\n      color: \"#fff\"\n    },\n\n    padding: \"10px\",\n    width: \"400px\"   \n    \n  },\n\n  SaveButton:\n  {\n    marginBottom : \"10px\",\n    padding: \"10px\",\n\n    backgroundColor : \"#d1175e\",\n    \"&:hover\": {\n      background: \"#bd0d50\",\n      color: \"#fff\",\n      \n    },\n    width: \"400px\"   \n\n  },\n\n  CancelButton:\n  {\n    marginBottom : \"20px\",\n    // padding: \"10px\"\n  },\n\n  TextBox: {\n    \n    padding : \"0px\"\n\n  },\n\n  checkIcon:{\n    color: \"green\",   \n  },\n\n  closeIcon:{\n    color: \"red\"\n  },\n\n  centeredLabel : {\n    display: \"flex\",\n    alignItems: \"center\"\n  }\n\n\n\n\n\n\n}));\n\n\n\n\nexport default function PersonsBox() {\n    const classes = useStyles();\n\n    const [state, setState] = React.useContext(GlobalState);\n\n    const [expanded, setExpanded] = React.useState('panel0');\n\n    const [editMode, setEditMode] = React.useState({edit : false, person : null});\n    const [deleteMode, setDeleteMode] = React.useState({delete : false, person : null});\n    const [restoreMode, setRestoreMode] = React.useState({restore : false, person : null});\n\n    const [saving, setSaving] =  React.useState(false);\n    const [deleting, setDeleting] =  React.useState(false);\n    const [restoring, setRestoring] =  React.useState(false);\n\n    const [validationError, setValidationError] = React.useState({});\n\n\n    const [bookingDate, setBookingDate] = React.useState('');\n    const [bookingTime, setBookingTime] = React.useState('');\n\n    const [fullname, setFullname] = React.useState('');\n    const [email, setEmail] = React.useState('');\n    const [tel, setTel] = React.useState('');\n    const [service, setService] = React.useState('');\n    const [notes, setNotes] = React.useState('');\n\n\n    const bookingDateChanged = (event) =>\n    {\n      setBookingDate(event.target.value);\n      setValidationError({...validationError, bookingDateError : false});\n    }\n\n    const bookingTimeChanged = (event) =>\n    {\n      setBookingTime(event.target.value);\n      setValidationError({...validationError, bookingTimeError : false});\n    }\n\n    const fullnameChanged = (event) =>\n    {\n      setFullname(event.target.value);\n    }\n\n    const emailChanged = (event) =>\n    {\n      setEmail(event.target.value);\n    }\n\n    const telChanged = (event) =>\n    {\n      setTel(event.target.value);\n    }\n\n    const serviceChanged = (event) =>\n    {\n      setService(event.target.value);\n    }\n\n    const notesChanged = (event) =>\n    {\n      setNotes(event.target.value);\n    }\n\n\n    const handleChange = (panel) => (event, isExpanded) => {\n      setExpanded(isExpanded ? panel : false);\n    };\n\n    const getStatusLabel = (status) => {\n      if (status === 'booked')\n      {\n        return (\n          <span className={classes.BookedLabel}> Booking Made </span>\n        );\n    \n      }else if (status === 'patient_attended')\n      {\n        return (\n          <span  className={classes.PatientAttendedLabel}> Patient Attended </span>\n        );\n    \n      }\n      else{\n        return 'Unknown';\n      }\n    }\n\n\n   const handleEditModeChanged = (edit, person) => {\n\n       if (edit)\n       {\n         setFullname(person.fullname);\n         setBookingDate(FormatDateFromString(person.bookingDate));\n         setBookingTime(person.bookingTime);\n         setEmail(person.email);\n         setTel(person.phone);\n         setService(person.service)\n         if (person.notes)\n         {\n          setNotes(person.notes);\n         }\n        \n         setEditMode({edit: edit, person: person});\n\n       }\n       else if (!edit && !person)\n       {\n         setEditMode({edit: edit, person: person});\n       }\n       else if (!edit && person)\n       {\n          const booking = {};\n          const bookingId = person._id;\n          booking.email = email;\n          booking.phone = tel;\n          booking.fullname = fullname;\n          booking.notes = notes;\n          booking.service = service;\n          booking.bookingDate = RevertFormatDateFromString(bookingDate);\n          booking.bookingTime = bookingTime;\n          booking.bookingRef = person.bookingRef;\n\n          if  (validateBooking(booking))\n          {\n            updateBooking({bookingId: bookingId, person: booking});\n          }\n       }\n   }\n\n   const validateDate = (str) =>\n   {\n     var error = false;\n     if (!str || str.length !== 10)\n     {\n       error = true;\n     }\n\n     if (str.charAt(4) !== '-'  || str.charAt(7) !== '-')\n     {\n       error = true;\n     }\n\n     try\n     {\n       \n       const result = /^\\d{4}-\\d{2}-\\d{2}$/.test(str);\n       if (!result)\n       {\n          error = true;\n       }\n\n       const year = parseInt(str.substr(0,4));\n       const month = parseInt(str.substr(5,2));\n       const day = parseInt(str.substr(8,2));\n\n       if (year < 1900)\n       {\n          error = true;\n       }\n\n       if (month < 1 || month > 12)\n       {\n         error = true;\n       }        \n\n       if (day > 31)\n       {\n         error = true;\n       }\n\n     }catch(err)\n     {\n       error = true;\n     }\n\n\n\n     return !error;\n   }\n\n   const validateTime =(str) =>\n   {\n     var error = false;\n\n     const result = /^\\d{2}:\\d{2} AM$|^\\d{2}:\\d{2} PM$/.test(str);\n     if (!result)\n     {\n        error = true;\n     }\n\n     try{\n       const hour = parseInt(str.substr(0,2));\n       const minute = parseInt(str.substr(3,2));\n\n       if (hour < 0 || hour > 12)\n       {\n         error = true;\n       }\n\n       if (minute < 0 || minute > 59)\n       {\n         error = true;\n       }\n\n     }catch(err)\n     {\n       error = true;\n     }\n\n     return !error;\n   }\n\n   const validateBooking = (booking) =>\n   {\n      var error = false;\n\n      if (!validateDate(booking.bookingDate))\n      {\n        error = true;\n        setValidationError({...validationError, bookingDateError : true});\n      }\n\n      if (!validateTime(booking.bookingTime))\n      {\n        error = true;\n        setValidationError({...validationError, bookingTimeError : true});\n      }\n     \n\n      return !error;\n   }\n\n   const updateBooking = (payload) =>\n   {\n       setSaving(true);\n       bookingService.updateBooking(payload).then( (res) => {\n        setSaving(false);\n        setEditMode({edit: false, person: null});\n        setState(state => ({...state, RefreshPersonInfo : !state.RefreshPersonInfo}));\n\n       }).catch ( (err) => {\n         setSaving(false);\n         setEditMode({edit: false, person: null});\n         console.log(err);\n       });\n   }\n\n   const deleteBooking = (id) =>\n   {\n       setDeleting(true);\n       bookingService.deleteBooking(id).then( (res) => {\n        setDeleting(false);\n        setDeleteMode({delete: false, person: null});\n        setState(state => ({...state, RefreshPersonInfo : !state.RefreshPersonInfo}));\n\n       }).catch ( (err) => {\n          setDeleting(false);\n          setDeleteMode({delete: false, person: null});\n         console.log(err);\n       });\n   }\n\n   const restoreBooking = (id) =>\n   {\n       setRestoring(true);\n       bookingService.unDeleteBooking(id).then( (res) => {\n        setRestoring(false);\n        setRestoreMode({restore: false, person: null});\n        setState(state => ({...state, RefreshPersonInfo : !state.RefreshPersonInfo}));\n\n       }).catch ( (err) => {\n        setRestoring(false);\n        setRestoreMode({restore: false, person: null});\n         console.log(err);\n       });\n   }\n\n   const changeBackToBookingMade = (event, id) =>\n   {\n     setSaving(true);\n     bookingService.changeBackToBookingMade(id).then(res => {\n       setSaving(false);\n       setState(state => ({...state, RefreshPersonInfo : !state.RefreshPersonInfo}));\n     }).catch(err => {\n       console.log(err);\n       setSaving(false);\n     })\n   }\n\n\n\n   const handleDeleteModeChanged = (del, person) => {\n\n    if (del)\n    {\n      setDeleteMode({delete: del, person: person});\n    }\n    else if (!del && !person)\n    {\n      setDeleteMode({delete: del, person: person});\n    }\n    else if (!del && person)\n    {\n        deleteBooking(person._id);\n    }\n  }\n\n  const handleRestoreModeChanged = (restore, person) => {\n\n    if (restore)\n    {\n      setRestoreMode({restore: restore, person: person});\n    }\n    else if (!restore && !person)\n    {\n      setRestoreMode({restore: restore, person: person});\n    }\n    else if (!restore && person)\n    {\n        restoreBooking(person._id);\n    }\n  }\n\n  return (\n    <React.Fragment>\n          \n      <Grid container direction=\"column\" spacing={1} justify=\"flex-start\" alignItems=\"center\">\n          <div className={classes.title}> Following Records Found :</div>\n\n          {state.foundRecords.map((person,index) => (\n   \n                <Grid item xs={12} md={12} key={`panel${index}`}>\n                <div className={classes.root}>\n                    <Accordion className={person.deleted ? classes.AccordionDeleted : classes.Accordion} expanded={expanded === `panel${index}`} onChange={handleChange(`panel${index}`)}>\n                    <AccordionSummary className={person.deleted ? classes.lineThrough : ''}\n                        expandIcon={<ExpandMoreIcon />}\n                        aria-controls=\"panel1bh-content\"\n                        id={`panel${index}bh-header`}\n                    >\n                      {person.deleted && (\n                          <Tooltip  title=\"This record has been deleted.\">\n                            <DeleteIcon  style={{padding: 0, margin: 0,  color: \"#fff\", fontSize: 25 }}/>\n                        </Tooltip>\n                      )}\n\n                        <Typography className={classes.heading}> {`#${index+1}`} </Typography>\n                        <Typography className={classes.secondaryHeading}>\n                        {`${person.fullname}`}\n                        </Typography>\n                    </AccordionSummary>\n\n                    <AccordionDetails className={classes.infoDetails}>\n                        \n\n\n                        <ul className={classes.ul}>\n\n                        {/* Restore Functionality ******************************************* */}  \n                        <li hidden={!(restoreMode.restore && restoreMode.person._id  === person._id)}>\n                              <div style={{fontWeight: \"500\", paddingBottom: \"5px\", paddingLeft: \"5px\", fontSize:\"16px\" , color:\"#fff\"}}>\n                                Are you sure you want to restore this record?\n                              </div>\n                            </li>\n\n                            <li hidden={!person.deleted || (restoreMode.restore && restoreMode.person._id === person._id)}>\n                                 <Button\n\n                                    type=\"button\"\n                                    fullWidth\n                                    variant=\"contained\"\n                                    color=\"primary\"\n                                    onClick = {() => {handleRestoreModeChanged(true, person)}}\n                                    className={classes.RestoreButton}\n                                 >\n                                   Restore This Record\n                                </Button>\n                            </li>\n\n                            <li hidden={!(restoreMode.restore && restoreMode.person._id  === person._id)}>\n                                 <Button\n                                    type=\"button\"\n                                    fullWidth\n                                    variant=\"contained\"\n                                    color=\"primary\"\n                                    disabled = {restoring}\n                                    onClick = {() => {handleRestoreModeChanged(false, person)}}\n                                    className={classes.SaveButton}\n                                 >\n                                    YES, Restore this!\n                                </Button>\n                            </li>\n\n                            <li hidden={!(restoreMode.restore && restoreMode.person._id  === person._id)}>\n                                 <Button\n                                    type=\"button\"\n                                    fullWidth\n                                    variant=\"contained\"\n                                    color=\"default\"\n                                    disabled = {restoring}\n                                    onClick = {() => {handleRestoreModeChanged(false, null)}}\n                                    className={classes.CancelButton}\n                                 >\n                                    Cancel\n                                </Button>\n                            </li>\n\n                           {/*  ******************************************************************* */}\n\n                              {/* Edit Functionality ******************************************* */}\n\n                            <li hidden={person.deleted || deleteMode.delete || (editMode.edit && editMode.person._id === person._id)}>\n                                 <Button\n                                    type=\"button\"\n                                    fullWidth\n                                    variant=\"contained\"\n                                    color=\"primary\"\n                                    onClick = {() => {handleEditModeChanged(true, person)}}\n                                    className={classes.EditButton}\n                                 >\n                                    Edit Booking Info\n                                </Button>\n                            </li>\n\n                            <li hidden={!(editMode.edit && editMode.person._id  === person._id)}>\n                                 <Button\n                                    type=\"button\"\n                                    fullWidth\n                                    variant=\"contained\"\n                                    color=\"primary\"\n                                    disabled = {saving}\n                                    onClick = {() => {handleEditModeChanged(false, person)}}\n                                    className={classes.SaveButton}\n                                 >\n                                    Save Changes\n                                </Button>\n                            </li>\n\n                            <li hidden={!(editMode.edit && editMode.person._id === person._id)}>\n                                 <Button\n                                    type=\"button\"\n                                    fullWidth\n                                    variant=\"contained\"\n                                    color=\"default\"\n                                    disabled = {saving}\n                                    onClick = {() => {handleEditModeChanged(false, null)}}\n                                    className={classes.CancelButton}\n                                 >\n                                    Cancel\n                                </Button>\n                            </li>\n                            \n                            {/* ****************************************************************************************** */}\n\n\n                            {/* Delete Functionality ******************************************* */}\n\n                            <li hidden={!(deleteMode.delete && deleteMode.person._id  === person._id)}>\n                              <div style={{fontWeight: \"600\",  paddingBottom: \"5px\", paddingLeft: \"5px\", fontSize:\"16px\"}}>\n                                Are you sure you want to delete this record?\n                              </div>\n                            </li>\n\n                            <li hidden={person.deleted ||  editMode.edit || (deleteMode.delete && deleteMode.person._id === person._id)}>\n                                 <Button\n                                    type=\"button\"\n                                    fullWidth\n                                    variant=\"contained\"\n                                    color=\"primary\"\n                                    onClick = {() => {handleDeleteModeChanged(true, person)}}\n                                    className={classes.DeleteButton}\n                                 >\n                                   Delete This Record\n                                </Button>\n                            </li>\n\n                            <li hidden={!(deleteMode.delete && deleteMode.person._id  === person._id)}>\n                                 <Button\n                                    type=\"button\"\n                                    fullWidth\n                                    variant=\"contained\"\n                                    color=\"primary\"\n                                    disabled = {deleting}\n                                    onClick = {() => {handleDeleteModeChanged(false, person)}}\n                                    className={classes.SaveButton}\n                                 >\n                                    YES, Delete this!\n                                </Button>\n                            </li>\n\n                            <li hidden={!(deleteMode.delete && deleteMode.person._id === person._id)}>\n                                 <Button\n                                    type=\"button\"\n                                    fullWidth\n                                    variant=\"contained\"\n                                    color=\"default\"\n                                    disabled = {deleting}\n                                    onClick = {() => {handleDeleteModeChanged(false, null)}}\n                                    className={classes.CancelButton}\n                                 >\n                                    Cancel\n                                </Button>\n                            </li>\n                                 \n                            {/* ****************************************************************************************** */}\n\n                            <li className={classes.li}>\n                                <span className={classes.infoTitle}>BOOKED DATE</span> \n                            \n\n                                <span hidden={(editMode.edit && editMode.person._id  === person._id)} className={classes.infoData}>\n                                   {FormatDateFromString(person.bookingDate) }\n                                  </span>  \n                                        <span hidden={!(editMode.edit && editMode.person._id  === person._id)} className={classes.infoData}>\n                                          <TextField \n                                                      fullWidth\n                                                      error={validationError.bookingDateError}\n                                                      className={classes.TextBox} \n                                                      value={bookingDate}\n                                                      onChange = {bookingDateChanged}\n                                                      inputProps= {{\n                                                          style:{\n                                                            padding: 0\n                                                          }\n                                                        }\n                                                      }\n                                                      > \n                                          </TextField> \n                                        </span> \n\n\n                            </li>\n\n                            <li className={classes.li}>\n                                <span className={classes.infoTitle}>BOOKED TIME</span> \n                                <span hidden={(editMode.edit && editMode.person._id  === person._id)} className={classes.infoData}>{person.bookingTime}</span>  \n                                        <span hidden={!(editMode.edit && editMode.person._id  === person._id)} className={classes.infoData}>\n                                          <TextField \n                                                      fullWidth\n                                                      error={validationError.bookingTimeError}\n                                                      className={classes.TextBox} \n                                                      value={bookingTime}\n                                                      onChange = {bookingTimeChanged}\n                                                      inputProps= {{\n                                                          style:{\n                                                            padding: 0\n                                                          }\n                                                        }\n                                                      }\n                                                      > \n                                          </TextField> \n                                        </span> \n\n\n                            </li>\n\n                            <li className={classes.li}>\n                            <span className={classes.infoTitle}>FULLNAME</span> \n                                        <span hidden={(editMode.edit && editMode.person._id  === person._id)} className={classes.infoData}>{person.fullname}</span>  \n                                        <span hidden={!(editMode.edit && editMode.person._id  === person._id)} className={classes.infoData}>\n                                        <TextField \n                                                      fullWidth\n                                                      className={classes.TextBox} \n                                                      value={fullname}\n                                                      onChange = {fullnameChanged}\n                                                      inputProps= {{\n                                                          style:{\n                                                            padding: 0\n                                                          }\n                                                        }\n                                                      }\n                                                      > \n                                          </TextField> \n                                        </span> \n                            </li>\n                            <li className={classes.li}>\n                                <span className={classes.infoTitle}>EMAIL</span> \n                                       <span hidden={(editMode.edit && editMode.person._id  === person._id)} className={classes.infoData}>{person.email}</span>  \n                                        <span hidden={!(editMode.edit && editMode.person._id  === person._id)} className={classes.infoData}>\n                                        <TextField \n                                                      fullWidth\n                                                      className={classes.TextBox} \n                                                      value={email}\n                                                      onChange = {emailChanged}\n                                                      inputProps= {{\n                                                          style:{\n                                                            padding: 0\n                                                          }\n                                                        }\n                                                      }\n                                                      > \n                                          </TextField> \n                                        </span>   \n                            </li>\n                            <li className={classes.li}>\n                                <span className={classes.infoTitle}>TEL</span>\n                                 <span hidden={(editMode.edit && editMode.person._id  === person._id)} className={classes.infoData}>{person.phone}</span>  \n                                        <span hidden={!(editMode.edit && editMode.person._id  === person._id)} className={classes.infoData}>\n                                        <TextField \n                                                      fullWidth\n                                                      className={classes.TextBox} \n                                                      value={tel}\n                                                      onChange = {telChanged}\n                                                      inputProps= {{\n                                                          style:{\n                                                            padding: 0\n                                                          }\n                                                        }\n                                                      }\n                                                      > \n                                          </TextField> \n                                        </span>  \n                            </li>\n                            <li className={classes.li}>\n                                <span className={classes.infoTitle}>SERVICE</span>\n                                 <span hidden={(editMode.edit && editMode.person._id  === person._id)} className={classes.infoData}>{person.service}</span>  \n                                        <span hidden={!(editMode.edit && editMode.person._id  === person._id)} className={classes.infoData}>\n                                        <TextField \n                                                      fullWidth\n                                                      className={classes.TextBox} \n                                                      value={service}\n                                                      onChange = {serviceChanged}\n                                                      inputProps= {{\n                                                          style:{\n                                                            padding: 0\n                                                          }\n                                                        }\n                                                      }\n                                                      > \n                                          </TextField> \n                                        </span>  \n                            </li>\n                            <li className={classes.li}>\n                                <span className={classes.infoTitle}>NOTES</span>\n                                 <span hidden={(editMode.edit && editMode.person._id  === person._id)} className={classes.infoData}>{person.notes}</span>  \n                                        <span hidden={!(editMode.edit && editMode.person._id  === person._id)} className={classes.infoData}>\n                                        <TextField \n                                                      fullWidth\n                                                      className={classes.TextBox} \n                                                      value={notes}\n                                                      onChange = {notesChanged}\n                                                      inputProps= {{\n                                                          style:{\n                                                            padding: 0\n                                                          }\n                                                        }\n                                                      }\n                                                      > \n                                          </TextField> \n                                        </span>  \n                            </li>\n                            <li className={classes.li}>\n                                <span className={classes.infoTitle}>STATUS</span> \n                                {getStatusLabel(person.status)} \n                            </li>\n      \n\n                        </ul>\n\n                    </AccordionDetails>\n                    </Accordion>\n                </div>\n            </Grid> \n          ))}\n    </Grid>\n    </React.Fragment>\n  );\n}\n","import React, { useEffect } from 'react';\nimport Button from '@material-ui/core/Button';\nimport CssBaseline from '@material-ui/core/CssBaseline';\nimport TextField from '@material-ui/core/TextField';\nimport Typography from '@material-ui/core/Typography';\nimport { makeStyles } from '@material-ui/core/styles';\nimport GlobalState from './../GlobalState';\nimport Alert from '@material-ui/lab/Alert';\nimport PropTypes from 'prop-types';\nimport MaskedInput from 'react-text-mask';\nimport { FormControl, Grid, Input, InputLabel } from '@material-ui/core';\nimport BookService from './services/BookService';\nimport PersonsBox from './PersonsBox';\nimport { width } from '@material-ui/system';\n\n\nconst isBoolean = (param) => typeof(param) === \"boolean\"\n\nconst useFocus = (initialFocus = false, id = \"\") => {\n    const [focus, setFocus] = React.useState(initialFocus)\n    const setFocusWithTrueDefault = (param) => setFocus(isBoolean(param)? param : true)\n    return ([\n        setFocusWithTrueDefault, {\n            autoFocus: focus,\n            key: `${id}${focus}`,\n            onFocus: () => setFocus(true),\n            onBlur: () => setFocus(false),\n        },\n    ])\n}\n\n\nfunction TextMaskCustom(props) {\n    const { inputRef, ...other } = props;\n  \n    return (\n      <MaskedInput\n        {...other}\n        ref={(ref) => {\n          inputRef(ref ? ref.inputElement : null);\n        }}\n        mask={[/\\d/, /\\d/, /\\d/, '-', /\\d/, /\\d/, /\\d/, '-', /\\d/, /\\d/, /\\d/]}\n        // placeholderChar={'\\u2000'}\n        showMask\n      />\n    );\n  }\n  \n  TextMaskCustom.propTypes = {\n    inputRef: PropTypes.func.isRequired,\n  };\n\n\n\nconst useStyles = makeStyles((theme) => ({\n\n    root: {\n        width: '100%',\n        '& > * + *': {\n          marginTop: theme.spacing(2),\n        },\n        marginTop: \"20px\"\n      },  \n\n    paper: {\n        marginTop: theme.spacing(8),\n        display: 'flex',\n        flexDirection: 'column',\n        alignItems: 'center',\n    },\n\n    avatar: {\n        margin: theme.spacing(1),\n        backgroundColor: theme.palette.secondary.main,\n    },\n\n    form: {\n        width: '100%', // Fix IE 11 issue.\n        marginTop: theme.spacing(1),\n    },\n\n    Find: {\n        width: \"80px\"\n    },\n\n    Clear:{\n        marginRight: \"20px\"\n    },\n\n    title:{\n        marginTop : \"20px\"\n    },\n\n    TextBox:{\n        marginTop: \"30px\",\n        \"& > *\" :\n        {\n            textAlign: \"center\"\n        },\n  \n    },\n\n    TextField:{\n\n    },\n\n    NoRecordsFound:{\n        marginTop: \"20px\",\n        color: \"red\",\n        fontWeight: \"600\",\n        fontSize: \"14px\",\n    },\n\n    PersonsBox:{\n        marginTop : \"20px\",\n        marginBottom: \"50px\",\n    }\n\n}));\n\nexport default function FindByRef() {\n  const classes = useStyles();\n  const [state, setState] = React.useContext(GlobalState);\n  \n  const [setFocus, focusProps] = useFocus(true);\n\n//   useEffect( () =>\n//   {\n//      findRecords();\n//   }, [state.findRecords]);\n\n useEffect ( () => {\n    setState(state => ({...state, foundRecords : []}));\n }, [])\n\n  useEffect( () => {\n    BookService.getBookingsByRef(state.ref).then( (res)=>\n    {\n        if (res.data.length > 0)\n        {\n            setState(state => ({...state, foundRecords : res.data}));\n        }\n    });\n    }, [state.RefreshPersonInfo]);\n\n    const handleChange = (event) =>\n    {\n        setState(state => ({...state, ref : event.target.value}));\n        setState(state => ({...state, refError : false})); \n    }\n\n    const clearField = () =>\n    {\n        setState(state => ({...state, refError : false})); \n        setState(state => ({...state, ref : '___-___-___'}));\n        setState(state => ({...state, foundRecords : []}));\n        setFocus();\n    }\n\n    const findRecords = () =>\n    {\n        if (!state.ref || state.ref.indexOf('_') >= 0)\n        {\n            setState(state => ({...state, refError : true}));  \n            return;\n        }\n\n        setState(state => ({...state, submiting : true}));\n        setState(state => ({...state, foundRecords : []}));\n\n        BookService.getBookingsByRef(state.ref).then( (res)=>\n        {\n            setState(state => ({...state, submiting : false}));\n            if (res.data.length > 0)\n            {\n                setState(state => ({...state, foundRecords : res.data}));\n            }\n            else\n            {\n                setState(state => ({...state, foundRecords : null}));\n            }\n            \n            console.log(res.data);\n\n        }).catch( (err) =>\n        {\n            console.log(err);\n            setState(state => ({...state, submiting : false}));\n        });\n    }\n\n  return (\n    <React.Fragment>\n        <CssBaseline />\n        <div className={classes.title}>\n            <Typography component=\"h6\" variant=\"h6\" align=\"center\">\n                Find Booking Appoinments\n            </Typography>  \n        </div> \n\n        <Grid container direction=\"column\" spacing={1} justify=\"flex-start\"  alignItems=\"center\">\n\n        <Grid item xs={12} md={12}>\n            <FormControl className={classes.TextBox}>\n                <TextField\n                    {...focusProps}\n                    autoFocus \n                    pattern=\"[0-9]*\"\n                    error = {state.refError ? true : false} \n                    value = {state.ref}\n                    className = {classes.TextField}\n                    width = \"50px\"\n                    onChange={handleChange}\n                    label=\"Reference No.\"\n                    helperText=\"Enter Your 9-digits Reference No.\"\n                    name=\"refNo\"\n                    id=\"refNo\"\n                    variant=\"outlined\"\n                    \n                    size=\"medium\"\n                    margin=\"normal\"\n                    fullWidth = {true}\n                    InputProps={{\n                        inputComponent: TextMaskCustom,\n                        style: { textAlign: 'center', fontSize:\"24px\", width: \"210px\", paddingLeft: \"20px\" }\n                    }}\n\n                    onKeyPress= {event => {\n                        if (event.key === 'Enter') {\n                            findRecords();\n                        }\n                      }}\n                />         \n            </FormControl>\n        </Grid>\n\n        <Grid item xs={12} md={12}>\n               \n                <Button\n                    disabled = {state.submiting}\n                    color=\"default\"\n                    onClick = {clearField}\n                    onTouchTap = {clearField}\n                    className={classes.Clear}\n                >\n                    Clear \n                </Button>  \n            \n                <Button\n                    type=\"button\"\n                    disabled = {state.submiting}\n                    variant=\"contained\"\n                    color=\"primary\"\n                    onClick = {findRecords}\n                    onTouchTap = {findRecords}\n                    className={classes.Find}\n                >\n                    Find \n                </Button>  \n        </Grid>\n\n        <Grid item xs={12} md={12}>\n\n                    \n\n            {state.foundRecords && state.foundRecords.length > 0 && (\n                <React.Fragment>\n\n                    <div className={classes.PersonsBox}>\n                          <PersonsBox/>\n                    </div>\n                    \n\n\n                </React.Fragment>\n            )}   \n\n            {!state.foundRecords && (\n                <React.Fragment>\n\n                <div className={classes.root}>\n                    <Alert severity=\"error\"> <strong>No Records Found !</strong> <br/> Please check you reference number again.</Alert>\n                </div> \n                   \n                </React.Fragment>\n            )}\n\n        </Grid>\n        \n        \n        </Grid>\n        \n    </React.Fragment>\n   \n  );\n}","import React, { useEffect, useState } from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport PropTypes from 'prop-types';\nimport dateformat from 'dateformat';\nimport BookService from '../services/BookService';\n\nimport CircularProgress from '@material-ui/core/CircularProgress';\n\nimport GlobalState from '../../GlobalState';\n\n\nconst useStyles = makeStyles((theme) => ({\n\n    Container: {\n        width: \"100%\",\n        paddingTop: \"70%\",\n        position: \"relative\",\n        backgroundColor: \"#fff\",\n        cursor: \"pointer\"\n    },\n\n    ContainerPast: {\n        width: \"100%\",\n        paddingTop: \"70%\",\n        position: \"relative\",\n        backgroundColor: \"#fafafa\"\n    },\n    \n    DayLabel: {\n        position: \"absolute\",\n        top: \"5px\",\n        right: \"5px\",\n        color: \"#555\",\n        fontSize: \"1rem\"\n    },\n\n    DayLabelToday: {\n        position: \"absolute\",\n        top: \"5px\",\n        right: \"5px\",\n        backgroundColor: \"#1a73e8\",\n        color: \"#fff\",\n        fontSize: \"1rem\",\n        borderRadius: \"50%\",\n        padding: \"5px\",\n        lineHight: \"35px\",\n        minWidth: \"35px\"\n    },\n\n    DayLabelDisabled: {\n        position: \"absolute\",\n        top: \"5px\",\n        right: \"5px\",\n        color: \"#ddd\",\n        fontSize: \"1rem\"\n    },\n\n    BookingCountLabel: {\n        position: \"absolute\",\n        top: \"35%\",\n        left: \"40%\",\n        color: \"#3f51b5\",\n        backgroundColor: \"#ebedf7\",\n        fontSize: \"16px\",\n        fontWeight: \"600\",\n        padding: \"10px\",\n        borderRadius: \"50%\",\n        minWidth: \"40px\",\n        lineHight: \"40px\",\n        cursor: \"pointer\",\n        textAlign: \"center\"\n    },\n\n    BookingCountLabelBusy: {\n        position: \"absolute\",\n        top: \"35%\",\n        left: \"40%\",\n        color: \"#b00000\",\n        backgroundColor: \"#fce6e6\",\n        fontSize: \"16px\",\n        fontWeight: \"600\",\n        padding: \"10px\",\n        borderRadius: \"50%\",\n        minWidth: \"40px\",\n        cursor: \"pointer\",\n        textAlign: \"center\"\n    },\n\n    LoadingProgress: {\n        position: \"absolute\",\n        top: \"40%\",\n        left: \"40%\",\n      },\n\n      BookingCountGauge: {\n        position: \"absolute\",\n        bottom: \"5%\",\n        left: \"8%\",\n        width : \"8%\",\n        height: \"85%\"\n    },\n\n  }));\n\nconst MAX_BOOKING_COUNT = 10;  \n\nconst MonthViewCell = ({key, cellIndex, month, daysInMonth, dayClicked}) => {\n    const classes = useStyles();\n\n    const [state, setState] = React.useContext(GlobalState);\n\n    const [dateStr, setDateStr] = React.useState('');\n\n    const [cellDate, setCellDate] = React.useState(new Date());\n\n    const [bookingsCount, setBookingsCount] = React.useState(-1);\n\n    const [disableDay, setDisableDay] = React.useState(false);\n\n    const [isPast, setIsPast] = React.useState(false);\n\n    useEffect( () => {\n\n        if (cellIndex <= daysInMonth.length)\n        {\n            const date = daysInMonth[cellIndex - 1];\n            const dateStr = dateformat(date, 'yyyy-mm-dd');\n            setDateStr(dateStr);\n            setCellDate(date);\n            setDisableDay(date.getMonth() !== month - 1);\n            const todayStr = dateformat(new Date(), 'yyyy-mm-dd');\n            setIsPast(dateStr < todayStr);\n        }\n        else\n        {\n            const day = cellIndex - daysInMonth.length;\n            const date = new Date((daysInMonth[daysInMonth.length - 1].getTime() + ( day * 86400000)));\n            const dateStr = dateformat(date, 'yyyy-mm-dd');\n            setDateStr(dateStr);\n            setCellDate(date);\n            setDisableDay(true);\n            const todayStr = dateformat(new Date(), 'yyyy-mm-dd');\n            setIsPast(dateStr < todayStr);\n        }\n\n    }, [cellIndex, month, daysInMonth]);\n\n    useEffect ( () => {\n\n        const fecthData = async () =>\n        {\n            if (!dateStr || dateStr.length <= 0)\n            {\n                return;\n            }\n        \n            if (disableDay)\n            {\n                setBookingsCount(-2);\n                return;\n            }\n\n            setBookingsCount(-1);\n\n            var res = state.AdminCalendarCache?.find(record => record.method === 'getBookingsCountByDateStr' && record.query === dateStr)?.res;\n\n            if (!res)\n            {\n                res = await BookService.getAllBookingsCountByDateStr(dateStr);\n                setState(state => ({...state, AdminCalendarCache : [...state.AdminCalendarCache, {method: 'getBookingsCountByDateStr' , query : dateStr, res: res}]}));\n            }\n        \n            if (res.data.count >= 0)\n            {\n                setBookingsCount(res.data.count);\n            }\n\n        }\n\n      fecthData();\n\n    }, [dateStr]);\n\n    const getDayLabel = (_cellIndex , _month , _daysInMonth) =>\n    {\n        var date = null;\n        var disabled = false;\n        var day = -1;\n\n    \n\n        if (_cellIndex <= _daysInMonth.length)\n        {\n            date = _daysInMonth[_cellIndex - 1];\n            day = date.getDate();\n            if (date.getMonth() !== _month - 1)\n            {\n                disabled = true;\n            }\n        }\n        else\n        {\n            const _day = _cellIndex - _daysInMonth.length;\n            const date = new Date((_daysInMonth[_daysInMonth.length - 1].getTime() + ( _day * 86400000)));\n            day = date.getDate();\n            disabled = true;\n        }\n\n        const isToday = dateformat(new Date(),'yyyy-mm-dd') === dateformat(date, 'yyyy-mm-dd');\n\n        return (\n            <span className={(disabled) ? classes.DayLabelDisabled : isToday ? classes.DayLabelToday : classes.DayLabel}>\n                 {day > 0 ? `${day}` : ''}\n             </span>\n        );\n    }\n\n    const getBookingsCountLabel = (_bookingsCount) =>\n    {\n        if (_bookingsCount === -1)\n        {\n            return (\n                <div className={classes.LoadingProgress}>\n                      <CircularProgress disableShrink  />\n                </div>\n            );  \n        }\n        else if (_bookingsCount > 0 )\n        {\n            if (_bookingsCount >= MAX_BOOKING_COUNT / 2)\n            {\n                return (\n                    <div onClick={(event => dayClicked(event,cellDate))} className={classes.BookingCountLabelBusy}>\n                        {_bookingsCount < 10 ?  ` ${_bookingsCount}` : `${_bookingsCount}`}\n                    </div>\n                );\n            }\n            else\n            {\n                return (\n                    <div onClick={(event => dayClicked(event,cellDate))} className={classes.BookingCountLabel}>\n                          {_bookingsCount < 10 ?  ` ${_bookingsCount}` : `${_bookingsCount}`}\n                    </div>\n                );\n            }\n        }\n    }\n\n    const getBookingsCountGauge = (_bookingsCount) =>\n    {\n        if (_bookingsCount > 0)\n        {\n            let percent = (_bookingsCount / MAX_BOOKING_COUNT) * 100;\n            if (percent > 100)\n            {\n                percent = 100;\n            }\n\n            percent = 100 - percent;\n\n            return (\n\n                <div className={classes.BookingCountGauge}>\n                  <div style={{padding:\"0\", margin:\"0\", width:\"100%\", height:\"100%\", backgroundColor: \"#3f51b5\"}} >\n                        <div  style={{padding:\"0\", margin:\"0\", width:\"100%\", height:`${percent}%`, backgroundColor: \"#fafafa\"}} >\n\n                        </div>\n                  </div>\n                </div>\n            );\n        }\n    }\n\n    return (\n        <React.Fragment>\n\n            <div className={classes.Container}  onClick={(event => dayClicked(event,cellDate))} >\n\n              {getDayLabel(cellIndex, month, daysInMonth)}\n\n              {getBookingsCountLabel(bookingsCount)}\n\n              {getBookingsCountGauge(bookingsCount)}\n\n            </div>\n\n        </React.Fragment>\n\n\n    );\n}\n\nMonthViewCell.propTypes = {\n    key: PropTypes.string.isRequired,\n    cellIndex: PropTypes.number.isRequired,\n    month: PropTypes.number.isRequired,\n    daysInMonth: PropTypes.arrayOf(PropTypes.date),\n    dayClicked: PropTypes.func\n  };\n\n \n  \nexport default MonthViewCell;","import calendar from 'node-calendar';\n\n\nexport default class CalendarUtil {\n\n    static getMonthRange = (month , year) =>\n    {\n        return new calendar.Calendar(calendar.SUNDAY).itermonthdates(year, month);\n    } \n\n} ","import React, { useEffect, useState } from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport PropTypes from 'prop-types';\nimport MonthViewCell from './MonthViewCell';\nimport CalendarUtil from './calendar-util';\n\nconst dayLables = ['Sun', 'Mon', 'Tue', 'Wed' , 'Thu', 'Fri', 'Sat'];\nconst days = [1,2,3,4,5,6,7]; \nconst rows = [1,2,3,4,5,6];\n\nconst useStyles = makeStyles((theme) => ({\n\n    table: {\n        width: \"100%\",\n        border: \"1px solid #ddd\",\n        borderCollapse: \"collapse\",\n    },\n\n    th: {\n        border: \"1px solid #ddd\",\n        borderCollapse: \"collapse\",\n        verticalAlign: \"middle\",\n        fontcolor: \"#555\",\n        fontWeight: \"400\",\n        fontSize: \"15px\",\n        paddingTop: \"5px\",\n        paddingBottom: \"5px\",\n        width: \"14%\"\n    },\n\n    td: {\n        border: \"1px solid #ddd\",\n        borderCollapse: \"collapse\",\n        verticalAlign: \"middle\",\n    }\n\n  }));\n\nconst MonthView = ({month, year, dayClicked}) => {\n    const classes = useStyles();\n\n    const daysInMonth = CalendarUtil.getMonthRange(month,year);\n\n    return (\n        <React.Fragment>\n\n            <table className={classes.table}>\n                <thead>\n                    <tr>\n                        {dayLables.map(label => (\n                            <th key={`th-${label}`} className={classes.th}>\n                                {label}\n                            </th>\n                        ))}\n                    </tr>\n                </thead>\n                <tbody>\n                    {rows.map(row => (\n                        <tr>\n                            {days.map(day => (\n                                <td className={classes.td}>\n                                    <MonthViewCell \n                                        key={`${month}${year}${(row-1) * days.length + day}`} \n                                        cellIndex={(row-1) * days.length + day} \n                                        month={month} \n                                        daysInMonth={daysInMonth}\n                                        dayClicked = {dayClicked}\n                                        />\n                                </td>\n                            ))}\n                        </tr>\n                    ))}            \n                </tbody>\n\n            </table>\n\n      \n        </React.Fragment>\n\n\n    );\n}\n\nMonthView.propTypes = {\n    month: PropTypes.number.isRequired,\n    year: PropTypes.number.isRequired,\n    dayClicked: PropTypes.func\n  };\n\n\nexport default MonthView;","import React, { useEffect, useState } from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport PropTypes from 'prop-types';\nimport dateformat from 'dateformat';\nimport BookService from '../services/BookService';\n\nimport CircularProgress from '@material-ui/core/CircularProgress';\nimport GlobalState from '../../GlobalState';\n\nimport axios from 'axios'\n\nconst useStyles = makeStyles((theme) => ({\n\n    Container: {\n        width: \"100%\",\n        paddingTop: \"40%\",\n        position: \"relative\",\n        backgroundColor: \"#fff\",\n        cursor: \"pointer\"\n    },\n\n    ContainerPast: {\n        width: \"100%\",\n        paddingTop: \"40%\",\n        position: \"relative\",\n        backgroundColor: \"#fafafa\",\n        cursor: \"pointer\"\n    },\n    \n    DayLabel: {\n        position: \"absolute\",\n        top: \"5px\",\n        right: \"5px\",\n        color: \"#555\",\n        fontSize: \"1rem\"\n    },\n\n    DayLabelDisabled: {\n        position: \"absolute\",\n        top: \"5px\",\n        right: \"5px\",\n        color: \"#ddd\",\n        fontSize: \"1rem\"\n    },\n\n    BookingCountLabel: {\n        position: \"absolute\",\n        top: \"25%\",\n        left: \"38%\",\n        color: \"#3f51b5\",\n        backgroundColor: \"#ebedf7\",\n        fontSize: \"14px\",\n        fontWeight: \"600\",\n        padding: \"5px\",\n        borderRadius: \"50%\",\n        minWidth: \"30px\",\n        cursor : \"pointer\",\n        textAlign: \"center\"\n    },\n\n    BookingCountLabelBusy: {\n        position: \"absolute\",\n        top: \"25%\",\n        left: \"38%\",\n        color: \"#b00000\",\n        backgroundColor: \"#fce6e6\",\n        fontSize: \"14px\",\n        fontWeight: \"600\",\n        padding: \"5px\",\n        borderRadius: \"50%\",\n        minWidth: \"30px\",\n        cursor : \"pointer\",\n        textAlign: \"center\"\n    },\n\n    LoadingProgress: {\n        position: \"absolute\",\n        top: \"40%\",\n        left: \"40%\",\n      },\n\n      BookingCountGauge: {\n        position: \"absolute\",\n        bottom: \"5%\",\n        left: \"8%\",\n        width : \"85%\",\n        height: \"8%\"\n    },\n\n  }));\n\nconst MAX_BOOKING_COUNT = 1;  \n\nconst WeekViewCell = ({key, date, time, dayClicked}) => {\n    const classes = useStyles();\n\n    const [state, setState] = React.useContext(GlobalState);\n    const [bookingsCount, setBookingsCount] = React.useState(-1);\n    const [isPast, setIsPast] = React.useState(false);\n\n    const [cellDate, setCellDate] = React.useState(new Date());\n\n    useEffect( () => {\n        const todayStr = dateformat(new Date(), 'yyyy-mm-dd');\n        setIsPast(date < todayStr);\n\n        setCellDate(new Date(date));\n\n    }, [date]);\n\n    useEffect ( () => {\n      \n      \n      \n        if (!date || date.length <= 0 || !time || time.length <= 0)\n        {\n            return;\n        }\n        \n        // if (isPast)\n        // {\n        //     setBookingsCount(-2);\n        //     return;\n        // }\n\n        setBookingsCount(-1);\n\n       \n\n        var res = state.AdminCalendarCache?.find(record => record.method === 'getBookingsCountByDateStrandTime' && record.query === `${date}${time}`)?.res;\n        if (res)\n        {\n            if (res.data.count >= 0)\n            {\n                setBookingsCount(res.data.count);\n            }  \n            return;\n        }\n\n        let source = axios.CancelToken.source();\n        BookService.getAllBookingsCountByDateStrandTime(date, time, source).then( res => {\n            if (res.data.count >= 0)\n            {\n                setBookingsCount(res.data.count);\n                setState(state => ({...state, AdminCalendarCache : [...state.AdminCalendarCache, {method: 'getBookingsCountByDateStrandTime' , query : `${date}${time}`, res: res}]}));\n            }  \n        }).catch( err => \n            {\n                //do nothing\n            });\n     \n        return () => {\n           if (source)\n              source.cancel('Cancelling in cleanup');\n        }\n     \n    }, [date, time]);\n\n\n    const getBookingsCountLabel = (_bookingsCount) =>\n    {\n        if (_bookingsCount === -1)\n        {\n            return (\n                <div className={classes.LoadingProgress}>\n                      <CircularProgress disableShrink  />\n                </div>\n            );  \n        }\n        else if (_bookingsCount > 0)\n        {\n            if (_bookingsCount >= MAX_BOOKING_COUNT)\n            {\n                return (\n                    <div onClick={(event => dayClicked(event,cellDate))} className={classes.BookingCountLabelBusy}>\n                          {_bookingsCount < 10 ? ` ${_bookingsCount}` : `${_bookingsCount}` }\n                    </div>\n                );\n            }\n            else\n            {\n                return (\n                    <div onClick={(event => dayClicked(event,cellDate))} className={classes.BookingCountLabel}>\n                        {_bookingsCount < 10 ? ` ${_bookingsCount}` : `${_bookingsCount}` }\n                    </div>\n                );\n            }\n        }\n    }\n\n    const getBookingsCountGauge = (_bookingsCount) =>\n    {\n        if (_bookingsCount > 0 )\n        {\n            let percent = (_bookingsCount / MAX_BOOKING_COUNT) * 100;\n            if (percent > 100)\n            {\n                percent = 100;\n            }\n\n            // percent = 100 - percent;\n\n            return (\n\n                <div className={classes.BookingCountGauge}>\n                  <div style={{padding:\"0\", margin:\"0\", width:\"100%\", height:\"100%\", backgroundColor: \"#f5f5f5\"}} >\n                        <div  style={{padding:\"0\", margin:\"0\", height:\"100%\", width:`${percent}%`, backgroundColor: \"#3f51b5\"}} >\n\n                        </div>\n                  </div>\n                </div>\n            );\n        }\n    }\n\n    return (\n        <React.Fragment>\n\n            <div className={isPast ? classes.ContainerPast : classes.Container} onClick={(event => dayClicked(event,cellDate))} >\n\n              {getBookingsCountLabel(bookingsCount)}\n\n              {getBookingsCountGauge(bookingsCount)}\n\n            </div>\n\n        </React.Fragment>\n\n\n    );\n}\n\nWeekViewCell.propTypes = {\n    key: PropTypes.string.isRequired,\n    date: PropTypes.string.isRequired,\n    time: PropTypes.string.isRequired,\n    dayClicked: PropTypes.func\n  };\n\n \n  \nexport default WeekViewCell;","import React, { useEffect, useState } from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport PropTypes from 'prop-types';\nimport WeekViewCell from './WeekViewCell';\nimport dateformat from 'dateformat';\n\nconst rows = [\n    '10:00 AM',\n    '10:30 AM', \n    '11:00 AM', \n    '11:30 AM', \n    '12:00 PM',\n    '12:30 PM',\n    '01:00 PM',\n    '01:30 PM',\n    '02:00 PM',\n    '02:30 PM',\n    '03:00 PM',\n    '03:30 PM',\n    '04:00 PM',\n    '04:30 PM',\n    '05:00 PM',\n    '05:30 PM',\n];\n\n\n\nconst useStyles = makeStyles((theme) => ({\n\n    table: {\n        width: \"100%\",\n        border: \"1px solid #ddd\",\n        borderCollapse: \"collapse\",\n        overflowY: \"auto\"\n    },\n\n    th: {\n        border: \"1px solid #ddd\",\n        borderCollapse: \"collapse\",\n        verticalAlign: \"middle\",\n        fontcolor: \"#555\",\n        fontWeight: \"400\",\n        fontSize: \"15px\",\n        paddingTop: \"5px\",\n        paddingBottom: \"5px\",\n        width: \"12%\", \n    },\n\n    td: {\n        border: \"1px solid #ddd\",\n        borderCollapse: \"collapse\",\n        verticalAlign: \"middle\",\n        height : \"50px\",\n        width: \"12%\", \n    }\n\n  }));\n\nconst WeekView = ({dates, dayClicked}) => {\n    const classes = useStyles();\n\n    return (\n        <React.Fragment>\n\n        <div style={{overflowY: \"scroll\" , height: \"60px\"}}>\n            <table className={classes.table}>\n                <thead>\n                    <tr>\n                        <th style={{width: \"7%\"}}>\n                        \n                        </th>\n                            {dates.map(date => (\n                                <th className={classes.th}>\n                                    <div style={{paddingBottom: \"5px\", color: \"#aaa\"}}>\n                                         {dateformat(date, 'ddd')}\n                                    </div>\n                                    <div>\n                                        <span style={{color: \"#aaa\"}}>\n                                            {dateformat(date, 'mmm ')}\n                                        </span> \n                                        <span  style={(dateformat(new Date(),'yyyy-mm-dd') === dateformat(date, 'yyyy-mm-dd')) ? { backgroundColor: \"#1a73e8\", color: \"#fff\", borderRadius: \"50%\",  padding: \"5px\",} : {color: \"#333\", fontWeight:\"500\"}}>\n                                             {dateformat(date, ' d')}\n                                        </span>\n                                       \n                                    </div>\n                                </th>\n                        ))}\n                    </tr>\n                </thead>\n             </table>\n\n        </div>\n\n            <div style={{overflowY: \"scroll\" , height: \"70vh\"}}>\n                <table className={classes.table}>   \n                    <tbody>\n                        {rows.map(row => (\n                            <tr>\n                                <td style={{width: \"7%\"}}>\n                                    {row}\n                                </td>\n                                {dates.map(day => (\n                                    <td className={classes.td}>\n                                        <WeekViewCell \n                                                dayClicked = {dayClicked}\n                                                key={`${dateformat(day,'yyyy-mm-dd')}-${row.replace(':','-')}`} \n                                                date={dateformat(day,'yyyy-mm-dd')} \n                                                time={row}/>\n                                    </td>\n                                ))}\n                            </tr>\n                        ))}            \n                    </tbody>\n                </table>\n            </div>                    \n      \n        </React.Fragment>\n\n\n    );\n}\n\nWeekView.propTypes = {\n    dates: PropTypes.arrayOf(PropTypes.any).isRequired,\n    dayClicked: PropTypes.func\n  };\n\n\nexport default WeekView;","import React, { useEffect, useRef, useState } from \"react\";\nimport BookService from \"./services/BookService\";\nimport Typography from \"@material-ui/core/Typography\";\nimport {\n  Backdrop,\n  Button,\n  Checkbox,\n  CircularProgress,\n  Divider,\n  FormControlLabel,\n  Grid,\n  InputAdornment,\n  InputLabel,\n  Link,\n  makeStyles,\n  MenuItem,\n  Select,\n  Switch,\n  TextField,\n  Tooltip,\n} from \"@material-ui/core\";\nimport GlobalState from \"../GlobalState\";\nimport { withStyles } from \"@material-ui/core/styles\";\n\nimport CreditCardIcon from \"@material-ui/icons/CreditCard\";\n\nimport Dialog from \"@material-ui/core/Dialog\";\nimport DialogContent from \"@material-ui/core/DialogContent\";\n\nimport DialogTitle from \"@material-ui/core/DialogTitle\";\nimport Draggable from \"react-draggable\";\nimport Paper from \"@material-ui/core/Paper\";\n\nimport Alert from \"@material-ui/lab/Alert\";\n\nimport PropTypes from \"prop-types\";\nimport LinearProgress from \"@material-ui/core/LinearProgress\";\nimport Box from \"@material-ui/core/Box\";\n\nimport Radio from \"@material-ui/core/Radio\";\nimport RadioGroup from \"@material-ui/core/RadioGroup\";\nimport FormControl from \"@material-ui/core/FormControl\";\nimport FormLabel from \"@material-ui/core/FormLabel\";\nimport { corporates } from \"./Corporates\";\nimport NumberFormat from \"react-number-format\";\n\nimport AddIcon from \"@material-ui/icons/Add\";\nimport { validate } from \"email-validator\";\nimport DateRangeIcon from \"@material-ui/icons/DateRange\";\nimport { CalendarColors } from \"../Admin/calendar-admin/colors\";\n\nvar interval;\n\nconst useStyles = makeStyles((theme) => ({\n  title: {\n    marginTop: theme.spacing(0),\n    marginBottom: theme.spacing(1),\n  },\n\n  refreshButton: {\n    marginLeft: theme.spacing(2),\n  },\n\n  checkIcon: {\n    color: \"green\",\n  },\n\n  closeIcon: {\n    color: \"red\",\n  },\n\n  RefLink: {\n    cursor: \"pointer\",\n  },\n\n  BookedLabel: {\n    backgroundColor: \"#606060\",\n    color: \"#fff\",\n    paddingRight: \"10px\",\n    paddingLeft: \"10px\",\n  },\n\n  PatientAttendedLabel: {\n    backgroundColor: \"#0066aa\",\n    color: \"#fff\",\n    paddingRight: \"15px\",\n    paddingLeft: \"10px\",\n  },\n\n  SampleTakenLabel: {\n    backgroundColor: \"#0066cc\",\n    color: \"#fff\",\n    paddingRight: \"40px\",\n    paddingLeft: \"10px\",\n  },\n\n  ReportSentLabel: {\n    backgroundColor: \"#009900\",\n    color: \"#fff\",\n    paddingRight: \"90px\",\n    paddingLeft: \"10px\",\n  },\n\n  ReportCertSentLabel: {\n    backgroundColor: \"#009900\",\n    color: \"#fff\",\n    paddingRight: \"68px\",\n    paddingLeft: \"10px\",\n  },\n\n  archiveButton: {},\n\n  smartMatchButton: {\n    backgroundColor: \"#2f942e\",\n    \"&:hover\": {\n      background: \"green\",\n      color: \"#fff\",\n    },\n    textDecoration: \"none !important\",\n    marginRight: \"10px\",\n    // padding: \"10px\"\n  },\n\n  infoTitle: {\n    fontWeight: \"400\",\n  },\n\n  infoData: {\n    paddingLeft: \"10px\",\n    fontWeight: \"800\",\n  },\n\n  matchButton: {\n    marginTop: \"30px\",\n    marginBottom: \"20px\",\n    backgroundColor: \"#2f942e\",\n    \"&:hover\": {\n      background: \"green\",\n      color: \"#fff\",\n    },\n    textDecoration: \"none !important\",\n    padding: \"10px\",\n    paddingLeft: \"50px\",\n    paddingRight: \"50px\",\n  },\n\n  resendButton: {\n    marginTop: \"5px\",\n    marginBottom: \"5px\",\n    backgroundColor: \"#2f942e\",\n    \"&:hover\": {\n      background: \"green\",\n      color: \"#fff\",\n    },\n    textDecoration: \"none !important\",\n    padding: \"10px\",\n    paddingLeft: \"50px\",\n    paddingRight: \"50px\",\n  },\n\n  resendFilesButton: {\n    marginTop: \"5px\",\n    marginBottom: \"5px\",\n    backgroundColor: \"#3792ad\",\n    \"&:hover\": {\n      background: \"#2f798f\",\n      color: \"#fff\",\n    },\n    textDecoration: \"none !important\",\n    padding: \"10px\",\n    paddingLeft: \"50px\",\n    paddingRight: \"50px\",\n  },\n\n  cancelButton: {\n    marginBottom: \"10px\",\n    textDecoration: \"none !important\",\n    padding: \"10px\",\n    paddingLeft: \"90px\",\n    paddingRight: \"90px\",\n  },\n\n  CalendarIcon: {\n    color: theme.palette.primary.main,\n  },\n\n  DateTimeLabel: {\n    fontWeight: \"500\",\n    color: theme.palette.primary.main,\n  },\n\n  backdrop: {\n    zIndex: theme.zIndex.drawer + 5,\n    color: \"#fff\",\n  },\n\n  PriceLabelPaid:{\n    color: theme.palette.primary.main,\n    fontWeight: \"600\"\n  },\n\n  PriceLabelNotPaid:{\n    color: theme.palette.secondary.main,\n    fontWeight: \"600\"\n  },\n\n\n}));\n\nconst Packages = [\n  { packageName: \"Consultation with Consultant Gynaecologist\" },\n  { packageName: `Coil Fitting/Coil Removal` },\n  { packageName: `Well Woman Check` },\n  { packageName: `Sexual Health Screening` },\n  { packageName: `Pre-pregnancy/Fertility check` },\n  { packageName: `Gynaecological Ultrasound` },\n  { packageName: `HPV Vaccination` },\n  { packageName: `Cervical / Pap Smear` },\n  { packageName: `HPV Treatment / Wart Cryo-Therapy` },\n];\n\nfunction NumberFormatCustom(props) {\n  const { inputRef, onChange, ...other } = props;\n\n  return (\n    <NumberFormat\n      {...other}\n      getInputRef={inputRef}\n      onValueChange={(values) => {\n        onChange({\n          target: {\n            name: props.name,\n            value: values.value,\n          },\n        });\n      }}\n      thousandSeparator\n      isNumericString\n      prefix=\"\"\n    />\n  );\n}\n\nNumberFormatCustom.propTypes = {\n  inputRef: PropTypes.func.isRequired,\n  name: PropTypes.string.isRequired,\n  onChange: PropTypes.func.isRequired,\n};\n\nconst BorderLinearProgress = withStyles((theme) => ({\n  root: {\n    height: 10,\n    borderRadius: 5,\n  },\n  colorPrimary: {\n    backgroundColor: \"#cedbce\", //theme.palette.grey[theme.palette.type === 'light' ? 200 : 700],\n  },\n  bar: {\n    borderRadius: 5,\n    backgroundColor: \"#2f942e\",\n  },\n}))(LinearProgress);\nfunction LinearProgressWithLabel(props) {\n  return (\n    <Box display=\"flex\" alignItems=\"center\">\n      <Box width=\"100%\" mr={1}>\n        <BorderLinearProgress variant=\"determinate\" {...props} />\n      </Box>\n      <Box minWidth={35}>\n        <Typography\n          style={{ fontWeight: \"800\", color: \"#5e855e\" }}\n          variant=\"body2\"\n          color=\"textSecondary\"\n        >{`${Math.round(props.value)}%`}</Typography>\n      </Box>\n    </Box>\n  );\n}\n\nLinearProgressWithLabel.propTypes = {\n  /**\n   * The value of the progress indicator for the determinate and buffer variants.\n   * Value between 0 and 100.\n   */\n  value: PropTypes.number.isRequired,\n};\n\nfunction PaperComponent(props) {\n  return (\n    <Draggable\n      handle=\"#draggable-dialog-title\"\n      cancel={'[class*=\"MuiDialogContent-root\"]'}\n    >\n      <Paper {...props} />\n    </Draggable>\n  );\n}\n\nexport default function NewBookingDialog(props) {\n  const classes = useStyles();\n\n  const [state, setState] = React.useContext(GlobalState);\n  const [saving, setSaving] = useState(false);\n\n  const [fullname, setFullname] = React.useState(\"\");\n  const [fullnameError, setFullnameError] = React.useState(false);\n\n  const [phone, setPhone] = React.useState(\"\");\n  const [email, setEmail] = React.useState(\"\");\n  const [notes, setNotes] = React.useState(\"\");\n\n  \n  const fullnameChanged = (event) => {\n    setFullname(event.target.value);\n    setFullnameError(false);\n  };\n\n  const phoneChanged = (event) => {\n    setPhone(event.target.value);\n  };\n\n  const emailChanged = (event) => {\n    setEmail(event.target.value);\n  };\n\n\n  const notesChanged = (event) => {\n    setNotes(event.target.value);\n  };\n\n  const handleClose = () => {\n    if (saving) return;\n\n    setFullname(\"\");\n    setFullnameError(false);\n    setPhone(\"\");\n    setEmail(\"\");\n    setNotes(\"\");\n    \n    props.handleClose();\n    setSaving(false);\n  };\n\n  const validateBooking = () => {\n    let error = false;\n    if (!fullname || fullname.trim().length < 1) {\n      setFullnameError(true);\n      error = true;\n    }\n    return !error;\n  };\n\n  const saveClicked = async () => {\n    if (!validateBooking()) {\n      return;\n    }\n\n    setSaving(true);\n\n    try {\n      await BookService.addNewBooking({\n        bookingDate: props.date,\n        bookingTime: props.time,\n        fullname: fullname,\n        phone: phone,\n        email: email,\n        notes: notes,\n      });\n      setSaving(false);\n      setState((state) => ({\n        ...state,\n        bookingDialogDataChanged: !state.bookingDialogDataChanged\n          ? true\n          : false,\n      }));\n      handleClose();\n    } catch (err) {\n      console.error(err);\n      setSaving(false);\n    }\n  };\n\n  return (\n    <React.Fragment>\n      {props.date && props.time && (\n        <React.Fragment>\n          <Dialog\n            maxWidth=\"xs\"\n            open={props.open}\n            onClose={handleClose}\n            PaperComponent={PaperComponent}\n            aria-labelledby=\"form-dialog-title\"\n          >\n            <DialogTitle id=\"draggable-dialog-title\">\n              <Grid\n                container\n                spacing={2}\n                direction=\"row\"\n                justify=\"center\"\n                alignItems=\"center\"\n              >\n                <Grid item>\n                  <AddIcon style={{ color: \"#f50057\", fontSize: \"3rem\" }} />\n                </Grid>\n\n                <Grid item>\n                  <div\n                    style={{\n                      color: \"#f50057\",\n                      paddingBottom: \"10px\",\n                      fontWeight: \"800\",\n                    }}\n                  >\n                    {\" \"}\n                    ADD New Booking{\" \"}\n                  </div>\n                </Grid>\n              </Grid>\n\n              <div style={{position:\"absolute\", top: \"5px\", right: \"5px\", backgroundColor:CalendarColors.GP_COLOR, color:\"#fff\", padding: \"0px 5px\", borderRadius:\"10px\", fontSize:\"1rem\"}}>\n                    GP\n              </div>\n\n\n              <Divider />\n            </DialogTitle>\n            <DialogContent>\n              <div\n                style={{\n                  height: \"400px\",\n                }}\n              >\n                <Grid\n                  container\n                  direction=\"row\"\n                  justify=\"stretch\"\n                  spacing={2}\n                  alignItems=\"center\"\n                >\n                  <Grid item xs={12}>\n                    <Grid\n                      container\n                      direction=\"row\"\n                      justify=\"center\"\n                      alignItems=\"center\"\n                      spacing={1}\n                    >\n                      <Grid item>\n                        <DateRangeIcon className={classes.CalendarIcon} />\n                      </Grid>\n                      <Grid item>\n                        <span className={classes.DateTimeLabel}>\n                          {props.date} , {props.time}\n                        </span>\n                      </Grid>\n                    </Grid>\n                  </Grid>\n\n                  <Grid item xs={12}>\n                    <TextField\n                      fullWidth\n                      autoFocus\n                      error={fullnameError}\n                      label=\"Full Name\"\n                      value={fullname}\n                      required\n                      onChange={fullnameChanged}\n                      name=\"fullname\"\n                      id=\"fullname-id\"\n                      autoComplete=\"none\"\n                    />\n                  </Grid>\n\n                  <Grid item xs={12}>\n                    <TextField\n                      fullWidth\n                      label=\"Telephone\"\n                      value={phone}\n                      onChange={phoneChanged}\n                      name=\"phone\"\n                      id=\"phone-id\"\n                      autoComplete=\"none\"\n                    />\n                  </Grid>\n\n                  <Grid item xs={12}>\n                    <TextField\n                      fullWidth\n                      label=\"Email\"\n                      value={email}\n                      onChange={emailChanged}\n                      name=\"email\"\n                      id=\"email-id\"\n                      autoComplete=\"none\"\n                    />\n                  </Grid>\n\n\n                  <Grid item xs={12}>\n                    <TextField\n                      fullWidth\n                      label=\"Notes\"\n                      value={notes}\n                      onChange={notesChanged}\n                      name=\"notes\"\n                      id=\"notes-id\"\n                      autoComplete=\"none\"\n                    />\n                  </Grid>\n\n                </Grid>\n\n                <div\n                  style={{\n                    position: \"absolute\",\n                    bottom: \"20px\",\n                    right: \"20px\",\n                  }}\n                >\n                  <Grid\n                    container\n                    direction=\"row\"\n                    justify=\"flex-end\"\n                    alignItems=\"center\"\n                    spacing={1}\n                  >\n                    <Grid item>\n                      <Button\n                        onClick={handleClose}\n                        style={{ width: \"100px\" }}\n                        disabled={saving}\n                      >\n                        back\n                      </Button>\n                    </Grid>\n                    <Grid item>\n                      <Button\n                        onClick={saveClicked}\n                        variant=\"contained\"\n                        color=\"secondary\"\n                        style={{ width: \"100px\" }}\n                        disabled={saving}\n                      >\n                        Save\n                      </Button>\n                    </Grid>\n                  </Grid>\n                </div>\n              </div>\n\n              <Backdrop className={classes.backdrop} open={saving}>\n                <CircularProgress color=\"inherit\" />\n              </Backdrop>\n            </DialogContent>\n          </Dialog>\n        </React.Fragment>\n      )}\n    </React.Fragment>\n  );\n}\n","import React, { useEffect, useState } from \"react\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport PropTypes from \"prop-types\";\nimport dateformat from \"dateformat\";\nimport BookService from \"../services/BookService\";\n\nimport CircularProgress from \"@material-ui/core/CircularProgress\";\nimport GlobalState from \"../../GlobalState\";\nimport BookingDialog from \"../BookingDialog\";\nimport NewBookingDialog from \"../NewBookingDialog\";\nimport clsx from \"clsx\";\nimport { CalendarColors } from \"../../Admin/calendar-admin/colors\";\n\nconst useStyles = makeStyles((theme) => ({\n  Container: {\n    width: \"100%\",\n    height: \"50px\",\n    position: \"relative\",\n    backgroundColor: \"#fff\",\n    display: \"flex\",\n    alignItems: \"flex-start\",\n    justifyItems: \"flex-start\",\n    paddingLeft: \"10px\",\n  },\n\n  ContainerPast: {\n    width: \"100%\",\n    paddingTop: \"50px\",\n    position: \"relative\",\n    backgroundColor: \"#fafafa\",\n  },\n\n  DayLabel: {\n    position: \"absolute\",\n    top: \"5px\",\n    right: \"5px\",\n    color: \"#555\",\n    fontSize: \"1rem\",\n  },\n\n  DayLabelDisabled: {\n    position: \"absolute\",\n    top: \"5px\",\n    right: \"5px\",\n    color: \"#ddd\",\n    fontSize: \"1rem\",\n  },\n\n  LoadingProgress: {\n    position: \"absolute\",\n    top: \"10%\",\n    left: \"40%\",\n  },\n\n  BookingCountGauge: {\n    position: \"absolute\",\n    bottom: \"5%\",\n    left: \"8%\",\n    width: \"85%\",\n    height: \"8%\",\n  },\n\n  bookingBox: {\n    display: \"flex\",\n    marginRight: \"10px\",\n    marginTop: \"5px\",\n    padding: \"10px\",\n    maxWidth: \"150px\",\n    overflowX: \"hidden\",\n    border: \"1px solid #eee\",\n    fontSize: \"12px\",\n    fontWeight: \"500\",\n    cursor: \"pointer\",\n    backgroundColor: \"#ebedf7\",\n    color: \"#3f51b5\",\n    boxShadow: \"2px 4px #fafafa\",\n\n    \"&:hover\": {\n      background: \"#3f51b5\",\n      color: \"#ebedf7\",\n    },\n  },\n\n  bookingBoxNew: {\n    display: \"flex\",\n    marginRight: \"10px\",\n    marginTop: \"5px\",\n    padding: \"10px\",\n    maxWidth: \"150px\",\n    overflowX: \"hidden\",\n    border: \"1px solid #ddd\",\n    color: \"#ccc\",\n    fontSize: \"12px\",\n    fontWeight: \"500\",\n    cursor: \"pointer\",\n    backgroundColor: \"#fff\",\n\n    boxShadow: \"2px 4px #fafafa\",\n    transition: \"all 0.5s ease\",\n    borderRadius: \"4px\",\n\n    \"&:hover\": {\n      background: \"#fff\",\n      color: theme.palette.secondary.main,\n      borderColor: theme.palette.secondary.main,\n    },\n  },\n\n  bookingBoxSampleTaken: {\n    display: \"flex\",\n    marginRight: \"10px\",\n    marginTop: \"5px\",\n    padding: \"10px\",\n    maxWidth: \"150px\",\n    overflowX: \"hidden\",\n    border: \"1px solid #eee\",\n    fontSize: \"12px\",\n    fontWeight: \"500\",\n    cursor: \"pointer\",\n    backgroundColor: \"#0066cc\",\n    color: \"#eee\",\n    boxShadow: \"2px 4px #fafafa\",\n\n    \"&:hover\": {\n      background: \"#0059b3\",\n      color: \"#fafafa\",\n    },\n  },\n\n  bookingBoxPositive: {\n    display: \"flex\",\n    marginRight: \"10px\",\n    marginTop: \"5px\",\n    padding: \"10px\",\n    maxWidth: \"150px\",\n    overflowX: \"hidden\",\n    border: \"1px solid #eee\",\n    fontSize: \"12px\",\n    fontWeight: \"500\",\n    cursor: \"pointer\",\n    backgroundColor: \"#d40b0b\",\n    color: \"#fff2f2\",\n    boxShadow: \"2px 4px #fafafa\",\n\n    \"&:hover\": {\n      background: \"#bf0000\",\n      color: \"#fff\",\n    },\n  },\n\n  bookingBoxReportSent: {\n    display: \"flex\",\n    marginRight: \"10px\",\n    marginTop: \"5px\",\n    padding: \"10px\",\n    maxWidth: \"150px\",\n    overflowX: \"hidden\",\n    border: \"1px solid #eee\",\n    fontSize: \"12px\",\n    fontWeight: \"500\",\n    cursor: \"pointer\",\n    backgroundColor: \"#009900\",\n    color: \"#eee\",\n    boxShadow: \"2px 4px #fafafa\",\n\n    \"&:hover\": {\n      background: \"#006e00\",\n      color: \"#fafafa\",\n    },\n  },\n\n\n\n}));\n\nconst DayViewCell = ({ key, date, time }) => {\n  const classes = useStyles();\n\n  const [state, setState] = React.useContext(GlobalState);\n  const [bookings, setBookings] = React.useState(null);\n  const [filteredBookings, setFilteredBookings] = React.useState(null);\n  const [selectedBooking, setSelectedBooking] = React.useState(null);\n\n  const [refresh, setRefresh] = React.useState(true);\n\n  const [isPast, setIsPast] = React.useState(false);\n\n  const [openDialog, setOpenDialog] = React.useState(false);\n  const [openDialogAddNew, setOpenDialogAddNew] = React.useState(false);\n\n  useEffect(() => {\n    const todayStr = dateformat(new Date(), \"yyyy-mm-dd\");\n    setIsPast(date < todayStr);\n  }, [date]);\n\n  useEffect(() => {\n    if (bookings) {\n      if (state.dayViewCalFilter && state.dayViewCalFilter.trim().length > 0) {\n        const search = state.dayViewCalFilter.trim().toUpperCase();\n        setFilteredBookings(\n          bookings.filter(\n            (booking) =>\n              booking.fullname.toLowerCase().indexOf(search.toLowerCase()) >= 0\n          )\n        );\n      } else {\n        setFilteredBookings([...bookings]);\n      }\n    }\n  }, [state.dayViewCalFilter, bookings]);\n\n  useEffect(() => {\n    const fetchData = async () => {\n      if (!date || date.length <= 0 || !time || time.length <= 0) {\n        return;\n      }\n\n      // if (isPast)\n      // {\n      //     setBookings([]);\n      //     return;\n      // }\n\n      setBookings(null);\n\n      var res = state.AdminCalendarCache?.find(\n        (record) =>\n          record.method === \"getBookingsByDateStrandTime\" &&\n          record.query === `${date}${time}`\n      )?.res;\n      if (!res || openDialog || openDialogAddNew) {\n        res = await BookService.getAllBookingsByDateStrandTime(date, time);\n        setState((state) => ({\n          ...state,\n          AdminCalendarCache: [\n            ...state.AdminCalendarCache,\n            {\n              method: \"getBookingsByDateStrandTime\",\n              query: `${date}${time}`,\n              res: res,\n            },\n          ],\n        }));\n      }\n\n      if (res.data.status === \"OK\") {\n        setBookings(res.data.bookings);\n      }\n    };\n\n    if (openDialog || openDialogAddNew) {\n      setState((state) => ({\n        ...state,\n        AdminCalendarCache: state.AdminCalendarCache.filter(\n          (record) =>\n            !(\n              record.method === \"getBookingsByDateStrandTime\" &&\n              record.query === `${date}${time}`\n            )\n        ),\n      }));\n      setState((state) => ({\n        ...state,\n        AdminCalendarCache: state.AdminCalendarCache.filter(\n          (record) =>\n            !(\n              record.method === \"getBookingsCountByDateStrandTime\" &&\n              record.query === `${date}${time}`\n            )\n        ),\n      }));\n      setState((state) => ({\n        ...state,\n        AdminCalendarCache: state.AdminCalendarCache.filter(\n          (record) =>\n            !(\n              record.method === \"getBookingsCountByDateStr\" &&\n              record.query === date\n            )\n        ),\n      }));\n    }\n\n    fetchData();\n  }, [date, time, state.bookingDialogDataChanged]);\n\n  const bookingCliked = (event, booking) => {\n    setSelectedBooking(booking);\n    setOpenDialog(true);\n  };\n\n  const getBookingClass = (status) => {\n    switch (status) {\n      case \"patient_attended\":\n        return classes.bookingBoxSampleTaken;\n      default:\n        return classes.bookingBox;\n    }\n  };\n\n  const addNewBookingClicked = () => {\n    setOpenDialogAddNew(true);\n  };\n\n\n  const getBookingsBox = (_bookings) => {\n    if (_bookings === null) {\n      return (\n        <div className={classes.LoadingProgress}>\n          <CircularProgress disableShrink />\n        </div>\n      );\n    } else if (_bookings.length >= 0) {\n      return (\n        <React.Fragment>\n          {_bookings.map((booking) => (\n            <div\n              style={booking.tr ? { borderTop: \"5px solid #d00fd6\" } : {}}\n              className={\n                getBookingClass(booking.status)\n                }\n              onClick={(event) => bookingCliked(event, booking)}\n            >\n              {`${booking.fullname}`.substring(0, 15)}\n            </div>\n          ))}\n\n          <div className={classes.bookingBoxNew} onClick={addNewBookingClicked}>\n            {\" \"}\n            + Add New Booking\n          </div>\n        </React.Fragment>\n      );\n    }\n  };\n\n  const handleCloseDialog = () => {\n    setOpenDialog(false);\n  };\n\n  const handleCloseDialogAddNew = () => {\n    setOpenDialogAddNew(false);\n  };\n\n  return (\n    <React.Fragment>\n      <div className={classes.Container}>\n        {getBookingsBox(filteredBookings)}\n      </div>\n\n      <BookingDialog\n        booking={selectedBooking}\n        open={openDialog}\n        onClose={handleCloseDialog}\n      />\n\n      <NewBookingDialog\n        date={date}\n        time={time}\n        open={openDialogAddNew}\n        handleClose={handleCloseDialogAddNew}\n      />\n    </React.Fragment>\n  );\n};\n\nDayViewCell.propTypes = {\n  key: PropTypes.string.isRequired,\n  date: PropTypes.string.isRequired,\n  time: PropTypes.string.isRequired,\n};\n\nexport default DayViewCell;\n","import React, { useEffect, useState } from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport PropTypes from 'prop-types';\nimport DayViewCell from './DayViewCell';\nimport dateformat from 'dateformat';\n\n\n\n\nconst rows = [\n    '10:00 AM',\n    '10:30 AM', \n    '11:00 AM', \n    '11:30 AM', \n    '12:00 PM',\n    '12:30 PM',\n    '01:00 PM',\n    '01:30 PM',\n    '02:00 PM',\n    '02:30 PM',\n    '03:00 PM',\n    '03:30 PM',\n    '04:00 PM',\n    '04:30 PM',\n    '05:00 PM',\n    '05:30 PM',\n];\n\nconst useStyles = makeStyles((theme) => ({\n\n    table: {\n        width: \"100%\",\n        border: \"1px solid #ddd\",\n        borderCollapse: \"collapse\",\n        overflowY: \"auto\"\n    },\n\n    th: {\n        border: \"1px solid #ddd\",\n        borderCollapse: \"collapse\",\n        verticalAlign: \"middle\",\n        fontcolor: \"#555\",\n        fontWeight: \"400\",\n        fontSize: \"15px\",\n        paddingTop: \"5px\",\n        paddingBottom: \"5px\",\n        width: \"12%\", \n    },\n\n    td: {\n        border: \"1px solid #ddd\",\n        borderCollapse: \"collapse\",\n        verticalAlign: \"middle\",\n        height : \"50px\",\n        width: \"84%\", \n    },\n\n    titleLabel: {\n        paddingBottom: \"17px\",\n        paddingTop: \"17px\",\n        color: \"#777\",\n        fontSize: \"16px\"\n    },\n\n    titleLabelToday: {\n        paddingBottom: \"17px\",\n        paddingTop: \"17px\",\n        color: \"#fff\",\n        backgroundColor: \"#1a73e8\",\n        fontSize: \"16px\"\n    },\n\n  }));\n\nconst DayView = ({date}) => {\n    const classes = useStyles();\n\n    return (\n        <React.Fragment>\n\n        <div style={{overflowY: \"scroll\" , height: \"60px\"}}>\n            <table className={classes.table}>\n                <thead>\n                    <tr>\n                        <th style={{width: \"7%\"}}>\n                        \n                        </th>\n                        <th style={{width: \"84%\"}}>\n                                <div className={(dateformat(new Date(),'yyyy-mm-dd') === dateformat(date, 'yyyy-mm-dd')) ? classes.titleLabelToday : classes.titleLabel }>\n                                        {dateformat(date,'dddd')}\n                                </div>                                \n                        </th>\n                    </tr>\n                </thead>\n             </table>\n\n        </div>\n\n            <div style={{overflowY: \"scroll\" , height: \"70vh\"}}>\n                <table className={classes.table}>   \n                    <tbody>\n                        {rows.map(row => (\n                            <tr>\n                                <td style={{width: \"7%\"}}>\n                                    {row}\n                                </td>\n                               \n                                <td className={classes.td}>\n                                     <DayViewCell key={`${dateformat(date,'yyyy-mm-dd')}-${row}`} date={dateformat(date,'yyyy-mm-dd')} time={row}/>  \n                                </td>\n                            \n                            </tr>\n                        ))}            \n                    </tbody>\n                </table>\n            </div>                    \n      \n        </React.Fragment>\n\n\n    );\n}\n\nDayView.propTypes = {\n    date: PropTypes.any.isRequired\n  };\n\n\nexport default DayView;","import React, { useEffect, useState } from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport MonthView from './MonthView';\nimport { Button, Grid, IconButton, InputAdornment, TextField, Tooltip } from '@material-ui/core';\nimport ToggleButton from '@material-ui/lab/ToggleButton';\nimport ToggleButtonGroup from '@material-ui/lab/ToggleButtonGroup';\n\nimport NavigateBeforeIcon from '@material-ui/icons/NavigateBefore';\nimport NavigateNextIcon from '@material-ui/icons/NavigateNext';\nimport WeekView from './WeekView';\nimport dateformat from 'dateformat';\nimport DayView from './DayView';\nimport GlobalState from '../../GlobalState';\n\nimport CloseIcon from '@material-ui/icons/Close';\n\n\n\nconst monthNames = [\"January\", \"February\", \"March\", \"April\", \"May\", \"June\",\n  \"July\", \"August\", \"September\", \"October\", \"November\", \"December\"\n];\n\nconst useStyles = makeStyles((theme) => ({\n\n    title: {\n        textAlign: \"center\",\n        fontSize: \"24px\",\n        fontColor: \"#333\"\n    },\n\n  }));\n\nexport default function CalendarView() {\n    const classes = useStyles();\n\n    const [state, setState] = React.useContext(GlobalState);\n\n    const [month, setMonth] = React.useState(new Date().getMonth() + 1);\n    const [year, setYear] = React.useState(new Date().getFullYear());\n\n    const [day, setDay] = React.useState(new Date());\n\n    const [firstDayofWeek, setFirstDayofWeek] = React.useState(new Date());\n\n    const [weekDates, setWeekDates] = React.useState([]);\n\n    const [mode, setMode] = React.useState('month');\n    const [selectedTab, setSeletedTab] = React.useState('month');\n\n    const [filter,setFilter] = React.useState('');\n\n    const filterChanged = (event) =>{\n        setFilter(event.target.value);\n        setState(state => ({...state, dayViewCalFilter : event.target.value?.trim()?.toUpperCase()}))\n      }\n\n      const removeFilter = () =>\n      {\n        setFilter('');\n        setState(state => ({...state, dayViewCalFilter : ''}));\n      }\n\n\n    useEffect( () => {\n        const today = new Date();\n        const dayofWeek = today.getDay();\n        const firstdayofweek = new Date(today.getTime() - ( dayofWeek * 86400000));\n        setFirstDayofWeek(firstdayofweek);\n        setState(state => ({...state, AdminCalendarCache : []}));\n\n        return () =>\n        {\n            setState(state => ({...state, AdminCalendarCache : []}));\n            removeFilter();\n        }\n       \n    }, []);\n\n\n    useEffect( () => {\n        const dates = [];\n        for (var i = 0; i < 7 ; i++)\n        {\n            dates.push(new Date(firstDayofWeek.getTime() + ( i * 86400000)));\n        }\n        setWeekDates(dates);\n\n    }, [firstDayofWeek]);\n\n    const handlePrevButton = (event) =>\n    {\n       if (mode === 'month')\n       {\n            if (month === 1)\n            {\n                setYear(year - 1);\n            } \n\n            const newMonth = month === 1 ? 12 : month - 1;\n            setMonth(newMonth);\n\n            const newDay = new Date(year, newMonth - 1 , 1, 0 ,0 ,0 ,0);\n            setDay(newDay);\n\n            const dayofWeek = newDay.getDay();\n            setFirstDayofWeek(new Date(newDay.getTime() - ( dayofWeek * 86400000)));\n\n       } \n       else if (mode === 'week')\n       {\n           const newFirstDayofWeek = new Date(firstDayofWeek.getTime() - ( 7 * 86400000));\n           setFirstDayofWeek(newFirstDayofWeek);\n\n           setDay(newFirstDayofWeek);\n           setMonth(newFirstDayofWeek.getMonth() + 1);\n           setYear(newFirstDayofWeek.getFullYear());\n\n       }\n       else if (mode === 'day')\n       {\n           const newDay = new Date(day.getTime() - ( 1 * 86400000));\n           setDay(newDay);\n\n           const dayofWeek = newDay.getDay();\n           setFirstDayofWeek(new Date(newDay.getTime() - ( dayofWeek * 86400000)));\n\n           setMonth(newDay.getMonth() + 1);\n           setYear(newDay.getFullYear());\n       }\n    }\n\n    const handleNextButton = (event) =>\n    {\n        if (mode === 'month')\n        {\n            if (month === 12)\n            {\n                setYear(year + 1);\n            } \n       \n            const newMonth = month === 12 ? 1 : month + 1;\n            setMonth(newMonth);\n\n            const newDay = new Date(year, newMonth - 1 , 1, 0 ,0 ,0 ,0);\n            setDay(newDay);\n\n            const dayofWeek = newDay.getDay();\n            setFirstDayofWeek(new Date(newDay.getTime() - ( dayofWeek * 86400000)));\n        }\n        else if (mode === 'week')\n        {\n            const newFirstDayofWeek = new Date(firstDayofWeek.getTime() + ( 7 * 86400000));\n            setFirstDayofWeek(newFirstDayofWeek);\n\n            setDay(newFirstDayofWeek);\n            setMonth(newFirstDayofWeek.getMonth() + 1);\n            setYear(newFirstDayofWeek.getFullYear());\n\n        }\n        else if (mode === 'day')\n        {\n            const newDay = new Date(day.getTime() + ( 1 * 86400000));\n            setDay(newDay);\n\n            const dayofWeek = newDay.getDay();\n            setFirstDayofWeek(new Date(newDay.getTime() - ( dayofWeek * 86400000)));\n \n            setMonth(newDay.getMonth() + 1);\n            setYear(newDay.getFullYear());\n        }\n    }\n\n    const goToday = (event) => {\n        const newDay = new Date();\n        const dayofWeek = newDay.getDay();\n        setFirstDayofWeek(new Date(newDay.getTime() - ( dayofWeek * 86400000)));\n        setDay(newDay);\n        setMonth(newDay.getMonth() + 1);\n        setYear(newDay.getFullYear());\n    }\n\n    const dayClicked = (event, date) =>\n    {\n        const newDay = new Date(date);\n        const dayofWeek = newDay.getDay();\n        setFirstDayofWeek(new Date(newDay.getTime() - ( dayofWeek * 86400000)));\n        setDay(newDay);\n        setMonth(newDay.getMonth() + 1);\n        setYear(newDay.getFullYear());\n        setSeletedTab('day');\n        setMode('day');\n    }\n\n    const getContentFromMode = (_mode) => {\n        if (_mode === 'month')\n        {\n            return (\n                <MonthView dayClicked={dayClicked} month={month} year={year}/>    \n            );\n        }    \n        else if (_mode === 'week')\n        {\n            return (\n                    <WeekView dayClicked={dayClicked} dates={weekDates}/>\n            );\n            \n        }\n        else if (_mode === 'day')\n        {\n            return (\n                <DayView date={day}/>\n            );\n        }\n    }\n\n    const getCalendarTitleFromMode = (_mode) => {\n        if (_mode === 'month')\n        {\n            return (\n                <span className={classes.title}> {`${monthNames[month - 1]} ${year}`} </span>   \n            );\n        }    \n        else if (_mode === 'week')\n        {\n            const endOfWeek = new Date(firstDayofWeek.getTime() + ( 6 * 86400000));\n            let endofWeekStr = '';\n            if (endOfWeek.getMonth() === firstDayofWeek.getMonth())\n            {\n                endofWeekStr = dateformat(endOfWeek,'d');\n            }else\n            {\n                endofWeekStr = dateformat(endOfWeek,'mmm d');\n            }\n\n            return (\n                <span className={classes.title}> {`${dateformat(firstDayofWeek,'mmm d')} - ${endofWeekStr}, ${year}`} </span>\n            );\n            \n        }\n        else if (_mode === 'day')\n        {\n            return (\n                <span className={classes.title}> {`${dateformat(day,'mmmm d, yyyy')}`} </span>\n            );\n        }\n    }\n\n\n    const handleTabChanged = (event, value) => {\n        if (value && value.length)\n        {\n          setSeletedTab(value);\n          setMode(value);\n        }\n    };\n\n    const getPrevButtonTitle = (_mode) =>\n    {\n        return `Previuos ${mode}`;\n    }\n\n    const getNextButtonTitle = (_mode) =>\n    {\n        return `Next ${mode}`;\n    }\n\n    return (\n        <React.Fragment>\n\n          <Grid\n            container\n            direction=\"row\"\n            justify=\"space-between\"\n            alignItems=\"center\"\n            style= {{marginBottom: \"10px\", marginTop: \"0px\"}}\n            >  \n\n            <Grid item md={3}>\n                <div  style={{display:\"flex\", alignItems: \"flex-start\", justifyContent: \"flex-start\" , paddingLeft: \"10px\"}}>\n                    <Tooltip title={getPrevButtonTitle(mode)} placement=\"bottom-start\">\n                        <IconButton \n                                color=\"default\" \n                                aria-label=\"prev\"\n                                onClick = {handlePrevButton}\n                                >\n                            <NavigateBeforeIcon style={{fontSize: '2rem'}}/>\n                        </IconButton>\n                    </Tooltip>\n\n                    <Tooltip title={getNextButtonTitle(mode)} placement=\"bottom-end\">\n                        <IconButton \n                                color=\"default\" \n                                aria-label=\"next\"\n                                onClick = {handleNextButton}\n                                >\n                            <NavigateNextIcon style={{fontSize: '2rem'}}/>\n                        </IconButton>\n                    </Tooltip>\n\n                    <Button style={{marginTop: \"11px\", marginLeft: \"10px\"}} onClick={goToday} variant=\"outlined\"> Today </Button>\n                </div>\n\n            </Grid>\n\n            <Grid item md={6}>\n\n                    <Grid\n                        container\n                        direction=\"row\"\n                        justify=\"center\"\n                        alignItems=\"flex-end\"\n                        spacing = {3}\n                        >\n                            <Grid item>\n                                    {getCalendarTitleFromMode(mode)}\n                            </Grid>\n                            {mode === 'day' && (\n                                        <Grid item>\n                                                <TextField\n                                                    variant=\"standard\"\n                                                    style={{marginBottom : \"5px\"}}\n                                                    value={filter}\n                                                    onChange={filterChanged}\n                                                    margin=\"normal\"\n                                                    size=\"small\"\n                                                    id=\"filter\"\n                                                    label=\"Filter\"\n                                                    name=\"filter\"\n                                                    autoComplete=\"off\"\n                                                    InputProps={{\n                                                        endAdornment : \n                                                            <InputAdornment position=\"end\">\n                                                                <Tooltip title=\"Clear\">\n                                                                            <IconButton\n                                                                            aria-label=\"remove filter\"\n                                                                            onClick={() => removeFilter()}\n                                                                            onMouseDown={() => removeFilter()}\n                                                                        >\n                                                                            <CloseIcon/>\n                                                                        </IconButton>\n                                                                </Tooltip>\n                                                            \n                                                            </InputAdornment>\n                                                          \n                                                    }}\n                                                   \n                                                />\n                                        </Grid>\n                            )}\n                           \n                    </Grid>\n                \n            </Grid>\n\n            <Grid item md={3}>\n                <div  style={{display:\"flex\", alignItems: \"flex-end\", justifyContent: \"flex-end\", paddingRight: \"10px\" }}>\n                    <ToggleButtonGroup\n                        value={selectedTab}\n                        exclusive\n                        onChange={handleTabChanged}\n                        aria-label=\"select view mode\"\n                    >\n                        <ToggleButton style={selectedTab === 'month' ? {width: \"80px\", color: \"#3f51b5\", backgroundColor: \"#ebedf7\" } : {width: \"80px\"}} value=\"month\" aria-label=\"month view\">\n                                month\n                        </ToggleButton>\n                        <ToggleButton style={selectedTab === 'week' ? {width: \"80px\", color: \"#3f51b5\", backgroundColor: \"#ebedf7\"} : {width: \"80px\"}}  value=\"week\" aria-label=\"week view\">\n                                week\n                        </ToggleButton>\n                        <ToggleButton style={selectedTab === 'day' ? {width: \"80px\", color: \"#3f51b5\", backgroundColor: \"#ebedf7\"} : {width: \"80px\"}} value=\"day\" aria-label=\"day view\">\n                                day\n                        </ToggleButton>\n                    </ToggleButtonGroup>\n                </div>\n            </Grid>\n\n           </Grid> \n\n             {getContentFromMode(mode)}\n\n        </React.Fragment>\n\n\n    );\n\n}","import axios from 'axios';\nimport { authToken, backendAPI } from '../../GlobalPath';\n\nexport default axios.create({\n  baseURL: backendAPI,\n  headers : {\n      'Authorization' : authToken,\n       'Content-Type': 'application/json',\n  }\n});","import API from './api';\nimport axiosRetry from 'axios-retry';\n\nexport default class BookService {\n\n\n   static addNewBooking = (payload) =>\n   {\n      return API.post(`/api/std/book/addnewbooking`, payload);\n   }\n   \n   static sendRegFormEmail = (bookingId) =>\n   {\n      return API.post(`/api/std/book/sendregformemail?id=${bookingId}`);\n   }\n   static payBooking = (bookingId,price, paymentMethod, corporate) =>\n   {\n      return API.post(`/api/std/book/paybooking?id=${bookingId}&paymentmethod=${paymentMethod}&corporate=${corporate}&price=${price}`);\n   }\n\n   static unPayBooking = (bookingId) =>\n   {\n      return API.post(`/api/std/book/unpaybooking?id=${bookingId}`);\n   }\n\n   static getShouldRefundsCount = () =>\n   {\n      return API.get(`/api/std/book/getshouldrefundscount?`);\n   }\n\n   \n\n   static refundBooking = (bookingId) =>\n   {\n      return API.post(`/api/std/payment/refundpayment`, {bookingId: bookingId});\n   }\n\n   static getBookingsStatsByDateStr = (dateStr) =>\n   {\n      return API.get(`/api/std/book/getbookingsstatsbydatestr?date=${dateStr}`);\n   }\n\n   static getBookingsCountByDateStr = (dateStr) =>\n   {\n      return API.get(`/api/std/book/getbookingscountbydatestr?date=${dateStr}`);\n   }\n\n   static getAllBookingsCountAll = () =>\n   {\n      return API.get(`/api/std/book/getallbookingscountall`);\n   }\n\n   static getBookingsCountByDateStrandTime = (dateStr, time, source) =>\n   {\n      return API.get(`/api/std/book/getbookingscountbydatestrandtime?date=${dateStr}&time=${time}`, {cancelToken: source.token});\n   }\n\n   static getBookingsByDateStrandTime = (dateStr, time) =>\n   {\n      return API.get(`/api/std/book/getbookingsbydatestrandtime?date=${dateStr}&time=${time}`);\n   }\n\n\n   static getAllBookingsCountByDateStr = (dateStr) =>\n   {\n      return API.get(`/api/std/book/getallbookingscountbydatestr?date=${dateStr}`);\n   }\n\n   static getAllBookingsCountByDateStrandTime = (dateStr, time, source) =>\n   {\n      return API.get(`/api/std/book/getallbookingscountbydatestrandtime?date=${dateStr}&time=${time}`, {cancelToken: source.token});\n   }\n\n   static getAllBookingsByDateStrandTime = (dateStr, time) =>\n   {\n      return API.get(`/api/std/book/getallbookingsbydatestrandtime?date=${dateStr}&time=${time}`);\n   }\n\n   static changeBackToBookingMade = (id) =>\n   {\n      return API.post(`/api/std/book/changebacktobookingmade?id=${id}`);\n   }\n\n   static changeToPatientAttended = (id) =>\n   {\n      return API.post(`/api/std/book/changetopatientattended?id=${id}`);\n   }\n\n   static updateBooking = (payload) =>\n   {\n      return API.post(`/api/std/book/updatebookappointment`, payload);\n   } \n\n   static updateBookingTime = (payload) =>\n   {\n      return API.post(`/api/std/book/updatebookappointmenttime`, payload);\n   } \n\n   static deleteBooking = (id) =>\n   {\n      return API.post(`/api/std/book/deletebookappointment?id=${id}`);\n   } \n\n   static unDeleteBooking = (id) =>\n   {\n      return API.post(`/api/std/book/undeletebookappointment?id=${id}`);\n   } \n   \n    static getBookingsByRef = (ref) =>\n    {\n       return API.get(`/api/std/book/getbookingsbyref?ref=${ref}`);\n    }\n\n    static getBookingById = (id) =>\n    {\n       return API.get(`/api/std/book/getbookingbyid?id=${id}`);\n    }\n\n    static getAllBookings = (limit) =>\n    {\n      if (!limit) limit = 25 \n      return API.get(`/api/std/book/getallbookings?limit=${limit}`);\n    }\n\n    static getDeletedBookings= (limit) =>\n    {\n      if (!limit) limit = 25 \n       return API.get(`/api/std/book/getdeletedbookings?limit=${limit}`);\n    }\n\n    static getTodayBookings= () =>\n    {\n       return API.get(`/api/std/book/gettodaybookings`);\n    }\n\n    static getOldBookings= (limit) =>\n    {\n      if (!limit) limit = 25 \n       return API.get(`/api/std/book/getoldbookings?limit=${limit}`);\n    }\n\n    static getFutureBookings= (limit) =>\n    {\n      if (!limit) limit = 25 \n       return API.get(`/api/std/book/getfuturebookings?limit=${limit}`);\n    }\n\n    static getRecentBookings= () =>\n    {\n       return API.get(`/api/std/book/getrecentbookings`);\n    }\n\n    static getRecentBookingsAll= (limit) =>\n    {\n      if (!limit) limit = 25 \n       return API.get(`/api/std/book/getrecentbookingsall?limit=${limit}`);\n    }\n}","import API from './api';\n\nexport default class PDFService {\n\n\n    static downloadSTDRegForm = (id) =>\n    {\n       return API.get(`/api/pdf/downloadstdregform?id=${id}`, {\n        responseType: 'arraybuffer',\n        id: id,\n        headers: {\n            Accept: 'application/pdf',\n        }\n        });\n    }\n\n}","import React, { useEffect, useRef, useState } from \"react\";\nimport BookService from \"./services/BookService\";\nimport Typography from \"@material-ui/core/Typography\";\nimport {\n  Backdrop,\n  Button,\n  Checkbox,\n  CircularProgress,\n  Divider,\n  FormControlLabel,\n  Grid,\n  InputAdornment,\n  InputLabel,\n  Link,\n  makeStyles,\n  MenuItem,\n  Select,\n  TextField,\n  Tooltip,\n} from \"@material-ui/core\";\nimport GlobalState from \"../GlobalState\";\nimport { withStyles } from \"@material-ui/core/styles\";\n\nimport CreditCardIcon from \"@material-ui/icons/CreditCard\";\n\nimport Dialog from \"@material-ui/core/Dialog\";\nimport DialogContent from \"@material-ui/core/DialogContent\";\n\nimport DialogTitle from \"@material-ui/core/DialogTitle\";\nimport Draggable from \"react-draggable\";\nimport Paper from \"@material-ui/core/Paper\";\n\nimport Alert from \"@material-ui/lab/Alert\";\n\nimport PropTypes from \"prop-types\";\nimport LinearProgress from \"@material-ui/core/LinearProgress\";\nimport Box from \"@material-ui/core/Box\";\n\nimport Radio from \"@material-ui/core/Radio\";\nimport RadioGroup from \"@material-ui/core/RadioGroup\";\nimport FormControl from \"@material-ui/core/FormControl\";\nimport FormLabel from \"@material-ui/core/FormLabel\";\nimport { corporates } from \"./Corporates\";\nimport NumberFormat from \"react-number-format\";\n\n\nvar interval;\n\nconst useStyles = makeStyles((theme) => ({\n  title: {\n    marginTop: theme.spacing(0),\n    marginBottom: theme.spacing(1),\n  },\n\n  refreshButton: {\n    marginLeft: theme.spacing(2),\n  },\n\n  checkIcon: {\n    color: \"green\",\n  },\n\n  closeIcon: {\n    color: \"red\",\n  },\n\n  RefLink: {\n    cursor: \"pointer\",\n  },\n\n  BookedLabel: {\n    backgroundColor: \"#606060\",\n    color: \"#fff\",\n    paddingRight: \"10px\",\n    paddingLeft: \"10px\",\n  },\n\n  PatientAttendedLabel: {\n    backgroundColor: \"#0066aa\",\n    color: \"#fff\",\n    paddingRight: \"15px\",\n    paddingLeft: \"10px\",\n  },\n\n  SampleTakenLabel: {\n    backgroundColor: \"#0066cc\",\n    color: \"#fff\",\n    paddingRight: \"40px\",\n    paddingLeft: \"10px\",\n  },\n\n  ReportSentLabel: {\n    backgroundColor: \"#009900\",\n    color: \"#fff\",\n    paddingRight: \"90px\",\n    paddingLeft: \"10px\",\n  },\n\n  ReportCertSentLabel: {\n    backgroundColor: \"#009900\",\n    color: \"#fff\",\n    paddingRight: \"68px\",\n    paddingLeft: \"10px\",\n  },\n\n  archiveButton: {},\n\n  smartMatchButton: {\n    backgroundColor: \"#2f942e\",\n    \"&:hover\": {\n      background: \"green\",\n      color: \"#fff\",\n    },\n    textDecoration: \"none !important\",\n    marginRight: \"10px\",\n    // padding: \"10px\"\n  },\n\n  infoTitle: {\n    fontWeight: \"400\",\n  },\n\n  infoData: {\n    paddingLeft: \"10px\",\n    fontWeight: \"800\",\n  },\n\n  matchButton: {\n    marginTop: \"30px\",\n    marginBottom: \"20px\",\n    backgroundColor: \"#2f942e\",\n    \"&:hover\": {\n      background: \"green\",\n      color: \"#fff\",\n    },\n    textDecoration: \"none !important\",\n    padding: \"10px\",\n    paddingLeft: \"50px\",\n    paddingRight: \"50px\",\n  },\n\n  resendButton: {\n    marginTop: \"5px\",\n    marginBottom: \"5px\",\n    backgroundColor: \"#2f942e\",\n    \"&:hover\": {\n      background: \"green\",\n      color: \"#fff\",\n    },\n    textDecoration: \"none !important\",\n    padding: \"10px\",\n    paddingLeft: \"50px\",\n    paddingRight: \"50px\",\n  },\n\n  resendFilesButton: {\n    marginTop: \"5px\",\n    marginBottom: \"5px\",\n    backgroundColor: \"#3792ad\",\n    \"&:hover\": {\n      background: \"#2f798f\",\n      color: \"#fff\",\n    },\n    textDecoration: \"none !important\",\n    padding: \"10px\",\n    paddingLeft: \"50px\",\n    paddingRight: \"50px\",\n  },\n\n  cancelButton: {\n    marginBottom: \"10px\",\n    textDecoration: \"none !important\",\n    padding: \"10px\",\n    paddingLeft: \"90px\",\n    paddingRight: \"90px\",\n  },\n  backdrop: {\n    zIndex: theme.zIndex.drawer + 5,\n    color: \"#fff\",\n  },\n}));\n\nfunction NumberFormatCustom(props) {\n  const { inputRef, onChange, ...other } = props;\n\n  return (\n    <NumberFormat\n      {...other}\n      getInputRef={inputRef}\n      onValueChange={(values) => {\n        onChange({\n          target: {\n            name: props.name,\n            value: values.value,\n          },\n        });\n      }}\n      thousandSeparator\n      isNumericString\n      prefix=\"\"\n    />\n  );\n}\n\nNumberFormatCustom.propTypes = {\n  inputRef: PropTypes.func.isRequired,\n  name: PropTypes.string.isRequired,\n  onChange: PropTypes.func.isRequired,\n};\n\n\nconst BorderLinearProgress = withStyles((theme) => ({\n  root: {\n    height: 10,\n    borderRadius: 5,\n  },\n  colorPrimary: {\n    backgroundColor: \"#cedbce\", //theme.palette.grey[theme.palette.type === 'light' ? 200 : 700],\n  },\n  bar: {\n    borderRadius: 5,\n    backgroundColor: \"#2f942e\",\n  },\n}))(LinearProgress);\nfunction LinearProgressWithLabel(props) {\n  return (\n    <Box display=\"flex\" alignItems=\"center\">\n      <Box width=\"100%\" mr={1}>\n        <BorderLinearProgress variant=\"determinate\" {...props} />\n      </Box>\n      <Box minWidth={35}>\n        <Typography\n          style={{ fontWeight: \"800\", color: \"#5e855e\" }}\n          variant=\"body2\"\n          color=\"textSecondary\"\n        >{`${Math.round(props.value)}%`}</Typography>\n      </Box>\n    </Box>\n  );\n}\n\nLinearProgressWithLabel.propTypes = {\n  /**\n   * The value of the progress indicator for the determinate and buffer variants.\n   * Value between 0 and 100.\n   */\n  value: PropTypes.number.isRequired,\n};\n\nfunction PaperComponent(props) {\n  return (\n    <Draggable\n      handle=\"#draggable-dialog-title\"\n      cancel={'[class*=\"MuiDialogContent-root\"]'}\n    >\n      <Paper {...props} />\n    </Draggable>\n  );\n}\n\nexport default function PayDialog(props) {\n  const classes = useStyles();\n\n  const [state, setState] = React.useContext(GlobalState);\n  const [paymentMethod, setPaymentMethod] = useState(\"credit card\");\n  const [corporate, setCorporate] = useState(corporates[0]);\n  const [saving, setSaving] = useState(false);\n\n  const [price, setPrice] = useState(\"\");\n  const [priceError, setPriceError] = useState(false);\n\n  useEffect( () => {\n    if (props.price)\n    {\n      setPrice(`${props.price}`)\n    }else\n    {\n      setPrice('')\n    }\n  }, [props.price, props.open])\n\n  const priceChanged = (event) =>\n  {\n    setPrice(event.target.value)\n    setPriceError(false)\n  }\n\n  const paymentMethodChanged = (event) => {\n    setPaymentMethod(event.target.value);\n  };\n\n  const handleClose = () => {\n    if (saving) return;\n\n    props.handleClose();\n    setPaymentMethod(\"credit card\");\n    setPrice('')\n    setCorporate(corporates[0]);\n    setSaving(false);\n  };\n\n  const corporateChanged = (event) => {\n    setCorporate(event.target.value);\n  };\n\n  const payClicked = async () => {\n\n\n    if (!price || price.trim().length === 0 || price === '0')\n    {\n      setPriceError(true)\n      return\n    }\n\n    setSaving(true);\n\n  \n\n    try {\n      await BookService.payBooking(\n        props.booking._id,\n        price,\n        paymentMethod,\n        paymentMethod === \"corporate\" ? corporate : \"\"\n      );\n      setSaving(false);\n      setState((state) => ({\n        ...state,\n        bookingPayChanged: !state.bookingPayChanged ? true : false,\n      }));\n      handleClose();\n    } catch (err) {\n      console.error(err);\n      setSaving(false);\n    }\n  };\n\n  return (\n    <React.Fragment>\n      {props.booking && (\n        <React.Fragment>\n          <Dialog\n            maxWidth=\"xs\"\n            open={props.open}\n            onClose={handleClose}\n            PaperComponent={PaperComponent}\n            aria-labelledby=\"form-dialog-title\"\n          >\n            <DialogTitle id=\"draggable-dialog-title\">\n              <Grid\n                container\n                spacing={2}\n                direction=\"row\"\n                justify=\"center\"\n                alignItems=\"center\"\n              >\n                <Grid item>\n                  <CreditCardIcon\n                    style={{ color: \"#f50057\", fontSize: \"3rem\" }}\n                  />\n                </Grid>\n\n                <Grid item>\n                  <div\n                    style={{\n                      color: \"#f50057\",\n                      paddingBottom: \"10px\",\n                      fontWeight: \"800\",\n                    }}\n                  >\n                    {\" \"}\n                    PAY the CHARGE{\" \"}\n                  </div>\n                </Grid>\n              </Grid>\n\n              <Divider />\n            </DialogTitle>\n            <DialogContent>\n              <div\n                style={{\n                  height: \"300px\",\n                }}\n              >\n                <Grid\n                  container\n                  direction=\"column\"\n                  justify=\"space-between\"\n                  spacing={2}\n                  alignItems=\"flex-start\"\n                >\n                  <Grid item>\n                  <TextField\n                                autoFocus\n                                error={priceError}\n                                label=\"TOTAL Charges\"\n                                value={price}\n                                fullWidth\n                                required\n                                onChange={priceChanged}\n                                name=\"product-price\"\n                                id=\"product-price-id\"\n                                InputProps={{\n                                  inputComponent: NumberFormatCustom,\n                                  startAdornment: (\n                                    <InputAdornment position=\"start\">\n                                      £\n                                    </InputAdornment>\n                                  ),\n                                }}\n                              />\n\n                  </Grid>\n\n                  <Grid item>\n                    <div style={{ fontSize: \"17px\" }}>\n                      {\" \"}\n                      How do you want to pay?{\" \"}\n                    </div>\n                  </Grid>\n\n                  <Grid item>\n                    <FormControl component=\"fieldset\">\n                      <RadioGroup\n                        aria-label=\"paymentMethod\"\n                        name=\"paymentMethod\"\n                        value={paymentMethod}\n                        onChange={paymentMethodChanged}\n                      >\n                        <FormControlLabel\n                          value=\"credit card\"\n                          control={<Radio />}\n                          label=\"Credit Card\"\n                        />\n                        <FormControlLabel\n                          value=\"cash\"\n                          control={<Radio />}\n                          label=\"Cash\"\n                        />\n                        <FormControlLabel\n                          value=\"corporate\"\n                          control={<Radio />}\n                          label=\"Corporate\"\n                        />\n                      </RadioGroup>\n\n                      {paymentMethod === \"corporate\" && (\n                        <FormControl\n                          style={{ marginTop: \"10px\" }}\n                          className={classes.formControl}\n                        >\n                          <Select\n                            labelId=\"select-corporate\"\n                            id=\"select-corporate-id\"\n                            value={corporate}\n                            onChange={corporateChanged}\n                          >\n                            {corporates.map((element) => (\n                              <MenuItem\n                                value={element}\n                              >{`${element}`}</MenuItem>\n                            ))}\n                          </Select>\n                        </FormControl>\n                      )}\n                    </FormControl>\n                  </Grid>\n                </Grid>\n\n                <Grid item></Grid>\n\n                <div\n                  style={{\n                    position: \"absolute\",\n                    bottom: \"20px\",\n                    right: \"20px\",\n                  }}\n                >\n                  <Grid\n                    container\n                    direction=\"row\"\n                    justify=\"flex-end\"\n                    alignItems=\"center\"\n                    spacing={1}\n                  >\n                    <Grid item>\n                      <Button\n                        onClick={handleClose}\n                        style={{ width: \"100px\" }}\n                        disabled={saving}\n                      >\n                        back\n                      </Button>\n                    </Grid>\n                    <Grid item>\n                      <Button\n                        onClick={payClicked}\n                        variant=\"contained\"\n                        color=\"secondary\"\n                        style={{ width: \"100px\" }}\n                        disabled={saving}\n                      >\n                        Pay\n                      </Button>\n                    </Grid>\n                  </Grid>\n                </div>\n              </div>\n\n              <Backdrop className={classes.backdrop} open={saving}>\n                <CircularProgress color=\"inherit\" />\n              </Backdrop>\n            </DialogContent>\n          </Dialog>\n        </React.Fragment>\n      )}\n    </React.Fragment>\n  );\n}\n","import React, { useEffect, useState } from \"react\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport GlobalState from \"../GlobalState\";\nimport Grid from \"@material-ui/core/Grid\";\nimport {\n  Button,\n  Checkbox,\n  DialogActions,\n  DialogContentText,\n  Divider,\n  FormControlLabel,\n  IconButton,\n  TextField,\n  Tooltip,\n} from \"@material-ui/core\";\nimport PDFService from \"./services/PDFService\";\n\nimport { calculatePrice } from \"./PriceCalculator\";\n\nimport bookingService from \"./services/BookService\";\nimport CheckIcon from \"@material-ui/icons/Check\";\nimport CloseIcon from \"@material-ui/icons/Close\";\n\nimport Dialog from \"@material-ui/core/Dialog\";\nimport DialogContent from \"@material-ui/core/DialogContent\";\nimport DialogTitle from \"@material-ui/core/DialogTitle\";\nimport Draggable from \"react-draggable\";\nimport Slide from \"@material-ui/core/Slide\";\n\nimport Paper from \"@material-ui/core/Paper\";\n\nimport DeleteIcon from \"@material-ui/icons/Delete\";\nimport BookService from \"./services/BookService\";\n\nimport Backdrop from \"@material-ui/core/Backdrop\";\nimport CircularProgress from \"@material-ui/core/CircularProgress\";\nimport {\n  FormatDateFromString,\n  RevertFormatDateFromString,\n} from \"./DateFormatter\";\nimport PayDialog from \"./PayDialog\";\n\nimport PrintIcon from \"@material-ui/icons/Print\";\nimport UndoIcon from \"@material-ui/icons/Undo\";\n\nimport SendIcon from \"@material-ui/icons/Send\";\n\nimport HistoryIcon from \"@material-ui/icons/History\";\n\nimport FileCopyOutlinedIcon from \"@material-ui/icons/FileCopyOutlined\";\nimport { CalendarColors } from \"../Admin/calendar-admin/colors\";\nimport InvoiceService from \"../services/InvoiceService\";\nimport InvoiceDialog from \"../InvoiceDialog\";\n\nconst useStyles = makeStyles((theme) => ({\n  box: {\n    backgroundColor: \"#373737\",\n    color: \"#fff\",\n    padding: \"1px\",\n    borderRadius: \"4px\",\n    textAlign: \"justify\",\n    paddingRight: \"40px\",\n  },\n\n  boxRed: {\n    backgroundColor: \"#dc2626\",\n    color: \"#fff\",\n    padding: \"1px\",\n    borderRadius: \"4px\",\n    textAlign: \"justify\",\n    paddingRight: \"40px\",\n  },\n\n  boxInfo: {\n    textAlign: \"justify\",\n    backgroundColor: \"#fafafa\",\n    color: \"#333\",\n    padding: \"1px\",\n    borderRadius: \"4px\",\n    paddingRight: \"40px\",\n    border: \"1px solid #eee\",\n  },\n\n  ul: {\n    listStyle: \"none\",\n    padding: \"0\",\n    margin: \"0\",\n  },\n\n  li: {\n    marginBottom: \"15px\",\n  },\n\n  icon: {\n    marginRight: \"8px\",\n  },\n\n  root: {\n    width: \"100%\",\n  },\n\n  lineThrough: {\n    textDecoration: \"line-through\",\n  },\n\n  heading: {\n    fontSize: theme.typography.pxToRem(15),\n    flexBasis: \"33.33%\",\n    flexShrink: 0,\n    color: theme.palette.text.secondary,\n  },\n  secondaryHeading: {\n    fontSize: theme.typography.pxToRem(15),\n  },\n\n  infoDetails: {\n    textAlign: \"left\",\n  },\n\n  infoTitle: {\n    fontWeight: \"800\",\n    marginRight: \"10px\",\n  },\n\n  infoData: {\n    fontWeight: \"400\",\n  },\n\n  title: {\n    textAlign: \"center\",\n    fontWeight: \"600\",\n    marginLeft: \"10px\",\n    marginBottom: \"5px\",\n  },\n\n  Accordion: {\n    backgroundColor: \"#f5f5f5\",\n    color: \"#222\",\n  },\n\n  AccordionDeleted: {\n    backgroundColor: \"#aaa\",\n    color: \"#555\",\n  },\n\n  DownloadForm: {\n    marginTop: \"10px\",\n    marginBottom: \"10px\",\n  },\n\n  infoDataCharges: {\n    fontSize: \"18px\",\n    color: \"green\",\n    fontWeight: \"600\",\n  },\n\n  infoDataChargesHigher: {\n    fontSize: \"18px\",\n    color: \"red\",\n    fontWeight: \"600\",\n  },\n  BookedLabel: {\n    color: \"#606060\",\n    paddingLeft: \"5px\",\n    paddingBottom: \"3px\",\n    paddingTop: \"3px\",\n    fontWeight: \"800\",\n    borderLeft: \"5px solid\",\n    borderColor: \"#606060\",\n    width: \"150px\",\n    display: \"inline-block\",\n  },\n\n  PatientAttendedLabel: {\n    color: \"#0066aa\",\n    paddingLeft: \"5px\",\n    paddingBottom: \"3px\",\n    paddingTop: \"3px\",\n    fontWeight: \"800\",\n    borderLeft: \"5px solid\",\n    borderColor: \"#0066aa\",\n    width: \"150px\",\n    display: \"inline-block\",\n  },\n\n  SampleTakenLabel: {\n    color: \"#0066cc\",\n    paddingRight: \"10px\",\n    paddingLeft: \"5px\",\n    paddingBottom: \"3px\",\n    paddingTop: \"3px\",\n    fontWeight: \"800\",\n    borderLeft: \"5px solid\",\n    borderColor: \"#0066cc\",\n  },\n\n  ReportSentLabel: {\n    color: \"#009900\",\n    paddingRight: \"10px\",\n    paddingLeft: \"5px\",\n    paddingBottom: \"3px\",\n    paddingTop: \"3px\",\n    fontWeight: \"800\",\n    borderLeft: \"5px solid\",\n    borderColor: \"#009900\",\n  },\n\n  ReportCertSentLabel: {\n    color: \"#009900\",\n    paddingRight: \"10px\",\n    paddingLeft: \"5px\",\n    paddingBottom: \"3px\",\n    paddingTop: \"3px\",\n    fontWeight: \"800\",\n    borderLeft: \"5px solid\",\n    borderColor: \"#009900\",\n  },\n\n  PositiveLabel: {\n    color: \"red\",\n    paddingRight: \"10px\",\n    paddingLeft: \"5px\",\n    paddingBottom: \"3px\",\n    paddingTop: \"3px\",\n    fontWeight: \"800\",\n    borderLeft: \"5px solid\",\n    borderColor: \"red\",\n  },\n\n  EditButton: {\n    marginBottom: \"20px\",\n    backgroundColor: \"#2f942e\",\n    \"&:hover\": {\n      background: \"green\",\n      color: \"#fff\",\n    },\n    textDecoration: \"none !important\",\n    padding: \"10px\",\n  },\n\n  ResendEmailsButton: {\n    // marginBottom : \"20px\",\n    color: \"#2f942e\",\n    borderColor: \"#2f942e\",\n    \"&:hover\": {\n      background: \"#fafffa\",\n      borderColor: \"#2f942e\",\n    },\n    textDecoration: \"none !important\",\n    paddingLeft: \"50px\",\n    paddingRight: \"50px\",\n  },\n\n  PayButton: {\n    marginLeft: \"70px\",\n    width: \"300px\",\n  },\n\n  PayLabel: {\n    marginLeft: \"20px\",\n\n    color: \"#2f942e\",\n    fontWeight: \"500\",\n    textAlign: \"center\",\n  },\n\n  RestoreButton: {\n    marginBottom: \"20px\",\n    backgroundColor: \"#eee\",\n    color: \"#333\",\n    \"&:hover\": {\n      background: \"#f1f1f1\",\n      color: \"#111\",\n    },\n    textDecoration: \"none !important\",\n    padding: \"10px\",\n  },\n\n  DeleteButton: {\n    marginBottom: \"20px\",\n    backgroundColor: \"#d90015\",\n    \"&:hover\": {\n      background: \"#b80012\",\n      color: \"#fff\",\n    },\n\n    padding: \"10px\",\n  },\n\n  SaveButton: {\n    marginBottom: \"10px\",\n    padding: \"10px\",\n\n    backgroundColor: \"#d1175e\",\n    \"&:hover\": {\n      background: \"#bd0d50\",\n      color: \"#fff\",\n    },\n  },\n\n  CancelButton: {\n    marginBottom: \"20px\",\n    // padding: \"10px\"\n  },\n\n  TextBox: {\n    padding: \"0px\",\n  },\n\n  checkIcon: {\n    color: \"green\",\n  },\n\n  checkIconSmall: {\n    color: \"green\",\n    paddingTop: \"5px\",\n  },\n\n  closeIcon: {\n    color: \"red\",\n  },\n\n  centeredLabel: {\n    display: \"flex\",\n    alignItems: \"center\",\n  },\n\n  backdrop: {\n    zIndex: theme.zIndex.drawer + 5,\n    color: \"#fff\",\n  },\n\n  invoiceNumber: {\n    display: \"inline-block\",\n    fontWeight: \"500\",\n    width: \"72px\",\n    fontSize: \"1rem\",\n    color: theme.palette.primary.main,\n  },\n\n  printInvoiceButton: {\n    marginLeft: \"70px\",\n    fontSize: \"0.8rem\",\n    // width: \"300px\",\n  },\n\n  editInvoiceButton: {\n    marginLeft: \"10px\",\n    fontSize: \"0.8rem\",\n  },\n}));\n\nconst Transition = React.forwardRef(function Transition(props, ref) {\n  return <Slide direction=\"up\" ref={ref} {...props} />;\n});\n\nfunction PaperComponent(props) {\n  return (\n    <Draggable\n      handle=\"#alert-dialog-slide-title\"\n      cancel={'[class*=\"MuiDialogContent-root\"]'}\n    >\n      <Paper {...props} />\n    </Draggable>\n  );\n}\n\nexport default function BookingDialog(props) {\n  const classes = useStyles();\n\n  const [state, setState] = React.useContext(GlobalState);\n\n  const [copied, setCopied] = useState(false);\n\n  const [emailSent, setEmailSent] = React.useState(false);\n\n  const [openResendDialog, setOpenResendDialog] = React.useState(false);\n  const [openPayDialog, setOpenPayDialog] = React.useState(false);\n  const [openRefundDialog, setOpenRefundDialog] = React.useState(false);\n\n  const [selectedBooking, setSelectedBooking] = React.useState(null);\n\n  const [editMode, setEditMode] = React.useState({ edit: false, person: null });\n  const [deleteMode, setDeleteMode] = React.useState({\n    delete: false,\n    person: null,\n  });\n  const [restoreMode, setRestoreMode] = React.useState({\n    restore: false,\n    person: null,\n  });\n\n  const [saving, setSaving] = React.useState(false);\n  const [deleting, setDeleting] = React.useState(false);\n  const [restoring, setRestoring] = React.useState(false);\n\n  const [validationError, setValidationError] = React.useState({});\n\n  const [bookingDate, setBookingDate] = React.useState(\"\");\n  const [bookingTime, setBookingTime] = React.useState(\"\");\n\n  const [fullname, setFullname] = React.useState(\"\");\n  const [email, setEmail] = React.useState(\"\");\n  const [tel, setTel] = React.useState(\"\");\n  const [notes, setNotes] = React.useState(\"\");\n  const [service, setService] = React.useState(\"\");\n\n  const [refreshData, setRefreshData] = React.useState(false);\n\n  const [booking, setBooking] = React.useState(null);\n\n  const [recordChanged, setRecordChanged] = React.useState(false);\n\n  const [fieldChanged, setFieldChanged] = React.useState(false);\n\n  const [openUndoPayDialog, setOpenUndoPayDialog] = React.useState(false);\n\n  const [openTimeStampDialog, setOpenTimeStampDialog] = React.useState(false);\n\n  const handleCloseTimeStampDialog = () => {\n    setOpenTimeStampDialog(false);\n    setSelectedBooking(null);\n  };\n\n  const handleCloseUndoPayDialog = () => {\n    setOpenUndoPayDialog(false);\n    setSelectedBooking(null);\n  };\n\n  const handleCloseResendDialog = () => {\n    setOpenResendDialog(false);\n    setSelectedBooking(null);\n  };\n\n  const handleClosePayDialog = () => {\n    setOpenPayDialog(false);\n    setSelectedBooking(null);\n  };\n\n  const handleCloseRefundDialog = () => {\n    setOpenRefundDialog(false);\n    setSelectedBooking(null);\n  };\n\n  useEffect(() => {\n    if (booking) {\n      const isChanged =\n        bookingDate !== FormatDateFromString(booking.bookingDate) ||\n        bookingTime !== booking.bookingTime ||\n        fullname !== booking.fullname ||\n        email !== booking.email ||\n        tel !== booking.phone ||\n        notes !== booking.notes ||\n        service !== booking.packageName;\n\n      setRecordChanged(isChanged);\n    }\n  }, [fieldChanged]);\n\n  useEffect(() => {\n    if (!props.open) {\n      setTimeout(() => {\n        setEditMode({ edit: false, person: null });\n        setRecordChanged(false);\n      }, 500);\n    }\n  }, [props.open]);\n\n  const bookingDateChanged = (event) => {\n    setBookingDate(event.target.value);\n    setValidationError({ ...validationError, bookingDateError: false });\n    setFieldChanged(!fieldChanged);\n  };\n\n  const bookingTimeChanged = (event) => {\n    setBookingTime(event.target.value);\n    setValidationError({ ...validationError, bookingTimeError: false });\n    setFieldChanged(!fieldChanged);\n  };\n\n  const fullnameChanged = (event) => {\n    setFullname(event.target.value);\n    setFieldChanged(!fieldChanged);\n  };\n\n  const emailChanged = (event) => {\n    setEmail(event.target.value);\n    setFieldChanged(!fieldChanged);\n  };\n\n  const telChanged = (event) => {\n    setTel(event.target.value);\n    setFieldChanged(!fieldChanged);\n  };\n\n  const serviceChanged = (event) => {\n    setService(event.target.value);\n    setFieldChanged(!fieldChanged);\n  };\n\n  const notesChanged = (event) => {\n    setNotes(event.target.value);\n    setFieldChanged(!fieldChanged);\n  };\n\n  const getStatusLabel = (status) => {\n    if (status === \"booked\") {\n      return <div className={classes.BookedLabel}> Booking Made </div>;\n    } else if (status === \"patient_attended\") {\n      return (\n        <div className={classes.PatientAttendedLabel}> Patient Attended </div>\n      );\n    } else {\n      return \"Unknown\";\n    }\n  };\n\n  const handleEditModeChanged = (edit, person) => {\n    if (edit) {\n      setFullname(person.fullname);\n      setBookingDate(FormatDateFromString(person.bookingDate));\n      setBookingTime(person.bookingTime.toUpperCase());\n      setEmail(person.email);\n      setTel(person.phone);\n      setService(person.packageName);\n      if (person.notes) {\n        setNotes(person.notes);\n      }\n\n      setEditMode({ edit: edit, person: person });\n    } else if (!edit && !person) {\n      setEditMode({ edit: edit, person: person });\n      setRecordChanged(false);\n    } else if (!edit && person) {\n      const booking = {};\n      const bookingId = person._id;\n      booking.email = email;\n      booking.phone = tel;\n      booking.fullname = fullname;\n      booking.notes = notes;\n      booking.packageName = service;\n      booking.bookingDate = RevertFormatDateFromString(bookingDate);\n      booking.bookingTime = bookingTime;\n      booking.bookingRef = person.bookingRef;\n\n      if (validateBooking(booking)) {\n        updateBooking({ bookingId: bookingId, person: booking });\n      }\n    }\n  };\n\n  const validateDate = (str) => {\n    var error = false;\n    if (!str || str.length !== 10) {\n      error = true;\n    }\n\n    if (str.charAt(4) !== \"-\" || str.charAt(7) !== \"-\") {\n      error = true;\n    }\n\n    try {\n      const result = /^\\d{4}-\\d{2}-\\d{2}$/.test(str);\n      if (!result) {\n        error = true;\n      }\n\n      const year = parseInt(str.substr(0, 4));\n      const month = parseInt(str.substr(5, 2));\n      const day = parseInt(str.substr(8, 2));\n\n      if (year < 1900) {\n        error = true;\n      }\n\n      if (month < 1 || month > 12) {\n        error = true;\n      }\n\n      if (day > 31) {\n        error = true;\n      }\n    } catch (err) {\n      error = true;\n    }\n\n    return !error;\n  };\n\n  const validateTime = (str) => {\n    var error = false;\n\n    const result = /^\\d{2}:\\d{2} AM$|^\\d{2}:\\d{2} PM$/.test(str);\n    if (!result) {\n      error = true;\n    }\n\n    try {\n      const hour = parseInt(str.substr(0, 2));\n      const minute = parseInt(str.substr(3, 2));\n\n      if (hour < 0 || hour > 12) {\n        error = true;\n      }\n\n      if (minute < 0 || minute > 59) {\n        error = true;\n      }\n    } catch (err) {\n      error = true;\n    }\n\n    return !error;\n  };\n\n  const validateBooking = (booking) => {\n    var error = false;\n\n    if (!validateDate(booking.bookingDate)) {\n      error = true;\n      setValidationError({ ...validationError, bookingDateError: true });\n    }\n\n    if (!validateTime(booking.bookingTime)) {\n      error = true;\n      setValidationError({ ...validationError, bookingTimeError: true });\n    }\n    return !error;\n  };\n\n  const updateBooking = (payload) => {\n    setSaving(true);\n    bookingService\n      .updateBooking(payload)\n      .then((res) => {\n        setSaving(false);\n        setEditMode({ edit: false, person: null });\n        setRefreshData(!refreshData);\n      })\n      .catch((err) => {\n        setSaving(false);\n        setEditMode({ edit: false, person: null });\n        console.log(err);\n      });\n  };\n\n  const deleteBooking = (id) => {\n    setDeleting(true);\n    bookingService\n      .deleteBooking(id)\n      .then((res) => {\n        setDeleting(false);\n        setDeleteMode({ delete: false, person: null });\n        setRefreshData(!refreshData);\n      })\n      .catch((err) => {\n        setDeleting(false);\n        setDeleteMode({ delete: false, person: null });\n        console.log(err);\n      });\n  };\n\n  const restoreBooking = (id) => {\n    setRestoring(true);\n    bookingService\n      .unDeleteBooking(id)\n      .then((res) => {\n        setRestoring(false);\n        setRestoreMode({ restore: false, person: null });\n        setRefreshData(!refreshData);\n      })\n      .catch((err) => {\n        setRestoring(false);\n        setRestoreMode({ restore: false, person: null });\n        console.log(err);\n      });\n  };\n\n  const handleDeleteModeChanged = (del, person) => {\n    if (del) {\n      setDeleteMode({ delete: del, person: person });\n    } else if (!del && !person) {\n      setDeleteMode({ delete: del, person: person });\n    } else if (!del && person) {\n      deleteBooking(person._id);\n    }\n  };\n\n  const handleRestoreModeChanged = (restore, person) => {\n    if (restore) {\n      setRestoreMode({ restore: restore, person: person });\n    } else if (!restore && !person) {\n      setRestoreMode({ restore: restore, person: person });\n    } else if (!restore && person) {\n      restoreBooking(person._id);\n    }\n  };\n\n  const changeBackToBookingMade = (event, id) => {\n    setSaving(true);\n    BookService.changeBackToBookingMade(id)\n      .then((res) => {\n        setSaving(false);\n        setRefreshData(!refreshData);\n      })\n      .catch((err) => {\n        console.log(err);\n        setSaving(false);\n      });\n  };\n\n  const changeToPatientAttended = (event, id) => {\n    setSaving(true);\n    BookService.changeToPatientAttended(id)\n      .then((res) => {\n        setSaving(false);\n        setRefreshData(!refreshData);\n      })\n      .catch((err) => {\n        console.log(err);\n        setSaving(false);\n      });\n  };\n\n  const Pay = (event, id) => {\n    setSelectedBooking(booking);\n    setOpenPayDialog(true);\n  };\n\n  useEffect(() => {\n    if (props.booking) {\n      BookService.getBookingById(props.booking._id)\n        .then((res) => {\n          setBooking(res.data);\n        })\n        .catch((err) => {\n          console.log(err);\n        });\n\n      setState((state) => ({\n        ...state,\n        bookingDialogDataChanged: !state.bookingDialogDataChanged\n          ? true\n          : false,\n      }));\n    }\n  }, [refreshData, state.bookingPayChanged]);\n\n  useEffect(() => {\n    if (props.booking) {\n      setBooking(props.booking);\n    }\n  }, [props.booking]);\n\n  const undoPaymentClicked = async () => {\n    setSaving(true);\n    try {\n      await BookService.unPayBooking(booking._id);\n      setSaving(false);\n      setOpenUndoPayDialog(false);\n      setRefreshData(!refreshData);\n    } catch (err) {\n      console.error(err);\n      setSaving(false);\n      setOpenUndoPayDialog(false);\n    }\n  };\n\n  const refundPaymentClicked = async () => {\n    setSaving(true);\n    try {\n      await BookService.refundBooking(booking._id);\n      setSaving(false);\n      updateShouldRefundsCount();\n      setOpenRefundDialog(false);\n      setRefreshData(!refreshData);\n    } catch (err) {\n      console.error(err);\n      setSaving(false);\n      setOpenRefundDialog(false);\n    }\n  };\n\n  const updateShouldRefundsCount = async () => {\n    try {\n      const res = await BookService.getShouldRefundsCount();\n      if (res && res.data && res.data.status === \"OK\") {\n        setState((state) => ({ ...state, shouldRefunsCount: res.data.count }));\n      }\n    } catch (ex) {\n      console.error(ex);\n    }\n  };\n\n  const downloadRegForm = (id) => {\n    PDFService.downloadSTDRegForm(id)\n      .then((res) => {\n        const file = new Blob([res.data], { type: \"application/pdf\" });\n\n        const fileURL = URL.createObjectURL(file);\n        window.open(fileURL, \"_blank\");\n      })\n      .catch((err) => {\n        console.log(err);\n      });\n  };\n\n  const sendRegForm = (id) => {\n    setSaving(true);\n    setEmailSent(false);\n    BookService.sendRegFormEmail(id)\n      .then((res) => {\n        setSaving(false);\n        if (res.data.status === \"OK\") {\n          setEmailSent(true);\n        }\n      })\n      .catch((err) => {\n        console.log(err);\n        setSaving(false);\n      });\n  };\n\n  const onClose = () => {\n    setEmailSent(false);\n    setEmailSentInvoice(false);\n    setInvoice(null);\n\n    props.onClose();\n  };\n\n  ///*** Invoice  ******************/\n\n  const [invoice, setInvoice] = React.useState(null);\n  const [invoiceLoaded, setInvoiceLoaded] = React.useState(false);\n  const [openInvoiceDialog, setOpenInvoiceDialog] = React.useState(false);\n  const [emailSentInvoice, setEmailSentInvoice] = React.useState(false);\n\n  const fetchInvoice = async () => {\n    try {\n      setInvoiceLoaded(false);\n      const res = await InvoiceService.getInvoiceByBookingId(props.booking._id);\n      setInvoice(res.data.invoice);\n      setInvoiceLoaded(true);\n    } catch (err) {\n      setInvoiceLoaded(true);\n      console.error(err);\n    }\n  };\n\n  React.useEffect(() => {\n    if (props.booking) {\n      fetchInvoice();\n    }\n  }, [props.booking, props.open]);\n\n  const handleCloseInvoiceDialog = (refresh) => {\n    setOpenInvoiceDialog(false);\n    setSelectedBooking(null);\n    fetchInvoice();\n  };\n\n  const OpenInvoiceDialog = () => {\n    setSelectedBooking(booking);\n    setInvoice(invoice);\n    setOpenInvoiceDialog(true);\n  };\n\n  const downloadInvoice = (id) => {\n    InvoiceService.downloadInvoice(id)\n      .then((res) => {\n        const file = new Blob([res.data], { type: \"application/pdf\" });\n\n        const fileURL = URL.createObjectURL(file);\n        window.open(fileURL, \"_blank\");\n      })\n      .catch((err) => {\n        console.log(err);\n      });\n  };\n\n  const sendInvoiceEmail = (id, _email) => {\n    setSaving(true);\n    setEmailSentInvoice(false);\n    InvoiceService.emailInvoice(id, _email)\n      .then((res) => {\n        setSaving(false);\n        if (res.data.status === \"OK\") {\n          setEmailSentInvoice(true);\n        }\n      })\n      .catch((err) => {\n        console.log(err);\n        setSaving(false);\n      });\n  };\n\n  //***************************** */\n\n  return (\n    <React.Fragment>\n      {booking && (\n        <React.Fragment>\n          <Dialog\n            maxWidth=\"md\"\n            open={props.open}\n            TransitionComponent={Transition}\n            keepMounted\n            onClose={onClose}\n            PaperComponent={PaperComponent}\n            aria-labelledby=\"alert-dialog-slide-title\"\n            aria-describedby=\"alert-dialog-slide-description\"\n          >\n            <DialogTitle\n              id=\"alert-dialog-slide-title\"\n              style={\n                booking.tr ? { backgroundColor: \"#7e0082\", color: \"#fff\" } : {}\n              }\n            >\n              <div style={{ position: \"absolute\", top: \"25x\", left: \"25px\" }}>\n                <Tooltip title=\"COPY EDIT LINK TO CLIPBOARD\">\n                  <IconButton\n                    onClick={() => {\n                      navigator.clipboard.writeText(\n                        `https://londonmedicalclinic.co.uk/medicalexpressclinic/user/edit/std/${booking._id}`\n                      );\n                      setCopied(true);\n                      setTimeout(() => {\n                        setCopied(false);\n                      }, 1500);\n                    }}\n                    aria-label=\"delete\"\n                    className={classes.margin}\n                    size=\"small\"\n                  >\n                    <FileCopyOutlinedIcon\n                      style={booking.tr ? { color: \"#ddd\" } : {}}\n                      fontSize=\"14px\"\n                    />\n                  </IconButton>\n                </Tooltip>\n\n                <span\n                  hidden={!copied}\n                  style={{ fontSize: \"12px\", transition: \"all 1s ease-in\" }}\n                >\n                  {\" \"}\n                  Copied{\" \"}\n                </span>\n              </div>\n\n              <div\n                style={{\n                  position: \"absolute\",\n                  top: \"25x\",\n                  right: \"60px\",\n                  backgroundColor: CalendarColors.STD_COLOR,\n                  color: \"#fff\",\n                  padding: \"0px 5px\",\n                  borderRadius: \"10px\",\n                }}\n              >\n                STD\n              </div>\n\n              <Grid\n                container\n                direction=\"row\"\n                justify=\"center\"\n                spacing={2}\n                alignItems=\"center\"\n              >\n                <Grid item>\n                  <div\n                    style={\n                      booking.deleted\n                        ? {\n                            paddingBottom: \"5px\",\n                            textDecoration: \"line-through\",\n                          }\n                        : {}\n                    }\n                  >\n                    {`${booking.fullname}`}\n                  </div>\n                </Grid>\n\n                {booking.deleted && (\n                  <Grid item>\n                    <Tooltip title=\"This record has been deleted.\">\n                      <DeleteIcon\n                        style={\n                          booking.tr\n                            ? {\n                                padding: 0,\n                                margin: 0,\n                                color: \"#fff\",\n                                fontSize: 25,\n                              }\n                            : {\n                                padding: 0,\n                                margin: 0,\n                                color: \"#333\",\n                                fontSize: 25,\n                              }\n                        }\n                      />\n                    </Tooltip>\n                  </Grid>\n                )}\n              </Grid>\n            </DialogTitle>\n            <DialogContent>\n              <div\n                style={{\n                  // height: \"550px\",\n                  paddingTop: \"0px\",\n                }}\n              >\n                <Grid item xs={12} md={12} key={`panel0`}>\n                  <div className={classes.infoDetails}>\n                    <ul className={classes.ul}>\n                      {/* Restore Functionality ******************************************* */}\n                      <li\n                        hidden={\n                          !(\n                            restoreMode.restore &&\n                            restoreMode.person._id === booking._id\n                          )\n                        }\n                      >\n                        <div\n                          style={{\n                            fontWeight: \"500\",\n                            paddingBottom: \"5px\",\n                            paddingLeft: \"5px\",\n                            fontSize: \"16px\",\n                            color: \"#333\",\n                          }}\n                        >\n                          Are you sure you want to restore this record?\n                        </div>\n                      </li>\n\n                      <li\n                        hidden={\n                          !booking.deleted ||\n                          (restoreMode.restore &&\n                            restoreMode.person._id === booking._id)\n                        }\n                      >\n                        <Button\n                          type=\"button\"\n                          fullWidth\n                          variant=\"contained\"\n                          color=\"primary\"\n                          onClick={() => {\n                            handleRestoreModeChanged(true, booking);\n                          }}\n                          className={classes.RestoreButton}\n                        >\n                          Restore This Record\n                        </Button>\n                      </li>\n\n                      <li\n                        hidden={\n                          !(\n                            restoreMode.restore &&\n                            restoreMode.person._id === booking._id\n                          )\n                        }\n                      >\n                        <Button\n                          type=\"button\"\n                          fullWidth\n                          variant=\"contained\"\n                          color=\"primary\"\n                          disabled={restoring}\n                          onClick={() => {\n                            handleRestoreModeChanged(false, booking);\n                          }}\n                          className={classes.SaveButton}\n                        >\n                          YES, Restore this!\n                        </Button>\n                      </li>\n\n                      <li\n                        hidden={\n                          !(\n                            restoreMode.restore &&\n                            restoreMode.person._id === booking._id\n                          )\n                        }\n                      >\n                        <Button\n                          type=\"button\"\n                          fullWidth\n                          variant=\"contained\"\n                          color=\"default\"\n                          disabled={restoring}\n                          onClick={() => {\n                            handleRestoreModeChanged(false, null);\n                          }}\n                          className={classes.CancelButton}\n                        >\n                          Cancel\n                        </Button>\n                      </li>\n\n                      {/*  ******************************************************************* */}\n\n                      {/* Edit Functionality ******************************************* */}\n\n                      <li\n                        hidden={\n                          booking.deleted ||\n                          deleteMode.delete ||\n                          (editMode.edit && editMode.person._id === booking._id)\n                        }\n                      >\n                        <Button\n                          type=\"button\"\n                          fullWidth\n                          variant=\"contained\"\n                          color=\"primary\"\n                          onClick={() => {\n                            handleEditModeChanged(true, booking);\n                          }}\n                          className={classes.EditButton}\n                        >\n                          Edit Booking Info\n                        </Button>\n                      </li>\n\n                      <li\n                        hidden={\n                          !(\n                            editMode.edit && editMode.person._id === booking._id\n                          )\n                        }\n                      >\n                        <Button\n                          type=\"button\"\n                          fullWidth\n                          variant=\"contained\"\n                          color=\"primary\"\n                          disabled={saving || !recordChanged}\n                          onClick={() => {\n                            handleEditModeChanged(false, booking);\n                          }}\n                          className={classes.SaveButton}\n                        >\n                          Save Changes\n                        </Button>\n                      </li>\n\n                      <li\n                        hidden={\n                          !(\n                            editMode.edit && editMode.person._id === booking._id\n                          )\n                        }\n                      >\n                        <Button\n                          type=\"button\"\n                          fullWidth\n                          variant=\"contained\"\n                          color=\"default\"\n                          disabled={saving}\n                          onClick={() => {\n                            handleEditModeChanged(false, null);\n                          }}\n                          className={classes.CancelButton}\n                        >\n                          Cancel\n                        </Button>\n                      </li>\n\n                      {/* ****************************************************************************************** */}\n\n                      {/* Delete Functionality ******************************************* */}\n\n                      <li\n                        hidden={\n                          !(\n                            deleteMode.delete &&\n                            deleteMode.person._id === booking._id\n                          )\n                        }\n                      >\n                        <div\n                          style={{\n                            fontWeight: \"600\",\n                            paddingBottom: \"5px\",\n                            paddingLeft: \"5px\",\n                            fontSize: \"16px\",\n                          }}\n                        >\n                          Are you sure you want to delete this record?\n                        </div>\n                      </li>\n\n                      <li\n                        hidden={\n                          props.deleteButtonDisabled ||\n                          booking.deleted ||\n                          editMode.edit ||\n                          (deleteMode.delete &&\n                            deleteMode.person._id === booking._id)\n                        }\n                      >\n                        {booking.OTCCharges > 0 && (\n                          <Tooltip title={\"Paid Records Cannot be Deleted!\"}>\n                            <div>\n                              <Button\n                                disabled={booking.OTCCharges > 0}\n                                type=\"button\"\n                                fullWidth\n                                variant=\"contained\"\n                                color=\"primary\"\n                                onClick={() => {\n                                  handleDeleteModeChanged(true, booking);\n                                }}\n                                className={classes.DeleteButton}\n                              >\n                                Delete This Record\n                              </Button>\n                            </div>\n                          </Tooltip>\n                        )}\n                        {booking.OTCCharges === 0 && (\n                          <Button\n                            disabled={booking.OTCCharges > 0}\n                            type=\"button\"\n                            fullWidth\n                            variant=\"contained\"\n                            color=\"primary\"\n                            onClick={() => {\n                              handleDeleteModeChanged(true, booking);\n                            }}\n                            className={classes.DeleteButton}\n                          >\n                            Delete This Record\n                          </Button>\n                        )}\n                      </li>\n\n                      <li\n                        hidden={\n                          !(\n                            deleteMode.delete &&\n                            deleteMode.person._id === booking._id\n                          )\n                        }\n                      >\n                        <Button\n                          type=\"button\"\n                          fullWidth\n                          variant=\"contained\"\n                          color=\"primary\"\n                          disabled={deleting}\n                          onClick={() => {\n                            handleDeleteModeChanged(false, booking);\n                          }}\n                          className={classes.SaveButton}\n                        >\n                          YES, Delete this!\n                        </Button>\n                      </li>\n\n                      <li\n                        hidden={\n                          !(\n                            deleteMode.delete &&\n                            deleteMode.person._id === booking._id\n                          )\n                        }\n                      >\n                        <Button\n                          type=\"button\"\n                          fullWidth\n                          variant=\"contained\"\n                          color=\"default\"\n                          disabled={deleting}\n                          onClick={() => {\n                            handleDeleteModeChanged(false, null);\n                          }}\n                          className={classes.CancelButton}\n                        >\n                          Cancel\n                        </Button>\n                      </li>\n\n                      {/* ****************************************************************************************** */}\n\n                      <li className={classes.li}>\n                        <Grid container spacing={2}>\n                          <Grid item xs={6}>\n                            <span className={classes.infoTitle}>\n                              BOOKED DATE\n                            </span>\n\n                            <span\n                              hidden={\n                                editMode.edit &&\n                                editMode.person._id === booking._id\n                              }\n                              className={classes.infoData}\n                            >\n                              {FormatDateFromString(booking.bookingDate)}\n                            </span>\n                            <span\n                              hidden={\n                                !(\n                                  editMode.edit &&\n                                  editMode.person._id === booking._id\n                                )\n                              }\n                              className={classes.infoData}\n                            >\n                              <TextField\n                                fullWidth\n                                error={validationError.bookingDateError}\n                                className={classes.TextBox}\n                                value={bookingDate}\n                                onChange={bookingDateChanged}\n                                inputProps={{\n                                  style: {\n                                    padding: 0,\n                                  },\n                                }}\n                              ></TextField>\n                            </span>\n                          </Grid>\n                          <Grid item xs={6}>\n                            <span className={classes.infoTitle}>\n                              BOOKED TIME\n                            </span>\n                            <span\n                              hidden={\n                                editMode.edit &&\n                                editMode.person._id === booking._id\n                              }\n                              className={classes.infoData}\n                            >\n                              {booking.bookingTime.toUpperCase()}\n                            </span>\n                            <span\n                              hidden={\n                                !(\n                                  editMode.edit &&\n                                  editMode.person._id === booking._id\n                                )\n                              }\n                              className={classes.infoData}\n                            >\n                              <TextField\n                                fullWidth\n                                error={validationError.bookingTimeError}\n                                className={classes.TextBox}\n                                value={bookingTime}\n                                onChange={bookingTimeChanged}\n                                inputProps={{\n                                  style: {\n                                    padding: 0,\n                                  },\n                                }}\n                              ></TextField>\n                            </span>\n                          </Grid>\n                        </Grid>\n                      </li>\n\n                      <li className={classes.li}>\n                        <Grid container spacing={2}>\n                          <Grid item xs={6}>\n                            <span className={classes.infoTitle}>FULLNAME</span>\n                            <span\n                              hidden={\n                                editMode.edit &&\n                                editMode.person._id === booking._id\n                              }\n                              className={classes.infoData}\n                            >\n                              {booking.fullname}\n                            </span>\n                            <span\n                              hidden={\n                                !(\n                                  editMode.edit &&\n                                  editMode.person._id === booking._id\n                                )\n                              }\n                              className={classes.infoData}\n                            >\n                              <TextField\n                                fullWidth\n                                className={classes.TextBox}\n                                value={fullname}\n                                onChange={fullnameChanged}\n                                inputProps={{\n                                  style: {\n                                    padding: 0,\n                                  },\n                                }}\n                              ></TextField>\n                            </span>\n                          </Grid>\n                          <Grid item xs={6}>\n                            <span className={classes.infoTitle}>EMAIL</span>\n                            <span\n                              hidden={\n                                editMode.edit &&\n                                editMode.person._id === booking._id\n                              }\n                              className={classes.infoData}\n                            >\n                              {booking.email}\n                            </span>\n                            <span\n                              hidden={\n                                !(\n                                  editMode.edit &&\n                                  editMode.person._id === booking._id\n                                )\n                              }\n                              className={classes.infoData}\n                            >\n                              <TextField\n                                fullWidth\n                                className={classes.TextBox}\n                                value={email}\n                                onChange={emailChanged}\n                                inputProps={{\n                                  style: {\n                                    padding: 0,\n                                  },\n                                }}\n                              ></TextField>\n                            </span>\n                          </Grid>\n                        </Grid>\n                      </li>\n                      <li className={classes.li}>\n                        <Grid container spacing={2}>\n                          <Grid item xs={6}>\n                            <span className={classes.infoTitle}>TEL</span>\n                            <span\n                              hidden={\n                                editMode.edit &&\n                                editMode.person._id === booking._id\n                              }\n                              className={classes.infoData}\n                            >\n                              {booking.phone?.toUpperCase()}\n                            </span>\n                            <span\n                              hidden={\n                                !(\n                                  editMode.edit &&\n                                  editMode.person._id === booking._id\n                                )\n                              }\n                              className={classes.infoData}\n                            >\n                              <TextField\n                                fullWidth\n                                className={classes.TextBox}\n                                value={tel}\n                                onChange={telChanged}\n                                inputProps={{\n                                  style: {\n                                    padding: 0,\n                                  },\n                                }}\n                              ></TextField>\n                            </span>\n                          </Grid>\n                          <Grid item xs={6}>\n                            <span className={classes.infoTitle}>NOTES</span>\n                            <span\n                              hidden={\n                                editMode.edit &&\n                                editMode.person._id === booking._id\n                              }\n                              className={classes.infoData}\n                            >\n                              {booking.notes}\n                            </span>\n                            <span\n                              hidden={\n                                !(\n                                  editMode.edit &&\n                                  editMode.person._id === booking._id\n                                )\n                              }\n                              className={classes.infoData}\n                            >\n                              <TextField\n                                fullWidth\n                                className={classes.TextBox}\n                                value={notes}\n                                onChange={notesChanged}\n                                inputProps={{\n                                  style: {\n                                    padding: 0,\n                                  },\n                                }}\n                              ></TextField>\n                            </span>\n                          </Grid>\n                        </Grid>\n                      </li>\n\n                      <li className={classes.li} style={{ paddingTop: \"10px\" }}>\n                        <span className={classes.infoTitle}>Package</span>\n                        <span\n                          hidden={\n                            editMode.edit && editMode.person._id === booking._id\n                          }\n                          className={classes.infoData}\n                        >\n                          {booking.packageName}\n                        </span>\n                        <span\n                          hidden={\n                            !(\n                              editMode.edit &&\n                              editMode.person._id === booking._id\n                            )\n                          }\n                          className={classes.infoData}\n                        >\n                          <TextField\n                            fullWidth\n                            className={classes.TextBox}\n                            value={service}\n                            onChange={serviceChanged}\n                            inputProps={{\n                              style: {\n                                padding: 0,\n                              },\n                            }}\n                          ></TextField>\n                        </span>\n                      </li>\n\n                      <li className={classes.li} style={{ paddingTop: \"10px\" }}>\n                        <span className={classes.infoTitle}>STATUS</span>{\" \"}\n                        {getStatusLabel(booking.status)}\n                        {booking.status === \"patient_attended\" &&\n                          !(\n                            editMode.edit && editMode.person._id === booking._id\n                          ) &&\n                          !booking.deleted && (\n                            <Button\n                              variant=\"outlined\"\n                              color=\"primary\"\n                              disabled={saving}\n                              style={{ width: \"300px\" }}\n                              onClick={(event) =>\n                                changeBackToBookingMade(event, booking._id)\n                              }\n                            >\n                              Change Back To Booking Made\n                            </Button>\n                          )}\n                        {booking.status === \"booked\" &&\n                          !(\n                            editMode.edit && editMode.person._id === booking._id\n                          ) &&\n                          !booking.deleted && (\n                            <Button\n                              variant=\"outlined\"\n                              color=\"default\"\n                              disabled={saving}\n                              style={{ width: \"300px\" }}\n                              onClick={(event) =>\n                                changeToPatientAttended(event, booking._id)\n                              }\n                            >\n                              Change To Patient Attended\n                            </Button>\n                          )}\n                      </li>\n\n                      <li className={classes.li} style={{ paddingTop: \"10px\" }}>\n                        <span\n                          hidden={\n                            editMode.edit && editMode.person._id === booking._id\n                          }\n                          className={classes.infoTitle}\n                        >\n                          Estimated Price\n                        </span>\n                        <span\n                          hidden={\n                            editMode.edit && editMode.person._id === booking._id\n                          }\n                          className={classes.infoData}\n                        >\n                          {booking.estimatedPrice}\n                        </span>\n                      </li>\n\n                      <li hidden={booking.deleted || editMode.edit}>\n                        <Button\n                          disabled={!booking.formData}\n                          startIcon={<PrintIcon />}\n                          type=\"button\"\n                          fullWidth\n                          variant=\"outlined\"\n                          color=\"primary\"\n                          onClick={() => {\n                            downloadRegForm(booking._id);\n                          }}\n                          className={classes.DownloadForm}\n                        >\n                          Download Registration Form\n                        </Button>\n                      </li>\n\n                      <li\n                        hidden={\n                          booking.deleted || editMode.edit || booking.formData\n                        }\n                      >\n                        <Button\n                          disabled={!booking.email || booking.email.length < 3}\n                          startIcon={<SendIcon />}\n                          type=\"button\"\n                          fullWidth\n                          variant=\"outlined\"\n                          color=\"primary\"\n                          onClick={() => {\n                            sendRegForm(booking._id);\n                          }}\n                          className={classes.DownloadForm}\n                          style={{ position: \"relative\" }}\n                        >\n                          Send Registration Form Email\n                          {emailSent && (\n                            <div\n                              style={{\n                                position: \"absolute\",\n                                right: \"10px\",\n                                top: \"5px\",\n                                color: \"#05ad19\",\n                              }}\n                            >\n                              Email Sent\n                            </div>\n                          )}\n                        </Button>\n                      </li>\n\n                      <Divider />\n\n                      <li className={classes.li} style={{ marginTop: \"20px\" }}>\n                        <span className={classes.infoTitle}>INVOICE # : </span>{\" \"}\n                        <span style={{ paddingLeft: \"0px\" }}>\n                          {!invoiceLoaded && (\n                            <span className={classes.invoiceNumber}> ... </span>\n                          )}\n                          {invoiceLoaded && invoice && (\n                            <span className={classes.invoiceNumber}>\n                              {\" \"}\n                              {invoice.invoiceNumber}{\" \"}\n                            </span>\n                          )}\n                          {invoiceLoaded && !invoice && (\n                            <span\n                              className={classes.invoiceNumber}\n                              style={{ color: \"red\", fontSize: \"0.9rem\" }}\n                            >\n                              {\" \"}\n                              N/A{\" \"}\n                            </span>\n                          )}\n                        </span>\n                        {!(\n                          editMode.edit && editMode.person._id === booking._id\n                        ) &&\n                          !booking.deleted && (\n                            <React.Fragment>\n                              {invoiceLoaded && !invoice && (\n                                <Button\n                                  variant=\"outlined\"\n                                  color=\"primary\"\n                                  className={classes.PayButton}\n                                  onClick={() => OpenInvoiceDialog()}\n                                >\n                                  Issue Invoice\n                                </Button>\n                              )}\n\n                              {invoiceLoaded && invoice && (\n                                <React.Fragment>\n                                  <Button\n                                    variant=\"outlined\"\n                                    startIcon={<PrintIcon />}\n                                    color=\"primary\"\n                                    className={classes.printInvoiceButton}\n                                    onClick={() => downloadInvoice(invoice._id)}\n                                  >\n                                    Download Invoice\n                                  </Button>\n\n                                  <Button\n                                    variant=\"outlined\"\n                                    color=\"secondary\"\n                                    className={classes.editInvoiceButton}\n                                    onClick={() => OpenInvoiceDialog()}\n                                  >\n                                    Edit Invoice\n                                  </Button>\n\n                                  <Button\n                                    disabled={\n                                      !booking.email || booking.email.length < 3\n                                    }\n                                    startIcon={<SendIcon />}\n                                    type=\"button\"\n                                    variant=\"outlined\"\n                                    color=\"primary\"\n                                    onClick={() => {\n                                      sendInvoiceEmail(\n                                        invoice._id,\n                                        booking.email\n                                      );\n                                    }}\n                                    style={{\n                                      position: \"relative\",\n                                      marginLeft: \"10px\",\n                                      paddingRight: \"130px\",\n                                      fontSize: \"0.8rem\",\n                                    }}\n                                  >\n                                    Send Invoice By Email\n                                    {emailSentInvoice && (\n                                      <div\n                                        style={{\n                                          position: \"absolute\",\n                                          right: \"10px\",\n                                          top: \"5px\",\n                                          color: \"#05ad19\",\n                                        }}\n                                      >\n                                        Email Sent\n                                      </div>\n                                    )}\n                                  </Button>\n                                </React.Fragment>\n                              )}\n                            </React.Fragment>\n                          )}\n                      </li>\n\n                      <li className={classes.li} style={{ marginTop: \"20px\" }}>\n                        <span className={classes.infoTitle}>TOTAL CHARGES</span>{\" \"}\n                        <span\n                          style={{ paddingLeft: \"15px\" }}\n                          className={\n                            !booking.OTCCharges || booking.OTCCharges === 0\n                              ? classes.infoDataChargesHigher\n                              : classes.infoDataCharges\n                          }\n                        >{`£${booking.OTCCharges.toLocaleString(\n                          \"en-GB\"\n                        )}`}</span>\n                        {!(\n                          editMode.edit && editMode.person._id === booking._id\n                        ) &&\n                          !booking.paid &&\n                          !booking.deleted && (\n                            <Button\n                              variant=\"outlined\"\n                              color=\"secondary\"\n                              className={classes.PayButton}\n                              onClick={(event) => Pay(event, booking._id)}\n                            >\n                              Pay\n                            </Button>\n                          )}\n                        {!(\n                          editMode.edit && editMode.person._id === booking._id\n                        ) &&\n                          booking.paid && (\n                            <React.Fragment>\n                              <span className={classes.PayLabel}>\n                                {\" \"}\n                                <CheckIcon\n                                  className={classes.checkIconSmall}\n                                />{\" \"}\n                                Paid by {booking.paidBy}\n                                {booking.paidBy === \"corporate\"\n                                  ? ` \"${booking.corporate}\" `\n                                  : \"\"}\n                              </span>\n\n                              <Tooltip title=\"Undo Payment\">\n                                <IconButton\n                                  onClick={() => setOpenUndoPayDialog(true)}\n                                >\n                                  <UndoIcon style={{ color: \"red\" }} />\n                                </IconButton>\n                              </Tooltip>\n                            </React.Fragment>\n                          )}\n                      </li>\n                    </ul>\n                  </div>\n                </Grid>\n              </div>\n              <Backdrop\n                className={classes.backdrop}\n                open={saving || deleting || restoring}\n              >\n                <CircularProgress color=\"inherit\" />\n              </Backdrop>\n            </DialogContent>\n\n            <PayDialog\n              booking={selectedBooking}\n              open={openPayDialog}\n              price={invoice ? invoice.grandTotal : null}\n              handleClose={handleClosePayDialog}\n            />\n\n            <InvoiceDialog\n              booking={selectedBooking}\n              invoice={invoice}\n              open={openInvoiceDialog}\n              handleClose={handleCloseInvoiceDialog}\n            />\n          </Dialog>\n\n          <Dialog\n            open={openUndoPayDialog}\n            onClose={handleCloseUndoPayDialog}\n            aria-labelledby=\"alert-dialog-title\"\n            aria-describedby=\"alert-dialog-description\"\n          >\n            <DialogTitle style={{ color: \"#999\" }} id=\"alert-dialog-title\">\n              {\"Undo Payment\"}\n            </DialogTitle>\n            <DialogContent>\n              <DialogContentText\n                style={{ color: \"#333\", fontWeight: \"400\" }}\n                id=\"alert-dialog-description\"\n              >\n                Are you sure you want to undo payment for this booking?\n              </DialogContentText>\n            </DialogContent>\n            <DialogActions>\n              <Button onClick={handleCloseUndoPayDialog} color=\"default\">\n                Back\n              </Button>\n              <Button onClick={undoPaymentClicked} color=\"secondary\" autoFocus>\n                Yes, Undo Payment\n              </Button>\n            </DialogActions>\n          </Dialog>\n\n          <Dialog\n            open={openRefundDialog}\n            onClose={handleCloseRefundDialog}\n            aria-labelledby=\"alert-dialog-title\"\n            aria-describedby=\"alert-dialog-description\"\n          >\n            <DialogTitle style={{ color: \"#999\" }} id=\"alert-dialog-title\">\n              {\"Refund Deposit\"}\n            </DialogTitle>\n            <DialogContent>\n              <DialogContentText\n                style={{ color: \"#333\", fontWeight: \"400\" }}\n                id=\"alert-dialog-description\"\n              >\n                Are you sure you want to refund deposit payment for this\n                booking?\n              </DialogContentText>\n            </DialogContent>\n            <DialogActions>\n              <Button onClick={handleCloseRefundDialog} color=\"default\">\n                Back\n              </Button>\n              <Button\n                onClick={refundPaymentClicked}\n                color=\"secondary\"\n                autoFocus\n              >\n                Yes, Refund Payment\n              </Button>\n            </DialogActions>\n          </Dialog>\n        </React.Fragment>\n      )}\n    </React.Fragment>\n  );\n}\n","import React, {useEffect, useRef, useState} from 'react';\nimport { DataGrid } from '@material-ui/data-grid';\nimport BookService from './services/BookService';\nimport { Button, Checkbox, CircularProgress, Dialog, DialogContent, DialogTitle, Divider, FormControl, FormControlLabel, Grid, Icon, InputLabel, LinearProgress, Link, makeStyles, MenuItem, Paper, Select, SvgIcon, Switch, TextField, Tooltip } from '@material-ui/core';\nimport RefreshIcon from '@material-ui/icons/Refresh';\nimport { IconButton } from '@material-ui/core';\nimport CheckIcon from '@material-ui/icons/Check';\nimport CloseIcon from '@material-ui/icons/Close';\nimport GlobalState from './../GlobalState';\nimport { getMenuIndex } from './../MenuList';\nimport {FormatDateFromString, FormatDateFromStringShortYear} from './DateFormatter';\n\nimport SearchIcon from '@material-ui/icons/Search';\nimport BookingDialog from './BookingDialog';\n\nimport NewReleasesIcon from '@material-ui/icons/NewReleases';\nimport HistoryIcon from '@material-ui/icons/History';\nimport TimelineIcon from '@material-ui/icons/Timeline';\nimport DescriptionIcon from '@material-ui/icons/Description';\nimport AutorenewIcon from '@material-ui/icons/Autorenew';\nimport LiveTvIcon from '@material-ui/icons/LiveTv';\nimport PlaylistAddCheckIcon from '@material-ui/icons/PlaylistAddCheck';\nimport AddCircleOutlineIcon from '@material-ui/icons/AddCircleOutline';\nimport DeleteIcon from '@material-ui/icons/Delete';\nimport HourglassEmptyIcon from '@material-ui/icons/HourglassEmpty';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faFileExcel } from \"@fortawesome/free-solid-svg-icons\";\nimport Draggable from 'react-draggable';\n\nimport * as dateformat from 'dateformat';\n\nimport DateFnsUtils from '@date-io/date-fns';\nimport {\n  MuiPickersUtilsProvider,\n  KeyboardTimePicker,\n  KeyboardDatePicker,\n} from '@material-ui/pickers';\n\nimport BusinessIcon from '@material-ui/icons/Business';\nimport CreditCardIcon from '@material-ui/icons/CreditCard';\nimport LocalAtmIcon from '@material-ui/icons/LocalAtm';\n\n\nimport ReactHTMLTableToExcel from 'react-html-table-to-excel';\nimport PriceCalculator from './PriceCalculator';\nimport { corporates } from './Corporates';\n\nconst useStyles = makeStyles((theme) => ({\n  title: {\n    marginTop: theme.spacing(0),\n    marginBottom: theme.spacing(1),\n\n  },\n  \n  refreshButton:{\n    marginLeft: theme.spacing(2),\n  },\n\n  checkIcon:{\n    color: \"green\"\n  },\n\n  closeIcon:{\n    color: \"red\"\n  },\n\n  RefLink: {\n    cursor: \"pointer\"\n  },\n\n  BookedLabel:{\n    backgroundColor: \"#606060\",\n    color: \"#fff\",\n    width: \"70px\",\n    textAlign: \"center\",\n  },\n\n  PatientAttendedLabel:{\n    backgroundColor: \"#0066aa\",\n    color: \"#fff\",\n    width: \"70px\",\n    textAlign: \"center\",\n  },\n\n  SampleTakenLabel:{\n    backgroundColor: \"#0066cc\",\n    color: \"#fff\",\n    width: \"70px\",\n    textAlign: \"center\",\n  },\n\n  ReportSentLabel:{\n    backgroundColor: \"#009900\",\n    color: \"#fff\",\n    width: \"70px\",\n    textAlign: \"center\",\n  },\n\n  ReportCertSentLabel:{\n    backgroundColor: \"#009900\",\n    color: \"#fff\",\n    width: \"70px\",\n    textAlign: \"center\",\n  },\n\n  PositiveLabel:{\n    backgroundColor: \"red\",\n    color: \"#fff\",\n    width: \"70px\",\n    textAlign: \"center\",\n  },\n\n  HideNowRows: {\n    position: \"absolute\",\n    top: \"40%\",\n    left: \"40%\",\n    width: \"600px\",\n    height: \"300px\",\n    backgroundColor : \"#fafafa\",\n    color : \"#111\",\n    zIndex: \"1000\",\n    display: \"flex\",\n    alignItems: \"center\",\n    justifyItems: \"center\"\n  },\n\n  ExportToExcelButton:\n  {\n    // marginBottom : \"20px\",\n    color : \"#2f942e\",\n    borderColor: \"#2f942e\",\n    \"&:hover\": {\n      background: \"#fafffa\",\n      borderColor: \"#2f942e\",\n    },\n    textDecoration : \"none !important\", \n   \n  },\n\n  ExportToExcelButtonInline:\n  {\n    // marginBottom : \"20px\",\n    color : \"#2f942e\",\n    borderColor: \"#2f942e\",\n    \"&:hover\": {\n      background: \"#fafffa\",\n      borderColor: \"#2f942e\",\n    },\n    textDecoration : \"none !important\", \n    cursor: \"pointer\",\n    padding: \"10px\"\n   \n  },\n\n  table: {\n    width: \"100%\",\n    border: \"1px solid #ddd\",\n    borderCollapse: \"collapse\",\n},\n\nth: {\n    border: \"1px solid #ddd\",\n    borderCollapse: \"collapse\",\n    verticalAlign: \"middle\",\n    fontcolor: \"#555\",\n    fontWeight: \"400\",\n    fontSize: \"15px\",\n    paddingTop: \"5px\",\n    paddingBottom: \"5px\",\n    width: \"14%\",\n    paddingLeft: \"5px\",\n},\n\ntd: {\n    border: \"1px solid #ddd\",\n    borderCollapse: \"collapse\",\n    verticalAlign: \"middle\",\n    paddingLeft: \"5px\",\n},\n\ntopSelect: {\n  margin: theme.spacing(1),\n  minWidth: 80,\n},\n\nnotifyIcon:{\n  width: \"16px\",\n  height: \"16px\",\n  borderRadius: \"50%\",\n  backgroundColor : \"rgb(220, 0, 78)\",\n  marginLeft: \"10px\"\n}\n\n}));\n\nconst getTableTitle = (str) =>{\n\n  if (str === 'today')\n  {\n    return `Today's Bookings`;\n  }else if (str === 'old')\n  {\n    return `Old Bookings`;\n  }else if (str === 'future')\n  {\n    return `Future Bookings`;\n  }else if (str === 'recent')\n  {\n    return `Recent Bookings`;\n  }else if (str === 'live')\n  {\n    return `Live Bookings`;\n  }else if (str === 'completed')\n  {\n    return `Completed Bookings`;\n  }else if (str === 'positive')\n  {\n    return `Positive Results`;\n  }else if (str === 'deleted')\n  {\n    return `Deleted Records`;\n  }else if (str === 'late')\n  {\n    return `40 Hours Late`;\n  }\n  \n  else\n  {\n    return `All Bookings`;\n  }\n\n}\n\nconst getTableIcon = (str) =>{\n\n  if (str === 'today')\n  {\n    return <NewReleasesIcon style={{fontSize:\"2.2rem\"}} />;\n  }else if (str === 'old')\n  {\n    return <HistoryIcon style={{fontSize:\"2.2rem\"}} />;\n  }else if (str === 'future')\n  {\n    return <TimelineIcon style={{fontSize:\"2.2rem\"}} />;\n  }else if (str === 'recent')\n  {\n    return <AutorenewIcon style={{fontSize:\"2.2rem\"}} />;\n  }else if (str === 'live')\n  {\n    return <LiveTvIcon style={{fontSize:\"2.2rem\"}} />;\n  }else if (str === 'completed')\n  {\n    return  <PlaylistAddCheckIcon style={{fontSize:\"2.2rem\"}} />;\n  }else if (str === 'positive')\n  {\n    return <AddCircleOutlineIcon style={{fontSize:\"2.2rem\"}} />\n  }else if (str === 'deleted')\n  {\n    return <DeleteIcon style={{fontSize:\"2.2rem\"}} />;\n  }else if (str === 'late')\n  {\n    return <HourglassEmptyIcon style={{fontSize:\"2.2rem\"}} />;\n  }\n  \n  else\n  {\n    return <DescriptionIcon style={{fontSize:\"2.2rem\"}} />;\n  }\n\n}\n\nfunction PaperComponent(props) {\n  return (\n    <Draggable handle=\"#draggable-dialog-title\" cancel={'[class*=\"MuiDialogContent-root\"]'}>\n      <Paper {...props} />\n    </Draggable>\n  );\n}\n\nexport default function BookingTable(props) {\n  \n  const classes = useStyles();\n\n  const [topCount, setTopCount] = React.useState(25)\n  const topCountChanged = (event) =>\n  {\n    setTopCount(event.target.value)\n    loadData(event.target.value)\n  }\n  \n\n  const [openDialogExcel, setOpenDialogExcel] = useState(false);\n  const handleCloseDialogExcel = () =>\n  {\n    setCorporate(corporates[0]);\n    setJustCorporate(false);\n    setOpenDialogExcel(false);\n  }\n\n\n  const [fromDate, setFromDate] = React.useState(new Date(new Date().getTime() - 7 * 24 * 60 * 60 * 1000 ));\n  const handleFromDateChange = (date) => {\n    setFromDate(date);\n    setFromDateStr(dateformat(date,'yyyy-mm-dd'));\n  };\n\n  const [untilDate, setUntilDate] = React.useState(new Date(new Date().getTime() - 1 * 24 * 60 * 60 * 1000 ));\n  const handleUntilDateChange = (date) => {\n    setUntilDate(date);\n    seUntilDateStr(dateformat(date,'yyyy-mm-dd'));\n  };\n\n  const [fromDateStr, setFromDateStr] = useState(dateformat(new Date(new Date().getTime() - 7 * 24 * 60 * 60 * 1000 ), 'yyyy-mm-dd'));\n  const [untilDateStr, seUntilDateStr] = useState(dateformat(new Date(new Date().getTime() - 1 * 24 * 60 * 60 * 1000 ), 'yyyy-mm-dd'));\n\n  const [justCorporate, setJustCorporate] = useState(false);\n\n  const[chkDate, setChkDate] = useState(true);\n  const[chkForename, setChkForename] = useState(true);\n  const[chkSurname, setChkSurname] = useState(true);\n  const[chkDOB, setChkDOB] = useState(true);\n  const[chkEmail, setChkEmail] = useState(true);\n  const[chkTel, setChkTel] = useState(true);\n  const[chkCertificate, setChkCertidicate] = useState(true);\n  const[chkAntiBodyTest, setChkAntiBodyTest] = useState(true);\n  const[chkextRef, setChkExtRef] = useState(true);\n  const[chkPrice, setChkPrice] = useState(true);\n\n  const justCorporateChanged = (event) =>\n  {\n    setJustCorporate(event.target.checked);\n  }\n  \n\n  const chkDateChanged = (event) =>\n  {\n    setChkDate(event.target.checked);\n  }\n\n  const chkForenameChanged = (event) =>\n  {\n    setChkForename(event.target.checked);\n  }\n\n  const chkSurnameChanged = (event) =>\n  {\n    setChkSurname(event.target.checked);\n  }\n\n  const chkDOBChanged = (event) =>\n  {\n    setChkDOB(event.target.checked);\n  }\n\n  const chkEmailChanged = (event) =>\n  {\n    setChkEmail(event.target.checked);\n  }\n\n  const chkTelChanged = (event) =>\n  {\n    setChkTel(event.target.checked);\n  }\n\n  const chkCertificateChanged = (event) =>\n  {\n    setChkCertidicate(event.target.checked);\n  }\n\n  const chkAntiBodyTestChanged = (event) =>\n  {\n    setChkAntiBodyTest(event.target.checked);\n  }\n\n  const chkextRefChanged = (event) =>\n  {\n    setChkExtRef(event.target.checked);\n  }\n\n  const chkPriceChanged = (event) =>\n  {\n    setChkPrice(event.target.checked);\n  }\n\n\n\n  var columns = [];\n\n  if (props.date === 'recent')\n  {\n    columns = [\n      // { field: 'id', headerName: '#', width: 70 },\n  \n      {field: '_id', headerName:' ', width: 70, renderCell: (params) =>{\n          return (\n\n           <React.Fragment>\n\n                <Button \n                        color=\"primary\"\n                        onClick = {event => openDetailsDialog(event, params.value)}\n                > \n            \n            <SearchIcon/> \n            \n            </Button>\n\n           </React.Fragment>\n\n          \n  \n          ); \n      \n        }\n      },\n\n      { field: 'paid', headerName: 'Paid', align: 'center' , width: 90, renderCell: (params) => { \n        if (!params.value)\n        {\n           return ( \n              <React.Fragment>                    \n                    <CloseIcon className={classes.closeIcon}/>                        \n              </React.Fragment>\n           );\n        }\n        else\n        {\n           if (params.getValue('paidBy') === 'credit card')\n           {\n             return ( <CreditCardIcon className={classes.checkIcon}/> );\n           }\n           else if (params.getValue('paidBy') === 'cash')\n           {\n             return ( <LocalAtmIcon className={classes.checkIcon}/> );\n           }\n           else if (params.getValue('paidBy') === 'corporate')\n           {\n             return ( <BusinessIcon className={classes.checkIcon}/> );\n           }\n           else\n           {\n             return '';  \n           }\n        }\n  }\n },\n\n\n      { field: 'timeStamp', headerName: 'TimeStamp', width: 200, valueFormatter: (params) => { \n        return formatTimeStamp(params.value);\n        }\n      },\n  \n      { field: 'bookingDate', headerName: 'B Date', width: 110, valueFormatter: (params) => { \n              return FormatDateFromString(params.value);\n          }\n       },\n      { field: 'bookingTimeNormalized', headerName: 'B Time', width: 105 , valueGetter: (params) => {\n        return params.getValue('bookingTime');\n      }},\n      { field: 'status', headerName: 'Status', width: 100, renderCell: (params) =>{\n          if (params.value === 'booked')\n          {\n            return (\n              <span className={classes.BookedLabel}>  BM </span>\n            );\n        \n          }else if (params.value === 'patient_attended')\n          {\n            return (\n              <span  className={classes.PatientAttendedLabel}> PA </span>\n            );\n          }\n          else{\n            return 'Unknown';\n          }\n        }\n      },\n      { field: 'bookingRef', headerName: 'Ref No.', width: 120 , renderCell: (params) =>{\n        return (\n          <Tooltip title=\"Go Find By Ref\" placement=\"right\">\n              <Link className={classes.RefLink}\n              //  onClick={\n              //   () => {\n              //     console.log(params.value);\n  \n              //     setState(state => ({...state, currentMenuIndex: getMenuIndex(`pcr` , `findByRef`)}));\n              //     setState(state => ({...state, ref : params.value}));\n              //     setState(state => ({...state, refError : false})); \n              //     setState(state => ({...state, foundRecords : []}));\n              //     setState(state => ({...state, findRecords : !state.findRecords}));\n              //   }\n              // }\n              \n              >\n                {params.value}\n              </Link>\n          </Tooltip>\n  \n        );\n      }},\n      { field: 'fullname', headerName: 'Fullname', width: 250 },\n      { field: 'email', headerName: 'Email', width: 200 },\n      { field: 'phone', headerName: 'Tel', width: 150 },\n      { field: 'notes', headerName: 'Notes', width: 500 },\n    \n    ];\n\n  }\n  else\n  {\n    columns = [\n      // { field: 'id', headerName: '#', width: 70 },\n  \n      {field: '_id', headerName:' ', width: 70, renderCell: (params) =>{\n          return (\n            <React.Fragment>\n\n                <Button \n                        color=\"primary\"\n                        onClick = {event => openDetailsDialog(event, params.value)}\n                > \n            \n            <SearchIcon/> \n            \n            </Button>\n\n           </React.Fragment>\n  \n          ); \n      \n        }\n      },\n\n      { field: 'paid', headerName: 'Paid', align: 'center' , width: 90, renderCell: (params) => { \n               if (!params.value)\n               {\n                  return ( \n                    <React.Fragment>\n                                <CloseIcon className={classes.closeIcon}/> \n                                {parseInt(params.getValue('deposit')) > 0 && props.date === 'deleted' && (\n                                      <span className={classes.notifyIcon}>&nbsp;</span>\n                                )}\n\n                               \n                    </React.Fragment>\n                     \n                        \n                  \n                  \n                  );\n               }\n               else\n               {\n                  if (params.getValue('paidBy') === 'credit card')\n                  {\n                    return ( <CreditCardIcon className={classes.checkIcon}/> );\n                  }\n                  else if (params.getValue('paidBy') === 'cash')\n                  {\n                    return ( <LocalAtmIcon className={classes.checkIcon}/> );\n                  }\n                  else if (params.getValue('paidBy') === 'corporate')\n                  {\n                    return ( <BusinessIcon className={classes.checkIcon}/> );\n                  }\n                  else\n                  {\n                    return '';  \n                  }\n               }\n         }\n        },\n        { field: 'bookingDate', headerName: 'B Date', width: 110, valueFormatter: (params) => { \n          return FormatDateFromString(params.value);\n      }\n   },\n  { field: 'bookingTimeNormalized', headerName: 'B Time', width: 105 , valueGetter: (params) => {\n    return params.getValue('bookingTime');\n  }},\n  { field: 'status', headerName: 'Status', width: 100, renderCell: (params) =>{\n      if (params.value === 'booked')\n      {\n        return (\n          <span className={classes.BookedLabel}>  BM </span>\n        );\n    \n      }else if (params.value === 'patient_attended')\n      {\n        return (\n          <span  className={classes.PatientAttendedLabel}> PA </span>\n        );\n      }\n      else{\n        return 'Unknown';\n      }\n    }\n  },\n  { field: 'bookingRef', headerName: 'Ref No.', width: 120 , renderCell: (params) =>{\n    return (\n      <Tooltip title=\"Go Find By Ref\" placement=\"right\">\n          <Link className={classes.RefLink}\n          //  onClick={\n          //   () => {\n          //     console.log(params.value);\n\n          //     setState(state => ({...state, currentMenuIndex: getMenuIndex(`pcr` , `findByRef`)}));\n          //     setState(state => ({...state, ref : params.value}));\n          //     setState(state => ({...state, refError : false})); \n          //     setState(state => ({...state, foundRecords : []}));\n          //     setState(state => ({...state, findRecords : !state.findRecords}));\n          //   }\n          // }\n          \n          >\n            {params.value}\n          </Link>\n      </Tooltip>\n\n    );\n  }},\n  { field: 'fullname', headerName: 'Fullname', width: 250 },\n  { field: 'email', headerName: 'Email', width: 200 },\n  { field: 'phone', headerName: 'Tel', width: 150 },\n  { field: 'notes', headerName: 'Notes', width: 500 },\n\n    \n    ];\n  \n\n  }\n\n\n\n  const [state, setState] = React.useContext(GlobalState);  \n\n  const [data, setData] = React.useState({bookings: [] , cachedBookings: [], isFetching : true});\n\n  const [selectedRow, setSelectedRow] = React.useState(null);\n\n  const [selectedBooking, setSelectedBooking] = React.useState(null);\n  const [seeDetailsDialogOpen, setSeeDetailsDialogOpen] = React.useState(false);\n\n  const [corporate, setCorporate] = useState(corporates[0]);\n  const corporateChanged = (event) =>\n  {\n    setCorporate(event.target.value);\n  }\n  \n\n  const [filter,setFilter] = React.useState('');\n\n\n  const lastPromise = useRef();\n\n  const formatTimeStamp = (timeStamp) =>\n  {\n    const todayStr = dateformat(new Date(), 'yyyy-mm-dd');\n    const timeStampStr = dateformat(timeStamp, 'yyyy-mm-dd');\n    if (todayStr === timeStampStr)\n    {\n      return dateformat(timeStamp, \"'Today', h:MM:ss TT\");\n    }\n    else\n    {\n       return dateformat(timeStamp, \"mmm dS, h:MM:ss TT\");\n    }\n  }\n\n  const loadData = (top) =>\n  {\n    var api = BookService.getAllBookings;\n    if (props.date === 'today')\n    {\n      api = BookService.getTodayBookings;\n    }else if (props.date === 'old')\n    {\n      api = BookService.getOldBookings;\n    }else if (props.date === 'future')\n    {\n      api = BookService.getFutureBookings;\n    }else if (props.date === 'recent')\n    {\n      api = BookService.getRecentBookingsAll;\n    }\n    else if (props.date === 'deleted')\n    {\n      api = BookService.getDeletedBookings;\n    }\n     \n    setData({bookings: [], cachedBookings: [], isFetching: true});\n   \n    // console.log(props)\n\n    const currentPromise = api(top).then( (res) =>{\n      // console.log(res)\n      for (var i=0; i < res.data.length; i++)\n      {\n        res.data[i] = {...res.data[i], id : i + 1}\n      }  \n      setData({bookings: [...res.data], cachedBookings: [...res.data], isFetching: false});\n      // return res.data;\n    }).catch(err => {\n      console.error(err)\n    })\n\n    // lastPromise.current = currentPromise;\n\n    // currentPromise.then(\n    //   result => {\n    //     if (currentPromise === lastPromise.current) {\n    //       setData({bookings: [...result], cachedBookings: [...result], isFetching: false});\n    //       setPage(1);\n    //     }\n    //   },\n    //   e => {\n    //     if (currentPromise === lastPromise.current) {\n    //         console.error(e);\n    //         setData({bookings: data.bookings, cachedBookings: data.cachedBookings, isFetching: false});\n    //     }\n    //   });\n\n  }\n\n  useEffect( () => {\n            setTopCount(25)\n            loadData(25)\n        },\n        [props.date]);\n\n\n\n\n  useEffect( () => {\n\n        if (filter && filter.trim().length > 0)\n        {\n          var filteredData = data.cachedBookings.filter( (element) => \n\n             (element.fullname.toLowerCase().indexOf(filter.toLowerCase()) >= 0)\n             || (element.service.toLowerCase().indexOf(filter.toLowerCase()) >= 0)\n               \n              \n          );\n  \n  \n          setData({bookings: [...filteredData], cachedBookings: data.cachedBookings, isFetching: false});\n        }else\n        {\n          setData({bookings: [...data.cachedBookings], cachedBookings: data.cachedBookings, isFetching: false});\n        }\n      },\n      [filter]);\n\n  \n      useEffect(() => {\n\n       loadData(topCount)\n    \n      }, [state.bookingDialogDataChanged]);    \n\n\n  const handleCloseSeeDetaisDialog = () =>\n  {\n    setSelectedBooking(null);\n    setSeeDetailsDialogOpen(false);\n  }    \n  \n  const openDetailsDialog = (event, id) =>\n  {\n    const booking = data.bookings.find(element => element._id === id);\n    setSelectedBooking(booking);\n    setSeeDetailsDialogOpen(true);\n\n  }\n\n  const refreshClicked = (event) =>{\n    setFilter('');\n    loadData(topCount)\n  }\n\n  const filterChanged = (event) =>{\n    setFilter(event.target.value);\n  }\n\n  const handleSelectionChanged = (newSelection) =>\n  {\n    if (newSelection.length > 0){\n      setSelectedRow(newSelection.rows[0]);\n    }\n    \n  }\n\n  const [page, setPage] = React.useState(1);\n\n  const handleExcelButtonClicked = (event) =>\n  {\n    setOpenDialogExcel(true);\n  }\n\n  const isTopSelectHidden = (date)=>\n  {\n    return date === 'live' || date === 'positive' || date === 'late' || date === 'today'\n  }\n\n\n  return (\n    <React.Fragment>\n      {data.isFetching && (\n        <div style={{ width: \"100%\", paddingTop: \"3px\" }}>\n          <LinearProgress color=\"primary\" />\n        </div>\n      )}\n      <Grid\n        container\n        direction=\"row\"\n        justify=\"space-between\"\n        alignItems=\"flex-end\"\n      >\n        <Grid item md={4}>\n          <div style={{ textAlign: \"left\", paddingLeft: \"10px\" }}>\n            <Grid\n              container\n              direction=\"row\"\n              justify=\"flex-start\"\n              alignItems=\"center\"\n            >\n              <Grid item>\n                <span style={{ paddingRight: \"15px\", color: \"#555\" }}>\n                  {\" \"}\n                  {getTableIcon(props.date)}{\" \"}\n                </span>\n              </Grid>\n              <Grid item>\n                <span\n                  style={{\n                    fontSize: \"1.4rem\",\n                    fontWeight: \"600\",\n                    color: \"#444\",\n                  }}\n                >\n                  {\" \"}\n                  {getTableTitle(props.date)}{\" \"}\n                </span>\n              </Grid>\n              <Grid item>\n                <Tooltip title=\"Refresh\" placement=\"right\">\n                  <IconButton\n                    color=\"primary\"\n                    className={classes.refreshButton}\n                    onClick={refreshClicked}\n                  >\n                    <RefreshIcon />\n                  </IconButton>\n                </Tooltip>\n              </Grid>\n            </Grid>\n          </div>\n        </Grid>\n\n        <Grid item md={3}>\n          {props.date === \"completed\" && state.showCreateExcel && (\n            <div style={{ paddingBottom: \"5px\" }}>\n              <Button\n                className={classes.ExportToExcelButton}\n                variant=\"outlined\"\n                color=\"default\"\n                onClick={handleExcelButtonClicked}\n                startIcon={\n                  <FontAwesomeIcon\n                    style={{ color: \"#009900\" }}\n                    icon={faFileExcel}\n                  />\n                }\n              >\n                export to excel\n              </Button>\n            </div>\n          )}\n        </Grid>\n\n        {data.isFetching && <div className={classes.HideNowRows}></div>}\n\n        <Grid item md={3}>\n          <TextField\n            variant=\"standard\"\n            value={filter}\n            onChange={filterChanged}\n            margin=\"normal\"\n            size=\"small\"\n            id=\"filter\"\n            label=\"Filter\"\n            name=\"filter\"\n            autoComplete=\"off\"\n          />\n        </Grid>\n\n        <Grid item hidden={isTopSelectHidden(props.date)}>\n          <FormControl className={classes.topSelect}>\n            <InputLabel id=\"top-select-label\">Limit</InputLabel>\n            <Select\n              labelId=\"top-select-label\"\n              id=\"top-simple-select\"\n              value={topCount}\n              onChange={topCountChanged}\n            >\n              <MenuItem value={25}>25</MenuItem>\n              <MenuItem value={50}>50</MenuItem>\n              <MenuItem value={100}>100</MenuItem>\n              <MenuItem value={500}>500</MenuItem>\n              <MenuItem value={1000}>1000</MenuItem>\n              <MenuItem value={10000}>ALL</MenuItem>\n            </Select>\n          </FormControl>\n\n          {/* <Button onClick={() => loadData(true)}> Show all records </Button> */}\n        </Grid>\n      </Grid>\n\n      <div style={{ height: 700, width: \"100%\" }}>\n        <DataGrid\n          rows={data.bookings}\n          columns={columns}\n          autoPageSize\n          page={page}\n          onPageChange={(params) => {\n            setPage(params.page);\n          }}\n          onSelectionChange={handleSelectionChanged}\n        />\n      </div>\n\n      <BookingDialog\n        booking={selectedBooking}\n        open={seeDetailsDialogOpen}\n        onClose={handleCloseSeeDetaisDialog}\n      />\n\n      {data.bookings && data.bookings.length > 0 && (\n        <Dialog\n          maxWidth=\"lg\"\n          open={openDialogExcel}\n          onClose={handleCloseDialogExcel}\n          PaperComponent={PaperComponent}\n          aria-labelledby=\"form-dialog-title\"\n        >\n          <DialogTitle id=\"draggable-dialog-title\">\n            <Grid\n              container\n              spacing={2}\n              direction=\"row\"\n              justify=\"center\"\n              alignItems=\"center\"\n            >\n              <Grid item>\n                <FontAwesomeIcon\n                  style={{ color: \"#2f942e\", fontSize: \"2rem\" }}\n                  icon={faFileExcel}\n                />\n              </Grid>\n\n              <Grid item>\n                <div\n                  style={{\n                    color: \"#2f942e\",\n                    paddingBottom: \"5px\",\n                    fontWeight: \"800\",\n                  }}\n                >\n                  {\" \"}\n                  Export to EXCEL{\" \"}\n                </div>\n              </Grid>\n            </Grid>\n\n            <Divider />\n          </DialogTitle>\n          <DialogContent>\n            <div\n              style={{\n                minHeight: \"600px\",\n                maxHeight: \"600px\",\n                minWidth: \"1200px\",\n                maxWidth: \"1200px\",\n              }}\n            >\n              <div>\n                <Grid row container justify=\"center\" spacing={3}>\n                  <Grid item>\n                    <FormControlLabel\n                      control={\n                        <Switch\n                          checked={justCorporate}\n                          onChange={justCorporateChanged}\n                          name=\"justCorporate\"\n                        />\n                      }\n                      label=\"Just Corporate Records\"\n                    />\n                  </Grid>\n\n                  {justCorporate && (\n                    <Grid item>\n                      <FormControl\n                        style={{ marginTop: \"0px\" }}\n                        className={classes.formControl}\n                      >\n                        <Select\n                          labelId=\"select-corporate\"\n                          id=\"select-corporate-id\"\n                          value={corporate}\n                          onChange={corporateChanged}\n                        >\n                          {corporates.map((element) => (\n                            <MenuItem value={element}>{`${element}`}</MenuItem>\n                          ))}\n                        </Select>\n                      </FormControl>\n                    </Grid>\n                  )}\n                </Grid>\n\n                <MuiPickersUtilsProvider utils={DateFnsUtils}>\n                  <Grid row container justify=\"center\" spacing={3}>\n                    <Grid item>\n                      <KeyboardDatePicker\n                        disableToolbar\n                        variant=\"inline\"\n                        format=\"dd/MM/yyyy\"\n                        margin=\"normal\"\n                        id=\"date-picker-from\"\n                        label=\"From\"\n                        value={fromDate}\n                        onChange={handleFromDateChange}\n                        KeyboardButtonProps={{\n                          \"aria-label\": \"change date\",\n                        }}\n                      />\n                    </Grid>\n\n                    <Grid item>\n                      <KeyboardDatePicker\n                        disableToolbar\n                        variant=\"inline\"\n                        format=\"dd/MM/yyyy\"\n                        margin=\"normal\"\n                        id=\"date-picker-until\"\n                        label=\"Until\"\n                        value={untilDate}\n                        onChange={handleUntilDateChange}\n                        KeyboardButtonProps={{\n                          \"aria-label\": \"change date\",\n                        }}\n                      />\n                    </Grid>\n\n                    <Grid item>\n                      <div style={{ paddingTop: \"30px\", marginLeft: \"20px\" }}>\n                        <ReactHTMLTableToExcel\n                          id=\"test-table-xls-button\"\n                          className={classes.ExportToExcelButtonInline}\n                          table=\"table-to-xls\"\n                          filename={`PCR.Report.${fromDateStr}.${untilDateStr}`}\n                          sheet=\"PCR-Report\"\n                          buttonText=\"Download as XLS\"\n                        />\n                      </div>\n                    </Grid>\n                  </Grid>\n                </MuiPickersUtilsProvider>\n              </div>\n\n              <div>\n                <Grid container spacing={3}>\n                  <Grid item xs>\n                    <FormControlLabel\n                      control={\n                        <Checkbox\n                          checked={chkDate}\n                          onChange={chkDateChanged}\n                          name=\"chkDate\"\n                        />\n                      }\n                      label=\"Date\"\n                    />\n                  </Grid>\n                  <Grid item xs>\n                    <FormControlLabel\n                      control={\n                        <Checkbox\n                          checked={chkForename}\n                          onChange={chkForenameChanged}\n                          name=\"chkForename\"\n                        />\n                      }\n                      label=\"Forename\"\n                    />\n                  </Grid>\n                  <Grid item xs>\n                    <FormControlLabel\n                      control={\n                        <Checkbox\n                          checked={chkSurname}\n                          onChange={chkSurnameChanged}\n                          name=\"chkSurname\"\n                        />\n                      }\n                      label=\"Surname\"\n                    />\n                  </Grid>\n                  <Grid item xs>\n                    <FormControlLabel\n                      control={\n                        <Checkbox\n                          checked={chkDOB}\n                          onChange={chkDOBChanged}\n                          name=\"chkDOB\"\n                        />\n                      }\n                      label=\"D.O.B\"\n                    />\n                  </Grid>\n                  <Grid item xs>\n                    <FormControlLabel\n                      control={\n                        <Checkbox\n                          checked={chkEmail}\n                          onChange={chkEmailChanged}\n                          name=\"chkEmail\"\n                        />\n                      }\n                      label=\"Email\"\n                    />\n                  </Grid>\n                  <Grid item xs>\n                    <FormControlLabel\n                      control={\n                        <Checkbox\n                          checked={chkTel}\n                          onChange={chkTelChanged}\n                          name=\"chkTel\"\n                        />\n                      }\n                      label=\"Tel\"\n                    />\n                  </Grid>\n                  <Grid item xs>\n                    <FormControlLabel\n                      control={\n                        <Checkbox\n                          checked={chkCertificate}\n                          onChange={chkCertificateChanged}\n                          name=\"chkCertificate\"\n                        />\n                      }\n                      label=\"Certificate\"\n                    />\n                  </Grid>\n                  <Grid item xs>\n                    <FormControlLabel\n                      control={\n                        <Checkbox\n                          checked={chkAntiBodyTest}\n                          onChange={chkAntiBodyTestChanged}\n                          name=\"chkAntiBodyTest\"\n                        />\n                      }\n                      label=\"AntiBodyTest\"\n                    />\n                  </Grid>\n                  <Grid item xs>\n                    <FormControlLabel\n                      control={\n                        <Checkbox\n                          checked={chkextRef}\n                          onChange={chkextRefChanged}\n                          name=\"chkextRef\"\n                        />\n                      }\n                      label=\"Lab No.\"\n                    />\n                  </Grid>\n                  <Grid item xs>\n                    <FormControlLabel\n                      control={\n                        <Checkbox\n                          checked={chkPrice}\n                          onChange={chkPriceChanged}\n                          name=\"chkPrice\"\n                        />\n                      }\n                      label=\"Price\"\n                    />\n                  </Grid>\n                </Grid>\n              </div>\n\n              <div style={{ width: \"100%\", paddingTop: \"20px\" }}>\n                <table className={classes.table} id=\"table-to-xls\">\n                  <tr>\n                    {chkDate && <th className={classes.th}>Date</th>}\n                    {chkForename && <th className={classes.th}>Forename</th>}\n                    {chkSurname && <th className={classes.th}>Surename</th>}\n                    {chkDOB && <th className={classes.th}>D.O.B</th>}\n                    {chkEmail && <th className={classes.th}>Email</th>}\n                    {chkTel && <th className={classes.th}>Tel</th>}\n                    {chkCertificate && (\n                      <th className={classes.th}>Certificate</th>\n                    )}\n                    {chkAntiBodyTest && (\n                      <th className={classes.th}>AntiBodyTest</th>\n                    )}\n                    {chkextRef && <th className={classes.th}>Lab No.</th>}\n                    {chkPrice && <th className={classes.th}>Price (£) </th>}\n                  </tr>\n\n                  {data.bookings\n                    .filter((booking) => {\n                      if (!justCorporate) {\n                        return (\n                          booking.bookingDate >= fromDateStr &&\n                          booking.bookingDate <= untilDateStr\n                        );\n                      } else {\n                        return (\n                          booking.bookingDate >= fromDateStr &&\n                          booking.bookingDate <= untilDateStr &&\n                          booking.paid &&\n                          booking.paidBy === \"corporate\" &&\n                          booking.corporate === corporate\n                        );\n                      }\n                    })\n\n                    .map((booking) => (\n                      <tr>\n                        {chkDate && (\n                          <td className={classes.td}>\n                            {FormatDateFromString(booking.bookingDate)}\n                          </td>\n                        )}\n                        {chkForename && (\n                          <td className={classes.td}>\n                            {booking.forenameCapital}\n                          </td>\n                        )}\n                        {chkSurname && (\n                          <td className={classes.td}>\n                            {booking.surnameCapital}\n                          </td>\n                        )}\n                        {chkDOB && (\n                          <th className={classes.th}>\n                            {/* {FormatDateFromString(booking.birthDate)} */}\n                          </th>\n                        )}\n                        {chkEmail && (\n                          <td className={classes.td}>{booking.email}</td>\n                        )}\n                        {chkTel && (\n                          <td className={classes.td}>{booking.phone}</td>\n                        )}\n                        {chkCertificate && (\n                          <td className={classes.td}>\n                            {booking.certificate ? \"YES\" : \"NO\"}\n                          </td>\n                        )}\n                        {chkAntiBodyTest && (\n                          <td className={classes.td}>\n                            {booking.antiBodyTest ? \"YES\" : \"NO\"}\n                          </td>\n                        )}\n                        {chkextRef && (\n                          <td className={classes.td}>{booking.extRef}</td>\n                        )}\n                        {chkPrice && (\n                          <td className={classes.td}>\n                            {PriceCalculator.calculatePrice(booking)}\n                          </td>\n                        )}\n                      </tr>\n                    ))}\n                </table>\n              </div>\n            </div>\n          </DialogContent>\n        </Dialog>\n      )}\n    </React.Fragment>\n  );\n} ","import React, { useEffect } from 'react';\nimport { useTheme } from '@material-ui/core/styles';\nimport { LineChart, Line, XAxis, YAxis, Label, ResponsiveContainer } from 'recharts';\nimport Title from './Title';\nimport dateformat from 'dateformat';\nimport BookService from './services/BookService';\nimport { LinearProgress } from '@material-ui/core';\n\n// Generate Sales Data\nfunction createData(time, amount) {\n  return { time, amount };\n}\n\n\nconst emptyData = [\n  createData('09:00', 0),\n  createData('10:00', 0),\n  createData('11:00', 0),\n  createData('12:00', 0),\n  createData('13:00', 0),\n  createData('14:00', 0),\n  createData('15:00', 0),\n  createData('16:00', 0),\n  createData('17:00', 0),\n  createData('18:00', undefined),\n\n];\n\nconst getCount = (data, str) =>\n{\n  if (!data)\n    return 0;\n\n  var count = 0;\n  for (var i=0; i < data.length; i++)\n  {\n    if (data[i]._id.substr(0,2) === str)\n    {\n      count += data[i].count;\n    }\n  }\n  return count;\n}\n\nexport default function Chart() {\n  const theme = useTheme();\n\n  const [data, setData] = React.useState(emptyData);\n  const [loading, setLoading] = React.useState(false)\n\n  useEffect(() =>\n  {\n    const fetchData = async () =>\n    {\n      const todayStr = dateformat(new Date(), 'yyyy-mm-dd');\n      var result = [];\n      try\n      {\n          setLoading(true)\n          const res = await BookService.getBookingsStatsByDateStr(todayStr);\n          setLoading(false)\n          const data = res.data.result;\n          result.push(createData('09:00', getCount(data,'09')));\n          result.push(createData('10:00', getCount(data,'10')));\n          result.push(createData('11:00', getCount(data,'11')));\n          result.push(createData('12:00', getCount(data,'12')));\n          result.push(createData('13:00', getCount(data,'13')));\n          result.push(createData('14:00', getCount(data,'14')));\n          result.push(createData('15:00', getCount(data,'15')));\n          result.push(createData('16:00', getCount(data,'16')));\n          result.push(createData('17:00', getCount(data,'17')));\n          result.push(createData('18:00', undefined));\n \n           setData(result);\n      }\n      catch(err){\n        setLoading(false)\n        console.error(err);\n      }\n\n    }\n  \n   fetchData();\n\n  }, [] );\n\n  return (\n    <React.Fragment>\n       {loading && (\n        <div style={{ width: \"100%\", paddingTop: \"3px\" }}>\n          <LinearProgress color=\"primary\" />\n        </div>\n      )}\n      <Title>Today</Title>\n      <ResponsiveContainer>\n        <LineChart\n          data={data}\n          margin={{\n            top: 16,\n            right: 16,\n            bottom: 0,\n            left: 24,\n          }}\n        >\n          <XAxis dataKey=\"time\" stroke={theme.palette.text.secondary} />\n          <YAxis stroke={theme.palette.text.secondary}>\n            <Label\n              angle={270}\n              position=\"left\"\n              style={{ textAnchor: 'middle', fill: theme.palette.text.primary }}\n            >\n              Online Bookings\n            </Label>\n          </YAxis>\n          <Line type=\"monotone\" dataKey=\"amount\" stroke={theme.palette.primary.main} dot={false} />\n        </LineChart>\n      </ResponsiveContainer>\n    </React.Fragment>\n  );\n}","import React, { useEffect } from \"react\";\nimport Link from \"@material-ui/core/Link\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport Typography from \"@material-ui/core/Typography\";\nimport Title from \"./Title\";\nimport { Grid, LinearProgress, Tooltip } from \"@material-ui/core\";\nimport * as dateformat from \"dateformat\";\nimport BookService from \"./services/BookService\";\nimport BookingDialog from \"./BookingDialog\";\n\nconst useStyles = makeStyles({\n  depositContext: {\n    flex: 1,\n  },\n\n  bookingBox: {\n    display: \"flex\",\n    margin: \"5px\",\n    padding: \"5px\",\n    maxWidth: \"90px\",\n    minHeight: \"30px\",\n    border: \"1px solid #eee\",\n    fontSize: \"12px\",\n    fontWeight: \"500\",\n    cursor: \"pointer\",\n    backgroundColor: \"#ebedf7\",\n    color: \"#3f51b5\",\n    boxShadow: \"2px 4px #fafafa\",\n    borderRadius: \"5px\",\n    textAlign: \"center\",\n    alignItems: \"center\",\n    justifyItems: \"center\",\n    align: \"center\",\n\n    \"&:hover\": {\n      background: \"#3f51b5\",\n      color: \"#ebedf7\",\n    },\n  },\n});\n\nconst isWeekend = (date) =>\n{\n    return (date.getDay() === 0 || date.getDay() === 6) /// Weekend\n}\n\nconst getCurrentTimeSlot = (now) =>\n{\n    var min = now.getMinutes();\n    var hour = now.getHours();\n    var pm = (hour >= 12);\n    if (hour > 12)\n    {\n      hour = hour - 12;\n    }\n\n    if (min >= 0 && min < 15)\n    {\n      min = 0;\n    }else if (min >= 15 && min < 30)\n    {\n      min = 15;\n    }else if (min >= 30 && min < 45)\n    {\n      min = 30;\n    }else if (min >= 45)\n    {\n      min = 45;\n    }\n\n    const minStr = min < 10 ? `0${min}` : `${min}`;\n    const hourStr = hour < 10 ? `0${hour}` : `${hour}`;\n    const pmStr = pm ? 'PM' : 'AM';\n\n    const timeStr = `${hourStr}:${minStr} ${pmStr}`;\n\n    if (isWeekend(now))\n    {\n      if (now.getHours() < 10 || now.getHours() >= 14)\n      {\n        return null;\n      }\n      else\n      {\n        return timeStr;\n      }\n    }\n    else\n    {\n      if (now.getHours() < 9 || now.getHours() >= 18)\n      {\n        return null;\n      }\n      else\n      {\n        return timeStr;\n      }\n\n    }\n}\n\nconst getCurrentTimeSlotLabel = (timeStr) =>\n{\n  if (!timeStr)\n  {\n    return 'Closed';\n  }\n\n  var hour = parseInt(timeStr.substr(0,2));\n  var minute = parseInt(timeStr.substr(3,2)); \n  var pm = timeStr.indexOf('PM') > 0;\n  if (minute !== 45)\n  {\n    minute += 15;\n  }\n  else{\n    minute = 0;\n    hour += 1;\n    if (hour >= 12)\n    {\n      pm = true;\n    }\n    if (hour > 12)\n    {\n      hour = hour - 12;\n    }\n  }\n\n  const minStr = minute < 10 ? `0${minute}` : `${minute}`;\n  const hourStr = hour < 10 ? `0${hour}` : `${hour}`;\n  const pmStr = pm ? 'PM' : 'AM';\n\n  const endTimeStr = `${hourStr}:${minStr} ${pmStr}`;\n\n  return `${timeStr} - ${endTimeStr}`;\n\n}\n\nexport default function CurrentVisits() {\n  const classes = useStyles();\n\n  const [current, setCurrent] = React.useState(new Date());\n  const [bookings, setBookings] = React.useState([]);\n\n  const [selectedBooking, setSelectedBooking] = React.useState(null);\n  const [openDialog, setOpenDialog] = React.useState(false);\n\n  const [loading, setLoading] = React.useState(false);\n\n  useEffect(() => {\n    const interval = setInterval(() => {\n      setCurrent(new Date());\n    }, 30000);\n\n    return () => {\n      clearInterval(interval);\n    };\n  }, []);\n\n  useEffect(() => {\n    const currentTimeSlot = getCurrentTimeSlot(current);\n    if (!currentTimeSlot) return;\n    const todayStr = dateformat(current, \"yyyy-mm-dd\");\n    setLoading(true);\n    BookService.getBookingsByDateStrandTime(todayStr, currentTimeSlot)\n      .then((res) => {\n        setLoading(false);\n        if (res.data.status === \"OK\") {\n          setBookings([...res.data.bookings]);\n        }\n      })\n      .catch((err) => {\n        setLoading(false);\n        console.log(err);\n      });\n  }, [current]);\n\n  const getBookingsBox = (_bookings) => {\n    if (_bookings && _bookings.length > 0) {\n      return (\n        <div className={classes.root}>\n          <Grid\n            container\n            justify=\"flex-start\"\n            alignItems=\"flex-start\"\n            spacing={0}\n          >\n            {_bookings.map((booking) => (\n              <Grid item>\n                <div\n                  className={classes.bookingBox}\n                  onClick={(event) => bookingCliked(event, booking)}\n                >\n                  <span style={{ textAlign: \"center\" }}>\n                    {\" \"}\n                    {`${booking.surnameCapital}`.substring(0, 10)}{\" \"}\n                  </span>\n                </div>\n              </Grid>\n            ))}\n          </Grid>\n        </div>\n      );\n    }\n  };\n\n  const bookingCliked = (event, booking) => {\n    setSelectedBooking(booking);\n    setOpenDialog(true);\n  };\n\n  const handleCloseDialog = () => {\n    setOpenDialog(false);\n  };\n\n  return (\n    <React.Fragment>\n      {loading && (\n        <div style={{ width: \"100%\", paddingTop: \"3px\" }}>\n          <LinearProgress color=\"primary\" />\n        </div>\n      )}\n\n      <Title>Current Visits</Title>\n      <Typography component=\"p\" variant=\"h6\">\n        {getCurrentTimeSlotLabel(getCurrentTimeSlot(current))}\n      </Typography>\n      <Typography color=\"textSecondary\" className={classes.depositContext}>\n        on {dateformat(current, \"dd mmmm, yyyy\")}\n      </Typography>\n\n      {getBookingsBox(bookings)}\n\n      <BookingDialog\n        booking={selectedBooking}\n        open={openDialog}\n        onClose={handleCloseDialog}\n      />\n    </React.Fragment>\n  );\n}\n","import React, { useEffect } from 'react';\nimport Link from '@material-ui/core/Link';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Table from '@material-ui/core/Table';\nimport TableBody from '@material-ui/core/TableBody';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableHead from '@material-ui/core/TableHead';\nimport TableRow from '@material-ui/core/TableRow';\nimport Title from './Title';\nimport BookService from './services/BookService';\nimport * as dateformat from 'dateformat';\nimport GlobalState from './../GlobalState';\nimport { getMenuIndex } from './../MenuList';\nimport {FormatDateFromString, FormatDateFromStringShortYear} from './DateFormatter';\nimport { LinearProgress } from '@material-ui/core';\n\n\nconst useStyles = makeStyles((theme) => ({\n  seeMore: {\n    marginTop: theme.spacing(3),\n  },\n}));\n\nexport default function BookingView() {\n  const classes = useStyles();\n  const [state, setState] = React.useContext(GlobalState);  \n\n  const [data, setData] = React.useState({bookings: [] , isFetching : false});\n\n  const [refresh, setRefresh] = React.useState(false);\n\n  const [loading, setLoading] = React.useState(false)\n\n  const seeMoreRecords = (event) => {\n    event.preventDefault();\n    setState(state=>({...state, currentMenuIndex:getMenuIndex('gynae',`recentBookings`)}));\n  }\n\n  const loadData = () => \n  {\n    setData({bookings: data.bookings, isFetching: true});\n    setLoading(true)\n    BookService.getRecentBookings().then( (res) =>{\n      setLoading(false)\n        setData({bookings: res.data, isFetching: false});\n\n    }).catch( (err) => {\n      setLoading(false)\n        console.log(err);\n        setData({bookings: data.bookings, isFetching: false});\n    });\n  }\n\n\n  useEffect( () => {\n          loadData();\n        },\n        [refresh]);   \n\n\n   useEffect( () => {\n     loadData();\n     const interval = setInterval(() => {\n       setRefresh(refresh => !refresh);\n     }, 30000);\n\n     return () =>\n     {\n       clearInterval(interval)\n     }\n     \n   }, []) ;    \n\n   const formatTimeStamp = (timeStamp) =>\n   {\n     const todayStr = dateformat(new Date(), 'yyyy-mm-dd');\n     const timeStampStr = dateformat(timeStamp, 'yyyy-mm-dd');\n     if (todayStr === timeStampStr)\n     {\n       return dateformat(timeStamp, \"'Today', h:MM:ss TT\");\n     }\n     else\n     {\n        return dateformat(timeStamp, \"mmm dS, h:MM:ss TT\");\n     }\n   }\n\n  return (\n    <React.Fragment>\n       {loading && (\n        <div style={{ width: \"100%\", paddingTop: \"3px\" }}>\n          <LinearProgress color=\"primary\" />\n        </div>\n      )}\n      <Title>Recent Bookings</Title>\n      <Table size=\"small\">\n        <TableHead>\n          <TableRow>\n            <TableCell>TimeStamp</TableCell>        \n            <TableCell>Fullname</TableCell>\n            <TableCell>Email</TableCell>\n            <TableCell>Tel</TableCell>\n            <TableCell>Booked Date</TableCell>\n            <TableCell>Booked Time</TableCell> \n          </TableRow>\n        </TableHead>\n        <TableBody>\n          {data.bookings.map((row) => (\n            <TableRow key={row._id}>\n              <TableCell>{formatTimeStamp(row.timeStamp)}</TableCell>\n              <TableCell>{row.fullname}</TableCell>\n              <TableCell>{row.email}</TableCell>\n              <TableCell>{row.phone}</TableCell>\n              <TableCell>{FormatDateFromString(row.bookingDate)}</TableCell>\n              <TableCell>{row.bookingTime}</TableCell>\n            </TableRow>\n          ))}\n        </TableBody>\n      </Table>\n      <div className={classes.seeMore}>\n        <Link color=\"primary\" href=\"#\" onClick={seeMoreRecords}>\n          See more records\n        </Link>\n      </div>\n    </React.Fragment>\n  );\n}","import React from 'react';\nimport clsx from 'clsx';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Grid from '@material-ui/core/Grid';\nimport Paper from '@material-ui/core/Paper';\nimport Chart from './Chart';\nimport CurrentVisits from './CurrentVisits';\n\n\n\nimport { Tooltip } from '@material-ui/core';\nimport GlobalState from './../GlobalState';\nimport BookingView from './BookingView';\n\nconst useStyles = makeStyles((theme) => ({\n \n  paper: {\n    padding: theme.spacing(2),\n    display: 'flex',\n    overflow: 'auto',\n    flexDirection: 'column',\n  },\n  fixedHeight: {\n    height: 240,\n  },\n}));\n\nexport default function DashboardPreview() {\n  const classes = useStyles();\n  const [state, setState] = React.useContext(GlobalState);\n\n  const fixedHeightPaper = clsx(classes.paper, classes.fixedHeight);\n\n  return (\n        <React.Fragment>\n\n<           Grid container spacing={3}>\n                    {/* Chart */}\n                    <Grid item xs={12} md={4} lg={6}>\n                    <Paper className={fixedHeightPaper}>\n                        <Chart />\n                    </Paper>\n                    </Grid>\n                    {/* Current Visits */}\n                    <Grid item xs={12} md={4} lg={6}>\n                    <Paper className={fixedHeightPaper}>\n                        <CurrentVisits />\n                    </Paper>\n                    </Grid>\n                    {/* Recent Bookings */}\n                    <Grid item xs={12}>\n                    <Paper className={classes.paper}>\n                        <BookingView/>\n                    </Paper>\n                    </Grid>\n          </Grid>\n        </React.Fragment>\n  );\n}","import React from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Typography from '@material-ui/core/Typography';\nimport GlobalState from './../GlobalState';\nimport Grid from '@material-ui/core/Grid';\nimport Accordion from '@material-ui/core/Accordion';\nimport AccordionDetails from '@material-ui/core/AccordionDetails';\nimport AccordionSummary from '@material-ui/core/AccordionSummary';\nimport ExpandMoreIcon from '@material-ui/icons/ExpandMore';\nimport { Button, Checkbox, FormControlLabel, Link, TextField, Tooltip } from '@material-ui/core';\nimport PDFService from './services/PDFService';\n\nimport {calculatePrice} from './PriceCalculator';\n\n\nimport bookingService from './services/BookService';\nimport CheckIcon from '@material-ui/icons/Check';\nimport CloseIcon from '@material-ui/icons/Close';\nimport DeleteIcon from '@material-ui/icons/Delete';\n\nimport {FormatDateFromString, RevertFormatDateFromString} from './DateFormatter';\n\nimport PrintIcon from '@material-ui/icons/Print';\n\n\nconst useStyles = makeStyles((theme) => ({\n  box: {\n    backgroundColor : \"#373737\",\n    color: \"#fff\",\n    padding : \"1px\",\n    borderRadius : \"4px\",\n    textAlign: \"justify\",\n    paddingRight: \"40px\"\n  },\n\n  boxRed: {\n    backgroundColor : \"#dc2626\",\n    color: \"#fff\",\n    padding : \"1px\",\n    borderRadius : \"4px\",\n    textAlign: \"justify\",\n    paddingRight: \"40px\"\n  },\n\n  boxInfo: {\n    textAlign: \"justify\",\n    backgroundColor : \"#fafafa\",\n    color: \"#333\",\n    padding : \"1px\",\n    borderRadius : \"4px\",\n    paddingRight: \"40px\",\n    border: \"1px solid #eee\",\n  },\n\n  ul: {\n     listStyle: \"none\",\n     padding: \"0\",\n     margin: \"0\"\n  },\n\n  li: {\n    marginBottom : \"15px\"\n  },\n\n\n  icon: {\n    marginRight : \"8px\"\n  },\n\n  root: {\n    width: '100%',\n  },\n\n  lineThrough:{\n    textDecoration : \"line-through\",\n  },\n\n\n\n  heading: {\n    fontSize: theme.typography.pxToRem(15),\n    flexBasis: '33.33%',\n    flexShrink: 0,\n    color: theme.palette.text.secondary,\n  },\n  secondaryHeading: {\n    fontSize: theme.typography.pxToRem(15),\n  },\n\n  infoDetails:{\n    textAlign: \"left\",\n  },\n\n  infoTitle:{\n    fontWeight: \"800\",\n    marginRight: \"10px\"\n  },\n\n  infoData:{\n    fontWeight: \"400\",\n  },\n\n  title:\n  {\n    // textAlign : \"center\",\n    // fontWeight : \"500\",\n    // margin: \"10px\",\n    // backgroundColor : \"#eee\",\n    // padding : \"10px\",\n    // borderRadius : \"4px\"\n    textAlign: \"center\",\n    fontWeight : \"600\",\n    marginLeft: \"10px\",\n    marginBottom: \"5px\"\n\n  },\n\n  Accordion:{\n    backgroundColor : \"#f5f5f5\",\n    color: \"#222\"\n  },\n\n  AccordionDeleted:{\n    backgroundColor : \"#aaa\",\n    color: \"#555\"\n  },\n\n  DownloadForm:{\n      marginTop: \"10px\",\n      marginBottom : \"10px\"\n  },\n\n  infoDataCharges:{\n    fontSize : \"18px\",\n    color: \"green\",\n    fontWeight : \"600\"\n  },\n\n  infoDataChargesHigher:{\n    fontSize : \"18px\",\n    color: \"red\",\n    fontWeight : \"600\"\n  },\n  BookedLabel:{\n    color: \"#606060\",\n    paddingRight: \"10px\",\n    paddingLeft: \"5px\",\n    paddingBottom: \"3px\",\n    paddingTop: \"3px\",\n    fontWeight: \"800\",\n    borderLeft: \"5px solid\",\n    borderColor: \"#606060\"\n  },\n\n  PatientAttendedLabel:{\n    color: \"#0066aa\",\n    paddingRight: \"10px\",\n    paddingLeft: \"5px\",\n    paddingBottom: \"3px\",\n    paddingTop: \"3px\",\n    fontWeight: \"800\",\n    borderLeft: \"5px solid\",\n    borderColor: \"#0066aa\"\n  },\n\n  SampleTakenLabel:{\n    color: \"#0066cc\",\n    paddingRight: \"10px\",\n    paddingLeft: \"5px\",\n    paddingBottom: \"3px\",\n    paddingTop: \"3px\",\n    fontWeight: \"800\",\n    borderLeft: \"5px solid\",\n    borderColor: \"#0066cc\"\n  },\n\n  ReportSentLabel:{\n    color: \"#009900\",\n    paddingRight: \"10px\",\n    paddingLeft: \"5px\",\n    paddingBottom: \"3px\",\n    paddingTop: \"3px\",\n    fontWeight: \"800\",\n    borderLeft: \"5px solid\",\n    borderColor: \"#009900\"\n  },\n\n  ReportCertSentLabel:{\n    color: \"#009900\",\n    paddingRight: \"10px\",\n    paddingLeft: \"5px\",\n    paddingBottom: \"3px\",\n    paddingTop: \"3px\",\n    fontWeight: \"800\",\n    borderLeft: \"5px solid\",\n    borderColor: \"#009900\"\n  },\n\n  PositiveLabel:{\n    color: \"red\",\n    paddingRight: \"10px\",\n    paddingLeft: \"5px\",\n    paddingBottom: \"3px\",\n    paddingTop: \"3px\",\n    fontWeight: \"800\",\n    borderLeft: \"5px solid\",\n    borderColor: \"red\"\n  },\n\n\n  EditButton:\n  {\n    marginBottom : \"20px\",\n    backgroundColor : \"#2f942e\",\n    \"&:hover\": {\n      background: \"green\",\n      color: \"#fff\"\n    },\n    textDecoration : \"none !important\",\n    padding: \"10px\",\n    width: \"400px\"   \n  },\n\n  RestoreButton:\n  {\n    marginBottom : \"20px\",\n    backgroundColor : \"#fafafa\",\n    color: \"#555\",\n    \"&:hover\": {\n      background: \"#f1f1f1\",\n      color: \"#111\"\n    },\n    textDecoration : \"none !important\",\n    padding: \"10px\" ,\n    width: \"400px\"    \n  },\n\n\n  DeleteButton:\n  {\n    marginBottom : \"20px\",\n    backgroundColor : \"#d90015\",\n    \"&:hover\": {\n      background: \"#b80012\",\n      color: \"#fff\"\n    },\n\n    padding: \"10px\",\n    width: \"400px\"   \n    \n  },\n\n  SaveButton:\n  {\n    marginBottom : \"10px\",\n    padding: \"10px\",\n\n    backgroundColor : \"#d1175e\",\n    \"&:hover\": {\n      background: \"#bd0d50\",\n      color: \"#fff\",\n      \n    },\n    width: \"400px\"   \n\n  },\n\n  CancelButton:\n  {\n    marginBottom : \"20px\",\n    // padding: \"10px\"\n  },\n\n  TextBox: {\n    \n    padding : \"0px\"\n\n  },\n\n  checkIcon:{\n    color: \"green\",   \n  },\n\n  closeIcon:{\n    color: \"red\"\n  },\n\n  centeredLabel : {\n    display: \"flex\",\n    alignItems: \"center\"\n  }\n\n\n\n\n\n\n}));\n\n\n\n\nexport default function PersonsBox() {\n    const classes = useStyles();\n\n    const [state, setState] = React.useContext(GlobalState);\n\n    const [expanded, setExpanded] = React.useState('panel0');\n\n    const [editMode, setEditMode] = React.useState({edit : false, person : null});\n    const [deleteMode, setDeleteMode] = React.useState({delete : false, person : null});\n    const [restoreMode, setRestoreMode] = React.useState({restore : false, person : null});\n\n    const [saving, setSaving] =  React.useState(false);\n    const [deleting, setDeleting] =  React.useState(false);\n    const [restoring, setRestoring] =  React.useState(false);\n\n    const [validationError, setValidationError] = React.useState({});\n\n\n    const [bookingDate, setBookingDate] = React.useState('');\n    const [bookingTime, setBookingTime] = React.useState('');\n\n    const [fullname, setFullname] = React.useState('');\n    const [email, setEmail] = React.useState('');\n    const [tel, setTel] = React.useState('');\n    const [service, setService] = React.useState('');\n    const [notes, setNotes] = React.useState('');\n\n\n    const bookingDateChanged = (event) =>\n    {\n      setBookingDate(event.target.value);\n      setValidationError({...validationError, bookingDateError : false});\n    }\n\n    const bookingTimeChanged = (event) =>\n    {\n      setBookingTime(event.target.value);\n      setValidationError({...validationError, bookingTimeError : false});\n    }\n\n    const fullnameChanged = (event) =>\n    {\n      setFullname(event.target.value);\n    }\n\n    const emailChanged = (event) =>\n    {\n      setEmail(event.target.value);\n    }\n\n    const telChanged = (event) =>\n    {\n      setTel(event.target.value);\n    }\n\n    const serviceChanged = (event) =>\n    {\n      setService(event.target.value);\n    }\n\n    const notesChanged = (event) =>\n    {\n      setNotes(event.target.value);\n    }\n\n\n    const handleChange = (panel) => (event, isExpanded) => {\n      setExpanded(isExpanded ? panel : false);\n    };\n\n    const getStatusLabel = (status) => {\n      if (status === 'booked')\n      {\n        return (\n          <span className={classes.BookedLabel}> Booking Made </span>\n        );\n    \n      }else if (status === 'patient_attended')\n      {\n        return (\n          <span  className={classes.PatientAttendedLabel}> Patient Attended </span>\n        );\n    \n      }\n      else{\n        return 'Unknown';\n      }\n    }\n\n\n   const handleEditModeChanged = (edit, person) => {\n\n       if (edit)\n       {\n         setFullname(person.fullname);\n         setBookingDate(FormatDateFromString(person.bookingDate));\n         setBookingTime(person.bookingTime);\n         setEmail(person.email);\n         setTel(person.phone);\n         setService(person.service)\n         if (person.notes)\n         {\n          setNotes(person.notes);\n         }\n        \n         setEditMode({edit: edit, person: person});\n\n       }\n       else if (!edit && !person)\n       {\n         setEditMode({edit: edit, person: person});\n       }\n       else if (!edit && person)\n       {\n          const booking = {};\n          const bookingId = person._id;\n          booking.email = email;\n          booking.phone = tel;\n          booking.fullname = fullname;\n          booking.notes = notes;\n          booking.service = service;\n          booking.bookingDate = RevertFormatDateFromString(bookingDate);\n          booking.bookingTime = bookingTime;\n          booking.bookingRef = person.bookingRef;\n\n          if  (validateBooking(booking))\n          {\n            updateBooking({bookingId: bookingId, person: booking});\n          }\n       }\n   }\n\n   const validateDate = (str) =>\n   {\n     var error = false;\n     if (!str || str.length !== 10)\n     {\n       error = true;\n     }\n\n     if (str.charAt(4) !== '-'  || str.charAt(7) !== '-')\n     {\n       error = true;\n     }\n\n     try\n     {\n       \n       const result = /^\\d{4}-\\d{2}-\\d{2}$/.test(str);\n       if (!result)\n       {\n          error = true;\n       }\n\n       const year = parseInt(str.substr(0,4));\n       const month = parseInt(str.substr(5,2));\n       const day = parseInt(str.substr(8,2));\n\n       if (year < 1900)\n       {\n          error = true;\n       }\n\n       if (month < 1 || month > 12)\n       {\n         error = true;\n       }        \n\n       if (day > 31)\n       {\n         error = true;\n       }\n\n     }catch(err)\n     {\n       error = true;\n     }\n\n\n\n     return !error;\n   }\n\n   const validateTime =(str) =>\n   {\n     var error = false;\n\n     const result = /^\\d{2}:\\d{2} AM$|^\\d{2}:\\d{2} PM$/.test(str);\n     if (!result)\n     {\n        error = true;\n     }\n\n     try{\n       const hour = parseInt(str.substr(0,2));\n       const minute = parseInt(str.substr(3,2));\n\n       if (hour < 0 || hour > 12)\n       {\n         error = true;\n       }\n\n       if (minute < 0 || minute > 59)\n       {\n         error = true;\n       }\n\n     }catch(err)\n     {\n       error = true;\n     }\n\n     return !error;\n   }\n\n   const validateBooking = (booking) =>\n   {\n      var error = false;\n\n      if (!validateDate(booking.bookingDate))\n      {\n        error = true;\n        setValidationError({...validationError, bookingDateError : true});\n      }\n\n      if (!validateTime(booking.bookingTime))\n      {\n        error = true;\n        setValidationError({...validationError, bookingTimeError : true});\n      }\n     \n\n      return !error;\n   }\n\n   const updateBooking = (payload) =>\n   {\n       setSaving(true);\n       bookingService.updateBooking(payload).then( (res) => {\n        setSaving(false);\n        setEditMode({edit: false, person: null});\n        setState(state => ({...state, RefreshPersonInfo : !state.RefreshPersonInfo}));\n\n       }).catch ( (err) => {\n         setSaving(false);\n         setEditMode({edit: false, person: null});\n         console.log(err);\n       });\n   }\n\n   const deleteBooking = (id) =>\n   {\n       setDeleting(true);\n       bookingService.deleteBooking(id).then( (res) => {\n        setDeleting(false);\n        setDeleteMode({delete: false, person: null});\n        setState(state => ({...state, RefreshPersonInfo : !state.RefreshPersonInfo}));\n\n       }).catch ( (err) => {\n          setDeleting(false);\n          setDeleteMode({delete: false, person: null});\n         console.log(err);\n       });\n   }\n\n   const restoreBooking = (id) =>\n   {\n       setRestoring(true);\n       bookingService.unDeleteBooking(id).then( (res) => {\n        setRestoring(false);\n        setRestoreMode({restore: false, person: null});\n        setState(state => ({...state, RefreshPersonInfo : !state.RefreshPersonInfo}));\n\n       }).catch ( (err) => {\n        setRestoring(false);\n        setRestoreMode({restore: false, person: null});\n         console.log(err);\n       });\n   }\n\n   const changeBackToBookingMade = (event, id) =>\n   {\n     setSaving(true);\n     bookingService.changeBackToBookingMade(id).then(res => {\n       setSaving(false);\n       setState(state => ({...state, RefreshPersonInfo : !state.RefreshPersonInfo}));\n     }).catch(err => {\n       console.log(err);\n       setSaving(false);\n     })\n   }\n\n\n\n   const handleDeleteModeChanged = (del, person) => {\n\n    if (del)\n    {\n      setDeleteMode({delete: del, person: person});\n    }\n    else if (!del && !person)\n    {\n      setDeleteMode({delete: del, person: person});\n    }\n    else if (!del && person)\n    {\n        deleteBooking(person._id);\n    }\n  }\n\n  const handleRestoreModeChanged = (restore, person) => {\n\n    if (restore)\n    {\n      setRestoreMode({restore: restore, person: person});\n    }\n    else if (!restore && !person)\n    {\n      setRestoreMode({restore: restore, person: person});\n    }\n    else if (!restore && person)\n    {\n        restoreBooking(person._id);\n    }\n  }\n\n  return (\n    <React.Fragment>\n          \n      <Grid container direction=\"column\" spacing={1} justify=\"flex-start\" alignItems=\"center\">\n          <div className={classes.title}> Following Records Found :</div>\n\n          {state.foundRecords.map((person,index) => (\n   \n                <Grid item xs={12} md={12} key={`panel${index}`}>\n                <div className={classes.root}>\n                    <Accordion className={person.deleted ? classes.AccordionDeleted : classes.Accordion} expanded={expanded === `panel${index}`} onChange={handleChange(`panel${index}`)}>\n                    <AccordionSummary className={person.deleted ? classes.lineThrough : ''}\n                        expandIcon={<ExpandMoreIcon />}\n                        aria-controls=\"panel1bh-content\"\n                        id={`panel${index}bh-header`}\n                    >\n                      {person.deleted && (\n                          <Tooltip  title=\"This record has been deleted.\">\n                            <DeleteIcon  style={{padding: 0, margin: 0,  color: \"#fff\", fontSize: 25 }}/>\n                        </Tooltip>\n                      )}\n\n                        <Typography className={classes.heading}> {`#${index+1}`} </Typography>\n                        <Typography className={classes.secondaryHeading}>\n                        {`${person.fullname}`}\n                        </Typography>\n                    </AccordionSummary>\n\n                    <AccordionDetails className={classes.infoDetails}>\n                        \n\n\n                        <ul className={classes.ul}>\n\n                        {/* Restore Functionality ******************************************* */}  \n                        <li hidden={!(restoreMode.restore && restoreMode.person._id  === person._id)}>\n                              <div style={{fontWeight: \"500\", paddingBottom: \"5px\", paddingLeft: \"5px\", fontSize:\"16px\" , color:\"#fff\"}}>\n                                Are you sure you want to restore this record?\n                              </div>\n                            </li>\n\n                            <li hidden={!person.deleted || (restoreMode.restore && restoreMode.person._id === person._id)}>\n                                 <Button\n\n                                    type=\"button\"\n                                    fullWidth\n                                    variant=\"contained\"\n                                    color=\"primary\"\n                                    onClick = {() => {handleRestoreModeChanged(true, person)}}\n                                    className={classes.RestoreButton}\n                                 >\n                                   Restore This Record\n                                </Button>\n                            </li>\n\n                            <li hidden={!(restoreMode.restore && restoreMode.person._id  === person._id)}>\n                                 <Button\n                                    type=\"button\"\n                                    fullWidth\n                                    variant=\"contained\"\n                                    color=\"primary\"\n                                    disabled = {restoring}\n                                    onClick = {() => {handleRestoreModeChanged(false, person)}}\n                                    className={classes.SaveButton}\n                                 >\n                                    YES, Restore this!\n                                </Button>\n                            </li>\n\n                            <li hidden={!(restoreMode.restore && restoreMode.person._id  === person._id)}>\n                                 <Button\n                                    type=\"button\"\n                                    fullWidth\n                                    variant=\"contained\"\n                                    color=\"default\"\n                                    disabled = {restoring}\n                                    onClick = {() => {handleRestoreModeChanged(false, null)}}\n                                    className={classes.CancelButton}\n                                 >\n                                    Cancel\n                                </Button>\n                            </li>\n\n                           {/*  ******************************************************************* */}\n\n                              {/* Edit Functionality ******************************************* */}\n\n                            <li hidden={person.deleted || deleteMode.delete || (editMode.edit && editMode.person._id === person._id)}>\n                                 <Button\n                                    type=\"button\"\n                                    fullWidth\n                                    variant=\"contained\"\n                                    color=\"primary\"\n                                    onClick = {() => {handleEditModeChanged(true, person)}}\n                                    className={classes.EditButton}\n                                 >\n                                    Edit Booking Info\n                                </Button>\n                            </li>\n\n                            <li hidden={!(editMode.edit && editMode.person._id  === person._id)}>\n                                 <Button\n                                    type=\"button\"\n                                    fullWidth\n                                    variant=\"contained\"\n                                    color=\"primary\"\n                                    disabled = {saving}\n                                    onClick = {() => {handleEditModeChanged(false, person)}}\n                                    className={classes.SaveButton}\n                                 >\n                                    Save Changes\n                                </Button>\n                            </li>\n\n                            <li hidden={!(editMode.edit && editMode.person._id === person._id)}>\n                                 <Button\n                                    type=\"button\"\n                                    fullWidth\n                                    variant=\"contained\"\n                                    color=\"default\"\n                                    disabled = {saving}\n                                    onClick = {() => {handleEditModeChanged(false, null)}}\n                                    className={classes.CancelButton}\n                                 >\n                                    Cancel\n                                </Button>\n                            </li>\n                            \n                            {/* ****************************************************************************************** */}\n\n\n                            {/* Delete Functionality ******************************************* */}\n\n                            <li hidden={!(deleteMode.delete && deleteMode.person._id  === person._id)}>\n                              <div style={{fontWeight: \"600\",  paddingBottom: \"5px\", paddingLeft: \"5px\", fontSize:\"16px\"}}>\n                                Are you sure you want to delete this record?\n                              </div>\n                            </li>\n\n                            <li hidden={person.deleted ||  editMode.edit || (deleteMode.delete && deleteMode.person._id === person._id)}>\n                                 <Button\n                                    type=\"button\"\n                                    fullWidth\n                                    variant=\"contained\"\n                                    color=\"primary\"\n                                    onClick = {() => {handleDeleteModeChanged(true, person)}}\n                                    className={classes.DeleteButton}\n                                 >\n                                   Delete This Record\n                                </Button>\n                            </li>\n\n                            <li hidden={!(deleteMode.delete && deleteMode.person._id  === person._id)}>\n                                 <Button\n                                    type=\"button\"\n                                    fullWidth\n                                    variant=\"contained\"\n                                    color=\"primary\"\n                                    disabled = {deleting}\n                                    onClick = {() => {handleDeleteModeChanged(false, person)}}\n                                    className={classes.SaveButton}\n                                 >\n                                    YES, Delete this!\n                                </Button>\n                            </li>\n\n                            <li hidden={!(deleteMode.delete && deleteMode.person._id === person._id)}>\n                                 <Button\n                                    type=\"button\"\n                                    fullWidth\n                                    variant=\"contained\"\n                                    color=\"default\"\n                                    disabled = {deleting}\n                                    onClick = {() => {handleDeleteModeChanged(false, null)}}\n                                    className={classes.CancelButton}\n                                 >\n                                    Cancel\n                                </Button>\n                            </li>\n                                 \n                            {/* ****************************************************************************************** */}\n\n                            <li className={classes.li}>\n                                <span className={classes.infoTitle}>BOOKED DATE</span> \n                            \n\n                                <span hidden={(editMode.edit && editMode.person._id  === person._id)} className={classes.infoData}>\n                                   {FormatDateFromString(person.bookingDate) }\n                                  </span>  \n                                        <span hidden={!(editMode.edit && editMode.person._id  === person._id)} className={classes.infoData}>\n                                          <TextField \n                                                      fullWidth\n                                                      error={validationError.bookingDateError}\n                                                      className={classes.TextBox} \n                                                      value={bookingDate}\n                                                      onChange = {bookingDateChanged}\n                                                      inputProps= {{\n                                                          style:{\n                                                            padding: 0\n                                                          }\n                                                        }\n                                                      }\n                                                      > \n                                          </TextField> \n                                        </span> \n\n\n                            </li>\n\n                            <li className={classes.li}>\n                                <span className={classes.infoTitle}>BOOKED TIME</span> \n                                <span hidden={(editMode.edit && editMode.person._id  === person._id)} className={classes.infoData}>{person.bookingTime}</span>  \n                                        <span hidden={!(editMode.edit && editMode.person._id  === person._id)} className={classes.infoData}>\n                                          <TextField \n                                                      fullWidth\n                                                      error={validationError.bookingTimeError}\n                                                      className={classes.TextBox} \n                                                      value={bookingTime}\n                                                      onChange = {bookingTimeChanged}\n                                                      inputProps= {{\n                                                          style:{\n                                                            padding: 0\n                                                          }\n                                                        }\n                                                      }\n                                                      > \n                                          </TextField> \n                                        </span> \n\n\n                            </li>\n\n                            <li className={classes.li}>\n                            <span className={classes.infoTitle}>FULLNAME</span> \n                                        <span hidden={(editMode.edit && editMode.person._id  === person._id)} className={classes.infoData}>{person.fullname}</span>  \n                                        <span hidden={!(editMode.edit && editMode.person._id  === person._id)} className={classes.infoData}>\n                                        <TextField \n                                                      fullWidth\n                                                      className={classes.TextBox} \n                                                      value={fullname}\n                                                      onChange = {fullnameChanged}\n                                                      inputProps= {{\n                                                          style:{\n                                                            padding: 0\n                                                          }\n                                                        }\n                                                      }\n                                                      > \n                                          </TextField> \n                                        </span> \n                            </li>\n                            <li className={classes.li}>\n                                <span className={classes.infoTitle}>EMAIL</span> \n                                       <span hidden={(editMode.edit && editMode.person._id  === person._id)} className={classes.infoData}>{person.email}</span>  \n                                        <span hidden={!(editMode.edit && editMode.person._id  === person._id)} className={classes.infoData}>\n                                        <TextField \n                                                      fullWidth\n                                                      className={classes.TextBox} \n                                                      value={email}\n                                                      onChange = {emailChanged}\n                                                      inputProps= {{\n                                                          style:{\n                                                            padding: 0\n                                                          }\n                                                        }\n                                                      }\n                                                      > \n                                          </TextField> \n                                        </span>   \n                            </li>\n                            <li className={classes.li}>\n                                <span className={classes.infoTitle}>TEL</span>\n                                 <span hidden={(editMode.edit && editMode.person._id  === person._id)} className={classes.infoData}>{person.phone}</span>  \n                                        <span hidden={!(editMode.edit && editMode.person._id  === person._id)} className={classes.infoData}>\n                                        <TextField \n                                                      fullWidth\n                                                      className={classes.TextBox} \n                                                      value={tel}\n                                                      onChange = {telChanged}\n                                                      inputProps= {{\n                                                          style:{\n                                                            padding: 0\n                                                          }\n                                                        }\n                                                      }\n                                                      > \n                                          </TextField> \n                                        </span>  \n                            </li>\n                            <li className={classes.li}>\n                                <span className={classes.infoTitle}>SERVICE</span>\n                                 <span hidden={(editMode.edit && editMode.person._id  === person._id)} className={classes.infoData}>{person.service}</span>  \n                                        <span hidden={!(editMode.edit && editMode.person._id  === person._id)} className={classes.infoData}>\n                                        <TextField \n                                                      fullWidth\n                                                      className={classes.TextBox} \n                                                      value={service}\n                                                      onChange = {serviceChanged}\n                                                      inputProps= {{\n                                                          style:{\n                                                            padding: 0\n                                                          }\n                                                        }\n                                                      }\n                                                      > \n                                          </TextField> \n                                        </span>  \n                            </li>\n                            <li className={classes.li}>\n                                <span className={classes.infoTitle}>NOTES</span>\n                                 <span hidden={(editMode.edit && editMode.person._id  === person._id)} className={classes.infoData}>{person.notes}</span>  \n                                        <span hidden={!(editMode.edit && editMode.person._id  === person._id)} className={classes.infoData}>\n                                        <TextField \n                                                      fullWidth\n                                                      className={classes.TextBox} \n                                                      value={notes}\n                                                      onChange = {notesChanged}\n                                                      inputProps= {{\n                                                          style:{\n                                                            padding: 0\n                                                          }\n                                                        }\n                                                      }\n                                                      > \n                                          </TextField> \n                                        </span>  \n                            </li>\n                            <li className={classes.li}>\n                                <span className={classes.infoTitle}>STATUS</span> \n                                {getStatusLabel(person.status)} \n                            </li>\n      \n\n                        </ul>\n\n                    </AccordionDetails>\n                    </Accordion>\n                </div>\n            </Grid> \n          ))}\n    </Grid>\n    </React.Fragment>\n  );\n}\n","import React, { useEffect } from 'react';\nimport Button from '@material-ui/core/Button';\nimport CssBaseline from '@material-ui/core/CssBaseline';\nimport TextField from '@material-ui/core/TextField';\nimport Typography from '@material-ui/core/Typography';\nimport { makeStyles } from '@material-ui/core/styles';\nimport GlobalState from './../GlobalState';\nimport Alert from '@material-ui/lab/Alert';\nimport PropTypes from 'prop-types';\nimport MaskedInput from 'react-text-mask';\nimport { FormControl, Grid, Input, InputLabel } from '@material-ui/core';\nimport BookService from './services/BookService';\nimport PersonsBox from './PersonsBox';\nimport { width } from '@material-ui/system';\n\n\nconst isBoolean = (param) => typeof(param) === \"boolean\"\n\nconst useFocus = (initialFocus = false, id = \"\") => {\n    const [focus, setFocus] = React.useState(initialFocus)\n    const setFocusWithTrueDefault = (param) => setFocus(isBoolean(param)? param : true)\n    return ([\n        setFocusWithTrueDefault, {\n            autoFocus: focus,\n            key: `${id}${focus}`,\n            onFocus: () => setFocus(true),\n            onBlur: () => setFocus(false),\n        },\n    ])\n}\n\n\nfunction TextMaskCustom(props) {\n    const { inputRef, ...other } = props;\n  \n    return (\n      <MaskedInput\n        {...other}\n        ref={(ref) => {\n          inputRef(ref ? ref.inputElement : null);\n        }}\n        mask={[/\\d/, /\\d/, /\\d/, '-', /\\d/, /\\d/, /\\d/, '-', /\\d/, /\\d/, /\\d/]}\n        // placeholderChar={'\\u2000'}\n        showMask\n      />\n    );\n  }\n  \n  TextMaskCustom.propTypes = {\n    inputRef: PropTypes.func.isRequired,\n  };\n\n\n\nconst useStyles = makeStyles((theme) => ({\n\n    root: {\n        width: '100%',\n        '& > * + *': {\n          marginTop: theme.spacing(2),\n        },\n        marginTop: \"20px\"\n      },  \n\n    paper: {\n        marginTop: theme.spacing(8),\n        display: 'flex',\n        flexDirection: 'column',\n        alignItems: 'center',\n    },\n\n    avatar: {\n        margin: theme.spacing(1),\n        backgroundColor: theme.palette.secondary.main,\n    },\n\n    form: {\n        width: '100%', // Fix IE 11 issue.\n        marginTop: theme.spacing(1),\n    },\n\n    Find: {\n        width: \"80px\"\n    },\n\n    Clear:{\n        marginRight: \"20px\"\n    },\n\n    title:{\n        marginTop : \"20px\"\n    },\n\n    TextBox:{\n        marginTop: \"30px\",\n        \"& > *\" :\n        {\n            textAlign: \"center\"\n        },\n  \n    },\n\n    TextField:{\n\n    },\n\n    NoRecordsFound:{\n        marginTop: \"20px\",\n        color: \"red\",\n        fontWeight: \"600\",\n        fontSize: \"14px\",\n    },\n\n    PersonsBox:{\n        marginTop : \"20px\",\n        marginBottom: \"50px\",\n    }\n\n}));\n\nexport default function FindByRef() {\n  const classes = useStyles();\n  const [state, setState] = React.useContext(GlobalState);\n  \n  const [setFocus, focusProps] = useFocus(true);\n\n//   useEffect( () =>\n//   {\n//      findRecords();\n//   }, [state.findRecords]);\n\n useEffect ( () => {\n    setState(state => ({...state, foundRecords : []}));\n }, [])\n\n  useEffect( () => {\n    BookService.getBookingsByRef(state.ref).then( (res)=>\n    {\n        if (res.data.length > 0)\n        {\n            setState(state => ({...state, foundRecords : res.data}));\n        }\n    });\n    }, [state.RefreshPersonInfo]);\n\n    const handleChange = (event) =>\n    {\n        setState(state => ({...state, ref : event.target.value}));\n        setState(state => ({...state, refError : false})); \n    }\n\n    const clearField = () =>\n    {\n        setState(state => ({...state, refError : false})); \n        setState(state => ({...state, ref : '___-___-___'}));\n        setState(state => ({...state, foundRecords : []}));\n        setFocus();\n    }\n\n    const findRecords = () =>\n    {\n        if (!state.ref || state.ref.indexOf('_') >= 0)\n        {\n            setState(state => ({...state, refError : true}));  \n            return;\n        }\n\n        setState(state => ({...state, submiting : true}));\n        setState(state => ({...state, foundRecords : []}));\n\n        BookService.getBookingsByRef(state.ref).then( (res)=>\n        {\n            setState(state => ({...state, submiting : false}));\n            if (res.data.length > 0)\n            {\n                setState(state => ({...state, foundRecords : res.data}));\n            }\n            else\n            {\n                setState(state => ({...state, foundRecords : null}));\n            }\n            \n            console.log(res.data);\n\n        }).catch( (err) =>\n        {\n            console.log(err);\n            setState(state => ({...state, submiting : false}));\n        });\n    }\n\n  return (\n    <React.Fragment>\n        <CssBaseline />\n        <div className={classes.title}>\n            <Typography component=\"h6\" variant=\"h6\" align=\"center\">\n                Find Booking Appoinments\n            </Typography>  \n        </div> \n\n        <Grid container direction=\"column\" spacing={1} justify=\"flex-start\"  alignItems=\"center\">\n\n        <Grid item xs={12} md={12}>\n            <FormControl className={classes.TextBox}>\n                <TextField\n                    {...focusProps}\n                    autoFocus \n                    pattern=\"[0-9]*\"\n                    error = {state.refError ? true : false} \n                    value = {state.ref}\n                    className = {classes.TextField}\n                    width = \"50px\"\n                    onChange={handleChange}\n                    label=\"Reference No.\"\n                    helperText=\"Enter Your 9-digits Reference No.\"\n                    name=\"refNo\"\n                    id=\"refNo\"\n                    variant=\"outlined\"\n                    \n                    size=\"medium\"\n                    margin=\"normal\"\n                    fullWidth = {true}\n                    InputProps={{\n                        inputComponent: TextMaskCustom,\n                        style: { textAlign: 'center', fontSize:\"24px\", width: \"210px\", paddingLeft: \"20px\" }\n                    }}\n\n                    onKeyPress= {event => {\n                        if (event.key === 'Enter') {\n                            findRecords();\n                        }\n                      }}\n                />         \n            </FormControl>\n        </Grid>\n\n        <Grid item xs={12} md={12}>\n               \n                <Button\n                    disabled = {state.submiting}\n                    color=\"default\"\n                    onClick = {clearField}\n                    onTouchTap = {clearField}\n                    className={classes.Clear}\n                >\n                    Clear \n                </Button>  \n            \n                <Button\n                    type=\"button\"\n                    disabled = {state.submiting}\n                    variant=\"contained\"\n                    color=\"primary\"\n                    onClick = {findRecords}\n                    onTouchTap = {findRecords}\n                    className={classes.Find}\n                >\n                    Find \n                </Button>  \n        </Grid>\n\n        <Grid item xs={12} md={12}>\n\n                    \n\n            {state.foundRecords && state.foundRecords.length > 0 && (\n                <React.Fragment>\n\n                    <div className={classes.PersonsBox}>\n                          <PersonsBox/>\n                    </div>\n                    \n\n\n                </React.Fragment>\n            )}   \n\n            {!state.foundRecords && (\n                <React.Fragment>\n\n                <div className={classes.root}>\n                    <Alert severity=\"error\"> <strong>No Records Found !</strong> <br/> Please check you reference number again.</Alert>\n                </div> \n                   \n                </React.Fragment>\n            )}\n\n        </Grid>\n        \n        \n        </Grid>\n        \n    </React.Fragment>\n   \n  );\n}","import React, { useEffect, useState } from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport PropTypes from 'prop-types';\nimport dateformat from 'dateformat';\nimport BookService from '../services/BookService';\n\nimport CircularProgress from '@material-ui/core/CircularProgress';\n\nimport GlobalState from '../../GlobalState';\n\n\nconst useStyles = makeStyles((theme) => ({\n\n    Container: {\n        width: \"100%\",\n        paddingTop: \"70%\",\n        position: \"relative\",\n        backgroundColor: \"#fff\",\n        cursor: \"pointer\"\n    },\n\n    ContainerPast: {\n        width: \"100%\",\n        paddingTop: \"70%\",\n        position: \"relative\",\n        backgroundColor: \"#fafafa\",\n        cursor: \"pointer\"\n    },\n    \n    DayLabel: {\n        position: \"absolute\",\n        top: \"5px\",\n        right: \"5px\",\n        color: \"#555\",\n        fontSize: \"1rem\"\n    },\n\n    DayLabelToday: {\n        position: \"absolute\",\n        top: \"5px\",\n        right: \"5px\",\n        backgroundColor: \"#1a73e8\",\n        color: \"#fff\",\n        fontSize: \"1rem\",\n        borderRadius: \"50%\",\n        padding: \"5px\",\n        lineHight: \"35px\",\n        minWidth: \"35px\"\n    },\n\n    DayLabelDisabled: {\n        position: \"absolute\",\n        top: \"5px\",\n        right: \"5px\",\n        color: \"#ddd\",\n        fontSize: \"1rem\"\n    },\n\n    BookingCountLabel: {\n        position: \"absolute\",\n        top: \"35%\",\n        left: \"40%\",\n        color: \"#3f51b5\",\n        backgroundColor: \"#ebedf7\",\n        fontSize: \"16px\",\n        fontWeight: \"600\",\n        padding: \"10px\",\n        borderRadius: \"50%\",\n        minWidth: \"40px\",\n        lineHight: \"40px\",\n        cursor: \"pointer\",\n        textAlign: \"center\"\n    },\n\n    BookingCountLabelBusy: {\n        position: \"absolute\",\n        top: \"35%\",\n        left: \"40%\",\n        color: \"#b00000\",\n        backgroundColor: \"#fce6e6\",\n        fontSize: \"16px\",\n        fontWeight: \"600\",\n        padding: \"10px\",\n        borderRadius: \"50%\",\n        minWidth: \"40px\",\n        cursor: \"pointer\",\n        textAlign: \"center\"\n    },\n\n    LoadingProgress: {\n        position: \"absolute\",\n        top: \"40%\",\n        left: \"40%\",\n      },\n\n      BookingCountGauge: {\n        position: \"absolute\",\n        bottom: \"5%\",\n        left: \"8%\",\n        width : \"8%\",\n        height: \"85%\"\n    },\n\n  }));\n\nconst MAX_BOOKING_COUNT = 10;  \n\nconst MonthViewCell = ({key, cellIndex, month, daysInMonth, dayClicked}) => {\n    const classes = useStyles();\n\n    const [state, setState] = React.useContext(GlobalState);\n\n    const [dateStr, setDateStr] = React.useState('');\n\n    const [cellDate, setCellDate] = React.useState(new Date());\n\n    const [bookingsCount, setBookingsCount] = React.useState(-1);\n\n    const [disableDay, setDisableDay] = React.useState(false);\n\n    const [isPast, setIsPast] = React.useState(false);\n\n    useEffect( () => {\n\n        if (cellIndex <= daysInMonth.length)\n        {\n            const date = daysInMonth[cellIndex - 1];\n            const dateStr = dateformat(date, 'yyyy-mm-dd');\n            setDateStr(dateStr);\n            setCellDate(date);\n            setDisableDay(date.getMonth() !== month - 1);\n            const todayStr = dateformat(new Date(), 'yyyy-mm-dd');\n            setIsPast(dateStr < todayStr);\n        }\n        else\n        {\n            const day = cellIndex - daysInMonth.length;\n            const date = new Date((daysInMonth[daysInMonth.length - 1].getTime() + ( day * 86400000)));\n            const dateStr = dateformat(date, 'yyyy-mm-dd');\n            setDateStr(dateStr);\n            setCellDate(date);\n            setDisableDay(true);\n            const todayStr = dateformat(new Date(), 'yyyy-mm-dd');\n            setIsPast(dateStr < todayStr);\n        }\n\n    }, [cellIndex, month, daysInMonth]);\n\n    useEffect ( () => {\n\n        const fecthData = async () =>\n        {\n            if (!dateStr || dateStr.length <= 0)\n            {\n                return;\n            }\n        \n            if (disableDay)\n            {\n                setBookingsCount(-2);\n                return;\n            }\n\n            setBookingsCount(-1);\n\n            var res = state.AdminCalendarCache?.find(record => record.method === 'getBookingsCountByDateStr' && record.query === dateStr)?.res;\n\n            if (!res)\n            {\n                res = await BookService.getAllBookingsCountByDateStr(dateStr);\n                setState(state => ({...state, AdminCalendarCache : [...state.AdminCalendarCache, {method: 'getBookingsCountByDateStr' , query : dateStr, res: res}]}));\n            }\n        \n            if (res.data.count >= 0)\n            {\n                setBookingsCount(res.data.count);\n            }\n\n        }\n\n      fecthData();\n\n    }, [dateStr]);\n\n    const getDayLabel = (_cellIndex , _month , _daysInMonth) =>\n    {\n        var date = null;\n        var disabled = false;\n        var day = -1;\n\n    \n\n        if (_cellIndex <= _daysInMonth.length)\n        {\n            date = _daysInMonth[_cellIndex - 1];\n            day = date.getDate();\n            if (date.getMonth() !== _month - 1)\n            {\n                disabled = true;\n            }\n        }\n        else\n        {\n            const _day = _cellIndex - _daysInMonth.length;\n            const date = new Date((_daysInMonth[_daysInMonth.length - 1].getTime() + ( _day * 86400000)));\n            day = date.getDate();\n            disabled = true;\n        }\n\n        const isToday = dateformat(new Date(),'yyyy-mm-dd') === dateformat(date, 'yyyy-mm-dd');\n\n        return (\n            <span className={(disabled) ? classes.DayLabelDisabled : isToday ? classes.DayLabelToday : classes.DayLabel}>\n                 {day > 0 ? `${day}` : ''}\n             </span>\n        );\n    }\n\n    const getBookingsCountLabel = (_bookingsCount) =>\n    {\n        if (_bookingsCount === -1)\n        {\n            return (\n                <div className={classes.LoadingProgress}>\n                      <CircularProgress disableShrink  />\n                </div>\n            );  \n        }\n        else if (_bookingsCount > 0 )\n        {\n            if (_bookingsCount >= MAX_BOOKING_COUNT / 2)\n            {\n                return (\n                    <div onClick={(event => dayClicked(event,cellDate))} className={classes.BookingCountLabelBusy}>\n                        {_bookingsCount < 10 ?  ` ${_bookingsCount}` : `${_bookingsCount}`}\n                    </div>\n                );\n            }\n            else\n            {\n                return (\n                    <div onClick={(event => dayClicked(event,cellDate))} className={classes.BookingCountLabel}>\n                          {_bookingsCount < 10 ?  ` ${_bookingsCount}` : `${_bookingsCount}`}\n                    </div>\n                );\n            }\n        }\n    }\n\n    const getBookingsCountGauge = (_bookingsCount) =>\n    {\n        if (_bookingsCount > 0)\n        {\n            let percent = (_bookingsCount / MAX_BOOKING_COUNT) * 100;\n            if (percent > 100)\n            {\n                percent = 100;\n            }\n\n            percent = 100 - percent;\n\n            return (\n\n                <div className={classes.BookingCountGauge}>\n                  <div style={{padding:\"0\", margin:\"0\", width:\"100%\", height:\"100%\", backgroundColor: \"#3f51b5\"}} >\n                        <div  style={{padding:\"0\", margin:\"0\", width:\"100%\", height:`${percent}%`, backgroundColor: \"#fafafa\"}} >\n\n                        </div>\n                  </div>\n                </div>\n            );\n        }\n    }\n\n    return (\n        <React.Fragment>\n\n            <div className={classes.Container} onClick={(event => dayClicked(event,cellDate))}>\n\n              {getDayLabel(cellIndex, month, daysInMonth)}\n\n              {getBookingsCountLabel(bookingsCount)}\n\n              {getBookingsCountGauge(bookingsCount)}\n\n            </div>\n\n        </React.Fragment>\n\n\n    );\n}\n\nMonthViewCell.propTypes = {\n    key: PropTypes.string.isRequired,\n    cellIndex: PropTypes.number.isRequired,\n    month: PropTypes.number.isRequired,\n    daysInMonth: PropTypes.arrayOf(PropTypes.date),\n    dayClicked: PropTypes.func\n  };\n\n \n  \nexport default MonthViewCell;","import calendar from 'node-calendar';\n\n\nexport default class CalendarUtil {\n\n    static getMonthRange = (month , year) =>\n    {\n        return new calendar.Calendar(calendar.SUNDAY).itermonthdates(year, month);\n    } \n\n} ","import React, { useEffect, useState } from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport PropTypes from 'prop-types';\nimport MonthViewCell from './MonthViewCell';\nimport CalendarUtil from './calendar-util';\n\nconst dayLables = ['Sun', 'Mon', 'Tue', 'Wed' , 'Thu', 'Fri', 'Sat'];\nconst days = [1,2,3,4,5,6,7]; \nconst rows = [1,2,3,4,5,6];\n\nconst useStyles = makeStyles((theme) => ({\n\n    table: {\n        width: \"100%\",\n        border: \"1px solid #ddd\",\n        borderCollapse: \"collapse\",\n    },\n\n    th: {\n        border: \"1px solid #ddd\",\n        borderCollapse: \"collapse\",\n        verticalAlign: \"middle\",\n        fontcolor: \"#555\",\n        fontWeight: \"400\",\n        fontSize: \"15px\",\n        paddingTop: \"5px\",\n        paddingBottom: \"5px\",\n        width: \"14%\"\n    },\n\n    td: {\n        border: \"1px solid #ddd\",\n        borderCollapse: \"collapse\",\n        verticalAlign: \"middle\",\n    }\n\n  }));\n\nconst MonthView = ({month, year, dayClicked}) => {\n    const classes = useStyles();\n\n    const daysInMonth = CalendarUtil.getMonthRange(month,year);\n\n    return (\n        <React.Fragment>\n\n            <table className={classes.table}>\n                <thead>\n                    <tr>\n                        {dayLables.map(label => (\n                            <th key={`th-${label}`} className={classes.th}>\n                                {label}\n                            </th>\n                        ))}\n                    </tr>\n                </thead>\n                <tbody>\n                    {rows.map(row => (\n                        <tr>\n                            {days.map(day => (\n                                <td className={classes.td}>\n                                    <MonthViewCell \n                                        key={`${month}${year}${(row-1) * days.length + day}`} \n                                        cellIndex={(row-1) * days.length + day} \n                                        month={month} \n                                        daysInMonth={daysInMonth}\n                                        dayClicked = {dayClicked}\n                                        />\n                                </td>\n                            ))}\n                        </tr>\n                    ))}            \n                </tbody>\n\n            </table>\n\n      \n        </React.Fragment>\n\n\n    );\n}\n\nMonthView.propTypes = {\n    month: PropTypes.number.isRequired,\n    year: PropTypes.number.isRequired,\n    dayClicked: PropTypes.func\n  };\n\n\nexport default MonthView;","import React, { useEffect, useState } from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport PropTypes from 'prop-types';\nimport dateformat from 'dateformat';\nimport BookService from '../services/BookService';\n\nimport CircularProgress from '@material-ui/core/CircularProgress';\nimport GlobalState from '../../GlobalState';\n\nimport axios from 'axios'\n\nconst useStyles = makeStyles((theme) => ({\n\n    Container: {\n        width: \"100%\",\n        paddingTop: \"40%\",\n        position: \"relative\",\n        backgroundColor: \"#fff\",\n        cursor: \"pointer\"\n    },\n\n    ContainerPast: {\n        width: \"100%\",\n        paddingTop: \"40%\",\n        position: \"relative\",\n        backgroundColor: \"#fafafa\",\n        cursor: \"pointer\"\n    },\n    \n    DayLabel: {\n        position: \"absolute\",\n        top: \"5px\",\n        right: \"5px\",\n        color: \"#555\",\n        fontSize: \"1rem\"\n    },\n\n    DayLabelDisabled: {\n        position: \"absolute\",\n        top: \"5px\",\n        right: \"5px\",\n        color: \"#ddd\",\n        fontSize: \"1rem\"\n    },\n\n    BookingCountLabel: {\n        position: \"absolute\",\n        top: \"25%\",\n        left: \"38%\",\n        color: \"#3f51b5\",\n        backgroundColor: \"#ebedf7\",\n        fontSize: \"14px\",\n        fontWeight: \"600\",\n        padding: \"5px\",\n        borderRadius: \"50%\",\n        minWidth: \"30px\",\n        cursor : \"pointer\",\n        textAlign: \"center\"\n    },\n\n    BookingCountLabelBusy: {\n        position: \"absolute\",\n        top: \"25%\",\n        left: \"38%\",\n        color: \"#b00000\",\n        backgroundColor: \"#fce6e6\",\n        fontSize: \"14px\",\n        fontWeight: \"600\",\n        padding: \"5px\",\n        borderRadius: \"50%\",\n        minWidth: \"30px\",\n        cursor : \"pointer\",\n        textAlign: \"center\"\n    },\n\n    LoadingProgress: {\n        position: \"absolute\",\n        top: \"40%\",\n        left: \"40%\",\n      },\n\n      BookingCountGauge: {\n        position: \"absolute\",\n        bottom: \"5%\",\n        left: \"8%\",\n        width : \"85%\",\n        height: \"8%\"\n    },\n\n  }));\n\nconst MAX_BOOKING_COUNT = 1;  \n\nconst WeekViewCell = ({key, date, time, dayClicked}) => {\n    const classes = useStyles();\n\n    const [state, setState] = React.useContext(GlobalState);\n    const [bookingsCount, setBookingsCount] = React.useState(-1);\n    const [isPast, setIsPast] = React.useState(false);\n\n    const [cellDate, setCellDate] = React.useState(new Date());\n\n    useEffect( () => {\n        const todayStr = dateformat(new Date(), 'yyyy-mm-dd');\n        setIsPast(date < todayStr);\n\n        setCellDate(new Date(date));\n\n    }, [date]);\n\n    useEffect ( () => {\n      \n      \n      \n        if (!date || date.length <= 0 || !time || time.length <= 0)\n        {\n            return;\n        }\n        \n        // if (isPast)\n        // {\n        //     setBookingsCount(-2);\n        //     return;\n        // }\n\n        setBookingsCount(-1);\n\n       \n\n        var res = state.AdminCalendarCache?.find(record => record.method === 'getBookingsCountByDateStrandTime' && record.query === `${date}${time}`)?.res;\n        if (res)\n        {\n            if (res.data.count >= 0)\n            {\n                setBookingsCount(res.data.count);\n            }  \n            return;\n        }\n\n        let source = axios.CancelToken.source();\n        BookService.getAllBookingsCountByDateStrandTime(date, time, source).then( res => {\n            if (res.data.count >= 0)\n            {\n                setBookingsCount(res.data.count);\n                setState(state => ({...state, AdminCalendarCache : [...state.AdminCalendarCache, {method: 'getBookingsCountByDateStrandTime' , query : `${date}${time}`, res: res}]}));\n            }  \n        }).catch( err => \n            {\n                //do nothing\n            });\n     \n        return () => {\n           if (source)\n              source.cancel('Cancelling in cleanup');\n        }\n     \n    }, [date, time]);\n\n\n    const getBookingsCountLabel = (_bookingsCount) =>\n    {\n        if (_bookingsCount === -1)\n        {\n            return (\n                <div className={classes.LoadingProgress}>\n                      <CircularProgress disableShrink  />\n                </div>\n            );  \n        }\n        else if (_bookingsCount > 0)\n        {\n            if (_bookingsCount >= MAX_BOOKING_COUNT)\n            {\n                return (\n                    <div onClick={(event => dayClicked(event,cellDate))} className={classes.BookingCountLabelBusy}>\n                          {_bookingsCount < 10 ? ` ${_bookingsCount}` : `${_bookingsCount}` }\n                    </div>\n                );\n            }\n            else\n            {\n                return (\n                    <div onClick={(event => dayClicked(event,cellDate))} className={classes.BookingCountLabel}>\n                        {_bookingsCount < 10 ? ` ${_bookingsCount}` : `${_bookingsCount}` }\n                    </div>\n                );\n            }\n        }\n    }\n\n    const getBookingsCountGauge = (_bookingsCount) =>\n    {\n        if (_bookingsCount > 0 )\n        {\n            let percent = (_bookingsCount / MAX_BOOKING_COUNT) * 100;\n            if (percent > 100)\n            {\n                percent = 100;\n            }\n\n            // percent = 100 - percent;\n\n            return (\n\n                <div className={classes.BookingCountGauge}>\n                  <div style={{padding:\"0\", margin:\"0\", width:\"100%\", height:\"100%\", backgroundColor: \"#f5f5f5\"}} >\n                        <div  style={{padding:\"0\", margin:\"0\", height:\"100%\", width:`${percent}%`, backgroundColor: \"#3f51b5\"}} >\n\n                        </div>\n                  </div>\n                </div>\n            );\n        }\n    }\n\n    return (\n        <React.Fragment>\n\n            <div className={isPast ? classes.ContainerPast : classes.Container}  onClick={(event => dayClicked(event,cellDate))} >\n\n              {getBookingsCountLabel(bookingsCount)}\n\n              {getBookingsCountGauge(bookingsCount)}\n\n            </div>\n\n        </React.Fragment>\n\n\n    );\n}\n\nWeekViewCell.propTypes = {\n    key: PropTypes.string.isRequired,\n    date: PropTypes.string.isRequired,\n    time: PropTypes.string.isRequired,\n    dayClicked: PropTypes.func\n  };\n\n \n  \nexport default WeekViewCell;","import React, { useEffect, useState } from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport PropTypes from 'prop-types';\nimport WeekViewCell from './WeekViewCell';\nimport dateformat from 'dateformat';\n\nconst rows = [\n    '09:00 AM',\n    '09:15 AM', \n    '09:30 AM', \n    '09:45 AM',\n    '10:00 AM',\n    '10:15 AM',\n    '10:30 AM',\n    '10:45 AM',\n    '11:00 AM',\n    '11:15 AM',\n    '11:30 AM',\n    '11:45 AM',\n    '12:00 PM',\n    '12:15 PM',\n    '12:30 PM',\n    '12:45 PM',\n    '01:00 PM',\n    '01:15 PM',\n    '01:30 PM',\n    '01:45 PM',\n    '02:00 PM',\n    '02:15 PM',\n    '02:30 PM',\n    '02:45 PM',\n    '03:00 PM',\n    '03:15 PM',\n    '03:30 PM',\n    '03:45 PM',\n    '04:00 PM',\n    '04:15 PM',\n    '04:30 PM',\n    '04:45 PM',\n    '05:00 PM',\n    '05:15 PM',\n    '05:30 PM',\n    '05:45 PM',\n];\n\n\n\nconst useStyles = makeStyles((theme) => ({\n\n    table: {\n        width: \"100%\",\n        border: \"1px solid #ddd\",\n        borderCollapse: \"collapse\",\n        overflowY: \"auto\"\n    },\n\n    th: {\n        border: \"1px solid #ddd\",\n        borderCollapse: \"collapse\",\n        verticalAlign: \"middle\",\n        fontcolor: \"#555\",\n        fontWeight: \"400\",\n        fontSize: \"15px\",\n        paddingTop: \"5px\",\n        paddingBottom: \"5px\",\n        width: \"12%\", \n    },\n\n    td: {\n        border: \"1px solid #ddd\",\n        borderCollapse: \"collapse\",\n        verticalAlign: \"middle\",\n        height : \"50px\",\n        width: \"12%\", \n    }\n\n  }));\n\nconst WeekView = ({dates, dayClicked}) => {\n    const classes = useStyles();\n\n    return (\n        <React.Fragment>\n\n        <div style={{overflowY: \"scroll\" , height: \"60px\"}}>\n            <table className={classes.table}>\n                <thead>\n                    <tr>\n                        <th style={{width: \"7%\"}}>\n                        \n                        </th>\n                            {dates.map(date => (\n                                <th className={classes.th}>\n                                    <div style={{paddingBottom: \"5px\", color: \"#aaa\"}}>\n                                         {dateformat(date, 'ddd')}\n                                    </div>\n                                    <div>\n                                        <span style={{color: \"#aaa\"}}>\n                                            {dateformat(date, 'mmm ')}\n                                        </span> \n                                        <span  style={(dateformat(new Date(),'yyyy-mm-dd') === dateformat(date, 'yyyy-mm-dd')) ? { backgroundColor: \"#1a73e8\", color: \"#fff\", borderRadius: \"50%\",  padding: \"5px\",} : {color: \"#333\", fontWeight:\"500\"}}>\n                                             {dateformat(date, ' d')}\n                                        </span>\n                                       \n                                    </div>\n                                </th>\n                        ))}\n                    </tr>\n                </thead>\n             </table>\n\n        </div>\n\n            <div style={{overflowY: \"scroll\" , height: \"70vh\"}}>\n                <table className={classes.table}>   \n                    <tbody>\n                        {rows.map(row => (\n                            <tr>\n                                <td style={{width: \"7%\"}}>\n                                    {row}\n                                </td>\n                                {dates.map(day => (\n                                    <td className={classes.td}>\n                                        <WeekViewCell \n                                                dayClicked = {dayClicked}\n                                                key={`${dateformat(day,'yyyy-mm-dd')}-${row.replace(':','-')}`} \n                                                date={dateformat(day,'yyyy-mm-dd')} \n                                                time={row}/>\n                                    </td>\n                                ))}\n                            </tr>\n                        ))}            \n                    </tbody>\n                </table>\n            </div>                    \n      \n        </React.Fragment>\n\n\n    );\n}\n\nWeekView.propTypes = {\n    dates: PropTypes.arrayOf(PropTypes.any).isRequired,\n    dayClicked: PropTypes.func\n  };\n\n\nexport default WeekView;","import React, { useEffect, useRef, useState } from \"react\";\nimport BookService from \"./services/BookService\";\nimport Typography from \"@material-ui/core/Typography\";\nimport {\n  Backdrop,\n  Button,\n  Checkbox,\n  CircularProgress,\n  Divider,\n  FormControlLabel,\n  Grid,\n  InputAdornment,\n  InputLabel,\n  Link,\n  makeStyles,\n  MenuItem,\n  Select,\n  Switch,\n  TextField,\n  Tooltip,\n} from \"@material-ui/core\";\nimport GlobalState from \"../GlobalState\";\nimport { withStyles } from \"@material-ui/core/styles\";\n\nimport CreditCardIcon from \"@material-ui/icons/CreditCard\";\n\nimport Dialog from \"@material-ui/core/Dialog\";\nimport DialogContent from \"@material-ui/core/DialogContent\";\n\nimport DialogTitle from \"@material-ui/core/DialogTitle\";\nimport Draggable from \"react-draggable\";\nimport Paper from \"@material-ui/core/Paper\";\n\nimport Alert from \"@material-ui/lab/Alert\";\n\nimport PropTypes from \"prop-types\";\nimport LinearProgress from \"@material-ui/core/LinearProgress\";\nimport Box from \"@material-ui/core/Box\";\n\nimport Radio from \"@material-ui/core/Radio\";\nimport RadioGroup from \"@material-ui/core/RadioGroup\";\nimport FormControl from \"@material-ui/core/FormControl\";\nimport FormLabel from \"@material-ui/core/FormLabel\";\nimport { corporates } from \"./Corporates\";\nimport NumberFormat from \"react-number-format\";\n\nimport AddIcon from \"@material-ui/icons/Add\";\nimport { validate } from \"email-validator\";\nimport DateRangeIcon from \"@material-ui/icons/DateRange\";\nimport { CalendarColors } from \"../Admin/calendar-admin/colors\";\n\nvar interval;\n\nconst useStyles = makeStyles((theme) => ({\n  title: {\n    marginTop: theme.spacing(0),\n    marginBottom: theme.spacing(1),\n  },\n\n  refreshButton: {\n    marginLeft: theme.spacing(2),\n  },\n\n  checkIcon: {\n    color: \"green\",\n  },\n\n  closeIcon: {\n    color: \"red\",\n  },\n\n  RefLink: {\n    cursor: \"pointer\",\n  },\n\n  BookedLabel: {\n    backgroundColor: \"#606060\",\n    color: \"#fff\",\n    paddingRight: \"10px\",\n    paddingLeft: \"10px\",\n  },\n\n  PatientAttendedLabel: {\n    backgroundColor: \"#0066aa\",\n    color: \"#fff\",\n    paddingRight: \"15px\",\n    paddingLeft: \"10px\",\n  },\n\n  SampleTakenLabel: {\n    backgroundColor: \"#0066cc\",\n    color: \"#fff\",\n    paddingRight: \"40px\",\n    paddingLeft: \"10px\",\n  },\n\n  ReportSentLabel: {\n    backgroundColor: \"#009900\",\n    color: \"#fff\",\n    paddingRight: \"90px\",\n    paddingLeft: \"10px\",\n  },\n\n  ReportCertSentLabel: {\n    backgroundColor: \"#009900\",\n    color: \"#fff\",\n    paddingRight: \"68px\",\n    paddingLeft: \"10px\",\n  },\n\n  archiveButton: {},\n\n  smartMatchButton: {\n    backgroundColor: \"#2f942e\",\n    \"&:hover\": {\n      background: \"green\",\n      color: \"#fff\",\n    },\n    textDecoration: \"none !important\",\n    marginRight: \"10px\",\n    // padding: \"10px\"\n  },\n\n  infoTitle: {\n    fontWeight: \"400\",\n  },\n\n  infoData: {\n    paddingLeft: \"10px\",\n    fontWeight: \"800\",\n  },\n\n  matchButton: {\n    marginTop: \"30px\",\n    marginBottom: \"20px\",\n    backgroundColor: \"#2f942e\",\n    \"&:hover\": {\n      background: \"green\",\n      color: \"#fff\",\n    },\n    textDecoration: \"none !important\",\n    padding: \"10px\",\n    paddingLeft: \"50px\",\n    paddingRight: \"50px\",\n  },\n\n  resendButton: {\n    marginTop: \"5px\",\n    marginBottom: \"5px\",\n    backgroundColor: \"#2f942e\",\n    \"&:hover\": {\n      background: \"green\",\n      color: \"#fff\",\n    },\n    textDecoration: \"none !important\",\n    padding: \"10px\",\n    paddingLeft: \"50px\",\n    paddingRight: \"50px\",\n  },\n\n  resendFilesButton: {\n    marginTop: \"5px\",\n    marginBottom: \"5px\",\n    backgroundColor: \"#3792ad\",\n    \"&:hover\": {\n      background: \"#2f798f\",\n      color: \"#fff\",\n    },\n    textDecoration: \"none !important\",\n    padding: \"10px\",\n    paddingLeft: \"50px\",\n    paddingRight: \"50px\",\n  },\n\n  cancelButton: {\n    marginBottom: \"10px\",\n    textDecoration: \"none !important\",\n    padding: \"10px\",\n    paddingLeft: \"90px\",\n    paddingRight: \"90px\",\n  },\n\n  CalendarIcon: {\n    color: theme.palette.primary.main,\n  },\n\n  DateTimeLabel: {\n    fontWeight: \"500\",\n    color: theme.palette.primary.main,\n  },\n\n  backdrop: {\n    zIndex: theme.zIndex.drawer + 5,\n    color: \"#fff\",\n  },\n\n  PriceLabelPaid: {\n    color: theme.palette.primary.main,\n    fontWeight: \"600\",\n  },\n\n  PriceLabelNotPaid: {\n    color: theme.palette.secondary.main,\n    fontWeight: \"600\",\n  },\n}));\n\nconst Packages = [\n  { packageName: \"Sexual Health Clinic - Bronze\" },\n  { packageName: `Sexual Health Clinic - Silver` },\n  { packageName: `Sexual Health Clinic - Gold` },\n  { packageName: `Sexual Health Clinic - Platinium` },\n  { packageName: `BLOOD SAMPLE AND URINE` },\n  { packageName: `BLOOD SAMPLE AND URINE OR SWAB` },\n  { packageName: `Indivisual Tests` },\n  { packageName: `Combo STD Checks` },\n];\n\nconst IndivisualTests = [\n  \"HIV TESTING\",\n  \"CHLAMYDIA TESTING\",\n  \"SYPHILIS BLOOD TESTING\",\n  \"HERPES TESTING\",\n  \"GONORRHOEA TESTING\",\n  \"HEPATITIS A PROFILE TESTING\",\n  \"HEPATITIS B PROFILE TESTING\",\n  \"HEPATITIS C ANTIBODIES TESTING\",\n  \"HPV TESTING\",\n  \"BACTERIAL SWAB TESTING\",\n];\n\nconst comboSTDChecks = [\n  \"CHLAMYDIA, GONORRHOEA AND TRICHOMONAS\",\n  \"HIV I & II WITH SYPHILIS\",\n];\n\nfunction NumberFormatCustom(props) {\n  const { inputRef, onChange, ...other } = props;\n\n  return (\n    <NumberFormat\n      {...other}\n      getInputRef={inputRef}\n      onValueChange={(values) => {\n        onChange({\n          target: {\n            name: props.name,\n            value: values.value,\n          },\n        });\n      }}\n      thousandSeparator\n      isNumericString\n      prefix=\"\"\n    />\n  );\n}\n\nNumberFormatCustom.propTypes = {\n  inputRef: PropTypes.func.isRequired,\n  name: PropTypes.string.isRequired,\n  onChange: PropTypes.func.isRequired,\n};\n\nconst BorderLinearProgress = withStyles((theme) => ({\n  root: {\n    height: 10,\n    borderRadius: 5,\n  },\n  colorPrimary: {\n    backgroundColor: \"#cedbce\", //theme.palette.grey[theme.palette.type === 'light' ? 200 : 700],\n  },\n  bar: {\n    borderRadius: 5,\n    backgroundColor: \"#2f942e\",\n  },\n}))(LinearProgress);\nfunction LinearProgressWithLabel(props) {\n  return (\n    <Box display=\"flex\" alignItems=\"center\">\n      <Box width=\"100%\" mr={1}>\n        <BorderLinearProgress variant=\"determinate\" {...props} />\n      </Box>\n      <Box minWidth={35}>\n        <Typography\n          style={{ fontWeight: \"800\", color: \"#5e855e\" }}\n          variant=\"body2\"\n          color=\"textSecondary\"\n        >{`${Math.round(props.value)}%`}</Typography>\n      </Box>\n    </Box>\n  );\n}\n\nLinearProgressWithLabel.propTypes = {\n  /**\n   * The value of the progress indicator for the determinate and buffer variants.\n   * Value between 0 and 100.\n   */\n  value: PropTypes.number.isRequired,\n};\n\nfunction PaperComponent(props) {\n  return (\n    <Draggable\n      handle=\"#draggable-dialog-title\"\n      cancel={'[class*=\"MuiDialogContent-root\"]'}\n    >\n      <Paper {...props} />\n    </Draggable>\n  );\n}\n\nexport default function NewBookingDialog(props) {\n  const classes = useStyles();\n\n  const [state, setState] = React.useContext(GlobalState);\n  const [saving, setSaving] = useState(false);\n\n  const [fullname, setFullname] = React.useState(\"\");\n  const [fullnameError, setFullnameError] = React.useState(false);\n\n  const [phone, setPhone] = React.useState(\"\");\n  const [email, setEmail] = React.useState(\"\");\n  const [service, setService] = React.useState(\"\");\n  const [serviceError, setServiceError] = React.useState(false);\n\n  const [notes, setNotes] = React.useState(\"\");\n\n  const [indivisualArray, setIndivisualArray] = React.useState([]);\n  const [comboArray, setComboArray] = React.useState([]);\n\n  const fullnameChanged = (event) => {\n    setFullname(event.target.value);\n    setFullnameError(false);\n  };\n\n  const phoneChanged = (event) => {\n    setPhone(event.target.value);\n  };\n\n  const emailChanged = (event) => {\n    setEmail(event.target.value);\n  };\n\n  const serviceChanged = (event) => {\n    setService(event.target.value);\n    setServiceError(false)\n  };\n\n  const notesChanged = (event) => {\n    setNotes(event.target.value);\n  };\n\n  const handleClose = () => {\n    if (saving) return;\n\n    setFullname(\"\");\n    setFullnameError(false);\n    setPhone(\"\");\n    setEmail(\"\");\n    setService(\"\");\n    setServiceError(false)\n    setNotes(\"\");\n    setIndivisualArray([]);\n    setComboArray([]);\n\n    props.handleClose();\n    setSaving(false);\n  };\n\n  const validateBooking = () => {\n    let error = false;\n    if (!fullname || fullname.trim().length < 1) {\n      setFullnameError(true);\n      error = true;\n    }\n\n    if (!service || service.trim().length < 1)\n    {\n      setServiceError(true)\n      error = true\n    }\n\n    if (service === 'Indivisual Tests' && indivisualArray.length === 0)\n    {\n      setServiceError(true)\n      error = true\n    }\n\n    if (service === 'Combo STD Checks' && comboArray.length === 0)\n    {\n      setServiceError(true)\n      error = true\n    }\n\n    return !error;\n  };\n\n  const saveClicked = async () => {\n    if (!validateBooking()) {\n      return;\n    }\n\n    setSaving(true);\n\n    let packageName = service;\n    if (service === \"Indivisual Tests\") {\n      let temp = \"\";\n      indivisualArray.forEach((item, index) => {\n        temp += item;\n        if (index < indivisualArray.length - 1) {\n          temp += \" - \";\n        }\n      });\n      packageName = `Indivisual Tests : ( ${temp} )`;\n    } else if (service === \"Combo STD Checks\") {\n      let temp = \"\";\n      comboArray.forEach((item, index) => {\n        temp += item;\n        if (index < comboArray.length - 1) {\n          temp += \" - \";\n        }\n      });\n      packageName = `Combo STD Checks : ( ${temp} )`;\n    }\n\n    try {\n      await BookService.addNewBooking({\n        bookingDate: props.date,\n        bookingTime: props.time,\n        fullname: fullname,\n        phone: phone,\n        email: email,\n        packageName: packageName,\n        notes: notes,\n      });\n      setSaving(false);\n      setState((state) => ({\n        ...state,\n        bookingDialogDataChanged: !state.bookingDialogDataChanged\n          ? true\n          : false,\n      }));\n      handleClose();\n    } catch (err) {\n      console.error(err);\n      setSaving(false);\n    }\n  };\n\n  const IndivisualTestsChanged = (event, item) => {\n    const checked = event.target.checked;\n\n    if (checked) {\n      setServiceError(false)\n      if (indivisualArray.findIndex((e) => e === item) < 0)\n        setIndivisualArray([...indivisualArray, item]);\n    } else {\n      setIndivisualArray(indivisualArray.filter((e) => e !== item));\n    }\n\n    setServiceError(false)\n  };\n\n  const comboSTDChecksChanged = (event, item) => {\n    const checked = event.target.checked;\n\n    if (checked) {\n      setServiceError(false)\n      if (comboArray.findIndex((e) => e === item) < 0)\n        setComboArray([...comboArray, item]);\n    } else {\n      setComboArray(comboArray.filter((e) => e !== item));\n    }\n  };\n\n  return (\n    <React.Fragment>\n      {props.date && props.time && (\n        <React.Fragment>\n          <Dialog\n            maxWidth=\"md\"\n            open={props.open}\n            onClose={handleClose}\n            PaperComponent={PaperComponent}\n            aria-labelledby=\"form-dialog-title\"\n          >\n            <DialogTitle id=\"draggable-dialog-title\">\n              <Grid\n                container\n                spacing={2}\n                direction=\"row\"\n                justify=\"center\"\n                alignItems=\"center\"\n              >\n                <Grid item>\n                  <AddIcon style={{ color: \"#f50057\", fontSize: \"3rem\" }} />\n                </Grid>\n\n                <Grid item>\n                  <div\n                    style={{\n                      color: \"#f50057\",\n                      paddingBottom: \"10px\",\n                      fontWeight: \"800\",\n                    }}\n                  >\n                    {\" \"}\n                    ADD New Booking{\" \"}\n                  </div>\n                </Grid>\n              </Grid>\n\n              <div style={{position:\"absolute\", top: \"5px\", right: \"5px\", backgroundColor:CalendarColors.STD_COLOR, color:\"#fff\", padding: \"0px 5px\", borderRadius:\"10px\", fontSize:\"1rem\"}}>\n                    STD\n              </div>\n\n\n              <Divider />\n            </DialogTitle>\n            <DialogContent>\n              <div\n                style={{\n                  height: \"600px\",\n                }}\n              >\n                <Grid\n                  container\n                  direction=\"row\"\n                  justify=\"stretch\"\n                  spacing={2}\n                  alignItems=\"center\"\n                >\n                  <Grid item xs={12}>\n                    <Grid\n                      container\n                      direction=\"row\"\n                      justify=\"center\"\n                      alignItems=\"center\"\n                      spacing={1}\n                    >\n                      <Grid item>\n                        <DateRangeIcon className={classes.CalendarIcon} />\n                      </Grid>\n                      <Grid item>\n                        <span className={classes.DateTimeLabel}>\n                          {props.date} , {props.time}\n                        </span>\n                      </Grid>\n                    </Grid>\n                  </Grid>\n\n                  <Grid item xs={12}>\n                    <TextField\n                      fullWidth\n                      autoFocus\n                      error={fullnameError}\n                      label=\"Full Name\"\n                      value={fullname}\n                      required\n                      onChange={fullnameChanged}\n                      name=\"fullname\"\n                      id=\"fullname-id\"\n                      autoComplete=\"none\"\n                    />\n                  </Grid>\n\n                  <Grid item xs={12}>\n                    <TextField\n                      fullWidth\n                      label=\"Telephone\"\n                      value={phone}\n                      onChange={phoneChanged}\n                      name=\"phone\"\n                      id=\"phone-id\"\n                      autoComplete=\"none\"\n                    />\n                  </Grid>\n\n                  <Grid item xs={12}>\n                    <TextField\n                      fullWidth\n                      label=\"Email\"\n                      value={email}\n                      onChange={emailChanged}\n                      name=\"email\"\n                      id=\"email-id\"\n                      autoComplete=\"none\"\n                    />\n                  </Grid>\n\n                  <Grid item xs={12} md={12}>\n                    <FormControl className={classes.formControl} fullWidth required error={serviceError}>\n                      <InputLabel id=\"service-label-id\">Package</InputLabel>\n                      <Select\n                        fullWidth\n                        labelId=\"service-label-id\"\n                        id=\"service-id\"\n                        value={service}\n                        onChange={serviceChanged}\n                      >\n                        {Packages.map((item) => (\n                          <MenuItem value={item.packageName}>\n                            {item.packageName}\n                          </MenuItem>\n                        ))}\n                      </Select>\n                    </FormControl>\n                  </Grid>\n\n                  {service === \"Indivisual Tests\" && (\n                    <Grid item xs={12}>\n                      {IndivisualTests.map((item) => (\n                        <FormControlLabel\n                          control={\n                            <Checkbox\n                              checked={\n                                indivisualArray.findIndex((e) => e === item) >=\n                                0\n                              }\n                              onChange={(event) =>\n                                IndivisualTestsChanged(event, item)\n                              }\n                              name={item}\n                            />\n                          }\n                          label={item}\n                        />\n                      ))}\n                    </Grid>\n                  )}\n\n                  {service === \"Combo STD Checks\" && (\n                    <Grid item xs={12}>\n                      {comboSTDChecks.map((item) => (\n                        <FormControlLabel\n                          control={\n                            <Checkbox\n                              checked={\n                                comboArray.findIndex((e) => e === item) >= 0\n                              }\n                              onChange={(event) =>\n                                comboSTDChecksChanged(event, item)\n                              }\n                              name={item}\n                            />\n                          }\n                          label={item}\n                        />\n                      ))}\n                    </Grid>\n                  )}\n\n                  <Grid item xs={12}>\n                    <TextField\n                      fullWidth\n                      label=\"Notes\"\n                      value={notes}\n                      onChange={notesChanged}\n                      name=\"notes\"\n                      id=\"notes-id\"\n                      autoComplete=\"none\"\n                    />\n                  </Grid>\n                </Grid>\n\n                <div\n                  style={{\n                    position: \"absolute\",\n                    bottom: \"20px\",\n                    right: \"20px\",\n                  }}\n                >\n                  <Grid\n                    container\n                    direction=\"row\"\n                    justify=\"flex-end\"\n                    alignItems=\"center\"\n                    spacing={1}\n                  >\n                    <Grid item>\n                      <Button\n                        onClick={handleClose}\n                        style={{ width: \"100px\" }}\n                        disabled={saving}\n                      >\n                        back\n                      </Button>\n                    </Grid>\n                    <Grid item>\n                      <Button\n                        onClick={saveClicked}\n                        variant=\"contained\"\n                        color=\"secondary\"\n                        style={{ width: \"100px\" }}\n                        disabled={saving}\n                      >\n                        Save\n                      </Button>\n                    </Grid>\n                  </Grid>\n                </div>\n              </div>\n\n              <Backdrop className={classes.backdrop} open={saving}>\n                <CircularProgress color=\"inherit\" />\n              </Backdrop>\n            </DialogContent>\n          </Dialog>\n        </React.Fragment>\n      )}\n    </React.Fragment>\n  );\n}\n","import React, { useEffect, useState } from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport PropTypes from 'prop-types';\nimport dateformat from 'dateformat';\nimport BookService from '../services/BookService';\n\nimport CircularProgress from '@material-ui/core/CircularProgress';\nimport GlobalState from '../../GlobalState';\nimport BookingDialog from '../BookingDialog';\nimport NewBookingDialog from '../NewBookingDialog';\n\nconst useStyles = makeStyles((theme) => ({\n\n    Container: {\n        width: \"100%\",\n        height : \"50px\",\n        position: \"relative\",\n        backgroundColor: \"#fff\",\n        display: \"flex\",\n        alignItems : \"flex-start\",\n        justifyItems: \"flex-start\",\n        paddingLeft : \"10px\"\n\n    },\n\n    ContainerPast: {\n        width: \"100%\",\n        paddingTop: \"50px\",\n        position: \"relative\",\n        backgroundColor: \"#fafafa\"\n    },\n    \n    DayLabel: {\n        position: \"absolute\",\n        top: \"5px\",\n        right: \"5px\",\n        color: \"#555\",\n        fontSize: \"1rem\"\n    },\n\n    DayLabelDisabled: {\n        position: \"absolute\",\n        top: \"5px\",\n        right: \"5px\",\n        color: \"#ddd\",\n        fontSize: \"1rem\"\n    },\n\n    LoadingProgress: {\n        position: \"absolute\",\n        top: \"10%\",\n        left: \"40%\",\n      },\n\n      BookingCountGauge: {\n        position: \"absolute\",\n        bottom: \"5%\",\n        left: \"8%\",\n        width : \"85%\",\n        height: \"8%\"\n    },\n\n    bookingBoxNew: {\n        display: \"flex\",\n        marginRight: \"10px\",\n        marginTop: \"5px\",\n        padding: \"10px\",\n        maxWidth: \"150px\",\n        overflowX: \"hidden\",\n        border: \"1px solid #ddd\",\n        color: \"#ccc\",\n        fontSize: \"12px\",\n        fontWeight: \"500\",\n        cursor: \"pointer\",\n        backgroundColor: \"#fff\",\n    \n        boxShadow: \"2px 4px #fafafa\",\n        transition: \"all 0.5s ease\",\n        borderRadius: \"4px\",\n    \n        \"&:hover\": {\n          background: \"#fff\",\n          color: theme.palette.secondary.main,\n          borderColor:  theme.palette.secondary.main,\n        },\n      },\n\n    bookingBox: {\n        display: \"flex\",\n        marginRight: \"10px\",\n        marginTop: \"5px\",\n        padding: \"10px\",\n        maxWidth : \"150px\",\n        overflowX: \"hidden\",\n        border : \"1px solid #eee\",\n        fontSize: \"12px\",\n        fontWeight : \"500\",\n        cursor: \"pointer\",\n        backgroundColor: \"#ebedf7\",\n        color: \"#3f51b5\",\n        boxShadow: \"2px 4px #fafafa\",\n\n        \"&:hover\": {\n            background: \"#3f51b5\",\n            color: \"#ebedf7\"\n          },\n    },\n\n    bookingBoxSampleTaken: {\n        display: \"flex\",\n        marginRight: \"10px\",\n        marginTop: \"5px\",\n        padding: \"10px\",\n        maxWidth : \"150px\",\n        overflowX: \"hidden\",\n        border : \"1px solid #eee\",\n        fontSize: \"12px\",\n        fontWeight : \"500\",\n        cursor: \"pointer\",\n        backgroundColor: \"#0066cc\",\n        color: \"#eee\",\n        boxShadow: \"2px 4px #fafafa\",\n\n        \"&:hover\": {\n            background: \"#0059b3\",\n            color: \"#fafafa\"\n          },\n    },\n\n    bookingBoxPositive: {\n        display: \"flex\",\n        marginRight: \"10px\",\n        marginTop: \"5px\",\n        padding: \"10px\",\n        maxWidth : \"150px\",\n        overflowX: \"hidden\",\n        border : \"1px solid #eee\",\n        fontSize: \"12px\",\n        fontWeight : \"500\",\n        cursor: \"pointer\",\n        backgroundColor: \"#d40b0b\",\n        color: \"#fff2f2\",\n        boxShadow: \"2px 4px #fafafa\",\n\n        \"&:hover\": {\n            background: \"#bf0000\",\n            color: \"#fff\"\n          },\n    },\n\n    bookingBoxReportSent: {\n        display: \"flex\",\n        marginRight: \"10px\",\n        marginTop: \"5px\",\n        padding: \"10px\",\n        maxWidth : \"150px\",\n        overflowX: \"hidden\",\n        border : \"1px solid #eee\",\n        fontSize: \"12px\",\n        fontWeight : \"500\",\n        cursor: \"pointer\",\n        backgroundColor: \"#009900\",\n        color: \"#eee\",\n        boxShadow: \"2px 4px #fafafa\",\n\n        \"&:hover\": {\n            background: \"#006e00\",\n            color: \"#fafafa\"\n          },\n    },\n\n  \n\n  }));\n\n\n\nconst DayViewCell = ({key, date, time}) => {\n    const classes = useStyles();\n\n    const [state, setState] = React.useContext(GlobalState);\n    const [bookings, setBookings] = React.useState(null);\n    const [filteredBookings, setFilteredBookings] = React.useState(null);\n    const [selectedBooking, setSelectedBooking] = React.useState(null);\n\n    const [refresh, setRefresh] = React.useState(true); \n\n    const [isPast, setIsPast] = React.useState(false);\n\n    const [openDialog, setOpenDialog] = React.useState(false);\n\n    const [openDialogAddNew, setOpenDialogAddNew] = React.useState(false);\n\n\n\n    useEffect( () => {\n        const todayStr = dateformat(new Date(), 'yyyy-mm-dd');\n        setIsPast(date < todayStr);\n\n    }, [date]);\n\n    useEffect( () => \n    {\n        if (bookings) {\n\n\n            if (state.dayViewCalFilter && state.dayViewCalFilter.trim().length > 0)\n            {\n                const search = state.dayViewCalFilter.trim().toUpperCase();\n                setFilteredBookings( bookings.filter(booking => booking.fullname.toLowerCase().indexOf(search.toLowerCase()) >= 0\n                                                          \n                    \n                    ));\n            }\n            else\n            {\n                setFilteredBookings([...bookings]);\n            }\n        }\n\n    }, [state.dayViewCalFilter, bookings]);\n \n\n\n    useEffect ( () => {\n       \n        const fetchData = async () =>\n        {\n            if (!date || date.length <= 0 || !time || time.length <= 0)\n            {\n                return;\n            }\n         \n            // if (isPast)\n            // {\n            //     setBookings([]);\n            //     return;\n            // }\n    \n            setBookings(null);\n    \n            var res = state.AdminCalendarCache?.find(record => record.method === 'getBookingsByDateStrandTime' && record.query === `${date}${time}`)?.res;\n            if (!res || openDialog || openDialogAddNew)\n            {\n                res = await BookService.getAllBookingsByDateStrandTime(date, time);\n                setState(state => ({...state, AdminCalendarCache : [...state.AdminCalendarCache, {method: 'getBookingsByDateStrandTime' , query : `${date}${time}`, res: res}]}));\n            }\n          \n          \n            if (res.data.status === 'OK')\n            {\n                setBookings(res.data.bookings);\n            }   \n        }\n\n        if (openDialog || openDialogAddNew)\n        {\n            setState(state => ({...state, AdminCalendarCache : state.AdminCalendarCache.filter(record => !(record.method === 'getBookingsByDateStrandTime' && record.query ===  `${date}${time}`))}));\n            setState(state => ({...state, AdminCalendarCache : state.AdminCalendarCache.filter(record => !(record.method === 'getBookingsCountByDateStrandTime' && record.query ===  `${date}${time}`))}));\n            setState(state => ({...state, AdminCalendarCache : state.AdminCalendarCache.filter(record => !(record.method === 'getBookingsCountByDateStr' && record.query ===  date))}));\n        }\n\n         fetchData();\n     \n    }, [date, time, state.bookingDialogDataChanged]);\n\n    const bookingCliked = (event, booking) =>\n    {\n        setSelectedBooking(booking);\n        setOpenDialog(true);\n    }\n\n    \n\n    const getBookingClass = (status) =>\n    {\n        switch (status) {\n\n            case 'patient_attended':\n                return classes.bookingBoxSampleTaken;\n            default : \n                return classes.bookingBox;\n        }\n    }\n\n    const addNewBookingClicked = () =>\n    {\n        setOpenDialogAddNew(true)\n    }\n\n    const getBookingsBox = (_bookings) =>\n    {\n        if (_bookings === null) \n        {\n            return (\n                <div className={classes.LoadingProgress}>\n                      <CircularProgress disableShrink  />\n                </div>\n            );  \n        }\n        else if (_bookings.length >= 0)\n        {\n           return (\n            <React.Fragment>\n            {_bookings.map((booking) => (\n              <div\n                style={booking.tr ? { borderTop: \"5px solid #d00fd6\" } : {}}\n                className={getBookingClass(booking.status)}\n                onClick={(event) => bookingCliked(event, booking)}\n              >\n                {`${booking.fullname}`.substring(0, 15)}\n              </div>\n            ))}\n  \n            <div className={classes.bookingBoxNew} onClick={addNewBookingClicked}> + Add New Booking</div>\n          </React.Fragment>\n           );\n        }\n    }\n\n\n    const handleCloseDialog = () =>\n    {\n        setOpenDialog(false);\n    }\n\n    const handleCloseDialogAddNew = () => {\n        setOpenDialogAddNew(false);\n      };\n\n    return (\n        <React.Fragment>\n\n            <div className={classes.Container}>\n\n              {getBookingsBox(filteredBookings)}\n\n            </div>\n\n            <BookingDialog\n                booking={selectedBooking}\n                open={openDialog}\n                onClose={handleCloseDialog}\n            />\n\n        <NewBookingDialog\n        date={date}\n        time={time}\n        open={openDialogAddNew}\n        handleClose={handleCloseDialogAddNew}\n        />\n\n        </React.Fragment>\n\n\n    );\n}\n\nDayViewCell.propTypes = {\n    key: PropTypes.string.isRequired,\n    date: PropTypes.string.isRequired,\n    time: PropTypes.string.isRequired,\n  };\n\n \n  \nexport default DayViewCell;","import React, { useEffect, useState } from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport PropTypes from 'prop-types';\nimport DayViewCell from './DayViewCell';\nimport dateformat from 'dateformat';\n\n\n\n\nconst rows = [\n    '09:00 AM',\n    '09:15 AM', \n    '09:30 AM', \n    '09:45 AM',\n    '10:00 AM',\n    '10:15 AM',\n    '10:30 AM',\n    '10:45 AM',\n    '11:00 AM',\n    '11:15 AM',\n    '11:30 AM',\n    '11:45 AM',\n    '12:00 PM',\n    '12:15 PM',\n    '12:30 PM',\n    '12:45 PM',\n    '01:00 PM',\n    '01:15 PM',\n    '01:30 PM',\n    '01:45 PM',\n    '02:00 PM',\n    '02:15 PM',\n    '02:30 PM',\n    '02:45 PM',\n    '03:00 PM',\n    '03:15 PM',\n    '03:30 PM',\n    '03:45 PM',\n    '04:00 PM',\n    '04:15 PM',\n    '04:30 PM',\n    '04:45 PM',\n    '05:00 PM',\n    '05:15 PM',\n    '05:30 PM',\n    '05:45 PM',\n];\n\nconst useStyles = makeStyles((theme) => ({\n\n    table: {\n        width: \"100%\",\n        border: \"1px solid #ddd\",\n        borderCollapse: \"collapse\",\n        overflowY: \"auto\"\n    },\n\n    th: {\n        border: \"1px solid #ddd\",\n        borderCollapse: \"collapse\",\n        verticalAlign: \"middle\",\n        fontcolor: \"#555\",\n        fontWeight: \"400\",\n        fontSize: \"15px\",\n        paddingTop: \"5px\",\n        paddingBottom: \"5px\",\n        width: \"12%\", \n    },\n\n    td: {\n        border: \"1px solid #ddd\",\n        borderCollapse: \"collapse\",\n        verticalAlign: \"middle\",\n        height : \"50px\",\n        width: \"84%\", \n    },\n\n    titleLabel: {\n        paddingBottom: \"17px\",\n        paddingTop: \"17px\",\n        color: \"#777\",\n        fontSize: \"16px\"\n    },\n\n    titleLabelToday: {\n        paddingBottom: \"17px\",\n        paddingTop: \"17px\",\n        color: \"#fff\",\n        backgroundColor: \"#1a73e8\",\n        fontSize: \"16px\"\n    },\n\n  }));\n\nconst DayView = ({date}) => {\n    const classes = useStyles();\n\n    return (\n        <React.Fragment>\n\n        <div style={{overflowY: \"scroll\" , height: \"60px\"}}>\n            <table className={classes.table}>\n                <thead>\n                    <tr>\n                        <th style={{width: \"7%\"}}>\n                        \n                        </th>\n                        <th style={{width: \"84%\"}}>\n                                <div className={(dateformat(new Date(),'yyyy-mm-dd') === dateformat(date, 'yyyy-mm-dd')) ? classes.titleLabelToday : classes.titleLabel }>\n                                        {dateformat(date,'dddd')}\n                                </div>                                \n                        </th>\n                    </tr>\n                </thead>\n             </table>\n\n        </div>\n\n            <div style={{overflowY: \"scroll\" , height: \"70vh\"}}>\n                <table className={classes.table}>   \n                    <tbody>\n                        {rows.map(row => (\n                            <tr>\n                                <td style={{width: \"7%\"}}>\n                                    {row}\n                                </td>\n                               \n                                <td className={classes.td}>\n                                     <DayViewCell key={`${dateformat(date,'yyyy-mm-dd')}-${row}`} date={dateformat(date,'yyyy-mm-dd')} time={row}/>  \n                                </td>\n                            \n                            </tr>\n                        ))}            \n                    </tbody>\n                </table>\n            </div>                    \n      \n        </React.Fragment>\n\n\n    );\n}\n\nDayView.propTypes = {\n    date: PropTypes.any.isRequired\n  };\n\n\nexport default DayView;","import React, { useEffect, useState } from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport MonthView from './MonthView';\nimport { Button, Grid, IconButton, InputAdornment, TextField, Tooltip } from '@material-ui/core';\nimport ToggleButton from '@material-ui/lab/ToggleButton';\nimport ToggleButtonGroup from '@material-ui/lab/ToggleButtonGroup';\n\nimport NavigateBeforeIcon from '@material-ui/icons/NavigateBefore';\nimport NavigateNextIcon from '@material-ui/icons/NavigateNext';\nimport WeekView from './WeekView';\nimport dateformat from 'dateformat';\nimport DayView from './DayView';\nimport GlobalState from '../../GlobalState';\n\nimport CloseIcon from '@material-ui/icons/Close';\n\n\n\nconst monthNames = [\"January\", \"February\", \"March\", \"April\", \"May\", \"June\",\n  \"July\", \"August\", \"September\", \"October\", \"November\", \"December\"\n];\n\nconst useStyles = makeStyles((theme) => ({\n\n    title: {\n        textAlign: \"center\",\n        fontSize: \"24px\",\n        fontColor: \"#333\"\n    },\n\n  }));\n\nexport default function CalendarView() {\n    const classes = useStyles();\n\n    const [state, setState] = React.useContext(GlobalState);\n\n    const [month, setMonth] = React.useState(new Date().getMonth() + 1);\n    const [year, setYear] = React.useState(new Date().getFullYear());\n\n    const [day, setDay] = React.useState(new Date());\n\n    const [firstDayofWeek, setFirstDayofWeek] = React.useState(new Date());\n\n    const [weekDates, setWeekDates] = React.useState([]);\n\n    const [mode, setMode] = React.useState('month');\n    const [selectedTab, setSeletedTab] = React.useState('month');\n\n    const [filter,setFilter] = React.useState('');\n\n    const filterChanged = (event) =>{\n        setFilter(event.target.value);\n        setState(state => ({...state, dayViewCalFilter : event.target.value?.trim()?.toUpperCase()}))\n      }\n\n      const removeFilter = () =>\n      {\n        setFilter('');\n        setState(state => ({...state, dayViewCalFilter : ''}));\n      }\n\n\n    useEffect( () => {\n        const today = new Date();\n        const dayofWeek = today.getDay();\n        const firstdayofweek = new Date(today.getTime() - ( dayofWeek * 86400000));\n        setFirstDayofWeek(firstdayofweek);\n        setState(state => ({...state, AdminCalendarCache : []}));\n\n        return () =>\n        {\n            setState(state => ({...state, AdminCalendarCache : []}));\n            removeFilter();\n        }\n       \n    }, []);\n\n\n    useEffect( () => {\n        const dates = [];\n        for (var i = 0; i < 7 ; i++)\n        {\n            dates.push(new Date(firstDayofWeek.getTime() + ( i * 86400000)));\n        }\n        setWeekDates(dates);\n\n    }, [firstDayofWeek]);\n\n    const handlePrevButton = (event) =>\n    {\n       if (mode === 'month')\n       {\n            if (month === 1)\n            {\n                setYear(year - 1);\n            } \n\n            const newMonth = month === 1 ? 12 : month - 1;\n            setMonth(newMonth);\n\n            const newDay = new Date(year, newMonth - 1 , 1, 0 ,0 ,0 ,0);\n            setDay(newDay);\n\n            const dayofWeek = newDay.getDay();\n            setFirstDayofWeek(new Date(newDay.getTime() - ( dayofWeek * 86400000)));\n\n       } \n       else if (mode === 'week')\n       {\n           const newFirstDayofWeek = new Date(firstDayofWeek.getTime() - ( 7 * 86400000));\n           setFirstDayofWeek(newFirstDayofWeek);\n\n           setDay(newFirstDayofWeek);\n           setMonth(newFirstDayofWeek.getMonth() + 1);\n           setYear(newFirstDayofWeek.getFullYear());\n\n       }\n       else if (mode === 'day')\n       {\n           const newDay = new Date(day.getTime() - ( 1 * 86400000));\n           setDay(newDay);\n\n           const dayofWeek = newDay.getDay();\n           setFirstDayofWeek(new Date(newDay.getTime() - ( dayofWeek * 86400000)));\n\n           setMonth(newDay.getMonth() + 1);\n           setYear(newDay.getFullYear());\n       }\n    }\n\n    const handleNextButton = (event) =>\n    {\n        if (mode === 'month')\n        {\n            if (month === 12)\n            {\n                setYear(year + 1);\n            } \n       \n            const newMonth = month === 12 ? 1 : month + 1;\n            setMonth(newMonth);\n\n            const newDay = new Date(year, newMonth - 1 , 1, 0 ,0 ,0 ,0);\n            setDay(newDay);\n\n            const dayofWeek = newDay.getDay();\n            setFirstDayofWeek(new Date(newDay.getTime() - ( dayofWeek * 86400000)));\n        }\n        else if (mode === 'week')\n        {\n            const newFirstDayofWeek = new Date(firstDayofWeek.getTime() + ( 7 * 86400000));\n            setFirstDayofWeek(newFirstDayofWeek);\n\n            setDay(newFirstDayofWeek);\n            setMonth(newFirstDayofWeek.getMonth() + 1);\n            setYear(newFirstDayofWeek.getFullYear());\n\n        }\n        else if (mode === 'day')\n        {\n            const newDay = new Date(day.getTime() + ( 1 * 86400000));\n            setDay(newDay);\n\n            const dayofWeek = newDay.getDay();\n            setFirstDayofWeek(new Date(newDay.getTime() - ( dayofWeek * 86400000)));\n \n            setMonth(newDay.getMonth() + 1);\n            setYear(newDay.getFullYear());\n        }\n    }\n\n    const goToday = (event) => {\n        const newDay = new Date();\n        const dayofWeek = newDay.getDay();\n        setFirstDayofWeek(new Date(newDay.getTime() - ( dayofWeek * 86400000)));\n        setDay(newDay);\n        setMonth(newDay.getMonth() + 1);\n        setYear(newDay.getFullYear());\n    }\n\n    const dayClicked = (event, date) =>\n    {\n        const newDay = new Date(date);\n        const dayofWeek = newDay.getDay();\n        setFirstDayofWeek(new Date(newDay.getTime() - ( dayofWeek * 86400000)));\n        setDay(newDay);\n        setMonth(newDay.getMonth() + 1);\n        setYear(newDay.getFullYear());\n        setSeletedTab('day');\n        setMode('day');\n    }\n\n    const getContentFromMode = (_mode) => {\n        if (_mode === 'month')\n        {\n            return (\n                <MonthView dayClicked={dayClicked} month={month} year={year}/>    \n            );\n        }    \n        else if (_mode === 'week')\n        {\n            return (\n                    <WeekView dayClicked={dayClicked} dates={weekDates}/>\n            );\n            \n        }\n        else if (_mode === 'day')\n        {\n            return (\n                <DayView date={day}/>\n            );\n        }\n    }\n\n    const getCalendarTitleFromMode = (_mode) => {\n        if (_mode === 'month')\n        {\n            return (\n                <span className={classes.title}> {`${monthNames[month - 1]} ${year}`} </span>   \n            );\n        }    \n        else if (_mode === 'week')\n        {\n            const endOfWeek = new Date(firstDayofWeek.getTime() + ( 6 * 86400000));\n            let endofWeekStr = '';\n            if (endOfWeek.getMonth() === firstDayofWeek.getMonth())\n            {\n                endofWeekStr = dateformat(endOfWeek,'d');\n            }else\n            {\n                endofWeekStr = dateformat(endOfWeek,'mmm d');\n            }\n\n            return (\n                <span className={classes.title}> {`${dateformat(firstDayofWeek,'mmm d')} - ${endofWeekStr}, ${year}`} </span>\n            );\n            \n        }\n        else if (_mode === 'day')\n        {\n            return (\n                <span className={classes.title}> {`${dateformat(day,'mmmm d, yyyy')}`} </span>\n            );\n        }\n    }\n\n\n    const handleTabChanged = (event, value) => {\n        if (value && value.length)\n        {\n          setSeletedTab(value);\n          setMode(value);\n        }\n    };\n\n    const getPrevButtonTitle = (_mode) =>\n    {\n        return `Previuos ${mode}`;\n    }\n\n    const getNextButtonTitle = (_mode) =>\n    {\n        return `Next ${mode}`;\n    }\n\n    return (\n        <React.Fragment>\n\n          <Grid\n            container\n            direction=\"row\"\n            justify=\"space-between\"\n            alignItems=\"center\"\n            style= {{marginBottom: \"10px\", marginTop: \"0px\"}}\n            >  \n\n            <Grid item md={3}>\n                <div  style={{display:\"flex\", alignItems: \"flex-start\", justifyContent: \"flex-start\" , paddingLeft: \"10px\"}}>\n                    <Tooltip title={getPrevButtonTitle(mode)} placement=\"bottom-start\">\n                        <IconButton \n                                color=\"default\" \n                                aria-label=\"prev\"\n                                onClick = {handlePrevButton}\n                                >\n                            <NavigateBeforeIcon style={{fontSize: '2rem'}}/>\n                        </IconButton>\n                    </Tooltip>\n\n                    <Tooltip title={getNextButtonTitle(mode)} placement=\"bottom-end\">\n                        <IconButton \n                                color=\"default\" \n                                aria-label=\"next\"\n                                onClick = {handleNextButton}\n                                >\n                            <NavigateNextIcon style={{fontSize: '2rem'}}/>\n                        </IconButton>\n                    </Tooltip>\n\n                    <Button style={{marginTop: \"11px\", marginLeft: \"10px\"}} onClick={goToday} variant=\"outlined\"> Today </Button>\n                </div>\n\n            </Grid>\n\n            <Grid item md={6}>\n\n                    <Grid\n                        container\n                        direction=\"row\"\n                        justify=\"center\"\n                        alignItems=\"flex-end\"\n                        spacing = {3}\n                        >\n                            <Grid item>\n                                    {getCalendarTitleFromMode(mode)}\n                            </Grid>\n                            {mode === 'day' && (\n                                        <Grid item>\n                                                <TextField\n                                                    variant=\"standard\"\n                                                    style={{marginBottom : \"5px\"}}\n                                                    value={filter}\n                                                    onChange={filterChanged}\n                                                    margin=\"normal\"\n                                                    size=\"small\"\n                                                    id=\"filter\"\n                                                    label=\"Filter\"\n                                                    name=\"filter\"\n                                                    autoComplete=\"off\"\n                                                    InputProps={{\n                                                        endAdornment : \n                                                            <InputAdornment position=\"end\">\n                                                                <Tooltip title=\"Clear\">\n                                                                            <IconButton\n                                                                            aria-label=\"remove filter\"\n                                                                            onClick={() => removeFilter()}\n                                                                            onMouseDown={() => removeFilter()}\n                                                                        >\n                                                                            <CloseIcon/>\n                                                                        </IconButton>\n                                                                </Tooltip>\n                                                            \n                                                            </InputAdornment>\n                                                          \n                                                    }}\n                                                   \n                                                />\n                                        </Grid>\n                            )}\n                           \n                    </Grid>\n                \n            </Grid>\n\n            <Grid item md={3}>\n                <div  style={{display:\"flex\", alignItems: \"flex-end\", justifyContent: \"flex-end\", paddingRight: \"10px\" }}>\n                    <ToggleButtonGroup\n                        value={selectedTab}\n                        exclusive\n                        onChange={handleTabChanged}\n                        aria-label=\"select view mode\"\n                    >\n                        <ToggleButton style={selectedTab === 'month' ? {width: \"80px\", color: \"#3f51b5\", backgroundColor: \"#ebedf7\" } : {width: \"80px\"}} value=\"month\" aria-label=\"month view\">\n                                month\n                        </ToggleButton>\n                        <ToggleButton style={selectedTab === 'week' ? {width: \"80px\", color: \"#3f51b5\", backgroundColor: \"#ebedf7\"} : {width: \"80px\"}}  value=\"week\" aria-label=\"week view\">\n                                week\n                        </ToggleButton>\n                        <ToggleButton style={selectedTab === 'day' ? {width: \"80px\", color: \"#3f51b5\", backgroundColor: \"#ebedf7\"} : {width: \"80px\"}} value=\"day\" aria-label=\"day view\">\n                                day\n                        </ToggleButton>\n                    </ToggleButtonGroup>\n                </div>\n            </Grid>\n\n           </Grid> \n\n             {getContentFromMode(mode)}\n\n        </React.Fragment>\n\n\n    );\n\n}","import axios from 'axios';\nimport { authToken, backendAPI } from '../../GlobalPath';\n\nexport default axios.create({\n  baseURL: backendAPI,\n  headers : {\n      'Authorization' : authToken,\n       'Content-Type': 'application/json',\n  }\n});","import API from './api';\nimport axiosRetry from 'axios-retry';\n\nexport default class BookService {\n\n\n   static addNewBooking = (payload) =>\n   {\n      return API.post(`/api/optimalvision/book/bookappointment`, payload);\n   }\n\n\n   static sendRegFormEmail = (bookingId) =>\n   {\n      return API.post(`/api/optimalvision/book/sendregformemail?id=${bookingId}`);\n   }\n   static payBooking = (bookingId,price, paymentMethod, corporate) =>\n   {\n      return API.post(`/api/optimalvision/book/paybooking?id=${bookingId}&paymentmethod=${paymentMethod}&corporate=${corporate}&price=${price}`);\n   }\n\n   static unPayBooking = (bookingId) =>\n   {\n      return API.post(`/api/optimalvision/book/unpaybooking?id=${bookingId}`);\n   }\n\n   static getShouldRefundsCount = () =>\n   {\n      return API.get(`/api/optimalvision/book/getshouldrefundscount?`);\n   }\n\n   \n\n   static refundBooking = (bookingId) =>\n   {\n      return API.post(`/api/optimalvision/payment/refundpayment`, {bookingId: bookingId});\n   }\n\n   static getBookingsStatsByDateStr = (dateStr) =>\n   {\n      return API.get(`/api/optimalvision/book/getbookingsstatsbydatestr?date=${dateStr}`);\n   }\n\n   static getBookingsCountByDateStr = (dateStr) =>\n   {\n      return API.get(`/api/optimalvision/book/getbookingscountbydatestr?date=${dateStr}`);\n   }\n\n   static getAllBookingsCountAll = () =>\n   {\n      return API.get(`/api/optimalvision/book/getallbookingscountall`);\n   }\n\n   static getBookingsCountByDateStrandTime = (dateStr, time, source) =>\n   {\n      return API.get(`/api/optimalvision/book/getbookingscountbydatestrandtime?date=${dateStr}&time=${time}`, {cancelToken: source.token});\n   }\n\n   static getBookingsByDateStrandTime = (dateStr, time) =>\n   {\n      return API.get(`/api/optimalvision/book/getbookingsbydatestrandtime?date=${dateStr}&time=${time}`);\n   }\n\n\n   static getAllBookingsCountByDateStr = (dateStr) =>\n   {\n      return API.get(`/api/optimalvision/book/getallbookingscountbydatestr?date=${dateStr}`);\n   }\n\n   static getAllBookingsCountByDateStrandTime = (dateStr, time, source) =>\n   {\n      return API.get(`/api/optimalvision/book/getallbookingscountbydatestrandtime?date=${dateStr}&time=${time}`, {cancelToken: source.token});\n   }\n\n   static getAllBookingsByDateStrandTime = (dateStr, time) =>\n   {\n      return API.get(`/api/optimalvision/book/getallbookingsbydatestrandtime?date=${dateStr}&time=${time}`);\n   }\n\n   static changeBackToBookingMade = (id) =>\n   {\n      return API.post(`/api/optimalvision/book/changebacktobookingmade?id=${id}`);\n   }\n\n   static changeToPatientAttended = (id) =>\n   {\n      return API.post(`/api/optimalvision/book/changetopatientattended?id=${id}`);\n   }\n\n   static updateBooking = (payload) =>\n   {\n      return API.post(`/api/optimalvision/book/updatebookappointment`, payload);\n   } \n\n   static updateBookingTime = (payload) =>\n   {\n      return API.post(`/api/optimalvision/book/updatebookappointmenttime`, payload);\n   } \n\n   static deleteBooking = (id) =>\n   {\n      return API.post(`/api/optimalvision/book/deletebookappointment?id=${id}`);\n   } \n\n   static unDeleteBooking = (id) =>\n   {\n      return API.post(`/api/optimalvision/book/undeletebookappointment?id=${id}`);\n   } \n   \n    static getBookingsByRef = (ref) =>\n    {\n       return API.get(`/api/optimalvision/book/getbookingsbyref?ref=${ref}`);\n    }\n\n    static getBookingById = (id) =>\n    {\n       return API.get(`/api/optimalvision/book/getbookingbyid?id=${id}`);\n    }\n\n    static getAllBookings = (limit) =>\n    {\n      if (!limit) limit = 25 \n      return API.get(`/api/optimalvision/book/getallbookings?limit=${limit}`);\n    }\n\n    static getDeletedBookings= (limit) =>\n    {\n      if (!limit) limit = 25 \n       return API.get(`/api/optimalvision/book/getdeletedbookings?limit=${limit}`);\n    }\n\n    static getTodayBookings= () =>\n    {\n       return API.get(`/api/optimalvision/book/gettodaybookings`);\n    }\n\n    static getOldBookings= (limit) =>\n    {\n      if (!limit) limit = 25 \n       return API.get(`/api/optimalvision/book/getoldbookings?limit=${limit}`);\n    }\n\n    static getFutureBookings= (limit) =>\n    {\n      if (!limit) limit = 25 \n       return API.get(`/api/optimalvision/book/getfuturebookings?limit=${limit}`);\n    }\n\n    static getRecentBookings= () =>\n    {\n       return API.get(`/api/optimalvision/book/getrecentbookings`);\n    }\n\n    static getRecentBookingsAll= (limit) =>\n    {\n      if (!limit) limit = 25 \n       return API.get(`/api/optimalvision/book/getrecentbookingsall?limit=${limit}`);\n    }\n}","import API from './api';\n\nexport default class PDFService {\n\n\n    static downloadGPRegForm = (id) =>\n    {\n       return API.get(`/api/pdf/downloadgpregform?id=${id}`, {\n        responseType: 'arraybuffer',\n        id: id,\n        headers: {\n            Accept: 'application/pdf',\n        }\n        });\n    }\n\n\n\n}","export const corporates = [\n    'Visa Medical'\n]","import React, { useEffect, useRef, useState } from \"react\";\nimport BookService from \"./services/BookService\";\nimport Typography from \"@material-ui/core/Typography\";\nimport {\n  Backdrop,\n  Button,\n  Checkbox,\n  CircularProgress,\n  Divider,\n  FormControlLabel,\n  Grid,\n  InputAdornment,\n  InputLabel,\n  Link,\n  makeStyles,\n  MenuItem,\n  Select,\n  TextField,\n  Tooltip,\n} from \"@material-ui/core\";\nimport GlobalState from \"../GlobalState\";\nimport { withStyles } from \"@material-ui/core/styles\";\n\nimport CreditCardIcon from \"@material-ui/icons/CreditCard\";\n\nimport Dialog from \"@material-ui/core/Dialog\";\nimport DialogContent from \"@material-ui/core/DialogContent\";\n\nimport DialogTitle from \"@material-ui/core/DialogTitle\";\nimport Draggable from \"react-draggable\";\nimport Paper from \"@material-ui/core/Paper\";\n\nimport Alert from \"@material-ui/lab/Alert\";\n\nimport PropTypes from \"prop-types\";\nimport LinearProgress from \"@material-ui/core/LinearProgress\";\nimport Box from \"@material-ui/core/Box\";\n\nimport Radio from \"@material-ui/core/Radio\";\nimport RadioGroup from \"@material-ui/core/RadioGroup\";\nimport FormControl from \"@material-ui/core/FormControl\";\nimport FormLabel from \"@material-ui/core/FormLabel\";\nimport { corporates } from \"./Corporates\";\nimport NumberFormat from \"react-number-format\";\n\n\nvar interval;\n\nconst useStyles = makeStyles((theme) => ({\n  title: {\n    marginTop: theme.spacing(0),\n    marginBottom: theme.spacing(1),\n  },\n\n  refreshButton: {\n    marginLeft: theme.spacing(2),\n  },\n\n  checkIcon: {\n    color: \"green\",\n  },\n\n  closeIcon: {\n    color: \"red\",\n  },\n\n  RefLink: {\n    cursor: \"pointer\",\n  },\n\n  BookedLabel: {\n    backgroundColor: \"#606060\",\n    color: \"#fff\",\n    paddingRight: \"10px\",\n    paddingLeft: \"10px\",\n  },\n\n  PatientAttendedLabel: {\n    backgroundColor: \"#0066aa\",\n    color: \"#fff\",\n    paddingRight: \"15px\",\n    paddingLeft: \"10px\",\n  },\n\n  SampleTakenLabel: {\n    backgroundColor: \"#0066cc\",\n    color: \"#fff\",\n    paddingRight: \"40px\",\n    paddingLeft: \"10px\",\n  },\n\n  ReportSentLabel: {\n    backgroundColor: \"#009900\",\n    color: \"#fff\",\n    paddingRight: \"90px\",\n    paddingLeft: \"10px\",\n  },\n\n  ReportCertSentLabel: {\n    backgroundColor: \"#009900\",\n    color: \"#fff\",\n    paddingRight: \"68px\",\n    paddingLeft: \"10px\",\n  },\n\n  archiveButton: {},\n\n  smartMatchButton: {\n    backgroundColor: \"#2f942e\",\n    \"&:hover\": {\n      background: \"green\",\n      color: \"#fff\",\n    },\n    textDecoration: \"none !important\",\n    marginRight: \"10px\",\n    // padding: \"10px\"\n  },\n\n  infoTitle: {\n    fontWeight: \"400\",\n  },\n\n  infoData: {\n    paddingLeft: \"10px\",\n    fontWeight: \"800\",\n  },\n\n  matchButton: {\n    marginTop: \"30px\",\n    marginBottom: \"20px\",\n    backgroundColor: \"#2f942e\",\n    \"&:hover\": {\n      background: \"green\",\n      color: \"#fff\",\n    },\n    textDecoration: \"none !important\",\n    padding: \"10px\",\n    paddingLeft: \"50px\",\n    paddingRight: \"50px\",\n  },\n\n  resendButton: {\n    marginTop: \"5px\",\n    marginBottom: \"5px\",\n    backgroundColor: \"#2f942e\",\n    \"&:hover\": {\n      background: \"green\",\n      color: \"#fff\",\n    },\n    textDecoration: \"none !important\",\n    padding: \"10px\",\n    paddingLeft: \"50px\",\n    paddingRight: \"50px\",\n  },\n\n  resendFilesButton: {\n    marginTop: \"5px\",\n    marginBottom: \"5px\",\n    backgroundColor: \"#3792ad\",\n    \"&:hover\": {\n      background: \"#2f798f\",\n      color: \"#fff\",\n    },\n    textDecoration: \"none !important\",\n    padding: \"10px\",\n    paddingLeft: \"50px\",\n    paddingRight: \"50px\",\n  },\n\n  cancelButton: {\n    marginBottom: \"10px\",\n    textDecoration: \"none !important\",\n    padding: \"10px\",\n    paddingLeft: \"90px\",\n    paddingRight: \"90px\",\n  },\n\n  backdrop: {\n    zIndex: theme.zIndex.drawer + 5,\n    color: \"#fff\",\n  },\n}));\n\nfunction NumberFormatCustom(props) {\n  const { inputRef, onChange, ...other } = props;\n\n  return (\n    <NumberFormat\n      {...other}\n      getInputRef={inputRef}\n      onValueChange={(values) => {\n        onChange({\n          target: {\n            name: props.name,\n            value: values.value,\n          },\n        });\n      }}\n      thousandSeparator\n      isNumericString\n      prefix=\"\"\n    />\n  );\n}\n\nNumberFormatCustom.propTypes = {\n  inputRef: PropTypes.func.isRequired,\n  name: PropTypes.string.isRequired,\n  onChange: PropTypes.func.isRequired,\n};\n\n\nconst BorderLinearProgress = withStyles((theme) => ({\n  root: {\n    height: 10,\n    borderRadius: 5,\n  },\n  colorPrimary: {\n    backgroundColor: \"#cedbce\", //theme.palette.grey[theme.palette.type === 'light' ? 200 : 700],\n  },\n  bar: {\n    borderRadius: 5,\n    backgroundColor: \"#2f942e\",\n  },\n}))(LinearProgress);\nfunction LinearProgressWithLabel(props) {\n  return (\n    <Box display=\"flex\" alignItems=\"center\">\n      <Box width=\"100%\" mr={1}>\n        <BorderLinearProgress variant=\"determinate\" {...props} />\n      </Box>\n      <Box minWidth={35}>\n        <Typography\n          style={{ fontWeight: \"800\", color: \"#5e855e\" }}\n          variant=\"body2\"\n          color=\"textSecondary\"\n        >{`${Math.round(props.value)}%`}</Typography>\n      </Box>\n    </Box>\n  );\n}\n\nLinearProgressWithLabel.propTypes = {\n  /**\n   * The value of the progress indicator for the determinate and buffer variants.\n   * Value between 0 and 100.\n   */\n  value: PropTypes.number.isRequired,\n};\n\nfunction PaperComponent(props) {\n  return (\n    <Draggable\n      handle=\"#draggable-dialog-title\"\n      cancel={'[class*=\"MuiDialogContent-root\"]'}\n    >\n      <Paper {...props} />\n    </Draggable>\n  );\n}\n\nexport default function PayDialog(props) {\n  const classes = useStyles();\n\n  const [state, setState] = React.useContext(GlobalState);\n  const [paymentMethod, setPaymentMethod] = useState(\"credit card\");\n  const [corporate, setCorporate] = useState(corporates[0]);\n  const [saving, setSaving] = useState(false);\n\n  const [price, setPrice] = useState(\"\");\n  const [priceError, setPriceError] = useState(false);\n\n  useEffect( () => {\n    if (props.price)\n    {\n      setPrice(`${props.price}`)\n    }else\n    {\n      setPrice('')\n    }\n  }, [props.price, props.open])\n\n\n  const priceChanged = (event) =>\n  {\n    setPrice(event.target.value)\n    setPriceError(false)\n  }\n\n  const paymentMethodChanged = (event) => {\n    setPaymentMethod(event.target.value);\n  };\n\n  const handleClose = () => {\n    if (saving) return;\n\n    props.handleClose();\n    setPaymentMethod(\"credit card\");\n    setPrice('')\n    setCorporate(corporates[0]);\n    setSaving(false);\n  };\n\n  const corporateChanged = (event) => {\n    setCorporate(event.target.value);\n  };\n\n  const payClicked = async () => {\n\n\n    if (!price || price.trim().length === 0 || price === '0')\n    {\n      setPriceError(true)\n      return\n    }\n\n    setSaving(true);\n\n  \n\n    try {\n      await BookService.payBooking(\n        props.booking._id,\n        price,\n        paymentMethod,\n        paymentMethod === \"corporate\" ? corporate : \"\"\n      );\n      setSaving(false);\n      setState((state) => ({\n        ...state,\n        bookingPayChanged: !state.bookingPayChanged ? true : false,\n      }));\n      handleClose();\n    } catch (err) {\n      console.error(err);\n      setSaving(false);\n    }\n  };\n\n  return (\n    <React.Fragment>\n      {props.booking && (\n        <React.Fragment>\n          <Dialog\n            maxWidth=\"xs\"\n            open={props.open}\n            onClose={handleClose}\n            PaperComponent={PaperComponent}\n            aria-labelledby=\"form-dialog-title\"\n          >\n            <DialogTitle id=\"draggable-dialog-title\">\n              <Grid\n                container\n                spacing={2}\n                direction=\"row\"\n                justify=\"center\"\n                alignItems=\"center\"\n              >\n                <Grid item>\n                  <CreditCardIcon\n                    style={{ color: \"#f50057\", fontSize: \"3rem\" }}\n                  />\n                </Grid>\n\n                <Grid item>\n                  <div\n                    style={{\n                      color: \"#f50057\",\n                      paddingBottom: \"10px\",\n                      fontWeight: \"800\",\n                    }}\n                  >\n                    {\" \"}\n                    PAY the CHARGE{\" \"}\n                  </div>\n                </Grid>\n              </Grid>\n\n              <Divider />\n            </DialogTitle>\n            <DialogContent>\n              <div\n                style={{\n                  height: \"300px\",\n                }}\n              >\n                <Grid\n                  container\n                  direction=\"column\"\n                  justify=\"space-between\"\n                  spacing={2}\n                  alignItems=\"flex-start\"\n                >\n                  <Grid item>\n                  <TextField\n                                autoFocus\n                                error={priceError}\n                                label=\"TOTAL Charges\"\n                                value={price}\n                                fullWidth\n                                required\n                                onChange={priceChanged}\n                                name=\"product-price\"\n                                id=\"product-price-id\"\n                                InputProps={{\n                                  inputComponent: NumberFormatCustom,\n                                  startAdornment: (\n                                    <InputAdornment position=\"start\">\n                                      £\n                                    </InputAdornment>\n                                  ),\n                                }}\n                              />\n\n                  </Grid>\n\n                  <Grid item>\n                    <div style={{ fontSize: \"17px\" }}>\n                      {\" \"}\n                      How do you want to pay?{\" \"}\n                    </div>\n                  </Grid>\n\n                  <Grid item>\n                    <FormControl component=\"fieldset\">\n                      <RadioGroup\n                        aria-label=\"paymentMethod\"\n                        name=\"paymentMethod\"\n                        value={paymentMethod}\n                        onChange={paymentMethodChanged}\n                      >\n                        <FormControlLabel\n                          value=\"credit card\"\n                          control={<Radio />}\n                          label=\"Credit Card\"\n                        />\n                        <FormControlLabel\n                          value=\"cash\"\n                          control={<Radio />}\n                          label=\"Cash\"\n                        />\n                        <FormControlLabel\n                          value=\"corporate\"\n                          control={<Radio />}\n                          label=\"Corporate\"\n                        />\n                      </RadioGroup>\n\n                      {paymentMethod === \"corporate\" && (\n                        <FormControl\n                          style={{ marginTop: \"10px\" }}\n                          className={classes.formControl}\n                        >\n                          <Select\n                            labelId=\"select-corporate\"\n                            id=\"select-corporate-id\"\n                            value={corporate}\n                            onChange={corporateChanged}\n                          >\n                            {corporates.map((element) => (\n                              <MenuItem\n                                value={element}\n                              >{`${element}`}</MenuItem>\n                            ))}\n                          </Select>\n                        </FormControl>\n                      )}\n                    </FormControl>\n                  </Grid>\n                </Grid>\n\n                <Grid item></Grid>\n\n                <div\n                  style={{\n                    position: \"absolute\",\n                    bottom: \"20px\",\n                    right: \"20px\",\n                  }}\n                >\n                  <Grid\n                    container\n                    direction=\"row\"\n                    justify=\"flex-end\"\n                    alignItems=\"center\"\n                    spacing={1}\n                  >\n                    <Grid item>\n                      <Button\n                        onClick={handleClose}\n                        style={{ width: \"100px\" }}\n                        disabled={saving}\n                      >\n                        back\n                      </Button>\n                    </Grid>\n                    <Grid item>\n                      <Button\n                        onClick={payClicked}\n                        variant=\"contained\"\n                        color=\"secondary\"\n                        style={{ width: \"100px\" }}\n                        disabled={saving}\n                      >\n                        Pay\n                      </Button>\n                    </Grid>\n                  </Grid>\n                </div>\n              </div>\n\n              <Backdrop className={classes.backdrop} open={saving}>\n                <CircularProgress color=\"inherit\" />\n              </Backdrop>\n            </DialogContent>\n          </Dialog>\n        </React.Fragment>\n      )}\n    </React.Fragment>\n  );\n}\n","import React, { useEffect, useState } from \"react\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport GlobalState from \"../GlobalState\";\nimport Grid from \"@material-ui/core/Grid\";\nimport {\n  Button,\n  Checkbox,\n  DialogActions,\n  DialogContentText,\n  Divider,\n  FormControlLabel,\n  IconButton,\n  TextField,\n  Tooltip,\n} from \"@material-ui/core\";\nimport PDFService from \"./services/PDFService\";\n\nimport { calculatePrice } from \"./PriceCalculator\";\n\nimport bookingService from \"./services/BookService\";\nimport CheckIcon from \"@material-ui/icons/Check\";\nimport CloseIcon from \"@material-ui/icons/Close\";\n\nimport Dialog from \"@material-ui/core/Dialog\";\nimport DialogContent from \"@material-ui/core/DialogContent\";\nimport DialogTitle from \"@material-ui/core/DialogTitle\";\nimport Draggable from \"react-draggable\";\nimport Slide from \"@material-ui/core/Slide\";\n\nimport Paper from \"@material-ui/core/Paper\";\n\nimport DeleteIcon from \"@material-ui/icons/Delete\";\nimport BookService from \"./services/BookService\";\n\nimport Backdrop from \"@material-ui/core/Backdrop\";\nimport CircularProgress from \"@material-ui/core/CircularProgress\";\nimport {\n  FormatDateFromString,\n  RevertFormatDateFromString,\n} from \"./DateFormatter\";\nimport PayDialog from \"./PayDialog\";\n\nimport PrintIcon from \"@material-ui/icons/Print\";\nimport UndoIcon from \"@material-ui/icons/Undo\";\n\nimport SendIcon from \"@material-ui/icons/Send\";\n\nimport HistoryIcon from \"@material-ui/icons/History\";\n\nimport FileCopyOutlinedIcon from \"@material-ui/icons/FileCopyOutlined\";\nimport { CalendarColors } from \"../Admin/calendar-admin/colors\";\nimport InvoiceDialog from \"../InvoiceDialog\";\nimport InvoiceService from \"../services/InvoiceService\";\n\nconst useStyles = makeStyles((theme) => ({\n  box: {\n    backgroundColor: \"#373737\",\n    color: \"#fff\",\n    padding: \"1px\",\n    borderRadius: \"4px\",\n    textAlign: \"justify\",\n    paddingRight: \"40px\",\n  },\n\n  boxRed: {\n    backgroundColor: \"#dc2626\",\n    color: \"#fff\",\n    padding: \"1px\",\n    borderRadius: \"4px\",\n    textAlign: \"justify\",\n    paddingRight: \"40px\",\n  },\n\n  boxInfo: {\n    textAlign: \"justify\",\n    backgroundColor: \"#fafafa\",\n    color: \"#333\",\n    padding: \"1px\",\n    borderRadius: \"4px\",\n    paddingRight: \"40px\",\n    border: \"1px solid #eee\",\n  },\n\n  ul: {\n    listStyle: \"none\",\n    padding: \"0\",\n    margin: \"0\",\n  },\n\n  li: {\n    marginBottom: \"15px\",\n  },\n\n  icon: {\n    marginRight: \"8px\",\n  },\n\n  root: {\n    width: \"100%\",\n  },\n\n  lineThrough: {\n    textDecoration: \"line-through\",\n  },\n\n  heading: {\n    fontSize: theme.typography.pxToRem(15),\n    flexBasis: \"33.33%\",\n    flexShrink: 0,\n    color: theme.palette.text.secondary,\n  },\n  secondaryHeading: {\n    fontSize: theme.typography.pxToRem(15),\n  },\n\n  infoDetails: {\n    textAlign: \"left\",\n  },\n\n  infoTitle: {\n    fontWeight: \"800\",\n    marginRight: \"10px\",\n    color: theme.palette.secondary.main,\n    fontSize: \"0.9rem\",\n  },\n\n  infoData: {\n    fontWeight: \"500\",\n    fontSize: \"1rem\",\n  },\n\n  title: {\n    textAlign: \"center\",\n    fontWeight: \"600\",\n    marginLeft: \"10px\",\n    marginBottom: \"5px\",\n  },\n\n  Accordion: {\n    backgroundColor: \"#f5f5f5\",\n    color: \"#222\",\n  },\n\n  AccordionDeleted: {\n    backgroundColor: \"#aaa\",\n    color: \"#555\",\n  },\n\n  DownloadForm: {\n    marginTop: \"10px\",\n    marginBottom: \"10px\",\n  },\n\n  infoDataCharges: {\n    fontSize: \"18px\",\n    color: \"green\",\n    fontWeight: \"600\",\n  },\n\n  infoDataChargesHigher: {\n    fontSize: \"18px\",\n    color: \"red\",\n    fontWeight: \"600\",\n  },\n  BookedLabel: {\n    color: \"#606060\",\n    paddingLeft: \"5px\",\n    paddingBottom: \"3px\",\n    paddingTop: \"3px\",\n    fontWeight: \"800\",\n    borderLeft: \"5px solid\",\n    borderColor: \"#606060\",\n    width: \"150px\",\n    display: \"inline-block\",\n  },\n\n  PatientAttendedLabel: {\n    color: \"#0066aa\",\n    paddingLeft: \"5px\",\n    paddingBottom: \"3px\",\n    paddingTop: \"3px\",\n    fontWeight: \"800\",\n    borderLeft: \"5px solid\",\n    borderColor: \"#0066aa\",\n    width: \"150px\",\n    display: \"inline-block\",\n  },\n\n  SampleTakenLabel: {\n    color: \"#0066cc\",\n    paddingRight: \"10px\",\n    paddingLeft: \"5px\",\n    paddingBottom: \"3px\",\n    paddingTop: \"3px\",\n    fontWeight: \"800\",\n    borderLeft: \"5px solid\",\n    borderColor: \"#0066cc\",\n  },\n\n  ReportSentLabel: {\n    color: \"#009900\",\n    paddingRight: \"10px\",\n    paddingLeft: \"5px\",\n    paddingBottom: \"3px\",\n    paddingTop: \"3px\",\n    fontWeight: \"800\",\n    borderLeft: \"5px solid\",\n    borderColor: \"#009900\",\n  },\n\n  ReportCertSentLabel: {\n    color: \"#009900\",\n    paddingRight: \"10px\",\n    paddingLeft: \"5px\",\n    paddingBottom: \"3px\",\n    paddingTop: \"3px\",\n    fontWeight: \"800\",\n    borderLeft: \"5px solid\",\n    borderColor: \"#009900\",\n  },\n\n  PositiveLabel: {\n    color: \"red\",\n    paddingRight: \"10px\",\n    paddingLeft: \"5px\",\n    paddingBottom: \"3px\",\n    paddingTop: \"3px\",\n    fontWeight: \"800\",\n    borderLeft: \"5px solid\",\n    borderColor: \"red\",\n  },\n\n  EditButton: {\n    marginBottom: \"20px\",\n    backgroundColor: \"#2f942e\",\n    \"&:hover\": {\n      background: \"green\",\n      color: \"#fff\",\n    },\n    textDecoration: \"none !important\",\n    padding: \"10px\",\n  },\n\n  ResendEmailsButton: {\n    // marginBottom : \"20px\",\n    color: \"#2f942e\",\n    borderColor: \"#2f942e\",\n    \"&:hover\": {\n      background: \"#fafffa\",\n      borderColor: \"#2f942e\",\n    },\n    textDecoration: \"none !important\",\n    paddingLeft: \"50px\",\n    paddingRight: \"50px\",\n  },\n\n  PayButton: {\n    marginLeft: \"70px\",\n    width: \"300px\",\n  },\n\n  printInvoiceButton: {\n    marginLeft: \"70px\",\n    fontSize: \"0.8rem\",\n    // width: \"300px\",\n  },\n\n  editInvoiceButton: {\n    marginLeft: \"10px\",\n    fontSize: \"0.8rem\",\n  },\n\n  PayLabel: {\n    marginLeft: \"20px\",\n\n    color: \"#2f942e\",\n    fontWeight: \"500\",\n    textAlign: \"center\",\n  },\n\n  RestoreButton: {\n    marginBottom: \"20px\",\n    backgroundColor: \"#eee\",\n    color: \"#333\",\n    \"&:hover\": {\n      background: \"#f1f1f1\",\n      color: \"#111\",\n    },\n    textDecoration: \"none !important\",\n    padding: \"10px\",\n  },\n\n  DeleteButton: {\n    marginBottom: \"20px\",\n    backgroundColor: \"#b80012\", \n    color: \"#fff\",\n    \"&:hover\": {\n      background: \"#d90015\",\n      color: \"#fff\",\n    },\n\n    padding: \"10px\",\n  },\n\n  SaveButton: {\n    marginBottom: \"10px\",\n    padding: \"10px\",\n    color: \"#fff\",\n\n    backgroundColor:  \"#bd0d50\",\n    \"&:hover\": {\n      background: \"#d1175e\",\n      color: \"#fff\",\n    },\n  },\n\n  CancelButton: {\n    marginBottom: \"20px\",\n    // padding: \"10px\"\n  },\n\n  TextBox: {\n    padding: \"0px\",\n  },\n\n  checkIcon: {\n    color: \"green\",\n  },\n\n  checkIconSmall: {\n    color: \"green\",\n    paddingTop: \"5px\",\n  },\n\n  closeIcon: {\n    color: \"red\",\n  },\n\n  centeredLabel: {\n    display: \"flex\",\n    alignItems: \"center\",\n  },\n\n  backdrop: {\n    zIndex: theme.zIndex.drawer + 5,\n    color: \"#fff\",\n  },\n\n  invoiceNumber: {\n    display: \"inline-block\",\n    fontWeight: \"500\",\n    width: \"72px\",\n    fontSize: \"1rem\",\n    color: theme.palette.primary.main,\n  },\n\n  dialogTitle: {\n    backgroundColor: theme.palette.secondary.main,\n    color: \"#fff\",\n  },\n\n  question:{\n    fontSize:\"1.3rem\",\n    fontWeight: \"400\",\n    color: theme.palette.secondary.main,\n    marginTop:\"30px\"\n  },\n\n  answer:{\n    fontSize:\"1.3rem\",\n    fontWeight: \"500\",\n    color: theme.palette.primary.main,\n  },\n\n\n\n}));\n\nconst Transition = React.forwardRef(function Transition(props, ref) {\n  return <Slide direction=\"up\" ref={ref} {...props} />;\n});\n\nfunction PaperComponent(props) {\n  return (\n    <Draggable\n      handle=\"#alert-dialog-slide-title\"\n      cancel={'[class*=\"MuiDialogContent-root\"]'}\n    >\n      <Paper {...props} />\n    </Draggable>\n  );\n}\n\nexport default function BookingDialog(props) {\n  const classes = useStyles();\n\n  const [state, setState] = React.useContext(GlobalState);\n\n  const [copied, setCopied] = useState(false);\n\n  const [emailSent, setEmailSent] = React.useState(false);\n  const [emailSentInvoice, setEmailSentInvoice] = React.useState(false);\n\n  const [openResendDialog, setOpenResendDialog] = React.useState(false);\n  const [openPayDialog, setOpenPayDialog] = React.useState(false);\n  const [openRefundDialog, setOpenRefundDialog] = React.useState(false);\n\n  const [openInvoiceDialog, setOpenInvoiceDialog] = React.useState(false);\n\n  const [selectedBooking, setSelectedBooking] = React.useState(null);\n\n  const [editMode, setEditMode] = React.useState({ edit: false, person: null });\n  const [deleteMode, setDeleteMode] = React.useState({\n    delete: false,\n    person: null,\n  });\n  const [restoreMode, setRestoreMode] = React.useState({\n    restore: false,\n    person: null,\n  });\n\n  const [saving, setSaving] = React.useState(false);\n  const [deleting, setDeleting] = React.useState(false);\n  const [restoring, setRestoring] = React.useState(false);\n\n  const [validationError, setValidationError] = React.useState({});\n\n  const [bookingDate, setBookingDate] = React.useState(\"\");\n  const [bookingTime, setBookingTime] = React.useState(\"\");\n\n  const [fullname, setFullname] = React.useState(\"\");\n  const [email, setEmail] = React.useState(\"\");\n  const [tel, setTel] = React.useState(\"\");\n  const [notes, setNotes] = React.useState(\"\");\n  const [service, setService] = React.useState(\"\");\n\n  const [refreshData, setRefreshData] = React.useState(false);\n\n  const [booking, setBooking] = React.useState(null);\n\n  const [recordChanged, setRecordChanged] = React.useState(false);\n\n  const [fieldChanged, setFieldChanged] = React.useState(false);\n\n  const [openUndoPayDialog, setOpenUndoPayDialog] = React.useState(false);\n\n  const [openTimeStampDialog, setOpenTimeStampDialog] = React.useState(false);\n\n  const [invoice, setInvoice] = React.useState(null);\n  const [invoiceLoaded, setInvoiceLoaded] = React.useState(false);\n\n  useEffect(() => {\n    if (!props.open) {\n      setTimeout(() => {\n        setEditMode({ edit: false, person: null });\n        setRecordChanged(false);\n      }, 500);\n    }\n  }, [props.open]);\n\n  const bookingDateChanged = (event) => {\n    setBookingDate(event.target.value);\n    setValidationError({ ...validationError, bookingDateError: false });\n    setFieldChanged(!fieldChanged);\n  };\n\n  const bookingTimeChanged = (event) => {\n    setBookingTime(event.target.value);\n    setValidationError({ ...validationError, bookingTimeError: false });\n    setFieldChanged(!fieldChanged);\n  };\n\n  const fullnameChanged = (event) => {\n    setFullname(event.target.value);\n    setFieldChanged(!fieldChanged);\n  };\n\n  const emailChanged = (event) => {\n    setEmail(event.target.value);\n    setFieldChanged(!fieldChanged);\n  };\n\n  const telChanged = (event) => {\n    setTel(event.target.value);\n    setFieldChanged(!fieldChanged);\n  };\n\n  const serviceChanged = (event) => {\n    setService(event.target.value);\n    setFieldChanged(!fieldChanged);\n  };\n\n  const notesChanged = (event) => {\n    setNotes(event.target.value);\n    setFieldChanged(!fieldChanged);\n  };\n\n  const getStatusLabel = (status) => {\n    if (status === \"booked\") {\n      return <div className={classes.BookedLabel}> Booking Made </div>;\n    } else if (status === \"patient_attended\") {\n      return (\n        <div className={classes.PatientAttendedLabel}> Patient Attended </div>\n      );\n    } else {\n      return \"Unknown\";\n    }\n  };\n\n  const handleEditModeChanged = (edit, person) => {\n    if (edit) {\n      setFullname(person.fullname);\n      setBookingDate(FormatDateFromString(person.bookingDate));\n      setBookingTime(person.bookingTime.toUpperCase());\n      setEmail(person.email);\n      setTel(person.phone);\n      if (person.notes) {\n        setNotes(person.notes);\n      }\n\n      setEditMode({ edit: edit, person: person });\n    } else if (!edit && !person) {\n      setEditMode({ edit: edit, person: person });\n      setRecordChanged(false);\n    } else if (!edit && person) {\n      const booking = {};\n      const bookingId = person._id;\n      booking.email = email;\n      booking.phone = tel;\n      booking.fullname = fullname;\n      booking.notes = notes;\n      booking.service = service;\n      booking.bookingDate = RevertFormatDateFromString(bookingDate);\n      booking.bookingTime = bookingTime;\n      booking.bookingRef = person.bookingRef;\n\n      if (validateBooking(booking)) {\n        updateBooking({ bookingId: bookingId, person: booking });\n      }\n    }\n  };\n\n  const validateDate = (str) => {\n    var error = false;\n    if (!str || str.length !== 10) {\n      error = true;\n    }\n\n    if (str.charAt(4) !== \"-\" || str.charAt(7) !== \"-\") {\n      error = true;\n    }\n\n    try {\n      const result = /^\\d{4}-\\d{2}-\\d{2}$/.test(str);\n      if (!result) {\n        error = true;\n      }\n\n      const year = parseInt(str.substr(0, 4));\n      const month = parseInt(str.substr(5, 2));\n      const day = parseInt(str.substr(8, 2));\n\n      if (year < 1900) {\n        error = true;\n      }\n\n      if (month < 1 || month > 12) {\n        error = true;\n      }\n\n      if (day > 31) {\n        error = true;\n      }\n    } catch (err) {\n      error = true;\n    }\n\n    return !error;\n  };\n\n  const validateTime = (str) => {\n    var error = false;\n\n    const result = /^\\d{2}:\\d{2} AM$|^\\d{2}:\\d{2} PM$/.test(str);\n    if (!result) {\n      error = true;\n    }\n\n    try {\n      const hour = parseInt(str.substr(0, 2));\n      const minute = parseInt(str.substr(3, 2));\n\n      if (hour < 0 || hour > 12) {\n        error = true;\n      }\n\n      if (minute < 0 || minute > 59) {\n        error = true;\n      }\n    } catch (err) {\n      error = true;\n    }\n\n    return !error;\n  };\n\n  const validateBooking = (booking) => {\n    var error = false;\n\n    if (!validateDate(booking.bookingDate)) {\n      error = true;\n      setValidationError({ ...validationError, bookingDateError: true });\n    }\n\n    if (!validateTime(booking.bookingTime)) {\n      error = true;\n      setValidationError({ ...validationError, bookingTimeError: true });\n    }\n    return !error;\n  };\n\n  const updateBooking = (payload) => {\n    setSaving(true);\n    bookingService\n      .updateBooking(payload)\n      .then((res) => {\n        setSaving(false);\n        setEditMode({ edit: false, person: null });\n        setRefreshData(!refreshData);\n      })\n      .catch((err) => {\n        setSaving(false);\n        setEditMode({ edit: false, person: null });\n        console.log(err);\n      });\n  };\n\n  const deleteBooking = (id) => {\n    setDeleting(true);\n    bookingService\n      .deleteBooking(id)\n      .then((res) => {\n        setDeleting(false);\n        setDeleteMode({ delete: false, person: null });\n        setRefreshData(!refreshData);\n      })\n      .catch((err) => {\n        setDeleting(false);\n        setDeleteMode({ delete: false, person: null });\n        console.log(err);\n      });\n  };\n\n  const restoreBooking = (id) => {\n    setRestoring(true);\n    bookingService\n      .unDeleteBooking(id)\n      .then((res) => {\n        setRestoring(false);\n        setRestoreMode({ restore: false, person: null });\n        setRefreshData(!refreshData);\n      })\n      .catch((err) => {\n        setRestoring(false);\n        setRestoreMode({ restore: false, person: null });\n        console.log(err);\n      });\n  };\n\n  const handleDeleteModeChanged = (del, person) => {\n    if (del) {\n      setDeleteMode({ delete: del, person: person });\n    } else if (!del && !person) {\n      setDeleteMode({ delete: del, person: person });\n    } else if (!del && person) {\n      deleteBooking(person._id);\n    }\n  };\n\n  const handleRestoreModeChanged = (restore, person) => {\n    if (restore) {\n      setRestoreMode({ restore: restore, person: person });\n    } else if (!restore && !person) {\n      setRestoreMode({ restore: restore, person: person });\n    } else if (!restore && person) {\n      restoreBooking(person._id);\n    }\n  };\n\n  const changeBackToBookingMade = (event, id) => {\n    setSaving(true);\n    BookService.changeBackToBookingMade(id)\n      .then((res) => {\n        setSaving(false);\n        setRefreshData(!refreshData);\n      })\n      .catch((err) => {\n        console.log(err);\n        setSaving(false);\n      });\n  };\n\n  const changeToPatientAttended = (event, id) => {\n    setSaving(true);\n    BookService.changeToPatientAttended(id)\n      .then((res) => {\n        setSaving(false);\n        setRefreshData(!refreshData);\n      })\n      .catch((err) => {\n        console.log(err);\n        setSaving(false);\n      });\n  };\n\n  const Pay = () => {\n    setSelectedBooking(booking);\n    setOpenPayDialog(true);\n  };\n\n  const OpenInvoiceDialog = () => {\n    setSelectedBooking(booking);\n    setInvoice(invoice);\n    setOpenInvoiceDialog(true);\n  };\n\n  useEffect(() => {\n    if (props.booking) {\n      BookService.getBookingById(props.booking._id)\n        .then((res) => {\n          setBooking(res.data);\n        })\n        .catch((err) => {\n          console.log(err);\n        });\n\n      setState((state) => ({\n        ...state,\n        bookingDialogDataChanged: !state.bookingDialogDataChanged\n          ? true\n          : false,\n      }));\n    }\n  }, [refreshData, state.bookingPayChanged]);\n\n  useEffect(() => {\n    if (props.booking) {\n      setBooking(props.booking);\n    }\n  }, [props.booking]);\n\n  const undoPaymentClicked = async () => {\n    setSaving(true);\n    try {\n      await BookService.unPayBooking(booking._id);\n      setSaving(false);\n      setOpenUndoPayDialog(false);\n      setRefreshData(!refreshData);\n    } catch (err) {\n      console.error(err);\n      setSaving(false);\n      setOpenUndoPayDialog(false);\n    }\n  };\n\n  const refundPaymentClicked = async () => {\n    setSaving(true);\n    try {\n      await BookService.refundBooking(booking._id);\n      setSaving(false);\n      updateShouldRefundsCount();\n      setOpenRefundDialog(false);\n      setRefreshData(!refreshData);\n    } catch (err) {\n      console.error(err);\n      setSaving(false);\n      setOpenRefundDialog(false);\n    }\n  };\n\n  const updateShouldRefundsCount = async () => {\n    try {\n      const res = await BookService.getShouldRefundsCount();\n      if (res && res.data && res.data.status === \"OK\") {\n        setState((state) => ({ ...state, shouldRefunsCount: res.data.count }));\n      }\n    } catch (ex) {\n      console.error(ex);\n    }\n  };\n\n  const downloadRegForm = (id) => {\n    PDFService.downloadGPRegForm(id)\n      .then((res) => {\n        const file = new Blob([res.data], { type: \"application/pdf\" });\n\n        const fileURL = URL.createObjectURL(file);\n        window.open(fileURL, \"_blank\");\n      })\n      .catch((err) => {\n        console.log(err);\n      });\n  };\n\n  const downloadInvoice = (id) => {\n    InvoiceService.downloadInvoice(id)\n      .then((res) => {\n        const file = new Blob([res.data], { type: \"application/pdf\" });\n\n        const fileURL = URL.createObjectURL(file);\n        window.open(fileURL, \"_blank\");\n      })\n      .catch((err) => {\n        console.log(err);\n      });\n  };\n\n  const sendRegForm = (id) => {\n    setSaving(true);\n    setEmailSent(false);\n    BookService.sendRegFormEmail(id)\n      .then((res) => {\n        setSaving(false);\n        if (res.data.status === \"OK\") {\n          setEmailSent(true);\n        }\n      })\n      .catch((err) => {\n        console.log(err);\n        setSaving(false);\n      });\n  };\n\n  const sendInvoiceEmail = (id, _email) => {\n    setSaving(true);\n    setEmailSentInvoice(false);\n    InvoiceService.emailInvoice(id, _email)\n      .then((res) => {\n        setSaving(false);\n        if (res.data.status === \"OK\") {\n          setEmailSentInvoice(true);\n        }\n      })\n      .catch((err) => {\n        console.log(err);\n        setSaving(false);\n      });\n  };\n\n  const onClose = () => {\n    setEmailSent(false);\n    setEmailSentInvoice(false);\n    setInvoice(null);\n    props.onClose();\n  };\n\n  const [openQDialg, setOpenQDialog] = React.useState(false)\n  const handleQDialgClose = () =>\n  {\n    setOpenQDialog(false)\n  }\n\n  const fixQuestion = (str) =>\n  {\n    let result = str.replace('*', '')\n    if (!result.trim().endsWith('?'))\n    {\n      result += '?'\n    }\n    return result\n  }\n\n  return (\n    <React.Fragment>\n      {booking && (\n        <React.Fragment>\n          <Dialog\n            maxWidth=\"xs\"\n            open={props.open}\n            TransitionComponent={Transition}\n            keepMounted\n            onClose={onClose}\n            PaperComponent={PaperComponent}\n            aria-labelledby=\"alert-dialog-slide-title\"\n            aria-describedby=\"alert-dialog-slide-description\"\n          >\n            <DialogTitle\n              id=\"alert-dialog-slide-title\"\n              className={classes.dialogTitle}\n              style={{position:\"relative\"}}\n            >\n              {booking.questions && (\n                 <div style={{position:\"absolute\", right:\"10px\", top:\"12px\", backgroundColor:\"#069c00\", fontSize:\"0.85rem\", padding:\"8px\", borderRadius:\"10px\"}}>\n                   Self-Test\n                 </div>\n              )}\n\n\n              <Grid\n                container\n                direction=\"row\"\n                justify=\"center\"\n                spacing={2}\n                alignItems=\"center\"\n              >\n                <Grid item>\n                  <div\n                    style={\n                      booking.deleted\n                        ? {\n                            paddingBottom: \"5px\",\n                            textDecoration: \"line-through\",\n                          }\n                        : {}\n                    }\n                  >\n                    {`${booking.fullname}`}\n                  </div>\n                </Grid>\n\n                {booking.deleted && (\n                  <Grid item>\n                    <Tooltip title=\"This record has been deleted.\">\n                      <DeleteIcon\n                        style={{\n                          padding: 0,\n                          margin: 0,\n                          color: \"#fff\",\n                          fontSize: 25,\n                        }}\n                      />\n                    </Tooltip>\n                  </Grid>\n                )}\n              </Grid>\n            </DialogTitle>\n            <DialogContent>\n              <div\n                style={{\n                  // height: \"550px\",\n                  paddingTop: \"0px\",\n                }}\n              >\n                <Grid item xs={12} md={12} key={`panel0`}>\n                  <div className={classes.infoDetails}>\n                    <ul className={classes.ul}>\n                      <li className={classes.li} style={{ marginTop: \"20px\" }}>\n                        <Grid container spacing={2}>\n                          <Grid item xs={12}>\n                            <span className={classes.infoTitle}>\n                              BOOKED DATE :\n                            </span>\n\n                            <span\n                              hidden={\n                                editMode.edit &&\n                                editMode.person._id === booking._id\n                              }\n                              className={classes.infoData}\n                            >\n                              {FormatDateFromString(booking.bookingDate)}\n                            </span>\n                            <span\n                              hidden={\n                                !(\n                                  editMode.edit &&\n                                  editMode.person._id === booking._id\n                                )\n                              }\n                              className={classes.infoData}\n                            >\n                              <TextField\n                                fullWidth\n                                error={validationError.bookingDateError}\n                                className={classes.TextBox}\n                                value={bookingDate}\n                                onChange={bookingDateChanged}\n                                inputProps={{\n                                  style: {\n                                    padding: 0,\n                                  },\n                                }}\n                              ></TextField>\n                            </span>\n                          </Grid>\n                          <Grid item xs={12}>\n                            <span className={classes.infoTitle}>\n                              BOOKED TIME :\n                            </span>\n                            <span\n                              hidden={\n                                editMode.edit &&\n                                editMode.person._id === booking._id\n                              }\n                              className={classes.infoData}\n                            >\n                              {booking.bookingTime}\n                            </span>\n                            <span\n                              hidden={\n                                !(\n                                  editMode.edit &&\n                                  editMode.person._id === booking._id\n                                )\n                              }\n                              className={classes.infoData}\n                            >\n                              <TextField\n                                fullWidth\n                                error={validationError.bookingTimeError}\n                                className={classes.TextBox}\n                                value={bookingTime}\n                                onChange={bookingTimeChanged}\n                                inputProps={{\n                                  style: {\n                                    padding: 0,\n                                  },\n                                }}\n                              ></TextField>\n                            </span>\n                          </Grid>\n                        </Grid>\n                      </li>\n\n                      <Divider />\n\n                      <li className={classes.li} style={{ marginTop: \"20px\" }}>\n                        <Grid container spacing={2}>\n                          <Grid item xs={12}>\n                            <span className={classes.infoTitle}>\n                              FULLNAME :{\" \"}\n                            </span>\n                            <span\n                              hidden={\n                                editMode.edit &&\n                                editMode.person._id === booking._id\n                              }\n                              className={classes.infoData}\n                            >\n                              {booking.fullname}\n                            </span>\n                            <span\n                              hidden={\n                                !(\n                                  editMode.edit &&\n                                  editMode.person._id === booking._id\n                                )\n                              }\n                              className={classes.infoData}\n                            >\n                              <TextField\n                                fullWidth\n                                className={classes.TextBox}\n                                value={fullname}\n                                onChange={fullnameChanged}\n                                inputProps={{\n                                  style: {\n                                    padding: 0,\n                                  },\n                                }}\n                              ></TextField>\n                            </span>\n                          </Grid>\n                          <Grid item xs={12}>\n                            <span className={classes.infoTitle}>EMAIL : </span>\n                            <span\n                              hidden={\n                                editMode.edit &&\n                                editMode.person._id === booking._id\n                              }\n                              className={classes.infoData}\n                            >\n                              {booking.email}\n                            </span>\n                            <span\n                              hidden={\n                                !(\n                                  editMode.edit &&\n                                  editMode.person._id === booking._id\n                                )\n                              }\n                              className={classes.infoData}\n                            >\n                              <TextField\n                                fullWidth\n                                className={classes.TextBox}\n                                value={email}\n                                onChange={emailChanged}\n                                inputProps={{\n                                  style: {\n                                    padding: 0,\n                                  },\n                                }}\n                              ></TextField>\n                            </span>\n                          </Grid>\n                          <Grid item xs={12}>\n                            <span className={classes.infoTitle}>TEL : </span>\n                            <span\n                              hidden={\n                                editMode.edit &&\n                                editMode.person._id === booking._id\n                              }\n                              className={classes.infoData}\n                            >\n                              {booking.phone?.toUpperCase()}\n                            </span>\n                            <span\n                              hidden={\n                                !(\n                                  editMode.edit &&\n                                  editMode.person._id === booking._id\n                                )\n                              }\n                              className={classes.infoData}\n                            >\n                              <TextField\n                                fullWidth\n                                className={classes.TextBox}\n                                value={tel}\n                                onChange={telChanged}\n                                inputProps={{\n                                  style: {\n                                    padding: 0,\n                                  },\n                                }}\n                              ></TextField>\n                            </span>\n                          </Grid>\n                        </Grid>\n                      </li>\n\n                      <Divider />\n\n                      <li className={classes.li} style={{ marginTop: \"20px\" }}>\n                        <Grid container spacing={2}>\n                          <Grid item xs={12}>\n                            <span className={classes.infoTitle}>\n                              Consultation :{\" \"}\n                            </span>\n                            <span\n                              hidden={\n                                editMode.edit &&\n                                editMode.person._id === booking._id\n                              }\n                              className={classes.infoData}\n                            >\n                              {booking.faceToFaceConsultation && (\n                                <span> Face to Face </span>\n                              )}\n                              {((booking.faceToFaceConsultation &&\n                                booking.telephoneConsultation) ||\n                                (!booking.faceToFaceConsultation &&\n                                  !booking.telephoneConsultation)) && (\n                                <span\n                                  style={{\n                                    paddingLeft: \"5px\",\n                                    paddingRight: \"5px\",\n                                  }}\n                                >\n                                  {\" \"}\n                                  -{\" \"}\n                                </span>\n                              )}\n                              {booking.telephoneConsultation && (\n                                <span> Telephone </span>\n                              )}\n                            </span>\n                            <span\n                              hidden={\n                                !(\n                                  editMode.edit &&\n                                  editMode.person._id === booking._id\n                                )\n                              }\n                              className={classes.infoData}\n                            >\n                              <TextField\n                                fullWidth\n                                className={classes.TextBox}\n                                value={fullname}\n                                onChange={fullnameChanged}\n                                inputProps={{\n                                  style: {\n                                    padding: 0,\n                                  },\n                                }}\n                              ></TextField>\n                            </span>\n                          </Grid>\n                        </Grid>\n                      </li>\n\n                      <Divider />\n\n                      {booking.questions && (\n                        <React.Fragment>\n                          <div style={{display:\"flex\", justifyContent:\"center\"}}>\n                          <Button fullWidth variant=\"contained\" color=\"primary\" style={{color:\"#fff\",margin:\"10px\"}} onClick={() => setOpenQDialog(true)}>\n                             Show questionnaire\n                          </Button>\n                          </div>\n                          <Divider />\n                        </React.Fragment>\n                      )}\n\n                   \n\n                      \n                      <div style={{marginTop:\"20px\"}}>\n\n                      </div>\n\n                      {/* Restore Functionality ******************************************* */}\n                      <li\n                        hidden={\n                          !(\n                            restoreMode.restore &&\n                            restoreMode.person._id === booking._id\n                          )\n                        }\n                      >\n                        <div\n                          style={{\n                            fontWeight: \"500\",\n                            paddingBottom: \"10px\",\n                            paddingLeft: \"5px\",\n                            fontSize: \"16px\",\n                            color: \"#333\",\n                          }}\n                        >\n                          Are you sure you want to restore this record?\n                        </div>\n                      </li>\n\n                      <li\n                        hidden={\n                          !booking.deleted ||\n                          (restoreMode.restore &&\n                            restoreMode.person._id === booking._id)\n                        }\n                      >\n                        <Button\n                          type=\"button\"\n                          fullWidth\n                          variant=\"contained\"\n                          color=\"primary\"\n                          onClick={() => {\n                            handleRestoreModeChanged(true, booking);\n                          }}\n                          className={classes.RestoreButton}\n                        >\n                          Restore This Record\n                        </Button>\n                      </li>\n\n                      <li\n                        hidden={\n                          !(\n                            restoreMode.restore &&\n                            restoreMode.person._id === booking._id\n                          )\n                        }\n                      >\n                        <Button\n                          type=\"button\"\n                          fullWidth\n                          variant=\"contained\"\n                          color=\"primary\"\n                          disabled={restoring}\n                          onClick={() => {\n                            handleRestoreModeChanged(false, booking);\n                          }}\n                          className={classes.SaveButton}\n                        >\n                          YES, Restore this!\n                        </Button>\n                      </li>\n\n                      <li\n                        hidden={\n                          !(\n                            restoreMode.restore &&\n                            restoreMode.person._id === booking._id\n                          )\n                        }\n                      >\n                        <Button\n                          type=\"button\"\n                          fullWidth\n                          variant=\"contained\"\n                          color=\"default\"\n                          disabled={restoring}\n                          onClick={() => {\n                            handleRestoreModeChanged(false, null);\n                          }}\n                          className={classes.CancelButton}\n                        >\n                          Cancel\n                        </Button>\n                      </li>\n\n                      {/*  ******************************************************************* */}\n\n                      {/* Delete Functionality ******************************************* */}\n\n                      <li\n                        hidden={\n                          !(\n                            deleteMode.delete &&\n                            deleteMode.person._id === booking._id\n                          )\n                        }\n                      >\n                        <div\n                          style={{\n                            fontWeight: \"600\",\n                            paddingBottom: \"10px\",\n                            paddingLeft: \"5px\",\n                            fontSize: \"16px\",\n                          }}\n                        >\n                          Are you sure you want to archive this record?\n                        </div>\n                      </li>\n\n                      <li\n                        hidden={\n                          props.deleteButtonDisabled ||\n                          booking.deleted ||\n                          editMode.edit ||\n                          (deleteMode.delete &&\n                            deleteMode.person._id === booking._id)\n                        }\n                      >\n                        {booking.OTCCharges > 0 && (\n                          <Tooltip title={\"Paid Records Cannot be Deleted!\"}>\n                            <div>\n                              <Button\n                                disabled={booking.OTCCharges > 0}\n                                type=\"button\"\n                                fullWidth\n                                variant=\"contained\"\n                                color=\"primary\"\n                                onClick={() => {\n                                  handleDeleteModeChanged(true, booking);\n                                }}\n                                className={classes.DeleteButton}\n                              >\n                                Archive This Record\n                              </Button>\n                            </div>\n                          </Tooltip>\n                        )}\n                        {\n                          <Button\n                            disabled={booking.OTCCharges > 0}\n                            type=\"button\"\n                            fullWidth\n                            variant=\"contained\"\n                            color=\"primary\"\n                            onClick={() => {\n                              handleDeleteModeChanged(true, booking);\n                            }}\n                            className={classes.DeleteButton}\n                          >\n                            Archive This Record\n                          </Button>\n                        }\n                      </li>\n\n                      <li\n                        hidden={\n                          !(\n                            deleteMode.delete &&\n                            deleteMode.person._id === booking._id\n                          )\n                        }\n                      >\n                        <Button\n                          type=\"button\"\n                          fullWidth\n                          variant=\"contained\"\n                          color=\"primary\"\n                          disabled={deleting}\n                          onClick={() => {\n                            handleDeleteModeChanged(false, booking);\n                          }}\n                          className={classes.SaveButton}\n                        >\n                          YES, Archive this!\n                        </Button>\n                      </li>\n\n                      <li\n                        hidden={\n                          !(\n                            deleteMode.delete &&\n                            deleteMode.person._id === booking._id\n                          )\n                        }\n                      >\n                        <Button\n                          type=\"button\"\n                          fullWidth\n                          variant=\"contained\"\n                          color=\"default\"\n                          disabled={deleting}\n                          onClick={() => {\n                            handleDeleteModeChanged(false, null);\n                          }}\n                          className={classes.CancelButton}\n                        >\n                          Cancel\n                        </Button>\n                      </li>\n\n                      {/* ****************************************************************************************** */}\n                    </ul>\n                  </div>\n                </Grid>\n              </div>\n              <Backdrop\n                className={classes.backdrop}\n                open={saving || deleting || restoring}\n              >\n                <CircularProgress color=\"inherit\" />\n              </Backdrop>\n            </DialogContent>\n          </Dialog>\n\n          <Dialog\n            open={openQDialg}\n            onClose={handleQDialgClose}\n            maxWidth=\"sm\"\n          >\n            <DialogContent>\n                      {booking.questions && JSON.parse(booking.questions).map(item => (\n                        <div >\n                          <div className={classes.question}>\n                            {fixQuestion(item.question)}\n                          </div>\n                          <div className={classes.answer}>\n                            {item.answer}\n                          </div>\n                        </div>\n                      ))}\n            </DialogContent>\n\n            <DialogActions>\n              <Button onClick={() => setOpenQDialog(false)}>\n                Close\n              </Button>\n            </DialogActions>\n\n          </Dialog>\n\n        </React.Fragment>\n      )}\n    </React.Fragment>\n  );\n}\n","import React, {useEffect, useRef, useState} from 'react';\nimport { DataGrid } from '@material-ui/data-grid';\nimport BookService from './services/BookService';\nimport { Button, Checkbox, CircularProgress, Dialog, DialogContent, DialogTitle, Divider, FormControl, FormControlLabel, Grid, Icon, InputLabel, LinearProgress, Link, makeStyles, MenuItem, Paper, Select, SvgIcon, Switch, TextField, Tooltip } from '@material-ui/core';\nimport RefreshIcon from '@material-ui/icons/Refresh';\nimport { IconButton } from '@material-ui/core';\nimport CheckIcon from '@material-ui/icons/Check';\nimport CloseIcon from '@material-ui/icons/Close';\nimport GlobalState from '../GlobalState';\nimport { getMenuIndex } from '../MenuList';\nimport {FormatDateFromString, FormatDateFromStringShortYear} from './DateFormatter';\n\nimport SearchIcon from '@material-ui/icons/Search';\nimport BookingDialog from './BookingDialog';\n\nimport NewReleasesIcon from '@material-ui/icons/NewReleases';\nimport HistoryIcon from '@material-ui/icons/History';\nimport TimelineIcon from '@material-ui/icons/Timeline';\nimport DescriptionIcon from '@material-ui/icons/Description';\nimport AutorenewIcon from '@material-ui/icons/Autorenew';\nimport LiveTvIcon from '@material-ui/icons/LiveTv';\nimport PlaylistAddCheckIcon from '@material-ui/icons/PlaylistAddCheck';\nimport AddCircleOutlineIcon from '@material-ui/icons/AddCircleOutline';\nimport DeleteIcon from '@material-ui/icons/Delete';\nimport HourglassEmptyIcon from '@material-ui/icons/HourglassEmpty';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faFileExcel } from \"@fortawesome/free-solid-svg-icons\";\nimport Draggable from 'react-draggable';\n\nimport * as dateformat from 'dateformat';\n\nimport DateFnsUtils from '@date-io/date-fns';\nimport {\n  MuiPickersUtilsProvider,\n  KeyboardTimePicker,\n  KeyboardDatePicker,\n} from '@material-ui/pickers';\n\nimport BusinessIcon from '@material-ui/icons/Business';\nimport CreditCardIcon from '@material-ui/icons/CreditCard';\nimport LocalAtmIcon from '@material-ui/icons/LocalAtm';\n\n\nimport ReactHTMLTableToExcel from 'react-html-table-to-excel';\nimport PriceCalculator from './PriceCalculator';\nimport { corporates } from './Corporates';\n\nconst useStyles = makeStyles((theme) => ({\n  title: {\n    marginTop: theme.spacing(0),\n    marginBottom: theme.spacing(1),\n\n  },\n  \n  refreshButton:{\n    marginLeft: theme.spacing(2),\n  },\n\n  checkIcon:{\n    color: \"green\"\n  },\n\n  closeIcon:{\n    color: \"red\"\n  },\n\n  RefLink: {\n    cursor: \"pointer\"\n  },\n\n  BookedLabel:{\n    backgroundColor: \"#606060\",\n    color: \"#fff\",\n    width: \"70px\",\n    textAlign: \"center\",\n  },\n\n  PatientAttendedLabel:{\n    backgroundColor: \"#0066aa\",\n    color: \"#fff\",\n    width: \"70px\",\n    textAlign: \"center\",\n  },\n\n  SampleTakenLabel:{\n    backgroundColor: \"#0066cc\",\n    color: \"#fff\",\n    width: \"70px\",\n    textAlign: \"center\",\n  },\n\n  ReportSentLabel:{\n    backgroundColor: \"#009900\",\n    color: \"#fff\",\n    width: \"70px\",\n    textAlign: \"center\",\n  },\n\n  ReportCertSentLabel:{\n    backgroundColor: \"#009900\",\n    color: \"#fff\",\n    width: \"70px\",\n    textAlign: \"center\",\n  },\n\n  PositiveLabel:{\n    backgroundColor: \"red\",\n    color: \"#fff\",\n    width: \"70px\",\n    textAlign: \"center\",\n  },\n\n  HideNowRows: {\n    position: \"absolute\",\n    top: \"40%\",\n    left: \"40%\",\n    width: \"600px\",\n    height: \"300px\",\n    backgroundColor : \"#fafafa\",\n    color : \"#111\",\n    zIndex: \"1000\",\n    display: \"flex\",\n    alignItems: \"center\",\n    justifyItems: \"center\"\n  },\n\n  ExportToExcelButton:\n  {\n    // marginBottom : \"20px\",\n    color : \"#2f942e\",\n    borderColor: \"#2f942e\",\n    \"&:hover\": {\n      background: \"#fafffa\",\n      borderColor: \"#2f942e\",\n    },\n    textDecoration : \"none !important\", \n   \n  },\n\n  ExportToExcelButtonInline:\n  {\n    // marginBottom : \"20px\",\n    color : \"#2f942e\",\n    borderColor: \"#2f942e\",\n    \"&:hover\": {\n      background: \"#fafffa\",\n      borderColor: \"#2f942e\",\n    },\n    textDecoration : \"none !important\", \n    cursor: \"pointer\",\n    padding: \"10px\"\n   \n  },\n\n  table: {\n    width: \"100%\",\n    border: \"1px solid #ddd\",\n    borderCollapse: \"collapse\",\n},\n\nth: {\n    border: \"1px solid #ddd\",\n    borderCollapse: \"collapse\",\n    verticalAlign: \"middle\",\n    fontcolor: \"#555\",\n    fontWeight: \"400\",\n    fontSize: \"15px\",\n    paddingTop: \"5px\",\n    paddingBottom: \"5px\",\n    width: \"14%\",\n    paddingLeft: \"5px\",\n},\n\ntd: {\n    border: \"1px solid #ddd\",\n    borderCollapse: \"collapse\",\n    verticalAlign: \"middle\",\n    paddingLeft: \"5px\",\n},\n\ntopSelect: {\n  margin: theme.spacing(1),\n  minWidth: 80,\n},\n\nnotifyIcon:{\n  width: \"16px\",\n  height: \"16px\",\n  borderRadius: \"50%\",\n  backgroundColor : \"rgb(220, 0, 78)\",\n  marginLeft: \"10px\"\n}\n\n}));\n\nconst getTableTitle = (str) =>{\n\n  if (str === 'today')\n  {\n    return `Today's Bookings`;\n  }else if (str === 'old')\n  {\n    return `Old Bookings`;\n  }else if (str === 'future')\n  {\n    return `Future Bookings`;\n  }else if (str === 'recent')\n  {\n    return `Recent Bookings`;\n  }else if (str === 'live')\n  {\n    return `Live Bookings`;\n  }else if (str === 'completed')\n  {\n    return `Completed Bookings`;\n  }else if (str === 'positive')\n  {\n    return `Positive Results`;\n  }else if (str === 'deleted')\n  {\n    return `Archived Records`;\n  }else if (str === 'late')\n  {\n    return `40 Hours Late`;\n  }\n  \n  else\n  {\n    return `All Bookings`;\n  }\n\n}\n\nconst getTableIcon = (str) =>{\n\n  if (str === 'today')\n  {\n    return <NewReleasesIcon style={{fontSize:\"2.2rem\"}} />;\n  }else if (str === 'old')\n  {\n    return <HistoryIcon style={{fontSize:\"2.2rem\"}} />;\n  }else if (str === 'future')\n  {\n    return <TimelineIcon style={{fontSize:\"2.2rem\"}} />;\n  }else if (str === 'recent')\n  {\n    return <AutorenewIcon style={{fontSize:\"2.2rem\"}} />;\n  }else if (str === 'live')\n  {\n    return <LiveTvIcon style={{fontSize:\"2.2rem\"}} />;\n  }else if (str === 'completed')\n  {\n    return  <PlaylistAddCheckIcon style={{fontSize:\"2.2rem\"}} />;\n  }else if (str === 'positive')\n  {\n    return <AddCircleOutlineIcon style={{fontSize:\"2.2rem\"}} />\n  }else if (str === 'deleted')\n  {\n    return <DeleteIcon style={{fontSize:\"2.2rem\"}} />;\n  }else if (str === 'late')\n  {\n    return <HourglassEmptyIcon style={{fontSize:\"2.2rem\"}} />;\n  }\n  \n  else\n  {\n    return <DescriptionIcon style={{fontSize:\"2.2rem\"}} />;\n  }\n\n}\n\nfunction PaperComponent(props) {\n  return (\n    <Draggable handle=\"#draggable-dialog-title\" cancel={'[class*=\"MuiDialogContent-root\"]'}>\n      <Paper {...props} />\n    </Draggable>\n  );\n}\n\nexport default function BookingTable(props) {\n  \n  const classes = useStyles();\n\n  const [topCount, setTopCount] = React.useState(25)\n  const topCountChanged = (event) =>\n  {\n    setTopCount(event.target.value)\n    loadData(event.target.value)\n  }\n  \n\n  const [openDialogExcel, setOpenDialogExcel] = useState(false);\n  const handleCloseDialogExcel = () =>\n  {\n    setCorporate(corporates[0]);\n    setJustCorporate(false);\n    setOpenDialogExcel(false);\n  }\n\n\n  const [fromDate, setFromDate] = React.useState(new Date(new Date().getTime() - 7 * 24 * 60 * 60 * 1000 ));\n  const handleFromDateChange = (date) => {\n    setFromDate(date);\n    setFromDateStr(dateformat(date,'yyyy-mm-dd'));\n  };\n\n  const [untilDate, setUntilDate] = React.useState(new Date(new Date().getTime() - 1 * 24 * 60 * 60 * 1000 ));\n  const handleUntilDateChange = (date) => {\n    setUntilDate(date);\n    seUntilDateStr(dateformat(date,'yyyy-mm-dd'));\n  };\n\n  const [fromDateStr, setFromDateStr] = useState(dateformat(new Date(new Date().getTime() - 7 * 24 * 60 * 60 * 1000 ), 'yyyy-mm-dd'));\n  const [untilDateStr, seUntilDateStr] = useState(dateformat(new Date(new Date().getTime() - 1 * 24 * 60 * 60 * 1000 ), 'yyyy-mm-dd'));\n\n  const [justCorporate, setJustCorporate] = useState(false);\n\n  const[chkDate, setChkDate] = useState(true);\n  const[chkForename, setChkForename] = useState(true);\n  const[chkSurname, setChkSurname] = useState(true);\n  const[chkDOB, setChkDOB] = useState(true);\n  const[chkEmail, setChkEmail] = useState(true);\n  const[chkTel, setChkTel] = useState(true);\n  const[chkCertificate, setChkCertidicate] = useState(true);\n  const[chkAntiBodyTest, setChkAntiBodyTest] = useState(true);\n  const[chkextRef, setChkExtRef] = useState(true);\n  const[chkPrice, setChkPrice] = useState(true);\n\n  const justCorporateChanged = (event) =>\n  {\n    setJustCorporate(event.target.checked);\n  }\n  \n\n  const chkDateChanged = (event) =>\n  {\n    setChkDate(event.target.checked);\n  }\n\n  const chkForenameChanged = (event) =>\n  {\n    setChkForename(event.target.checked);\n  }\n\n  const chkSurnameChanged = (event) =>\n  {\n    setChkSurname(event.target.checked);\n  }\n\n  const chkDOBChanged = (event) =>\n  {\n    setChkDOB(event.target.checked);\n  }\n\n  const chkEmailChanged = (event) =>\n  {\n    setChkEmail(event.target.checked);\n  }\n\n  const chkTelChanged = (event) =>\n  {\n    setChkTel(event.target.checked);\n  }\n\n  const chkCertificateChanged = (event) =>\n  {\n    setChkCertidicate(event.target.checked);\n  }\n\n  const chkAntiBodyTestChanged = (event) =>\n  {\n    setChkAntiBodyTest(event.target.checked);\n  }\n\n  const chkextRefChanged = (event) =>\n  {\n    setChkExtRef(event.target.checked);\n  }\n\n  const chkPriceChanged = (event) =>\n  {\n    setChkPrice(event.target.checked);\n  }\n\n\n\n  var columns = [];\n\n  if (props.date === 'recent')\n  {\n    columns = [\n      // { field: 'id', headerName: '#', width: 70 },\n\n      {\n        field: \"_id\",\n        headerName: \" \",\n        width: 120,\n        renderCell: (params) => {\n          return (\n            <React.Fragment>\n              <IconButton\n                color=\"primary\"\n                onClick={(event) => openDetailsDialog(event, params.value)}\n              >\n                <SearchIcon />\n              </IconButton>\n\n              <span\n                style={{\n                  color: \"#058700\",\n                  fontWeight: \"500\",\n                  fontSize: \"0.8rem\",\n                }}\n              >\n                {params.getValue(\"questions\") && \"Self-Test\"}\n              </span>\n            </React.Fragment>\n          );\n        },\n      },\n\n      {\n        field: \"timeStamp\",\n        headerName: \"TimeStamp\",\n        width: 200,\n        valueFormatter: (params) => {\n          return formatTimeStamp(params.value);\n        },\n      },\n\n      {\n        field: \"bookingDate\",\n        headerName: \"B Date\",\n        width: 110,\n        valueFormatter: (params) => {\n          return FormatDateFromString(params.value);\n        },\n      },\n      {\n        field: \"bookingTimeNormalized\",\n        headerName: \"B Time\",\n        width: 200,\n        valueGetter: (params) => {\n          return params.getValue(\"bookingTime\");\n        },\n      },\n      { field: \"fullname\", headerName: \"Fullname\", width: 250 },\n      { field: \"email\", headerName: \"Email\", width: 200 },\n      { field: \"phone\", headerName: \"Telephone\", width: 150 },\n      {\n        field: \"faceToFaceConsultation\",\n        headerName: \"Consultation\",\n        width: 250,\n        renderCell: (params) => {\n          return (\n            <React.Fragment>\n              {params.getValue(\"faceToFaceConsultation\") && (\n                <span> Face to Face </span>\n              )}\n              {params.getValue(\"faceToFaceConsultation\") && (\n                <span style={{ paddingLeft: \"5px\", paddingRight: \"5px\" }}>\n                  {\" \"}\n                  -{\" \"}\n                </span>\n              )}\n              {params.getValue(\"telephoneConsultation\") && (\n                <span> Telephone </span>\n              )}\n            </React.Fragment>\n          );\n        },\n      },\n    ];\n\n  }\n  else\n  {\n    columns = [\n      // { field: 'id', headerName: '#', width: 70 },\n  \n      {\n        field: \"_id\",\n        headerName: \" \",\n        width: 120,\n        renderCell: (params) => {\n          return (\n            <React.Fragment>\n              <IconButton\n                color=\"primary\"\n                onClick={(event) => openDetailsDialog(event, params.value)}\n              >\n                <SearchIcon />\n              </IconButton>\n\n              <span\n                style={{\n                  color: \"#058700\",\n                  fontWeight: \"500\",\n                  fontSize: \"0.8rem\",\n                }}\n              >\n                {params.getValue(\"questions\") && \"Self-Test\"}\n              </span>\n            </React.Fragment>\n          );\n        },\n      },\n\n\n\n\n  \n      { field: 'bookingDate', headerName: 'B Date', width: 110, valueFormatter: (params) => { \n              return FormatDateFromString(params.value);\n          }\n       },\n      { field: 'bookingTimeNormalized', headerName: 'B Time', width: 200 , valueGetter: (params) => {\n        return params.getValue('bookingTime');\n      }},\n      { field: 'fullname', headerName: 'Fullname', width: 250 },\n      { field: 'email', headerName: 'Email', width: 200 },\n      { field: 'phone', headerName: 'Telephone', width: 150 },\n      { field: 'faceToFaceConsultation', headerName: 'Consultation', width: 250 , renderCell: (params) => {\n        return (\n          <React.Fragment>\n              {params.getValue('faceToFaceConsultation') && <span> Face to Face </span>}\n              {params.getValue('faceToFaceConsultation') && <span style={{paddingLeft:\"5px\", paddingRight:\"5px\"}}> - </span>}\n              {params.getValue('telephoneConsultation') && <span> Telephone </span>}\n          </React.Fragment>\n        )\n      }},\n    \n    ];\n  \n\n  }\n\n\n\n  const [state, setState] = React.useContext(GlobalState);  \n\n  const [data, setData] = React.useState({bookings: [] , cachedBookings: [], isFetching : true});\n\n  const [selectedRow, setSelectedRow] = React.useState(null);\n\n  const [selectedBooking, setSelectedBooking] = React.useState(null);\n  const [seeDetailsDialogOpen, setSeeDetailsDialogOpen] = React.useState(false);\n\n  const [corporate, setCorporate] = useState(corporates[0]);\n  const corporateChanged = (event) =>\n  {\n    setCorporate(event.target.value);\n  }\n  \n\n  const [filter,setFilter] = React.useState('');\n\n\n  const lastPromise = useRef();\n\n  const formatTimeStamp = (timeStamp) =>\n  {\n    const todayStr = dateformat(new Date(), 'yyyy-mm-dd');\n    const timeStampStr = dateformat(timeStamp, 'yyyy-mm-dd');\n    if (todayStr === timeStampStr)\n    {\n      return dateformat(timeStamp, \"'Today', h:MM:ss TT\");\n    }\n    else\n    {\n       return dateformat(timeStamp, \"mmm dS, h:MM:ss TT\");\n    }\n  }\n\n  const loadData = (top) =>\n  {\n    var api = BookService.getAllBookings;\n    if (props.date === 'today')\n    {\n      api = BookService.getTodayBookings;\n    }else if (props.date === 'old')\n    {\n      api = BookService.getOldBookings;\n    }else if (props.date === 'future')\n    {\n      api = BookService.getFutureBookings;\n    }else if (props.date === 'recent')\n    {\n      api = BookService.getRecentBookingsAll;\n    }\n    else if (props.date === 'deleted')\n    {\n      api = BookService.getDeletedBookings;\n    }\n     \n    setData({bookings: [], cachedBookings: [], isFetching: true});\n   \n    // console.log(props)\n\n    const currentPromise = api(top).then( (res) =>{\n      // console.log(res)\n      for (var i=0; i < res.data.length; i++)\n      {\n        res.data[i] = {...res.data[i], id : i + 1}\n      }  \n      setData({bookings: [...res.data], cachedBookings: [...res.data], isFetching: false});\n      // return res.data;\n    }).catch(err => {\n      console.error(err)\n    })\n\n    // lastPromise.current = currentPromise;\n\n    // currentPromise.then(\n    //   result => {\n    //     if (currentPromise === lastPromise.current) {\n    //       setData({bookings: [...result], cachedBookings: [...result], isFetching: false});\n    //       setPage(1);\n    //     }\n    //   },\n    //   e => {\n    //     if (currentPromise === lastPromise.current) {\n    //         console.error(e);\n    //         setData({bookings: data.bookings, cachedBookings: data.cachedBookings, isFetching: false});\n    //     }\n    //   });\n\n  }\n\n  useEffect( () => {\n            setTopCount(25)\n            loadData(25)\n        },\n        [props.date]);\n\n\n\n\n  useEffect( () => {\n\n        if (filter && filter.trim().length > 0)\n        {\n          var filteredData = data.cachedBookings.filter( (element) => \n\n             (element.fullname?.toLowerCase().indexOf(filter.toLowerCase()) >= 0)\n              \n          );\n  \n  \n          setData({bookings: [...filteredData], cachedBookings: data.cachedBookings, isFetching: false});\n        }else\n        {\n          setData({bookings: [...data.cachedBookings], cachedBookings: data.cachedBookings, isFetching: false});\n        }\n      },\n      [filter]);\n\n  \n      useEffect(() => {\n\n       loadData(topCount)\n    \n      }, [state.bookingDialogDataChanged]);    \n\n\n  const handleCloseSeeDetaisDialog = () =>\n  {\n    setSelectedBooking(null);\n    setSeeDetailsDialogOpen(false);\n  }    \n  \n  const openDetailsDialog = (event, id) =>\n  {\n    const booking = data.bookings.find(element => element._id === id);\n    setSelectedBooking(booking);\n    setSeeDetailsDialogOpen(true);\n\n  }\n\n  const refreshClicked = (event) =>{\n    setFilter('');\n    loadData(topCount)\n  }\n\n  const filterChanged = (event) =>{\n    setFilter(event.target.value);\n  }\n\n  const handleSelectionChanged = (newSelection) =>\n  {\n    if (newSelection.length > 0){\n      setSelectedRow(newSelection.rows[0]);\n    }\n    \n  }\n\n  const [page, setPage] = React.useState(1);\n\n  const handleExcelButtonClicked = (event) =>\n  {\n    setOpenDialogExcel(true);\n  }\n\n  const isTopSelectHidden = (date)=>\n  {\n    return date === 'live' || date === 'positive' || date === 'late' || date === 'today'\n  }\n\n\n  return (\n    <React.Fragment>\n      {data.isFetching && (\n        <div style={{ width: \"100%\", paddingTop: \"3px\" }}>\n          <LinearProgress color=\"primary\" />\n        </div>\n      )}\n      <Grid\n        container\n        direction=\"row\"\n        justify=\"space-between\"\n        alignItems=\"flex-end\"\n      >\n        <Grid item md={4}>\n          <div style={{ textAlign: \"left\", paddingLeft: \"10px\" }}>\n            <Grid\n              container\n              direction=\"row\"\n              justify=\"flex-start\"\n              alignItems=\"center\"\n            >\n              <Grid item>\n                <span style={{ paddingRight: \"15px\", color: \"#555\" }}>\n                  {\" \"}\n                  {getTableIcon(props.date)}{\" \"}\n                </span>\n              </Grid>\n              <Grid item>\n                <span\n                  style={{\n                    fontSize: \"1.4rem\",\n                    fontWeight: \"600\",\n                    color: \"#444\",\n                  }}\n                >\n                  {\" \"}\n                  {getTableTitle(props.date)}{\" \"}\n                </span>\n              </Grid>\n              <Grid item>\n                <Tooltip title=\"Refresh\" placement=\"right\">\n                  <IconButton\n                    color=\"primary\"\n                    className={classes.refreshButton}\n                    onClick={refreshClicked}\n                  >\n                    <RefreshIcon />\n                  </IconButton>\n                </Tooltip>\n              </Grid>\n            </Grid>\n          </div>\n        </Grid>\n\n        <Grid item md={3}>\n          {props.date === \"completed\" && state.showCreateExcel && (\n            <div style={{ paddingBottom: \"5px\" }}>\n              <Button\n                className={classes.ExportToExcelButton}\n                variant=\"outlined\"\n                color=\"default\"\n                onClick={handleExcelButtonClicked}\n                startIcon={\n                  <FontAwesomeIcon\n                    style={{ color: \"#009900\" }}\n                    icon={faFileExcel}\n                  />\n                }\n              >\n                export to excel\n              </Button>\n            </div>\n          )}\n        </Grid>\n\n        {data.isFetching && <div className={classes.HideNowRows}></div>}\n\n        <Grid item md={3}>\n          <TextField\n            variant=\"standard\"\n            value={filter}\n            onChange={filterChanged}\n            margin=\"normal\"\n            size=\"small\"\n            id=\"filter\"\n            label=\"Filter\"\n            name=\"filter\"\n            autoComplete=\"off\"\n          />\n        </Grid>\n\n        <Grid item hidden={isTopSelectHidden(props.date)}>\n          <FormControl className={classes.topSelect}>\n            <InputLabel id=\"top-select-label\">Limit</InputLabel>\n            <Select\n              labelId=\"top-select-label\"\n              id=\"top-simple-select\"\n              value={topCount}\n              onChange={topCountChanged}\n            >\n              <MenuItem value={25}>25</MenuItem>\n              <MenuItem value={50}>50</MenuItem>\n              <MenuItem value={100}>100</MenuItem>\n              <MenuItem value={500}>500</MenuItem>\n              <MenuItem value={1000}>1000</MenuItem>\n              <MenuItem value={10000}>ALL</MenuItem>\n            </Select>\n          </FormControl>\n\n          {/* <Button onClick={() => loadData(true)}> Show all records </Button> */}\n        </Grid>\n      </Grid>\n\n      <div style={{ height: 700, width: \"100%\" }}>\n        <DataGrid\n          rows={data.bookings}\n          columns={columns}\n          autoPageSize\n          page={page}\n          onPageChange={(params) => {\n            setPage(params.page);\n          }}\n          onSelectionChange={handleSelectionChanged}\n        />\n      </div>\n\n\n      <BookingDialog\n        booking={selectedBooking}\n        open={seeDetailsDialogOpen && selectedBooking && selectedBooking.fullname}\n        onClose={handleCloseSeeDetaisDialog}\n      />\n\n      {data.bookings && data.bookings.length > 0 && (\n        <Dialog\n          maxWidth=\"lg\"\n          open={openDialogExcel}\n          onClose={handleCloseDialogExcel}\n          PaperComponent={PaperComponent}\n          aria-labelledby=\"form-dialog-title\"\n        >\n          <DialogTitle id=\"draggable-dialog-title\">\n            <Grid\n              container\n              spacing={2}\n              direction=\"row\"\n              justify=\"center\"\n              alignItems=\"center\"\n            >\n              <Grid item>\n                <FontAwesomeIcon\n                  style={{ color: \"#2f942e\", fontSize: \"2rem\" }}\n                  icon={faFileExcel}\n                />\n              </Grid>\n\n              <Grid item>\n                <div\n                  style={{\n                    color: \"#2f942e\",\n                    paddingBottom: \"5px\",\n                    fontWeight: \"800\",\n                  }}\n                >\n                  {\" \"}\n                  Export to EXCEL{\" \"}\n                </div>\n              </Grid>\n            </Grid>\n\n            <Divider />\n          </DialogTitle>\n          <DialogContent>\n            <div\n              style={{\n                minHeight: \"600px\",\n                maxHeight: \"600px\",\n                minWidth: \"1200px\",\n                maxWidth: \"1200px\",\n              }}\n            >\n              <div>\n                <Grid row container justify=\"center\" spacing={3}>\n                  <Grid item>\n                    <FormControlLabel\n                      control={\n                        <Switch\n                          checked={justCorporate}\n                          onChange={justCorporateChanged}\n                          name=\"justCorporate\"\n                        />\n                      }\n                      label=\"Just Corporate Records\"\n                    />\n                  </Grid>\n\n                  {justCorporate && (\n                    <Grid item>\n                      <FormControl\n                        style={{ marginTop: \"0px\" }}\n                        className={classes.formControl}\n                      >\n                        <Select\n                          labelId=\"select-corporate\"\n                          id=\"select-corporate-id\"\n                          value={corporate}\n                          onChange={corporateChanged}\n                        >\n                          {corporates.map((element) => (\n                            <MenuItem value={element}>{`${element}`}</MenuItem>\n                          ))}\n                        </Select>\n                      </FormControl>\n                    </Grid>\n                  )}\n                </Grid>\n\n                <MuiPickersUtilsProvider utils={DateFnsUtils}>\n                  <Grid row container justify=\"center\" spacing={3}>\n                    <Grid item>\n                      <KeyboardDatePicker\n                        disableToolbar\n                        variant=\"inline\"\n                        format=\"dd/MM/yyyy\"\n                        margin=\"normal\"\n                        id=\"date-picker-from\"\n                        label=\"From\"\n                        value={fromDate}\n                        onChange={handleFromDateChange}\n                        KeyboardButtonProps={{\n                          \"aria-label\": \"change date\",\n                        }}\n                      />\n                    </Grid>\n\n                    <Grid item>\n                      <KeyboardDatePicker\n                        disableToolbar\n                        variant=\"inline\"\n                        format=\"dd/MM/yyyy\"\n                        margin=\"normal\"\n                        id=\"date-picker-until\"\n                        label=\"Until\"\n                        value={untilDate}\n                        onChange={handleUntilDateChange}\n                        KeyboardButtonProps={{\n                          \"aria-label\": \"change date\",\n                        }}\n                      />\n                    </Grid>\n\n                    <Grid item>\n                      <div style={{ paddingTop: \"30px\", marginLeft: \"20px\" }}>\n                        <ReactHTMLTableToExcel\n                          id=\"test-table-xls-button\"\n                          className={classes.ExportToExcelButtonInline}\n                          table=\"table-to-xls\"\n                          filename={`PCR.Report.${fromDateStr}.${untilDateStr}`}\n                          sheet=\"PCR-Report\"\n                          buttonText=\"Download as XLS\"\n                        />\n                      </div>\n                    </Grid>\n                  </Grid>\n                </MuiPickersUtilsProvider>\n              </div>\n\n              <div>\n                <Grid container spacing={3}>\n                  <Grid item xs>\n                    <FormControlLabel\n                      control={\n                        <Checkbox\n                          checked={chkDate}\n                          onChange={chkDateChanged}\n                          name=\"chkDate\"\n                        />\n                      }\n                      label=\"Date\"\n                    />\n                  </Grid>\n                  <Grid item xs>\n                    <FormControlLabel\n                      control={\n                        <Checkbox\n                          checked={chkForename}\n                          onChange={chkForenameChanged}\n                          name=\"chkForename\"\n                        />\n                      }\n                      label=\"Forename\"\n                    />\n                  </Grid>\n                  <Grid item xs>\n                    <FormControlLabel\n                      control={\n                        <Checkbox\n                          checked={chkSurname}\n                          onChange={chkSurnameChanged}\n                          name=\"chkSurname\"\n                        />\n                      }\n                      label=\"Surname\"\n                    />\n                  </Grid>\n                  <Grid item xs>\n                    <FormControlLabel\n                      control={\n                        <Checkbox\n                          checked={chkDOB}\n                          onChange={chkDOBChanged}\n                          name=\"chkDOB\"\n                        />\n                      }\n                      label=\"D.O.B\"\n                    />\n                  </Grid>\n                  <Grid item xs>\n                    <FormControlLabel\n                      control={\n                        <Checkbox\n                          checked={chkEmail}\n                          onChange={chkEmailChanged}\n                          name=\"chkEmail\"\n                        />\n                      }\n                      label=\"Email\"\n                    />\n                  </Grid>\n                  <Grid item xs>\n                    <FormControlLabel\n                      control={\n                        <Checkbox\n                          checked={chkTel}\n                          onChange={chkTelChanged}\n                          name=\"chkTel\"\n                        />\n                      }\n                      label=\"Tel\"\n                    />\n                  </Grid>\n                  <Grid item xs>\n                    <FormControlLabel\n                      control={\n                        <Checkbox\n                          checked={chkCertificate}\n                          onChange={chkCertificateChanged}\n                          name=\"chkCertificate\"\n                        />\n                      }\n                      label=\"Certificate\"\n                    />\n                  </Grid>\n                  <Grid item xs>\n                    <FormControlLabel\n                      control={\n                        <Checkbox\n                          checked={chkAntiBodyTest}\n                          onChange={chkAntiBodyTestChanged}\n                          name=\"chkAntiBodyTest\"\n                        />\n                      }\n                      label=\"AntiBodyTest\"\n                    />\n                  </Grid>\n                  <Grid item xs>\n                    <FormControlLabel\n                      control={\n                        <Checkbox\n                          checked={chkextRef}\n                          onChange={chkextRefChanged}\n                          name=\"chkextRef\"\n                        />\n                      }\n                      label=\"Lab No.\"\n                    />\n                  </Grid>\n                  <Grid item xs>\n                    <FormControlLabel\n                      control={\n                        <Checkbox\n                          checked={chkPrice}\n                          onChange={chkPriceChanged}\n                          name=\"chkPrice\"\n                        />\n                      }\n                      label=\"Price\"\n                    />\n                  </Grid>\n                </Grid>\n              </div>\n\n              <div style={{ width: \"100%\", paddingTop: \"20px\" }}>\n                <table className={classes.table} id=\"table-to-xls\">\n                  <tr>\n                    {chkDate && <th className={classes.th}>Date</th>}\n                    {chkForename && <th className={classes.th}>Forename</th>}\n                    {chkSurname && <th className={classes.th}>Surename</th>}\n                    {chkDOB && <th className={classes.th}>D.O.B</th>}\n                    {chkEmail && <th className={classes.th}>Email</th>}\n                    {chkTel && <th className={classes.th}>Tel</th>}\n                    {chkCertificate && (\n                      <th className={classes.th}>Certificate</th>\n                    )}\n                    {chkAntiBodyTest && (\n                      <th className={classes.th}>AntiBodyTest</th>\n                    )}\n                    {chkextRef && <th className={classes.th}>Lab No.</th>}\n                    {chkPrice && <th className={classes.th}>Price (£) </th>}\n                  </tr>\n\n                  {data.bookings\n                    .filter((booking) => {\n                      if (!justCorporate) {\n                        return (\n                          booking.bookingDate >= fromDateStr &&\n                          booking.bookingDate <= untilDateStr\n                        );\n                      } else {\n                        return (\n                          booking.bookingDate >= fromDateStr &&\n                          booking.bookingDate <= untilDateStr &&\n                          booking.paid &&\n                          booking.paidBy === \"corporate\" &&\n                          booking.corporate === corporate\n                        );\n                      }\n                    })\n\n                    .map((booking) => (\n                      <tr>\n                        {chkDate && (\n                          <td className={classes.td}>\n                            {FormatDateFromString(booking.bookingDate)}\n                          </td>\n                        )}\n                        {chkForename && (\n                          <td className={classes.td}>\n                            {booking.forenameCapital}\n                          </td>\n                        )}\n                        {chkSurname && (\n                          <td className={classes.td}>\n                            {booking.surnameCapital}\n                          </td>\n                        )}\n                        {chkDOB && (\n                          <th className={classes.th}>\n                            {/* {FormatDateFromString(booking.birthDate)} */}\n                          </th>\n                        )}\n                        {chkEmail && (\n                          <td className={classes.td}>{booking.email}</td>\n                        )}\n                        {chkTel && (\n                          <td className={classes.td}>{booking.phone}</td>\n                        )}\n                        {chkCertificate && (\n                          <td className={classes.td}>\n                            {booking.certificate ? \"YES\" : \"NO\"}\n                          </td>\n                        )}\n                        {chkAntiBodyTest && (\n                          <td className={classes.td}>\n                            {booking.antiBodyTest ? \"YES\" : \"NO\"}\n                          </td>\n                        )}\n                        {chkextRef && (\n                          <td className={classes.td}>{booking.extRef}</td>\n                        )}\n                        {chkPrice && (\n                          <td className={classes.td}>\n                            {PriceCalculator.calculatePrice(booking)}\n                          </td>\n                        )}\n                      </tr>\n                    ))}\n                </table>\n              </div>\n            </div>\n          </DialogContent>\n        </Dialog>\n      )}\n    </React.Fragment>\n  );\n} ","\n\nexport const CalendarColors = {\n    PCR_COLOR : \"#4faef7\",\n    GYNAE_COLOR : \"#e83caf\",\n    GP_COLOR :  \"#ff4f14\",\n    STD_COLOR : \"#d6733a\",\n    BLOOD_COLOR: \"#dc2626\",\n\n    VC_COLOR : \"#0c7acf\",\n    F2F_COLOR : \"#8600d4\",\n    LASER_COLOR :  \"#d1005e\",\n    CATARACT_COLOR : \"#00919e\",\n    POSTOP_COLOR: \"#9e6c00\",\n    OPOTOMETRY_COLOR: \"#007d0c\"\n\n\n}\n","import React, { useEffect, useState } from \"react\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport PropTypes from \"prop-types\";\nimport dateformat from \"dateformat\";\nimport BookService from \"../services/BookService\";\n\nimport CircularProgress from \"@material-ui/core/CircularProgress\";\n\nimport GlobalState from \"../../GlobalState\";\nimport { Grid } from \"@material-ui/core\";\nimport { CalendarColors } from \"./colors\";\n\nconst useStyles = makeStyles((theme) => ({\n  Container: {\n    width: \"100%\",\n    minWidth:\"200px\",\n    paddingTop: \"70%\",\n    position: \"relative\",\n    backgroundColor: \"#fff\",\n    cursor: \"pointer\",\n  },\n\n  ContainerPast: {\n    width: \"100%\",\n    paddingTop: \"70%\",\n    position: \"relative\",\n    backgroundColor: \"#fafafa\",\n  },\n\n  DayLabel: {\n    position: \"absolute\",\n    top: \"5px\",\n    right: \"5px\",\n    color: \"#555\",\n    fontSize: \"1rem\",\n  },\n\n  DayLabelToday: {\n    position: \"absolute\",\n    top: \"5px\",\n    right: \"5px\",\n    backgroundColor: \"#1a73e8\",\n    color: \"#fff\",\n    fontSize: \"1rem\",\n    borderRadius: \"50%\",\n    padding: \"5px\",\n    lineHight: \"35px\",\n    minWidth: \"35px\",\n    textAlign: \"center\",\n  },\n\n  DayLabelDisabled: {\n    position: \"absolute\",\n    top: \"5px\",\n    right: \"5px\",\n    color: \"#ddd\",\n    fontSize: \"1rem\",\n  },\n\n  BookingCountLabel: {\n    position: \"absolute\",\n    top: \"35%\",\n    left: \"40%\",\n    color: \"#3f51b5\",\n    backgroundColor: \"#ebedf7\",\n    fontSize: \"16px\",\n    fontWeight: \"600\",\n    padding: \"10px\",\n    borderRadius: \"50%\",\n    minWidth: \"40px\",\n    lineHight: \"40px\",\n    cursor: \"pointer\",\n    textAlign: \"center\",\n  },\n\n  BookingCountLabelBusy: {\n    position: \"absolute\",\n    top: \"35%\",\n    left: \"40%\",\n    color: \"#b00000\",\n    backgroundColor: \"#fce6e6\",\n    fontSize: \"16px\",\n    fontWeight: \"600\",\n    padding: \"10px\",\n    borderRadius: \"50%\",\n    minWidth: \"40px\",\n    cursor: \"pointer\",\n    textAlign: \"center\",\n  },\n\n  LoadingProgress: {\n    position: \"absolute\",\n    top: \"40%\",\n    left: \"40%\",\n  },\n\n  BookingCountGauge: {\n    position: \"absolute\",\n    bottom: \"5%\",\n    left: \"8%\",\n    width: \"8%\",\n    height: \"85%\",\n  },\n\n  PCRGauge: {\n    position: \"absolute\",\n    bottom: \"-20px\",\n    left: \"0\",\n    width: \"30px\",\n    height: \"120%\",\n  },\n\n  GynaeGauge: {\n    position: \"absolute\",\n    bottom: \"-20px\",\n    left: \"31px\",\n    width: \"20px\",\n    height: \"120%\",\n  },\n\n  GPGauge: {\n    position: \"absolute\",\n    bottom: \"-20px\",\n    left: \"52px\",\n    width: \"20px\",\n    height: \"120%\",\n  },\n\n  STDGauge: {\n    position: \"absolute\",\n    bottom: \"-20px\",\n    left: \"73px\",\n    width: \"20px\",\n    height: \"120%\",\n  },\n\n  BloodGauge: {\n    position: \"absolute\",\n    bottom: \"-20px\",\n    left: \"94px\",\n    width: \"20px\",\n    height: \"120%\",\n  },\n\n  DayLabelContainer: {\n    position: \"absolute\",\n    top: \"15%\",\n    left: \"5px\",\n    width: \"100%\",\n    paddingTop: \"45%\",\n  },\n}));\n\nconst MAX_BOOKING_COUNT_PCR = 50;\nconst MAX_BOOKING_COUNT_GP = 10;\nconst MAX_BOOKING_COUNT_STD = 10;\nconst MAX_BOOKING_COUNT_GYNAE = 10;\nconst MAX_BOOKING_COUNT_BLOOD = 10;\n\nconst MAX_BOOKING_COUNT = 10;\n\n\n\nconst MonthViewCell = ({ key, cellIndex, month, daysInMonth, dayClicked }) => {\n  const classes = useStyles();\n\n  const [state, setState] = React.useContext(GlobalState);\n\n  const [dateStr, setDateStr] = React.useState(\"\");\n\n  const [cellDate, setCellDate] = React.useState(new Date());\n\n  const [bookingsCount, setBookingsCount] = React.useState(null);\n\n  const [disableDay, setDisableDay] = React.useState(false);\n\n  const [isPast, setIsPast] = React.useState(false);\n\n  useEffect(() => {\n    if (cellIndex <= daysInMonth.length) {\n      const date = daysInMonth[cellIndex - 1];\n      const dateStr = dateformat(date, \"yyyy-mm-dd\");\n      setDateStr(dateStr);\n      setCellDate(date);\n      setDisableDay(date.getMonth() !== month - 1);\n      const todayStr = dateformat(new Date(), \"yyyy-mm-dd\");\n      setIsPast(dateStr < todayStr);\n    } else {\n      const day = cellIndex - daysInMonth.length;\n      const date = new Date(\n        daysInMonth[daysInMonth.length - 1].getTime() + day * 86400000\n      );\n      const dateStr = dateformat(date, \"yyyy-mm-dd\");\n      setDateStr(dateStr);\n      setCellDate(date);\n      setDisableDay(true);\n      const todayStr = dateformat(new Date(), \"yyyy-mm-dd\");\n      setIsPast(dateStr < todayStr);\n    }\n  }, [cellIndex, month, daysInMonth]);\n\n  useEffect(() => {\n    const fecthData = async () => {\n      if (!dateStr || dateStr.length <= 0) {\n        return;\n      }\n\n      if (disableDay) {\n        setBookingsCount(-2);\n        return;\n      }\n\n      setBookingsCount(null);\n\n      var res = state.AdminCalendarCache?.find(\n        (record) =>\n          record.method === \"getBookingsCountByDateStr\" &&\n          record.query === dateStr\n      )?.res;\n\n      if (!res) {\n        res = await BookService.getAllBookingsCountByDateStr(dateStr);\n        setState((state) => ({\n          ...state,\n          AdminCalendarCache: [\n            ...state.AdminCalendarCache,\n            { method: \"getBookingsCountByDateStr\", query: dateStr, res: res },\n          ],\n        }));\n      }\n\n      if (res.data.count) {\n        setBookingsCount(res.data.count);\n      }\n    };\n\n    fecthData();\n  }, [dateStr]);\n\n  const getDayLabel = (_cellIndex, _month, _daysInMonth) => {\n    var date = null;\n    var disabled = false;\n    var day = -1;\n\n    if (_cellIndex <= _daysInMonth.length) {\n      date = _daysInMonth[_cellIndex - 1];\n      day = date.getDate();\n      if (date.getMonth() !== _month - 1) {\n        disabled = true;\n      }\n    } else {\n      const _day = _cellIndex - _daysInMonth.length;\n      const date = new Date(\n        _daysInMonth[_daysInMonth.length - 1].getTime() + _day * 86400000\n      );\n      day = date.getDate();\n      disabled = true;\n    }\n\n    const isToday =\n      dateformat(new Date(), \"yyyy-mm-dd\") === dateformat(date, \"yyyy-mm-dd\");\n\n    return (\n      <span\n        className={\n          disabled\n            ? classes.DayLabelDisabled\n            : isToday\n            ? classes.DayLabelToday\n            : classes.DayLabel\n        }\n      >\n        {day > 0 ? `${day}` : \"\"}\n      </span>\n    );\n  };\n\n  const getClinicBar = (clinic, count) => {\n    return (\n      <React.Fragment>\n        {clinic === \"Virtual Consultation\" &&\n          state.selectedClinics.findIndex((e) => e === \"Virtual Consultation\") >= 0 &&\n          getVCClinicBar(count)}\n        {clinic === \"F2F Clinic\" &&\n          state.selectedClinics.findIndex((e) => e === \"F2F Clinic\") >= 0 &&\n          getF2FClinicBar(count)}\n        {clinic === \"Laser Theatre\" &&\n          state.selectedClinics.findIndex((e) => e === \"Laser Theatre\") >= 0 &&\n          getLaserClinicBar(count)}\n        {clinic === \"Lens Theatre\" &&\n          state.selectedClinics.findIndex((e) => e === \"Lens Theatre\") >= 0 &&\n          getCataractClinicBar(count)}\n                 {clinic === \"Post OP\" &&\n          state.selectedClinics.findIndex((e) => e === \"Post OP\") >= 0 &&\n          getPostOPClinicBar(count)}\n \n      </React.Fragment>\n    );\n  };\n\n  const minHeight = 1;\n  const getVCClinicBar = (count) => {\n    let width = (count / MAX_BOOKING_COUNT) * 100 + 5;\n    if (width > 100) width = 100;\n\n    if (width < 20) width = 20;\n\n    if (count === 0) {\n      width = minHeight;\n    }\n\n    const percent = 100 - width;\n\n    return (\n      <div className={classes.PCRGauge}>\n        <div\n          style={{\n            padding: \"0\",\n            margin: \"0\",\n            width: \"100%\",\n            height: \"100%\",\n            backgroundColor: CalendarColors.VC_COLOR,\n            position: \"relative\",\n          }}\n        >\n          <div\n            style={{\n              position: \"absolute\",\n              bottom: \"0px\",\n              color: \"#fff\",\n              fontWeight: \"500\",\n              fontSize:\"0.8rem\",\n              textAlign: \"center\",\n              width: \"100%\",\n            }}\n          >\n            {count > 0 && count}\n          </div>\n\n          <div\n            style={{\n              padding: \"0\",\n              margin: \"0\",\n              width: \"100%\",\n              height: `${percent}%`,\n              backgroundColor: \"#fafafa\",\n            }}\n          ></div>\n        </div>\n      </div>\n    );\n  };\n\n  const getF2FClinicBar = (count) => {\n    let width = (count / MAX_BOOKING_COUNT) * 100 + 5;\n    if (width > 100) width = 100;\n\n    if (width < 20) width = 20;\n\n    if (count === 0) {\n      width = minHeight;\n    }\n\n    const percent = 100 - width;\n\n    return (\n      <div className={classes.GynaeGauge}>\n        <div\n          style={{\n            padding: \"0\",\n            margin: \"0\",\n            width: \"100%\",\n            height: \"100%\",\n            backgroundColor: CalendarColors.F2F_COLOR,\n            position: \"relative\",\n          }}\n        >\n          <div\n             style={{\n                position: \"absolute\",\n                bottom: \"0px\",\n                color: \"#fff\",\n                fontWeight: \"500\",\n                fontSize:\"0.8rem\",\n                textAlign: \"center\",\n                width: \"100%\",\n              }}\n          >\n            {count > 0 && count}\n          </div>\n\n          <div\n            style={{\n              padding: \"0\",\n              margin: \"0\",\n              width: \"100%\",\n              height: `${percent}%`,\n              backgroundColor: \"#fafafa\",\n            }}\n          ></div>\n        </div>\n      </div>\n    );\n  };\n\n  const getLaserClinicBar = (count) => {\n    let width = (count / MAX_BOOKING_COUNT) * 100 + 5;\n    if (width > 100) width = 100;\n\n    if (width < 20) width = 20;\n\n    if (count === 0) {\n      width = minHeight;\n    }\n\n    const percent = 100 - width;\n\n    return (\n      <div className={classes.GPGauge}>\n        <div\n          style={{\n            padding: \"0\",\n            margin: \"0\",\n            width: \"100%\",\n            height: \"100%\",\n            backgroundColor: CalendarColors.LASER_COLOR,\n            position: \"relative\",\n          }}\n        >\n          <div\n             style={{\n                position: \"absolute\",\n                bottom: \"0px\",\n                color: \"#fff\",\n                fontWeight: \"500\",\n                fontSize:\"0.8rem\",\n                textAlign: \"center\",\n                width: \"100%\",\n              }}\n          >\n            {count > 0 && count}\n          </div>\n\n          <div\n            style={{\n              padding: \"0\",\n              margin: \"0\",\n              width: \"100%\",\n              height: `${percent}%`,\n              backgroundColor: \"#fafafa\",\n            }}\n          ></div>\n        </div>\n      </div>\n    );\n  };\n\n  const getCataractClinicBar = (count) => {\n    let width = (count / MAX_BOOKING_COUNT) * 100 + 5;\n    if (width > 100) width = 100;\n\n    if (width < 20) width = 20;\n\n    if (count === 0) {\n      width = minHeight;\n    }\n\n    const percent = 100 - width;\n\n    return (\n      <div className={classes.STDGauge}>\n        <div\n          style={{\n            padding: \"0\",\n            margin: \"0\",\n            width: \"100%\",\n            height: \"100%\",\n            backgroundColor: CalendarColors.CATARACT_COLOR,\n            position: \"relative\",\n          }}\n        >\n          <div\n             style={{\n                position: \"absolute\",\n                bottom: \"0px\",\n                color: \"#fff\",\n                fontWeight: \"500\",\n                fontSize:\"0.8rem\",\n                textAlign: \"center\",\n                width: \"100%\",\n              }}\n          >\n            {count > 0 && count}\n          </div>\n\n          <div\n            style={{\n              padding: \"0\",\n              margin: \"0\",\n              width: \"100%\",\n              height: `${percent}%`,\n              backgroundColor: \"#fafafa\",\n            }}\n          ></div>\n        </div>\n      </div>\n    );\n  };\n\n  const getPostOPClinicBar = (count) => {\n    let width = (count / MAX_BOOKING_COUNT) * 100 + 5;\n    if (width > 100) width = 100;\n\n    if (width < 20) width = 20;\n\n    if (count === 0) {\n      width = minHeight;\n    }\n\n    const percent = 100 - width;\n\n    return (\n      <div className={classes.BloodGauge}>\n        <div\n          style={{\n            padding: \"0\",\n            margin: \"0\",\n            width: \"100%\",\n            height: \"100%\",\n            backgroundColor: CalendarColors.POSTOP_COLOR,\n            position: \"relative\",\n          }}\n        >\n          <div\n             style={{\n                position: \"absolute\",\n                bottom: \"0px\",\n                color: \"#fff\",\n                fontWeight: \"500\",\n                fontSize:\"0.8rem\",\n                textAlign: \"center\",\n                width: \"100%\",\n              }}\n          >\n            {count > 0 && count}\n          </div>\n\n          <div\n            style={{\n              padding: \"0\",\n              margin: \"0\",\n              width: \"100%\",\n              height: `${percent}%`,\n              backgroundColor: \"#fafafa\",\n            }}\n          ></div>\n        </div>\n      </div>\n    );\n  };\n\n\n\n  const getBookingsCountLabel = (_bookingsCount) => {\n    if (!_bookingsCount) {\n      return (\n        <div className={classes.LoadingProgress}>\n          <CircularProgress disableShrink />\n        </div>\n      );\n    } else if (_bookingsCount !== -2) {\n      return (\n        <div className={classes.DayLabelContainer}>\n          <Grid\n            container\n            direction=\"row\"\n            justify=\"flex-start\"\n            alignItems=\"flex-end\"\n            style={{ width: \"100%\", height: \"100%\" }}\n          >\n            {_bookingsCount.map((item) => (\n              <Grid item>{getClinicBar(item.clinic, item.count)}</Grid>\n            ))}\n          </Grid>\n        </div>\n      );\n    }\n  };\n\n  const getBookingsCountGauge = (_bookingsCount) => {\n    if (_bookingsCount > 0) {\n      let percent = (_bookingsCount / MAX_BOOKING_COUNT_PCR) * 100;\n      if (percent > 100) {\n        percent = 100;\n      }\n\n      percent = 100 - percent;\n\n      return (\n        <div className={classes.BookingCountGauge}>\n          <div\n            style={{\n              padding: \"0\",\n              margin: \"0\",\n              width: \"100%\",\n              height: \"100%\",\n              backgroundColor: \"#3f51b5\",\n            }}\n          >\n            <div\n              style={{\n                padding: \"0\",\n                margin: \"0\",\n                width: \"100%\",\n                height: `${percent}%`,\n                backgroundColor: \"#fafafa\",\n              }}\n            ></div>\n          </div>\n        </div>\n      );\n    }\n  };\n\n  return (\n    <React.Fragment>\n      <div\n        className={classes.Container}\n        onClick={(event) => dayClicked(event, cellDate)}\n      >\n        {getDayLabel(cellIndex, month, daysInMonth)}\n\n        {getBookingsCountLabel(bookingsCount)}\n\n        {/* {getBookingsCountGauge(bookingsCount)} */}\n      </div>\n    </React.Fragment>\n  );\n};\n\nMonthViewCell.propTypes = {\n  key: PropTypes.string.isRequired,\n  cellIndex: PropTypes.number.isRequired,\n  month: PropTypes.number.isRequired,\n  daysInMonth: PropTypes.arrayOf(PropTypes.date),\n  dayClicked: PropTypes.func,\n};\n\nexport default MonthViewCell;\n","import calendar from 'node-calendar';\n\n\nexport default class CalendarUtil {\n\n    static getMonthRange = (month , year) =>\n    {\n        return new calendar.Calendar(calendar.SUNDAY).itermonthdates(year, month);\n    } \n\n} ","import React, { useEffect, useState } from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport PropTypes from 'prop-types';\nimport MonthViewCell from './MonthViewCell';\nimport CalendarUtil from './calendar-util';\n\nconst dayLables = ['Sun', 'Mon', 'Tue', 'Wed' , 'Thu', 'Fri', 'Sat'];\nconst days = [1,2,3,4,5,6,7]; \nconst rows = [1,2,3,4,5,6];\n\nconst useStyles = makeStyles((theme) => ({\n\n    table: {\n        width: \"100%\",\n        border: \"1px solid #ddd\",\n        borderCollapse: \"collapse\",\n    },\n\n    th: {\n        border: \"1px solid #ddd\",\n        borderCollapse: \"collapse\",\n        verticalAlign: \"middle\",\n        fontcolor: \"#555\",\n        fontWeight: \"400\",\n        fontSize: \"15px\",\n        paddingTop: \"5px\",\n        paddingBottom: \"5px\",\n        width: \"14%\"\n    },\n\n    td: {\n        border: \"1px solid #ddd\",\n        borderCollapse: \"collapse\",\n        verticalAlign: \"middle\",\n    }\n\n  }));\n\nconst MonthView = ({month, year, dayClicked}) => {\n    const classes = useStyles();\n\n    const daysInMonth = CalendarUtil.getMonthRange(month,year);\n\n    return (\n        <React.Fragment>\n\n            <table className={classes.table}>\n                <thead>\n                    <tr>\n                        {dayLables.map(label => (\n                            <th key={`th-${label}`} className={classes.th}>\n                                {label}\n                            </th>\n                        ))}\n                    </tr>\n                </thead>\n                <tbody>\n                    {rows.map(row => (\n                        <tr>\n                            {days.map(day => (\n                                <td className={classes.td}>\n                                    <MonthViewCell \n                                        key={`${month}${year}${(row-1) * days.length + day}`} \n                                        cellIndex={(row-1) * days.length + day} \n                                        month={month} \n                                        daysInMonth={daysInMonth}\n                                        dayClicked = {dayClicked}\n                                        />\n                                </td>\n                            ))}\n                        </tr>\n                    ))}            \n                </tbody>\n\n            </table>\n\n      \n        </React.Fragment>\n\n\n    );\n}\n\nMonthView.propTypes = {\n    month: PropTypes.number.isRequired,\n    year: PropTypes.number.isRequired,\n    dayClicked: PropTypes.func\n  };\n\n\nexport default MonthView;","import React, { useEffect, useState } from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport PropTypes from 'prop-types';\nimport dateformat from 'dateformat';\nimport BookService from '../services/BookService';\n\nimport CircularProgress from '@material-ui/core/CircularProgress';\nimport GlobalState from '../../GlobalState';\n\nimport axios from 'axios'\n\nimport { Grid } from '@material-ui/core';\nimport { CalendarColors } from './colors';\n\nconst MAX_BOOKING_COUNT_PCR = 10;\nconst MAX_BOOKING_COUNT_GP = 1;\nconst MAX_BOOKING_COUNT_STD = 1;\nconst MAX_BOOKING_COUNT_GYNAE = 1;\nconst MAX_BOOKING_COUNT_BLOOD = 1;\n\n\n\nconst useStyles = makeStyles((theme) => ({\n\n    Container: {\n        width: \"100%\",\n        minHeight: \"100px\",\n        paddingTop: \"40%\",\n        position: \"relative\",\n        backgroundColor: \"#fff\",\n        cursor: \"pointer\"\n    },\n\n    ContainerPast: {\n        width: \"100%\",\n        minHeight: \"100px\",\n        paddingTop: \"40%\",\n        position: \"relative\",\n        backgroundColor: \"#fafafa\",\n        cursor: \"pointer\"\n    },\n    \n    DayLabel: {\n        position: \"absolute\",\n        top: \"5px\",\n        right: \"5px\",\n        color: \"#555\",\n        fontSize: \"1rem\"\n    },\n\n    DayLabelDisabled: {\n        position: \"absolute\",\n        top: \"5px\",\n        right: \"5px\",\n        color: \"#ddd\",\n        fontSize: \"1rem\"\n    },\n\n    BookingCountLabel: {\n        position: \"absolute\",\n        top: \"25%\",\n        left: \"38%\",\n        color: \"#3f51b5\",\n        backgroundColor: \"#ebedf7\",\n        fontSize: \"14px\",\n        fontWeight: \"600\",\n        padding: \"5px\",\n        borderRadius: \"50%\",\n        minWidth: \"30px\",\n        cursor : \"pointer\",\n        textAlign: \"center\"\n    },\n\n    BookingCountLabelBusy: {\n        position: \"absolute\",\n        top: \"25%\",\n        left: \"38%\",\n        color: \"#b00000\",\n        backgroundColor: \"#fce6e6\",\n        fontSize: \"14px\",\n        fontWeight: \"600\",\n        padding: \"5px\",\n        borderRadius: \"50%\",\n        minWidth: \"30px\",\n        cursor : \"pointer\",\n        textAlign: \"center\"\n    },\n\n    LoadingProgress: {\n        position: \"absolute\",\n        top: \"40%\",\n        left: \"40%\",\n      },\n\n      BookingCountGauge: {\n        position: \"absolute\",\n        bottom: \"5%\",\n        left: \"8%\",\n        width : \"85%\",\n        height: \"8%\"\n    },\n\n    PCRGauge: {\n        position: \"absolute\",\n        bottom: \"15px\",\n        left: \"0\",\n        width: \"20px\",\n        height: \"90%\",\n      },\n    \n      GynaeGauge: {\n        position: \"absolute\",\n        bottom: \"15px\",\n        left: \"21px\",\n        width: \"20px\",\n        height: \"90%\",\n      },\n    \n      GPGauge: {\n        position: \"absolute\",\n        bottom: \"15px\",\n        left: \"42px\",\n        width: \"20px\",\n        height: \"90%\",\n      },\n    \n      STDGauge: {\n        position: \"absolute\",\n        bottom: \"15px\",\n        left: \"63px\",\n        width: \"20px\",\n        height: \"90%\",\n      },\n      BloodGauge: {\n        position: \"absolute\",\n        bottom: \"15px\",\n        left: \"84px\",\n        width: \"20px\",\n        height: \"90%\",\n      },\n\n    \n\n    DayLabelContainer:{\n        position: \"absolute\",\n        top: \"15%\",\n        left:\"5px\",\n        width:\"100%\",\n        height:\"100%\"   \n    },\n\n  }));\n\nconst MAX_BOOKING_COUNT = 1;  \n\nconst WeekViewCell = ({key, date, time, dayClicked}) => {\n    const classes = useStyles();\n\n    const [state, setState] = React.useContext(GlobalState);\n    const [bookingsCount, setBookingsCount] = React.useState(null);\n    const [isPast, setIsPast] = React.useState(false);\n\n    const [cellDate, setCellDate] = React.useState(new Date());\n\n    useEffect( () => {\n        const todayStr = dateformat(new Date(), 'yyyy-mm-dd');\n        setIsPast(date < todayStr);\n\n        setCellDate(new Date(date));\n\n    }, [date]);\n\n    useEffect ( () => {\n      \n      \n      \n        if (!date || date.length <= 0 || !time || time.length <= 0)\n        {\n            return;\n        }\n        \n        // if (isPast)\n        // {\n        //     setBookingsCount(-2);\n        //     return;\n        // }\n\n        setBookingsCount(null);\n\n       \n\n        var res = state.AdminCalendarCache?.find(record => record.method === 'getBookingsCountByDateStrandTime' && record.query === `${date}${time}`)?.res;\n        if (res)\n        {\n            if (res.data.count)\n            {\n                setBookingsCount(res.data.count);\n            }  \n            return;\n        }\n\n        let source = axios.CancelToken.source();\n        BookService.getAllBookingsCountByDateStrandTime(date, time, source).then( res => {\n            if (res.data.count)\n            {\n                setBookingsCount(res.data.count);\n                setState(state => ({...state, AdminCalendarCache : [...state.AdminCalendarCache, {method: 'getBookingsCountByDateStrandTime' , query : `${date}${time}`, res: res}]}));\n            }  \n        }).catch( err => \n            {\n                //do nothing\n            });\n     \n        return () => {\n           if (source)\n              source.cancel('Cancelling in cleanup');\n        }\n     \n    }, [date, time]);\n\n\n    const minHeight = 1;\n    const getVCClinicBar = (count) => {\n      let width = (count / MAX_BOOKING_COUNT) * 100 + 5;\n      if (width > 100) width = 100;\n  \n      if (width < 30) width = 30;\n  \n      if (count === 0) {\n        width = minHeight;\n      }\n  \n      const percent = 100 - width;\n  \n      return (\n        <div className={classes.PCRGauge}>\n          <div\n            style={{\n              padding: \"0\",\n              margin: \"0\",\n              width: \"100%\",\n              height: \"100%\",\n              backgroundColor: CalendarColors.VC_COLOR,\n              position: \"relative\",\n            }}\n          >\n            <div\n              style={{\n                position: \"absolute\",\n                bottom: \"0px\",\n                color: \"#fff\",\n                fontWeight: \"500\",\n                fontSize:\"0.8rem\",\n                textAlign: \"center\",\n                width: \"100%\",\n              }}\n            >\n              {count > 0 && count}\n            </div>\n  \n            <div\n              style={{\n                padding: \"0\",\n                margin: \"0\",\n                width: \"100%\",\n                height: `${percent}%`,\n                backgroundColor: \"#fafafa\",\n              }}\n            ></div>\n          </div>\n        </div>\n      );\n    };\n  \n    const getF2FClinicBar = (count) => {\n      let width = (count / MAX_BOOKING_COUNT) * 100 + 5;\n      if (width > 100) width = 100;\n  \n      if (width < 30) width = 30;\n  \n      if (count === 0) {\n        width = minHeight;\n      }\n  \n      const percent = 100 - width;\n  \n      return (\n        <div className={classes.GynaeGauge}>\n          <div\n            style={{\n              padding: \"0\",\n              margin: \"0\",\n              width: \"100%\",\n              height: \"100%\",\n              backgroundColor: CalendarColors.F2F_COLOR,\n              position: \"relative\",\n            }}\n          >\n            <div\n               style={{\n                  position: \"absolute\",\n                  bottom: \"0px\",\n                  color: \"#fff\",\n                  fontWeight: \"500\",\n                  fontSize:\"0.8rem\",\n                  textAlign: \"center\",\n                  width: \"100%\",\n                }}\n            >\n              {count > 0 && count}\n            </div>\n  \n            <div\n              style={{\n                padding: \"0\",\n                margin: \"0\",\n                width: \"100%\",\n                height: `${percent}%`,\n                backgroundColor: \"#fafafa\",\n              }}\n            ></div>\n          </div>\n        </div>\n      );\n    };\n  \n    const getLaserClinicBar = (count) => {\n      let width = (count / MAX_BOOKING_COUNT) * 100 + 5;\n      if (width > 100) width = 100;\n  \n      if (width < 30) width = 30;\n  \n      if (count === 0) {\n        width = minHeight;\n      }\n  \n      const percent = 100 - width;\n  \n      return (\n        <div className={classes.GPGauge}>\n          <div\n            style={{\n              padding: \"0\",\n              margin: \"0\",\n              width: \"100%\",\n              height: \"100%\",\n              backgroundColor: CalendarColors.LASER_COLOR,\n              position: \"relative\",\n            }}\n          >\n            <div\n               style={{\n                  position: \"absolute\",\n                  bottom: \"0px\",\n                  color: \"#fff\",\n                  fontWeight: \"500\",\n                  fontSize:\"0.8rem\",\n                  textAlign: \"center\",\n                  width: \"100%\",\n                }}\n            >\n              {count > 0 && count}\n            </div>\n  \n            <div\n              style={{\n                padding: \"0\",\n                margin: \"0\",\n                width: \"100%\",\n                height: `${percent}%`,\n                backgroundColor: \"#fafafa\",\n              }}\n            ></div>\n          </div>\n        </div>\n      );\n    };\n  \n    const getCataractClinicBar = (count) => {\n      let width = (count / MAX_BOOKING_COUNT) * 100 + 5;\n      if (width > 100) width = 100;\n  \n      if (width < 30) width = 30;\n  \n      if (count === 0) {\n        width = minHeight;\n      }\n  \n      const percent = 100 - width;\n  \n      return (\n        <div className={classes.STDGauge}>\n          <div\n            style={{\n              padding: \"0\",\n              margin: \"0\",\n              width: \"100%\",\n              height: \"100%\",\n              backgroundColor: CalendarColors.CATARACT_COLOR,\n              position: \"relative\",\n            }}\n          >\n            <div\n               style={{\n                  position: \"absolute\",\n                  bottom: \"0px\",\n                  color: \"#fff\",\n                  fontWeight: \"500\",\n                  fontSize:\"0.8rem\",\n                  textAlign: \"center\",\n                  width: \"100%\",\n                }}\n            >\n              {count > 0 && count}\n            </div>\n  \n            <div\n              style={{\n                padding: \"0\",\n                margin: \"0\",\n                width: \"100%\",\n                height: `${percent}%`,\n                backgroundColor: \"#fafafa\",\n              }}\n            ></div>\n          </div>\n        </div>\n      );\n    };\n\n    const getPostOPClinicBar = (count) => {\n      let width = (count / MAX_BOOKING_COUNT) * 100 + 5;\n      if (width > 100) width = 100;\n  \n      if (width < 30) width = 30;\n  \n      if (count === 0) {\n        width = minHeight;\n      }\n  \n      const percent = 100 - width;\n  \n      return (\n        <div className={classes.BloodGauge}>\n          <div\n            style={{\n              padding: \"0\",\n              margin: \"0\",\n              width: \"100%\",\n              height: \"100%\",\n              backgroundColor: CalendarColors.POSTOP_COLOR,\n              position: \"relative\",\n            }}\n          >\n            <div\n               style={{\n                  position: \"absolute\",\n                  bottom: \"0px\",\n                  color: \"#fff\",\n                  fontWeight: \"500\",\n                  fontSize:\"0.8rem\",\n                  textAlign: \"center\",\n                  width: \"100%\",\n                }}\n            >\n              {count > 0 && count}\n            </div>\n  \n            <div\n              style={{\n                padding: \"0\",\n                margin: \"0\",\n                width: \"100%\",\n                height: `${percent}%`,\n                backgroundColor: \"#fafafa\",\n              }}\n            ></div>\n          </div>\n        </div>\n      );\n    };\n\n\n  \n  \n    const getBookingsCountLabel = (_bookingsCount) => {\n      if (!_bookingsCount) {\n        return (\n          <div className={classes.LoadingProgress}>\n            <CircularProgress disableShrink />\n          </div>\n        );\n      } else if (_bookingsCount !== -2) {\n        return (\n          <div className={classes.DayLabelContainer}>\n            <Grid\n              container\n              direction=\"row\"\n              justify=\"flex-start\"\n              alignItems=\"flex-end\"\n              style={{ width: \"100%\", height: \"100%\" }}\n            >\n              {_bookingsCount.map((item) => (\n                <Grid item>{getClinicBar(item.clinic, item.count)}</Grid>\n              ))}\n            </Grid>\n          </div>\n        );\n      }\n    };\n\n    const getClinicBar = (clinic, count) => {\n      return (\n        <React.Fragment>\n          {clinic === \"Virtual Consultation\" &&\n            state.selectedClinics.findIndex((e) => e === \"Virtual Consultation\") >= 0 &&\n            getVCClinicBar(count)}\n          {clinic === \"F2F Clinic\" &&\n            state.selectedClinics.findIndex((e) => e === \"F2F Clinic\") >= 0 &&\n            getF2FClinicBar(count)}\n          {clinic === \"Laser Theatre\" &&\n            state.selectedClinics.findIndex((e) => e === \"Laser Theatre\") >= 0 &&\n            getLaserClinicBar(count)}\n          {clinic === \"Cataract Theatre\" &&\n            state.selectedClinics.findIndex((e) => e === \"Cataract Theatre\") >= 0 &&\n            getCataractClinicBar(count)}\n                      {clinic === \"Post OP\" &&\n            state.selectedClinics.findIndex((e) => e === \"Post OP\") >= 0 &&\n            getPostOPClinicBar(count)}\n\n        </React.Fragment>\n      );\n    };\n    \n    const getBookingsCountGauge = (_bookingsCount) =>\n    {\n        if (_bookingsCount > 0 )\n        {\n            let percent = (_bookingsCount / MAX_BOOKING_COUNT) * 100;\n            if (percent > 100)\n            {\n                percent = 100;\n            }\n\n            // percent = 100 - percent;\n\n            return (\n\n                <div className={classes.BookingCountGauge}>\n                  <div style={{padding:\"0\", margin:\"0\", width:\"100%\", height:\"100%\", backgroundColor: \"#f5f5f5\"}} >\n                        <div  style={{padding:\"0\", margin:\"0\", height:\"100%\", width:`${percent}%`, backgroundColor: \"#3f51b5\"}} >\n\n                        </div>\n                  </div>\n                </div>\n            );\n        }\n    }\n\n\n\n\n    return (\n        <React.Fragment>\n\n            <div className={isPast ? classes.ContainerPast : classes.Container} onClick={(event => dayClicked(event,cellDate))} >\n\n              {getBookingsCountLabel(bookingsCount)}\n\n              {/* {getBookingsCountGauge(bookingsCount)} */}\n\n            </div>\n\n        </React.Fragment>\n\n\n    );\n}\n\nWeekViewCell.propTypes = {\n    key: PropTypes.string.isRequired,\n    date: PropTypes.string.isRequired,\n    time: PropTypes.string.isRequired,\n    dayClicked: PropTypes.func\n  };\n\n \n  \nexport default WeekViewCell;","import React, { useEffect, useState } from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport PropTypes from 'prop-types';\nimport WeekViewCell from './WeekViewCell';\nimport dateformat from 'dateformat';\n\nconst rows = [\n    '08:00 AM',\n    '08:15 AM',\n    '08:30 AM', \n    '08:45 AM',\n    '09:00 AM',\n    '09:15 AM', \n    '09:30 AM',\n    '09:45 AM',\n    '10:00 AM',\n    '10:15 AM',\n    '10:30 AM',\n    '10:45 AM',\n    '11:00 AM',\n    '11:15 AM',\n    '11:30 AM',\n    '11:45 AM',\n    '12:00 PM',\n    '12:15 PM',\n    '12:30 PM',\n    '12:45 PM',\n    '01:00 PM',\n    '01:15 PM',\n    '01:30 PM',\n    '01:45 PM',\n    '02:00 PM',\n    '02:15 PM',\n    '02:30 PM',\n    '02:45 PM',\n    '03:00 PM',\n    '03:15 PM',\n    '03:30 PM',\n    '03:45 PM',\n    '04:00 PM',\n    '04:15 PM',\n    '04:30 PM',\n    '04:45 PM',\n    '05:00 PM',\n    '05:15 PM',\n    '05:30 PM',\n    '05:45 PM',\n    '06:00 PM',\n    '06:15 PM',\n    '06:30 PM',\n    '06:45 PM',\n    '07:00 PM',\n    '07:15 PM',\n    '07:30 PM',\n    '07:45 PM'\n];\n\n\n\nconst useStyles = makeStyles((theme) => ({\n\n    table: {\n        width: \"100%\",\n        border: \"1px solid #ddd\",\n        borderCollapse: \"collapse\",\n        overflowY: \"auto\"\n    },\n\n    th: {\n        border: \"1px solid #ddd\",\n        borderCollapse: \"collapse\",\n        verticalAlign: \"middle\",\n        fontcolor: \"#555\",\n        fontWeight: \"400\",\n        fontSize: \"15px\",\n        paddingTop: \"5px\",\n        paddingBottom: \"5px\",\n        width: \"12%\", \n    },\n\n    td: {\n        border: \"1px solid #ddd\",\n        borderCollapse: \"collapse\",\n        verticalAlign: \"middle\",\n        height : \"50px\",\n        width: \"12%\", \n    }\n\n  }));\n\nconst WeekView = ({dates, dayClicked}) => {\n    const classes = useStyles();\n\n    return (\n        <React.Fragment>\n\n        <div style={{overflowY: \"scroll\" , height: \"60px\"}}>\n            <table className={classes.table}>\n                <thead>\n                    <tr>\n                        <th style={{width: \"7%\"}}>\n                        \n                        </th>\n                            {dates.map(date => (\n                                <th className={classes.th}>\n                                    <div style={{paddingBottom: \"5px\", color: \"#aaa\"}}>\n                                         {dateformat(date, 'ddd')}\n                                    </div>\n                                    <div>\n                                        <span style={{color: \"#aaa\"}}>\n                                            {dateformat(date, 'mmm ')}\n                                        </span> \n                                        <span  style={(dateformat(new Date(),'yyyy-mm-dd') === dateformat(date, 'yyyy-mm-dd')) ? { backgroundColor: \"#1a73e8\", color: \"#fff\", borderRadius: \"50%\",  padding: \"5px\",} : {color: \"#333\", fontWeight:\"500\"}}>\n                                             {dateformat(date, ' d')}\n                                        </span>\n                                       \n                                    </div>\n                                </th>\n                        ))}\n                    </tr>\n                </thead>\n             </table>\n\n        </div>\n\n            <div style={{overflowY: \"scroll\" , height: \"70vh\"}}>\n                <table className={classes.table}>   \n                    <tbody>\n                        {rows.map(row => (\n                            <tr>\n                                <td style={{width: \"7%\"}}>\n                                    {row}\n                                </td>\n                                {dates.map(day => (\n                                    <td className={classes.td}>\n                                        <WeekViewCell \n                                                dayClicked = {dayClicked}\n                                                key={`${dateformat(day,'yyyy-mm-dd')}-${row.replace(':','-')}`} \n                                                date={dateformat(day,'yyyy-mm-dd')} \n                                                time={row}/>\n                                    </td>\n                                ))}\n                            </tr>\n                        ))}            \n                    </tbody>\n                </table>\n            </div>                    \n      \n        </React.Fragment>\n\n\n    );\n}\n\nWeekView.propTypes = {\n    dates: PropTypes.arrayOf(PropTypes.any).isRequired,\n    dayClicked: PropTypes.func\n  };\n\n\nexport default WeekView;","import React, { useEffect, useRef, useState } from \"react\";\nimport BookService from \"./services/BookService\";\nimport Typography from \"@material-ui/core/Typography\";\nimport {\n  Backdrop,\n  Button,\n  Checkbox,\n  CircularProgress,\n  Divider,\n  FormControlLabel,\n  Grid,\n  InputAdornment,\n  InputLabel,\n  Link,\n  makeStyles,\n  MenuItem,\n  Select,\n  Switch,\n  TextField,\n  Tooltip,\n} from \"@material-ui/core\";\nimport GlobalState from \"../GlobalState\";\nimport { withStyles } from \"@material-ui/core/styles\";\n\nimport CreditCardIcon from \"@material-ui/icons/CreditCard\";\n\nimport Dialog from \"@material-ui/core/Dialog\";\nimport DialogContent from \"@material-ui/core/DialogContent\";\n\nimport DialogTitle from \"@material-ui/core/DialogTitle\";\nimport Draggable from \"react-draggable\";\nimport Paper from \"@material-ui/core/Paper\";\n\nimport Alert from \"@material-ui/lab/Alert\";\n\nimport PropTypes from \"prop-types\";\nimport LinearProgress from \"@material-ui/core/LinearProgress\";\nimport Box from \"@material-ui/core/Box\";\n\nimport Radio from \"@material-ui/core/Radio\";\nimport RadioGroup from \"@material-ui/core/RadioGroup\";\nimport FormControl from \"@material-ui/core/FormControl\";\nimport FormLabel from \"@material-ui/core/FormLabel\";\nimport { corporates } from \"./Corporates\";\nimport NumberFormat from \"react-number-format\";\n\nimport AddIcon from \"@material-ui/icons/Add\";\nimport { validate } from \"email-validator\";\nimport DateRangeIcon from \"@material-ui/icons/DateRange\";\nimport { CalendarColors } from \"./calendar-admin/colors\";\n\nvar interval;\n\nconst useStyles = makeStyles((theme) => ({\n  title: {\n    marginTop: theme.spacing(0),\n    marginBottom: theme.spacing(1),\n  },\n\n  refreshButton: {\n    marginLeft: theme.spacing(2),\n  },\n\n  checkIcon: {\n    color: \"green\",\n  },\n\n  closeIcon: {\n    color: \"red\",\n  },\n\n  RefLink: {\n    cursor: \"pointer\",\n  },\n\n  BookedLabel: {\n    backgroundColor: \"#606060\",\n    color: \"#fff\",\n    paddingRight: \"10px\",\n    paddingLeft: \"10px\",\n  },\n\n  PatientAttendedLabel: {\n    backgroundColor: \"#0066aa\",\n    color: \"#fff\",\n    paddingRight: \"15px\",\n    paddingLeft: \"10px\",\n  },\n\n  SampleTakenLabel: {\n    backgroundColor: \"#0066cc\",\n    color: \"#fff\",\n    paddingRight: \"40px\",\n    paddingLeft: \"10px\",\n  },\n\n  ReportSentLabel: {\n    backgroundColor: \"#009900\",\n    color: \"#fff\",\n    paddingRight: \"90px\",\n    paddingLeft: \"10px\",\n  },\n\n  ReportCertSentLabel: {\n    backgroundColor: \"#009900\",\n    color: \"#fff\",\n    paddingRight: \"68px\",\n    paddingLeft: \"10px\",\n  },\n\n  archiveButton: {},\n\n  smartMatchButton: {\n    backgroundColor: \"#2f942e\",\n    \"&:hover\": {\n      background: \"green\",\n      color: \"#fff\",\n    },\n    textDecoration: \"none !important\",\n    marginRight: \"10px\",\n    // padding: \"10px\"\n  },\n\n  infoTitle: {\n    fontWeight: \"400\",\n  },\n\n  infoData: {\n    paddingLeft: \"10px\",\n    fontWeight: \"800\",\n  },\n\n  matchButton: {\n    marginTop: \"30px\",\n    marginBottom: \"20px\",\n    backgroundColor: \"#2f942e\",\n    \"&:hover\": {\n      background: \"green\",\n      color: \"#fff\",\n    },\n    textDecoration: \"none !important\",\n    padding: \"10px\",\n    paddingLeft: \"50px\",\n    paddingRight: \"50px\",\n  },\n\n  resendButton: {\n    marginTop: \"5px\",\n    marginBottom: \"5px\",\n    backgroundColor: \"#2f942e\",\n    \"&:hover\": {\n      background: \"green\",\n      color: \"#fff\",\n    },\n    textDecoration: \"none !important\",\n    padding: \"10px\",\n    paddingLeft: \"50px\",\n    paddingRight: \"50px\",\n  },\n\n  resendFilesButton: {\n    marginTop: \"5px\",\n    marginBottom: \"5px\",\n    backgroundColor: \"#3792ad\",\n    \"&:hover\": {\n      background: \"#2f798f\",\n      color: \"#fff\",\n    },\n    textDecoration: \"none !important\",\n    padding: \"10px\",\n    paddingLeft: \"50px\",\n    paddingRight: \"50px\",\n  },\n\n  cancelButton: {\n    marginBottom: \"10px\",\n    textDecoration: \"none !important\",\n    padding: \"10px\",\n    paddingLeft: \"90px\",\n    paddingRight: \"90px\",\n  },\n\n  CalendarIcon: {\n    color: theme.palette.primary.main,\n  },\n\n  DateTimeLabel: {\n    fontWeight: \"600\",\n    fontSize: \"1.2rem\",\n    color: theme.palette.primary.main,\n  },\n\n  backdrop: {\n    zIndex: theme.zIndex.drawer + 5,\n    color: \"#fff\",\n  },\n\n  PriceLabelPaid:{\n    color: theme.palette.primary.main,\n    fontWeight: \"600\"\n  },\n\n  PriceLabelNotPaid:{\n    color: theme.palette.secondary.main,\n    fontWeight: \"600\"\n  },\n\n  BoxDisabled: {\n    width : \"100%\",\n    padding: \"10px\",\n    borderRadius: \"8px\",\n    border: \"1px solid\",\n    fontSize: \"1.2rem\",\n    fontWeight: \"500\",\n    textAlign: \"center\",\n    borderColor: \"#ddd\",\n    cursor: \"not-allowed\",\n    color: \"#ddd\",\n    transition: \"all 0.2s ease\",\n  },\n\n  BoxVC: {\n    width : \"100%\",\n    padding: \"10px\",\n    borderRadius: \"8px\",\n    border: \"1px solid\",\n    fontSize: \"1.2rem\",\n    fontWeight: \"500\",\n    textAlign: \"center\",\n    cursor: \"pointer\",\n    borderColor: CalendarColors.VC_COLOR,\n    color: CalendarColors.VC_COLOR,\n    transition: \"all 0.2s ease\",\n    \"&:hover\": {\n      backgroundColor: CalendarColors.VC_COLOR,\n      color: \"#fff\"\n    }\n  \n  },\n\n  BoxF2F: {\n    width : \"100%\",\n    padding: \"10px\",\n    borderRadius: \"8px\",\n    border: \"1px solid\",\n    fontSize: \"1.2rem\",\n    fontWeight: \"500\",\n    textAlign: \"center\",\n    cursor: \"pointer\",\n    borderColor: CalendarColors.F2F_COLOR,\n    color: CalendarColors.F2F_COLOR,\n    transition: \"all 0.2s ease\",\n    \"&:hover\": {\n      backgroundColor: CalendarColors.F2F_COLOR,\n      color: \"#fff\"\n    }\n  \n  },\n\n  BoxLaser: {\n    width : \"100%\",\n    padding: \"10px\",\n    borderRadius: \"8px\",\n    border: \"1px solid\",\n    fontSize: \"1.2rem\",\n    fontWeight: \"500\",\n    textAlign: \"center\",\n    cursor: \"pointer\",\n    borderColor: CalendarColors.LASER_COLOR,\n    color: CalendarColors.LASER_COLOR,\n    transition: \"all 0.2s ease\",\n    \"&:hover\": {\n      backgroundColor: CalendarColors.LASER_COLOR,\n      color: \"#fff\"\n    }\n  \n  },\n\n  BoxCataract: {\n    width : \"100%\",\n    padding: \"10px\",\n    borderRadius: \"8px\",\n    border: \"1px solid\",\n    fontSize: \"1.2rem\",\n    fontWeight: \"500\",\n    textAlign: \"center\",\n    cursor: \"pointer\",\n    borderColor: CalendarColors.CATARACT_COLOR,\n    color: CalendarColors.CATARACT_COLOR,\n    transition: \"all 0.2s ease\",\n    \"&:hover\": {\n      backgroundColor: CalendarColors.CATARACT_COLOR,\n      color: \"#fff\"\n    }\n  \n  },\n\n  BoxPostOP: {\n    width : \"100%\",\n    padding: \"10px\",\n    borderRadius: \"8px\",\n    border: \"1px solid\",\n    fontSize: \"1.2rem\",\n    fontWeight: \"500\",\n    textAlign: \"center\",\n    cursor: \"pointer\",\n    borderColor: CalendarColors.POSTOP_COLOR,\n    color: CalendarColors.POSTOP_COLOR,\n    transition: \"all 0.2s ease\",\n    \"&:hover\": {\n      backgroundColor: CalendarColors.POSTOP_COLOR,\n      color: \"#fff\"\n    }\n  \n  },\n\n  BoxOptometry: {\n    width : \"100%\",\n    padding: \"10px\",\n    borderRadius: \"8px\",\n    border: \"1px solid\",\n    fontSize: \"1.2rem\",\n    fontWeight: \"500\",\n    textAlign: \"center\",\n    cursor: \"pointer\",\n    borderColor: CalendarColors.OPOTOMETRY_COLOR,\n    color: CalendarColors.OPOTOMETRY_COLOR,\n    transition: \"all 0.2s ease\",\n    \"&:hover\": {\n      backgroundColor: CalendarColors.OPOTOMETRY_COLOR,\n      color: \"#fff\"\n    }\n  \n  },\n\n\n\n\n\n\n\n\n\n\n  BoxGynae: {\n    width : \"100%\",\n    padding: \"10px\",\n    borderRadius: \"8px\",\n    border: \"1px solid\",\n    fontSize: \"1.2rem\",\n    fontWeight: \"500\",\n    textAlign: \"center\",\n    cursor: \"pointer\",\n    borderColor: CalendarColors.GYNAE_COLOR,\n    color: CalendarColors.GYNAE_COLOR,\n    transition: \"all 0.2s ease\",\n    \"&:hover\": {\n      backgroundColor: CalendarColors.GYNAE_COLOR,\n      color: \"#fff\"\n    }\n  \n  },\n\n  BoxGP: {\n    width : \"100%\",\n    padding: \"10px\",\n    borderRadius: \"8px\",\n    border: \"1px solid\",\n    fontSize: \"1.2rem\",\n    fontWeight: \"500\",\n    textAlign: \"center\",\n    cursor: \"pointer\",\n    borderColor: CalendarColors.GP_COLOR,\n    color: CalendarColors.GP_COLOR,\n    transition: \"all 0.2s ease\",\n    \"&:hover\": {\n      backgroundColor: CalendarColors.GP_COLOR,\n      color: \"#fff\"\n    }\n  },\n\n  BoxSTD: {\n    width : \"100%\",\n    padding: \"10px\",\n    borderRadius: \"8px\",\n    border: \"1px solid\",\n    fontSize: \"1.2rem\",\n    fontWeight: \"500\",\n    textAlign: \"center\",\n    cursor: \"pointer\",\n    borderColor: CalendarColors.STD_COLOR,\n    color: CalendarColors.STD_COLOR,\n    transition: \"all 0.2s ease\",\n    \"&:hover\": {\n      backgroundColor: CalendarColors.STD_COLOR,\n      color: \"#fff\"\n    }\n  },\n\n\n\n}));\n\nconst Packages = [\n  { packageName: \"Consultation with Consultant Gynaecologist\" },\n  { packageName: `Coil Fitting/Coil Removal` },\n  { packageName: `Well Woman Check` },\n  { packageName: `Sexual Health Screening` },\n  { packageName: `Pre-pregnancy/Fertility check` },\n  { packageName: `Gynaecological Ultrasound` },\n  { packageName: `HPV Vaccination` },\n  { packageName: `Cervical / Pap Smear` },\n  { packageName: `HPV Treatment / Wart Cryo-Therapy` },\n];\n\nfunction NumberFormatCustom(props) {\n  const { inputRef, onChange, ...other } = props;\n\n  return (\n    <NumberFormat\n      {...other}\n      getInputRef={inputRef}\n      onValueChange={(values) => {\n        onChange({\n          target: {\n            name: props.name,\n            value: values.value,\n          },\n        });\n      }}\n      thousandSeparator\n      isNumericString\n      prefix=\"\"\n    />\n  );\n}\n\nNumberFormatCustom.propTypes = {\n  inputRef: PropTypes.func.isRequired,\n  name: PropTypes.string.isRequired,\n  onChange: PropTypes.func.isRequired,\n};\n\nconst BorderLinearProgress = withStyles((theme) => ({\n  root: {\n    height: 10,\n    borderRadius: 5,\n  },\n  colorPrimary: {\n    backgroundColor: \"#cedbce\", //theme.palette.grey[theme.palette.type === 'light' ? 200 : 700],\n  },\n  bar: {\n    borderRadius: 5,\n    backgroundColor: \"#2f942e\",\n  },\n}))(LinearProgress);\nfunction LinearProgressWithLabel(props) {\n  return (\n    <Box display=\"flex\" alignItems=\"center\">\n      <Box width=\"100%\" mr={1}>\n        <BorderLinearProgress variant=\"determinate\" {...props} />\n      </Box>\n      <Box minWidth={35}>\n        <Typography\n          style={{ fontWeight: \"800\", color: \"#5e855e\" }}\n          variant=\"body2\"\n          color=\"textSecondary\"\n        >{`${Math.round(props.value)}%`}</Typography>\n      </Box>\n    </Box>\n  );\n}\n\nLinearProgressWithLabel.propTypes = {\n  /**\n   * The value of the progress indicator for the determinate and buffer variants.\n   * Value between 0 and 100.\n   */\n  value: PropTypes.number.isRequired,\n};\n\nfunction PaperComponent(props) {\n  return (\n    <Draggable\n      handle=\"#draggable-dialog-title\"\n      cancel={'[class*=\"MuiDialogContent-root\"]'}\n    >\n      <Paper {...props} />\n    </Draggable>\n  );\n}\n\nexport default function NewBookingDialog(props) {\n  const classes = useStyles();\n\n  const [state, setState] = React.useContext(GlobalState);\n\n  const handleClose = () => {    \n    props.handleClose();\n  };\n\n\n  const timeDisabled = () =>\n  {\n    return props.time.indexOf(':15') > 0 || props.time.indexOf(':45') > 0 || props.time.indexOf('09') >= 0 \n  }\n\n  const clinicClicked = (clinic) =>\n  {\n    props.clinicClicked(clinic)\n  }\n\n  return (\n    <React.Fragment>\n      {props.date && props.time && (\n        <React.Fragment>\n          <Dialog\n            maxWidth=\"xs\"\n            open={props.open}\n            onClose={handleClose}\n            PaperComponent={PaperComponent}\n            aria-labelledby=\"form-dialog-title\"\n          >\n            <DialogTitle id=\"draggable-dialog-title\">\n              <Grid\n                container\n                spacing={1}\n                direction=\"row\"\n                justify=\"center\"\n                alignItems=\"center\"\n              >\n                <Grid item>\n                  <AddIcon style={{ color: \"#f50057\", fontSize: \"3rem\" }} />\n                </Grid>\n\n                <Grid item>\n                  <div\n                    style={{\n                      color: \"#f50057\",\n                      paddingBottom: \"10px\",\n                      fontWeight: \"800\",\n                    }}\n                  >\n                    {\" \"}\n                    ADD New Booking{\" \"}\n                  </div>\n                </Grid>\n              </Grid>\n\n              <Divider />\n            </DialogTitle>\n            <DialogContent>\n              <div\n                style={{\n                  height: \"480px\",\n                }}\n              >\n                <Grid\n                  container\n                  direction=\"row\"\n                  justify=\"stretch\"\n                  spacing={2}\n                  alignItems=\"center\"\n                >\n                  <Grid item xs={12}>\n                    <Grid\n                      container\n                      direction=\"row\"\n                      justify=\"center\"\n                      alignItems=\"center\"\n                      spacing={0}\n                    >\n                      <Grid item>\n                        <DateRangeIcon className={classes.CalendarIcon} />\n                      </Grid>\n                      <Grid item>\n                        <span className={classes.DateTimeLabel}>\n                          {props.date} , {props.time}\n                        </span>\n                      </Grid>\n                    </Grid>\n                  </Grid>\n\n\n                  <Grid item xs={12} style={{marginTop:\"0px\"}}>\n                    <div className={classes.BoxVC} onClick={() => clinicClicked(\"Virtual Consultation\")}>\n                      Virtual Consultation\n                    </div>\n                  </Grid>\n                  <Grid item xs={12}>\n                    <div className={classes.BoxF2F} onClick={() => clinicClicked(\"F2F Clinic\")}>\n                      F2F Clinic\n                    </div>\n                  </Grid>\n                  <Grid item xs={12}>\n                    <div className={classes.BoxLaser} onClick={() => clinicClicked(\"Laser Theatre\")}>\n                      Laser Theatre\n                    </div>\n                  </Grid>\n                  <Grid item xs={12}>\n                    <div className={classes.BoxCataract} onClick={() => clinicClicked(\"Lens Theatre\")}>\n                      Lens Theatre\n                    </div>\n                  </Grid>\n                  <Grid item xs={12}>\n                    <div className={classes.BoxPostOP} onClick={() => clinicClicked(\"Post OP\")}>\n                      Post OP\n                    </div>\n                  </Grid>\n                  <Grid item xs={12}>\n                    <div className={classes.BoxOptometry} onClick={() => clinicClicked(\"Optometry\")}>\n                      Optometry\n                    </div>\n                  </Grid>\n\n\n                </Grid>\n\n                <div\n                  style={{\n                    position: \"absolute\",\n                    bottom: \"0px\",\n                    right: \"5px\",\n                  }}\n                >\n                  <Grid\n                    container\n                    direction=\"row\"\n                    justify=\"flex-end\"\n                    alignItems=\"center\"\n                    spacing={1}\n                  >\n                    <Grid item>\n                      <Button\n                        onClick={handleClose}\n                        style={{ width: \"100px\" }}\n                      >\n                        close\n                      </Button>\n                    </Grid>\n                   \n                  </Grid>\n                </div>\n              </div>\n\n            </DialogContent>\n          </Dialog>\n        </React.Fragment>\n      )}\n    </React.Fragment>\n  );\n}\n","import PropTypes from 'prop-types';\n\n\nimport React, { useEffect } from 'react';\nimport Typography from '@material-ui/core/Typography';\n\n\nimport { makeStyles } from '@material-ui/core/styles';\nimport Grid from '@material-ui/core/Grid';\n\n\nimport dateformat from 'dateformat';\nimport { FormControl, IconButton, InputLabel, Select, Tooltip } from '@material-ui/core';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport CloseIcon from '@material-ui/icons/Close';\nimport TodayIcon from '@material-ui/icons/Today';\n\n\nconst useStyles = makeStyles((theme) => ({\n\n    loadingBox: {\n\n    }\n\n}));\n\n\nconst DateField = ({ title, value, dateChanged, error, todayButton, children }) => {\n\n    const [day, setDay] = React.useState('');\n    const [month, setMonth] = React.useState('');\n    const [year, setYear] = React.useState('');\n\n    const [dayArray, setDayArray] = React.useState([]);\n    const [monthArray, setMonthArray] = React.useState([]);\n    const [yearArray, setYearArray] = React.useState([]);\n\n    const updateDate = (dd, mm, yyyy) => {\n        let dayStr = `${dd}`;\n        let monthStr = `${mm + 1}`;\n\n\n        if (dayStr.length === 1) {\n            dayStr = `0${dayStr}`;\n        }\n\n        if (monthStr.length === 1) {\n            monthStr = `0${monthStr}`;\n        }\n\n        dateChanged(`${yyyy}-${monthStr}-${dayStr}`);\n\n\n    }\n\n    const handleDayChanged = (event) => {\n        setDay(event.target.value);\n        updateDate(event.target.value, month, year);\n    };\n\n    const handleMonthChanged = (event) => {\n        setMonth(event.target.value);\n        updateDate(day, event.target.value, year);\n    };\n\n    const handleYearChanged = (event) => {\n        setYear(event.target.value);\n        updateDate(day, month, event.target.value);\n    };\n\n    const resetDate = () => {\n        setDay(\"\")\n        setYear(\"\")\n        setMonth(\"\")\n        dateChanged(\"\")\n    }\n\n    const todayDate = () => {\n        const today = new Date()\n        updateDate(today.getDate(), today.getMonth(), today.getFullYear())\n    }\n\n\n    useEffect(() => {\n        if (value && value.length === 10) {\n            const d = parseInt(value.substr(8, 2));\n            const m = parseInt(value.substr(5, 2));\n            const y = parseInt(value.substr(0, 4));\n\n            setDay(d);\n            setMonth(m - 1);\n            setYear(y);\n        }else if (!value)\n        {\n            resetDate()\n        }\n\n\n    }, [value]);\n\n    useEffect(() => {\n\n        const days = [];\n        const months = [];\n        const years = [];\n\n\n        for (var i = 1; i <= 31; i++) {\n            days.push(i);\n        }\n\n        for (i = 0; i < 12; i++) {\n            months.push(dateformat(new Date(2020, i, 5), 'mmmm'));\n        }\n\n        for (i = 1900; i <= new Date().getFullYear() + 1; i++) {\n            years.push(i);\n        }\n\n\n        setDayArray(days);\n        setMonthArray(months);\n        setYearArray(years);\n\n    }, [])\n\n    return (\n\n        <React.Fragment>\n\n\n            <div style={{ position: \"relative\", border: `1px solid ${error ? 'red' : '#ddd'}`, borderRadius: \"10px\", padding: \"20px\", paddingBottom: \"20px\", marginTop: \"20px\" }}>\n\n                <div style={{ position: \"absolute\", top: \"-15px\", left: \"15px\", backgroundColor: \"#fff\", color: `${error ? 'red' : '#555'}`, padding: \"5px\", paddingLeft: \"10px\", paddingRight: \"10px\" }}>\n                    {title}\n                </div>\n\n                <div style={{ position: \"absolute\", top: \"-25px\", right: \"10px\", backgroundColor: \"#fff\", color: `${error ? 'red' : '#555'}`, padding: \"5px\", paddingLeft: \"10px\", paddingRight: \"10px\" }}>\n                    <Tooltip title=\"Clear Date\">\n                        <IconButton onClick={resetDate}>\n                            <CloseIcon />\n                        </IconButton>\n                    </Tooltip>\n                </div>\n\n                {todayButton && (\n                    <div style={{ position: \"absolute\", top: \"-25px\", right: \"70px\", backgroundColor: \"#fff\", color: `${error ? 'red' : '#555'}`, padding: \"5px\", paddingLeft: \"10px\", paddingRight: \"10px\" }}>\n                        <Tooltip title=\"Today\">\n                            <IconButton onClick={todayDate}>\n                                <TodayIcon />\n                            </IconButton>\n                        </Tooltip>\n                    </div>\n\n                )}\n\n\n\n\n\n                <Grid\n                    container\n                    direction=\"row\"\n                    justify=\"flex-start\"\n                    alignItems=\"flex-start\"\n                    spacing={2}\n                >\n\n\n                    <Grid item xs={12} sm={4}>\n                        <FormControl fullWidth>\n                            <InputLabel id=\"day-label\">Day</InputLabel>\n                            <Select\n\n                                labelId=\"day-label\"\n                                id=\"day-select\"\n                                value={day}\n                                onChange={handleDayChanged}\n                            >\n                                {\n                                    dayArray.map(item => (\n                                        <MenuItem value={item}>{item}</MenuItem>\n                                    )\n                                    )}\n                            </Select>\n                        </FormControl>\n\n\n                    </Grid>\n\n                    <Grid item xs={12} sm={4}>\n                        <FormControl fullWidth>\n                            <InputLabel id=\"month-label\">Month</InputLabel>\n                            <Select\n                                labelId=\"month-label\"\n                                id=\"month-select\"\n                                value={month}\n                                onChange={handleMonthChanged}\n                            >\n                                {\n                                    monthArray.map((item, index) => (\n                                        <MenuItem value={index}>{item}</MenuItem>\n                                    )\n                                    )}\n                            </Select>\n                        </FormControl>\n\n\n                    </Grid>\n\n                    <Grid item xs={12} sm={4}>\n                        <FormControl fullWidth>\n                            <InputLabel id=\"day-label\">Year</InputLabel>\n                            <Select\n                                labelId=\"year-label\"\n                                id=\"year-select\"\n                                value={year}\n                                onChange={handleYearChanged}\n                            >\n                                {\n                                    yearArray.map(item => (\n                                        <MenuItem value={item}>{item}</MenuItem>\n                                    )\n                                    )}\n                            </Select>\n                        </FormControl>\n                    </Grid>\n                </Grid>\n\n                <div>\n                    {children}\n                </div>\n\n            </div>\n\n\n        </React.Fragment>\n    );\n}\n\n\nDateField.propTypes = {\n    title: PropTypes.string.isRequired,\n    value: PropTypes.string.isRequired,\n    dateChanged: PropTypes.func.isRequired,\n    error: PropTypes.bool\n};\n\nexport default DateField;\n\n\n\n\n","import API from './api';\nimport axiosRetry from 'axios-retry';\n\nexport default class PatientService {\n\n\n   static registerNewPatient = (payload) =>\n   {\n      return API.post(`/api/optimalvision/patient/registernewpatient`, payload);\n   }\n\n   static updatePatient = (payload) =>\n   {\n      return API.post(`/api/optimalvision/patient/updatepatient`, payload);\n   } \n\n   static deletePatient = (id) =>\n   {\n      return API.post(`/api/optimalvision/patient/deletepatient?id=${id}`);\n   } \n\n   static unDeletePatient = (id) =>\n   {\n      return API.post(`/api/optimalvision/patient/undeletepatient?id=${id}`);\n   } \n   \n    static getPatientById = (id) =>\n    {\n       return API.get(`/api/optimalvision/patient/getpatientbyid?id=${id}`);\n    }\n\n    static getPatientByPatientId = (patiantID) =>\n    {\n       return API.get(`/api/optimalvision/patient/getpatientbypatientid?patiantID=${patiantID}`);\n    }\n\n    static getAllPatients = () =>\n    {\n      return API.get(`/api/optimalvision/patient/getallpatients`);\n    }\n\n    static getDeletedPatients= (limit) =>\n    {\n      if (!limit) limit = 25 \n       return API.get(`/api/optimalvision/patiant/getdeletedpatients`);\n    }\n\n}","import React, { useEffect, useRef, useState } from \"react\";\nimport BookService from \"./services/BookService\";\nimport Typography from \"@material-ui/core/Typography\";\nimport {\n    AppBar,\n    Backdrop,\n    Button,\n    Checkbox,\n    CircularProgress,\n    DialogActions,\n    DialogContentText,\n    Divider,\n    FormControlLabel,\n    Grid,\n    IconButton,\n    InputAdornment,\n    InputLabel,\n    Link,\n    makeStyles,\n    MenuItem,\n    Select,\n    TextField,\n    Toolbar,\n    Tooltip,\n} from \"@material-ui/core\";\nimport GlobalState from \"./../GlobalState\";\nimport { withStyles } from \"@material-ui/core/styles\";\n\nimport Dialog from \"@material-ui/core/Dialog\";\nimport DialogContent from \"@material-ui/core/DialogContent\";\n\nimport DialogTitle from \"@material-ui/core/DialogTitle\";\nimport Draggable from \"react-draggable\";\nimport Paper from \"@material-ui/core/Paper\";\n\nimport Alert from \"@material-ui/lab/Alert\";\n\nimport PropTypes from \"prop-types\";\nimport LinearProgress from \"@material-ui/core/LinearProgress\";\nimport Box from \"@material-ui/core/Box\";\n\nimport Radio from \"@material-ui/core/Radio\";\nimport RadioGroup from \"@material-ui/core/RadioGroup\";\nimport FormControl from \"@material-ui/core/FormControl\";\nimport FormLabel from \"@material-ui/core/FormLabel\";\nimport NumberFormat from \"react-number-format\";\n\nimport AccessAlarmsIcon from '@material-ui/icons/AccessAlarms';\nimport DateField from \"./DateField\";\n\nimport Tabs from '@material-ui/core/Tabs';\nimport Tab from '@material-ui/core/Tab';\n\nimport CloseIcon from '@material-ui/icons/Close';\nimport Slide from '@material-ui/core/Slide';\nimport PatientService from \"./services/PatientService\";\nimport dateFormat from \"dateformat\";\n\nimport SaveIcon from '@material-ui/icons/Save';\n\nfunction TabPanel(props) {\n    const { children, value, index, ...other } = props;\n\n    return (\n        <div\n            role=\"tabpanel\"\n            hidden={value !== index}\n            id={`vertical-tabpanel-${index}`}\n            aria-labelledby={`vertical-tab-${index}`}\n            {...other}\n            style={{ width: \"100%\" }}\n        >\n            {value === index && (\n                <div style={{ padding: \"20px\", width: \"100%\" }}>\n                    {children}\n                </div>\n            )}\n        </div>\n    );\n}\n\nTabPanel.propTypes = {\n    children: PropTypes.node,\n    index: PropTypes.any.isRequired,\n    value: PropTypes.any.isRequired,\n};\n\nfunction a11yProps(index) {\n    return {\n        id: `vertical-tab-${index}`,\n        'aria-controls': `vertical-tabpanel-${index}`,\n    };\n}\n\nconst useStyles = makeStyles((theme) => ({\n    appBar: {\n        position: 'relative',\n    },\n    title: {\n        marginLeft: theme.spacing(2),\n        flex: 1,\n    },\n\n    root: {\n        paddingTop: \"8px\",\n        flexGrow: 1,\n        backgroundColor: theme.palette.background.paper,\n        display: 'flex',\n        height: 224,\n    },\n    tabs: {\n        borderRight: `1px solid ${theme.palette.divider}`,\n    },\n\n    backdrop: {\n        zIndex: theme.zIndex.drawer + 5,\n        color: \"#fff\",\n    },\n\n    titleCenter: {\n        width: \"100%\",\n        textAlign: \"center\",\n        fontSize: \"1.1rem\",\n        color: theme.palette.primary.main,\n        fontWeight: \"500\",\n        borderBottom: `2px dashed ${theme.palette.primary.main}`\n    },\n\n    eyeText: {\n        width: \"100%\",\n        textAlign: \"left\",\n        fontSize: \"1.1rem\",\n        color: theme.palette.primary.main,\n        fontWeight: \"500\",\n        paddingTop: \"15px\"\n    }\n\n}));\n\nconst Transition = React.forwardRef(function Transition(props, ref) {\n    return <Slide direction=\"up\" ref={ref} {...props} />;\n});\n\nexport default function PatientDialog(props) {\n    const classes = useStyles();\n\n    const [state, setState] = React.useContext(GlobalState);\n\n    const [patient, setPatient] = React.useState({ formData: {} })\n    const [saving, setSaving] = React.useState(false);\n\n\n    const [patientIDError, setPatientIDError] = React.useState(false)\n    const [nameError, setNameError] = React.useState(false)\n    const [surnameError, setSurnameError] = React.useState(false)\n    const [birthDateError, setBirthDateError] = React.useState(false)\n\n    const [patientRepeated, setPatientRepeated] = React.useState(false)\n\n\n    const [value, setValue] = React.useState(0);\n\n    const [history, setHistory] = React.useState([]);\n    const [backupFormData, setBackUpFormData] = React.useState(null);\n\n    const [openDeleteDialog, setOpenDeleteDialog] = React.useState(false)\n\n    const handleCloseDeleteDialog = () => {\n        setOpenDeleteDialog(false)\n    }\n\n\n    const handleChange = (event, newValue) => {\n        setValue(newValue);\n    };\n\n    useEffect(() => {\n        if (props.open) {\n            const _history = []\n\n            if (props.patient) {\n                setPatient({ ...props.patient, formData: props.patient.formData ? JSON.parse(props.patient.formData) : {} })\n                setBackUpFormData(props.patient.formData ? JSON.parse(props.patient.formData) : {})\n                if (props.patient.history) {\n                    props.patient.history.forEach(record => {\n                        _history.push(JSON.parse(record))\n                    });\n                    setSelectedVersion(0)\n                }\n            }\n            else {\n                setPatient({ formData: {},  name : props.name || '', surname: props.surname || ''})\n            }\n\n            setHistory(_history.reverse())\n\n        }\n    }, [props.patient, props.open])\n\n\n\n    const handleClose = () => {\n        props.handleClose();\n        setValue(0)\n        setPatient({ formData: {} })\n        setPatientIDError(false)\n        setNameError(false)\n        setSurnameError(false)\n        setPatientRepeated(false)\n    };\n\n    const saveClicked = async () => {\n\n        if (!validatePatient()) {\n            setValue(0)\n            return\n        }\n\n        try {\n            setPatientRepeated(false)\n            setSaving(true)\n            patient.formData = JSON.stringify(patient.formData)\n            if (props.patient) {\n                const res = await PatientService.updatePatient({ id: patient._id, patient: patient })\n                setSaving(false)\n                if (res.data.status === \"OK\") {\n                    setState(state => ({ ...state, patientDialogDataChanged: !state.patientDialogDataChanged }))\n                    handleClose();\n                }\n            } else {\n                const res = await PatientService.registerNewPatient({ patient: patient })\n                setSaving(false)\n                if (res.data.status === \"OK\") {\n                    setState(state => ({ ...state, patientDialogDataChanged: !state.patientDialogDataChanged }))\n                    handleClose();\n                } else if (res.data.status === \"FAILED\" && res.data.error === \"Repeated Patient!\") {\n                    setPatientIDError(true)\n                    setPatientRepeated(true)\n                    setValue(0)\n\n                }\n            }\n        }\n        catch (err) {\n            setSaving(false)\n            console.error(err)\n        }\n    }\n\n    const deleteClicked = async () => {\n\n        setOpenDeleteDialog(false)\n\n        setSaving(true)\n        try {\n            await PatientService.deletePatient(props.patient._id)\n            setSaving(false)\n            setState((state) => ({\n                ...state,\n                patientDialogDataChanged: !state.patientDialogDataChanged\n                    ? true\n                    : false,\n            }));\n            handleClose();\n        }\n        catch (err) {\n            console.error(err)\n            setSaving(false)\n        }\n    }\n\n\n\n    const validatePatient = () => {\n        var error = false\n        if (!patient.patientID || patient.patientID.trim().length === 0) {\n            error = true\n            setPatientIDError(true)\n        }\n        if (!patient.name || patient.name.trim().length === 0) {\n            error = true\n            setNameError(true)\n        }\n\n        if (!patient.surname || patient.surname.trim().length === 0) {\n            error = true\n            setSurnameError(true)\n        }\n\n        if (patient.birthDate && patient.birthDate.length !== 10) {\n            setBirthDateError(true)\n            error = true\n        }\n\n        return !error\n\n    }\n\n    const formatDate = (date) => {\n        return dateFormat(date, \"dd-mm-yyyy , HH:MM:ss\")\n    }\n\n    const [selectedVersion, setSelectedVersion] = React.useState(0)\n\n    const showHistoryComboBox = () => {\n        return (\n            <React.Fragment>\n                <div style={{ marginTop: \"-10px\" }}>\n                    <span style={{ color: \"#fff\", fontWeight: \"500\", fontSize: \"1rem\", marginRight: \"10px\" }}>\n                        Version :\n                    </span>\n                    <Select\n                        label=\"Version\"\n                        labelId=\"version-label\"\n                        id=\"version-label\"\n                        style={{ color: \"#fff\", padding: \"0px 10px\" }}\n                        value={selectedVersion}\n                        onChange={(event) => {\n                            setSelectedVersion(event.target.value)\n                            if (event.target.value === 0) {\n                                setPatient({ ...patient, formData: backupFormData })\n                            } else {\n                                setPatient({ ...patient, formData: history[event.target.value - 1] })\n                            }\n\n                        }}\n\n                    >\n                        <MenuItem value={0}>{`${formatDate(patient.formData.timeStamp)} ( Current )`}</MenuItem>\n\n                        {history.map((item, index) => (\n                            <MenuItem value={index + 1}>{`${formatDate(item.timeStamp)} ( History )`}</MenuItem>\n                        ))\n                        }\n                    </Select>\n\n                </div>\n            </React.Fragment>\n        )\n    }\n\n\n    return (\n        <React.Fragment>\n            <React.Fragment>\n                <Dialog fullScreen open={props.open} onClose={handleClose} TransitionComponent={Transition}>\n                    <AppBar className={classes.appBar} style={(selectedVersion > 0 && history && history.length > 0) ? { backgroundColor: \"#777\" } : {}} color=\"secondary\">\n                        <Toolbar>\n                            <IconButton edge=\"start\" color=\"inherit\" onClick={handleClose} aria-label=\"close\">\n                                <CloseIcon />\n                            </IconButton>\n                            <Typography variant=\"h6\" className={classes.title}>\n                                {props.title}\n                            </Typography>\n\n\n                            <Button startIcon={<SaveIcon />} variant=\"contained\" color=\"primary\" onClick={saveClicked} disabled={selectedVersion > 0 && history && history.length > 0}>\n                                {props.saveButtonText}\n                            </Button>\n                        </Toolbar>\n\n                        <Grid container direction=\"column\" alignItems=\"center\" justify=\"center\">\n\n                            {history && history.length > 0 && (\n                                <Grid item>\n                                    {showHistoryComboBox()}\n                                </Grid>\n                            )}\n                        </Grid>\n\n                    </AppBar>\n\n                    <div className={classes.root}>\n                        <Tabs\n                            orientation=\"vertical\"\n                            variant=\"scrollable\"\n                            value={value}\n                            onChange={handleChange}\n                            aria-label=\"Vertical tabs example\"\n                            indicatorColor=\"secondary\"\n                            textColor=\"secondary\"\n                            className={classes.tabs}\n                        >\n                            <Tab label=\"Personal Details\" {...a11yProps(0)} />\n                            <Tab label={`History & Symptoms`} {...a11yProps(1)} />\n                            <Tab label=\"Dry Eyes\" {...a11yProps(2)} />\n                            <Tab label=\"Ocular Examination\" {...a11yProps(3)} />\n                            <Tab label=\"Diagnostics\" {...a11yProps(4)} />\n                            <Tab label=\"Uncorrected VA\" {...a11yProps(5)} />\n                            <Tab label=\"Refraction\" {...a11yProps(6)} />\n                            <Tab label=\"Auto Refraction\" {...a11yProps(7)} />\n                            <Tab label=\"Manifest Refraction\" {...a11yProps(8)} />\n                            <Tab label=\"Target Refraction\" {...a11yProps(9)} />\n                            <Tab label=\"Recommendation\" {...a11yProps(10)} />\n                        </Tabs>\n                        <TabPanel value={value} index={0}>\n                            <Grid container spacing={4}>\n                                <Grid item xs={12} sm={6} md={4}>\n                                    <TextField\n                                        disabled={props.patient}\n                                        name=\"patientid\"\n                                        id=\"patientid\"\n                                        label=\"Patient ID\"\n                                        fullWidth\n                                        required\n                                        helperText={patientRepeated ? 'This PatientID is already assigned to another patient' : ''}\n                                        error={patientIDError}\n                                        value={patient.patientID || ''}\n                                        onChange={(event) => {\n                                            setPatient({ ...patient, patientID: event.target.value })\n                                            setPatientIDError(false)\n                                        }}\n                                        autoComplete=\"none\"\n                                        variant=\"outlined\"\n                                    />\n                                </Grid>\n                                <Grid item xs={12} sm={6} md={4}>\n                                    <TextField\n                                        name=\"firstname\"\n                                        id=\"firstname\"\n                                        label=\"First Name\"\n                                        fullWidth\n                                        required\n                                        error={nameError}\n                                        value={patient.name || ''}\n                                        onChange={(event) => {\n                                            setPatient({ ...patient, name: event.target.value })\n                                            setNameError(false)\n                                        }}\n                                        autoComplete=\"none\"\n                                        variant=\"outlined\"\n                                    />\n                                </Grid>\n                                <Grid item xs={12} sm={6} md={4}>\n                                    <TextField\n                                        name=\"surname\"\n                                        id=\"surname\"\n                                        label=\"Surname\"\n                                        fullWidth\n                                        required\n                                        error={surnameError}\n                                        value={patient.surname || ''}\n                                        onChange={(event) => {\n                                            setPatient({ ...patient, surname: event.target.value })\n                                            setSurnameError(false)\n                                        }}\n                                        autoComplete=\"none\"\n                                        variant=\"outlined\"\n                                    />\n                                </Grid>\n                                <Grid item xs={12} sm={6} md={4}>\n                                    <FormControl fullWidth variant=\"outlined\" >\n                                        <InputLabel id=\"gender-label\">Gender</InputLabel>\n                                        <Select\n                                            label=\"Gender\"\n                                            labelId=\"gender-label\"\n                                            id=\"gender-label\"\n                                            fullWidth\n                                            style={{ height: \"90px\" }}\n                                            value={patient.gender || ''}\n                                            onChange={(event) => {\n                                                setPatient({ ...patient, gender: event.target.value })\n                                            }}\n\n                                        >\n                                            <MenuItem value={\"Male\"}>Male</MenuItem>\n                                            <MenuItem value={\"Female\"}>Female</MenuItem>\n                                        </Select>\n                                    </FormControl>\n                                </Grid>\n                                <Grid item xs={12} sm={6} md={8} style={{ marginTop: \"-20px\" }} >\n                                    <DateField\n                                        error={birthDateError}\n                                        value={patient.birthDate || ''}\n                                        title=\"DOB\"\n                                        dateChanged={(value) => {\n                                            setPatient({ ...patient, birthDate: value })\n                                            setBirthDateError(false)\n                                        }}\n                                    />\n                                </Grid>\n                                <Grid item xs={12} sm={6} md={4}>\n                                    <TextField\n                                        name=\"postcode\"\n                                        id=\"postcode\"\n                                        label=\"Postcode\"\n                                        fullWidth\n                                        autoComplete=\"none\"\n                                        value={patient.postCode || ''}\n                                        onChange={(event) => {\n                                            setPatient({ ...patient, postCode: event.target.value })\n                                        }}\n                                        variant=\"outlined\"\n\n                                    />\n                                </Grid>\n                                <Grid item xs={12} sm={6} md={8}>\n                                    <TextField\n                                        name=\"address\"\n                                        id=\"address\"\n                                        label=\"Address\"\n                                        fullWidth\n                                        autoComplete=\"none\"\n                                        value={patient.address || ''}\n                                        onChange={(event) => {\n                                            setPatient({ ...patient, address: event.target.value })\n                                        }}\n\n                                        variant=\"outlined\"\n\n                                    />\n                                </Grid>\n\n                                <Grid item xs={12} sm={6} md={4}>\n                                    <TextField\n                                        name=\"hometel\"\n                                        id=\"hometel\"\n                                        label=\"Home Tel\"\n                                        fullWidth\n                                        autoComplete=\"none\"\n                                        value={patient.homeTel || ''}\n                                        onChange={(event) => {\n                                            setPatient({ ...patient, homeTel: event.target.value })\n                                        }}\n                                        variant=\"outlined\"\n\n\n                                    />\n                                </Grid>\n                                <Grid item xs={12} sm={6} md={4}>\n                                    <TextField\n                                        name=\"mobiletel\"\n                                        id=\"mobiletel\"\n                                        label=\"Mobile Tel\"\n                                        fullWidth\n                                        autoComplete=\"none\"\n                                        value={patient.mobileTel || ''}\n                                        onChange={(event) => {\n                                            setPatient({ ...patient, mobileTel: event.target.value })\n                                        }}\n\n                                        variant=\"outlined\"\n\n                                    />\n                                </Grid>\n                                <Grid item xs={12} sm={6} md={4}>\n                                    <TextField\n                                        name=\"email\"\n                                        id=\"email\"\n                                        label=\"Email\"\n                                        fullWidth\n                                        autoComplete=\"none\"\n                                        value={patient.email || ''}\n                                        onChange={(event) => {\n                                            setPatient({ ...patient, email: event.target.value })\n                                        }}\n                                        variant=\"outlined\"\n\n\n                                    />\n                                </Grid>\n                                <Grid item xs={12} sm={6}>\n                                    <TextField\n                                        name=\"occupation\"\n                                        id=\"occupation\"\n                                        label=\"Occupation\"\n                                        fullWidth\n                                        autoComplete=\"none\"\n                                        value={patient.formData.occupation || ''}\n                                        onChange={(event) => {\n                                            setPatient({ ...patient, formData: { ...patient.formData, occupation: event.target.value } })\n                                        }}\n\n                                        variant=\"outlined\"\n\n                                    />\n                                </Grid>\n                                <Grid item xs={12} sm={6}>\n                                    <TextField\n                                        name=\"gpname\"\n                                        id=\"gpname\"\n                                        label={`GP Name & Address`}\n                                        fullWidth\n                                        autoComplete=\"none\"\n                                        value={patient.formData.gpname || ''}\n                                        onChange={(event) => {\n                                            setPatient({ ...patient, formData: { ...patient.formData, gpname: event.target.value } })\n                                        }}\n\n                                        variant=\"outlined\"\n\n                                    />\n                                </Grid>\n                                <Grid item xs={12} sm={6}>\n                                    <TextField\n                                        name=\"kincontact\"\n                                        id=\"kincontact\"\n                                        label=\"Next of Kin Contact\"\n                                        fullWidth\n                                        autoComplete=\"none\"\n                                        value={patient.formData.kincontact || ''}\n                                        onChange={(event) => {\n                                            setPatient({ ...patient, formData: { ...patient.formData, kincontact: event.target.value } })\n                                        }}\n                                        variant=\"outlined\"\n\n                                    />\n                                </Grid>\n                                <Grid item xs={12} sm={6}>\n                                    <TextField\n                                        name=\"prevsighttest\"\n                                        id=\"prevsignttest\"\n                                        label=\"Previous Sight Test\"\n                                        fullWidth\n                                        autoComplete=\"none\"\n                                        value={patient.formData.prevsighttest || ''}\n                                        onChange={(event) => {\n                                            setPatient({ ...patient, formData: { ...patient.formData, prevsighttest: event.target.value } })\n                                        }}\n                                        variant=\"outlined\"\n\n                                    />\n                                </Grid>\n\n                                {props.patient && (\n                                    <Grid item xs={12} style={{ marginTop: \"20px\" }}>\n                                        <Button\n                                            onClick={() => setOpenDeleteDialog(true)}\n                                            variant=\"contained\"\n                                            fullWidth\n                                            color=\"primary\"\n                                            // style={{ width: \"100px\" }}\n                                            style={{ backgroundColor: \"#c70000\", color: \"#fff\" }}\n                                            disabled={saving}\n                                        >\n                                            Delete This Patient\n                                  </Button>\n                                    </Grid>\n\n\n                                )}\n                            </Grid>\n                        </TabPanel>\n                        <TabPanel value={value} index={1}>\n                            <Grid container spacing={2}>\n                                <Grid item xs={12} md={6}>\n                                    <TextField\n                                        name=\"cc\"\n                                        id=\"cc\"\n                                        label=\"C.C\"\n                                        fullWidth\n                                        multiline\n                                        rows={3}\n                                        variant=\"outlined\"\n                                        autoComplete=\"none\"\n                                        value={patient.formData.cc || ''}\n                                        onChange={(event) => {\n                                            setPatient({ ...patient, formData: { ...patient.formData, cc: event.target.value } })\n                                        }}\n\n                                    />\n                                </Grid>\n                                <Grid item xs={12} md={6}>\n                                    <TextField\n                                        name=\"prevmedicalhistory\"\n                                        id=\"prevmedicalhistory\"\n                                        label=\"Previous Medical History\"\n                                        fullWidth\n                                        multiline\n                                        rows={3}\n                                        variant=\"outlined\"\n                                        autoComplete=\"none\"\n                                        value={patient.formData.prevmedicalhistory || ''}\n                                        onChange={(event) => {\n                                            setPatient({ ...patient, formData: { ...patient.formData, prevmedicalhistory: event.target.value } })\n                                        }}\n\n                                    />\n                                </Grid>\n                                <Grid item xs={12} md={6}>\n                                    <TextField\n                                        name=\"prevocularhistory\"\n                                        id=\"prevocularhistory\"\n                                        label=\"Previous Ocular History\"\n                                        fullWidth\n                                        multiline\n                                        rows={3}\n                                        variant=\"outlined\"\n                                        autoComplete=\"none\"\n                                        value={patient.formData.prevocularhistory || ''}\n                                        onChange={(event) => {\n                                            setPatient({ ...patient, formData: { ...patient.formData, prevocularhistory: event.target.value } })\n                                        }}\n\n\n                                    />\n                                </Grid>\n                                <Grid item xs={12} md={6}>\n                                    <TextField\n                                        name=\"familyhistory\"\n                                        id=\"familyhistory\"\n                                        label=\"Family History\"\n                                        fullWidth\n                                        multiline\n                                        rows={3}\n                                        variant=\"outlined\"\n                                        autoComplete=\"none\"\n                                        value={patient.formData.familyhistory || ''}\n                                        onChange={(event) => {\n                                            setPatient({ ...patient, formData: { ...patient.formData, familyhistory: event.target.value } })\n                                        }}\n\n                                    />\n                                </Grid>\n                                <Grid item xs={12} md={6}>\n                                    <TextField\n                                        name=\"medications\"\n                                        id=\"medications\"\n                                        label=\"Medications\"\n                                        fullWidth\n                                        multiline\n                                        rows={3}\n                                        variant=\"outlined\"\n                                        autoComplete=\"none\"\n                                        value={patient.formData.medications || ''}\n                                        onChange={(event) => {\n                                            setPatient({ ...patient, formData: { ...patient.formData, medications: event.target.value } })\n                                        }}\n\n\n                                    />\n                                </Grid>\n                                <Grid item xs={12} md={6}>\n                                    <TextField\n                                        name=\"grafth\"\n                                        id=\"grafth\"\n                                        label=\"Graft H\"\n                                        fullWidth\n                                        multiline\n                                        rows={3}\n                                        variant=\"outlined\"\n                                        autoComplete=\"none\"\n                                        value={patient.formData.grafth || ''}\n                                        onChange={(event) => {\n                                            setPatient({ ...patient, formData: { ...patient.formData, grafth: event.target.value } })\n                                        }}\n\n\n                                    />\n                                </Grid>\n                                <Grid item xs={12} md={6}>\n                                    <TextField\n                                        name=\"allergies\"\n                                        id=\"allregies\"\n                                        label=\"Allergies\"\n                                        fullWidth\n                                        multiline\n                                        rows={3}\n                                        variant=\"outlined\"\n                                        autoComplete=\"none\"\n                                        value={patient.formData.allergies || ''}\n                                        onChange={(event) => {\n                                            setPatient({ ...patient, formData: { ...patient.formData, allergies: event.target.value } })\n                                        }}\n\n                                    />\n                                </Grid>\n                                <Grid item xs={12} md={6}>\n                                    <TextField\n                                        name=\"contactlenswearer\"\n                                        id=\"contactlenswearer\"\n                                        label=\"Contact Lens Wearer\"\n                                        fullWidth\n                                        multiline\n                                        rows={3}\n                                        variant=\"outlined\"\n                                        autoComplete=\"none\"\n                                        placeholder={` Yes/No \\n Soft/RGP/EW`}\n                                        value={patient.formData.contactlenswearer || ''}\n                                        onChange={(event) => {\n                                            setPatient({ ...patient, formData: { ...patient.formData, contactlenswearer: event.target.value } })\n                                        }}\n\n                                    />\n                                </Grid>\n                                <Grid item xs={12} md={6}>\n                                    <TextField\n                                        name=\"hobbies\"\n                                        id=\"hobbies\"\n                                        label=\"Lifestyle / Hobbies\"\n                                        fullWidth\n                                        multiline\n                                        rows={3}\n                                        variant=\"outlined\"\n                                        autoComplete=\"none\"\n                                        value={patient.formData.hobbies || ''}\n                                        onChange={(event) => {\n                                            setPatient({ ...patient, formData: { ...patient.formData, hobbies: event.target.value } })\n                                        }}\n\n\n                                    />\n                                </Grid>\n                                <Grid item xs={12} md={6}>\n                                    <TextField\n                                        name=\"vdu\"\n                                        id=\"vdu\"\n                                        label=\"VDU\"\n                                        fullWidth\n                                        multiline\n                                        rows={3}\n                                        variant=\"outlined\"\n                                        autoComplete=\"none\"\n                                        value={patient.formData.vdu || ''}\n                                        onChange={(event) => {\n                                            setPatient({ ...patient, formData: { ...patient.formData, vdu: event.target.value } })\n                                        }}\n\n                                    />\n                                </Grid>\n                                <Grid item xs={12} md={6}>\n                                    <TextField\n                                        name=\"driver\"\n                                        id=\"driver\"\n                                        label=\"Driver\"\n                                        fullWidth\n                                        multiline\n                                        rows={3}\n                                        variant=\"outlined\"\n                                        autoComplete=\"none\"\n                                        value={patient.formData.driver || ''}\n                                        onChange={(event) => {\n                                            setPatient({ ...patient, formData: { ...patient.formData, driver: event.target.value } })\n                                        }}\n\n\n                                    />\n                                </Grid>\n                                <Grid item xs={12} md={6}>\n                                    <TextField\n                                        name=\"othernotes\"\n                                        id=\"othernotes\"\n                                        label=\"Other Notes\"\n                                        fullWidth\n                                        multiline\n                                        rows={3}\n                                        variant=\"outlined\"\n                                        autoComplete=\"none\"\n                                        value={patient.formData.othernotes || ''}\n                                        onChange={(event) => {\n                                            setPatient({ ...patient, formData: { ...patient.formData, othernotes: event.target.value } })\n                                        }}\n\n                                    />\n                                </Grid>\n                            </Grid>\n                        </TabPanel>\n                        <TabPanel value={value} index={2}>\n                            <Grid container spacing={4}>\n                                <Grid item xs={12} sm={6}>\n                                    <TextField\n                                        name=\"dryevehistory\"\n                                        id=\"dryevehistory\"\n                                        label=\"Dry Eye History\"\n                                        fullWidth\n                                        multiline\n                                        rows={3}\n                                        variant=\"outlined\"\n                                        autoComplete=\"none\"\n                                        value={patient.formData.dryeyehistory || ''}\n                                        onChange={(event) => {\n                                            setPatient({ ...patient, formData: { ...patient.formData, dryeyehistory: event.target.value } })\n                                        }}\n\n                                    />\n                                </Grid>\n                                <Grid item xs={12} sm={6}>\n                                    <TextField\n                                        name=\"nightvisionglare\"\n                                        id=\"nightvisionglare\"\n                                        label=\"Night Vision / Glare\"\n                                        fullWidth\n                                        multiline\n                                        rows={3}\n                                        variant=\"outlined\"\n                                        autoComplete=\"none\"\n                                        value={patient.formData.nightvisionglare || ''}\n                                        onChange={(event) => {\n                                            setPatient({ ...patient, formData: { ...patient.formData, nightvisionglare: event.target.value } })\n                                        }}\n\n                                    />\n                                </Grid>\n                                <Grid item xs={12} sm={6}>\n                                    <TextField\n                                        name=\"ocularirritation\"\n                                        id=\"ocularirritation\"\n                                        label=\"Ocular Irritation\"\n                                        fullWidth\n                                        multiline\n                                        rows={3}\n                                        variant=\"outlined\"\n                                        autoComplete=\"none\"\n                                        value={patient.formData.ocularirritation || ''}\n                                        onChange={(event) => {\n                                            setPatient({ ...patient, formData: { ...patient.formData, ocularirritation: event.target.value } })\n                                        }}\n\n                                    />\n                                </Grid>\n                                <Grid item xs={12} sm={6}>\n                                    <TextField\n                                        name=\"wateryeyes\"\n                                        id=\"wateryeyes\"\n                                        label=\"Watery Eyes\"\n                                        fullWidth\n                                        multiline\n                                        rows={3}\n                                        variant=\"outlined\"\n                                        autoComplete=\"none\"\n                                        value={patient.formData.wateryeyes || ''}\n                                        onChange={(event) => {\n                                            setPatient({ ...patient, formData: { ...patient.formData, wateryeyes: event.target.value } })\n                                        }}\n\n                                    />\n                                </Grid>\n                                <Grid item xs={12} sm={6}>\n                                    <TextField\n                                        name=\"speedquestionariedone\"\n                                        id=\"speedquestionariedone\"\n                                        label=\"SPEED Questionnaire Done\"\n                                        fullWidth\n                                        multiline\n                                        rows={3}\n                                        variant=\"outlined\"\n                                        autoComplete=\"none\"\n                                        value={patient.formData.speedquestionariedone || ''}\n                                        onChange={(event) => {\n                                            setPatient({ ...patient, formData: { ...patient.formData, speedquestionariedone: event.target.value } })\n                                        }}\n\n                                    />\n                                </Grid>\n                            </Grid>\n                        </TabPanel>\n                        <TabPanel value={value} index={3}>\n                            <Grid container spacing={2}>\n                                <Grid item xs={12}>\n                                    <div className={classes.titleCenter || ''}>\n                                        ANTERIOR SEGMENT\n                                    </div>\n                                </Grid>\n                                <Grid item xs={12} md={6}>\n                                    <TextField\n                                        name=\"cornearight\"\n                                        id=\"cornearight\"\n                                        label=\"Cornea (Right Eye)\"\n                                        fullWidth\n                                        multiline\n                                        rows={1}\n                                        variant=\"outlined\"\n                                        autoComplete=\"none\"\n                                        value={patient.formData.cornearight || ''}\n                                        onChange={(event) => {\n                                            setPatient({ ...patient, formData: { ...patient.formData, cornearight: event.target.value } })\n                                        }}\n\n                                    />\n                                </Grid>\n                                <Grid item xs={12} md={6}>\n                                    <TextField\n                                        name=\"cornealeft\"\n                                        id=\"cornealeft\"\n                                        label=\"Cornea (Left Eye)\"\n                                        fullWidth\n                                        multiline\n                                        rows={1}\n                                        variant=\"outlined\"\n                                        autoComplete=\"none\"\n                                        value={patient.formData.cornealeft || ''}\n                                        onChange={(event) => {\n                                            setPatient({ ...patient, formData: { ...patient.formData, cornealeft: event.target.value } })\n                                        }}\n\n                                    />\n                                </Grid>\n                                <Grid item xs={12} md={6}>\n                                    <TextField\n                                        name=\"lidslashesright\"\n                                        id=\"lidslashesright\"\n                                        label={`Lids & Lashes (Right Eye)`}\n                                        fullWidth\n                                        multiline\n                                        rows={1}\n                                        variant=\"outlined\"\n                                        autoComplete=\"none\"\n                                        value={patient.formData.lidslashesright || ''}\n                                        onChange={(event) => {\n                                            setPatient({ ...patient, formData: { ...patient.formData, lidslashesright: event.target.value } })\n                                        }}\n\n                                    />\n                                </Grid>\n                                <Grid item xs={12} md={6}>\n                                    <TextField\n                                        name=\"lidslashesleft\"\n                                        id=\"lidslashesleft\"\n                                        label={`Lids & Lashes (Left Eye)`}\n                                        fullWidth\n                                        multiline\n                                        rows={1}\n                                        variant=\"outlined\"\n                                        autoComplete=\"none\"\n                                        value={patient.formData.lidslashesleft || ''}\n                                        onChange={(event) => {\n                                            setPatient({ ...patient, formData: { ...patient.formData, lidslashesleft: event.target.value } })\n                                        }}\n\n                                    />\n                                </Grid>\n                                <Grid item xs={12} md={6}>\n                                    <TextField\n                                        name=\"conjunctivaright\"\n                                        id=\"conjunctivaright\"\n                                        label={`Conjunctiva (Right Eye)`}\n                                        fullWidth\n                                        multiline\n                                        rows={1}\n                                        variant=\"outlined\"\n                                        autoComplete=\"none\"\n                                        value={patient.formData.conjunctivaright || ''}\n                                        onChange={(event) => {\n                                            setPatient({ ...patient, formData: { ...patient.formData, conjunctivaright: event.target.value } })\n                                        }}\n\n                                    />\n                                </Grid>\n                                <Grid item xs={12} md={6}>\n                                    <TextField\n                                        name=\"conjunctivaleft\"\n                                        id=\"conjunctivaleft\"\n                                        label={`Conjunctiva (Left Eye)`}\n                                        fullWidth\n                                        multiline\n                                        rows={1}\n                                        variant=\"outlined\"\n                                        autoComplete=\"none\"\n                                        value={patient.formData.conjunctivaleft || ''}\n                                        onChange={(event) => {\n                                            setPatient({ ...patient, formData: { ...patient.formData, conjunctivaleft: event.target.value } })\n                                        }}\n\n                                    />\n                                </Grid>\n                                <Grid item xs={12} md={6}>\n                                    <TextField\n                                        name=\"pupilright\"\n                                        id=\"pupilright\"\n                                        label={`Pupil/PERRLA/RPAD/SIZE (Right Eye)`}\n                                        fullWidth\n                                        multiline\n                                        rows={3}\n                                        variant=\"outlined\"\n                                        autoComplete=\"none\"\n                                        value={patient.formData.pupilright || ''}\n                                        onChange={(event) => {\n                                            setPatient({ ...patient, formData: { ...patient.formData, pupilright: event.target.value } })\n                                        }}\n\n                                    />\n                                </Grid>\n                                <Grid item xs={12} md={6}>\n                                    <TextField\n                                        name=\"pupilleft\"\n                                        id=\"pupilleft\"\n                                        label={`Pupil/PERRLA/RPAD/SIZE (Left Eye)`}\n                                        fullWidth\n                                        multiline\n                                        rows={3}\n                                        variant=\"outlined\"\n                                        autoComplete=\"none\"\n                                        value={patient.formData.pupilleft || ''}\n                                        onChange={(event) => {\n                                            setPatient({ ...patient, formData: { ...patient.formData, pupilleft: event.target.value } })\n                                        }}\n\n                                    />\n                                </Grid>\n                                <Grid item xs={12} md={6}>\n                                    <TextField\n                                        name=\"acright\"\n                                        id=\"acright\"\n                                        label={`A.C. (Right Eye)`}\n                                        fullWidth\n                                        multiline\n                                        rows={1}\n                                        variant=\"outlined\"\n                                        autoComplete=\"none\"\n                                        value={patient.formData.acright || ''}\n                                        onChange={(event) => {\n                                            setPatient({ ...patient, formData: { ...patient.formData, acright: event.target.value } })\n                                        }}\n\n                                    />\n                                </Grid>\n                                <Grid item xs={12} md={6}>\n                                    <TextField\n                                        name=\"acleft\"\n                                        id=\"acleft\"\n                                        label={`A.C. (Left Eye)`}\n                                        fullWidth\n                                        multiline\n                                        rows={1}\n                                        variant=\"outlined\"\n                                        autoComplete=\"none\"\n                                        value={patient.formData.acleft || ''}\n                                        onChange={(event) => {\n                                            setPatient({ ...patient, formData: { ...patient.formData, acleft: event.target.value } })\n                                        }}\n\n                                    />\n                                </Grid>\n                                <Grid item xs={12} md={6}>\n                                    <TextField\n                                        name=\"lensright\"\n                                        id=\"lensright\"\n                                        label={`Lens (Right Eye)`}\n                                        fullWidth\n                                        multiline\n                                        rows={1}\n                                        variant=\"outlined\"\n                                        autoComplete=\"none\"\n                                        value={patient.formData.lensright || ''}\n                                        onChange={(event) => {\n                                            setPatient({ ...patient, formData: { ...patient.formData, lensright: event.target.value } })\n                                        }}\n\n                                    />\n                                </Grid>\n                                <Grid item xs={12} md={6}>\n                                    <TextField\n                                        name=\"lensleft\"\n                                        id=\"lensleft\"\n                                        label={`Lens (Left Eye)`}\n                                        fullWidth\n                                        multiline\n                                        rows={1}\n                                        variant=\"outlined\"\n                                        autoComplete=\"none\"\n                                        value={patient.formData.lensleft || ''}\n                                        onChange={(event) => {\n                                            setPatient({ ...patient, formData: { ...patient.formData, lensleft: event.target.value } })\n                                        }}\n\n                                    />\n                                </Grid>\n                                <Grid item xs={12} md={6}>\n                                    <TextField\n                                        name=\"vitreousright\"\n                                        id=\"vitreousright\"\n                                        label={`Vitreous (Right Eye)`}\n                                        fullWidth\n                                        multiline\n                                        rows={1}\n                                        variant=\"outlined\"\n                                        autoComplete=\"none\"\n                                        value={patient.formData.vitreousright || ''}\n                                        onChange={(event) => {\n                                            setPatient({ ...patient, formData: { ...patient.formData, vitreousright: event.target.value } })\n                                        }}\n\n                                    />\n                                </Grid>\n                                <Grid item xs={12} md={6}>\n                                    <TextField\n                                        name=\"vitreousleft\"\n                                        id=\"vitreousleft\"\n                                        label={`Vitreous (Left Eye)`}\n                                        fullWidth\n                                        multiline\n                                        rows={1}\n                                        variant=\"outlined\"\n                                        autoComplete=\"none\"\n                                        value={patient.formData.vitreousleft || ''}\n                                        onChange={(event) => {\n                                            setPatient({ ...patient, formData: { ...patient.formData, vitreousleft: event.target.value } })\n                                        }}\n\n                                    />\n                                </Grid>\n                                <Grid item xs={12} md={6}>\n                                    <TextField\n                                        name=\"ombright\"\n                                        id=\"ombright\"\n                                        label={`OMB (Right Eye)`}\n                                        fullWidth\n                                        multiline\n                                        rows={1}\n                                        variant=\"outlined\"\n                                        autoComplete=\"none\"\n                                        value={patient.formData.ombright || ''}\n                                        onChange={(event) => {\n                                            setPatient({ ...patient, formData: { ...patient.formData, ombright: event.target.value } })\n                                        }}\n\n                                    />\n                                </Grid>\n                                <Grid item xs={12} md={6}>\n                                    <TextField\n                                        name=\"ombleft\"\n                                        id=\"ombleft\"\n                                        label={`OMB (Left Eye)`}\n                                        fullWidth\n                                        multiline\n                                        rows={1}\n                                        variant=\"outlined\"\n                                        autoComplete=\"none\"\n                                        value={patient.formData.ombleft || ''}\n                                        onChange={(event) => {\n                                            setPatient({ ...patient, formData: { ...patient.formData, ombleft: event.target.value } })\n                                        }}\n\n                                    />\n                                </Grid>\n                                <Grid item xs={12} md={6}>\n                                    <TextField\n                                        name=\"tbutright\"\n                                        id=\"tbutright\"\n                                        label={`TBUT (Right Eye)`}\n                                        fullWidth\n                                        multiline\n                                        rows={1}\n                                        variant=\"outlined\"\n                                        autoComplete=\"none\"\n                                        value={patient.formData.tbutright || ''}\n                                        onChange={(event) => {\n                                            setPatient({ ...patient, formData: { ...patient.formData, tbutright: event.target.value } })\n                                        }}\n\n                                    />\n                                </Grid>\n                                <Grid item xs={12} md={6}>\n                                    <TextField\n                                        name=\"ombleft\"\n                                        id=\"ombleft\"\n                                        label={`OMB (Left Eye)`}\n                                        fullWidth\n                                        multiline\n                                        rows={1}\n                                        variant=\"outlined\"\n                                        autoComplete=\"none\"\n                                        value={patient.formData.ombleft || ''}\n                                        onChange={(event) => {\n                                            setPatient({ ...patient, formData: { ...patient.formData, ombleft: event.target.value } })\n                                        }}\n\n                                    />\n                                </Grid>\n\n                                <Grid item xs={12} style={{ margingTop: \"10px\" }}>\n                                    <div className={classes.titleCenter}>\n                                        POSTERIOR SEGMENT\n                                    </div>\n                                </Grid>\n\n                                <Grid item xs={12} md={6}>\n                                    <TextField\n                                        name=\"discright\"\n                                        id=\"discright\"\n                                        label={`DISC (Right Eye)`}\n                                        fullWidth\n                                        multiline\n                                        rows={1}\n                                        variant=\"outlined\"\n                                        autoComplete=\"none\"\n                                        value={patient.formData.discright || ''}\n                                        onChange={(event) => {\n                                            setPatient({ ...patient, formData: { ...patient.formData, discright: event.target.value } })\n                                        }}\n\n                                    />\n                                </Grid>\n                                <Grid item xs={12} md={6}>\n                                    <TextField\n                                        name=\"discleft\"\n                                        id=\"discleft\"\n                                        label={`DISC (Left Eye)`}\n                                        fullWidth\n                                        multiline\n                                        rows={1}\n                                        variant=\"outlined\"\n                                        autoComplete=\"none\"\n                                        value={patient.formData.discleft || ''}\n                                        onChange={(event) => {\n                                            setPatient({ ...patient, formData: { ...patient.formData, discleft: event.target.value } })\n                                        }}\n\n                                    />\n                                </Grid>\n\n                                <Grid item xs={12} md={6}>\n                                    <TextField\n                                        name=\"cdright\"\n                                        id=\"cdright\"\n                                        label={`C:D (Right Eye)`}\n                                        fullWidth\n                                        multiline\n                                        rows={1}\n                                        variant=\"outlined\"\n                                        autoComplete=\"none\"\n                                        value={patient.formData.cdright || ''}\n                                        onChange={(event) => {\n                                            setPatient({ ...patient, formData: { ...patient.formData, cdright: event.target.value } })\n                                        }}\n\n                                    />\n                                </Grid>\n                                <Grid item xs={12} md={6}>\n                                    <TextField\n                                        name=\"cdleft\"\n                                        id=\"cdleft\"\n                                        label={`C:D (Left Eye)`}\n                                        fullWidth\n                                        multiline\n                                        rows={1}\n                                        variant=\"outlined\"\n                                        autoComplete=\"none\"\n                                        value={patient.formData.cdleft || ''}\n                                        onChange={(event) => {\n                                            setPatient({ ...patient, formData: { ...patient.formData, cdleft: event.target.value } })\n                                        }}\n\n                                    />\n                                </Grid>\n\n                                <Grid item xs={12} md={6}>\n                                    <TextField\n                                        name=\"bloodvesselsright\"\n                                        id=\"bloodvesselsright\"\n                                        label={`Blood Vessels (Right Eye)`}\n                                        fullWidth\n                                        multiline\n                                        rows={1}\n                                        variant=\"outlined\"\n                                        autoComplete=\"none\"\n                                        value={patient.formData.bloodvesselsright || ''}\n                                        onChange={(event) => {\n                                            setPatient({ ...patient, formData: { ...patient.formData, bloodvesselsright: event.target.value } })\n                                        }}\n\n                                    />\n                                </Grid>\n                                <Grid item xs={12} md={6}>\n                                    <TextField\n                                        name=\"bloodvesselsleft\"\n                                        id=\"bloodvesselsleft\"\n                                        label={`Blood Vessels (Left Eye)`}\n                                        fullWidth\n                                        multiline\n                                        rows={1}\n                                        variant=\"outlined\"\n                                        autoComplete=\"none\"\n                                        value={patient.formData.bloodvesselsleft || ''}\n                                        onChange={(event) => {\n                                            setPatient({ ...patient, formData: { ...patient.formData, bloodvesselsleft: event.target.value } })\n                                        }}\n\n                                    />\n                                </Grid>\n                                <Grid item xs={12} md={6}>\n                                    <TextField\n                                        name=\"macularight\"\n                                        id=\"macularight\"\n                                        label={`Macula (Right Eye)`}\n                                        fullWidth\n                                        multiline\n                                        rows={1}\n                                        variant=\"outlined\"\n                                        autoComplete=\"none\"\n                                        value={patient.formData.macularight || ''}\n                                        onChange={(event) => {\n                                            setPatient({ ...patient, formData: { ...patient.formData, macularight: event.target.value } })\n                                        }}\n\n                                    />\n                                </Grid>\n                                <Grid item xs={12} md={6}>\n                                    <TextField\n                                        name=\"maculaleft\"\n                                        id=\"maculaleft\"\n                                        label={`Macula (Left Eye)`}\n                                        fullWidth\n                                        multiline\n                                        rows={1}\n                                        variant=\"outlined\"\n                                        autoComplete=\"none\"\n                                        value={patient.formData.maculaleft || ''}\n                                        onChange={(event) => {\n                                            setPatient({ ...patient, formData: { ...patient.formData, maculaleft: event.target.value } })\n                                        }}\n\n                                    />\n                                </Grid>\n                                <Grid item xs={12} md={6}>\n                                    <TextField\n                                        name=\"peripheryright\"\n                                        id=\"peripheryright\"\n                                        label={`Periphery (Right Eye)`}\n                                        fullWidth\n                                        multiline\n                                        rows={1}\n                                        variant=\"outlined\"\n                                        autoComplete=\"none\"\n                                        value={patient.formData.peripheryright || ''}\n                                        onChange={(event) => {\n                                            setPatient({ ...patient, formData: { ...patient.formData, peripheryright: event.target.value } })\n                                        }}\n\n                                    />\n                                </Grid>\n                                <Grid item xs={12} md={6}>\n                                    <TextField\n                                        name=\"peripheryleft\"\n                                        id=\"peripheryleft\"\n                                        label={`Periphery (Left Eye)`}\n                                        fullWidth\n                                        multiline\n                                        rows={1}\n                                        variant=\"outlined\"\n                                        autoComplete=\"none\"\n                                        value={patient.formData.peripheryleft || ''}\n                                        onChange={(event) => {\n                                            setPatient({ ...patient, formData: { ...patient.formData, peripheryleft: event.target.value } })\n                                        }}\n\n                                    />\n                                </Grid>\n                            </Grid>\n\n                        </TabPanel>\n                        <TabPanel value={value} index={4}>\n                            <Grid container spacing={2}>\n                                <Grid item xs={12} md={6}>\n                                    <TextField\n                                        name=\"pupillowlightdiamright\"\n                                        id=\"pupillowlightdiamright\"\n                                        label=\"Pupil (low light diam) (Right Eye)\"\n                                        fullWidth\n                                        multiline\n                                        rows={1}\n                                        variant=\"outlined\"\n                                        autoComplete=\"none\"\n                                        value={patient.formData.pupillowlightdiamright || ''}\n                                        onChange={(event) => {\n                                            setPatient({ ...patient, formData: { ...patient.formData, pupillowlightdiamright: event.target.value } })\n                                        }}\n\n                                    />\n                                </Grid>\n                                <Grid item xs={12} md={6}>\n                                    <TextField\n                                        name=\"pupillowlightdiamleft\"\n                                        id=\"pupillowlightdiamleft\"\n                                        label=\"Pupil (low light diam) (Left Eye)\"\n                                        fullWidth\n                                        multiline\n                                        rows={1}\n                                        variant=\"outlined\"\n                                        autoComplete=\"none\"\n                                        value={patient.formData.pupillowlightdiamleft || ''}\n                                        onChange={(event) => {\n                                            setPatient({ ...patient, formData: { ...patient.formData, pupillowlightdiamleft: event.target.value } })\n                                        }}\n\n                                    />\n                                </Grid>\n                                <Grid item xs={12} md={6}>\n                                    <TextField\n                                        name=\"pachmetryright\"\n                                        id=\"pachmetryright\"\n                                        label=\"Pachmetry (μm) (Right Eye)\"\n                                        fullWidth\n                                        multiline\n                                        rows={1}\n                                        variant=\"outlined\"\n                                        autoComplete=\"none\"\n                                        value={patient.formData.pachmetryright || ''}\n                                        onChange={(event) => {\n                                            setPatient({ ...patient, formData: { ...patient.formData, pachmetryright: event.target.value } })\n                                        }}\n\n                                    />\n                                </Grid>\n                                <Grid item xs={12} md={6}>\n                                    <TextField\n                                        name=\"pachmetryleft\"\n                                        id=\"pachmetryleft\"\n                                        label=\"Pachmetry (μm) (Left Eye)\"\n                                        fullWidth\n                                        multiline\n                                        rows={1}\n                                        variant=\"outlined\"\n                                        autoComplete=\"none\"\n                                        value={patient.formData.pachmetryleft || ''}\n                                        onChange={(event) => {\n                                            setPatient({ ...patient, formData: { ...patient.formData, pachmetryleft: event.target.value } })\n                                        }}\n\n                                    />\n                                </Grid>\n                                <Grid item xs={12} md={6}>\n                                    <TextField\n                                        name=\"keratometryright\"\n                                        id=\"keratometryright\"\n                                        label=\"Keratometry (Right Eye)\"\n                                        fullWidth\n                                        multiline\n                                        rows={3}\n                                        variant=\"outlined\"\n                                        autoComplete=\"none\"\n                                        value={patient.formData.keratometryright || ''}\n                                        onChange={(event) => {\n                                            setPatient({ ...patient, formData: { ...patient.formData, keratometryright: event.target.value } })\n                                        }}\n\n                                    />\n                                </Grid>\n                                <Grid item xs={12} md={6}>\n                                    <TextField\n                                        name=\"keratometryleft\"\n                                        id=\"keratometryleft\"\n                                        label=\"Keratometry (Left Eye)\"\n                                        fullWidth\n                                        multiline\n                                        rows={3}\n                                        variant=\"outlined\"\n                                        autoComplete=\"none\"\n                                        value={patient.formData.keratometryleft || ''}\n                                        onChange={(event) => {\n                                            setPatient({ ...patient, formData: { ...patient.formData, keratometryleft: event.target.value } })\n                                        }}\n\n                                    />\n                                </Grid>\n                                <Grid item xs={12} md={6}>\n                                    <TextField\n                                        name=\"acdepthright\"\n                                        id=\"acdepthright\"\n                                        label=\"AC Depth (Right Eye)\"\n                                        fullWidth\n                                        multiline\n                                        rows={1}\n                                        variant=\"outlined\"\n                                        autoComplete=\"none\"\n                                        value={patient.formData.acdepthright || ''}\n                                        onChange={(event) => {\n                                            setPatient({ ...patient, formData: { ...patient.formData, acdepthright: event.target.value } })\n                                        }}\n\n                                    />\n                                </Grid>\n                                <Grid item xs={12} md={6}>\n                                    <TextField\n                                        name=\"acdepthleft\"\n                                        id=\"acdepthleft\"\n                                        label=\"AC Depth (Left Eye)\"\n                                        fullWidth\n                                        multiline\n                                        rows={1}\n                                        variant=\"outlined\"\n                                        autoComplete=\"none\"\n                                        value={patient.formData.acdepthleft || ''}\n                                        onChange={(event) => {\n                                            setPatient({ ...patient, formData: { ...patient.formData, acdepthleft: event.target.value } })\n                                        }}\n\n                                    />\n                                </Grid>\n                                <Grid item xs={12} md={6}>\n                                    <TextField\n                                        name=\"maculathicnessright\"\n                                        id=\"maculathicnessright\"\n                                        label=\"Macula Thickness (Right Eye)\"\n                                        fullWidth\n                                        multiline\n                                        rows={1}\n                                        variant=\"outlined\"\n                                        autoComplete=\"none\"\n                                        value={patient.formData.maculathicnessright || ''}\n                                        onChange={(event) => {\n                                            setPatient({ ...patient, formData: { ...patient.formData, maculathicnessright: event.target.value } })\n                                        }}\n\n                                    />\n                                </Grid>\n                                <Grid item xs={12} md={6}>\n                                    <TextField\n                                        name=\"maculathicnessleft\"\n                                        id=\"maculathicnessleft\"\n                                        label=\"Macula Thickness (Left Eye)\"\n                                        fullWidth\n                                        multiline\n                                        rows={1}\n                                        variant=\"outlined\"\n                                        autoComplete=\"none\"\n                                        value={patient.formData.maculathicnessleft || ''}\n                                        onChange={(event) => {\n                                            setPatient({ ...patient, formData: { ...patient.formData, maculathicnessleft: event.target.value } })\n                                        }}\n\n                                    />\n                                </Grid>\n                                <Grid item xs={12} md={6}>\n                                    <TextField\n                                        name=\"octcommentright\"\n                                        id=\"octcommentright\"\n                                        label=\"OCT Comment (Right Eye)\"\n                                        fullWidth\n                                        multiline\n                                        rows={1}\n                                        variant=\"outlined\"\n                                        autoComplete=\"none\"\n                                        value={patient.formData.octcommentright || ''}\n                                        onChange={(event) => {\n                                            setPatient({ ...patient, formData: { ...patient.formData, octcommentright: event.target.value } })\n                                        }}\n\n                                    />\n                                </Grid>\n                                <Grid item xs={12} md={6}>\n                                    <TextField\n                                        name=\"octcommentleft\"\n                                        id=\"octcommentleft\"\n                                        label=\"OCT Comment (Left Eye)\"\n                                        fullWidth\n                                        multiline\n                                        rows={1}\n                                        variant=\"outlined\"\n                                        autoComplete=\"none\"\n                                        value={patient.formData.octcommentleft || ''}\n                                        onChange={(event) => {\n                                            setPatient({ ...patient, formData: { ...patient.formData, octcommentleft: event.target.value } })\n                                        }}\n\n                                    />\n                                </Grid>\n                                <Grid item xs={12} md={6}>\n                                    <TextField\n                                        name=\"pentacamcommentright\"\n                                        id=\"pentacamcommentright\"\n                                        label=\"Pentacam Comment (Right Eye)\"\n                                        fullWidth\n                                        multiline\n                                        rows={1}\n                                        variant=\"outlined\"\n                                        autoComplete=\"none\"\n                                        value={patient.formData.pentacamcommentright || ''}\n                                        onChange={(event) => {\n                                            setPatient({ ...patient, formData: { ...patient.formData, pentacamcommentright: event.target.value } })\n                                        }}\n\n                                    />\n                                </Grid>\n                                <Grid item xs={12} md={6}>\n                                    <TextField\n                                        name=\"pentacamcommentleft\"\n                                        id=\"pentacamcommentleft\"\n                                        label=\"Pentacam Comment (Left Eye)\"\n                                        fullWidth\n                                        multiline\n                                        rows={1}\n                                        variant=\"outlined\"\n                                        autoComplete=\"none\"\n                                        value={patient.formData.pentacamcommentleft || ''}\n                                        onChange={(event) => {\n                                            setPatient({ ...patient, formData: { ...patient.formData, pentacamcommentleft: event.target.value } })\n                                        }}\n\n                                    />\n                                </Grid>\n                            </Grid>\n\n                        </TabPanel>\n                        <TabPanel value={value} index={5}>\n                            <Grid container spacing={2}>\n                                <Grid item xs={12} md={4}>\n                                    <TextField\n                                        name=\"distancevaright\"\n                                        id=\"distancevaright\"\n                                        label=\"Distance (Right Eye)\"\n                                        fullWidth\n                                        multiline\n                                        rows={1}\n                                        variant=\"outlined\"\n                                        autoComplete=\"none\"\n                                        value={patient.formData.distancevaright || ''}\n                                        onChange={(event) => {\n                                            setPatient({ ...patient, formData: { ...patient.formData, distancevaright: event.target.value } })\n                                        }}\n\n                                    />\n                                </Grid>\n                                <Grid item xs={12} md={4}>\n                                    <TextField\n                                        name=\"distancevaleft\"\n                                        id=\"distancevaleft\"\n                                        label=\"Distance (Left Eye)\"\n                                        fullWidth\n                                        multiline\n                                        rows={1}\n                                        variant=\"outlined\"\n                                        autoComplete=\"none\"\n                                        value={patient.formData.distancevaleft || ''}\n                                        onChange={(event) => {\n                                            setPatient({ ...patient, formData: { ...patient.formData, distancevaleft: event.target.value } })\n                                        }}\n                                    />\n                                </Grid>\n                                <Grid item xs={12} md={4}>\n                                    <TextField\n                                        name=\"distancevabinocular\"\n                                        id=\"distancevabinocular\"\n                                        label=\"Distance (Binocular)\"\n                                        fullWidth\n                                        multiline\n                                        rows={1}\n                                        variant=\"outlined\"\n                                        autoComplete=\"none\"\n                                        value={patient.formData.distancevabinocular || ''}\n                                        onChange={(event) => {\n                                            setPatient({ ...patient, formData: { ...patient.formData, distancevabinocular: event.target.value } })\n                                        }}\n                                    />\n                                </Grid>\n                                <Grid item xs={12} md={4}>\n                                    <TextField\n                                        name=\"intermediatevaright\"\n                                        id=\"intermediatevaright\"\n                                        label=\"Intermediate (Right Eye)\"\n                                        fullWidth\n                                        multiline\n                                        rows={1}\n                                        variant=\"outlined\"\n                                        autoComplete=\"none\"\n                                        value={patient.formData.intermediatevaright || ''}\n                                        onChange={(event) => {\n                                            setPatient({ ...patient, formData: { ...patient.formData, intermediatevaright: event.target.value } })\n                                        }}\n\n                                    />\n                                </Grid>\n                                <Grid item xs={12} md={4}>\n                                    <TextField\n                                        name=\"intermediatevaleft\"\n                                        id=\"intermediatevaleft\"\n                                        label=\"Intermediate (Left Eye)\"\n                                        fullWidth\n                                        multiline\n                                        rows={1}\n                                        variant=\"outlined\"\n                                        autoComplete=\"none\"\n                                        value={patient.formData.intermediatevaleft || ''}\n                                        onChange={(event) => {\n                                            setPatient({ ...patient, formData: { ...patient.formData, intermediatevaleft: event.target.value } })\n                                        }}\n                                    />\n                                </Grid>\n                                <Grid item xs={12} md={4}>\n                                    <TextField\n                                        name=\"intermediatevabinocular\"\n                                        id=\"intermediatevabinocular\"\n                                        label=\"Intermediate (Binocular)\"\n                                        fullWidth\n                                        multiline\n                                        rows={1}\n                                        variant=\"outlined\"\n                                        autoComplete=\"none\"\n                                        value={patient.formData.intermediatevabinocular || ''}\n                                        onChange={(event) => {\n                                            setPatient({ ...patient, formData: { ...patient.formData, intermediatevabinocular: event.target.value } })\n                                        }}\n                                    />\n                                </Grid>\n                                <Grid item xs={12} md={4}>\n                                    <TextField\n                                        name=\"nearvaright\"\n                                        id=\"nearvaright\"\n                                        label=\"Near (Right Eye)\"\n                                        fullWidth\n                                        multiline\n                                        rows={1}\n                                        variant=\"outlined\"\n                                        autoComplete=\"none\"\n                                        value={patient.formData.nearvaright || ''}\n                                        onChange={(event) => {\n                                            setPatient({ ...patient, formData: { ...patient.formData, nearvaright: event.target.value } })\n                                        }}\n\n                                    />\n                                </Grid>\n                                <Grid item xs={12} md={4}>\n                                    <TextField\n                                        name=\"nearvaleft\"\n                                        id=\"nearvaleft\"\n                                        label=\"Near (Left Eye)\"\n                                        fullWidth\n                                        multiline\n                                        rows={1}\n                                        variant=\"outlined\"\n                                        autoComplete=\"none\"\n                                        value={patient.formData.nearvaleft || ''}\n                                        onChange={(event) => {\n                                            setPatient({ ...patient, formData: { ...patient.formData, nearvaleft: event.target.value } })\n                                        }}\n                                    />\n                                </Grid>\n                                <Grid item xs={12} md={4}>\n                                    <TextField\n                                        name=\"nearvabinocular\"\n                                        id=\"nearvabinocular\"\n                                        label=\"Near (Binocular)\"\n                                        fullWidth\n                                        multiline\n                                        rows={1}\n                                        variant=\"outlined\"\n                                        autoComplete=\"none\"\n                                        value={patient.formData.nearvabinocular || ''}\n                                        onChange={(event) => {\n                                            setPatient({ ...patient, formData: { ...patient.formData, nearvabinocular: event.target.value } })\n                                        }}\n                                    />\n                                </Grid>\n\n\n\n                            </Grid>\n\n                        </TabPanel>\n                        <TabPanel value={value} index={6}>\n                            <Grid container spacing={2}>\n                                <Grid item xs={12}>\n                                    <DateField\n                                        // error={birthDateError}\n                                        title=\"Current Prescription Date\"\n                                        value={patient.formData.refractioncurrentpresdate || ''}\n                                        dateChanged={(value) => {\n                                            setPatient({ ...patient, formData: { ...patient.formData, refractioncurrentpresdate: value } })\n                                            // setBirthDateError(false)\n                                        }}\n                                        todayButton={true}\n                                    />\n                                </Grid>\n                                <Grid item xs={12} md={2}> <div className={classes.eyeText}>Right Eye : </div></Grid>\n                                <Grid item xs={12} md={2}>\n                                    <TextField\n                                        name=\"spherepresdateright\"\n                                        id=\"spherepresdateright\"\n                                        label=\"Sphere (RE)\"\n                                        fullWidth\n                                        multiline\n                                        rows={1}\n                                        variant=\"outlined\"\n                                        autoComplete=\"none\"\n                                        value={patient.formData.spherepresdateright || ''}\n                                        onChange={(event) => {\n                                            setPatient({ ...patient, formData: { ...patient.formData, spherepresdateright: event.target.value } })\n                                        }}\n                                    />\n                                </Grid>\n                                <Grid item xs={12} md={2}>\n                                    <TextField\n                                        name=\"cylpresdateright\"\n                                        id=\"cylpresdateright\"\n                                        label=\"Cyl (RE)\"\n                                        fullWidth\n                                        multiline\n                                        rows={1}\n                                        variant=\"outlined\"\n                                        autoComplete=\"none\"\n                                        value={patient.formData.cylpresdateright || ''}\n                                        onChange={(event) => {\n                                            setPatient({ ...patient, formData: { ...patient.formData, cylpresdateright: event.target.value } })\n                                        }}\n                                    />\n                                </Grid>\n                                <Grid item xs={12} md={2}>\n                                    <TextField\n                                        name=\"axispresdateright\"\n                                        id=\"axispresdateright\"\n                                        label=\"Axis (RE)\"\n                                        fullWidth\n                                        multiline\n                                        rows={1}\n                                        variant=\"outlined\"\n                                        autoComplete=\"none\"\n                                        value={patient.formData.axispresdateright || ''}\n                                        onChange={(event) => {\n                                            setPatient({ ...patient, formData: { ...patient.formData, axispresdateright: event.target.value } })\n                                        }}\n                                    />\n                                </Grid>\n                                <Grid item xs={12} md={2}>\n                                    <TextField\n                                        name=\"addpresdateright\"\n                                        id=\"addpresdateright\"\n                                        label=\"Add (RE)\"\n                                        fullWidth\n                                        multiline\n                                        rows={1}\n                                        variant=\"outlined\"\n                                        autoComplete=\"none\"\n                                        value={patient.formData.addpresdateright || ''}\n                                        onChange={(event) => {\n                                            setPatient({ ...patient, formData: { ...patient.formData, addpresdateright: event.target.value } })\n                                        }}\n                                    />\n                                </Grid>\n                                <Grid item xs={12} md={2}>\n                                    <TextField\n                                        name=\"vapresdateright\"\n                                        id=\"vapresdateright\"\n                                        label=\"VA (RE)\"\n                                        fullWidth\n                                        multiline\n                                        rows={1}\n                                        variant=\"outlined\"\n                                        autoComplete=\"none\"\n                                        value={patient.formData.vapresdateright || ''}\n                                        onChange={(event) => {\n                                            setPatient({ ...patient, formData: { ...patient.formData, vapresdateright: event.target.value } })\n                                        }}\n                                    />\n                                </Grid>\n\n                                <Grid item xs={12} md={2}> <div className={classes.eyeText}>Left Eye : </div></Grid>\n                                <Grid item xs={12} md={2}>\n                                    <TextField\n                                        name=\"spherepresdateleft\"\n                                        id=\"spherepresdateleft\"\n                                        label=\"Sphere (LE)\"\n                                        fullWidth\n                                        multiline\n                                        rows={1}\n                                        variant=\"outlined\"\n                                        autoComplete=\"none\"\n                                        value={patient.formData.spherepresdateleft || ''}\n                                        onChange={(event) => {\n                                            setPatient({ ...patient, formData: { ...patient.formData, spherepresdateleft: event.target.value } })\n                                        }}\n                                    />\n                                </Grid>\n                                <Grid item xs={12} md={2}>\n                                    <TextField\n                                        name=\"cylpresdateleft\"\n                                        id=\"cylpresdateleft\"\n                                        label=\"Cyl (LE)\"\n                                        fullWidth\n                                        multiline\n                                        rows={1}\n                                        variant=\"outlined\"\n                                        autoComplete=\"none\"\n                                        value={patient.formData.cylpresdateleft || ''}\n                                        onChange={(event) => {\n                                            setPatient({ ...patient, formData: { ...patient.formData, cylpresdateleft: event.target.value } })\n                                        }}\n                                    />\n                                </Grid>\n                                <Grid item xs={12} md={2}>\n                                    <TextField\n                                        name=\"axispresdateleft\"\n                                        id=\"axispresdateleft\"\n                                        label=\"Axis (LE)\"\n                                        fullWidth\n                                        multiline\n                                        rows={1}\n                                        variant=\"outlined\"\n                                        autoComplete=\"none\"\n                                        value={patient.formData.axispresdateleft || ''}\n                                        onChange={(event) => {\n                                            setPatient({ ...patient, formData: { ...patient.formData, axispresdateleft: event.target.value } })\n                                        }}\n                                    />\n                                </Grid>\n                                <Grid item xs={12} md={2}>\n                                    <TextField\n                                        name=\"addpresdateleft\"\n                                        id=\"addpresdateleft\"\n                                        label=\"Add (LE)\"\n                                        fullWidth\n                                        multiline\n                                        rows={1}\n                                        variant=\"outlined\"\n                                        autoComplete=\"none\"\n                                        value={patient.formData.addpresdateleft || ''}\n                                        onChange={(event) => {\n                                            setPatient({ ...patient, formData: { ...patient.formData, addpresdateleft: event.target.value } })\n                                        }}\n                                    />\n                                </Grid>\n                                <Grid item xs={12} md={2}>\n                                    <TextField\n                                        name=\"vapresdateleft\"\n                                        id=\"vapresdateleft\"\n                                        label=\"VA (LE)\"\n                                        fullWidth\n                                        multiline\n                                        rows={1}\n                                        variant=\"outlined\"\n                                        autoComplete=\"none\"\n                                        value={patient.formData.vapresdateleft || ''}\n                                        onChange={(event) => {\n                                            setPatient({ ...patient, formData: { ...patient.formData, vapresdateleft: event.target.value } })\n                                        }}\n                                    />\n                                </Grid>\n                                <Grid item xs={12}>\n                                    <FormControl fullWidth variant=\"outlined\" >\n                                        <InputLabel id=\"spectype-label\">Spec Type</InputLabel>\n                                        <Select\n                                            label=\"Spec Type\"\n                                            labelId=\"spectype-label\"\n                                            id=\"spectype-label\"\n                                            style={{ textAlign: \"center\" }}\n                                            fullWidth\n                                            value={patient.formData.refractionsepctype || ''}\n                                            onChange={(event) => {\n                                                setPatient({ ...patient, formData: { ...patient.formData, refractionsepctype: event.target.value } })\n                                            }}\n\n                                        >\n                                            <MenuItem value={\"Single Vision\"}>Single Vision</MenuItem>\n                                            <MenuItem value={\"Bifocal\"}>Bifocal</MenuItem>\n                                            <MenuItem value={\"Varifocal\"}>Varifocal</MenuItem>\n                                            <MenuItem value={\"RR\"}>RR</MenuItem>\n\n                                        </Select>\n                                    </FormControl>\n                                </Grid>\n\n\n                                <Grid item xs={12}>\n                                    <DateField\n                                        // error={birthDateError}\n                                        title=\"Contact Lens Date\"\n                                        value={patient.formData.contactlensdate || ''}\n                                        dateChanged={(value) => {\n                                            setPatient({ ...patient, formData: { ...patient.formData, contactlensdate: value } })\n                                            // setBirthDateError(false)\n                                        }}\n                                        todayButton={true}\n                                    />\n                                </Grid>\n                                <Grid item xs={12} md={2}> <div className={classes.eyeText}>Right Eye : </div></Grid>\n                                <Grid item xs={12} md={2}>\n                                    <TextField\n                                        name=\"spherepresdaterightlens\"\n                                        id=\"spherepresdaterightlens\"\n                                        label=\"Sphere (RE)\"\n                                        fullWidth\n                                        multiline\n                                        rows={1}\n                                        variant=\"outlined\"\n                                        autoComplete=\"none\"\n                                        value={patient.formData.spherepresdaterightlens || ''}\n                                        onChange={(event) => {\n                                            setPatient({ ...patient, formData: { ...patient.formData, spherepresdaterightlens: event.target.value } })\n                                        }}\n                                    />\n                                </Grid>\n                                <Grid item xs={12} md={2}>\n                                    <TextField\n                                        name=\"cylpresdaterightlens\"\n                                        id=\"cylpresdaterightlens\"\n                                        label=\"Cyl (RE)\"\n                                        fullWidth\n                                        multiline\n                                        rows={1}\n                                        variant=\"outlined\"\n                                        autoComplete=\"none\"\n                                        value={patient.formData.cylpresdaterightlens || ''}\n                                        onChange={(event) => {\n                                            setPatient({ ...patient, formData: { ...patient.formData, cylpresdaterightlens: event.target.value } })\n                                        }}\n                                    />\n                                </Grid>\n                                <Grid item xs={12} md={2}>\n                                    <TextField\n                                        name=\"axispresdaterightlens\"\n                                        id=\"axispresdaterightlens\"\n                                        label=\"Axis (RE)\"\n                                        fullWidth\n                                        multiline\n                                        rows={1}\n                                        variant=\"outlined\"\n                                        autoComplete=\"none\"\n                                        value={patient.formData.axispresdaterightlens || ''}\n                                        onChange={(event) => {\n                                            setPatient({ ...patient, formData: { ...patient.formData, axispresdaterightlens: event.target.value } })\n                                        }}\n                                    />\n                                </Grid>\n                                <Grid item xs={12} md={2}>\n                                    <TextField\n                                        name=\"addpresdaterightlens\"\n                                        id=\"addpresdaterightlens\"\n                                        label=\"Add (RE)\"\n                                        fullWidth\n                                        multiline\n                                        rows={1}\n                                        variant=\"outlined\"\n                                        autoComplete=\"none\"\n                                        value={patient.formData.addpresdaterightlens || ''}\n                                        onChange={(event) => {\n                                            setPatient({ ...patient, formData: { ...patient.formData, addpresdaterightlens: event.target.value } })\n                                        }}\n                                    />\n                                </Grid>\n                                <Grid item xs={12} md={2}>\n                                    <TextField\n                                        name=\"vapresdaterightlens\"\n                                        id=\"vapresdaterightlens\"\n                                        label=\"VA (RE)\"\n                                        fullWidth\n                                        multiline\n                                        rows={1}\n                                        variant=\"outlined\"\n                                        autoComplete=\"none\"\n                                        value={patient.formData.vapresdaterightlens || ''}\n                                        onChange={(event) => {\n                                            setPatient({ ...patient, formData: { ...patient.formData, vapresdaterightlens: event.target.value } })\n                                        }}\n                                    />\n                                </Grid>\n\n                                <Grid item xs={12} md={2}> <div className={classes.eyeText}>Left Eye : </div></Grid>\n                                <Grid item xs={12} md={2}>\n                                    <TextField\n                                        name=\"spherepresdateleftlens\"\n                                        id=\"spherepresdateleftlens\"\n                                        label=\"Sphere (LE)\"\n                                        fullWidth\n                                        multiline\n                                        rows={1}\n                                        variant=\"outlined\"\n                                        autoComplete=\"none\"\n                                        value={patient.formData.spherepresdateleftlens || ''}\n                                        onChange={(event) => {\n                                            setPatient({ ...patient, formData: { ...patient.formData, spherepresdateleftlens: event.target.value } })\n                                        }}\n                                    />\n                                </Grid>\n                                <Grid item xs={12} md={2}>\n                                    <TextField\n                                        name=\"cylpresdateleftlens\"\n                                        id=\"cylpresdateleftlens\"\n                                        label=\"Cyl (LE)\"\n                                        fullWidth\n                                        multiline\n                                        rows={1}\n                                        variant=\"outlined\"\n                                        autoComplete=\"none\"\n                                        value={patient.formData.cylpresdateleftlens || ''}\n                                        onChange={(event) => {\n                                            setPatient({ ...patient, formData: { ...patient.formData, cylpresdateleftlens: event.target.value } })\n                                        }}\n                                    />\n                                </Grid>\n                                <Grid item xs={12} md={2}>\n                                    <TextField\n                                        name=\"axispresdateleftlens\"\n                                        id=\"axispresdateleftlens\"\n                                        label=\"Axis (LE)\"\n                                        fullWidth\n                                        multiline\n                                        rows={1}\n                                        variant=\"outlined\"\n                                        autoComplete=\"none\"\n                                        value={patient.formData.axispresdateleftlens || ''}\n                                        onChange={(event) => {\n                                            setPatient({ ...patient, formData: { ...patient.formData, axispresdateleftlens: event.target.value } })\n                                        }}\n                                    />\n                                </Grid>\n                                <Grid item xs={12} md={2}>\n                                    <TextField\n                                        name=\"addpresdateleftlens\"\n                                        id=\"addpresdateleftlens\"\n                                        label=\"Add (LE)\"\n                                        fullWidth\n                                        multiline\n                                        rows={1}\n                                        variant=\"outlined\"\n                                        autoComplete=\"none\"\n                                        value={patient.formData.addpresdateleftlens || ''}\n                                        onChange={(event) => {\n                                            setPatient({ ...patient, formData: { ...patient.formData, addpresdateleftlens: event.target.value } })\n                                        }}\n                                    />\n                                </Grid>\n                                <Grid item xs={12} md={2}>\n                                    <TextField\n                                        name=\"vapresdateleftlens\"\n                                        id=\"vapresdateleftlens\"\n                                        label=\"VA (LE)\"\n                                        fullWidth\n                                        multiline\n                                        rows={1}\n                                        variant=\"outlined\"\n                                        autoComplete=\"none\"\n                                        value={patient.formData.vapresdateleftlens || ''}\n                                        onChange={(event) => {\n                                            setPatient({ ...patient, formData: { ...patient.formData, vapresdateleftlens: event.target.value } })\n                                        }}\n                                    />\n                                </Grid>\n\n                                <Grid item xs={12}>\n                                    <FormControl fullWidth variant=\"outlined\" >\n                                        <InputLabel id=\"cltype-label\">CL Type</InputLabel>\n                                        <Select\n                                            label=\"CL Type\"\n                                            labelId=\"cltype-label\"\n                                            id=\"cltype-label\"\n                                            style={{ textAlign: \"center\" }}\n                                            fullWidth\n                                            value={patient.formData.refractioncltype || ''}\n                                            onChange={(event) => {\n                                                setPatient({ ...patient, formData: { ...patient.formData, refractioncltype: event.target.value } })\n                                            }}\n\n                                        >\n                                            <MenuItem value={\"Dailies Soft\"}>Dailies Soft</MenuItem>\n                                            <MenuItem value={\"Monthlies\"}>Monthlies</MenuItem>\n                                            <MenuItem value={\"RGP\"}>RGP</MenuItem>\n\n                                        </Select>\n                                    </FormControl>\n                                </Grid>\n\n                                <Grid item xs={12} style={{ marginBottom: \"20px\" }}></Grid>\n                            </Grid>\n                        </TabPanel>\n                        <TabPanel value={value} index={7}>\n                            <Grid container spacing={2}>\n                                <Grid item xs={12} md={2}> <div className={classes.eyeText}>Right Eye : </div></Grid>\n                                <Grid item xs={12} md={2}>\n                                    <TextField\n                                        name=\"sphereautorefright\"\n                                        id=\"sphereautorefright\"\n                                        label=\"Sphere (RE)\"\n                                        fullWidth\n                                        multiline\n                                        rows={1}\n                                        variant=\"outlined\"\n                                        autoComplete=\"none\"\n                                        value={patient.formData.sphereautorefright || ''}\n                                        onChange={(event) => {\n                                            setPatient({ ...patient, formData: { ...patient.formData, sphereautorefright: event.target.value } })\n                                        }}\n                                    />\n                                </Grid>\n                                <Grid item xs={12} md={2}>\n                                    <TextField\n                                        name=\"cylautorefright\"\n                                        id=\"cylautorefright\"\n                                        label=\"Cyl (RE)\"\n                                        fullWidth\n                                        multiline\n                                        rows={1}\n                                        variant=\"outlined\"\n                                        autoComplete=\"none\"\n                                        value={patient.formData.cylautorefright || ''}\n                                        onChange={(event) => {\n                                            setPatient({ ...patient, formData: { ...patient.formData, cylautorefright: event.target.value } })\n                                        }}\n                                    />\n                                </Grid>\n                                <Grid item xs={12} md={2}>\n                                    <TextField\n                                        name=\"axisautorefright\"\n                                        id=\"axisautorefright\"\n                                        label=\"Axis (RE)\"\n                                        fullWidth\n                                        multiline\n                                        rows={1}\n                                        variant=\"outlined\"\n                                        autoComplete=\"none\"\n                                        value={patient.formData.axisautorefright || ''}\n                                        onChange={(event) => {\n                                            setPatient({ ...patient, formData: { ...patient.formData, axisautorefright: event.target.value } })\n                                        }}\n                                    />\n                                </Grid>\n                                <Grid item xs={12} md={2}>\n                                    <TextField\n                                        name=\"vaautorefright\"\n                                        id=\"vaautorefright\"\n                                        label=\"VA (RE)\"\n                                        fullWidth\n                                        multiline\n                                        rows={1}\n                                        variant=\"outlined\"\n                                        autoComplete=\"none\"\n                                        value={patient.formData.vaautorefright || ''}\n                                        onChange={(event) => {\n                                            setPatient({ ...patient, formData: { ...patient.formData, vaautorefright: event.target.value } })\n                                        }}\n                                    />\n                                </Grid>\n                                <Grid item xs={12} md={2}></Grid>\n\n\n                                <Grid item xs={12} md={2}> <div className={classes.eyeText}>Left Eye : </div></Grid>\n                                <Grid item xs={12} md={2}>\n                                    <TextField\n                                        name=\"sphereautorefleft\"\n                                        id=\"sphereautorefleft\"\n                                        label=\"Sphere (LE)\"\n                                        fullWidth\n                                        multiline\n                                        rows={1}\n                                        variant=\"outlined\"\n                                        autoComplete=\"none\"\n                                        value={patient.formData.sphereautorefleft || ''}\n                                        onChange={(event) => {\n                                            setPatient({ ...patient, formData: { ...patient.formData, sphereautorefleft: event.target.value } })\n                                        }}\n                                    />\n                                </Grid>\n                                <Grid item xs={12} md={2}>\n                                    <TextField\n                                        name=\"cylautorefleft\"\n                                        id=\"cylautorefleft\"\n                                        label=\"Cyl (LE)\"\n                                        fullWidth\n                                        multiline\n                                        rows={1}\n                                        variant=\"outlined\"\n                                        autoComplete=\"none\"\n                                        value={patient.formData.cylautorefleft || ''}\n                                        onChange={(event) => {\n                                            setPatient({ ...patient, formData: { ...patient.formData, cylautorefleft: event.target.value } })\n                                        }}\n                                    />\n                                </Grid>\n                                <Grid item xs={12} md={2}>\n                                    <TextField\n                                        name=\"axisautorefleft\"\n                                        id=\"axisautorefleft\"\n                                        label=\"Axis (LE)\"\n                                        fullWidth\n                                        multiline\n                                        rows={1}\n                                        variant=\"outlined\"\n                                        autoComplete=\"none\"\n                                        value={patient.formData.axisautorefleft || ''}\n                                        onChange={(event) => {\n                                            setPatient({ ...patient, formData: { ...patient.formData, axisautorefleft: event.target.value } })\n                                        }}\n                                    />\n                                </Grid>\n                                <Grid item xs={12} md={2}>\n                                    <TextField\n                                        name=\"vaautorefleft\"\n                                        id=\"vaautorefleft\"\n                                        label=\"VA (LE)\"\n                                        fullWidth\n                                        multiline\n                                        rows={1}\n                                        variant=\"outlined\"\n                                        autoComplete=\"none\"\n                                        value={patient.formData.vaautorefleft || ''}\n                                        onChange={(event) => {\n                                            setPatient({ ...patient, formData: { ...patient.formData, vaautorefleft: event.target.value } })\n                                        }}\n                                    />\n                                </Grid>\n                            </Grid>\n                        </TabPanel>\n                        <TabPanel value={value} index={8}>\n                            <Grid container spacing={2}>\n                                <Grid item xs={12}>\n                                    <div className={classes.titleCenter}>\n                                        Manifest Refraction\n                                    </div>\n                                </Grid>\n\n                                <Grid item xs={12} md={2}> <div className={classes.eyeText}>Right Eye : </div></Grid>\n                                <Grid item xs={12} md={2}>\n                                    <TextField\n                                        name=\"spheremanifestright\"\n                                        id=\"spheremanifestright\"\n                                        label=\"Sphere (RE)\"\n                                        fullWidth\n                                        multiline\n                                        rows={1}\n                                        variant=\"outlined\"\n                                        autoComplete=\"none\"\n                                        value={patient.formData.spheremanifestright || ''}\n                                        onChange={(event) => {\n                                            setPatient({ ...patient, formData: { ...patient.formData, spheremanifestright: event.target.value } })\n                                        }}\n                                    />\n                                </Grid>\n                                <Grid item xs={12} md={2}>\n                                    <TextField\n                                        name=\"cylmanifestright\"\n                                        id=\"cylmanifestright\"\n                                        label=\"Cyl (RE)\"\n                                        fullWidth\n                                        multiline\n                                        rows={1}\n                                        variant=\"outlined\"\n                                        autoComplete=\"none\"\n                                        value={patient.formData.cylmanifestright || ''}\n                                        onChange={(event) => {\n                                            setPatient({ ...patient, formData: { ...patient.formData, cylmanifestright: event.target.value } })\n                                        }}\n                                    />\n                                </Grid>\n                                <Grid item xs={12} md={2}>\n                                    <TextField\n                                        name=\"axismanifestright\"\n                                        id=\"axismanifestright\"\n                                        label=\"Axis (RE)\"\n                                        fullWidth\n                                        multiline\n                                        rows={1}\n                                        variant=\"outlined\"\n                                        autoComplete=\"none\"\n                                        value={patient.formData.axismanifestright || ''}\n                                        onChange={(event) => {\n                                            setPatient({ ...patient, formData: { ...patient.formData, axismanifestright: event.target.value } })\n                                        }}\n                                    />\n                                </Grid>\n                                <Grid item xs={12} md={2}>\n                                    <TextField\n                                        name=\"addmanifestright\"\n                                        id=\"addmanifestright\"\n                                        label=\"Add (RE)\"\n                                        fullWidth\n                                        multiline\n                                        rows={1}\n                                        variant=\"outlined\"\n                                        autoComplete=\"none\"\n                                        value={patient.formData.addmanifestright || ''}\n                                        onChange={(event) => {\n                                            setPatient({ ...patient, formData: { ...patient.formData, addmanifestright: event.target.value } })\n                                        }}\n                                    />\n                                </Grid>\n                                <Grid item xs={12} md={2}>\n                                    <TextField\n                                        name=\"vamanifestright\"\n                                        id=\"vamanifestright\"\n                                        label=\"VA (RE)\"\n                                        fullWidth\n                                        multiline\n                                        rows={1}\n                                        variant=\"outlined\"\n                                        autoComplete=\"none\"\n                                        value={patient.formData.vamanifestright || ''}\n                                        onChange={(event) => {\n                                            setPatient({ ...patient, formData: { ...patient.formData, vamanifestright: event.target.value } })\n                                        }}\n                                    />\n                                </Grid>\n\n                                <Grid item xs={12} md={2}> <div className={classes.eyeText}>Left Eye : </div></Grid>\n                                <Grid item xs={12} md={2}>\n                                    <TextField\n                                        name=\"spheremanifestleft\"\n                                        id=\"spheremanifestleft\"\n                                        label=\"Sphere (LE)\"\n                                        fullWidth\n                                        multiline\n                                        rows={1}\n                                        variant=\"outlined\"\n                                        autoComplete=\"none\"\n                                        value={patient.formData.spheremanifestleft || ''}\n                                        onChange={(event) => {\n                                            setPatient({ ...patient, formData: { ...patient.formData, spheremanifestleft: event.target.value } })\n                                        }}\n                                    />\n                                </Grid>\n                                <Grid item xs={12} md={2}>\n                                    <TextField\n                                        name=\"cylmanifestleft\"\n                                        id=\"cylmanifestleft\"\n                                        label=\"Cyl (LE)\"\n                                        fullWidth\n                                        multiline\n                                        rows={1}\n                                        variant=\"outlined\"\n                                        autoComplete=\"none\"\n                                        value={patient.formData.cylmanifestleft || ''}\n                                        onChange={(event) => {\n                                            setPatient({ ...patient, formData: { ...patient.formData, cylmanifestleft: event.target.value } })\n                                        }}\n                                    />\n                                </Grid>\n                                <Grid item xs={12} md={2}>\n                                    <TextField\n                                        name=\"axismanifestleft\"\n                                        id=\"axismanifestleft\"\n                                        label=\"Axis (LE)\"\n                                        fullWidth\n                                        multiline\n                                        rows={1}\n                                        variant=\"outlined\"\n                                        autoComplete=\"none\"\n                                        value={patient.formData.axismanifestleft || ''}\n                                        onChange={(event) => {\n                                            setPatient({ ...patient, formData: { ...patient.formData, axismanifestleft: event.target.value } })\n                                        }}\n                                    />\n                                </Grid>\n                                <Grid item xs={12} md={2}>\n                                    <TextField\n                                        name=\"addmanifestleft\"\n                                        id=\"addmanifestleft\"\n                                        label=\"Add (LE)\"\n                                        fullWidth\n                                        multiline\n                                        rows={1}\n                                        variant=\"outlined\"\n                                        autoComplete=\"none\"\n                                        value={patient.formData.addmanifestleft || ''}\n                                        onChange={(event) => {\n                                            setPatient({ ...patient, formData: { ...patient.formData, addmanifestleft: event.target.value } })\n                                        }}\n                                    />\n                                </Grid>\n                                <Grid item xs={12} md={2}>\n                                    <TextField\n                                        name=\"vamanifestleft\"\n                                        id=\"vamanifestleft\"\n                                        label=\"VA (LE)\"\n                                        fullWidth\n                                        multiline\n                                        rows={1}\n                                        variant=\"outlined\"\n                                        autoComplete=\"none\"\n                                        value={patient.formData.vamanifestleft || ''}\n                                        onChange={(event) => {\n                                            setPatient({ ...patient, formData: { ...patient.formData, vamanifestleft: event.target.value } })\n                                        }}\n                                    />\n                                </Grid>\n\n                                <Grid item xs={12} style={{ marginTop: \"50px\" }}>\n                                    <div className={classes.titleCenter}>\n                                        Cycloplegic Refraction\n                                    </div>\n                                </Grid>\n\n\n                                <Grid item xs={12} md={2}> <div className={classes.eyeText}>Right Eye : </div></Grid>\n                                <Grid item xs={12} md={2}>\n                                    <TextField\n                                        name=\"spherecycloright\"\n                                        id=\"spherecycloright\"\n                                        label=\"Sphere (RE)\"\n                                        fullWidth\n                                        multiline\n                                        rows={1}\n                                        variant=\"outlined\"\n                                        autoComplete=\"none\"\n                                        value={patient.formData.spherecycloright || ''}\n                                        onChange={(event) => {\n                                            setPatient({ ...patient, formData: { ...patient.formData, spherecycloright: event.target.value } })\n                                        }}\n                                    />\n                                </Grid>\n                                <Grid item xs={12} md={2}>\n                                    <TextField\n                                        name=\"cylcycloright\"\n                                        id=\"cylcycloright\"\n                                        label=\"Cyl (RE)\"\n                                        fullWidth\n                                        multiline\n                                        rows={1}\n                                        variant=\"outlined\"\n                                        autoComplete=\"none\"\n                                        value={patient.formData.cylcycloright || ''}\n                                        onChange={(event) => {\n                                            setPatient({ ...patient, formData: { ...patient.formData, cylcycloright: event.target.value } })\n                                        }}\n                                    />\n                                </Grid>\n                                <Grid item xs={12} md={2}>\n                                    <TextField\n                                        name=\"axiscycloright\"\n                                        id=\"axiscycloright\"\n                                        label=\"Axis (RE)\"\n                                        fullWidth\n                                        multiline\n                                        rows={1}\n                                        variant=\"outlined\"\n                                        autoComplete=\"none\"\n                                        value={patient.formData.axiscycloright || ''}\n                                        onChange={(event) => {\n                                            setPatient({ ...patient, formData: { ...patient.formData, axiscycloright: event.target.value } })\n                                        }}\n                                    />\n                                </Grid>\n                                <Grid item xs={12} md={2}>\n                                    <TextField\n                                        name=\"addcycloright\"\n                                        id=\"addcycloright\"\n                                        label=\"Add (RE)\"\n                                        fullWidth\n                                        multiline\n                                        rows={1}\n                                        variant=\"outlined\"\n                                        autoComplete=\"none\"\n                                        value={patient.formData.addcycloright || ''}\n                                        onChange={(event) => {\n                                            setPatient({ ...patient, formData: { ...patient.formData, addcycloright: event.target.value } })\n                                        }}\n                                    />\n                                </Grid>\n                                <Grid item xs={12} md={2}>\n                                    <TextField\n                                        name=\"vacycloright\"\n                                        id=\"vacycloright\"\n                                        label=\"VA (RE)\"\n                                        fullWidth\n                                        multiline\n                                        rows={1}\n                                        variant=\"outlined\"\n                                        autoComplete=\"none\"\n                                        value={patient.formData.vacycloright || ''}\n                                        onChange={(event) => {\n                                            setPatient({ ...patient, formData: { ...patient.formData, vacycloright: event.target.value } })\n                                        }}\n                                    />\n                                </Grid>\n\n                                <Grid item xs={12} md={2}> <div className={classes.eyeText}>Left Eye : </div></Grid>\n                                <Grid item xs={12} md={2}>\n                                    <TextField\n                                        name=\"spherecycloleft\"\n                                        id=\"spherecycloleft\"\n                                        label=\"Sphere (LE)\"\n                                        fullWidth\n                                        multiline\n                                        rows={1}\n                                        variant=\"outlined\"\n                                        autoComplete=\"none\"\n                                        value={patient.formData.spherecycloleft || ''}\n                                        onChange={(event) => {\n                                            setPatient({ ...patient, formData: { ...patient.formData, spherecycloleft: event.target.value } })\n                                        }}\n                                    />\n                                </Grid>\n                                <Grid item xs={12} md={2}>\n                                    <TextField\n                                        name=\"cylcycloleft\"\n                                        id=\"cylcycloleft\"\n                                        label=\"Cyl (LE)\"\n                                        fullWidth\n                                        multiline\n                                        rows={1}\n                                        variant=\"outlined\"\n                                        autoComplete=\"none\"\n                                        value={patient.formData.cylcycloleft || ''}\n                                        onChange={(event) => {\n                                            setPatient({ ...patient, formData: { ...patient.formData, cylcycloleft: event.target.value } })\n                                        }}\n                                    />\n                                </Grid>\n                                <Grid item xs={12} md={2}>\n                                    <TextField\n                                        name=\"axiscycloleft\"\n                                        id=\"axiscycloleft\"\n                                        label=\"Axis (LE)\"\n                                        fullWidth\n                                        multiline\n                                        rows={1}\n                                        variant=\"outlined\"\n                                        autoComplete=\"none\"\n                                        value={patient.formData.axiscycloleft || ''}\n                                        onChange={(event) => {\n                                            setPatient({ ...patient, formData: { ...patient.formData, axiscycloleft: event.target.value } })\n                                        }}\n                                    />\n                                </Grid>\n                                <Grid item xs={12} md={2}>\n                                    <TextField\n                                        name=\"addcycloleft\"\n                                        id=\"addcycloleft\"\n                                        label=\"Add (LE)\"\n                                        fullWidth\n                                        multiline\n                                        rows={1}\n                                        variant=\"outlined\"\n                                        autoComplete=\"none\"\n                                        value={patient.formData.addcycloleft || ''}\n                                        onChange={(event) => {\n                                            setPatient({ ...patient, formData: { ...patient.formData, addcycloleft: event.target.value } })\n                                        }}\n                                    />\n                                </Grid>\n                                <Grid item xs={12} md={2}>\n                                    <TextField\n                                        name=\"vacycloleft\"\n                                        id=\"vacycloleft\"\n                                        label=\"VA (LE)\"\n                                        fullWidth\n                                        multiline\n                                        rows={1}\n                                        variant=\"outlined\"\n                                        autoComplete=\"none\"\n                                        value={patient.formData.vacycloleft || ''}\n                                        onChange={(event) => {\n                                            setPatient({ ...patient, formData: { ...patient.formData, vacycloleft: event.target.value } })\n                                        }}\n                                    />\n                                </Grid>\n\n\n                            </Grid>\n                        </TabPanel>\n                        <TabPanel value={value} index={9}>\n                            <Grid container spacing={2}>\n                                <Grid item xs={12} md={2}> <div className={classes.eyeText}>Right Eye : </div></Grid>\n                                <Grid item xs={12} md={2}>\n                                    <TextField\n                                        name=\"spheretargetrefright\"\n                                        id=\"spheretargetrefright\"\n                                        label=\"Sphere (RE)\"\n                                        fullWidth\n                                        multiline\n                                        rows={1}\n                                        variant=\"outlined\"\n                                        autoComplete=\"none\"\n                                        value={patient.formData.spheretargetrefright || ''}\n                                        onChange={(event) => {\n                                            setPatient({ ...patient, formData: { ...patient.formData, spheretargetrefright: event.target.value } })\n                                        }}\n                                    />\n                                </Grid>\n                                <Grid item xs={12} md={2}>\n                                    <TextField\n                                        name=\"cyltargetrefright\"\n                                        id=\"cyltargetrefright\"\n                                        label=\"Cyl (RE)\"\n                                        fullWidth\n                                        multiline\n                                        rows={1}\n                                        variant=\"outlined\"\n                                        autoComplete=\"none\"\n                                        value={patient.formData.cyltargetrefright || ''}\n                                        onChange={(event) => {\n                                            setPatient({ ...patient, formData: { ...patient.formData, cyltargetrefright: event.target.value } })\n                                        }}\n                                    />\n                                </Grid>\n                                <Grid item xs={12} md={2}>\n                                    <TextField\n                                        name=\"axistargetrefright\"\n                                        id=\"axistargetrefright\"\n                                        label=\"Axis (RE)\"\n                                        fullWidth\n                                        multiline\n                                        rows={1}\n                                        variant=\"outlined\"\n                                        autoComplete=\"none\"\n                                        value={patient.formData.axistargetrefright || ''}\n                                        onChange={(event) => {\n                                            setPatient({ ...patient, formData: { ...patient.formData, axistargetrefright: event.target.value } })\n                                        }}\n                                    />\n\n                                </Grid>\n                                <Grid item xs={12} md={2}>\n                                </Grid>\n                                <Grid item xs={12} md={2}></Grid>\n\n\n                                <Grid item xs={12} md={2}> <div className={classes.eyeText}>Left Eye : </div></Grid>\n                                <Grid item xs={12} md={2}>\n                                    <TextField\n                                        name=\"spheretargetrefleft\"\n                                        id=\"spheretargetrefleft\"\n                                        label=\"Sphere (LE)\"\n                                        fullWidth\n                                        multiline\n                                        rows={1}\n                                        variant=\"outlined\"\n                                        autoComplete=\"none\"\n                                        value={patient.formData.spheretargetrefleft || ''}\n                                        onChange={(event) => {\n                                            setPatient({ ...patient, formData: { ...patient.formData, spheretargetrefleft: event.target.value } })\n                                        }}\n                                    />\n                                </Grid>\n                                <Grid item xs={12} md={2}>\n                                    <TextField\n                                        name=\"cyltargetrefleft\"\n                                        id=\"cyltargetrefleft\"\n                                        label=\"Cyl (LE)\"\n                                        fullWidth\n                                        multiline\n                                        rows={1}\n                                        variant=\"outlined\"\n                                        autoComplete=\"none\"\n                                        value={patient.formData.cyltargetrefleft || ''}\n                                        onChange={(event) => {\n                                            setPatient({ ...patient, formData: { ...patient.formData, cyltargetrefleft: event.target.value } })\n                                        }}\n                                    />\n                                </Grid>\n                                <Grid item xs={12} md={2}>\n                                    <TextField\n                                        name=\"axistargetrefleft\"\n                                        id=\"axistargetrefleft\"\n                                        label=\"Axis (LE)\"\n                                        fullWidth\n                                        multiline\n                                        rows={1}\n                                        variant=\"outlined\"\n                                        autoComplete=\"none\"\n                                        value={patient.formData.axistargetrefleft || ''}\n                                        onChange={(event) => {\n                                            setPatient({ ...patient, formData: { ...patient.formData, axistargetrefleft: event.target.value } })\n                                        }}\n                                    />\n\n                                </Grid>\n                                <Grid item xs={12} md={2}>\n                                </Grid>\n                            </Grid>\n\n                        </TabPanel>\n                        <TabPanel value={value} index={10}>\n                            <Grid container spacing={2}>\n                                <Grid item xs={12}>\n                                    <TextField\n                                        name=\"recommendation\"\n                                        id=\"recommendation\"\n                                        label=\"Recommendation\"\n                                        fullWidth\n                                        multiline\n                                        rows={15}\n                                        variant=\"outlined\"\n                                        autoComplete=\"none\"\n                                        value={patient.formData.recommendation || ''}\n                                        onChange={(event) => {\n                                            setPatient({ ...patient, formData: { ...patient.formData, recommendation: event.target.value } })\n                                        }}\n                                    />\n\n                                </Grid>\n                            </Grid>\n                        </TabPanel>\n\n\n                    </div>\n\n                    <Backdrop\n                        className={classes.backdrop}\n                        open={saving}\n                    >\n                        <CircularProgress color=\"inherit\" />\n                    </Backdrop>\n\n\n                    <Dialog\n                        open={openDeleteDialog}\n                        onClose={handleCloseDeleteDialog}\n                        aria-labelledby=\"alert-dialog-title\"\n                        aria-describedby=\"alert-dialog-description\"\n                    >\n                        <DialogTitle style={{ color: \"#d10202\", fontWeight: \"600\" }} id=\"alert-dialog-title\">\n                            {\"Delete Patient\"}\n                        </DialogTitle>\n                        <DialogContent>\n                            <DialogContentText\n                                style={{ color: \"#000\", fontWeight: \"500\" }}\n                                id=\"alert-dialog-description\"\n                            >\n                                Are you sure you want to delete this patient?\n                            </DialogContentText>\n                        </DialogContent>\n                        <DialogActions>\n                            <Button onClick={handleCloseDeleteDialog} color=\"default\">\n                                Back\n                                 </Button>\n                            <Button onClick={deleteClicked} variant=\"contained\" style={{ backgroundColor: \"#d10202\", color: \"#fff\" }}>\n                                Yes, Delete this patient\n                                 </Button>\n                        </DialogActions>\n                    </Dialog>\n\n\n\n                </Dialog>\n            </React.Fragment>\n        </React.Fragment>\n    );\n}\n","import React, { useEffect, useRef, useState } from \"react\";\nimport BookService from \"./services/BookService\";\nimport Typography from \"@material-ui/core/Typography\";\nimport {\n    Backdrop,\n    Button,\n    Checkbox,\n    CircularProgress,\n    DialogActions,\n    Divider,\n    FormControlLabel,\n    Grid,\n    InputAdornment,\n    InputLabel,\n    Link,\n    makeStyles,\n    MenuItem,\n    Select,\n    Switch,\n    TextField,\n    Tooltip,\n} from \"@material-ui/core\";\nimport GlobalState from \"../GlobalState\";\nimport { withStyles } from \"@material-ui/core/styles\";\n\nimport CreditCardIcon from \"@material-ui/icons/CreditCard\";\n\nimport Dialog from \"@material-ui/core/Dialog\";\nimport DialogContent from \"@material-ui/core/DialogContent\";\n\nimport DialogTitle from \"@material-ui/core/DialogTitle\";\nimport Draggable from \"react-draggable\";\nimport Paper from \"@material-ui/core/Paper\";\n\nimport Alert from \"@material-ui/lab/Alert\";\n\nimport PropTypes from \"prop-types\";\nimport LinearProgress from \"@material-ui/core/LinearProgress\";\nimport Box from \"@material-ui/core/Box\";\n\nimport Radio from \"@material-ui/core/Radio\";\nimport RadioGroup from \"@material-ui/core/RadioGroup\";\nimport FormControl from \"@material-ui/core/FormControl\";\nimport FormLabel from \"@material-ui/core/FormLabel\";\nimport { corporates } from \"./Corporates\";\nimport NumberFormat from \"react-number-format\";\n\nimport AddIcon from \"@material-ui/icons/Add\";\nimport { validate } from \"email-validator\";\nimport DateRangeIcon from \"@material-ui/icons/DateRange\";\nimport { CalendarColors } from \"./calendar-admin/colors\";\nimport DateField from \"./DateField\";\n\nimport Autocomplete, { createFilterOptions } from '@material-ui/lab/Autocomplete';\nimport PatientService from \"./services/PatientService\";\n\nimport {matchSorter} from 'match-sorter'\nimport PatientDialog from \"./PatientDialog\";\n\n\nconst filter = createFilterOptions();\n\nvar interval;\n\nconst useStyles = makeStyles((theme) => ({\n    title: {\n        marginTop: theme.spacing(0),\n        marginBottom: theme.spacing(1),\n    },\n\n    refreshButton: {\n        marginLeft: theme.spacing(2),\n    },\n\n    checkIcon: {\n        color: \"green\",\n    },\n\n    closeIcon: {\n        color: \"red\",\n    },\n\n    RefLink: {\n        cursor: \"pointer\",\n    },\n\n    BookedLabel: {\n        backgroundColor: \"#606060\",\n        color: \"#fff\",\n        paddingRight: \"10px\",\n        paddingLeft: \"10px\",\n    },\n\n    PatientAttendedLabel: {\n        backgroundColor: \"#0066aa\",\n        color: \"#fff\",\n        paddingRight: \"15px\",\n        paddingLeft: \"10px\",\n    },\n\n    SampleTakenLabel: {\n        backgroundColor: \"#0066cc\",\n        color: \"#fff\",\n        paddingRight: \"40px\",\n        paddingLeft: \"10px\",\n    },\n\n    ReportSentLabel: {\n        backgroundColor: \"#009900\",\n        color: \"#fff\",\n        paddingRight: \"90px\",\n        paddingLeft: \"10px\",\n    },\n\n    ReportCertSentLabel: {\n        backgroundColor: \"#009900\",\n        color: \"#fff\",\n        paddingRight: \"68px\",\n        paddingLeft: \"10px\",\n    },\n\n    archiveButton: {},\n\n    smartMatchButton: {\n        backgroundColor: \"#2f942e\",\n        \"&:hover\": {\n            background: \"green\",\n            color: \"#fff\",\n        },\n        textDecoration: \"none !important\",\n        marginRight: \"10px\",\n        // padding: \"10px\"\n    },\n\n    infoTitle: {\n        fontWeight: \"400\",\n    },\n\n    infoData: {\n        paddingLeft: \"10px\",\n        fontWeight: \"800\",\n    },\n\n    matchButton: {\n        marginTop: \"30px\",\n        marginBottom: \"20px\",\n        backgroundColor: \"#2f942e\",\n        \"&:hover\": {\n            background: \"green\",\n            color: \"#fff\",\n        },\n        textDecoration: \"none !important\",\n        padding: \"10px\",\n        paddingLeft: \"50px\",\n        paddingRight: \"50px\",\n    },\n\n    resendButton: {\n        marginTop: \"5px\",\n        marginBottom: \"5px\",\n        backgroundColor: \"#2f942e\",\n        \"&:hover\": {\n            background: \"green\",\n            color: \"#fff\",\n        },\n        textDecoration: \"none !important\",\n        padding: \"10px\",\n        paddingLeft: \"50px\",\n        paddingRight: \"50px\",\n    },\n\n    resendFilesButton: {\n        marginTop: \"5px\",\n        marginBottom: \"5px\",\n        backgroundColor: \"#3792ad\",\n        \"&:hover\": {\n            background: \"#2f798f\",\n            color: \"#fff\",\n        },\n        textDecoration: \"none !important\",\n        padding: \"10px\",\n        paddingLeft: \"50px\",\n        paddingRight: \"50px\",\n    },\n\n    cancelButton: {\n        marginBottom: \"10px\",\n        textDecoration: \"none !important\",\n        padding: \"10px\",\n        paddingLeft: \"90px\",\n        paddingRight: \"90px\",\n    },\n\n    CalendarIcon: {\n        color: theme.palette.primary.main,\n    },\n\n    DateTimeLabel: {\n        fontWeight: \"600\",\n        fontSize: \"1.2rem\",\n        color: theme.palette.primary.main,\n    },\n\n    backdrop: {\n        zIndex: theme.zIndex.drawer + 5,\n        color: \"#fff\",\n    },\n\n    PriceLabelPaid: {\n        color: theme.palette.primary.main,\n        fontWeight: \"600\"\n    },\n\n    PriceLabelNotPaid: {\n        color: theme.palette.secondary.main,\n        fontWeight: \"600\"\n    },\n\n\n}));\n\nconst Packages = [\n    { packageName: \"Consultation with Consultant Gynaecologist\" },\n    { packageName: `Coil Fitting/Coil Removal` },\n    { packageName: `Well Woman Check` },\n    { packageName: `Sexual Health Screening` },\n    { packageName: `Pre-pregnancy/Fertility check` },\n    { packageName: `Gynaecological Ultrasound` },\n    { packageName: `HPV Vaccination` },\n    { packageName: `Cervical / Pap Smear` },\n    { packageName: `HPV Treatment / Wart Cryo-Therapy` },\n];\n\nfunction NumberFormatCustom(props) {\n    const { inputRef, onChange, ...other } = props;\n\n    return (\n        <NumberFormat\n            {...other}\n            getInputRef={inputRef}\n            onValueChange={(values) => {\n                onChange({\n                    target: {\n                        name: props.name,\n                        value: values.value,\n                    },\n                });\n            }}\n            thousandSeparator\n            isNumericString\n            prefix=\"\"\n        />\n    );\n}\n\nNumberFormatCustom.propTypes = {\n    inputRef: PropTypes.func.isRequired,\n    name: PropTypes.string.isRequired,\n    onChange: PropTypes.func.isRequired,\n};\n\nconst BorderLinearProgress = withStyles((theme) => ({\n    root: {\n        height: 10,\n        borderRadius: 5,\n    },\n    colorPrimary: {\n        backgroundColor: \"#cedbce\", //theme.palette.grey[theme.palette.type === 'light' ? 200 : 700],\n    },\n    bar: {\n        borderRadius: 5,\n        backgroundColor: \"#2f942e\",\n    },\n}))(LinearProgress);\nfunction LinearProgressWithLabel(props) {\n    return (\n        <Box display=\"flex\" alignItems=\"center\">\n            <Box width=\"100%\" mr={1}>\n                <BorderLinearProgress variant=\"determinate\" {...props} />\n            </Box>\n            <Box minWidth={35}>\n                <Typography\n                    style={{ fontWeight: \"800\", color: \"#5e855e\" }}\n                    variant=\"body2\"\n                    color=\"textSecondary\"\n                >{`${Math.round(props.value)}%`}</Typography>\n            </Box>\n        </Box>\n    );\n}\n\nLinearProgressWithLabel.propTypes = {\n    /**\n     * The value of the progress indicator for the determinate and buffer variants.\n     * Value between 0 and 100.\n     */\n    value: PropTypes.number.isRequired,\n};\n\nfunction PaperComponent(props) {\n    return (\n        <Draggable\n            handle=\"#draggable-dialog-title\"\n            cancel={'[class*=\"MuiDialogContent-root\"]'}\n        >\n            <Paper {...props} />\n        </Draggable>\n    );\n}\n\nexport default function NewOVBookingDialog(props) {\n    const classes = useStyles();\n\n    const [state, setState] = React.useContext(GlobalState);\n    const [saving, setSaving] = useState(false);\n\n    const [fullname, setFullname] = React.useState(\"\");\n    const [fullnameError, setFullnameError] = React.useState(false);\n\n    const [patientRecord, setPatientRecord] = React.useState(null)\n    const [patientList, setPatientList] = React.useState([])\n\n\n    const [phone, setPhone] = React.useState(\"\");\n    const [email, setEmail] = React.useState(\"\");\n    const [notes, setNotes] = React.useState(\"\");\n\n    const [patientID, setPatientID] = React.useState(\"\");\n    const [prescriptionLeft, setPrescriptionLeft] = React.useState(\"\");\n    const [prescriptionRight, setPrescriptionRight] = React.useState(\"\");\n\n\n    const [birthDate, setBirthDate] = React.useState(\"\");\n    const [birthDateError, setBirthDateError] = React.useState(false);\n\n\n    const birthDateChanged = (dateStr) => {\n        setBirthDate(dateStr);\n    }\n\n\n\n\n    const fullnameChanged = (event) => {\n        setFullname(event.target.value);\n        setFullnameError(false);\n    };\n\n    const phoneChanged = (event) => {\n        setPhone(event.target.value);\n    };\n\n    const emailChanged = (event) => {\n        setEmail(event.target.value);\n    };\n\n\n    const notesChanged = (event) => {\n        setNotes(event.target.value);\n    };\n\n    const patientIDChanged = (event) => {\n        setPatientID(event.target.value);\n    };\n\n    const prescriptionLeftChanged = (event) => {\n        setPrescriptionLeft(event.target.value);\n    };\n\n    const prescriptionRightChanged = (event) => {\n        setPrescriptionRight(event.target.value);\n    };\n\n    useEffect(() => {\n        if (props.open)\n        {\n            loadPatiens()\n        }\n\n    }, [props.open, state.patientDialogDataChanged])\n\n    const loadPatiens = async() =>\n    {\n        try{\n            const res = await PatientService.getAllPatients()\n            setPatientList(res.data)\n        }catch(err)\n        {\n            console.error(err)\n        }\n    }\n\n    const handleClose = () => {\n        if (saving) return;\n\n        setFullname(\"\");\n        setFullnameError(false);\n        setBirthDateError(false)\n        setPhone(\"\");\n        setEmail(\"\");\n        setNotes(\"\");\n        setBirthDate(\"\")\n        setPatientID(\"\")\n        setPrescriptionLeft(\"\")\n        setPrescriptionRight(\"\")\n        setPatientRecord(null)\n\n        props.handleClose();\n        setSaving(false);\n    };\n\n    const validateBooking = () => {\n        let error = false;\n        if (!fullname || fullname.trim().length < 1) {\n            setFullnameError(true);\n            error = true;\n        }\n\n        if (birthDate && birthDate.length >= 1 && birthDate.length < 10) {\n            setBirthDateError(true);\n            error = true;\n        }\n\n        return !error;\n    };\n\n    const saveClicked = async () => {\n        if (!validateBooking()) {\n            return;\n        }\n\n        setSaving(true);\n\n        try {\n            await BookService.addNewBooking({\n                bookingDate: props.date,\n                bookingTime: props.time,\n                fullname: fullname,\n                phone: phone,\n                email: email,\n                birthDate: birthDate,\n                notes: notes,\n                clinic: props.clinic,\n                patientID: patientID,\n                prescriptionLeft: prescriptionLeft,\n                prescriptionRight: prescriptionRight\n            });\n            setSaving(false);\n            setState((state) => ({\n                ...state,\n                bookingDialogDataChanged: !state.bookingDialogDataChanged\n                    ? true\n                    : false,\n            }));\n            handleClose();\n        } catch (err) {\n            console.error(err);\n            setSaving(false);\n        }\n    };\n\n    const getColorFromClinic = (clinic) => {\n        switch (clinic) {\n            case \"Virtual Consultation\":\n                return CalendarColors.VC_COLOR\n            case \"F2F Clinic\":\n                return CalendarColors.F2F_COLOR\n            case \"Laser Theatre\":\n                return CalendarColors.LASER_COLOR\n            case \"Lens Theatre\":\n                return CalendarColors.CATARACT_COLOR\n            case \"Post OP\":\n                return CalendarColors.POSTOP_COLOR\n            case \"Optometry\":\n                return CalendarColors.OPOTOMETRY_COLOR\n\n            default:\n                return \"#777\"\n\n        }\n    }\n\n    const filterOptions = (options, { inputValue }) => {\n\n        if (inputValue && inputValue.length >= 1)\n        {\n        //   setNoOptionsText(\"\")\n          return matchSorter(options, inputValue, {keys: ['fullname']});\n        }\n        else\n        {\n        //   setNoOptionsText(\"Please enter at least 3 characters\")\n          return matchSorter(options, '$$$$', {keys: ['fullname']});\n        }\n      }\n\n      const [patientDialogOpen, setPatientDialogOpen] = React.useState(false)\n      const handleClosePatientDialog = () =>\n      {\n          setPatientDialogOpen(false)\n          setNewName('')\n          setNewSurname('')\n      }\n\n      const [newName, setNewName] = React.useState('')\n      const [newSurname, setNewSurname] = React.useState('')\n\n      useEffect ( () => {\n          if (patientRecord)\n          {\n              setFullname(patientRecord.fullname || '')\n              setPatientID(patientRecord.patientID || '')\n              setEmail(patientRecord.email || '')\n              setPhone(patientRecord.mobileTel || patientRecord.homeTel || '')\n              setBirthDate(patientRecord.birthDate || null)\n          }else\n          {\n            setFullname('')\n            setPatientID('')\n            setEmail('')\n            setPhone('')\n            setBirthDate(null)\n        }\n\n      }, [patientRecord])\n    \n\n    return (\n        <React.Fragment>\n            {props.date && props.time && (\n                <React.Fragment>\n                    <Dialog\n                        maxWidth=\"md\"\n                        open={props.open}\n                        onClose={handleClose}\n                        PaperComponent={PaperComponent}\n                        aria-labelledby=\"form-dialog-title\"\n                    >\n                        <DialogTitle id=\"draggable-dialog-title\">\n\n                            <div style={{ position: \"absolute\", left: \"0px\", top: \"0px\", width: \"100%\", backgroundColor: getColorFromClinic(props.clinic), color: \"#fff\", padding: \"15px 5px\", textAlign: \"center\", fontSize: \"1.5rem\" }}>\n                                <Grid container direction=\"row\"\n                                    justify=\"center\"\n                                    alignItems=\"center\"\n                                    spacing={1}\n                                >\n                                    <Grid item>\n                                        <AddIcon style={{ fontSize: \"2.5rem\" }} />\n                                    </Grid>\n                                    <Grid item style={{ marginTop: \"-12px\" }}>\n                                        {props.clinic}\n\n                                    </Grid>\n                                </Grid>\n                            </div>\n\n\n                        </DialogTitle>\n                        <DialogContent>\n                            <div\n                                style={{\n                                    paddingTop: \"50px\",\n                                    paddingBottom: \"20px\"\n                                }}\n                            >\n                                <Grid\n                                    container\n                                    direction=\"row\"\n                                    justify=\"stretch\"\n                                    spacing={2}\n                                    alignItems=\"center\"\n                                >\n                                    <Grid item xs={12} style={{ marginTop: \"10px\" }}>\n                                        <Grid\n                                            container\n                                            direction=\"row\"\n                                            justify=\"center\"\n                                            alignItems=\"center\"\n                                            spacing={1}\n                                        >\n                                            <Grid item>\n                                                <DateRangeIcon className={classes.CalendarIcon} />\n                                            </Grid>\n                                            <Grid item>\n                                                <span className={classes.DateTimeLabel}>\n                                                    {props.date} , {props.time}\n                                                </span>\n                                            </Grid>\n                                        </Grid>\n                                    </Grid>\n\n                                    <Grid item xs={12} md={6}>\n                                        {/* <TextField\n                                            fullWidth\n                                            autoFocus\n                                            error={fullnameError}\n                                            label=\"Full Name\"\n                                            value={fullname}\n                                            required\n                                            onChange={fullnameChanged}\n                                            name=\"fullname\"\n                                            id=\"fullname-id\"\n                                            autoComplete=\"none\"\n                                        /> */}\n\n                                        <Autocomplete\n                                            fullWidth\n                                            autoComplete=\"none\"\n                                            value={patientRecord}\n                                            onChange={(event, newValue) => {\n                                                if (typeof newValue === 'string') {\n                                                    // timeout to avoid instant validation of the dialog's form.\n                                                    setTimeout(() => {\n                                                        const _nameArray = newValue.split(\" \")\n                                                        console.log(_nameArray)\n                                                        if (_nameArray.length >= 1)\n                                                        {\n                                                            setNewName(_nameArray[0])\n                                                        }\n                                                        if (_nameArray.length >=2 )\n                                                        {\n                                                            setNewSurname(_nameArray[1])\n                                                        }\n                                                        setPatientDialogOpen(true)\n                                                        // toggleOpen(true);\n                                                        // setDialogValue({\n                                                        //     title: newValue,\n                                                        //     year: '',\n                                                        // });\n                                                    });\n                                                } else if (newValue && newValue.inputValue) {\n                                                    const _nameArray = newValue.inputValue.split(\" \")\n                                                    console.log(_nameArray)\n\n                                                    if (_nameArray.length >= 1)\n                                                    {\n                                                        setNewName(_nameArray[0])\n                                                    }\n                                                    if (_nameArray.length >= 2 )\n                                                    {\n                                                        setNewSurname(_nameArray[1])\n                                                    }\n\n                                                    setPatientDialogOpen(true)\n                                                    // toggleOpen(true);\n                                                    // setDialogValue({\n                                                    //     title: newValue.inputValue,\n                                                    //     year: '',\n                                                    // });\n                                                } else {\n                                                    setPatientRecord(newValue);\n                                                }\n                                            }}\n                                            filterOptions={(options, params) => {\n                                                // const filtered = filter(options, params);\n                                                const filtered = filterOptions(options,params)\n\n                                                if (params.inputValue !== '') {\n                                                    filtered.push({\n                                                        inputValue: params.inputValue,\n                                                        fullname: `Add \"${params.inputValue}\"`,\n                                                    });\n                                                }\n\n                                                return filtered;\n                                            }}\n                                            id=\"fullname\"\n                                            options={patientList}\n                                            getOptionLabel={(option) => {\n                                                // e.g value selected with enter, right from the input\n                                                if (typeof option === 'string') {\n                                                    return option;\n                                                }\n                                                if (option.inputValue) {\n                                                    return option.inputValue;\n                                                }\n                                                return option.fullname;\n                                            }}\n                                            selectOnFocus\n                                            clearOnBlur\n                                            handleHomeEndKeys\n                                            renderOption={(option) => option.fullname}\n                                            // style={{ width: 300 }}\n                                            freeSolo\n                                            renderInput={(params) => (\n                                                <TextField {...params} onBlur={(event) => {setPatientRecord({...patientRecord, fullname:event.target.value})}} autoComplete=\"none\" autoFocus error={fullnameError} fullWidth label=\"Full Name\" required />\n                                            )}\n                                        />\n                                    </Grid>\n\n                                    <Grid item xs={12} md={6}>\n                                        <TextField\n                                            fullWidth\n                                            label=\"Patient ID\"\n                                            value={patientID}\n                                            onChange={patientIDChanged}\n                                            name=\"patientid\"\n                                            id=\"patientid-id\"\n                                            autoComplete=\"none\"\n                                        />\n                                    </Grid>\n\n\n                                    <Grid item xs={12} md={6}>\n                                        <TextField\n                                            fullWidth\n                                            label=\"Telephone\"\n                                            value={phone}\n                                            onChange={phoneChanged}\n                                            name=\"phone\"\n                                            id=\"phone-id\"\n                                            autoComplete=\"none\"\n                                        />\n                                    </Grid>\n\n                                    <Grid item xs={12} md={6}>\n                                        <TextField\n                                            fullWidth\n                                            label=\"Email\"\n                                            value={email}\n                                            onChange={emailChanged}\n                                            name=\"email\"\n                                            id=\"email-id\"\n                                            autoComplete=\"none\"\n                                        />\n                                    </Grid>\n\n                                    <Grid item xs={12}>\n                                        <DateField\n                                            error={birthDateError}\n                                            title=\"Date of Birth\"\n                                            value={birthDate}\n                                            dateChanged={birthDateChanged}\n                                        >\n\n                                        </DateField>\n                                    </Grid>\n\n                                    <Grid item xs={12} md={6}>\n                                        <TextField\n                                            fullWidth\n                                            label=\"Prescription (LEFT)\"\n                                            value={prescriptionLeft}\n                                            onChange={prescriptionLeftChanged}\n                                            name=\"pleft\"\n                                            id=\"pleft-id\"\n                                            autoComplete=\"none\"\n                                        />\n                                    </Grid>\n\n                                    <Grid item xs={12} md={6}>\n                                        <TextField\n                                            fullWidth\n                                            label=\"Prescription (RIGHT)\"\n                                            value={prescriptionRight}\n                                            onChange={prescriptionRightChanged}\n                                            name=\"pright\"\n                                            id=\"pright-id\"\n                                            autoComplete=\"none\"\n                                        />\n                                    </Grid>\n\n                                    <Grid item xs={12}>\n                                        <TextField\n                                            fullWidth\n                                            label=\"Notes\"\n                                            value={notes}\n                                            onChange={notesChanged}\n                                            name=\"notes\"\n                                            id=\"notes-id\"\n                                            autoComplete=\"none\"\n                                        />\n                                    </Grid>\n                                </Grid>\n\n                                <div\n                                    style={{\n                                        position: \"absolute\",\n                                        bottom: \"20px\",\n                                        right: \"20px\",\n                                    }}\n                                >\n                                </div>\n                            </div>\n\n                            <Backdrop className={classes.backdrop} open={saving}>\n                                <CircularProgress color=\"inherit\" />\n                            </Backdrop>\n                        </DialogContent>\n\n                        <DialogActions>\n                            <Grid\n                                container\n                                direction=\"row\"\n                                justify=\"flex-end\"\n                                alignItems=\"center\"\n                                spacing={1}\n                            >\n                                <Grid item>\n                                    <Button\n                                        onClick={handleClose}\n                                        style={{ width: \"100px\" }}\n                                        disabled={saving}\n                                    >\n                                        back\n                      </Button>\n                                </Grid>\n                                <Grid item>\n                                    <Button\n                                        onClick={saveClicked}\n                                        variant=\"contained\"\n                                        color=\"secondary\"\n                                        // style={{ width: \"100px\" }}\n                                        disabled={saving}\n                                    >\n                                        Book Appointment\n                      </Button>\n                                </Grid>\n                            </Grid>\n\n                        </DialogActions>\n\n\n                        <PatientDialog\n                            patient={null}\n                            open={patientDialogOpen}\n                            handleClose={handleClosePatientDialog}\n                            title={\"Add New Patient\"}\n                            saveButtonText={\"Save\"}\n                            name={newName}\n                            surname={newSurname}\n                        />\n\n\n                    </Dialog>\n                </React.Fragment>\n            )}\n        </React.Fragment>\n    );\n}\n","import React, { useEffect, useRef, useState } from \"react\";\nimport BookService from \"./services/BookService\";\nimport Typography from \"@material-ui/core/Typography\";\nimport {\n    Backdrop,\n    Button,\n    Checkbox,\n    CircularProgress,\n    DialogActions,\n    Divider,\n    FormControlLabel,\n    Grid,\n    InputAdornment,\n    InputLabel,\n    Link,\n    makeStyles,\n    MenuItem,\n    Select,\n    TextField,\n    Tooltip,\n} from \"@material-ui/core\";\nimport GlobalState from \"./../GlobalState\";\nimport { withStyles } from \"@material-ui/core/styles\";\n\nimport CreditCardIcon from \"@material-ui/icons/CreditCard\";\n\nimport Dialog from \"@material-ui/core/Dialog\";\nimport DialogContent from \"@material-ui/core/DialogContent\";\n\nimport DialogTitle from \"@material-ui/core/DialogTitle\";\nimport Draggable from \"react-draggable\";\nimport Paper from \"@material-ui/core/Paper\";\n\nimport Alert from \"@material-ui/lab/Alert\";\n\nimport PropTypes from \"prop-types\";\nimport LinearProgress from \"@material-ui/core/LinearProgress\";\nimport Box from \"@material-ui/core/Box\";\n\nimport Radio from \"@material-ui/core/Radio\";\nimport RadioGroup from \"@material-ui/core/RadioGroup\";\nimport FormControl from \"@material-ui/core/FormControl\";\nimport FormLabel from \"@material-ui/core/FormLabel\";\nimport { corporates } from \"./Corporates\";\nimport NumberFormat from \"react-number-format\";\n\nimport AccessAlarmsIcon from '@material-ui/icons/AccessAlarms';\nimport DateField from \"./DateField\";\n\n\n\nconst useStyles = makeStyles((theme) => ({\n    title: {\n        marginTop: theme.spacing(0),\n        marginBottom: theme.spacing(1),\n    },\n\n    refreshButton: {\n        marginLeft: theme.spacing(2),\n    },\n\n    checkIcon: {\n        color: \"green\",\n    },\n\n    closeIcon: {\n        color: \"red\",\n    },\n\n    RefLink: {\n        cursor: \"pointer\",\n    },\n\n    BookedLabel: {\n        backgroundColor: \"#606060\",\n        color: \"#fff\",\n        paddingRight: \"10px\",\n        paddingLeft: \"10px\",\n    },\n\n    PatientAttendedLabel: {\n        backgroundColor: \"#0066aa\",\n        color: \"#fff\",\n        paddingRight: \"15px\",\n        paddingLeft: \"10px\",\n    },\n\n    SampleTakenLabel: {\n        backgroundColor: \"#0066cc\",\n        color: \"#fff\",\n        paddingRight: \"40px\",\n        paddingLeft: \"10px\",\n    },\n\n    ReportSentLabel: {\n        backgroundColor: \"#009900\",\n        color: \"#fff\",\n        paddingRight: \"90px\",\n        paddingLeft: \"10px\",\n    },\n\n    ReportCertSentLabel: {\n        backgroundColor: \"#009900\",\n        color: \"#fff\",\n        paddingRight: \"68px\",\n        paddingLeft: \"10px\",\n    },\n\n    archiveButton: {},\n\n    smartMatchButton: {\n        backgroundColor: \"#2f942e\",\n        \"&:hover\": {\n            background: \"green\",\n            color: \"#fff\",\n        },\n        textDecoration: \"none !important\",\n        marginRight: \"10px\",\n        // padding: \"10px\"\n    },\n\n    infoTitle: {\n        fontWeight: \"400\",\n    },\n\n    infoData: {\n        paddingLeft: \"10px\",\n        fontWeight: \"800\",\n    },\n\n    matchButton: {\n        marginTop: \"30px\",\n        marginBottom: \"20px\",\n        backgroundColor: \"#2f942e\",\n        \"&:hover\": {\n            background: \"green\",\n            color: \"#fff\",\n        },\n        textDecoration: \"none !important\",\n        padding: \"10px\",\n        paddingLeft: \"50px\",\n        paddingRight: \"50px\",\n    },\n\n    resendButton: {\n        marginTop: \"5px\",\n        marginBottom: \"5px\",\n        backgroundColor: \"#2f942e\",\n        \"&:hover\": {\n            background: \"green\",\n            color: \"#fff\",\n        },\n        textDecoration: \"none !important\",\n        padding: \"10px\",\n        paddingLeft: \"50px\",\n        paddingRight: \"50px\",\n    },\n\n    resendFilesButton: {\n        marginTop: \"5px\",\n        marginBottom: \"5px\",\n        backgroundColor: \"#3792ad\",\n        \"&:hover\": {\n            background: \"#2f798f\",\n            color: \"#fff\",\n        },\n        textDecoration: \"none !important\",\n        padding: \"10px\",\n        paddingLeft: \"50px\",\n        paddingRight: \"50px\",\n    },\n\n    cancelButton: {\n        marginBottom: \"10px\",\n        textDecoration: \"none !important\",\n        padding: \"10px\",\n        paddingLeft: \"90px\",\n        paddingRight: \"90px\",\n    },\n\n    backdrop: {\n        zIndex: theme.zIndex.drawer + 5,\n        color: \"#fff\",\n    },\n\n    timeControl: {\n        marginTop: \"20px\",\n    }\n}));\n\n\nfunction PaperComponent(props) {\n    return (\n        <Draggable\n            handle=\"#draggable-dialog-title\"\n            cancel={'[class*=\"MuiDialogContent-root\"]'}\n        >\n            <Paper {...props} />\n        </Draggable>\n    );\n}\n\nconst times = [\n    '08:00 AM',\n    '08:15 AM',\n    '08:30 AM', \n    '08:45 AM',\n    '09:00 AM',\n    '09:15 AM', \n    '09:30 AM',\n    '09:45 AM',\n    '10:00 AM',\n    '10:15 AM',\n    '10:30 AM',\n    '10:45 AM',\n    '11:00 AM',\n    '11:15 AM',\n    '11:30 AM',\n    '11:45 AM',\n    '12:00 PM',\n    '12:15 PM',\n    '12:30 PM',\n    '12:45 PM',\n    '01:00 PM',\n    '01:15 PM',\n    '01:30 PM',\n    '01:45 PM',\n    '02:00 PM',\n    '02:15 PM',\n    '02:30 PM',\n    '02:45 PM',\n    '03:00 PM',\n    '03:15 PM',\n    '03:30 PM',\n    '03:45 PM',\n    '04:00 PM',\n    '04:15 PM',\n    '04:30 PM',\n    '04:45 PM',\n    '05:00 PM',\n    '05:15 PM',\n    '05:30 PM',\n    '05:45 PM',\n    '06:00 PM',\n    '06:15 PM',\n    '06:30 PM',\n    '06:45 PM',\n    '07:00 PM',\n    '07:15 PM',\n    '07:30 PM',\n    '07:45 PM'\n];\n\nexport default function DateDialog(props) {\n    const classes = useStyles();\n\n    const [state, setState] = React.useContext(GlobalState);\n\n    const [date, setDate] = React.useState(\"\")\n    const [time, setTime] = React.useState(\"\")\n\n    const [dateError, setDateError] = React.useState(false)\n\n\n    const dateChanged = (value) => {\n        setDate(value)\n        setDateError(false)\n    }\n\n    const timeChanged = (event) => {\n        setTime(event.target.value)\n    }\n\n    useEffect(() => {\n        setDate(props.date)\n        setTime(props.time)\n\n    }, [props.date, props.time, props.open])\n\n\n\n    const handleClose = () => {\n\n        setDateError(false)\n        props.handleClose();\n    };\n\n    const okClicked = () => {\n        if (!date || date.length < 10) {\n            setDateError(true)\n            return\n        }\n\n        props.handleOK(date, time)\n    }\n\n\n    return (\n        <React.Fragment>\n            <React.Fragment>\n                <Dialog\n                    maxWidth=\"sm\"\n                    open={props.open}\n                    onClose={handleClose}\n                    PaperComponent={PaperComponent}\n                    aria-labelledby=\"form-dialog-title\"\n                >\n                    <DialogTitle id=\"draggable-dialog-title\">\n                        <Grid\n                            container\n                            spacing={2}\n                            direction=\"row\"\n                            justify=\"center\"\n                            alignItems=\"center\"\n                        >\n                            <Grid item>\n                                <AccessAlarmsIcon\n                                    style={{ color: \"#03b5f2\", fontSize: \"3rem\" }}\n                                />\n                            </Grid>\n\n                            <Grid item>\n                                <div\n                                    style={{\n                                        color: \"#03b5f2\",\n                                        paddingBottom: \"10px\",\n                                        fontWeight: \"800\",\n                                    }}\n                                >\n                                    {\" \"}\n                    Change Date and Time{\" \"}\n                                </div>\n                            </Grid>\n                        </Grid>\n\n                        <Divider />\n                    </DialogTitle>\n                    <DialogContent>\n                        <Grid container spacing={1}>\n\n                            <Grid item xs={8}>\n                                <DateField\n                                    error={dateError}\n                                    title=\"Appointment Date\"\n                                    value={date}\n                                    dateChanged={dateChanged}\n                                >\n\n                                </DateField>\n                            </Grid>\n\n                            <Grid item xs={4}>\n                                <div style={{ position: \"relative\", border: `1px solid ${'#ddd'}`, borderRadius: \"10px\", padding: \"20px\", paddingBottom: \"20px\", marginTop: \"20px\" }}>\n\n                                    <div style={{ position: \"absolute\", top: \"-15px\", left: \"15px\", backgroundColor: \"#fff\", color: `${'#555'}`, padding: \"5px\", paddingLeft: \"10px\", paddingRight: \"10px\" }}>\n                                        Appointment Time\n                                    </div>\n\n\n\n                                    <Grid\n                                        container\n                                        direction=\"row\"\n                                        justify=\"flex-start\"\n                                        alignItems=\"flex-start\"\n                                        spacing={2}\n                                    >\n\n\n                                        <Grid item xs={12}>\n                                            <FormControl fullWidth>\n                                                <InputLabel id=\"time-label\">Time</InputLabel>\n                                                <Select\n\n                                                    labelId=\"time-label\"\n                                                    id=\"time-select\"\n                                                    value={time}\n                                                    onChange={timeChanged}\n                                                >\n                                                    {times.map(item => (\n\n                                                        <MenuItem value={item}>{item}</MenuItem>\n\n                                                    ))}\n                                                </Select>\n                                            </FormControl>\n\n\n                                        </Grid>\n\n\n                                    </Grid>\n\n                                </div>\n\n\n                                {/* <FormControl className={classes.timeControl}>\n                                    <InputLabel id=\"demo-simple-select-label\"> Time</InputLabel>\n                                    <Select\n                                        labelId=\"demo-simple-select-label\"\n                                        id=\"demo-simple-select\"\n                                        value={time}\n                                        onChange={timeChanged}\n                                    >\n                                        {times.map(item => (\n\n                                            <MenuItem value={item}>{item}</MenuItem>\n\n                                        ))}\n                                    </Select>\n                                </FormControl> */}\n\n                            </Grid>\n\n\n                        </Grid>\n\n                    </DialogContent>\n\n                    <DialogActions>\n                        <Button onClick={handleClose}>\n                            cancel\n                    </Button>\n                        <Button color=\"primary\" onClick={okClicked} variant=\"contained\" style={{ width: \"100px\" }}>\n                            OK\n                    </Button>\n                    </DialogActions>\n                </Dialog>\n            </React.Fragment>\n        </React.Fragment>\n    );\n}\n","import React, { useEffect, useRef, useState } from \"react\";\nimport BookService from \"./services/BookService\";\nimport Typography from \"@material-ui/core/Typography\";\nimport {\n  Backdrop,\n  Button,\n  Checkbox,\n  CircularProgress,\n  Divider,\n  FormControlLabel,\n  Grid,\n  InputAdornment,\n  InputLabel,\n  Link,\n  makeStyles,\n  MenuItem,\n  Select,\n  Switch,\n  TextField,\n  Tooltip,\n} from \"@material-ui/core\";\nimport GlobalState from \"../GlobalState\";\nimport { withStyles } from \"@material-ui/core/styles\";\n\nimport CreditCardIcon from \"@material-ui/icons/CreditCard\";\n\nimport Dialog from \"@material-ui/core/Dialog\";\nimport DialogContent from \"@material-ui/core/DialogContent\";\n\nimport DialogTitle from \"@material-ui/core/DialogTitle\";\nimport Draggable from \"react-draggable\";\nimport Paper from \"@material-ui/core/Paper\";\n\nimport Alert from \"@material-ui/lab/Alert\";\n\nimport PropTypes from \"prop-types\";\nimport LinearProgress from \"@material-ui/core/LinearProgress\";\nimport Box from \"@material-ui/core/Box\";\n\nimport Radio from \"@material-ui/core/Radio\";\nimport RadioGroup from \"@material-ui/core/RadioGroup\";\nimport FormControl from \"@material-ui/core/FormControl\";\nimport FormLabel from \"@material-ui/core/FormLabel\";\nimport { corporates } from \"./Corporates\";\nimport NumberFormat from \"react-number-format\";\n\nimport AddIcon from \"@material-ui/icons/Add\";\nimport { validate } from \"email-validator\";\nimport DateRangeIcon from \"@material-ui/icons/DateRange\";\nimport { CalendarColors } from \"./calendar-admin/colors\";\n\nvar interval;\n\nconst useStyles = makeStyles((theme) => ({\n  title: {\n    marginTop: theme.spacing(0),\n    marginBottom: theme.spacing(1),\n  },\n\n  refreshButton: {\n    marginLeft: theme.spacing(2),\n  },\n\n  checkIcon: {\n    color: \"green\",\n  },\n\n  closeIcon: {\n    color: \"red\",\n  },\n\n  RefLink: {\n    cursor: \"pointer\",\n  },\n\n  BookedLabel: {\n    backgroundColor: \"#606060\",\n    color: \"#fff\",\n    paddingRight: \"10px\",\n    paddingLeft: \"10px\",\n  },\n\n  PatientAttendedLabel: {\n    backgroundColor: \"#0066aa\",\n    color: \"#fff\",\n    paddingRight: \"15px\",\n    paddingLeft: \"10px\",\n  },\n\n  SampleTakenLabel: {\n    backgroundColor: \"#0066cc\",\n    color: \"#fff\",\n    paddingRight: \"40px\",\n    paddingLeft: \"10px\",\n  },\n\n  ReportSentLabel: {\n    backgroundColor: \"#009900\",\n    color: \"#fff\",\n    paddingRight: \"90px\",\n    paddingLeft: \"10px\",\n  },\n\n  ReportCertSentLabel: {\n    backgroundColor: \"#009900\",\n    color: \"#fff\",\n    paddingRight: \"68px\",\n    paddingLeft: \"10px\",\n  },\n\n  archiveButton: {},\n\n  smartMatchButton: {\n    backgroundColor: \"#2f942e\",\n    \"&:hover\": {\n      background: \"green\",\n      color: \"#fff\",\n    },\n    textDecoration: \"none !important\",\n    marginRight: \"10px\",\n    // padding: \"10px\"\n  },\n\n  infoTitle: {\n    fontWeight: \"400\",\n  },\n\n  infoData: {\n    paddingLeft: \"10px\",\n    fontWeight: \"800\",\n  },\n\n  matchButton: {\n    marginTop: \"30px\",\n    marginBottom: \"20px\",\n    backgroundColor: \"#2f942e\",\n    \"&:hover\": {\n      background: \"green\",\n      color: \"#fff\",\n    },\n    textDecoration: \"none !important\",\n    padding: \"10px\",\n    paddingLeft: \"50px\",\n    paddingRight: \"50px\",\n  },\n\n  resendButton: {\n    marginTop: \"5px\",\n    marginBottom: \"5px\",\n    backgroundColor: \"#2f942e\",\n    \"&:hover\": {\n      background: \"green\",\n      color: \"#fff\",\n    },\n    textDecoration: \"none !important\",\n    padding: \"10px\",\n    paddingLeft: \"50px\",\n    paddingRight: \"50px\",\n  },\n\n  resendFilesButton: {\n    marginTop: \"5px\",\n    marginBottom: \"5px\",\n    backgroundColor: \"#3792ad\",\n    \"&:hover\": {\n      background: \"#2f798f\",\n      color: \"#fff\",\n    },\n    textDecoration: \"none !important\",\n    padding: \"10px\",\n    paddingLeft: \"50px\",\n    paddingRight: \"50px\",\n  },\n\n  cancelButton: {\n    marginBottom: \"10px\",\n    textDecoration: \"none !important\",\n    padding: \"10px\",\n    paddingLeft: \"90px\",\n    paddingRight: \"90px\",\n  },\n\n  CalendarIcon: {\n    color: theme.palette.primary.main,\n  },\n\n  DateTimeLabel: {\n    fontWeight: \"600\",\n    fontSize: \"1.2rem\",\n    color: theme.palette.primary.main,\n  },\n\n  backdrop: {\n    zIndex: theme.zIndex.drawer + 5,\n    color: \"#fff\",\n  },\n\n  PriceLabelPaid:{\n    color: theme.palette.primary.main,\n    fontWeight: \"600\"\n  },\n\n  PriceLabelNotPaid:{\n    color: theme.palette.secondary.main,\n    fontWeight: \"600\"\n  },\n\n  BoxDisabled: {\n    width : \"100%\",\n    padding: \"10px\",\n    borderRadius: \"8px\",\n    border: \"1px solid\",\n    fontSize: \"1.2rem\",\n    fontWeight: \"500\",\n    textAlign: \"center\",\n    borderColor: \"#ddd\",\n    cursor: \"not-allowed\",\n    color: \"#ddd\",\n    transition: \"all 0.2s ease\",\n  },\n\n  BoxVC: {\n    width : \"100%\",\n    padding: \"10px\",\n    borderRadius: \"8px\",\n    border: \"1px solid\",\n    fontSize: \"1.2rem\",\n    fontWeight: \"500\",\n    textAlign: \"center\",\n    cursor: \"pointer\",\n    borderColor: CalendarColors.VC_COLOR,\n    color: CalendarColors.VC_COLOR,\n    transition: \"all 0.2s ease\",\n    \"&:hover\": {\n      backgroundColor: CalendarColors.VC_COLOR,\n      color: \"#fff\"\n    }\n  \n  },\n\n  BoxF2F: {\n    width : \"100%\",\n    padding: \"10px\",\n    borderRadius: \"8px\",\n    border: \"1px solid\",\n    fontSize: \"1.2rem\",\n    fontWeight: \"500\",\n    textAlign: \"center\",\n    cursor: \"pointer\",\n    borderColor: CalendarColors.F2F_COLOR,\n    color: CalendarColors.F2F_COLOR,\n    transition: \"all 0.2s ease\",\n    \"&:hover\": {\n      backgroundColor: CalendarColors.F2F_COLOR,\n      color: \"#fff\"\n    }\n  \n  },\n\n  BoxLaser: {\n    width : \"100%\",\n    padding: \"10px\",\n    borderRadius: \"8px\",\n    border: \"1px solid\",\n    fontSize: \"1.2rem\",\n    fontWeight: \"500\",\n    textAlign: \"center\",\n    cursor: \"pointer\",\n    borderColor: CalendarColors.LASER_COLOR,\n    color: CalendarColors.LASER_COLOR,\n    transition: \"all 0.2s ease\",\n    \"&:hover\": {\n      backgroundColor: CalendarColors.LASER_COLOR,\n      color: \"#fff\"\n    }\n  \n  },\n\n  BoxCataract: {\n    width : \"100%\",\n    padding: \"10px\",\n    borderRadius: \"8px\",\n    border: \"1px solid\",\n    fontSize: \"1.2rem\",\n    fontWeight: \"500\",\n    textAlign: \"center\",\n    cursor: \"pointer\",\n    borderColor: CalendarColors.CATARACT_COLOR,\n    color: CalendarColors.CATARACT_COLOR,\n    transition: \"all 0.2s ease\",\n    \"&:hover\": {\n      backgroundColor: CalendarColors.CATARACT_COLOR,\n      color: \"#fff\"\n    }\n  \n  },\n\n  BoxPostOP: {\n    width : \"100%\",\n    padding: \"10px\",\n    borderRadius: \"8px\",\n    border: \"1px solid\",\n    fontSize: \"1.2rem\",\n    fontWeight: \"500\",\n    textAlign: \"center\",\n    cursor: \"pointer\",\n    borderColor: CalendarColors.POSTOP_COLOR,\n    color: CalendarColors.POSTOP_COLOR,\n    transition: \"all 0.2s ease\",\n    \"&:hover\": {\n      backgroundColor: CalendarColors.POSTOP_COLOR,\n      color: \"#fff\"\n    }\n  \n  },\n\n  BoxOptometry: {\n    width : \"100%\",\n    padding: \"10px\",\n    borderRadius: \"8px\",\n    border: \"1px solid\",\n    fontSize: \"1.2rem\",\n    fontWeight: \"500\",\n    textAlign: \"center\",\n    cursor: \"pointer\",\n    borderColor: CalendarColors.OPOTOMETRY_COLOR,\n    color: CalendarColors.OPOTOMETRY_COLOR,\n    transition: \"all 0.2s ease\",\n    \"&:hover\": {\n      backgroundColor: CalendarColors.OPOTOMETRY_COLOR,\n      color: \"#fff\"\n    }\n  \n  },\n\n\n\n\n\n\n\n\n\n\n  BoxGynae: {\n    width : \"100%\",\n    padding: \"10px\",\n    borderRadius: \"8px\",\n    border: \"1px solid\",\n    fontSize: \"1.2rem\",\n    fontWeight: \"500\",\n    textAlign: \"center\",\n    cursor: \"pointer\",\n    borderColor: CalendarColors.GYNAE_COLOR,\n    color: CalendarColors.GYNAE_COLOR,\n    transition: \"all 0.2s ease\",\n    \"&:hover\": {\n      backgroundColor: CalendarColors.GYNAE_COLOR,\n      color: \"#fff\"\n    }\n  \n  },\n\n  BoxGP: {\n    width : \"100%\",\n    padding: \"10px\",\n    borderRadius: \"8px\",\n    border: \"1px solid\",\n    fontSize: \"1.2rem\",\n    fontWeight: \"500\",\n    textAlign: \"center\",\n    cursor: \"pointer\",\n    borderColor: CalendarColors.GP_COLOR,\n    color: CalendarColors.GP_COLOR,\n    transition: \"all 0.2s ease\",\n    \"&:hover\": {\n      backgroundColor: CalendarColors.GP_COLOR,\n      color: \"#fff\"\n    }\n  },\n\n  BoxSTD: {\n    width : \"100%\",\n    padding: \"10px\",\n    borderRadius: \"8px\",\n    border: \"1px solid\",\n    fontSize: \"1.2rem\",\n    fontWeight: \"500\",\n    textAlign: \"center\",\n    cursor: \"pointer\",\n    borderColor: CalendarColors.STD_COLOR,\n    color: CalendarColors.STD_COLOR,\n    transition: \"all 0.2s ease\",\n    \"&:hover\": {\n      backgroundColor: CalendarColors.STD_COLOR,\n      color: \"#fff\"\n    }\n  },\n\n\n\n}));\n\nconst Packages = [\n  { packageName: \"Consultation with Consultant Gynaecologist\" },\n  { packageName: `Coil Fitting/Coil Removal` },\n  { packageName: `Well Woman Check` },\n  { packageName: `Sexual Health Screening` },\n  { packageName: `Pre-pregnancy/Fertility check` },\n  { packageName: `Gynaecological Ultrasound` },\n  { packageName: `HPV Vaccination` },\n  { packageName: `Cervical / Pap Smear` },\n  { packageName: `HPV Treatment / Wart Cryo-Therapy` },\n];\n\nfunction NumberFormatCustom(props) {\n  const { inputRef, onChange, ...other } = props;\n\n  return (\n    <NumberFormat\n      {...other}\n      getInputRef={inputRef}\n      onValueChange={(values) => {\n        onChange({\n          target: {\n            name: props.name,\n            value: values.value,\n          },\n        });\n      }}\n      thousandSeparator\n      isNumericString\n      prefix=\"\"\n    />\n  );\n}\n\nNumberFormatCustom.propTypes = {\n  inputRef: PropTypes.func.isRequired,\n  name: PropTypes.string.isRequired,\n  onChange: PropTypes.func.isRequired,\n};\n\nconst BorderLinearProgress = withStyles((theme) => ({\n  root: {\n    height: 10,\n    borderRadius: 5,\n  },\n  colorPrimary: {\n    backgroundColor: \"#cedbce\", //theme.palette.grey[theme.palette.type === 'light' ? 200 : 700],\n  },\n  bar: {\n    borderRadius: 5,\n    backgroundColor: \"#2f942e\",\n  },\n}))(LinearProgress);\nfunction LinearProgressWithLabel(props) {\n  return (\n    <Box display=\"flex\" alignItems=\"center\">\n      <Box width=\"100%\" mr={1}>\n        <BorderLinearProgress variant=\"determinate\" {...props} />\n      </Box>\n      <Box minWidth={35}>\n        <Typography\n          style={{ fontWeight: \"800\", color: \"#5e855e\" }}\n          variant=\"body2\"\n          color=\"textSecondary\"\n        >{`${Math.round(props.value)}%`}</Typography>\n      </Box>\n    </Box>\n  );\n}\n\nLinearProgressWithLabel.propTypes = {\n  /**\n   * The value of the progress indicator for the determinate and buffer variants.\n   * Value between 0 and 100.\n   */\n  value: PropTypes.number.isRequired,\n};\n\nfunction PaperComponent(props) {\n  return (\n    <Draggable\n      handle=\"#draggable-dialog-title\"\n      cancel={'[class*=\"MuiDialogContent-root\"]'}\n    >\n      <Paper {...props} />\n    </Draggable>\n  );\n}\n\nexport default function ChooseBookingDialog(props) {\n  const classes = useStyles();\n\n  const [state, setState] = React.useContext(GlobalState);\n\n  const handleClose = () => {    \n    props.handleClose();\n  };\n\n\n  const timeDisabled = () =>\n  {\n    return props.time.indexOf(':15') > 0 || props.time.indexOf(':45') > 0 || props.time.indexOf('09') >= 0 \n  }\n\n  const clinicClicked = (clinic) =>\n  {\n    props.clinicClicked(clinic)\n  }\n\n  return (\n    <React.Fragment>\n        <React.Fragment>\n          <Dialog\n            maxWidth=\"xs\"\n            open={props.open}\n            onClose={handleClose}\n            PaperComponent={PaperComponent}\n            aria-labelledby=\"form-dialog-title\"\n          >\n            <DialogTitle id=\"draggable-dialog-title\">\n              <Grid\n                container\n                spacing={2}\n                direction=\"row\"\n                justify=\"center\"\n                alignItems=\"center\"\n              >\n                {/* <Grid item>\n                  <AddIcon style={{ color: \"#f50057\", fontSize: \"3rem\" }} />\n                </Grid> */}\n\n                <Grid item>\n                  <div\n                    style={{\n                      color: \"#f50057\",\n                      paddingBottom: \"10px\",\n                      fontWeight: \"800\",\n                    }}\n                  >\n                    {\" \"}\n                    Change Clinic{\" \"}\n                  </div>\n                </Grid>\n              </Grid>\n\n              <Divider />\n            </DialogTitle>\n            <DialogContent>\n              <div\n                style={{\n                  height: \"420px\",\n                }}\n              >\n                <Grid\n                  container\n                  direction=\"row\"\n                  justify=\"stretch\"\n                  spacing={2}\n                  alignItems=\"center\"\n                >\n\n\n                  <Grid item xs={12} style={{marginTop:\"0px\"}}>\n                    <div className={classes.BoxVC} onClick={() => clinicClicked(\"Virtual Consultation\")}>\n                      Virtual Consultation\n                    </div>\n                  </Grid>\n                  <Grid item xs={12}>\n                    <div className={classes.BoxF2F} onClick={() => clinicClicked(\"F2F Clinic\")}>\n                      F2F Clinic\n                    </div>\n                  </Grid>\n                  <Grid item xs={12}>\n                    <div className={classes.BoxLaser} onClick={() => clinicClicked(\"Laser Theatre\")}>\n                      Laser Theatre\n                    </div>\n                  </Grid>\n                  <Grid item xs={12}>\n                    <div className={classes.BoxCataract} onClick={() => clinicClicked(\"Lens Theatre\")}>\n                      Lens Theatre\n                    </div>\n                  </Grid>\n                  <Grid item xs={12}>\n                    <div className={classes.BoxPostOP} onClick={() => clinicClicked(\"Post OP\")}>\n                      Post OP\n                    </div>\n                  </Grid>\n                  <Grid item xs={12}>\n                    <div className={classes.BoxOptometry} onClick={() => clinicClicked(\"Optometry\")}>\n                      Optometry\n                    </div>\n                  </Grid>\n\n\n                </Grid>\n\n                <div\n                  style={{\n                    position: \"absolute\",\n                    bottom: \"0px\",\n                    right: \"5px\",\n                  }}\n                >\n                  <Grid\n                    container\n                    direction=\"row\"\n                    justify=\"flex-end\"\n                    alignItems=\"center\"\n                    spacing={1}\n                  >\n                    <Grid item>\n                      <Button\n                        onClick={handleClose}\n                        style={{ width: \"100px\" }}\n                      >\n                        close\n                      </Button>\n                    </Grid>\n                   \n                  </Grid>\n                </div>\n              </div>\n\n            </DialogContent>\n          </Dialog>\n        </React.Fragment>\n    </React.Fragment>\n  );\n}\n","import React, { useEffect, useRef, useState } from \"react\";\nimport BookService from \"./services/BookService\";\nimport Typography from \"@material-ui/core/Typography\";\nimport {\n    Backdrop,\n    Button,\n    Checkbox,\n    CircularProgress,\n    DialogActions,\n    DialogContentText,\n    Divider,\n    FormControlLabel,\n    Grid,\n    InputAdornment,\n    InputLabel,\n    Link,\n    makeStyles,\n    MenuItem,\n    Select,\n    Switch,\n    TextField,\n    Tooltip,\n} from \"@material-ui/core\";\nimport GlobalState from \"../GlobalState\";\nimport { withStyles } from \"@material-ui/core/styles\";\n\nimport CreditCardIcon from \"@material-ui/icons/CreditCard\";\n\nimport Dialog from \"@material-ui/core/Dialog\";\nimport DialogContent from \"@material-ui/core/DialogContent\";\n\nimport DialogTitle from \"@material-ui/core/DialogTitle\";\nimport Draggable from \"react-draggable\";\nimport Paper from \"@material-ui/core/Paper\";\n\nimport Alert from \"@material-ui/lab/Alert\";\n\nimport PropTypes from \"prop-types\";\nimport LinearProgress from \"@material-ui/core/LinearProgress\";\nimport Box from \"@material-ui/core/Box\";\n\nimport Radio from \"@material-ui/core/Radio\";\nimport RadioGroup from \"@material-ui/core/RadioGroup\";\nimport FormControl from \"@material-ui/core/FormControl\";\nimport FormLabel from \"@material-ui/core/FormLabel\";\nimport { corporates } from \"./Corporates\";\nimport NumberFormat from \"react-number-format\";\n\nimport AddIcon from \"@material-ui/icons/Add\";\nimport { validate } from \"email-validator\";\nimport DateRangeIcon from \"@material-ui/icons/DateRange\";\nimport { CalendarColors } from \"./calendar-admin/colors\";\nimport DateField from \"./DateField\";\n\nimport EditIcon from '@material-ui/icons/Edit';\nimport DateDialog from \"./DateDialog\";\nimport ChooseClinicDialog from \"./ChooseClinicDialog\"\n\nvar interval;\n\nconst useStyles = makeStyles((theme) => ({\n    title: {\n        marginTop: theme.spacing(0),\n        marginBottom: theme.spacing(1),\n    },\n\n    refreshButton: {\n        marginLeft: theme.spacing(2),\n    },\n\n    checkIcon: {\n        color: \"green\",\n    },\n\n    closeIcon: {\n        color: \"red\",\n    },\n\n    RefLink: {\n        cursor: \"pointer\",\n    },\n\n    BookedLabel: {\n        backgroundColor: \"#606060\",\n        color: \"#fff\",\n        paddingRight: \"10px\",\n        paddingLeft: \"10px\",\n    },\n\n    PatientAttendedLabel: {\n        backgroundColor: \"#0066aa\",\n        color: \"#fff\",\n        paddingRight: \"15px\",\n        paddingLeft: \"10px\",\n    },\n\n    SampleTakenLabel: {\n        backgroundColor: \"#0066cc\",\n        color: \"#fff\",\n        paddingRight: \"40px\",\n        paddingLeft: \"10px\",\n    },\n\n    ReportSentLabel: {\n        backgroundColor: \"#009900\",\n        color: \"#fff\",\n        paddingRight: \"90px\",\n        paddingLeft: \"10px\",\n    },\n\n    ReportCertSentLabel: {\n        backgroundColor: \"#009900\",\n        color: \"#fff\",\n        paddingRight: \"68px\",\n        paddingLeft: \"10px\",\n    },\n\n    archiveButton: {},\n\n    smartMatchButton: {\n        backgroundColor: \"#2f942e\",\n        \"&:hover\": {\n            background: \"green\",\n            color: \"#fff\",\n        },\n        textDecoration: \"none !important\",\n        marginRight: \"10px\",\n        // padding: \"10px\"\n    },\n\n    infoTitle: {\n        fontWeight: \"400\",\n    },\n\n    infoData: {\n        paddingLeft: \"10px\",\n        fontWeight: \"800\",\n    },\n\n    matchButton: {\n        marginTop: \"30px\",\n        marginBottom: \"20px\",\n        backgroundColor: \"#2f942e\",\n        \"&:hover\": {\n            background: \"green\",\n            color: \"#fff\",\n        },\n        textDecoration: \"none !important\",\n        padding: \"10px\",\n        paddingLeft: \"50px\",\n        paddingRight: \"50px\",\n    },\n\n    resendButton: {\n        marginTop: \"5px\",\n        marginBottom: \"5px\",\n        backgroundColor: \"#2f942e\",\n        \"&:hover\": {\n            background: \"green\",\n            color: \"#fff\",\n        },\n        textDecoration: \"none !important\",\n        padding: \"10px\",\n        paddingLeft: \"50px\",\n        paddingRight: \"50px\",\n    },\n\n    resendFilesButton: {\n        marginTop: \"5px\",\n        marginBottom: \"5px\",\n        backgroundColor: \"#3792ad\",\n        \"&:hover\": {\n            background: \"#2f798f\",\n            color: \"#fff\",\n        },\n        textDecoration: \"none !important\",\n        padding: \"10px\",\n        paddingLeft: \"50px\",\n        paddingRight: \"50px\",\n    },\n\n    cancelButton: {\n        marginBottom: \"10px\",\n        textDecoration: \"none !important\",\n        padding: \"10px\",\n        paddingLeft: \"90px\",\n        paddingRight: \"90px\",\n    },\n\n    CalendarIcon: {\n        color: theme.palette.primary.main,\n    },\n\n    DateTimeLabel: {\n        fontWeight: \"600\",\n        fontSize: \"1.2rem\",\n        color: theme.palette.primary.main,\n    },\n\n    backdrop: {\n        zIndex: theme.zIndex.drawer + 5,\n        color: \"#fff\",\n    },\n\n    PriceLabelPaid: {\n        color: theme.palette.primary.main,\n        fontWeight: \"600\"\n    },\n\n    PriceLabelNotPaid: {\n        color: theme.palette.secondary.main,\n        fontWeight: \"600\"\n    },\n\n\n}));\n\nconst Packages = [\n    { packageName: \"Consultation with Consultant Gynaecologist\" },\n    { packageName: `Coil Fitting/Coil Removal` },\n    { packageName: `Well Woman Check` },\n    { packageName: `Sexual Health Screening` },\n    { packageName: `Pre-pregnancy/Fertility check` },\n    { packageName: `Gynaecological Ultrasound` },\n    { packageName: `HPV Vaccination` },\n    { packageName: `Cervical / Pap Smear` },\n    { packageName: `HPV Treatment / Wart Cryo-Therapy` },\n];\n\nfunction NumberFormatCustom(props) {\n    const { inputRef, onChange, ...other } = props;\n\n    return (\n        <NumberFormat\n            {...other}\n            getInputRef={inputRef}\n            onValueChange={(values) => {\n                onChange({\n                    target: {\n                        name: props.name,\n                        value: values.value,\n                    },\n                });\n            }}\n            thousandSeparator\n            isNumericString\n            prefix=\"\"\n        />\n    );\n}\n\nNumberFormatCustom.propTypes = {\n    inputRef: PropTypes.func.isRequired,\n    name: PropTypes.string.isRequired,\n    onChange: PropTypes.func.isRequired,\n};\n\nconst BorderLinearProgress = withStyles((theme) => ({\n    root: {\n        height: 10,\n        borderRadius: 5,\n    },\n    colorPrimary: {\n        backgroundColor: \"#cedbce\", //theme.palette.grey[theme.palette.type === 'light' ? 200 : 700],\n    },\n    bar: {\n        borderRadius: 5,\n        backgroundColor: \"#2f942e\",\n    },\n}))(LinearProgress);\nfunction LinearProgressWithLabel(props) {\n    return (\n        <Box display=\"flex\" alignItems=\"center\">\n            <Box width=\"100%\" mr={1}>\n                <BorderLinearProgress variant=\"determinate\" {...props} />\n            </Box>\n            <Box minWidth={35}>\n                <Typography\n                    style={{ fontWeight: \"800\", color: \"#5e855e\" }}\n                    variant=\"body2\"\n                    color=\"textSecondary\"\n                >{`${Math.round(props.value)}%`}</Typography>\n            </Box>\n        </Box>\n    );\n}\n\nLinearProgressWithLabel.propTypes = {\n    /**\n     * The value of the progress indicator for the determinate and buffer variants.\n     * Value between 0 and 100.\n     */\n    value: PropTypes.number.isRequired,\n};\n\nfunction PaperComponent(props) {\n    return (\n        <Draggable\n            handle=\"#draggable-dialog-title\"\n            cancel={'[class*=\"MuiDialogContent-root\"]'}\n        >\n            <Paper {...props} />\n        </Draggable>\n    );\n}\n\nexport default function EditOVBookingDialog(props) {\n    const classes = useStyles();\n\n    const [state, setState] = React.useContext(GlobalState);\n    const [saving, setSaving] = useState(false);\n\n    const [openClinicDialog, setOpenClinicDialog] = React.useState(false)\n\n    const [clinic, setClinic] = React.useState(\"\")\n\n    const [fullname, setFullname] = React.useState(\"\");\n    const [fullnameError, setFullnameError] = React.useState(false);\n\n    const [phone, setPhone] = React.useState(\"\");\n    const [email, setEmail] = React.useState(\"\");\n    const [notes, setNotes] = React.useState(\"\");\n\n    const [patientID, setPatientID] = React.useState(\"\");\n    const [prescriptionLeft, setPrescriptionLeft] = React.useState(\"\");\n    const [prescriptionRight, setPrescriptionRight] = React.useState(\"\");\n\n\n    const [birthDate, setBirthDate] = React.useState(\"\");\n    const [birthDateError, setBirthDateError] = React.useState(false);\n\n    const [openDeleteDialog, setOpenDeleteDialog] = React.useState(false)\n\n    const [openDateDialog, setOpenDateDialog] = React.useState(false)\n\n    const [date, setDate] = React.useState(\"\")\n    const [time, setTime] = React.useState(\"\")\n\n    const patientIDChanged = (event) => {\n        setPatientID(event.target.value);\n    };\n\n    const prescriptionLeftChanged = (event) => {\n        setPrescriptionLeft(event.target.value);\n    };\n\n    const prescriptionRightChanged = (event) => {\n        setPrescriptionRight(event.target.value);\n    };\n\n\n    const handleCloseDeleteDialog = () => {\n        setOpenDeleteDialog(false)\n    }\n\n    const handleSaveDateDialog = (date, time) => {\n        setDate(date)\n        setTime(time)\n        setOpenDateDialog(false)\n    }\n\n    const handleCloseDateDialog = () => {\n        setOpenDateDialog(false)\n    }\n\n\n    React.useEffect(() => {\n        if (props.booking && props.open) {\n            setFullname(props.booking.fullname)\n            setPhone(props.booking.phone)\n            setEmail(props.booking.email)\n            setBirthDate(props.booking.birthDate)\n            setNotes(props.booking.notes)\n            setDate(props.date)\n            setTime(props.time)\n            setPatientID(props.booking.patientID)\n            setPrescriptionLeft(props.booking.prescriptionLeft)\n            setPrescriptionRight(props.booking.prescriptionRight)\n\n            setClinic(props.clinic)\n\n        }\n\n    }, [props.open, props.booking])\n\n\n    const birthDateChanged = (dateStr) => {\n        setBirthDate(dateStr);\n    }\n\n\n\n\n    const fullnameChanged = (event) => {\n        setFullname(event.target.value);\n        setFullnameError(false);\n    };\n\n    const phoneChanged = (event) => {\n        setPhone(event.target.value);\n    };\n\n    const emailChanged = (event) => {\n        setEmail(event.target.value);\n    };\n\n\n    const notesChanged = (event) => {\n        setNotes(event.target.value);\n    };\n\n    const handleClose = () => {\n        if (saving) return;\n\n        setFullname(\"\");\n        setFullnameError(false);\n        setBirthDateError(false)\n        setPhone(\"\");\n        setEmail(\"\");\n        setNotes(\"\");\n        setBirthDate(\"\")\n        setPatientID(\"\")\n        setPrescriptionLeft(\"\")\n        setPrescriptionRight(\"\")\n        setClinic(\"\")\n\n\n        props.handleClose();\n        setSaving(false);\n    };\n\n    const validateBooking = () => {\n        let error = false;\n        if (!fullname || fullname.trim().length < 1) {\n            setFullnameError(true);\n            error = true;\n        }\n\n        if (birthDate && birthDate.length >= 1 && birthDate.length < 10) {\n            setBirthDateError(true);\n            error = true;\n        }\n\n        return !error;\n    };\n\n    const deleteClicked = async () => {\n\n        setOpenDeleteDialog(false)\n\n        setSaving(true)\n        try {\n            await BookService.deleteBooking(props.booking._id)\n            setSaving(false)\n            setState((state) => ({\n                ...state,\n                bookingDialogDataChanged: !state.bookingDialogDataChanged\n                    ? true\n                    : false,\n            }));\n            handleClose();\n        }\n        catch (err) {\n            console.error(err)\n            setSaving(false)\n        }\n    }\n\n    const saveClicked = async () => {\n        if (!validateBooking()) {\n            return;\n        }\n\n        setSaving(true);\n\n        try {\n            await BookService.updateBooking({\n                bookingId: props.booking._id,\n                bookingDate: date,\n                bookingTime: time,\n                fullname: fullname,\n                phone: phone,\n                email: email,\n                birthDate: birthDate,\n                notes: notes,\n                clinic: clinic,\n                patientID: patientID,\n                prescriptionLeft: prescriptionLeft,\n                prescriptionRight: prescriptionRight,\n            });\n            setSaving(false);\n            setState((state) => ({\n                ...state,\n                bookingDialogDataChanged: !state.bookingDialogDataChanged\n                    ? true\n                    : false,\n            }));\n            handleClose();\n        } catch (err) {\n            console.error(err);\n            setSaving(false);\n        }\n    };\n\n    const saveAsClicked = async () => {\n        if (!validateBooking()) {\n            return;\n        }\n\n        setSaving(true);\n\n        try {\n            await BookService.addNewBooking({\n                bookingDate: date,\n                bookingTime: time,\n                fullname: fullname,\n                phone: phone,\n                email: email,\n                birthDate: birthDate,\n                notes: notes,\n                clinic: clinic,\n                patientID: patientID,\n                prescriptionLeft: prescriptionLeft,\n                prescriptionRight: prescriptionRight,\n            });\n            setSaving(false);\n            setState((state) => ({\n                ...state,\n                bookingDialogDataChanged: !state.bookingDialogDataChanged\n                    ? true\n                    : false,\n            }));\n            handleClose();\n        } catch (err) {\n            console.error(err);\n            setSaving(false);\n        }\n    };\n\n\n    const getColorFromClinic = (clinic) => {\n        switch (clinic) {\n            case \"Virtual Consultation\":\n                return CalendarColors.VC_COLOR\n            case \"F2F Clinic\":\n                return CalendarColors.F2F_COLOR\n            case \"Laser Theatre\":\n                return CalendarColors.LASER_COLOR\n            case \"Lens Theatre\":\n                return CalendarColors.CATARACT_COLOR\n            case \"Post OP\":\n                return CalendarColors.POSTOP_COLOR\n            case \"Optometry\":\n                return CalendarColors.OPOTOMETRY_COLOR\n    \n    \n            default:\n                return \"#777\"\n\n        }\n    }\n\n    const handleClinicClicked = (_clinic) =>\n    {\n        setClinic(_clinic)\n        setOpenClinicDialog(false)\n    }\n\n    const handleCloseClinicDialog = () =>\n    {\n        setOpenClinicDialog(false)\n    }\n    \n    const editClinicClicked = () =>\n    {\n        setOpenClinicDialog(true)\n    }\n\n    \n\n\n    return (\n        <React.Fragment>\n            {props.date && props.time && (\n                <React.Fragment>\n                    <Dialog\n                        maxWidth=\"md\"\n                        open={props.open}\n                        onClose={handleClose}\n                        PaperComponent={PaperComponent}\n                        aria-labelledby=\"form-dialog-title\"\n                    >\n                        <DialogTitle id=\"draggable-dialog-title\">\n\n                            <div style={{ position: \"absolute\", left: \"0px\", top: \"0px\", width: \"100%\", backgroundColor: getColorFromClinic(clinic), color: \"#fff\", padding: \"15px 5px\", textAlign: \"center\", fontSize: \"1.5rem\" }}>\n                                <Grid container direction=\"row\"\n                                    justify=\"center\"\n                                    alignItems=\"center\"\n                                    spacing={1}\n                                >\n                                    <Grid item>\n                                        <Tooltip title=\"Change Clinic\">\n                                            <EditIcon style={{ fontSize: \"2rem\", cursor:\"pointer\" }} onClick={editClinicClicked} />\n                                        </Tooltip>\n                                    </Grid>\n                                    <Grid item style={{ marginTop: \"-10px\" }}>\n                                        {clinic}\n                                    </Grid>\n                                </Grid>\n                            </div>\n\n\n                        </DialogTitle>\n                        <DialogContent>\n                            <div\n                                style={{\n                                    paddingTop: \"50px\",\n                                    paddingBottom: \"20px\"\n                                }}\n                            >\n                                <Grid\n                                    container\n                                    direction=\"row\"\n                                    justify=\"stretch\"\n                                    spacing={2}\n                                    alignItems=\"center\"\n                                >\n                                    <Grid item xs={12} style={{ marginTop: \"10px\" }}>\n                                        <Grid\n                                            container\n                                            direction=\"row\"\n                                            justify=\"center\"\n                                            alignItems=\"center\"\n                                            spacing={1}\n                                            style={{ cursor: \"pointer\" }} onClick={() => setOpenDateDialog(true)}\n                                        >\n                                            <Grid item>\n                                                <DateRangeIcon className={classes.CalendarIcon} />\n                                            </Grid>\n                                            <Grid item>\n                                                <span className={classes.DateTimeLabel}>\n                                                    {date} , {time}\n                                                </span>\n                                            </Grid>\n                                        </Grid>\n                                    </Grid>\n\n                                    <Grid item xs={12} md={6}>\n                                        <TextField\n                                            fullWidth\n                                            autoFocus\n                                            error={fullnameError}\n                                            label=\"Full Name\"\n                                            value={fullname}\n                                            required\n                                            onChange={fullnameChanged}\n                                            name=\"fullname\"\n                                            id=\"fullname-id\"\n                                            autoComplete=\"none\"\n                                        />\n                                    </Grid>\n\n                                    <Grid item xs={12} md={6}>\n                                        <TextField\n                                            fullWidth\n                                            label=\"Patient ID\"\n                                            value={patientID}\n                                            onChange={patientIDChanged}\n                                            name=\"patientid\"\n                                            id=\"patientid-id\"\n                                            autoComplete=\"none\"\n                                        />\n                                    </Grid>\n\n\n                                    <Grid item xs={12} md={6}>\n                                        <TextField\n                                            fullWidth\n                                            label=\"Telephone\"\n                                            value={phone}\n                                            onChange={phoneChanged}\n                                            name=\"phone\"\n                                            id=\"phone-id\"\n                                            autoComplete=\"none\"\n                                        />\n                                    </Grid>\n\n                                    <Grid item xs={12} md={6}>\n                                        <TextField\n                                            fullWidth\n                                            label=\"Email\"\n                                            value={email}\n                                            onChange={emailChanged}\n                                            name=\"email\"\n                                            id=\"email-id\"\n                                            autoComplete=\"none\"\n                                        />\n                                    </Grid>\n\n                                    <Grid item xs={12}>\n                                        <DateField\n                                            error={birthDateError}\n                                            title=\"Date of Birth\"\n                                            value={birthDate}\n                                            dateChanged={birthDateChanged}\n                                        >\n\n                                        </DateField>\n                                    </Grid>\n\n                                    <Grid item xs={12} md={6}>\n                                        <TextField\n                                            fullWidth\n                                            label=\"Prescription (LEFT)\"\n                                            value={prescriptionLeft}\n                                            onChange={prescriptionLeftChanged}\n                                            name=\"pleft\"\n                                            id=\"pleft-id\"\n                                            autoComplete=\"none\"\n                                        />\n                                    </Grid>\n\n                                    <Grid item xs={12} md={6}>\n                                        <TextField\n                                            fullWidth\n                                            label=\"Prescription (RIGHT)\"\n                                            value={prescriptionRight}\n                                            onChange={prescriptionRightChanged}\n                                            name=\"pright\"\n                                            id=\"pright-id\"\n                                            autoComplete=\"none\"\n                                        />\n                                    </Grid>\n\n                                    <Grid item xs={12}>\n                                        <TextField\n                                            fullWidth\n                                            label=\"Notes\"\n                                            value={notes}\n                                            onChange={notesChanged}\n                                            name=\"notes\"\n                                            id=\"notes-id\"\n                                            autoComplete=\"none\"\n                                        />\n                                    </Grid>\n\n                                    <Grid item xs={12} style={{marginTop:\"20px\"}}>\n                                    <Button\n                                        onClick={() => setOpenDeleteDialog(true)}\n                                        variant=\"contained\"\n                                        fullWidth\n                                        color=\"primary\"\n                                        // style={{ width: \"100px\" }}\n                                        style={{ backgroundColor: \"#c70000\", color: \"#fff\" }}\n                                        disabled={saving}\n                                    >\n                                        Delete Appointment\n                                      </Button>\n                                </Grid>\n\n\n                                </Grid>\n\n                                <div\n                                    style={{\n                                        position: \"absolute\",\n                                        bottom: \"20px\",\n                                        right: \"20px\",\n                                    }}\n                                >\n                                </div>\n                            </div>\n\n                            <Backdrop className={classes.backdrop} open={saving}>\n                                <CircularProgress color=\"inherit\" />\n                            </Backdrop>\n                        </DialogContent>\n\n                        <DialogActions>\n                            <Grid\n                                container\n                                direction=\"row\"\n                                justify=\"flex-end\"\n                                alignItems=\"center\"\n                                spacing={2}\n                            >\n\n                                <Grid item>\n                                    <Button\n                                        onClick={handleClose}\n                                        style={{ width: \"100px\" }}\n                                        disabled={saving}\n                                    >\n                                        back\n                                     </Button>\n                                </Grid>\n                                <Grid item>\n                                    <Button\n                                        onClick={saveClicked}\n                                        variant=\"contained\"\n                                        color=\"primary\"\n                                        // style={{ width: \"100px\" }}\n                                        style={{ backgroundColor: \"#ff7200\", color: \"#fff\" }}\n                                        disabled={saving}\n                                    >\n                                        Save Changes\n                                      </Button>\n                                </Grid>\n\n                                <Grid item xs={12}>\n                                    <div style={{width:\"100%\", display:\"flex\", justifyContent:\"center\"}}>\n                                    <Button\n                                        onClick={saveAsClicked}\n                                        variant=\"contained\"\n                                        color=\"secondary\"\n                                        style={{ width: \"400px\" }}\n                                        // style={{ backgroundColor: \"#ff7200\", color: \"#fff\" }}\n                                        disabled={saving}\n                                    >\n                                        Save As a new booking\n                                      </Button>\n\n                                    </div>\n                                </Grid>\n\n\n                                {/* <div style={{position:\"absolute\", left:\"10px\", bottom:\"5px\"}}> */}\n                                {/* </div> */}\n\n\n                            </Grid>\n\n                        </DialogActions>\n\n                        <Dialog\n                            open={openDeleteDialog}\n                            onClose={handleCloseDeleteDialog}\n                            aria-labelledby=\"alert-dialog-title\"\n                            aria-describedby=\"alert-dialog-description\"\n                        >\n                            <DialogTitle style={{ color: \"#d10202\", fontWeight: \"600\" }} id=\"alert-dialog-title\">\n                                {\"Delete Appointment\"}\n                            </DialogTitle>\n                            <DialogContent>\n                                <DialogContentText\n                                    style={{ color: \"#000\", fontWeight: \"500\" }}\n                                    id=\"alert-dialog-description\"\n                                >\n                                    Are you sure you want to delete this appointment?\n                            </DialogContentText>\n                            </DialogContent>\n                            <DialogActions>\n                                <Button onClick={handleCloseDeleteDialog} color=\"default\">\n                                    Back\n                                 </Button>\n                                <Button onClick={deleteClicked} variant=\"contained\" style={{ backgroundColor: \"#d10202\", color: \"#fff\" }}>\n                                    Yes, Delete this appointment\n                                 </Button>\n                            </DialogActions>\n                        </Dialog>\n\n                    </Dialog>\n\n                    <DateDialog\n                        open={openDateDialog}\n                        handleClose={handleCloseDateDialog}\n                        handleOK={handleSaveDateDialog}\n                        date={date}\n                        time={time}>\n\n                    </DateDialog>\n\n                </React.Fragment>\n            )}\n\n            <ChooseClinicDialog\n                    open={openClinicDialog}\n                    handleClose={handleCloseClinicDialog}\n                    clinicClicked={handleClinicClicked}\n            />\n            \n            \n        </React.Fragment>\n    );\n}\n","import React, { useEffect, useState } from \"react\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport PropTypes from \"prop-types\";\nimport dateformat from \"dateformat\";\nimport BookService from \"../services/BookService\";\n\nimport CircularProgress from \"@material-ui/core/CircularProgress\";\nimport GlobalState from \"../../GlobalState\";\nimport BookingDialog from \"../BookingDialog\";\nimport NewBookingDialog from \"../NewBookingDialog\";\nimport { CalendarColors } from \"./colors\";\nimport clsx from \"clsx\";\n\nimport NewOVDialog from \"../NewOVBookingDialog\";\nimport EditOVBookingDialog from \"../EditOVBookingDialog\";\n\nconst useStyles = makeStyles((theme) => ({\n  Container: {\n    width: \"100%\",\n    height: \"50px\",\n    position: \"relative\",\n    backgroundColor: \"#fff\",\n    display: \"flex\",\n    alignItems: \"flex-start\",\n    justifyItems: \"flex-start\",\n    paddingLeft: \"10px\",\n  },\n\n  ContainerPast: {\n    width: \"100%\",\n    paddingTop: \"50px\",\n    position: \"relative\",\n    backgroundColor: \"#fafafa\",\n  },\n\n  DayLabel: {\n    position: \"absolute\",\n    top: \"5px\",\n    right: \"5px\",\n    color: \"#555\",\n    fontSize: \"1rem\",\n  },\n\n  DayLabelDisabled: {\n    position: \"absolute\",\n    top: \"5px\",\n    right: \"5px\",\n    color: \"#ddd\",\n    fontSize: \"1rem\",\n  },\n\n  LoadingProgress: {\n    position: \"absolute\",\n    top: \"10%\",\n    left: \"40%\",\n  },\n\n  BookingCountGauge: {\n    position: \"absolute\",\n    bottom: \"5%\",\n    left: \"8%\",\n    width: \"85%\",\n    height: \"8%\",\n  },\n\n  bookingBox: {\n    display: \"flex\",\n    marginRight: \"10px\",\n    marginTop: \"5px\",\n    padding: \"7px\",\n    maxWidth: \"150px\",\n    overflowX: \"hidden\",\n    // border: \"1px solid #eee\",\n    fontSize: \"12px\",\n    fontWeight: \"500\",\n    cursor: \"pointer\",\n    backgroundColor: \"#ebedf7\",\n    color: \"#3f51b5\",\n    boxShadow: \"2px 4px #fafafa\",\n\n    \"&:hover\": {\n      background: \"#3f51b5\",\n      color: \"#ebedf7\",\n    },\n  },\n\n  bookingBoxNew: {\n    display: \"flex\",\n    marginRight: \"10px\",\n    marginTop: \"5px\",\n    padding: \"6px 10px\",\n    maxWidth: \"150px\",\n    overflowX: \"hidden\",\n    border: \"1px solid #ddd\",\n    color: \"#ccc\",\n    fontSize: \"12px\",\n    fontWeight: \"500\",\n    cursor: \"pointer\",\n    backgroundColor: \"#fff\",\n\n    boxShadow: \"2px 4px #fafafa\",\n    transition: \"all 0.5s ease\",\n    borderRadius: \"4px\",\n\n    \"&:hover\": {\n      background: \"#fff\",\n      color: theme.palette.secondary.main,\n      borderColor: theme.palette.secondary.main,\n    },\n  },\n\n  bookingBoxVC: {\n    display: \"flex\",\n    marginRight: \"10px\",\n    marginTop: \"5px\",\n    padding: \"7px\",\n    maxWidth: \"200px\",\n    overflowX: \"hidden\",\n    fontSize: \"12px\",\n    fontWeight: \"500\",\n    cursor: \"pointer\",\n    backgroundColor: CalendarColors.VC_COLOR,\n    color: \"#eee\",\n    boxShadow: \"2px 4px #fafafa\",\n\n    \"&:hover\": {\n      // background: \"#0059b3\",\n      color: \"#fafafa\",\n    },\n  },\n  bookingBoxF2F: {\n    display: \"flex\",\n    marginRight: \"10px\",\n    marginTop: \"5px\",\n    padding: \"7px\",\n    maxWidth: \"200px\",\n    overflowX: \"hidden\",\n    fontSize: \"12px\",\n    fontWeight: \"500\",\n    cursor: \"pointer\",\n    backgroundColor: CalendarColors.F2F_COLOR,\n    color: \"#eee\",\n    boxShadow: \"2px 4px #fafafa\",\n\n    \"&:hover\": {\n      // background: \"#0059b3\",\n      color: \"#fafafa\",\n    },\n  },\n  bookingBoxLaser: {\n    display: \"flex\",\n    marginRight: \"10px\",\n    marginTop: \"5px\",\n    padding: \"7px\",\n    maxWidth: \"200px\",\n    overflowX: \"hidden\",\n    fontSize: \"12px\",\n    fontWeight: \"500\",\n    cursor: \"pointer\",\n    backgroundColor: CalendarColors.LASER_COLOR,\n    color: \"#eee\",\n    boxShadow: \"2px 4px #fafafa\",\n\n    \"&:hover\": {\n      // background: \"#0059b3\",\n      color: \"#fafafa\",\n    },\n  },\n\n  bookingBoxCataract: {\n    display: \"flex\",\n    marginRight: \"10px\",\n    marginTop: \"5px\",\n    padding: \"7px\",\n    maxWidth: \"200px\",\n    overflowX: \"hidden\",\n    fontSize: \"12px\",\n    fontWeight: \"500\",\n    cursor: \"pointer\",\n    backgroundColor: CalendarColors.CATARACT_COLOR,\n    color: \"#eee\",\n    boxShadow: \"2px 4px #fafafa\",\n\n    \"&:hover\": {\n      // background: \"#0059b3\",\n      color: \"#fafafa\",\n    },\n  },\n\n  bookingBoxPostOP: {\n    display: \"flex\",\n    marginRight: \"10px\",\n    marginTop: \"5px\",\n    padding: \"7px\",\n    maxWidth: \"200px\",\n    overflowX: \"hidden\",\n    fontSize: \"12px\",\n    fontWeight: \"500\",\n    cursor: \"pointer\",\n    backgroundColor: CalendarColors.POSTOP_COLOR,\n    color: \"#eee\",\n    boxShadow: \"2px 4px #fafafa\",\n\n    \"&:hover\": {\n      // background: \"#0059b3\",\n      color: \"#fafafa\",\n    },\n  },\n\n  bookingBoxOptometry: {\n    display: \"flex\",\n    marginRight: \"10px\",\n    marginTop: \"5px\",\n    padding: \"7px\",\n    maxWidth: \"200px\",\n    overflowX: \"hidden\",\n    fontSize: \"12px\",\n    fontWeight: \"500\",\n    cursor: \"pointer\",\n    backgroundColor: CalendarColors.OPOTOMETRY_COLOR,\n    color: \"#eee\",\n    boxShadow: \"2px 4px #fafafa\",\n\n    \"&:hover\": {\n      // background: \"#0059b3\",\n      color: \"#fafafa\",\n    },\n  },\n\n\n\n  bookingBoxHidden: {\n    display: \"none\",\n    marginRight: \"10px\",\n    marginTop: \"5px\",\n    padding: \"7px\",\n    maxWidth: \"150px\",\n    overflowX: \"hidden\",\n    fontSize: \"12px\",\n    fontWeight: \"500\",\n    cursor: \"pointer\",\n    backgroundColor: \"#fff\",\n    color: \"#fff\",\n    boxShadow: \"2px 4px #fafafa\",\n\n    \"&:hover\": {\n      // background: \"#0059b3\",\n      color: \"#fafafa\",\n    },\n  },\n\n\n\n\n\n\n\n  bookingBoxPositive: {\n    display: \"flex\",\n    marginRight: \"10px\",\n    marginTop: \"5px\",\n    padding: \"7px\",\n    maxWidth: \"150px\",\n    overflowX: \"hidden\",\n    fontSize: \"12px\",\n    fontWeight: \"500\",\n    cursor: \"pointer\",\n    backgroundColor: \"#d40b0b\",\n    color: \"#fff2f2\",\n    boxShadow: \"2px 4px #fafafa\",\n\n    \"&:hover\": {\n      background: \"#bf0000\",\n      color: \"#fff\",\n    },\n  },\n\n  bookingBoxReportSent: {\n    display: \"flex\",\n    marginRight: \"10px\",\n    marginTop: \"5px\",\n    padding: \"7px\",\n    maxWidth: \"150px\",\n    overflowX: \"hidden\",\n    fontSize: \"12px\",\n    fontWeight: \"500\",\n    cursor: \"pointer\",\n    backgroundColor: \"#009900\",\n    color: \"#eee\",\n    boxShadow: \"2px 4px #fafafa\",\n\n    \"&:hover\": {\n      background: \"#006e00\",\n      color: \"#fafafa\",\n    },\n  },\n\n  BookingBorderPCR: {\n    border: \"4px solid\",\n    borderColor: CalendarColors.PCR_COLOR,\n  },\n\n  BookingBorderGynae: {\n    border: \"4px solid\",\n    borderColor: CalendarColors.GYNAE_COLOR,\n  },\n\n  BookingBorderGP: {\n    border: \"4px solid\",\n    borderColor: CalendarColors.GP_COLOR,\n  },\n\n  BookingBorderSTD: {\n    border: \"4px solid\",\n    borderColor: CalendarColors.STD_COLOR,\n  },\n  BookingBorderBlood: {\n    border: \"4px solid\",\n    borderColor: CalendarColors.BLOOD_COLOR,\n  },\n\n}));\n\nconst DayViewCell = ({ key, date, time }) => {\n  const classes = useStyles();\n\n  const [state, setState] = React.useContext(GlobalState);\n  const [bookings, setBookings] = React.useState(null);\n  const [filteredBookings, setFilteredBookings] = React.useState(null);\n  const [selectedBooking, setSelectedBooking] = React.useState(null);\n\n  const [refresh, setRefresh] = React.useState(true);\n\n  const [isPast, setIsPast] = React.useState(false);\n\n  const [openDialog, setOpenDialog] = React.useState(false);\n  const [openDialogAddNew, setOpenDialogAddNew] = React.useState(false);\n\n  const [openDialogOV, setOpenDialogOV] = React.useState(false);\n\n  const [clinic, setClinic] = React.useState('');\n\n\n  const handleCloseDialogOV = () => {\n    setOpenDialogOV(false);\n    setOpenDialogAddNew(false)\n  };\n\n  useEffect(() => {\n    const todayStr = dateformat(new Date(), \"yyyy-mm-dd\");\n    setIsPast(date < todayStr);\n  }, [date]);\n\n  useEffect(() => {\n    if (bookings) {\n      if (state.dayViewCalFilter && state.dayViewCalFilter.trim().length > 0) {\n        const search = state.dayViewCalFilter.trim().toUpperCase();\n        setFilteredBookings(\n          bookings.filter(\n            (booking) =>\n              booking.fullname?.toLowerCase().indexOf(search.toLowerCase()) >= 0 \n          )\n        );\n      } else {\n        setFilteredBookings([...bookings]);\n      }\n    }\n  }, [state.dayViewCalFilter, bookings]);\n\n  useEffect(() => {\n    const fetchData = async () => {\n      if (!date || date.length <= 0 || !time || time.length <= 0) {\n        return;\n      }\n\n      // if (isPast)\n      // {\n      //     setBookings([]);\n      //     return;\n      // }\n\n      setBookings(null);\n\n      var res = state.AdminCalendarCache?.find(\n        (record) =>\n          record.method === \"getBookingsByDateStrandTime\" &&\n          record.query === `${date}${time}`\n      )?.res;\n      if (!res || openDialog || openDialogAddNew || true) {\n        res = await BookService.getAllBookingsByDateStrandTime(date, time);\n        setState((state) => ({\n          ...state,\n          AdminCalendarCache: [\n            ...state.AdminCalendarCache,\n            {\n              method: \"getBookingsByDateStrandTime\",\n              query: `${date}${time}`,\n              res: res,\n            },\n          ],\n        }));\n      }\n\n      if (res.data.status === \"OK\") {\n        setBookings(res.data.bookings);\n      }\n    };\n\n    if (openDialog || openDialogAddNew) {\n      setState((state) => ({\n        ...state,\n        AdminCalendarCache: state.AdminCalendarCache.filter(\n          (record) =>\n            !(\n              record.method === \"getBookingsByDateStrandTime\" &&\n              record.query === `${date}${time}`\n            )\n        ),\n      }));\n      setState((state) => ({\n        ...state,\n        AdminCalendarCache: state.AdminCalendarCache.filter(\n          (record) =>\n            !(\n              record.method === \"getBookingsCountByDateStrandTime\" &&\n              record.query === `${date}${time}`\n            )\n        ),\n      }));\n      setState((state) => ({\n        ...state,\n        AdminCalendarCache: state.AdminCalendarCache.filter(\n          (record) =>\n            !(\n              record.method === \"getBookingsCountByDateStr\" &&\n              record.query === date\n            )\n        ),\n      }));\n    }\n\n    fetchData();\n  }, [date, time, state.bookingDialogDataChanged]);\n\n  const bookingCliked = (event, booking) => {\n    setSelectedBooking(booking);\n    setOpenDialog(true);\n  };\n\n  const getBookingClass = (clinic) => {\n    switch (clinic) {\n      case \"Virtual Consultation\":\n        return classes.bookingBoxVC;\n      case \"F2F Clinic\":\n        return classes.bookingBoxF2F;\n      case \"Laser Theatre\":\n        return classes.bookingBoxLaser;\n      case \"Lens Theatre\":\n        return classes.bookingBoxCataract;\n        case \"Post OP\":\n          return classes.bookingBoxPostOP;\n          case \"Optometry\":\n            return classes.bookingBoxOptometry;\n      \n  \n      default:\n        return classes.bookingBoxHidden;\n    }\n  };\n\n  const addNewBookingClicked = () => {\n    setOpenDialogAddNew(true);\n  };\n\n  const getBookingBorderClass = (clinic) => {\n    switch (clinic) {\n      case \"pcr\":\n        return classes.BookingBorderPCR;\n      case \"gynae\":\n        return classes.BookingBorderGynae;\n      case \"gp\":\n        return classes.BookingBorderGP;\n      case \"std\":\n        return classes.BookingBorderSTD;\n        case \"blood\":\n          return classes.BookingBorderBlood;\n    \n      default:\n        return null;\n    }\n  };\n\n  const getBookingsBox = (_bookings) => {\n    if (_bookings === null) {\n      return (\n        <div className={classes.LoadingProgress}>\n          <CircularProgress disableShrink />\n        </div>\n      );\n    } else if (_bookings.length >= 0) {\n      return (\n        <React.Fragment>\n          {_bookings.map(\n            (booking) =>\n              state.selectedClinics.findIndex(\n                (e) => e === booking.clinic\n              ) >= 0 && (\n                <div\n                  style={booking.tr ? { borderTop: \"5px solid #d00fd6\" } : {}}\n                  className={clsx(\n                    getBookingClass(booking.clinic),\n                    // getBookingBorderClass(booking.clinic)\n                  )}\n                  onClick={(event) => bookingCliked(event, booking)}\n                >\n                  {`${\n                    booking.fullname\n                  }`.substring(0, 30)}\n                </div>\n              )\n          )}\n\n          <div className={classes.bookingBoxNew} onClick={addNewBookingClicked}>\n            {\" \"}\n            + Add New Booking\n          </div>\n        </React.Fragment>\n      );\n    }\n  };\n\n  const handleCloseDialog = () => {\n    setOpenDialog(false);\n  };\n\n  const handleCloseDialogAddNew = () => {\n    setOpenDialogAddNew(false);\n  };\n\n  const handleClinicClicked = (clinic) => {\n\n    setClinic(clinic)\n    setOpenDialogOV(true)\n\n  };\n\n  return (\n    <React.Fragment>\n      <div className={classes.Container}>\n        {getBookingsBox(filteredBookings)}\n      </div>\n\n      <EditOVBookingDialog\n        booking={selectedBooking}\n        open={openDialog}\n        date={date}\n        time={time}\n        clinic={selectedBooking?.clinic}\n        handleClose={handleCloseDialog}\n      />\n\n      <NewBookingDialog\n        date={date}\n        time={time}\n        open={openDialogAddNew}\n        handleClose={handleCloseDialogAddNew}\n        clinicClicked={handleClinicClicked}\n      />\n\n      <NewOVDialog\n        date={date}\n        time={time}\n        open={openDialogOV}\n        clinic={clinic}\n        handleClose={handleCloseDialogOV}\n      />\n\n    </React.Fragment>\n  );\n};\n\nDayViewCell.propTypes = {\n  key: PropTypes.string.isRequired,\n  date: PropTypes.string.isRequired,\n  time: PropTypes.string.isRequired,\n};\n\nexport default DayViewCell;\n","import React, { useEffect, useState } from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport PropTypes from 'prop-types';\nimport DayViewCell from './DayViewCell';\nimport dateformat from 'dateformat';\n\n\n\n\nconst rows = [\n    '08:00 AM',\n    '08:15 AM',\n    '08:30 AM', \n    '08:45 AM',\n    '09:00 AM',\n    '09:15 AM', \n    '09:30 AM',\n    '09:45 AM',\n    '10:00 AM',\n    '10:15 AM',\n    '10:30 AM',\n    '10:45 AM',\n    '11:00 AM',\n    '11:15 AM',\n    '11:30 AM',\n    '11:45 AM',\n    '12:00 PM',\n    '12:15 PM',\n    '12:30 PM',\n    '12:45 PM',\n    '01:00 PM',\n    '01:15 PM',\n    '01:30 PM',\n    '01:45 PM',\n    '02:00 PM',\n    '02:15 PM',\n    '02:30 PM',\n    '02:45 PM',\n    '03:00 PM',\n    '03:15 PM',\n    '03:30 PM',\n    '03:45 PM',\n    '04:00 PM',\n    '04:15 PM',\n    '04:30 PM',\n    '04:45 PM',\n    '05:00 PM',\n    '05:15 PM',\n    '05:30 PM',\n    '05:45 PM',\n    '06:00 PM',\n    '06:15 PM',\n    '06:30 PM',\n    '06:45 PM',\n    '07:00 PM',\n    '07:15 PM',\n    '07:30 PM',\n    '07:45 PM'\n];\n\nconst useStyles = makeStyles((theme) => ({\n\n    table: {\n        width: \"100%\",\n        border: \"1px solid #ddd\",\n        borderCollapse: \"collapse\",\n        overflowY: \"auto\"\n    },\n\n    th: {\n        border: \"1px solid #ddd\",\n        borderCollapse: \"collapse\",\n        verticalAlign: \"middle\",\n        fontcolor: \"#555\",\n        fontWeight: \"400\",\n        fontSize: \"15px\",\n        paddingTop: \"5px\",\n        paddingBottom: \"5px\",\n        width: \"12%\", \n    },\n\n    td: {\n        border: \"1px solid #ddd\",\n        borderCollapse: \"collapse\",\n        verticalAlign: \"middle\",\n        height : \"50px\",\n        width: \"84%\", \n    },\n\n    titleLabel: {\n        paddingBottom: \"17px\",\n        paddingTop: \"17px\",\n        color: \"#777\",\n        fontSize: \"16px\"\n    },\n\n    titleLabelToday: {\n        paddingBottom: \"17px\",\n        paddingTop: \"17px\",\n        color: \"#fff\",\n        backgroundColor: \"#1a73e8\",\n        fontSize: \"16px\"\n    },\n\n  }));\n\nconst DayView = ({date}) => {\n    const classes = useStyles();\n\n    return (\n        <React.Fragment>\n\n        <div style={{overflowY: \"scroll\" , height: \"60px\"}}>\n            <table className={classes.table}>\n                <thead>\n                    <tr>\n                        <th style={{width: \"7%\"}}>\n                        \n                        </th>\n                        <th style={{width: \"84%\"}}>\n                                <div className={(dateformat(new Date(),'yyyy-mm-dd') === dateformat(date, 'yyyy-mm-dd')) ? classes.titleLabelToday : classes.titleLabel }>\n                                        {dateformat(date,'dddd')}\n                                </div>                                \n                        </th>\n                    </tr>\n                </thead>\n             </table>\n\n        </div>\n\n            <div style={{overflowY: \"scroll\" , height: \"70vh\"}}>\n                <table className={classes.table}>   \n                    <tbody>\n                        {rows.map(row => (\n                            <tr>\n                                <td style={{width: \"7%\"}}>\n                                    {row}\n                                </td>\n                               \n                                <td className={classes.td}>\n                                     <DayViewCell key={`${dateformat(date,'yyyy-mm-dd')}-${row}`} date={dateformat(date,'yyyy-mm-dd')} time={row}/>  \n                                </td>\n                            \n                            </tr>\n                        ))}            \n                    </tbody>\n                </table>\n            </div>                    \n      \n        </React.Fragment>\n\n\n    );\n}\n\nDayView.propTypes = {\n    date: PropTypes.any.isRequired\n  };\n\n\nexport default DayView;","import React, { useEffect, useState } from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport MonthView from './MonthView';\nimport { Button, Grid, IconButton, InputAdornment, TextField, Tooltip } from '@material-ui/core';\nimport ToggleButton from '@material-ui/lab/ToggleButton';\nimport ToggleButtonGroup from '@material-ui/lab/ToggleButtonGroup';\n\nimport NavigateBeforeIcon from '@material-ui/icons/NavigateBefore';\nimport NavigateNextIcon from '@material-ui/icons/NavigateNext';\nimport WeekView from './WeekView';\nimport dateformat from 'dateformat';\nimport DayView from './DayView';\nimport GlobalState from '../../GlobalState';\n\nimport CloseIcon from '@material-ui/icons/Close';\nimport { CalendarColors } from './colors';\n\nconst Clinics = [\n    {clinic: \"Virtual Consultation\", color: CalendarColors.VC_COLOR},\n    {clinic: \"F2F Clinic\", color: CalendarColors.F2F_COLOR},\n    {clinic: \"Laser Theatre\", color: CalendarColors.LASER_COLOR},\n    {clinic: \"Lens Theatre\", color: CalendarColors.CATARACT_COLOR},\n    {clinic: \"Post OP\", color: CalendarColors.POSTOP_COLOR},\n    {clinic: \"Optometry\", color: CalendarColors.OPOTOMETRY_COLOR},\n]\n\nconst monthNames = [\"January\", \"February\", \"March\", \"April\", \"May\", \"June\",\n  \"July\", \"August\", \"September\", \"October\", \"November\", \"December\"\n];\n\nconst useStyles = makeStyles((theme) => ({\n\n    title: {\n        textAlign: \"center\",\n        fontSize: \"24px\",\n        fontColor: \"#333\"\n    },\n\n  }));\n\nexport default function CalendarView() {\n    const classes = useStyles();\n\n    const [state, setState] = React.useContext(GlobalState);\n\n    const [month, setMonth] = React.useState(new Date().getMonth() + 1);\n    const [year, setYear] = React.useState(new Date().getFullYear());\n\n    const [day, setDay] = React.useState(new Date());\n\n    const [firstDayofWeek, setFirstDayofWeek] = React.useState(new Date());\n\n    const [weekDates, setWeekDates] = React.useState([]);\n\n    const [mode, setMode] = React.useState('month');\n    const [selectedTab, setSeletedTab] = React.useState('month');\n\n    const [filter,setFilter] = React.useState('');\n\n    const filterChanged = (event) =>{\n        setFilter(event.target.value);\n        setState(state => ({...state, dayViewCalFilter : event.target.value?.trim()?.toUpperCase()}))\n      }\n\n      const removeFilter = () =>\n      {\n        setFilter('');\n        setState(state => ({...state, dayViewCalFilter : ''}));\n      }\n\n\n    useEffect( () => {\n        const today = new Date();\n        const dayofWeek = today.getDay();\n        const firstdayofweek = new Date(today.getTime() - ( dayofWeek * 86400000));\n        setFirstDayofWeek(firstdayofweek);\n        setState(state => ({...state, AdminCalendarCache : []}));\n        setState(state => ({...state, selectedClinics : Clinics.map(item => item.clinic) }));\n\n        return () =>\n        {\n            setState(state => ({...state, AdminCalendarCache : []}));\n            removeFilter();\n        }\n       \n    }, []);\n\n\n    useEffect( () => {\n        const dates = [];\n        for (var i = 0; i < 7 ; i++)\n        {\n            dates.push(new Date(firstDayofWeek.getTime() + ( i * 86400000)));\n        }\n        setWeekDates(dates);\n\n    }, [firstDayofWeek]);\n\n    const handlePrevButton = (event) =>\n    {\n       if (mode === 'month')\n       {\n            if (month === 1)\n            {\n                setYear(year - 1);\n            } \n\n            const newMonth = month === 1 ? 12 : month - 1;\n            setMonth(newMonth);\n\n            const newDay = new Date(year, newMonth - 1 , 1, 0 ,0 ,0 ,0);\n            setDay(newDay);\n\n            const dayofWeek = newDay.getDay();\n            setFirstDayofWeek(new Date(newDay.getTime() - ( dayofWeek * 86400000)));\n\n       } \n       else if (mode === 'week')\n       {\n           const newFirstDayofWeek = new Date(firstDayofWeek.getTime() - ( 7 * 86400000));\n           setFirstDayofWeek(newFirstDayofWeek);\n\n           setDay(newFirstDayofWeek);\n           setMonth(newFirstDayofWeek.getMonth() + 1);\n           setYear(newFirstDayofWeek.getFullYear());\n\n       }\n       else if (mode === 'day')\n       {\n           const newDay = new Date(day.getTime() - ( 1 * 86400000));\n           setDay(newDay);\n\n           const dayofWeek = newDay.getDay();\n           setFirstDayofWeek(new Date(newDay.getTime() - ( dayofWeek * 86400000)));\n\n           setMonth(newDay.getMonth() + 1);\n           setYear(newDay.getFullYear());\n       }\n    }\n\n    const handleNextButton = (event) =>\n    {\n        if (mode === 'month')\n        {\n            if (month === 12)\n            {\n                setYear(year + 1);\n            } \n       \n            const newMonth = month === 12 ? 1 : month + 1;\n            setMonth(newMonth);\n\n            const newDay = new Date(year, newMonth - 1 , 1, 0 ,0 ,0 ,0);\n            setDay(newDay);\n\n            const dayofWeek = newDay.getDay();\n            setFirstDayofWeek(new Date(newDay.getTime() - ( dayofWeek * 86400000)));\n        }\n        else if (mode === 'week')\n        {\n            const newFirstDayofWeek = new Date(firstDayofWeek.getTime() + ( 7 * 86400000));\n            setFirstDayofWeek(newFirstDayofWeek);\n\n            setDay(newFirstDayofWeek);\n            setMonth(newFirstDayofWeek.getMonth() + 1);\n            setYear(newFirstDayofWeek.getFullYear());\n\n        }\n        else if (mode === 'day')\n        {\n            const newDay = new Date(day.getTime() + ( 1 * 86400000));\n            setDay(newDay);\n\n            const dayofWeek = newDay.getDay();\n            setFirstDayofWeek(new Date(newDay.getTime() - ( dayofWeek * 86400000)));\n \n            setMonth(newDay.getMonth() + 1);\n            setYear(newDay.getFullYear());\n        }\n    }\n\n    const goToday = (event) => {\n        const newDay = new Date();\n        const dayofWeek = newDay.getDay();\n        setFirstDayofWeek(new Date(newDay.getTime() - ( dayofWeek * 86400000)));\n        setDay(newDay);\n        setMonth(newDay.getMonth() + 1);\n        setYear(newDay.getFullYear());\n    }\n\n    const dayClicked = (event, date) =>\n    {\n        const newDay = new Date(date);\n        const dayofWeek = newDay.getDay();\n        setFirstDayofWeek(new Date(newDay.getTime() - ( dayofWeek * 86400000)));\n        setDay(newDay);\n        setMonth(newDay.getMonth() + 1);\n        setYear(newDay.getFullYear());\n        setSeletedTab('day');\n        setMode('day');\n    }\n\n    const getContentFromMode = (_mode) => {\n        if (_mode === 'month')\n        {\n            return (\n                <MonthView dayClicked={dayClicked} month={month} year={year}/>    \n            );\n        }    \n        else if (_mode === 'week')\n        {\n            return (\n                    <WeekView dayClicked={dayClicked} dates={weekDates}/>\n            );\n            \n        }\n        else if (_mode === 'day')\n        {\n            return (\n                <DayView date={day}/>\n            );\n        }\n    }\n\n    const getCalendarTitleFromMode = (_mode) => {\n        if (_mode === 'month')\n        {\n            return (\n                <span className={classes.title}> {`${monthNames[month - 1]} ${year}`} </span>   \n            );\n        }    \n        else if (_mode === 'week')\n        {\n            const endOfWeek = new Date(firstDayofWeek.getTime() + ( 6 * 86400000));\n            let endofWeekStr = '';\n            if (endOfWeek.getMonth() === firstDayofWeek.getMonth())\n            {\n                endofWeekStr = dateformat(endOfWeek,'d');\n            }else\n            {\n                endofWeekStr = dateformat(endOfWeek,'mmm d');\n            }\n\n            return (\n                <span className={classes.title}> {`${dateformat(firstDayofWeek,'mmm d')} - ${endofWeekStr}, ${year}`} </span>\n            );\n            \n        }\n        else if (_mode === 'day')\n        {\n            return (\n                <span className={classes.title}> {`${dateformat(day,'mmmm d, yyyy')}`} </span>\n            );\n        }\n    }\n\n\n    const handleTabChanged = (event, value) => {\n        if (value && value.length)\n        {\n          setSeletedTab(value);\n          setMode(value);\n        }\n    };\n\n    const getPrevButtonTitle = (_mode) =>\n    {\n        return `Previuos ${mode}`;\n    }\n\n    const getNextButtonTitle = (_mode) =>\n    {\n        return `Next ${mode}`;\n    }\n\n    const clinicClicked = (clinic) =>\n    {\n        if (state.selectedClinics?.findIndex(e => e === clinic) >= 0 )\n        {\n            setState(state => ({...state, selectedClinics :state.selectedClinics.filter(e => e !== clinic)}));\n        }else\n        {\n            setState(state => ({...state, selectedClinics : [...state.selectedClinics, clinic]}));\n        }\n    }\n\n    const getClinicGuide = () =>\n    {\n        return (\n            <div style={{marginBottom:\"10px\"}}>\n               <Grid container spacing={1}>\n                   {Clinics.map( item => (\n                       <Grid item>\n                           <div \n                                style={state.selectedClinics?.findIndex(e => e === item.clinic) >= 0 ? {border:`1px solid ${item.color}`, backgroundColor:`${item.color}`, color:\"#fff\" ,fontSize:\"0.85rem\", fontWeight:\"500\", padding:\"5px\", width:\"150px\" , textAlign:\"center\", cursor:\"pointer\", borderRadius:\"4px\"}   : {border:`1px solid ${item.color}`, color:`${item.color}`, fontSize:\"0.85rem\", fontWeight:\"500\", padding:\"5px\", width:\"150px\", textAlign:\"center\", cursor:\"pointer\", borderRadius:\"4px\"}}\n                                onClick= {() => clinicClicked(item.clinic)}   \n                                > \n                               {item.clinic}\n                           </div>\n                        </Grid>\n                   ))\n                   }\n               </Grid>\n            </div>\n        )\n    }\n\n    return (\n        <React.Fragment>\n\n            {getClinicGuide()}\n\n          <Grid\n            container\n            direction=\"row\"\n            justify=\"space-between\"\n            alignItems=\"center\"\n            style= {{marginBottom: \"10px\", marginTop: \"0px\"}}\n            >  \n\n            <Grid item md={3}>\n                <div  style={{display:\"flex\", alignItems: \"flex-start\", justifyContent: \"flex-start\" , paddingLeft: \"10px\"}}>\n                    <Tooltip title={getPrevButtonTitle(mode)} placement=\"bottom-start\">\n                        <IconButton \n                                color=\"default\" \n                                aria-label=\"prev\"\n                                onClick = {handlePrevButton}\n                                >\n                            <NavigateBeforeIcon style={{fontSize: '2rem'}}/>\n                        </IconButton>\n                    </Tooltip>\n\n                    <Tooltip title={getNextButtonTitle(mode)} placement=\"bottom-end\">\n                        <IconButton \n                                color=\"default\" \n                                aria-label=\"next\"\n                                onClick = {handleNextButton}\n                                >\n                            <NavigateNextIcon style={{fontSize: '2rem'}}/>\n                        </IconButton>\n                    </Tooltip>\n\n                    <Button style={{marginTop: \"11px\", marginLeft: \"10px\"}} onClick={goToday} variant=\"outlined\"> Today </Button>\n                </div>\n\n            </Grid>\n\n            <Grid item md={6}>\n\n                    <Grid\n                        container\n                        direction=\"row\"\n                        justify=\"center\"\n                        alignItems=\"flex-end\"\n                        spacing = {3}\n                        >\n                            <Grid item>\n                                    {getCalendarTitleFromMode(mode)}\n                            </Grid>\n                            {mode === 'day' && (\n                                        <Grid item>\n                                                <TextField\n                                                    variant=\"standard\"\n                                                    style={{marginBottom : \"5px\"}}\n                                                    value={filter}\n                                                    onChange={filterChanged}\n                                                    margin=\"normal\"\n                                                    size=\"small\"\n                                                    id=\"filter\"\n                                                    label=\"Filter\"\n                                                    name=\"filter\"\n                                                    autoComplete=\"off\"\n                                                    InputProps={{\n                                                        endAdornment : \n                                                            <InputAdornment position=\"end\">\n                                                                <Tooltip title=\"Clear\">\n                                                                            <IconButton\n                                                                            aria-label=\"remove filter\"\n                                                                            onClick={() => removeFilter()}\n                                                                            onMouseDown={() => removeFilter()}\n                                                                        >\n                                                                            <CloseIcon/>\n                                                                        </IconButton>\n                                                                </Tooltip>\n                                                            \n                                                            </InputAdornment>\n                                                          \n                                                    }}\n                                                   \n                                                />\n                                        </Grid>\n                            )}\n                           \n                    </Grid>\n                \n            </Grid>\n\n            <Grid item md={3}>\n                <div  style={{display:\"flex\", alignItems: \"flex-end\", justifyContent: \"flex-end\", paddingRight: \"10px\" }}>\n                    <ToggleButtonGroup\n                        value={selectedTab}\n                        exclusive\n                        onChange={handleTabChanged}\n                        aria-label=\"select view mode\"\n                    >\n                        <ToggleButton style={selectedTab === 'month' ? {width: \"80px\", color: \"#3f51b5\", backgroundColor: \"#ebedf7\" } : {width: \"80px\"}} value=\"month\" aria-label=\"month view\">\n                                month\n                        </ToggleButton>\n                        <ToggleButton style={selectedTab === 'week' ? {width: \"80px\", color: \"#3f51b5\", backgroundColor: \"#ebedf7\"} : {width: \"80px\"}}  value=\"week\" aria-label=\"week view\">\n                                week\n                        </ToggleButton>\n                        <ToggleButton style={selectedTab === 'day' ? {width: \"80px\", color: \"#3f51b5\", backgroundColor: \"#ebedf7\"} : {width: \"80px\"}} value=\"day\" aria-label=\"day view\">\n                                day\n                        </ToggleButton>\n                    </ToggleButtonGroup>\n                </div>\n            </Grid>\n\n           </Grid> \n\n             {getContentFromMode(mode)}\n\n        </React.Fragment>\n\n\n    );\n\n}","import React, { useEffect, useRef, useState } from 'react';\nimport { DataGrid } from '@material-ui/data-grid';\nimport { Button, Checkbox, CircularProgress, Dialog, DialogContent, DialogTitle, Divider, FormControl, FormControlLabel, Grid, Icon, InputLabel, LinearProgress, Link, makeStyles, MenuItem, Paper, Select, SvgIcon, Switch, TextField, Tooltip } from '@material-ui/core';\nimport RefreshIcon from '@material-ui/icons/Refresh';\nimport { IconButton } from '@material-ui/core';\nimport CheckIcon from '@material-ui/icons/Check';\nimport CloseIcon from '@material-ui/icons/Close';\nimport GlobalState from '../GlobalState';\nimport { getMenuIndex } from '../MenuList';\nimport { FormatDateFromString, FormatDateFromStringShortYear } from './DateFormatter';\nimport AccessibilityIcon from '@material-ui/icons/Accessibility';\n\nimport SearchIcon from '@material-ui/icons/Search';\nimport BookingDialog from './BookingDialog';\nimport AddIcon from '@material-ui/icons/Add';\n\nimport NewReleasesIcon from '@material-ui/icons/NewReleases';\nimport HistoryIcon from '@material-ui/icons/History';\nimport TimelineIcon from '@material-ui/icons/Timeline';\nimport DescriptionIcon from '@material-ui/icons/Description';\nimport AutorenewIcon from '@material-ui/icons/Autorenew';\nimport LiveTvIcon from '@material-ui/icons/LiveTv';\nimport PlaylistAddCheckIcon from '@material-ui/icons/PlaylistAddCheck';\nimport AddCircleOutlineIcon from '@material-ui/icons/AddCircleOutline';\nimport DeleteIcon from '@material-ui/icons/Delete';\nimport HourglassEmptyIcon from '@material-ui/icons/HourglassEmpty';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faFileExcel } from \"@fortawesome/free-solid-svg-icons\";\nimport Draggable from 'react-draggable';\n\nimport * as dateformat from 'dateformat';\n\nimport DateFnsUtils from '@date-io/date-fns';\nimport {\n  MuiPickersUtilsProvider,\n  KeyboardTimePicker,\n  KeyboardDatePicker,\n} from '@material-ui/pickers';\n\nimport BusinessIcon from '@material-ui/icons/Business';\nimport CreditCardIcon from '@material-ui/icons/CreditCard';\nimport LocalAtmIcon from '@material-ui/icons/LocalAtm';\n\n\nimport ReactHTMLTableToExcel from 'react-html-table-to-excel';\nimport PriceCalculator from './PriceCalculator';\nimport { corporates } from './Corporates';\nimport PatientService from './services/PatientService';\nimport PatientDialog from './PatientDialog';\nimport { set } from 'date-fns/esm';\n\nconst useStyles = makeStyles((theme) => ({\n  title: {\n    marginTop: theme.spacing(0),\n    marginBottom: theme.spacing(1),\n\n  },\n\n  refreshButton: {\n    marginLeft: theme.spacing(2),\n  },\n\n  checkIcon: {\n    color: \"green\"\n  },\n\n  closeIcon: {\n    color: \"red\"\n  },\n\n  RefLink: {\n    cursor: \"pointer\"\n  },\n\n  BookedLabel: {\n    backgroundColor: \"#606060\",\n    color: \"#fff\",\n    width: \"70px\",\n    textAlign: \"center\",\n  },\n\n  PatientAttendedLabel: {\n    backgroundColor: \"#0066aa\",\n    color: \"#fff\",\n    width: \"70px\",\n    textAlign: \"center\",\n  },\n\n  SampleTakenLabel: {\n    backgroundColor: \"#0066cc\",\n    color: \"#fff\",\n    width: \"70px\",\n    textAlign: \"center\",\n  },\n\n  ReportSentLabel: {\n    backgroundColor: \"#009900\",\n    color: \"#fff\",\n    width: \"70px\",\n    textAlign: \"center\",\n  },\n\n  ReportCertSentLabel: {\n    backgroundColor: \"#009900\",\n    color: \"#fff\",\n    width: \"70px\",\n    textAlign: \"center\",\n  },\n\n  PositiveLabel: {\n    backgroundColor: \"red\",\n    color: \"#fff\",\n    width: \"70px\",\n    textAlign: \"center\",\n  },\n\n  HideNowRows: {\n    position: \"absolute\",\n    top: \"40%\",\n    left: \"40%\",\n    width: \"600px\",\n    height: \"300px\",\n    backgroundColor: \"#fafafa\",\n    color: \"#111\",\n    zIndex: \"1000\",\n    display: \"flex\",\n    alignItems: \"center\",\n    justifyItems: \"center\"\n  },\n\n  ExportToExcelButton:\n  {\n    // marginBottom : \"20px\",\n    color: \"#2f942e\",\n    borderColor: \"#2f942e\",\n    \"&:hover\": {\n      background: \"#fafffa\",\n      borderColor: \"#2f942e\",\n    },\n    textDecoration: \"none !important\",\n\n  },\n\n  ExportToExcelButtonInline:\n  {\n    // marginBottom : \"20px\",\n    color: \"#2f942e\",\n    borderColor: \"#2f942e\",\n    \"&:hover\": {\n      background: \"#fafffa\",\n      borderColor: \"#2f942e\",\n    },\n    textDecoration: \"none !important\",\n    cursor: \"pointer\",\n    padding: \"10px\"\n\n  },\n\n  table: {\n    width: \"100%\",\n    border: \"1px solid #ddd\",\n    borderCollapse: \"collapse\",\n  },\n\n  th: {\n    border: \"1px solid #ddd\",\n    borderCollapse: \"collapse\",\n    verticalAlign: \"middle\",\n    fontcolor: \"#555\",\n    fontWeight: \"400\",\n    fontSize: \"15px\",\n    paddingTop: \"5px\",\n    paddingBottom: \"5px\",\n    width: \"14%\",\n    paddingLeft: \"5px\",\n  },\n\n  td: {\n    border: \"1px solid #ddd\",\n    borderCollapse: \"collapse\",\n    verticalAlign: \"middle\",\n    paddingLeft: \"5px\",\n  },\n\n  topSelect: {\n    margin: theme.spacing(1),\n    minWidth: 80,\n  },\n\n  notifyIcon: {\n    width: \"16px\",\n    height: \"16px\",\n    borderRadius: \"50%\",\n    backgroundColor: \"rgb(220, 0, 78)\",\n    marginLeft: \"10px\"\n  }\n\n}));\n\nconst getTableTitle = (str) => {\n\n  if (str === 'today') {\n    return `Today's Bookings`;\n  } else if (str === 'old') {\n    return `Old Bookings`;\n  } else if (str === 'future') {\n    return `Future Bookings`;\n  } else if (str === 'recent') {\n    return `Recent Bookings`;\n  } else if (str === 'live') {\n    return `Live Bookings`;\n  } else if (str === 'completed') {\n    return `Completed Bookings`;\n  } else if (str === 'positive') {\n    return `Positive Results`;\n  } else if (str === 'deleted') {\n    return `Archived Records`;\n  } else if (str === 'late') {\n    return `40 Hours Late`;\n  }\n\n  else {\n    return `Patients`;\n  }\n\n}\n\nconst getTableIcon = (str) => {\n\n  if (str === 'today') {\n    return <NewReleasesIcon style={{ fontSize: \"2.2rem\" }} />;\n  } else if (str === 'old') {\n    return <HistoryIcon style={{ fontSize: \"2.2rem\" }} />;\n  } else if (str === 'future') {\n    return <TimelineIcon style={{ fontSize: \"2.2rem\" }} />;\n  } else if (str === 'recent') {\n    return <AutorenewIcon style={{ fontSize: \"2.2rem\" }} />;\n  } else if (str === 'live') {\n    return <LiveTvIcon style={{ fontSize: \"2.2rem\" }} />;\n  } else if (str === 'completed') {\n    return <PlaylistAddCheckIcon style={{ fontSize: \"2.2rem\" }} />;\n  } else if (str === 'positive') {\n    return <AddCircleOutlineIcon style={{ fontSize: \"2.2rem\" }} />\n  } else if (str === 'deleted') {\n    return <DeleteIcon style={{ fontSize: \"2.2rem\" }} />;\n  } else if (str === 'late') {\n    return <HourglassEmptyIcon style={{ fontSize: \"2.2rem\" }} />;\n  }\n\n  else {\n    return <AccessibilityIcon style={{ fontSize: \"2.2rem\" }} />;\n  }\n\n}\n\nfunction PaperComponent(props) {\n  return (\n    <Draggable handle=\"#draggable-dialog-title\" cancel={'[class*=\"MuiDialogContent-root\"]'}>\n      <Paper {...props} />\n    </Draggable>\n  );\n}\n\nexport default function PatientsTable(props) {\n\n  const classes = useStyles();\n\n\n\n  var columns = [\n    {\n      field: \"_id\",\n      headerName: \"Patient ID\",\n      width: 150,\n      renderCell: (params) => {\n        return (\n          <React.Fragment>\n            <IconButton\n              color=\"primary\"\n              onClick={(event) => openDetailsDialog(event, params.value)}\n            >\n              <SearchIcon />\n            </IconButton>\n\n            <span\n              style={{\n                color: \"#333\",\n                fontWeight: \"600\",\n                fontSize: \"0.8rem\",\n              }}\n            >\n              {params.getValue(\"patientID\")}\n            </span>\n          </React.Fragment>\n        );\n      },\n    },\n    { field: 'name', headerName: 'Name', width: 150 },\n    { field: 'surname', headerName: 'Surname', width: 150 },\n    {\n      field: 'birthDate', headerName: 'DOB', width: 150, valueFormatter: (params) => {\n        return FormatDateFromString(params.value);\n      },\n    },\n    { field: 'email', headerName: 'Email', width: 200 },\n    { field: 'homeTel', headerName: 'Home Tel', width: 150 },\n    { field: 'mobileTel', headerName: 'Mobile Tel', width: 150 },\n    { field: 'postCode', headerName: 'Postcode', width: 300 },\n    { field: 'address', headerName: 'Address', width: 300 },\n\n  ];\n\n\n  const [state, setState] = React.useContext(GlobalState);\n\n  const [data, setData] = React.useState({ bookings: [], cachedBookings: [], isFetching: true });\n\n  const [selectedRow, setSelectedRow] = React.useState(null);\n\n  const [selectedBooking, setSelectedBooking] = React.useState(null);\n  const [seeDetailsDialogOpen, setSeeDetailsDialogOpen] = React.useState(false);\n\n  const [corporate, setCorporate] = useState(corporates[0]);\n  const corporateChanged = (event) => {\n    setCorporate(event.target.value);\n  }\n\n\n  const [filter, setFilter] = React.useState('');\n\n\n  const lastPromise = useRef();\n\n  const formatTimeStamp = (timeStamp) => {\n    const todayStr = dateformat(new Date(), 'yyyy-mm-dd');\n    const timeStampStr = dateformat(timeStamp, 'yyyy-mm-dd');\n    if (todayStr === timeStampStr) {\n      return dateformat(timeStamp, \"'Today', h:MM:ss TT\");\n    }\n    else {\n      return dateformat(timeStamp, \"mmm dS, h:MM:ss TT\");\n    }\n  }\n\n  const loadData = () => {\n    var api = PatientService.getAllPatients;\n\n    if (props.date === 'deleted') {\n      api = PatientService.getDeletedPatients;\n    }\n\n    setData({ bookings: [], cachedBookings: [], isFetching: true });\n\n    // console.log(props)\n\n    const currentPromise = api().then((res) => {\n      // console.log(res)\n      for (var i = 0; i < res.data.length; i++) {\n        res.data[i] = { ...res.data[i], id: i + 1 }\n      }\n      setData({ bookings: [...res.data], cachedBookings: [...res.data], isFetching: false });\n      // return res.data;\n    }).catch(err => {\n      console.error(err)\n    })\n\n    // lastPromise.current = currentPromise;\n\n    // currentPromise.then(\n    //   result => {\n    //     if (currentPromise === lastPromise.current) {\n    //       setData({bookings: [...result], cachedBookings: [...result], isFetching: false});\n    //       setPage(1);\n    //     }\n    //   },\n    //   e => {\n    //     if (currentPromise === lastPromise.current) {\n    //         console.error(e);\n    //         setData({bookings: data.bookings, cachedBookings: data.cachedBookings, isFetching: false});\n    //     }\n    //   });\n\n  }\n\n  useEffect(() => {\n    loadData()\n  },\n    [props.date]);\n\n\n\n\n  useEffect(() => {\n\n    if (filter && filter.trim().length > 0) {\n      var filteredData = data.cachedBookings.filter((element) =>\n\n        (element.name?.toLowerCase().indexOf(filter.toLowerCase()) >= 0) ||\n        (element.surname?.toLowerCase().indexOf(filter.toLowerCase()) >= 0) ||\n        ((element.name + ' ' + element.surname)?.toLowerCase().indexOf(filter.toLowerCase()) >= 0)\n\n\n\n      );\n\n\n      setData({ bookings: [...filteredData], cachedBookings: data.cachedBookings, isFetching: false });\n    } else {\n      setData({ bookings: [...data.cachedBookings], cachedBookings: data.cachedBookings, isFetching: false });\n    }\n  },\n    [filter]);\n\n\n  useEffect(() => {\n\n    loadData()\n\n  }, [state.patientDialogDataChanged]);\n\n\n  const handleCloseSeeDetaisDialog = () => {\n    setSelectedBooking(null);\n    setSeeDetailsDialogOpen(false);\n  }\n\n  const openDetailsDialog = (event, id) => {\n    const patient = data.bookings.find(element => element._id === id);\n    if (patient) {\n      setSelectedPatient(patient);\n      setPatientDialogTitle(`${patient.name.toUpperCase()} ${patient.surname.toUpperCase()}`)\n      setPatientDialogSaveButtonText(\"Save Changes\")\n      setPatientDialogOpen(true)\n    }\n  }\n\n  const refreshClicked = (event) => {\n    setFilter('');\n    loadData()\n  }\n\n  const filterChanged = (event) => {\n    setFilter(event.target.value);\n  }\n\n  const handleSelectionChanged = (newSelection) => {\n    if (newSelection.length > 0) {\n      setSelectedRow(newSelection.rows[0]);\n    }\n\n  }\n\n  const [page, setPage] = React.useState(1);\n\n\n  const registerNewPatientClicked = () => {\n    setSelectedPatient(null)\n    setPatientDialogTitle('Register New Patient')\n    setPatientDialogSaveButtonText(\"Save\")\n    setPatientDialogOpen(true)\n  }\n\n  const [selectedPatient, setSelectedPatient] = React.useState(null)\n  const [patientDialogOpen, setPatientDialogOpen] = React.useState(false)\n  const [patientDialogTitle, setPatientDialogTitle] = React.useState('')\n  const [patientDialogSaveButtonText, setPatientDialogSaveButtonText] = React.useState('')\n\n\n  const handleClosePatientDialog = () => {\n    setPatientDialogOpen(false)\n  }\n\n\n  return (\n    <React.Fragment>\n      {data.isFetching && (\n        <div style={{ width: \"100%\", paddingTop: \"3px\" }}>\n          <LinearProgress color=\"primary\" />\n        </div>\n      )}\n      <Grid\n        container\n        direction=\"row\"\n        justify=\"space-between\"\n        alignItems=\"flex-end\"\n      >\n        <Grid item md={4}>\n          <div style={{ textAlign: \"left\", paddingLeft: \"10px\" }}>\n            <Grid\n              container\n              direction=\"row\"\n              justify=\"flex-start\"\n              alignItems=\"center\"\n            >\n              <Grid item>\n                <span style={{ paddingRight: \"15px\", color: \"#555\" }}>\n                  {\" \"}\n                  {getTableIcon(props.date)}{\" \"}\n                </span>\n              </Grid>\n              <Grid item>\n                <span\n                  style={{\n                    fontSize: \"1.4rem\",\n                    fontWeight: \"600\",\n                    color: \"#444\",\n                  }}\n                >\n                  {\" \"}\n                  {getTableTitle(props.date)}{\" \"}\n                </span>\n              </Grid>\n              <Grid item>\n                <Tooltip title=\"Refresh\" placement=\"right\">\n                  <IconButton\n                    color=\"primary\"\n                    className={classes.refreshButton}\n                    onClick={refreshClicked}\n                  >\n                    <RefreshIcon />\n                  </IconButton>\n                </Tooltip>\n              </Grid>\n            </Grid>\n          </div>\n        </Grid>\n\n        <Grid item md={3}>\n          <div style={{ paddingBottom: \"10px\" }}>\n            <Button\n              // className={classes.ExportToExcelButton}\n              variant=\"contained\"\n              color=\"primary\"\n              onClick={registerNewPatientClicked}\n              startIcon={\n                <AddIcon />\n              }\n            >\n              Register new Patient\n              </Button>\n          </div>\n        </Grid>\n\n        {data.isFetching && <div className={classes.HideNowRows}></div>}\n\n        <Grid item md={3}>\n          <TextField\n            variant=\"standard\"\n            value={filter}\n            onChange={filterChanged}\n            margin=\"normal\"\n            size=\"small\"\n            id=\"filter\"\n            label=\"Filter\"\n            name=\"filter\"\n            autoComplete=\"off\"\n          />\n        </Grid>\n\n      </Grid>\n\n      <div style={{ height: 700, width: \"100%\" }}>\n        <DataGrid\n          rows={data.bookings}\n          columns={columns}\n          autoPageSize\n          page={page}\n          onPageChange={(params) => {\n            setPage(params.page);\n          }}\n          onSelectionChange={handleSelectionChanged}\n        />\n      </div>\n\n\n      <BookingDialog\n        booking={selectedBooking}\n        open={seeDetailsDialogOpen && selectedBooking && selectedBooking.fullname}\n        onClose={handleCloseSeeDetaisDialog}\n      />\n\n      <PatientDialog\n        patient={selectedPatient}\n        open={patientDialogOpen}\n        handleClose={handleClosePatientDialog}\n        title={patientDialogTitle}\n        saveButtonText={patientDialogSaveButtonText}\n      />\n\n    </React.Fragment>\n  );\n}","import DashboardIcon from \"@material-ui/icons/Dashboard\";\nimport NewReleasesIcon from \"@material-ui/icons/NewReleases\";\nimport HistoryIcon from \"@material-ui/icons/History\";\nimport TimelineIcon from \"@material-ui/icons/Timeline\";\nimport DescriptionIcon from \"@material-ui/icons/Description\";\nimport SearchIcon from \"@material-ui/icons/Search\";\nimport AutorenewIcon from \"@material-ui/icons/Autorenew\";\nimport LiveTvIcon from \"@material-ui/icons/LiveTv\";\nimport PlaylistAddCheckIcon from \"@material-ui/icons/PlaylistAddCheck\";\nimport WarningIcon from \"@material-ui/icons/Warning\";\nimport AddCircleOutlineIcon from \"@material-ui/icons/AddCircleOutline\";\nimport DeleteIcon from \"@material-ui/icons/Delete\";\nimport HourglassEmptyIcon from \"@material-ui/icons/HourglassEmpty\";\nimport DateRangeIcon from \"@material-ui/icons/DateRange\";\nimport EventNoteIcon from \"@material-ui/icons/EventNote\";\nimport AirplanemodeActiveIcon from \"@material-ui/icons/AirplanemodeActive\";\nimport AccessibilityIcon from '@material-ui/icons/Accessibility';\n\n/// PCR ------------------\nimport FindByRef from \"./PCR/FindByRef\";\nimport BookingTable from \"./PCR/BookingTable\";\nimport DashboardPreview from \"./PCR/DashboardPreview\";\nimport UnmatchedRecords from \"./PCR/UnmatchedRecords\";\n// import CalendarView from \"./PCR/calendar/CalendarView\";\nimport PCRCalendarView from \"./PCR/calendar-admin/CalendarView\";\n//-----------------------\n\n/// Gynae -------------------\nimport GynaeBookingTable from \"./Gynae/BookingTable\";\nimport GynaeDashboardPreview from \"./Gynae/DashboardPreview\";\nimport GynaeFindByRef from \"./Gynae/FindByRef\";\nimport GynaeCalendarView from \"./Gynae/calendar-admin/CalendarView\";\n//----------------------------\n\n/// GP -------------------\nimport GPBookingTable from \"./GP/BookingTable\";\nimport GPDashboardPreview from \"./GP/DashboardPreview\";\nimport GPFindByRef from \"./GP/FindByRef\";\nimport GPCalendarView from \"./GP/calendar-admin/CalendarView\";\n//----------------------------\n\n/// GP -------------------\nimport STDBookingTable from \"./STD/BookingTable\";\nimport STDDashboardPreview from \"./STD/DashboardPreview\";\nimport STDFindByRef from \"./STD/FindByRef\";\nimport STDCalendarView from \"./STD/calendar-admin/CalendarView\";\n//----------------------------\n\n// OV Admin ----------------\nimport OVBookingTable from \"./OV/BookingTable\";\nimport OVCalendarView from \"./OV/calendar-admin/CalendarView\";\nimport PatientsTable from \"./OV/PatientsTable\";\n\n//---------------\n\nexport const MenuList_OV_Admin = [\n  {\n    index: 0,\n    id: `recentBookings`,\n    title: `Recent Bookings`,\n    icon: <AutorenewIcon />,\n  },\n  {\n    index: 2,\n    id: `todayBookings`,\n    title: `Today's Bookings`,\n    icon: <NewReleasesIcon />,\n  },\n  {\n    index: 3,\n    id: `oldBookings`,\n    title: `Old Bookings`,\n    icon: <HistoryIcon />,\n  },\n  {\n    index: 4,\n    id: `futureBookings`,\n    title: `Future Bookings`,\n    icon: <TimelineIcon />,\n  },\n  {\n    index: 5,\n    id: `allBookings`,\n    title: `All Bookings`,\n    icon: <DescriptionIcon />,\n  },\n  {\n    index: 6,\n    id: `deletedBookings`,\n    title: `Archived Records`,\n    icon: <DeleteIcon />,\n  },\n  {\n    index: 7,\n    id: `calendarView`,\n    title: `Calendar View`,\n    icon: <DateRangeIcon />,\n  },\n  {\n    index: 8,\n    id: `patientsList`,\n    title: `Patients`,\n    icon: <AccessibilityIcon />,\n  },\n\n\n\n];\n\n\n\nexport const MenuList_Admin = [\n  { index: 0, id: `dashboard`, title: `Dashboard`, icon: <DashboardIcon /> },\n  {\n    index: 1,\n    id: `recentBookings`,\n    title: `Recent Bookings`,\n    icon: <AutorenewIcon />,\n  },\n  {\n    index: 2,\n    id: `todayBookings`,\n    title: `Today's Bookings`,\n    icon: <NewReleasesIcon />,\n  },\n  {\n    index: 3,\n    id: `oldBookings`,\n    title: `Old Bookings`,\n    icon: <HistoryIcon />,\n  },\n  {\n    index: 4,\n    id: `futureBookings`,\n    title: `Future Bookings`,\n    icon: <TimelineIcon />,\n  },\n  {\n    index: 5,\n    id: `allBookings`,\n    title: `All Bookings`,\n    icon: <DescriptionIcon />,\n  },\n  {\n    index: 6,\n    id: `deletedBookings`,\n    title: `Deleted Records`,\n    icon: <DeleteIcon />,\n  },\n\n  {\n    index: 7,\n    id: `calendarView`,\n    title: `Calendar View`,\n    icon: <DateRangeIcon />,\n  },\n\n  { index: 8, id: `findByRef`, title: `Find By Ref No`, icon: <SearchIcon /> },\n];\n\nexport const MenuList_Gynae = [\n  { index: 0, id: `dashboard`, title: `Dashboard`, icon: <DashboardIcon /> },\n  {\n    index: 1,\n    id: `recentBookings`,\n    title: `Recent Bookings`,\n    icon: <AutorenewIcon />,\n  },\n  {\n    index: 2,\n    id: `todayBookings`,\n    title: `Today's Bookings`,\n    icon: <NewReleasesIcon />,\n  },\n  {\n    index: 3,\n    id: `oldBookings`,\n    title: `Old Bookings`,\n    icon: <HistoryIcon />,\n  },\n  {\n    index: 4,\n    id: `futureBookings`,\n    title: `Future Bookings`,\n    icon: <TimelineIcon />,\n  },\n  {\n    index: 5,\n    id: `allBookings`,\n    title: `All Bookings`,\n    icon: <DescriptionIcon />,\n  },\n  {\n    index: 6,\n    id: `deletedBookings`,\n    title: `Deleted Records`,\n    icon: <DeleteIcon />,\n  },\n  {\n    index: 7,\n    id: `calendarView`,\n    title: `Calendar View`,\n    icon: <DateRangeIcon />,\n  },\n  { index: 8, id: `findByRef`, title: `Find By Ref No`, icon: <SearchIcon /> },\n];\n\nexport const MenuList_GP = [\n  { index: 0, id: `dashboard`, title: `Dashboard`, icon: <DashboardIcon /> },\n  {\n    index: 1,\n    id: `recentBookings`,\n    title: `Recent Bookings`,\n    icon: <AutorenewIcon />,\n  },\n  {\n    index: 2,\n    id: `todayBookings`,\n    title: `Today's Bookings`,\n    icon: <NewReleasesIcon />,\n  },\n  {\n    index: 3,\n    id: `oldBookings`,\n    title: `Old Bookings`,\n    icon: <HistoryIcon />,\n  },\n  {\n    index: 4,\n    id: `futureBookings`,\n    title: `Future Bookings`,\n    icon: <TimelineIcon />,\n  },\n  {\n    index: 5,\n    id: `allBookings`,\n    title: `All Bookings`,\n    icon: <DescriptionIcon />,\n  },\n  {\n    index: 6,\n    id: `deletedBookings`,\n    title: `Deleted Records`,\n    icon: <DeleteIcon />,\n  },\n  {\n    index: 7,\n    id: `calendarView`,\n    title: `Calendar View`,\n    icon: <DateRangeIcon />,\n  },\n  { index: 8, id: `findByRef`, title: `Find By Ref No`, icon: <SearchIcon /> },\n];\n\nexport const MenuList_STD = [\n  { index: 0, id: `dashboard`, title: `Dashboard`, icon: <DashboardIcon /> },\n  {\n    index: 1,\n    id: `recentBookings`,\n    title: `Recent Bookings`,\n    icon: <AutorenewIcon />,\n  },\n  {\n    index: 2,\n    id: `todayBookings`,\n    title: `Today's Bookings`,\n    icon: <NewReleasesIcon />,\n  },\n  {\n    index: 3,\n    id: `oldBookings`,\n    title: `Old Bookings`,\n    icon: <HistoryIcon />,\n  },\n  {\n    index: 4,\n    id: `futureBookings`,\n    title: `Future Bookings`,\n    icon: <TimelineIcon />,\n  },\n  {\n    index: 5,\n    id: `allBookings`,\n    title: `All Bookings`,\n    icon: <DescriptionIcon />,\n  },\n  {\n    index: 6,\n    id: `deletedBookings`,\n    title: `Deleted Records`,\n    icon: <DeleteIcon />,\n  },\n  {\n    index: 7,\n    id: `calendarView`,\n    title: `Calendar View`,\n    icon: <DateRangeIcon />,\n  },\n  { index: 8, id: `findByRef`, title: `Find By Ref No`, icon: <SearchIcon /> },\n];\n\nexport const MenuList_PCR = [\n  { index: 0, id: `dashboard`, title: `Dashboard`, icon: <DashboardIcon /> },\n  {\n    index: 1,\n    id: `recentBookings`,\n    title: `Recent Bookings`,\n    icon: <AutorenewIcon />,\n  },\n  {\n    index: 2,\n    id: `todayBookings`,\n    title: `Today's Bookings`,\n    icon: <NewReleasesIcon />,\n  },\n  {\n    index: 3,\n    id: `liveBookings`,\n    title: `Live Bookings`,\n    icon: <LiveTvIcon />,\n  },\n  { index: 4, id: `oldBookings`, title: `Old Bookings`, icon: <HistoryIcon /> },\n  {\n    index: 5,\n    id: `futureBookings`,\n    title: `Future Bookings`,\n    icon: <TimelineIcon />,\n  },\n  {\n    index: 6,\n    id: `allBookings`,\n    title: `All Bookings`,\n    icon: <DescriptionIcon />,\n  },\n  {\n    index: 7,\n    id: `completedBookings`,\n    title: `Completed Bookings`,\n    icon: <PlaylistAddCheckIcon />,\n  },\n  {\n    index: 8,\n    id: `positiveBookings`,\n    title: `Positive Results`,\n    icon: <AddCircleOutlineIcon />,\n  },\n  {\n    index: 9,\n    id: `latebookings`,\n    title: `40 Hours Late`,\n    icon: <HourglassEmptyIcon />,\n  },\n  {\n    index: 10,\n    id: `deletedBookings`,\n    title: `Deleted Records`,\n    icon: <DeleteIcon />,\n  },\n  {\n    index: 11,\n    id: `trBookings`,\n    title: `TR Bookings`,\n    icon: <AirplanemodeActiveIcon />,\n  },\n  {\n    index: 12,\n    id: `unmatchedRecords`,\n    title: `Unmatched Records`,\n    icon: <WarningIcon />,\n  },\n  {\n    index: 13,\n    id: `calendarView`,\n    title: `Calendar View`,\n    icon: <DateRangeIcon />,\n  },\n  // {\n  //   index: 14,\n  //   id: `adminCalendarView`,\n  //   title: `Admin Calendar`,\n  //   icon: <EventNoteIcon />,\n  // },\n  { index: 15, id: `findByRef`, title: `Find By Ref No`, icon: <SearchIcon /> },\n];\n\nexport const getMenuContent = (role, index) => {\n   if (role === \"ovadmin\") {\n    switch (index) {\n      case 0:\n        return <OVBookingTable date=\"recent\" />;\n      case 2:\n        return <OVBookingTable date=\"today\" />;\n      case 3:\n        return <OVBookingTable date=\"old\" />;\n      case 4:\n        return <OVBookingTable date=\"future\" />;\n      case 5:\n        return <OVBookingTable date=\"all\" />;\n      case 6:\n        return <OVBookingTable date=\"deleted\" />;\n      case 7:\n        return <OVCalendarView />;  \n      case 8:\n        return <PatientsTable />;  \n  \n      default:\n        return `Page Not Found!`;\n    }\n  } else {\n    return `Page Not Found!`;\n  }\n};\n\nexport const getMenuRole = (role) => {\n  switch (role) {\n    case \"ovadmin\":\n      return MenuList_OV_Admin;\n    default:\n      return [];\n  }\n};\n\nexport const getMenuId = (role, index) => {\n  const MenuList = getMenuRole(role);\n  for (var i = 0; i < MenuList.length; i++) {\n    if (MenuList[i].index === index) {\n      return MenuList[i].id;\n    }\n  }\n\n  return `Page Not Found!`;\n};\n\nexport const getMenuIndex = (role, id) => {\n  const MenuList = getMenuRole(role);\n  for (var i = 0; i < MenuList.length; i++) {\n    if (MenuList[i].id === id) {\n      return MenuList[i].index;\n    }\n  }\n\n  return -1;\n};\n","export const getRole = () => {\n    return sessionStorage.getItem('medexadmin-role')\n}\n\nexport const setRole = (role) => {\n    return sessionStorage.setItem('medexadmin-role', role)\n}\n\nexport const clearRole = (role) => {\n    return sessionStorage.removeItem('medexadmin-role')\n}","import React from \"react\";\nimport Avatar from \"@material-ui/core/Avatar\";\nimport Button from \"@material-ui/core/Button\";\nimport CssBaseline from \"@material-ui/core/CssBaseline\";\nimport TextField from \"@material-ui/core/TextField\";\nimport Link from \"@material-ui/core/Link\";\nimport Box from \"@material-ui/core/Box\";\nimport LockOutlinedIcon from \"@material-ui/icons/LockOutlined\";\nimport Typography from \"@material-ui/core/Typography\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport Container from \"@material-ui/core/Container\";\nimport GlobalState from \"./GlobalState\";\nimport Alert from \"@material-ui/lab/Alert\";\n\nimport logoImage from \"./images/optimal-vision-logo.png\"\n\nimport {\n  Grid,\n  AppBar,\n  Checkbox,\n  FormControl,\n  FormControlLabel,\n  InputAdornment,\n  InputLabel,\n  OutlinedInput,\n  Paper,\n  Backdrop,\n  CircularProgress,\n} from \"@material-ui/core\";\nimport { IconButton, Toolbar } from \"@material-ui/core\";\nimport { Visibility, VisibilityOff } from \"@material-ui/icons\";\nimport clsx from \"clsx\";\nimport Copyright from \"./CopyRight\";\n\nimport { useHistory } from \"react-router-dom\";\nimport UserService from \"./services/UserService\";\nimport { getMenuId } from \"./MenuList\";\n\nimport { useMediaQuery } from 'react-responsive'\nimport { borderRadius } from \"@material-ui/system\";\nimport { setRole } from \"./Role\";\nimport { getGlobalPath } from \"./GlobalPath\";\n\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    minHeight: \"100vh\",\n  },\n  image: {\n    backgroundImage: \"url(/images/bg.jpg)\",\n    backgroundRepeat: \"no-repeat\",\n    backgroundColor:\n      theme.palette.type === \"light\"\n        ? theme.palette.grey[50]\n        : theme.palette.grey[900],\n    backgroundSize: \"cover\",\n    backgroundPosition: \"center\",\n  },\n  paper: {\n    // margin: theme.spacing(15, 2),\n    padding: theme.spacing(4,4),\n    display: \"flex\",\n    flexDirection: \"column\",\n    alignItems: \"center\",\n    position: \"relative\"\n    // border: `2px solid ${theme.palette.primary.main}`,\n    // borderRadius: \"8px\"\n  },\n  avatar: {\n    margin: theme.spacing(1),\n    backgroundColor: theme.palette.secondary.main,\n  },\n  form: {\n    width: \"100%\", // Fix IE 11 issue.\n    marginTop: theme.spacing(1),\n  },\n  submit: {\n    margin: theme.spacing(3, 0, 2),\n    color: \"#f5f5f5\",\n  },\n\n  margin: {\n    marginTop: theme.spacing(2),\n    marginBottom: theme.spacing(2),\n  },\n\n  alert: {\n    width: \"100%\",\n    marginTop: theme.spacing(2),\n    marginBottom: theme.spacing(2),\n  },\n\n  backdrop: {\n    zIndex: theme.zIndex.drawer + 1,\n    color: \"#fff\",\n  },\n\n  pageBg:{\n    paddingTop: theme.spacing(5),\n   \n    background: \"linear-gradient(274deg, rgba(255,255,255,1) 0%, rgba(255,255,255,1) 5%, rgba(210,210,210,1) 100%)\",\n    height: \"100vh\",\n    margin: 0,\n    padding:0,\n  },\n\n  appbarCenter: {\n    position: \"absolute\",\n    // width: \"260px\",\n    top: \"-40px\",\n    right: \"0\",\n    marginLeft: \"-145px\",\n    alignItems: \"center\",\n    justify: \"center\",\n    display: \"flex\",\n    backgroundColor: \"#fff\",\n    padding: \"5px 20px 15px 20px\",\n    borderRadius: \"8px\"\n  },\n\n  logoImage: {\n    width: \"30px\",\n    height: \"30px\",\n    marginLeft: \"0px\",\n  },\n\n  appbarTitle: {\n    color: \"#00a1c5\",\n    fontSize: \"1.2rem\",\n    fontWeight: \"500\",\n    marginRight: \"15px\",\n  },\n\n  adminPanelLabel: {\n    color: theme.palette.secondary.main, \n    fontWeight: \"600\",\n    marginBottom:\"20px\"\n  }\n\n\n\n\n}));\n\nexport default function SignIn() {\n  const classes = useStyles();\n  const [state, setState] = React.useContext(GlobalState);\n  const isMobile = useMediaQuery({ maxWidth: 1224 })\n\n\n  let history = useHistory();\n\n  const [password, setPassword] = React.useState(\"\");\n\n  const [username, setUsername] = React.useState(\"\");\n\n  const [saveChecked, setSaveChecked] = React.useState(false);\n\n  const [showPassword, setShowPassword] = React.useState(false);\n\n  const [error, setError] = React.useState(null);\n  const [submiting, setSubmiting] = React.useState(false);\n\n  const signIn = () => {\n    setSubmiting(true);\n\n    UserService.signIn({\n      username: username,\n      password: password,\n    })\n      .then((res) => {\n        setSubmiting(false);\n        if (res.data.status === \"OK\") {\n          setError(null);\n          const token = res.data.token;\n          if (saveChecked) {\n            localStorage.setItem(\"ovadmin-auth-token\", token);\n          } else {\n            sessionStorage.setItem(\"ovadmin-auth-token\", token);\n          }\n\n          setState((state) => ({ ...state, signedIn: true }));\n          setRole(res.data.roles[0])\n          setState((state) => ({ ...state, currentMenuIndex: 0 }));\n          history.push(getGlobalPath(`/${getMenuId(res.data.roles[0], 0)}`));\n        } else if (res.data.status === \"FAILED\") {\n          setError(res.data.error);\n        } else {\n          setError(\"Sorry, something went wrong, please try again.\");\n        }\n      })\n      .catch((err) => {\n        setSubmiting(false);\n        console.error(err);\n        setError(\"Sorry, something went wrong, please try again.\");\n      });\n  };\n\n  const usernameChanged = (event) => {\n    setUsername(event.target.value);\n    setError(null);\n  };\n\n  const passwordChanged = (event) => {\n    setPassword(event.target.value);\n    setError(null);\n  };\n\n  const handleClickShowPassword = () => {\n    setShowPassword(!showPassword);\n  };\n\n  const handleMouseDownPassword = (event) => {\n    event.preventDefault();\n  };\n\n  const saveCheckedChanged = (event) => {\n    setSaveChecked(event.target.checked);\n  };\n\n  return (\n    <div className={classes.pageBg}>\n      <Container component=\"main\" maxWidth=\"xs\">\n        <CssBaseline />\n\n        <Paper elevation={20}>\n          <div className={classes.paper}>\n            {/* <div className={classes.appbarCenter}>\n              <span className={classes.appbarTitle}>\n                Medical Express Clinic\n              </span>\n\n              <img\n                className={classes.logoImage}\n                src={getGlobalPath(\"/images/logo.png\")}\n                alt=\"logo image\"\n              />\n            </div> */}\n\n            <img src={logoImage} alt=\"Optimal Vision\" style={{marginBottom:\"20px\"}}/>\n\n            <Avatar className={classes.avatar}>\n              <LockOutlinedIcon />\n            </Avatar>\n            <Typography\n              component=\"h1\"\n              variant=\"h6\"\n              className={classes.adminPanelLabel}\n            >\n              Admin Panel\n            </Typography>\n\n            {error && (\n              <div className={classes.alert}>\n                <Alert severity=\"error\">\n                  {\" \"}\n                  <div style={{ lineHeight: \"1.5rem\", textAlign: \"justify\" }}>\n                    {error}\n                  </div>\n                </Alert>\n              </div>\n            )}\n\n            <TextField\n              variant=\"outlined\"\n              margin=\"normal\"\n              required\n              fullWidth\n              id=\"username\"\n              label=\"Username\"\n              name=\"email\"\n              autoComplete=\"username\"\n              value={username}\n              onChange={usernameChanged}\n              on\n              autoFocus\n            />\n            <FormControl\n              fullWidth\n              required\n              className={clsx(classes.margin, classes.textField)}\n              variant=\"outlined\"\n              onKeyPress={(event) => {\n                if (event.key === \"Enter\") {\n                  signIn();\n                }\n              }}\n            >\n              <InputLabel htmlFor=\"outlined-adornment-password\">\n                {\" \"}\n                Password{\" \"}\n              </InputLabel>\n              <OutlinedInput\n                id=\"outlined-adornment-password\"\n                name=\"outlined-adornment-password\"\n                type={showPassword ? \"text\" : \"password\"}\n                value={password}\n                onChange={passwordChanged}\n                autoComplete=\"current-password\"\n                endAdornment={\n                  <InputAdornment position=\"end\">\n                    <IconButton\n                      tabindex=\"-1\"\n                      aria-label=\"toggle password visibility\"\n                      onClick={handleClickShowPassword}\n                      onMouseDown={handleMouseDownPassword}\n                    >\n                      {showPassword ? <Visibility /> : <VisibilityOff />}\n                    </IconButton>\n                  </InputAdornment>\n                }\n                labelWidth={100}\n              />\n            </FormControl>\n\n            <FormControlLabel\n              style={{ textAlign: \"left\", width: \"100%\" }}\n              control={\n                <Checkbox\n                  value=\"remember\"\n                  color=\"primary\"\n                  checked={saveChecked}\n                  onChange={saveCheckedChanged}\n                />\n              }\n              label=\"Remember me\"\n            />\n            <Button\n              fullWidth\n              variant=\"contained\"\n              color=\"primary\"\n              onClick={signIn}\n              className={classes.submit}\n            >\n              Sign In\n            </Button>\n          </div>\n        </Paper>\n\n        <Backdrop className={classes.backdrop} open={submiting}>\n          <Grid\n            container\n            direction=\"column\"\n            justify=\"center\"\n            alignItems=\"center\"\n            spacing={2}\n          >\n            <Grid item>\n              <CircularProgress color=\"inherit\" />\n            </Grid>\n            <Grid item>\n              <span style={{ textAlign: \"center\", color: \"#fff\" }}>\n                {\" \"}\n                {/* Please wait ...{\" \"} */}\n              </span>\n            </Grid>\n          </Grid>\n        </Backdrop>\n\n        <Box mt={5} style={{ color: \"#eee\" }}>\n          {/* <Copyright /> */}\n        </Box>\n      </Container>\n    </div>\n  );\n}\n","import React, { useEffect } from \"react\";\nimport clsx from \"clsx\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport { useHistory } from \"react-router-dom\";\n\nimport {\n  Badge,\n  Divider,\n  Grid,\n  IconButton,\n  ListItemIcon,\n  Tooltip,\n} from \"@material-ui/core\";\nimport GlobalState from \"./GlobalState\";\nimport { List, ListItem } from \"@material-ui/core\";\n\nimport ListItemText from \"@material-ui/core/ListItemText\";\nimport { getMenuRole, getMenuId } from \"./MenuList\";\nimport { border, borderBottom } from \"@material-ui/system\";\nimport { getGlobalPath } from \"./GlobalPath\";\n\nimport GyaneBookService from \"./Gynae/services/BookService\"\n\nconst useStyles = makeStyles((theme) => ({\n  paper: {\n    padding: theme.spacing(2),\n    display: \"flex\",\n    overflow: \"auto\",\n    flexDirection: \"column\",\n  },\n  fixedHeight: {\n    height: 240,\n  },\n\n  icon: {\n    fontSize: \"1rem\",\n    color: \"#777\",\n    cursor: \"pointer\",\n    paddingTop: \"10px\",\n    paddingBottom: \"8px\",\n    borderBottom: \"1px solid #eee\",\n  },\n\n  iconSelected: {\n    color: \"#fff\",\n    backgroundColor:  theme.palette.primary.main,\n    transition: \"all 0.1s ease-in-out\"\n  },\n\n  menuText: {\n    fontSize: \"1rem\",\n    fontWeight: \"500\"\n  },\n\n  Badge:{\n    backgroundColor: \"rgb(220, 0, 78)\",\n    color: \"#fff\",\n    fontWeight: \"600\",\n    textAlign:\"center\",\n    borderRadius: \"50%\",\n    fontSize: \"0.85rem\",\n    lineHeight: \"0.85rem\",\n    padding:\"7px\",\n    marginTop:\"9px\",\n    width:\"28px\"\n\n  }\n}));\n\nexport default function MyMenu() {\n  const classes = useStyles();\n  const [state, setState] = React.useContext(GlobalState);\n\n  const [selectedIndex, setSelectedIndex] = React.useState(0);\n\n  let history = useHistory();\n\n  const updateShouldRefundsCount = async () =>\n  {\n    try{\n      const res = await GyaneBookService.getShouldRefundsCount()\n      if (res && res.data && res.data.status === \"OK\")\n      {\n        setState(state => ({...state, shouldRefunsCount: res.data.count}))\n      }\n    }\n    catch(ex)\n    {\n      console.error(ex)\n    }\n  }\n\n  useEffect(() => {\n    setSelectedIndex(state.currentMenuIndex);\n    updateShouldRefundsCount()\n  }, [state.currentMenuIndex]);\n\n  const handleListItemClick = (event, index) => {\n    setSelectedIndex(index);\n    setState((state) => ({ ...state, currentMenuIndex: index }));\n\n    history.push(getGlobalPath(`/${getMenuId(state.role,index)}`));\n  };\n\n  return (\n    <React.Fragment>\n      <List>\n        {state.role &&\n          getMenuRole(state.role).map(\n            (item) =>\n              !item.hidden && (\n                // <ListItem button selected={selectedIndex === item.index} onClick={(event) => handleListItemClick(event, item.index)}>\n                // <ListItemIcon>\n                //     {item.icon}\n                // </ListItemIcon>\n                // <ListItemText primary={`${item.title}`} />\n                // </ListItem>\n                <React.Fragment key={`${item.id}`}>\n                  <div\n                    key={`${item.id}`}\n                    className={clsx(\n                      classes.icon,\n                      selectedIndex === item.index && classes.iconSelected\n                    )}\n                    onClick={(event) => handleListItemClick(event, item.index)}\n                  >\n                    <Grid\n                      container\n                      direction=\"row\"\n                      justify=\"flex-start\"\n                      alignItems=\"flex-start\"\n                      spacing={3}\n                      style={{paddingLeft:\"15px\"}}\n                    >\n                      <Grid item>{item.icon}</Grid>\n\n                      <Grid item style={{textAlign:\"left\"}}>\n                        <span\n                          className={classes.menuText}\n                        >{`${item.title}`}</span>{\" \"}\n                      </Grid>\n\n                      {state.role === \"gynae\" && item.id === \"deletedBookings\" && state.shouldRefunsCount > 0 && (\n                        <span className={classes.Badge}> {state.shouldRefunsCount} </span>\n                      )}\n\n                    </Grid>\n                  </div>\n                </React.Fragment>\n              )\n          )}\n      </List>\n    </React.Fragment>\n  );\n}\n","import React, { useEffect } from \"react\";\nimport clsx from \"clsx\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport CssBaseline from \"@material-ui/core/CssBaseline\";\nimport Drawer from \"@material-ui/core/Drawer\";\nimport Box from \"@material-ui/core/Box\";\nimport AppBar from \"@material-ui/core/AppBar\";\nimport Toolbar from \"@material-ui/core/Toolbar\";\nimport Typography from \"@material-ui/core/Typography\";\nimport Divider from \"@material-ui/core/Divider\";\nimport IconButton from \"@material-ui/core/IconButton\";\nimport Container from \"@material-ui/core/Container\";\nimport Link from \"@material-ui/core/Link\";\nimport MenuIcon from \"@material-ui/icons/Menu\";\nimport ChevronLeftIcon from \"@material-ui/icons/ChevronLeft\";\n\nimport { Avatar, Button, Grid, Tooltip, withStyles } from \"@material-ui/core\";\nimport GlobalState from \"./GlobalState\";\nimport MyMenu from \"./Menu\";\nimport { getMenuContent, getMenuId, getMenuIndex } from \"./MenuList\";\n\nimport { useLocation, useHistory } from \"react-router-dom\";\nimport Copyright from \"./CopyRight\";\nimport { useMediaQuery } from \"react-responsive\";\nimport PersonOutlineIcon from \"@material-ui/icons/PersonOutline\";\nimport AppsIcon from \"@material-ui/icons/Apps\";\nimport MenuItem from \"@material-ui/core/MenuItem\";\nimport Menu from \"@material-ui/core/Menu\";\nimport dateformat from \"dateformat\";\nimport { getRole, setRole, clearRole } from \"./Role\";\nimport { getGlobalPath, getMenuIdFromGlobalPath } from \"./GlobalPath\";\n\nimport logoImage from \"./images/optimal-vision-logo.png\"\n\nconst drawerWidth = 240;\n\nconst StyledMenu = withStyles((theme) => ({\n  paper: {\n    marginTop: \"10px\",\n    // marginRight: \"5px\",\n    width: \"200px\",\n    height: \"200px\",\n    border: `1px solid #ddd`,\n    borderRadius: \"10px\",\n    paddingTop: \"10px\",\n  },\n}))((props) => (\n  <Menu\n    elevation={4}\n    getContentAnchorEl={null}\n    anchorOrigin={{\n      vertical: \"bottom\",\n      horizontal: \"center\",\n    }}\n    transformOrigin={{\n      vertical: \"top\",\n      horizontal: \"center\",\n    }}\n    {...props}\n  />\n));\n\nconst StyledMenuApps = withStyles((theme) => ({\n  paper: {\n    marginTop: \"5px\",\n    // marginRight: \"5px\",\n    width: \"280px\",\n    height: \"280px\",\n    border: `1px solid #ddd`,\n    borderRadius: \"10px\",\n    padding: \"10px\",\n  },\n}))((props) => (\n  <Menu\n    elevation={4}\n    getContentAnchorEl={null}\n    anchorOrigin={{\n      vertical: \"bottom\",\n      horizontal: \"center\",\n    }}\n    transformOrigin={{\n      vertical: \"top\",\n      horizontal: \"center\",\n    }}\n    {...props}\n  />\n));\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    display: \"flex\",\n  },\n  toolbar: {\n    paddingRight: 24, // keep right padding when drawer closed\n  },\n  toolbarIcon: {\n    display: \"flex\",\n    alignItems: \"center\",\n    justifyContent: \"flex-end\",\n    padding: \"0 8px\",\n    ...theme.mixins.toolbar,\n  },\n  appBar: {\n    zIndex: theme.zIndex.drawer + 1,\n    transition: theme.transitions.create([\"width\", \"margin\"], {\n      easing: theme.transitions.easing.sharp,\n      duration: theme.transitions.duration.leavingScreen,\n    }),\n  },\n  appBarShift: {\n    marginLeft: drawerWidth,\n    width: `calc(100% - ${drawerWidth}px)`,\n    transition: theme.transitions.create([\"width\", \"margin\"], {\n      easing: theme.transitions.easing.sharp,\n      duration: theme.transitions.duration.enteringScreen,\n    }),\n  },\n  menuButton: {\n    // marginRight: 36,\n  },\n  menuButtonHidden: {\n    display: \"none\",\n  },\n  title: {\n    flexGrow: 1,\n  },\n  drawerPaper: {\n    position: \"relative\",\n    whiteSpace: \"nowrap\",\n    overflowX: \"hidden\",\n    width: drawerWidth,\n    transition: theme.transitions.create(\"width\", {\n      easing: theme.transitions.easing.sharp,\n      duration: theme.transitions.duration.enteringScreen,\n    }),\n\n    [theme.breakpoints.down(\"sm\")]: {\n      opacity: 0.9,\n    },\n  },\n  drawerPaperClose: {\n    overflowX: \"hidden\",\n    transition: theme.transitions.create(\"width\", {\n      easing: theme.transitions.easing.sharp,\n      duration: theme.transitions.duration.leavingScreen,\n    }),\n    width: theme.spacing(7),\n    [theme.breakpoints.up(\"sm\")]: {\n      width: theme.spacing(9),\n    },\n  },\n  appBarSpacer: theme.mixins.toolbar,\n  content: {\n    flexGrow: 1,\n    height: \"100vh\",\n    overflow: \"auto\",\n  },\n  container: {\n    paddingTop: theme.spacing(2),\n    paddingBottom: theme.spacing(2),\n  },\n  paper: {\n    padding: theme.spacing(2),\n    display: \"flex\",\n    overflow: \"auto\",\n    flexDirection: \"column\",\n  },\n  fixedHeight: {\n    height: 240,\n  },\n\n  appbarTitle: {\n    color: \"#00a1c5\",\n    fontSize: \"1.2rem\",\n    fontWeight: \"500\",\n    marginRight: \"15px\",\n  },\n\n  appbarCenter: {\n    position: \"fixed\",\n    width: \"260px\",\n    top: \"10px\",\n    left: \"50%\",\n    marginLeft: \"-130px\",\n    alignItems: \"center\",\n    justify: \"center\",\n    display: \"flex\",\n  },\n\n  logoImage: {\n    width: \"204px\",\n    height: \"45px\",\n    // marginLeft: \"0px\",\n  },\n\n  logoImageMenu: {\n    width: \"136px\",\n    height: \"30px\",\n  },\n\n\n  userAvatar: {\n    backgroundColor: \"#fff\",\n    borderColor: \"#aaa\",\n    border: \"1px solid\",\n    color: \"#aaa\",\n    cursor: \"pointer\",\n  },\n\n  userAvatarSelected: {\n    backgroundColor: \"#fff\",\n    borderColor: theme.palette.primary.main,\n    border: \"1px solid\",\n    color: theme.palette.primary.main,\n    cursor: \"pointer\",\n  },\n\n  userAvatarBig: {\n    backgroundColor: \"#fff\",\n    borderColor: theme.palette.primary.main,\n    border: \"1px solid\",\n    color: theme.palette.primary.main,\n    width: \"60px\",\n    height: \"60px\",\n  },\n\n  appBarText: {\n    color: \"#888\",\n    [theme.breakpoints.down(\"sm\")]: {\n      display: \"none\",\n    },\n  },\n\n  appBarAppsIcon: {\n    // color: \"#888\",\n    cursor: \"pointer\",\n    fontSize: \"1.8rem\",\n  },\n\n  appBarAppsIconSelected: {\n    cursor: \"pointer\",\n    fontSize: \"1.8rem\",\n    color: theme.palette.primary.main,\n  },\n\n  usernameLabel: {\n    fontSize: \"1.2rem\",\n    color: theme.palette.primary.main,\n    marginTop: \"5px\",\n    marginBottom: \"5px\",\n  },\n\n  lastLoginLabel: {\n    color: \"#777\",\n    paddingTop: \"5px\",\n  },\n\n  appsLogo: {\n    width: \"70px\",\n    height: \"70px\",\n  },\n\n  appsBox: {\n    cursor: \"pointer\",\n    transition: \"all 0.1s ease-in-out\",\n    padding: \"2px\",\n    borderBottom: `5px solid #fff`,\n    borderRadius: \"5px\",\n    // border: \"2px solid #fff\",\n    \"&:hover\": {\n      //      border: `2px solid ${theme.palette.primary.main}`,\n      //      borderRadius: \"10px\",\n      borderBottom: `5px solid ${theme.palette.primary.main}`,\n      transition: \"all 0.1s ease-in-out\",\n    },\n  },\n\n  appsBoxSelected: {\n    cursor: \"pointer\",\n    transition: \"all 0.1s ease-in-out\",\n    padding: \"2px\",\n    borderBottom: `5px solid${theme.palette.primary.light}`,\n    borderRadius: \"5px\",\n    // border: \"2px solid #fff\",\n    \"&:hover\": {\n      //      border: `2px solid ${theme.palette.primary.main}`,\n      //      borderRadius: \"10px\",\n      borderBottom: `5px solid ${theme.palette.primary.light}`,\n      transition: \"all 0.1s ease-in-out\",\n    },\n  },\n\n  appsAdminLabel: {\n    color: \"#0264d4\",\n    fontWeight: \"600\",\n    fontSize: \"0.95rem\",\n    marginTop: \"-10px\",\n  },\n\n  appsPCRLabel: {\n    color: \"#4faef7\",\n    fontWeight: \"600\",\n    fontSize: \"0.95rem\",\n    marginTop: \"-10px\",\n  },\n\n  appsGynaeLabel: {\n    color: \"#e83caf\",\n    fontWeight: \"600\",\n    fontSize: \"0.95rem\",\n    marginTop: \"-10px\",\n  },\n\n  appsGPLabel: {\n    color: \"#f68529\",\n    fontWeight: \"600\",\n    fontSize: \"0.95rem\",\n    marginTop: \"-10px\",\n  },\n\n  appsSTDLabel: {\n    color: \"#f68529\",\n    fontWeight: \"600\",\n    fontSize: \"0.95rem\",\n    marginTop: \"-10px\",\n  },\n\n\n  \n\n  appsInToolbar: {\n    position: \"fixed\",\n    left: \"60px\",\n    top: \"-5px\",\n    height: \"65px\",\n    width: \"200px\",\n    overflow: \"hidden\",\n  },\n}));\n\nexport default function Dashboard() {\n  const classes = useStyles();\n  const [state, setState] = React.useContext(GlobalState);\n  const isMobile = useMediaQuery({ maxWidth: 768 });\n\n  const [open, setOpen] = React.useState(isMobile ? false : true);\n\n  const [currentMenuIndex, setCurrentMenuIndex] = React.useState(0);\n\n  const [anchorUserAvatar, setAnchorUserAvatar] = React.useState(null);\n  const handleUserAvatarClick = (event) => {\n    setAnchorUserAvatar(event.currentTarget);\n  };\n  const handleUserAvatarClose = () => {\n    setAnchorUserAvatar(null);\n  };\n\n  const [anchorApps, setAnchorApps] = React.useState(null);\n  const handleAppsClick = (event) => {\n    setAnchorApps(event.currentTarget);\n  };\n  const handleAppsClose = () => {\n    setAnchorApps(null);\n  };\n\n  const history = useHistory();\n\n  let location = useLocation();\n  React.useEffect(() => {\n    if (!state.role) return;\n    const index = getMenuIndex(\n      state.role,\n      getMenuIdFromGlobalPath(location.pathname)\n    );\n    setState((state) => ({ ...state, currentMenuIndex: index }));\n  }, [location]);\n\n  useEffect(() => {\n    window.scrollTo(0, 0);\n  }, []);\n\n  useEffect(() => {\n    setCurrentMenuIndex(state.currentMenuIndex);\n    if (isMobile) {\n      setOpen(false);\n    }\n  }, [state.currentMenuIndex]);\n\n  const handleDrawerOpen = () => {\n    setOpen(!open);\n  };\n  const handleDrawerClose = () => {\n    setOpen(false);\n  };\n  const fixedHeightPaper = clsx(classes.paper, classes.fixedHeight);\n\n  const handleLogout = () => {\n    localStorage.removeItem(\"ovadmin-auth-token\");\n    sessionStorage.removeItem(\"ovadmin-auth-token\");\n    clearRole();\n\n    setState((state) => ({ signedIn: false }));\n    history.replace(\"./login\");\n  };\n\n  const appsClicked = (role) => {\n    setRole(role);\n    setState((state) => ({ ...state, role: role }));\n    history.push(getGlobalPath(`/${getMenuId(role, 0)}`));\n    handleAppsClose();\n  };\n\n  const getAppsLogo = (role) => {\n    switch (role) {\n      case \"admin\":\n        return (\n          <img\n            src={getGlobalPath(\"/images/admin.png\")}\n            className={classes.appsLogo}\n          />\n        );\n      case \"pcr\":\n        return (\n          <img\n            src={getGlobalPath(\"/images/corona.png\")}\n            className={classes.appsLogo}\n          />\n        );\n\n      case \"gynae\":\n        return (\n          <img\n            src={getGlobalPath(\"/images/woman.png\")}\n            className={classes.appsLogo}\n          />\n        );\n\n        case \"gp\":\n        return (\n          <img\n            src={getGlobalPath(\"/images/doctor.png\")}\n            className={classes.appsLogo}\n          />\n        ); \n\n        case \"std\":\n          return (\n            <img\n              src={getGlobalPath(\"/images/std-icon.png\")}\n              className={classes.appsLogo}\n            />\n          ); \n\n      default:\n        return null;\n    }\n  };\n\n  const getAppsLabel = (role) => {\n    switch (role) {\n      case \"admin\":\n        return <div className={classes.appsAdminLabel}> {\"Admin\"} </div>;\n      case \"pcr\":\n        return <div className={classes.appsPCRLabel}> {\"PCR\"} </div>;\n      case \"gynae\":\n        return <div className={classes.appsGynaeLabel}> {\"Gynae\"} </div>;\n        case \"gp\":\n          return <div className={classes.appsGPLabel}> {\"GP\"} </div>;\n          case \"std\":\n            return <div className={classes.appsSTDLabel}> {\"STD\"} </div>;\n  \n      default:\n        return null;\n    }\n  };\n\n  return (\n    <React.Fragment>\n      {state.userId && state.role && (\n        <React.Fragment>\n          <div className={classes.root}>\n            <CssBaseline />\n            <AppBar\n              style={{ backgroundColor: \"#fff\", color: \"#555\", height: \"60px\" }}\n              position=\"absolute\"\n              className={clsx(\n                classes.appBar,\n                false && open && classes.appBarShift\n              )}\n            >\n              <Toolbar className={classes.toolbar}>\n                <IconButton\n                  edge=\"start\"\n                  color=\"inherit\"\n                  aria-label=\"open drawer\"\n                  onClick={handleDrawerOpen}\n                  className={clsx(classes.menuButton)}\n                >\n                  <MenuIcon />\n                </IconButton>\n\n                <div className={classes.appsInToolbar}>\n                  <Grid container direction=\"row\" alignItems=\"center\">\n                    <Grid item>{getAppsLogo(state.role)}</Grid>\n                    <Grid item>\n                      <div style={{ paddingTop: \"8px\" }}>\n                        {getAppsLabel(state.role)}\n                      </div>\n                    </Grid>\n                  </Grid>\n                </div>\n\n                <div className={classes.appbarCenter}>\n                  {!isMobile && (\n                    <React.Fragment>\n                      <img\n                        className={classes.logoImage}\n                        src={logoImage}\n                        alt=\"logo image\"\n                      />\n                    </React.Fragment> \n                   )}\n                </div>\n\n                <div\n                  style={{\n                    display: \"flex\",\n                    justifyContent: \"flex-end\",\n                    width: \"100%\",\n                    paddingLeft: \"2%\",\n                  }}\n                >\n                  <Grid\n                    container\n                    spacing={2}\n                    direction=\"row-reverse\"\n                    justify=\"flex-start\"\n                    alignItems=\"center\"\n                  >\n                    <Grid item>\n                      <Avatar\n                        className={\n                          anchorUserAvatar\n                            ? classes.userAvatarSelected\n                            : classes.userAvatar\n                        }\n                        onClick={handleUserAvatarClick}\n                      >\n                        <IconButton>\n                          <PersonOutlineIcon />\n                        </IconButton>\n                      </Avatar>\n                    </Grid>\n\n                    {state.userId?.roles.find((e) => e === \"admin\") && (\n                      <Grid item>\n                        <IconButton onClick={handleAppsClick}>\n                          <AppsIcon\n                            className={\n                              anchorApps\n                                ? classes.appBarAppsIconSelected\n                                : classes.appBarAppsIcon\n                            }\n                          />\n                        </IconButton>\n                      </Grid>\n                    )}\n                  </Grid>\n                </div>\n              </Toolbar>\n            </AppBar>\n\n            <StyledMenu\n              id=\"user-avatar-menu\"\n              anchorEl={anchorUserAvatar}\n              keepMounted\n              open={Boolean(anchorUserAvatar)}\n              onClose={handleUserAvatarClose}\n            >\n              <Grid\n                container\n                direction=\"column\"\n                justify=\"center\"\n                alignItems=\"center\"\n              >\n                <Grid item>\n                  <Avatar className={classes.userAvatarBig}>\n                    <PersonOutlineIcon style={{ fontSize: \"2.5rem\" }} />\n                  </Avatar>\n                </Grid>\n                <Grid item>\n                  <div className={classes.usernameLabel}>\n                    {\" \"}\n                    {state.userId?.username}{\" \"}\n                  </div>\n                </Grid>\n                {/* <Grid item>\n                  <span style={{ color: \"#999\", fontSize: \"0.85rem\" }}>\n                    Logged in at :\n                  </span>\n                </Grid>\n                <Grid item>\n                  <div className={classes.lastLoginLabel}>\n                    {dateformat(state.userId?.lastLoginTimeStamp)}\n                  </div>\n                </Grid> */}\n\n                <Grid item>\n                  <Button\n                    onClick={handleLogout}\n                    variant=\"outlined\"\n                    color=\"secondary\"\n                    style={{\n                      marginTop: \"30px\",\n                      width: \"150px\",\n                      borderRadius: \"30px\",\n                    }}\n                  >\n                    Logout\n                  </Button>\n                </Grid>\n              </Grid>\n            </StyledMenu>\n\n            <StyledMenuApps\n              id=\"apps-menu\"\n              anchorEl={anchorApps}\n              keepMounted\n              open={Boolean(anchorApps)}\n              onClose={handleAppsClose}\n            >\n              <Grid container spacing={1}>\n                <Grid item>\n                  <Grid\n                    container\n                    direction=\"column\"\n                    justify=\"center\"\n                    alignItems=\"center\"\n                    className={\n                      state.role === \"admin\"\n                        ? classes.appsBoxSelected\n                        : classes.appsBox\n                    }\n                    onClick={() => appsClicked(\"admin\")}\n                  >\n                    <Grid item>{getAppsLogo(\"admin\")}</Grid>\n                    <Grid item>{getAppsLabel(\"admin\")}</Grid>\n                  </Grid>\n                </Grid>\n\n                <Grid item>\n                  <Grid\n                    container\n                    direction=\"column\"\n                    justify=\"center\"\n                    alignItems=\"center\"\n                    className={\n                      state.role === \"pcr\"\n                        ? classes.appsBoxSelected\n                        : classes.appsBox\n                    }\n                    onClick={() => appsClicked(\"pcr\")}\n                  >\n                    <Grid item>{getAppsLogo(\"pcr\")}</Grid>\n                    <Grid item>{getAppsLabel(\"pcr\")}</Grid>\n                  </Grid>\n                </Grid>\n\n                <Grid item>\n                  <Grid\n                    container\n                    direction=\"column\"\n                    justify=\"center\"\n                    alignItems=\"center\"\n                    className={\n                      state.role === \"gynae\"\n                        ? classes.appsBoxSelected\n                        : classes.appsBox\n                    }\n                    onClick={() => appsClicked(\"gynae\")}\n                  >\n                    <Grid item>{getAppsLogo(\"gynae\")}</Grid>\n                    <Grid item>{getAppsLabel(\"gynae\")}</Grid>\n                  </Grid>\n                </Grid>\n\n                <Grid item>\n                  <Grid\n                    container\n                    direction=\"column\"\n                    justify=\"center\"\n                    alignItems=\"center\"\n                    className={\n                      state.role === \"gp\"\n                        ? classes.appsBoxSelected\n                        : classes.appsBox\n                    }\n                    onClick={() => appsClicked(\"gp\")}\n                  >\n                    <Grid item>{getAppsLogo(\"gp\")}</Grid>\n                    <Grid item>{getAppsLabel(\"gp\")}</Grid>\n                  </Grid>\n                </Grid>\n\n                <Grid item>\n                  <Grid\n                    container\n                    direction=\"column\"\n                    justify=\"center\"\n                    alignItems=\"center\"\n                    className={\n                      state.role === \"std\"\n                        ? classes.appsBoxSelected\n                        : classes.appsBox\n                    }\n                    onClick={() => appsClicked(\"std\")}\n                  >\n                    <Grid item>{getAppsLogo(\"std\")}</Grid>\n                    <Grid item>{getAppsLabel(\"std\")}</Grid>\n                  </Grid>\n                </Grid>\n\n              </Grid>\n            </StyledMenuApps>\n\n            <Drawer\n              variant={isMobile ? \"temporary\" : \"persistent\"}\n              classes={{\n                paper: clsx(\n                  classes.drawerPaper,\n                  !open && classes.drawerPaperClose\n                ),\n              }}\n              open={open}\n            >\n              <div className={classes.toolbarIcon}>\n                <React.Fragment>\n                  <img\n                    className={classes.logoImageMenu}\n                    src={logoImage} \n                    alt=\"logo image\"\n\n                  />\n                </React.Fragment>\n                <IconButton onClick={handleDrawerClose}>\n                  <ChevronLeftIcon />\n                </IconButton>\n              </div>\n              <Divider />\n\n              <MyMenu />\n            </Drawer>\n\n            <main className={classes.content}>\n              <div className={classes.appBarSpacer} />\n              <Container\n                maxWidth={isMobile ? \"xs\" : \"xl\"}\n                className={classes.container}\n              >\n                {getMenuContent(state.role, currentMenuIndex)}\n              </Container>\n            </main>\n          </div>\n        </React.Fragment>\n      )}\n    </React.Fragment>\n  );\n}\n","import UserService from \"./services/UserService\";\n\nexport async function getUserIdFromToken(token)\n{\n    try{\n       const res  = await UserService.checkToken({token: token})\n       if (res.data.status === 'OK')\n        {\n            return {username: res.data.userId, forename: res.data.forename, surname: res.data.surname, roles:res.data.roles, lastLoginTimeStamp: res.data.lastLoginTimeStamp}\n        }\n       else\n        {\n            return null\n        }\n    }\n    catch(err)\n    {\n        return null\n    }\n  \n}","import React from 'react';\n\nimport CssBaseline from '@material-ui/core/CssBaseline';\n\nimport { makeStyles } from '@material-ui/core/styles';\n\nimport GlobalState from './GlobalState';\n\n\n\n\nimport SignIn from './SignIn';\nimport Dashboard from './Dashboard';\n\nimport { useLocation, useHistory} from \"react-router-dom\";\nimport { getUserIdFromToken } from './TokenVerifier';\nimport UserService from './services/UserService';\nimport { getMenuId } from './MenuList';\nimport { getRole, setRole } from './Role';\nimport { getGlobalPath } from './GlobalPath';\n\n\nconst useStyles = makeStyles((theme) => ({\n\n    appBar: {\n        position: 'static',\n        backgroundColor: \"#333\",\n        color: \"#fff\",\n        //alignItems: 'center'\n    \n      },\n\n      signOutButton:{\n        color: \"#fff\",\n        marginRight : \"20px\",\n        fontWeight: \"500\"\n      },\n\n      title: {\n        flexGrow : 1\n      }\n\n\n}));\n\nexport default function Navigator() {\n\n    const classes = useStyles();\n    const [state, setState] = React.useContext(GlobalState);\n\n    const [loaded, setLoaded] = React.useState(false)\n\n    let history = useHistory();\n\n    const handleSignOut = () =>\n    {\n      setState(state => ({...state, signedIn: false}));\n\n    }\n\n    let location = useLocation();\n\n    React.useEffect(() => {\n\n      const checkToken = async () =>\n      {\n        const authToken = localStorage.getItem('ovadmin-auth-token') || sessionStorage.getItem('ovadmin-auth-token');\n        UserService.setToken(authToken)\n\n         if (!authToken)\n        {\n          setState(state => ({...state, signedIn: false, signedUp: false, forgotPassword: false}));\n          setLoaded(true)\n          history.push(getGlobalPath('/login'));\n        }\n        else\n        {\n           const userId = await getUserIdFromToken(authToken);\n           if (!userId)\n           {\n              setState(state => ({...state, signedIn: false, signedUp: false, forgotPassword: false}));\n              history.push(getGlobalPath('/login'));\n           }\n           else if (location.pathname === getGlobalPath('/') || location.pathname === getGlobalPath('/#') || location.pathname.startsWith(getGlobalPath('/login')))\n           {\n            if (!getRole())\n            {\n             setRole(userId.roles[0])\n            }\n             setState(state => ({...state, signedIn: true, signedUp: false, forgotPassword: false, userId: userId, role: getRole()}));\n            \n             history.push(getGlobalPath(`/${getMenuId(getRole(),0)}`));\n           }\n           else\n           {\n              if (!getRole())\n              {\n               setRole(userId.roles[0])\n              }\n             setState(state => ({...state, signedIn: true, userId: userId, role: getRole()}));\n           }\n\n           setLoaded(true)\n        }\n      }\n\n      checkToken();\n   \n    }, [location.pathname]);\n\n    const getComponentFromState = () =>\n    {\n\n      if (state.signedIn)\n      {\n        return <Dashboard/>\n      }\n      else\n      {\n          return <SignIn/>    \n      }\n    }\n\n    return (\n        <React.Fragment>\n            <CssBaseline />\n\n            {\n              loaded && (\n                getComponentFromState()\n              )\n            }\n        \n        </React.Fragment>\n    );\n}","import React, { Fragment, Suspense, lazy } from \"react\";\nimport { MuiThemeProvider, CssBaseline } from \"@material-ui/core\";\nimport { BrowserRouter, Route, Switch } from \"react-router-dom\";\nimport theme from \"./theme\";\nimport GlobalStyles from \"./GlobalStyles\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nimport GlobalState from \"./GlobalState\";\nimport Navigator from './Navigator';\n\n\n\n\n// Configure JSS\n\n\nfunction App() {\n  const [state, setState] = React.useState({currentMenuIndex:0});\n\n  return (\n    <GlobalState.Provider value={[state, setState]}>\n      <BrowserRouter>\n        <MuiThemeProvider theme={theme}>\n          <CssBaseline />\n          <GlobalStyles />\n\n       \n\n              <Navigator/>\n\n       \n\n\n        </MuiThemeProvider>\n      </BrowserRouter>\n    </GlobalState.Provider>\n  );\n}\n\nserviceWorker.register();\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\n\nReactDOM.render(\n  <App />,\n  document.getElementById(\"root\")\n);\n","\n\n\nconst FormatDateFromString = (str) =>\n{\n    return `${str.substr(8,2)}-${str.substr(5,2)}-${str.substr(0,4)}`;\n}\n\nconst FormatDateFromStringWithSlash = (str) =>\n{\n    return `${str.substr(8,2)}/${str.substr(5,2)}/${str.substr(0,4)}`;\n}\n\nconst RevertFormatDateFromString = (str) =>\n{\n    return `${str.substr(6,4)}-${str.substr(3,2)}-${str.substr(0,2)}`;\n}\n\n\nconst FormatDateFromStringShortYear = (str) =>\n{\n    return `${str.substr(8,2)}-${str.substr(5,2)}-${str.substr(2,2)}`;\n}\n\n\n\nmodule.exports = {\n    FormatDateFromString : FormatDateFromString,\n    FormatDateFromStringShortYear : FormatDateFromStringShortYear,\n    RevertFormatDateFromString: RevertFormatDateFromString,\n    FormatDateFromStringWithSlash: FormatDateFromStringWithSlash\n}","\n\n\nconst FormatDateFromString = (str) =>\n{\n    return `${str.substr(8,2)}-${str.substr(5,2)}-${str.substr(0,4)}`;\n}\n\nconst FormatDateFromStringWithSlash = (str) =>\n{\n    return `${str.substr(8,2)}/${str.substr(5,2)}/${str.substr(0,4)}`;\n}\n\nconst RevertFormatDateFromString = (str) =>\n{\n    return `${str.substr(6,4)}-${str.substr(3,2)}-${str.substr(0,2)}`;\n}\n\n\nconst FormatDateFromStringShortYear = (str) =>\n{\n    return `${str.substr(8,2)}-${str.substr(5,2)}-${str.substr(2,2)}`;\n}\n\n\n\nmodule.exports = {\n    FormatDateFromString : FormatDateFromString,\n    FormatDateFromStringShortYear : FormatDateFromStringShortYear,\n    RevertFormatDateFromString: RevertFormatDateFromString,\n    FormatDateFromStringWithSlash: FormatDateFromStringWithSlash\n}","\n\n\nconst FormatDateFromString = (str) =>\n{\n    return `${str.substr(8,2)}-${str.substr(5,2)}-${str.substr(0,4)}`;\n}\n\nconst FormatDateFromStringWithSlash = (str) =>\n{\n    return `${str.substr(8,2)}/${str.substr(5,2)}/${str.substr(0,4)}`;\n}\n\nconst RevertFormatDateFromString = (str) =>\n{\n    return `${str.substr(6,4)}-${str.substr(3,2)}-${str.substr(0,2)}`;\n}\n\n\nconst FormatDateFromStringShortYear = (str) =>\n{\n    return `${str.substr(8,2)}-${str.substr(5,2)}-${str.substr(2,2)}`;\n}\n\n\n\nmodule.exports = {\n    FormatDateFromString : FormatDateFromString,\n    FormatDateFromStringShortYear : FormatDateFromStringShortYear,\n    RevertFormatDateFromString: RevertFormatDateFromString,\n    FormatDateFromStringWithSlash: FormatDateFromStringWithSlash\n}"],"sourceRoot":""}